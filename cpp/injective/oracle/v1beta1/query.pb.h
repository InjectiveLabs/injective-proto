// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "injective/oracle/v1beta1/oracle.pb.h"
#include "injective/oracle/v1beta1/genesis.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2foracle_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2foracle_2fv1beta1_2fquery_2eproto;
namespace injective {
namespace oracle {
namespace v1beta1 {
class OracleHistoryOptions;
struct OracleHistoryOptionsDefaultTypeInternal;
extern OracleHistoryOptionsDefaultTypeInternal _OracleHistoryOptions_default_instance_;
class PricePairState;
struct PricePairStateDefaultTypeInternal;
extern PricePairStateDefaultTypeInternal _PricePairState_default_instance_;
class QueryBandIBCPriceStatesRequest;
struct QueryBandIBCPriceStatesRequestDefaultTypeInternal;
extern QueryBandIBCPriceStatesRequestDefaultTypeInternal _QueryBandIBCPriceStatesRequest_default_instance_;
class QueryBandIBCPriceStatesResponse;
struct QueryBandIBCPriceStatesResponseDefaultTypeInternal;
extern QueryBandIBCPriceStatesResponseDefaultTypeInternal _QueryBandIBCPriceStatesResponse_default_instance_;
class QueryBandPriceStatesRequest;
struct QueryBandPriceStatesRequestDefaultTypeInternal;
extern QueryBandPriceStatesRequestDefaultTypeInternal _QueryBandPriceStatesRequest_default_instance_;
class QueryBandPriceStatesResponse;
struct QueryBandPriceStatesResponseDefaultTypeInternal;
extern QueryBandPriceStatesResponseDefaultTypeInternal _QueryBandPriceStatesResponse_default_instance_;
class QueryBandRelayersRequest;
struct QueryBandRelayersRequestDefaultTypeInternal;
extern QueryBandRelayersRequestDefaultTypeInternal _QueryBandRelayersRequest_default_instance_;
class QueryBandRelayersResponse;
struct QueryBandRelayersResponseDefaultTypeInternal;
extern QueryBandRelayersResponseDefaultTypeInternal _QueryBandRelayersResponse_default_instance_;
class QueryCoinbasePriceStatesRequest;
struct QueryCoinbasePriceStatesRequestDefaultTypeInternal;
extern QueryCoinbasePriceStatesRequestDefaultTypeInternal _QueryCoinbasePriceStatesRequest_default_instance_;
class QueryCoinbasePriceStatesResponse;
struct QueryCoinbasePriceStatesResponseDefaultTypeInternal;
extern QueryCoinbasePriceStatesResponseDefaultTypeInternal _QueryCoinbasePriceStatesResponse_default_instance_;
class QueryHistoricalPriceRecordsRequest;
struct QueryHistoricalPriceRecordsRequestDefaultTypeInternal;
extern QueryHistoricalPriceRecordsRequestDefaultTypeInternal _QueryHistoricalPriceRecordsRequest_default_instance_;
class QueryHistoricalPriceRecordsResponse;
struct QueryHistoricalPriceRecordsResponseDefaultTypeInternal;
extern QueryHistoricalPriceRecordsResponseDefaultTypeInternal _QueryHistoricalPriceRecordsResponse_default_instance_;
class QueryModuleStateRequest;
struct QueryModuleStateRequestDefaultTypeInternal;
extern QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
class QueryModuleStateResponse;
struct QueryModuleStateResponseDefaultTypeInternal;
extern QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
class QueryOraclePriceRequest;
struct QueryOraclePriceRequestDefaultTypeInternal;
extern QueryOraclePriceRequestDefaultTypeInternal _QueryOraclePriceRequest_default_instance_;
class QueryOraclePriceResponse;
struct QueryOraclePriceResponseDefaultTypeInternal;
extern QueryOraclePriceResponseDefaultTypeInternal _QueryOraclePriceResponse_default_instance_;
class QueryOracleProviderPricesRequest;
struct QueryOracleProviderPricesRequestDefaultTypeInternal;
extern QueryOracleProviderPricesRequestDefaultTypeInternal _QueryOracleProviderPricesRequest_default_instance_;
class QueryOracleProviderPricesResponse;
struct QueryOracleProviderPricesResponseDefaultTypeInternal;
extern QueryOracleProviderPricesResponseDefaultTypeInternal _QueryOracleProviderPricesResponse_default_instance_;
class QueryOracleProvidersInfoRequest;
struct QueryOracleProvidersInfoRequestDefaultTypeInternal;
extern QueryOracleProvidersInfoRequestDefaultTypeInternal _QueryOracleProvidersInfoRequest_default_instance_;
class QueryOracleProvidersInfoResponse;
struct QueryOracleProvidersInfoResponseDefaultTypeInternal;
extern QueryOracleProvidersInfoResponseDefaultTypeInternal _QueryOracleProvidersInfoResponse_default_instance_;
class QueryOracleVolatilityRequest;
struct QueryOracleVolatilityRequestDefaultTypeInternal;
extern QueryOracleVolatilityRequestDefaultTypeInternal _QueryOracleVolatilityRequest_default_instance_;
class QueryOracleVolatilityResponse;
struct QueryOracleVolatilityResponseDefaultTypeInternal;
extern QueryOracleVolatilityResponseDefaultTypeInternal _QueryOracleVolatilityResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
class QueryPriceFeedPriceStatesRequest;
struct QueryPriceFeedPriceStatesRequestDefaultTypeInternal;
extern QueryPriceFeedPriceStatesRequestDefaultTypeInternal _QueryPriceFeedPriceStatesRequest_default_instance_;
class QueryPriceFeedPriceStatesResponse;
struct QueryPriceFeedPriceStatesResponseDefaultTypeInternal;
extern QueryPriceFeedPriceStatesResponseDefaultTypeInternal _QueryPriceFeedPriceStatesResponse_default_instance_;
class QueryProviderPriceStateRequest;
struct QueryProviderPriceStateRequestDefaultTypeInternal;
extern QueryProviderPriceStateRequestDefaultTypeInternal _QueryProviderPriceStateRequest_default_instance_;
class QueryProviderPriceStateResponse;
struct QueryProviderPriceStateResponseDefaultTypeInternal;
extern QueryProviderPriceStateResponseDefaultTypeInternal _QueryProviderPriceStateResponse_default_instance_;
class QueryPythPriceRequest;
struct QueryPythPriceRequestDefaultTypeInternal;
extern QueryPythPriceRequestDefaultTypeInternal _QueryPythPriceRequest_default_instance_;
class QueryPythPriceResponse;
struct QueryPythPriceResponseDefaultTypeInternal;
extern QueryPythPriceResponseDefaultTypeInternal _QueryPythPriceResponse_default_instance_;
class QueryPythPriceStatesRequest;
struct QueryPythPriceStatesRequestDefaultTypeInternal;
extern QueryPythPriceStatesRequestDefaultTypeInternal _QueryPythPriceStatesRequest_default_instance_;
class QueryPythPriceStatesResponse;
struct QueryPythPriceStatesResponseDefaultTypeInternal;
extern QueryPythPriceStatesResponseDefaultTypeInternal _QueryPythPriceStatesResponse_default_instance_;
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::oracle::v1beta1::OracleHistoryOptions* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::OracleHistoryOptions>(Arena*);
template <>
::injective::oracle::v1beta1::PricePairState* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::PricePairState>(Arena*);
template <>
::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryBandPriceStatesRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryBandPriceStatesRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryBandPriceStatesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryBandPriceStatesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryBandRelayersRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryBandRelayersRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryBandRelayersResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryBandRelayersResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryModuleStateRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryModuleStateRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryModuleStateResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryModuleStateResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryOraclePriceRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryOraclePriceRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryOraclePriceResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryOraclePriceResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryOracleProviderPricesRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryOracleVolatilityRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryOracleVolatilityRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryOracleVolatilityResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryOracleVolatilityResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryParamsRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryParamsRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryParamsResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryParamsResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryProviderPriceStateRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryProviderPriceStateRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryProviderPriceStateResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryProviderPriceStateResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryPythPriceRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryPythPriceRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryPythPriceResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryPythPriceResponse>(Arena*);
template <>
::injective::oracle::v1beta1::QueryPythPriceStatesRequest* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryPythPriceStatesRequest>(Arena*);
template <>
::injective::oracle::v1beta1::QueryPythPriceStatesResponse* Arena::CreateMaybeMessage<::injective::oracle::v1beta1::QueryPythPriceStatesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace oracle {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryPythPriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryPythPriceRequest) */ {
 public:
  inline QueryPythPriceRequest() : QueryPythPriceRequest(nullptr) {}
  ~QueryPythPriceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPythPriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPythPriceRequest(const QueryPythPriceRequest& from);
  QueryPythPriceRequest(QueryPythPriceRequest&& from) noexcept
    : QueryPythPriceRequest() {
    *this = ::std::move(from);
  }

  inline QueryPythPriceRequest& operator=(const QueryPythPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPythPriceRequest& operator=(QueryPythPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPythPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPythPriceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPythPriceRequest*>(
               &_QueryPythPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryPythPriceRequest& a, QueryPythPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPythPriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPythPriceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPythPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPythPriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPythPriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPythPriceRequest& from) {
    QueryPythPriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPythPriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryPythPriceRequest";
  }
  protected:
  explicit QueryPythPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceIdFieldNumber = 1,
  };
  // string price_id = 1 [json_name = "priceId"];
  void clear_price_id() ;
  const std::string& price_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price_id(Arg_&& arg, Args_... args);
  std::string* mutable_price_id();
  PROTOBUF_NODISCARD std::string* release_price_id();
  void set_allocated_price_id(std::string* ptr);

  private:
  const std::string& _internal_price_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price_id(
      const std::string& value);
  std::string* _internal_mutable_price_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryPythPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPythPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryPythPriceResponse) */ {
 public:
  inline QueryPythPriceResponse() : QueryPythPriceResponse(nullptr) {}
  ~QueryPythPriceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPythPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPythPriceResponse(const QueryPythPriceResponse& from);
  QueryPythPriceResponse(QueryPythPriceResponse&& from) noexcept
    : QueryPythPriceResponse() {
    *this = ::std::move(from);
  }

  inline QueryPythPriceResponse& operator=(const QueryPythPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPythPriceResponse& operator=(QueryPythPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPythPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPythPriceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPythPriceResponse*>(
               &_QueryPythPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryPythPriceResponse& a, QueryPythPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPythPriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPythPriceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPythPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPythPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPythPriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPythPriceResponse& from) {
    QueryPythPriceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPythPriceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryPythPriceResponse";
  }
  protected:
  explicit QueryPythPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceStateFieldNumber = 1,
  };
  // .injective.oracle.v1beta1.PythPriceState price_state = 1 [json_name = "priceState"];
  bool has_price_state() const;
  void clear_price_state() ;
  const ::injective::oracle::v1beta1::PythPriceState& price_state() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::PythPriceState* release_price_state();
  ::injective::oracle::v1beta1::PythPriceState* mutable_price_state();
  void set_allocated_price_state(::injective::oracle::v1beta1::PythPriceState* price_state);
  private:
  const ::injective::oracle::v1beta1::PythPriceState& _internal_price_state() const;
  ::injective::oracle::v1beta1::PythPriceState* _internal_mutable_price_state();
  public:
  void unsafe_arena_set_allocated_price_state(
      ::injective::oracle::v1beta1::PythPriceState* price_state);
  ::injective::oracle::v1beta1::PythPriceState* unsafe_arena_release_price_state();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryPythPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::oracle::v1beta1::PythPriceState* price_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .injective.oracle.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::oracle::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::Params* release_params();
  ::injective::oracle::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::oracle::v1beta1::Params* params);
  private:
  const ::injective::oracle::v1beta1::Params& _internal_params() const;
  ::injective::oracle::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::oracle::v1beta1::Params* params);
  ::injective::oracle::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::oracle::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryBandRelayersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryBandRelayersRequest) */ {
 public:
  inline QueryBandRelayersRequest() : QueryBandRelayersRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBandRelayersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBandRelayersRequest(const QueryBandRelayersRequest& from);
  QueryBandRelayersRequest(QueryBandRelayersRequest&& from) noexcept
    : QueryBandRelayersRequest() {
    *this = ::std::move(from);
  }

  inline QueryBandRelayersRequest& operator=(const QueryBandRelayersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBandRelayersRequest& operator=(QueryBandRelayersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBandRelayersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBandRelayersRequest* internal_default_instance() {
    return reinterpret_cast<const QueryBandRelayersRequest*>(
               &_QueryBandRelayersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryBandRelayersRequest& a, QueryBandRelayersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBandRelayersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBandRelayersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBandRelayersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBandRelayersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryBandRelayersRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryBandRelayersRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryBandRelayersRequest";
  }
  protected:
  explicit QueryBandRelayersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryBandRelayersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryBandRelayersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryBandRelayersResponse) */ {
 public:
  inline QueryBandRelayersResponse() : QueryBandRelayersResponse(nullptr) {}
  ~QueryBandRelayersResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBandRelayersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBandRelayersResponse(const QueryBandRelayersResponse& from);
  QueryBandRelayersResponse(QueryBandRelayersResponse&& from) noexcept
    : QueryBandRelayersResponse() {
    *this = ::std::move(from);
  }

  inline QueryBandRelayersResponse& operator=(const QueryBandRelayersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBandRelayersResponse& operator=(QueryBandRelayersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBandRelayersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBandRelayersResponse* internal_default_instance() {
    return reinterpret_cast<const QueryBandRelayersResponse*>(
               &_QueryBandRelayersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryBandRelayersResponse& a, QueryBandRelayersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBandRelayersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBandRelayersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBandRelayersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBandRelayersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryBandRelayersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryBandRelayersResponse& from) {
    QueryBandRelayersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBandRelayersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryBandRelayersResponse";
  }
  protected:
  explicit QueryBandRelayersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayersFieldNumber = 1,
  };
  // repeated string relayers = 1 [json_name = "relayers"];
  int relayers_size() const;
  private:
  int _internal_relayers_size() const;

  public:
  void clear_relayers() ;
  const std::string& relayers(int index) const;
  std::string* mutable_relayers(int index);
  void set_relayers(int index, const std::string& value);
  void set_relayers(int index, std::string&& value);
  void set_relayers(int index, const char* value);
  void set_relayers(int index, const char* value, std::size_t size);
  void set_relayers(int index, absl::string_view value);
  std::string* add_relayers();
  void add_relayers(const std::string& value);
  void add_relayers(std::string&& value);
  void add_relayers(const char* value);
  void add_relayers(const char* value, std::size_t size);
  void add_relayers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relayers();

  private:
  const std::string& _internal_relayers(int index) const;
  std::string* _internal_add_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_relayers();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryBandRelayersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relayers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryBandPriceStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryBandPriceStatesRequest) */ {
 public:
  inline QueryBandPriceStatesRequest() : QueryBandPriceStatesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBandPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBandPriceStatesRequest(const QueryBandPriceStatesRequest& from);
  QueryBandPriceStatesRequest(QueryBandPriceStatesRequest&& from) noexcept
    : QueryBandPriceStatesRequest() {
    *this = ::std::move(from);
  }

  inline QueryBandPriceStatesRequest& operator=(const QueryBandPriceStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBandPriceStatesRequest& operator=(QueryBandPriceStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBandPriceStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBandPriceStatesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryBandPriceStatesRequest*>(
               &_QueryBandPriceStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryBandPriceStatesRequest& a, QueryBandPriceStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBandPriceStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBandPriceStatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBandPriceStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBandPriceStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryBandPriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryBandPriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryBandPriceStatesRequest";
  }
  protected:
  explicit QueryBandPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryBandPriceStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryBandPriceStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryBandPriceStatesResponse) */ {
 public:
  inline QueryBandPriceStatesResponse() : QueryBandPriceStatesResponse(nullptr) {}
  ~QueryBandPriceStatesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBandPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBandPriceStatesResponse(const QueryBandPriceStatesResponse& from);
  QueryBandPriceStatesResponse(QueryBandPriceStatesResponse&& from) noexcept
    : QueryBandPriceStatesResponse() {
    *this = ::std::move(from);
  }

  inline QueryBandPriceStatesResponse& operator=(const QueryBandPriceStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBandPriceStatesResponse& operator=(QueryBandPriceStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBandPriceStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBandPriceStatesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryBandPriceStatesResponse*>(
               &_QueryBandPriceStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryBandPriceStatesResponse& a, QueryBandPriceStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBandPriceStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBandPriceStatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBandPriceStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBandPriceStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryBandPriceStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryBandPriceStatesResponse& from) {
    QueryBandPriceStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBandPriceStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryBandPriceStatesResponse";
  }
  protected:
  explicit QueryBandPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceStatesFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
  int price_states_size() const;
  private:
  int _internal_price_states_size() const;

  public:
  void clear_price_states() ;
  ::injective::oracle::v1beta1::BandPriceState* mutable_price_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState >*
      mutable_price_states();
  private:
  const ::injective::oracle::v1beta1::BandPriceState& _internal_price_states(int index) const;
  ::injective::oracle::v1beta1::BandPriceState* _internal_add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::BandPriceState>& _internal_price_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::BandPriceState>* _internal_mutable_price_states();
  public:
  const ::injective::oracle::v1beta1::BandPriceState& price_states(int index) const;
  ::injective::oracle::v1beta1::BandPriceState* add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState >&
      price_states() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryBandPriceStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState > price_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryBandIBCPriceStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest) */ {
 public:
  inline QueryBandIBCPriceStatesRequest() : QueryBandIBCPriceStatesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBandIBCPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBandIBCPriceStatesRequest(const QueryBandIBCPriceStatesRequest& from);
  QueryBandIBCPriceStatesRequest(QueryBandIBCPriceStatesRequest&& from) noexcept
    : QueryBandIBCPriceStatesRequest() {
    *this = ::std::move(from);
  }

  inline QueryBandIBCPriceStatesRequest& operator=(const QueryBandIBCPriceStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBandIBCPriceStatesRequest& operator=(QueryBandIBCPriceStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBandIBCPriceStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBandIBCPriceStatesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryBandIBCPriceStatesRequest*>(
               &_QueryBandIBCPriceStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryBandIBCPriceStatesRequest& a, QueryBandIBCPriceStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBandIBCPriceStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBandIBCPriceStatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBandIBCPriceStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBandIBCPriceStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryBandIBCPriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryBandIBCPriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest";
  }
  protected:
  explicit QueryBandIBCPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryBandIBCPriceStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse) */ {
 public:
  inline QueryBandIBCPriceStatesResponse() : QueryBandIBCPriceStatesResponse(nullptr) {}
  ~QueryBandIBCPriceStatesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryBandIBCPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryBandIBCPriceStatesResponse(const QueryBandIBCPriceStatesResponse& from);
  QueryBandIBCPriceStatesResponse(QueryBandIBCPriceStatesResponse&& from) noexcept
    : QueryBandIBCPriceStatesResponse() {
    *this = ::std::move(from);
  }

  inline QueryBandIBCPriceStatesResponse& operator=(const QueryBandIBCPriceStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryBandIBCPriceStatesResponse& operator=(QueryBandIBCPriceStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryBandIBCPriceStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryBandIBCPriceStatesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryBandIBCPriceStatesResponse*>(
               &_QueryBandIBCPriceStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryBandIBCPriceStatesResponse& a, QueryBandIBCPriceStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryBandIBCPriceStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryBandIBCPriceStatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryBandIBCPriceStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryBandIBCPriceStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryBandIBCPriceStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryBandIBCPriceStatesResponse& from) {
    QueryBandIBCPriceStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryBandIBCPriceStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse";
  }
  protected:
  explicit QueryBandIBCPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceStatesFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
  int price_states_size() const;
  private:
  int _internal_price_states_size() const;

  public:
  void clear_price_states() ;
  ::injective::oracle::v1beta1::BandPriceState* mutable_price_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState >*
      mutable_price_states();
  private:
  const ::injective::oracle::v1beta1::BandPriceState& _internal_price_states(int index) const;
  ::injective::oracle::v1beta1::BandPriceState* _internal_add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::BandPriceState>& _internal_price_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::BandPriceState>* _internal_mutable_price_states();
  public:
  const ::injective::oracle::v1beta1::BandPriceState& price_states(int index) const;
  ::injective::oracle::v1beta1::BandPriceState* add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState >&
      price_states() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState > price_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPriceFeedPriceStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest) */ {
 public:
  inline QueryPriceFeedPriceStatesRequest() : QueryPriceFeedPriceStatesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPriceFeedPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPriceFeedPriceStatesRequest(const QueryPriceFeedPriceStatesRequest& from);
  QueryPriceFeedPriceStatesRequest(QueryPriceFeedPriceStatesRequest&& from) noexcept
    : QueryPriceFeedPriceStatesRequest() {
    *this = ::std::move(from);
  }

  inline QueryPriceFeedPriceStatesRequest& operator=(const QueryPriceFeedPriceStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPriceFeedPriceStatesRequest& operator=(QueryPriceFeedPriceStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPriceFeedPriceStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPriceFeedPriceStatesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPriceFeedPriceStatesRequest*>(
               &_QueryPriceFeedPriceStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryPriceFeedPriceStatesRequest& a, QueryPriceFeedPriceStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPriceFeedPriceStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPriceFeedPriceStatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPriceFeedPriceStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPriceFeedPriceStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryPriceFeedPriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryPriceFeedPriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest";
  }
  protected:
  explicit QueryPriceFeedPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPriceFeedPriceStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse) */ {
 public:
  inline QueryPriceFeedPriceStatesResponse() : QueryPriceFeedPriceStatesResponse(nullptr) {}
  ~QueryPriceFeedPriceStatesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPriceFeedPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPriceFeedPriceStatesResponse(const QueryPriceFeedPriceStatesResponse& from);
  QueryPriceFeedPriceStatesResponse(QueryPriceFeedPriceStatesResponse&& from) noexcept
    : QueryPriceFeedPriceStatesResponse() {
    *this = ::std::move(from);
  }

  inline QueryPriceFeedPriceStatesResponse& operator=(const QueryPriceFeedPriceStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPriceFeedPriceStatesResponse& operator=(QueryPriceFeedPriceStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPriceFeedPriceStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPriceFeedPriceStatesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPriceFeedPriceStatesResponse*>(
               &_QueryPriceFeedPriceStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryPriceFeedPriceStatesResponse& a, QueryPriceFeedPriceStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPriceFeedPriceStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPriceFeedPriceStatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPriceFeedPriceStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPriceFeedPriceStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPriceFeedPriceStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPriceFeedPriceStatesResponse& from) {
    QueryPriceFeedPriceStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPriceFeedPriceStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse";
  }
  protected:
  explicit QueryPriceFeedPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceStatesFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.PriceFeedState price_states = 1 [json_name = "priceStates"];
  int price_states_size() const;
  private:
  int _internal_price_states_size() const;

  public:
  void clear_price_states() ;
  ::injective::oracle::v1beta1::PriceFeedState* mutable_price_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceFeedState >*
      mutable_price_states();
  private:
  const ::injective::oracle::v1beta1::PriceFeedState& _internal_price_states(int index) const;
  ::injective::oracle::v1beta1::PriceFeedState* _internal_add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceFeedState>& _internal_price_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceFeedState>* _internal_mutable_price_states();
  public:
  const ::injective::oracle::v1beta1::PriceFeedState& price_states(int index) const;
  ::injective::oracle::v1beta1::PriceFeedState* add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceFeedState >&
      price_states() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceFeedState > price_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCoinbasePriceStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest) */ {
 public:
  inline QueryCoinbasePriceStatesRequest() : QueryCoinbasePriceStatesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCoinbasePriceStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCoinbasePriceStatesRequest(const QueryCoinbasePriceStatesRequest& from);
  QueryCoinbasePriceStatesRequest(QueryCoinbasePriceStatesRequest&& from) noexcept
    : QueryCoinbasePriceStatesRequest() {
    *this = ::std::move(from);
  }

  inline QueryCoinbasePriceStatesRequest& operator=(const QueryCoinbasePriceStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCoinbasePriceStatesRequest& operator=(QueryCoinbasePriceStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCoinbasePriceStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCoinbasePriceStatesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryCoinbasePriceStatesRequest*>(
               &_QueryCoinbasePriceStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryCoinbasePriceStatesRequest& a, QueryCoinbasePriceStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCoinbasePriceStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCoinbasePriceStatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCoinbasePriceStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCoinbasePriceStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryCoinbasePriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryCoinbasePriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest";
  }
  protected:
  explicit QueryCoinbasePriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCoinbasePriceStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse) */ {
 public:
  inline QueryCoinbasePriceStatesResponse() : QueryCoinbasePriceStatesResponse(nullptr) {}
  ~QueryCoinbasePriceStatesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCoinbasePriceStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCoinbasePriceStatesResponse(const QueryCoinbasePriceStatesResponse& from);
  QueryCoinbasePriceStatesResponse(QueryCoinbasePriceStatesResponse&& from) noexcept
    : QueryCoinbasePriceStatesResponse() {
    *this = ::std::move(from);
  }

  inline QueryCoinbasePriceStatesResponse& operator=(const QueryCoinbasePriceStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCoinbasePriceStatesResponse& operator=(QueryCoinbasePriceStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCoinbasePriceStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCoinbasePriceStatesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryCoinbasePriceStatesResponse*>(
               &_QueryCoinbasePriceStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryCoinbasePriceStatesResponse& a, QueryCoinbasePriceStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCoinbasePriceStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCoinbasePriceStatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCoinbasePriceStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCoinbasePriceStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCoinbasePriceStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCoinbasePriceStatesResponse& from) {
    QueryCoinbasePriceStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCoinbasePriceStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse";
  }
  protected:
  explicit QueryCoinbasePriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceStatesFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.CoinbasePriceState price_states = 1 [json_name = "priceStates"];
  int price_states_size() const;
  private:
  int _internal_price_states_size() const;

  public:
  void clear_price_states() ;
  ::injective::oracle::v1beta1::CoinbasePriceState* mutable_price_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::CoinbasePriceState >*
      mutable_price_states();
  private:
  const ::injective::oracle::v1beta1::CoinbasePriceState& _internal_price_states(int index) const;
  ::injective::oracle::v1beta1::CoinbasePriceState* _internal_add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::CoinbasePriceState>& _internal_price_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::CoinbasePriceState>* _internal_mutable_price_states();
  public:
  const ::injective::oracle::v1beta1::CoinbasePriceState& price_states(int index) const;
  ::injective::oracle::v1beta1::CoinbasePriceState* add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::CoinbasePriceState >&
      price_states() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::CoinbasePriceState > price_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPythPriceStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryPythPriceStatesRequest) */ {
 public:
  inline QueryPythPriceStatesRequest() : QueryPythPriceStatesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPythPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPythPriceStatesRequest(const QueryPythPriceStatesRequest& from);
  QueryPythPriceStatesRequest(QueryPythPriceStatesRequest&& from) noexcept
    : QueryPythPriceStatesRequest() {
    *this = ::std::move(from);
  }

  inline QueryPythPriceStatesRequest& operator=(const QueryPythPriceStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPythPriceStatesRequest& operator=(QueryPythPriceStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPythPriceStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPythPriceStatesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPythPriceStatesRequest*>(
               &_QueryPythPriceStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryPythPriceStatesRequest& a, QueryPythPriceStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPythPriceStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPythPriceStatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPythPriceStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPythPriceStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryPythPriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryPythPriceStatesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryPythPriceStatesRequest";
  }
  protected:
  explicit QueryPythPriceStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryPythPriceStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPythPriceStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryPythPriceStatesResponse) */ {
 public:
  inline QueryPythPriceStatesResponse() : QueryPythPriceStatesResponse(nullptr) {}
  ~QueryPythPriceStatesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPythPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPythPriceStatesResponse(const QueryPythPriceStatesResponse& from);
  QueryPythPriceStatesResponse(QueryPythPriceStatesResponse&& from) noexcept
    : QueryPythPriceStatesResponse() {
    *this = ::std::move(from);
  }

  inline QueryPythPriceStatesResponse& operator=(const QueryPythPriceStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPythPriceStatesResponse& operator=(QueryPythPriceStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPythPriceStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPythPriceStatesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPythPriceStatesResponse*>(
               &_QueryPythPriceStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryPythPriceStatesResponse& a, QueryPythPriceStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPythPriceStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPythPriceStatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPythPriceStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPythPriceStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPythPriceStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPythPriceStatesResponse& from) {
    QueryPythPriceStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPythPriceStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryPythPriceStatesResponse";
  }
  protected:
  explicit QueryPythPriceStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceStatesFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.PythPriceState price_states = 1 [json_name = "priceStates"];
  int price_states_size() const;
  private:
  int _internal_price_states_size() const;

  public:
  void clear_price_states() ;
  ::injective::oracle::v1beta1::PythPriceState* mutable_price_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState >*
      mutable_price_states();
  private:
  const ::injective::oracle::v1beta1::PythPriceState& _internal_price_states(int index) const;
  ::injective::oracle::v1beta1::PythPriceState* _internal_add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PythPriceState>& _internal_price_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PythPriceState>* _internal_mutable_price_states();
  public:
  const ::injective::oracle::v1beta1::PythPriceState& price_states(int index) const;
  ::injective::oracle::v1beta1::PythPriceState* add_price_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState >&
      price_states() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryPythPriceStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState > price_states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProviderPriceStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryProviderPriceStateRequest) */ {
 public:
  inline QueryProviderPriceStateRequest() : QueryProviderPriceStateRequest(nullptr) {}
  ~QueryProviderPriceStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProviderPriceStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProviderPriceStateRequest(const QueryProviderPriceStateRequest& from);
  QueryProviderPriceStateRequest(QueryProviderPriceStateRequest&& from) noexcept
    : QueryProviderPriceStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryProviderPriceStateRequest& operator=(const QueryProviderPriceStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProviderPriceStateRequest& operator=(QueryProviderPriceStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProviderPriceStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProviderPriceStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryProviderPriceStateRequest*>(
               &_QueryProviderPriceStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryProviderPriceStateRequest& a, QueryProviderPriceStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProviderPriceStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProviderPriceStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProviderPriceStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProviderPriceStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProviderPriceStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProviderPriceStateRequest& from) {
    QueryProviderPriceStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProviderPriceStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryProviderPriceStateRequest";
  }
  protected:
  explicit QueryProviderPriceStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 1,
    kSymbolFieldNumber = 2,
  };
  // string provider = 1 [json_name = "provider"];
  void clear_provider() ;
  const std::string& provider() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* ptr);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // string symbol = 2 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryProviderPriceStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryProviderPriceStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryProviderPriceStateResponse) */ {
 public:
  inline QueryProviderPriceStateResponse() : QueryProviderPriceStateResponse(nullptr) {}
  ~QueryProviderPriceStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryProviderPriceStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryProviderPriceStateResponse(const QueryProviderPriceStateResponse& from);
  QueryProviderPriceStateResponse(QueryProviderPriceStateResponse&& from) noexcept
    : QueryProviderPriceStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryProviderPriceStateResponse& operator=(const QueryProviderPriceStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProviderPriceStateResponse& operator=(QueryProviderPriceStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryProviderPriceStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryProviderPriceStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryProviderPriceStateResponse*>(
               &_QueryProviderPriceStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryProviderPriceStateResponse& a, QueryProviderPriceStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProviderPriceStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryProviderPriceStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryProviderPriceStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryProviderPriceStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryProviderPriceStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryProviderPriceStateResponse& from) {
    QueryProviderPriceStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProviderPriceStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryProviderPriceStateResponse";
  }
  protected:
  explicit QueryProviderPriceStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceStateFieldNumber = 1,
  };
  // .injective.oracle.v1beta1.PriceState price_state = 1 [json_name = "priceState"];
  bool has_price_state() const;
  void clear_price_state() ;
  const ::injective::oracle::v1beta1::PriceState& price_state() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::PriceState* release_price_state();
  ::injective::oracle::v1beta1::PriceState* mutable_price_state();
  void set_allocated_price_state(::injective::oracle::v1beta1::PriceState* price_state);
  private:
  const ::injective::oracle::v1beta1::PriceState& _internal_price_state() const;
  ::injective::oracle::v1beta1::PriceState* _internal_mutable_price_state();
  public:
  void unsafe_arena_set_allocated_price_state(
      ::injective::oracle::v1beta1::PriceState* price_state);
  ::injective::oracle::v1beta1::PriceState* unsafe_arena_release_price_state();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryProviderPriceStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::oracle::v1beta1::PriceState* price_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryModuleStateRequest) */ {
 public:
  inline QueryModuleStateRequest() : QueryModuleStateRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateRequest(const QueryModuleStateRequest& from);
  QueryModuleStateRequest(QueryModuleStateRequest&& from) noexcept
    : QueryModuleStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateRequest& operator=(const QueryModuleStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateRequest& operator=(QueryModuleStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateRequest*>(
               &_QueryModuleStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryModuleStateRequest& a, QueryModuleStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryModuleStateRequest";
  }
  protected:
  explicit QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryModuleStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryModuleStateResponse) */ {
 public:
  inline QueryModuleStateResponse() : QueryModuleStateResponse(nullptr) {}
  ~QueryModuleStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateResponse(const QueryModuleStateResponse& from);
  QueryModuleStateResponse(QueryModuleStateResponse&& from) noexcept
    : QueryModuleStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateResponse& operator=(const QueryModuleStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateResponse& operator=(QueryModuleStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateResponse*>(
               &_QueryModuleStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryModuleStateResponse& a, QueryModuleStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleStateResponse& from) {
    QueryModuleStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryModuleStateResponse";
  }
  protected:
  explicit QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .injective.oracle.v1beta1.GenesisState state = 1 [json_name = "state"];
  bool has_state() const;
  void clear_state() ;
  const ::injective::oracle::v1beta1::GenesisState& state() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::GenesisState* release_state();
  ::injective::oracle::v1beta1::GenesisState* mutable_state();
  void set_allocated_state(::injective::oracle::v1beta1::GenesisState* state);
  private:
  const ::injective::oracle::v1beta1::GenesisState& _internal_state() const;
  ::injective::oracle::v1beta1::GenesisState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::injective::oracle::v1beta1::GenesisState* state);
  ::injective::oracle::v1beta1::GenesisState* unsafe_arena_release_state();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryModuleStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::oracle::v1beta1::GenesisState* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryHistoricalPriceRecordsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest) */ {
 public:
  inline QueryHistoricalPriceRecordsRequest() : QueryHistoricalPriceRecordsRequest(nullptr) {}
  ~QueryHistoricalPriceRecordsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryHistoricalPriceRecordsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryHistoricalPriceRecordsRequest(const QueryHistoricalPriceRecordsRequest& from);
  QueryHistoricalPriceRecordsRequest(QueryHistoricalPriceRecordsRequest&& from) noexcept
    : QueryHistoricalPriceRecordsRequest() {
    *this = ::std::move(from);
  }

  inline QueryHistoricalPriceRecordsRequest& operator=(const QueryHistoricalPriceRecordsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryHistoricalPriceRecordsRequest& operator=(QueryHistoricalPriceRecordsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryHistoricalPriceRecordsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryHistoricalPriceRecordsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryHistoricalPriceRecordsRequest*>(
               &_QueryHistoricalPriceRecordsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(QueryHistoricalPriceRecordsRequest& a, QueryHistoricalPriceRecordsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryHistoricalPriceRecordsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryHistoricalPriceRecordsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryHistoricalPriceRecordsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryHistoricalPriceRecordsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryHistoricalPriceRecordsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryHistoricalPriceRecordsRequest& from) {
    QueryHistoricalPriceRecordsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryHistoricalPriceRecordsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest";
  }
  protected:
  explicit QueryHistoricalPriceRecordsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolIdFieldNumber = 2,
    kOracleFieldNumber = 1,
  };
  // string symbol_id = 2 [json_name = "symbolId"];
  void clear_symbol_id() ;
  const std::string& symbol_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol_id(Arg_&& arg, Args_... args);
  std::string* mutable_symbol_id();
  PROTOBUF_NODISCARD std::string* release_symbol_id();
  void set_allocated_symbol_id(std::string* ptr);

  private:
  const std::string& _internal_symbol_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol_id(
      const std::string& value);
  std::string* _internal_mutable_symbol_id();

  public:
  // .injective.oracle.v1beta1.OracleType oracle = 1 [json_name = "oracle"];
  void clear_oracle() ;
  ::injective::oracle::v1beta1::OracleType oracle() const;
  void set_oracle(::injective::oracle::v1beta1::OracleType value);

  private:
  ::injective::oracle::v1beta1::OracleType _internal_oracle() const;
  void _internal_set_oracle(::injective::oracle::v1beta1::OracleType value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_id_;
    int oracle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryHistoricalPriceRecordsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse) */ {
 public:
  inline QueryHistoricalPriceRecordsResponse() : QueryHistoricalPriceRecordsResponse(nullptr) {}
  ~QueryHistoricalPriceRecordsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryHistoricalPriceRecordsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryHistoricalPriceRecordsResponse(const QueryHistoricalPriceRecordsResponse& from);
  QueryHistoricalPriceRecordsResponse(QueryHistoricalPriceRecordsResponse&& from) noexcept
    : QueryHistoricalPriceRecordsResponse() {
    *this = ::std::move(from);
  }

  inline QueryHistoricalPriceRecordsResponse& operator=(const QueryHistoricalPriceRecordsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryHistoricalPriceRecordsResponse& operator=(QueryHistoricalPriceRecordsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryHistoricalPriceRecordsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryHistoricalPriceRecordsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryHistoricalPriceRecordsResponse*>(
               &_QueryHistoricalPriceRecordsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QueryHistoricalPriceRecordsResponse& a, QueryHistoricalPriceRecordsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryHistoricalPriceRecordsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryHistoricalPriceRecordsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryHistoricalPriceRecordsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryHistoricalPriceRecordsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryHistoricalPriceRecordsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryHistoricalPriceRecordsResponse& from) {
    QueryHistoricalPriceRecordsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryHistoricalPriceRecordsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse";
  }
  protected:
  explicit QueryHistoricalPriceRecordsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceRecordsFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.PriceRecords price_records = 1 [json_name = "priceRecords"];
  int price_records_size() const;
  private:
  int _internal_price_records_size() const;

  public:
  void clear_price_records() ;
  ::injective::oracle::v1beta1::PriceRecords* mutable_price_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecords >*
      mutable_price_records();
  private:
  const ::injective::oracle::v1beta1::PriceRecords& _internal_price_records(int index) const;
  ::injective::oracle::v1beta1::PriceRecords* _internal_add_price_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceRecords>& _internal_price_records() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceRecords>* _internal_mutable_price_records();
  public:
  const ::injective::oracle::v1beta1::PriceRecords& price_records(int index) const;
  ::injective::oracle::v1beta1::PriceRecords* add_price_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecords >&
      price_records() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecords > price_records_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class OracleHistoryOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.OracleHistoryOptions) */ {
 public:
  inline OracleHistoryOptions() : OracleHistoryOptions(nullptr) {}
  ~OracleHistoryOptions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OracleHistoryOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OracleHistoryOptions(const OracleHistoryOptions& from);
  OracleHistoryOptions(OracleHistoryOptions&& from) noexcept
    : OracleHistoryOptions() {
    *this = ::std::move(from);
  }

  inline OracleHistoryOptions& operator=(const OracleHistoryOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleHistoryOptions& operator=(OracleHistoryOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OracleHistoryOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const OracleHistoryOptions* internal_default_instance() {
    return reinterpret_cast<const OracleHistoryOptions*>(
               &_OracleHistoryOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(OracleHistoryOptions& a, OracleHistoryOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleHistoryOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleHistoryOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OracleHistoryOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OracleHistoryOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OracleHistoryOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OracleHistoryOptions& from) {
    OracleHistoryOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleHistoryOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.OracleHistoryOptions";
  }
  protected:
  explicit OracleHistoryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAgeFieldNumber = 1,
    kIncludeRawHistoryFieldNumber = 2,
    kIncludeMetadataFieldNumber = 3,
  };
  // uint64 max_age = 1 [json_name = "maxAge"];
  void clear_max_age() ;
  ::uint64_t max_age() const;
  void set_max_age(::uint64_t value);

  private:
  ::uint64_t _internal_max_age() const;
  void _internal_set_max_age(::uint64_t value);

  public:
  // bool include_raw_history = 2 [json_name = "includeRawHistory"];
  void clear_include_raw_history() ;
  bool include_raw_history() const;
  void set_include_raw_history(bool value);

  private:
  bool _internal_include_raw_history() const;
  void _internal_set_include_raw_history(bool value);

  public:
  // bool include_metadata = 3 [json_name = "includeMetadata"];
  void clear_include_metadata() ;
  bool include_metadata() const;
  void set_include_metadata(bool value);

  private:
  bool _internal_include_metadata() const;
  void _internal_set_include_metadata(bool value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.OracleHistoryOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t max_age_;
    bool include_raw_history_;
    bool include_metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOracleVolatilityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryOracleVolatilityRequest) */ {
 public:
  inline QueryOracleVolatilityRequest() : QueryOracleVolatilityRequest(nullptr) {}
  ~QueryOracleVolatilityRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOracleVolatilityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOracleVolatilityRequest(const QueryOracleVolatilityRequest& from);
  QueryOracleVolatilityRequest(QueryOracleVolatilityRequest&& from) noexcept
    : QueryOracleVolatilityRequest() {
    *this = ::std::move(from);
  }

  inline QueryOracleVolatilityRequest& operator=(const QueryOracleVolatilityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOracleVolatilityRequest& operator=(QueryOracleVolatilityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOracleVolatilityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOracleVolatilityRequest* internal_default_instance() {
    return reinterpret_cast<const QueryOracleVolatilityRequest*>(
               &_QueryOracleVolatilityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QueryOracleVolatilityRequest& a, QueryOracleVolatilityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOracleVolatilityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOracleVolatilityRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOracleVolatilityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOracleVolatilityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOracleVolatilityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOracleVolatilityRequest& from) {
    QueryOracleVolatilityRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOracleVolatilityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryOracleVolatilityRequest";
  }
  protected:
  explicit QueryOracleVolatilityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kQuoteInfoFieldNumber = 2,
    kOracleHistoryOptionsFieldNumber = 3,
  };
  // .injective.oracle.v1beta1.OracleInfo base_info = 1 [json_name = "baseInfo"];
  bool has_base_info() const;
  void clear_base_info() ;
  const ::injective::oracle::v1beta1::OracleInfo& base_info() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::OracleInfo* release_base_info();
  ::injective::oracle::v1beta1::OracleInfo* mutable_base_info();
  void set_allocated_base_info(::injective::oracle::v1beta1::OracleInfo* base_info);
  private:
  const ::injective::oracle::v1beta1::OracleInfo& _internal_base_info() const;
  ::injective::oracle::v1beta1::OracleInfo* _internal_mutable_base_info();
  public:
  void unsafe_arena_set_allocated_base_info(
      ::injective::oracle::v1beta1::OracleInfo* base_info);
  ::injective::oracle::v1beta1::OracleInfo* unsafe_arena_release_base_info();
  // .injective.oracle.v1beta1.OracleInfo quote_info = 2 [json_name = "quoteInfo"];
  bool has_quote_info() const;
  void clear_quote_info() ;
  const ::injective::oracle::v1beta1::OracleInfo& quote_info() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::OracleInfo* release_quote_info();
  ::injective::oracle::v1beta1::OracleInfo* mutable_quote_info();
  void set_allocated_quote_info(::injective::oracle::v1beta1::OracleInfo* quote_info);
  private:
  const ::injective::oracle::v1beta1::OracleInfo& _internal_quote_info() const;
  ::injective::oracle::v1beta1::OracleInfo* _internal_mutable_quote_info();
  public:
  void unsafe_arena_set_allocated_quote_info(
      ::injective::oracle::v1beta1::OracleInfo* quote_info);
  ::injective::oracle::v1beta1::OracleInfo* unsafe_arena_release_quote_info();
  // .injective.oracle.v1beta1.OracleHistoryOptions oracle_history_options = 3 [json_name = "oracleHistoryOptions"];
  bool has_oracle_history_options() const;
  void clear_oracle_history_options() ;
  const ::injective::oracle::v1beta1::OracleHistoryOptions& oracle_history_options() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::OracleHistoryOptions* release_oracle_history_options();
  ::injective::oracle::v1beta1::OracleHistoryOptions* mutable_oracle_history_options();
  void set_allocated_oracle_history_options(::injective::oracle::v1beta1::OracleHistoryOptions* oracle_history_options);
  private:
  const ::injective::oracle::v1beta1::OracleHistoryOptions& _internal_oracle_history_options() const;
  ::injective::oracle::v1beta1::OracleHistoryOptions* _internal_mutable_oracle_history_options();
  public:
  void unsafe_arena_set_allocated_oracle_history_options(
      ::injective::oracle::v1beta1::OracleHistoryOptions* oracle_history_options);
  ::injective::oracle::v1beta1::OracleHistoryOptions* unsafe_arena_release_oracle_history_options();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryOracleVolatilityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::oracle::v1beta1::OracleInfo* base_info_;
    ::injective::oracle::v1beta1::OracleInfo* quote_info_;
    ::injective::oracle::v1beta1::OracleHistoryOptions* oracle_history_options_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOracleVolatilityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryOracleVolatilityResponse) */ {
 public:
  inline QueryOracleVolatilityResponse() : QueryOracleVolatilityResponse(nullptr) {}
  ~QueryOracleVolatilityResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOracleVolatilityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOracleVolatilityResponse(const QueryOracleVolatilityResponse& from);
  QueryOracleVolatilityResponse(QueryOracleVolatilityResponse&& from) noexcept
    : QueryOracleVolatilityResponse() {
    *this = ::std::move(from);
  }

  inline QueryOracleVolatilityResponse& operator=(const QueryOracleVolatilityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOracleVolatilityResponse& operator=(QueryOracleVolatilityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOracleVolatilityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOracleVolatilityResponse* internal_default_instance() {
    return reinterpret_cast<const QueryOracleVolatilityResponse*>(
               &_QueryOracleVolatilityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(QueryOracleVolatilityResponse& a, QueryOracleVolatilityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOracleVolatilityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOracleVolatilityResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOracleVolatilityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOracleVolatilityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOracleVolatilityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOracleVolatilityResponse& from) {
    QueryOracleVolatilityResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOracleVolatilityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryOracleVolatilityResponse";
  }
  protected:
  explicit QueryOracleVolatilityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawHistoryFieldNumber = 3,
    kVolatilityFieldNumber = 1,
    kHistoryMetadataFieldNumber = 2,
  };
  // repeated .injective.oracle.v1beta1.PriceRecord raw_history = 3 [json_name = "rawHistory"];
  int raw_history_size() const;
  private:
  int _internal_raw_history_size() const;

  public:
  void clear_raw_history() ;
  ::injective::oracle::v1beta1::PriceRecord* mutable_raw_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecord >*
      mutable_raw_history();
  private:
  const ::injective::oracle::v1beta1::PriceRecord& _internal_raw_history(int index) const;
  ::injective::oracle::v1beta1::PriceRecord* _internal_add_raw_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceRecord>& _internal_raw_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceRecord>* _internal_mutable_raw_history();
  public:
  const ::injective::oracle::v1beta1::PriceRecord& raw_history(int index) const;
  ::injective::oracle::v1beta1::PriceRecord* add_raw_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecord >&
      raw_history() const;
  // string volatility = 1 [json_name = "volatility", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_volatility() ;
  const std::string& volatility() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_volatility(Arg_&& arg, Args_... args);
  std::string* mutable_volatility();
  PROTOBUF_NODISCARD std::string* release_volatility();
  void set_allocated_volatility(std::string* ptr);

  private:
  const std::string& _internal_volatility() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_volatility(
      const std::string& value);
  std::string* _internal_mutable_volatility();

  public:
  // .injective.oracle.v1beta1.MetadataStatistics history_metadata = 2 [json_name = "historyMetadata"];
  bool has_history_metadata() const;
  void clear_history_metadata() ;
  const ::injective::oracle::v1beta1::MetadataStatistics& history_metadata() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::MetadataStatistics* release_history_metadata();
  ::injective::oracle::v1beta1::MetadataStatistics* mutable_history_metadata();
  void set_allocated_history_metadata(::injective::oracle::v1beta1::MetadataStatistics* history_metadata);
  private:
  const ::injective::oracle::v1beta1::MetadataStatistics& _internal_history_metadata() const;
  ::injective::oracle::v1beta1::MetadataStatistics* _internal_mutable_history_metadata();
  public:
  void unsafe_arena_set_allocated_history_metadata(
      ::injective::oracle::v1beta1::MetadataStatistics* history_metadata);
  ::injective::oracle::v1beta1::MetadataStatistics* unsafe_arena_release_history_metadata();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryOracleVolatilityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecord > raw_history_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr volatility_;
    ::injective::oracle::v1beta1::MetadataStatistics* history_metadata_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOracleProvidersInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryOracleProvidersInfoRequest) */ {
 public:
  inline QueryOracleProvidersInfoRequest() : QueryOracleProvidersInfoRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOracleProvidersInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOracleProvidersInfoRequest(const QueryOracleProvidersInfoRequest& from);
  QueryOracleProvidersInfoRequest(QueryOracleProvidersInfoRequest&& from) noexcept
    : QueryOracleProvidersInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryOracleProvidersInfoRequest& operator=(const QueryOracleProvidersInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOracleProvidersInfoRequest& operator=(QueryOracleProvidersInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOracleProvidersInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOracleProvidersInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryOracleProvidersInfoRequest*>(
               &_QueryOracleProvidersInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(QueryOracleProvidersInfoRequest& a, QueryOracleProvidersInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOracleProvidersInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOracleProvidersInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOracleProvidersInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOracleProvidersInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryOracleProvidersInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryOracleProvidersInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryOracleProvidersInfoRequest";
  }
  protected:
  explicit QueryOracleProvidersInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryOracleProvidersInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOracleProvidersInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse) */ {
 public:
  inline QueryOracleProvidersInfoResponse() : QueryOracleProvidersInfoResponse(nullptr) {}
  ~QueryOracleProvidersInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOracleProvidersInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOracleProvidersInfoResponse(const QueryOracleProvidersInfoResponse& from);
  QueryOracleProvidersInfoResponse(QueryOracleProvidersInfoResponse&& from) noexcept
    : QueryOracleProvidersInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryOracleProvidersInfoResponse& operator=(const QueryOracleProvidersInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOracleProvidersInfoResponse& operator=(QueryOracleProvidersInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOracleProvidersInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOracleProvidersInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryOracleProvidersInfoResponse*>(
               &_QueryOracleProvidersInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(QueryOracleProvidersInfoResponse& a, QueryOracleProvidersInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOracleProvidersInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOracleProvidersInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOracleProvidersInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOracleProvidersInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOracleProvidersInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOracleProvidersInfoResponse& from) {
    QueryOracleProvidersInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOracleProvidersInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryOracleProvidersInfoResponse";
  }
  protected:
  explicit QueryOracleProvidersInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProvidersFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.ProviderInfo providers = 1 [json_name = "providers"];
  int providers_size() const;
  private:
  int _internal_providers_size() const;

  public:
  void clear_providers() ;
  ::injective::oracle::v1beta1::ProviderInfo* mutable_providers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderInfo >*
      mutable_providers();
  private:
  const ::injective::oracle::v1beta1::ProviderInfo& _internal_providers(int index) const;
  ::injective::oracle::v1beta1::ProviderInfo* _internal_add_providers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::ProviderInfo>& _internal_providers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::ProviderInfo>* _internal_mutable_providers();
  public:
  const ::injective::oracle::v1beta1::ProviderInfo& providers(int index) const;
  ::injective::oracle::v1beta1::ProviderInfo* add_providers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderInfo >&
      providers() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderInfo > providers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOracleProviderPricesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryOracleProviderPricesRequest) */ {
 public:
  inline QueryOracleProviderPricesRequest() : QueryOracleProviderPricesRequest(nullptr) {}
  ~QueryOracleProviderPricesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOracleProviderPricesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOracleProviderPricesRequest(const QueryOracleProviderPricesRequest& from);
  QueryOracleProviderPricesRequest(QueryOracleProviderPricesRequest&& from) noexcept
    : QueryOracleProviderPricesRequest() {
    *this = ::std::move(from);
  }

  inline QueryOracleProviderPricesRequest& operator=(const QueryOracleProviderPricesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOracleProviderPricesRequest& operator=(QueryOracleProviderPricesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOracleProviderPricesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOracleProviderPricesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryOracleProviderPricesRequest*>(
               &_QueryOracleProviderPricesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(QueryOracleProviderPricesRequest& a, QueryOracleProviderPricesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOracleProviderPricesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOracleProviderPricesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOracleProviderPricesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOracleProviderPricesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOracleProviderPricesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOracleProviderPricesRequest& from) {
    QueryOracleProviderPricesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOracleProviderPricesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryOracleProviderPricesRequest";
  }
  protected:
  explicit QueryOracleProviderPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 1,
  };
  // string provider = 1 [json_name = "provider"];
  void clear_provider() ;
  const std::string& provider() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_provider(Arg_&& arg, Args_... args);
  std::string* mutable_provider();
  PROTOBUF_NODISCARD std::string* release_provider();
  void set_allocated_provider(std::string* ptr);

  private:
  const std::string& _internal_provider() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider(
      const std::string& value);
  std::string* _internal_mutable_provider();

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryOracleProviderPricesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOracleProviderPricesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryOracleProviderPricesResponse) */ {
 public:
  inline QueryOracleProviderPricesResponse() : QueryOracleProviderPricesResponse(nullptr) {}
  ~QueryOracleProviderPricesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOracleProviderPricesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOracleProviderPricesResponse(const QueryOracleProviderPricesResponse& from);
  QueryOracleProviderPricesResponse(QueryOracleProviderPricesResponse&& from) noexcept
    : QueryOracleProviderPricesResponse() {
    *this = ::std::move(from);
  }

  inline QueryOracleProviderPricesResponse& operator=(const QueryOracleProviderPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOracleProviderPricesResponse& operator=(QueryOracleProviderPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOracleProviderPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOracleProviderPricesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryOracleProviderPricesResponse*>(
               &_QueryOracleProviderPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(QueryOracleProviderPricesResponse& a, QueryOracleProviderPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOracleProviderPricesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOracleProviderPricesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOracleProviderPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOracleProviderPricesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOracleProviderPricesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOracleProviderPricesResponse& from) {
    QueryOracleProviderPricesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOracleProviderPricesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryOracleProviderPricesResponse";
  }
  protected:
  explicit QueryOracleProviderPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderStateFieldNumber = 1,
  };
  // repeated .injective.oracle.v1beta1.ProviderState providerState = 1 [json_name = "providerState"];
  int providerstate_size() const;
  private:
  int _internal_providerstate_size() const;

  public:
  void clear_providerstate() ;
  ::injective::oracle::v1beta1::ProviderState* mutable_providerstate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderState >*
      mutable_providerstate();
  private:
  const ::injective::oracle::v1beta1::ProviderState& _internal_providerstate(int index) const;
  ::injective::oracle::v1beta1::ProviderState* _internal_add_providerstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::ProviderState>& _internal_providerstate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::ProviderState>* _internal_mutable_providerstate();
  public:
  const ::injective::oracle::v1beta1::ProviderState& providerstate(int index) const;
  ::injective::oracle::v1beta1::ProviderState* add_providerstate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderState >&
      providerstate() const;
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryOracleProviderPricesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderState > providerstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOraclePriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryOraclePriceRequest) */ {
 public:
  inline QueryOraclePriceRequest() : QueryOraclePriceRequest(nullptr) {}
  ~QueryOraclePriceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOraclePriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOraclePriceRequest(const QueryOraclePriceRequest& from);
  QueryOraclePriceRequest(QueryOraclePriceRequest&& from) noexcept
    : QueryOraclePriceRequest() {
    *this = ::std::move(from);
  }

  inline QueryOraclePriceRequest& operator=(const QueryOraclePriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOraclePriceRequest& operator=(QueryOraclePriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOraclePriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOraclePriceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryOraclePriceRequest*>(
               &_QueryOraclePriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(QueryOraclePriceRequest& a, QueryOraclePriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOraclePriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOraclePriceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOraclePriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOraclePriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOraclePriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOraclePriceRequest& from) {
    QueryOraclePriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOraclePriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryOraclePriceRequest";
  }
  protected:
  explicit QueryOraclePriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 2,
    kQuoteFieldNumber = 3,
    kOracleTypeFieldNumber = 1,
  };
  // string base = 2 [json_name = "base"];
  void clear_base() ;
  const std::string& base() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base(Arg_&& arg, Args_... args);
  std::string* mutable_base();
  PROTOBUF_NODISCARD std::string* release_base();
  void set_allocated_base(std::string* ptr);

  private:
  const std::string& _internal_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base(
      const std::string& value);
  std::string* _internal_mutable_base();

  public:
  // string quote = 3 [json_name = "quote"];
  void clear_quote() ;
  const std::string& quote() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote(Arg_&& arg, Args_... args);
  std::string* mutable_quote();
  PROTOBUF_NODISCARD std::string* release_quote();
  void set_allocated_quote(std::string* ptr);

  private:
  const std::string& _internal_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote(
      const std::string& value);
  std::string* _internal_mutable_quote();

  public:
  // .injective.oracle.v1beta1.OracleType oracle_type = 1 [json_name = "oracleType"];
  void clear_oracle_type() ;
  ::injective::oracle::v1beta1::OracleType oracle_type() const;
  void set_oracle_type(::injective::oracle::v1beta1::OracleType value);

  private:
  ::injective::oracle::v1beta1::OracleType _internal_oracle_type() const;
  void _internal_set_oracle_type(::injective::oracle::v1beta1::OracleType value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryOraclePriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_;
    int oracle_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class PricePairState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.PricePairState) */ {
 public:
  inline PricePairState() : PricePairState(nullptr) {}
  ~PricePairState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PricePairState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PricePairState(const PricePairState& from);
  PricePairState(PricePairState&& from) noexcept
    : PricePairState() {
    *this = ::std::move(from);
  }

  inline PricePairState& operator=(const PricePairState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PricePairState& operator=(PricePairState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PricePairState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PricePairState* internal_default_instance() {
    return reinterpret_cast<const PricePairState*>(
               &_PricePairState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PricePairState& a, PricePairState& b) {
    a.Swap(&b);
  }
  inline void Swap(PricePairState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PricePairState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PricePairState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PricePairState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PricePairState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PricePairState& from) {
    PricePairState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PricePairState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.PricePairState";
  }
  protected:
  explicit PricePairState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairPriceFieldNumber = 1,
    kBasePriceFieldNumber = 2,
    kQuotePriceFieldNumber = 3,
    kBaseCumulativePriceFieldNumber = 4,
    kQuoteCumulativePriceFieldNumber = 5,
    kBaseTimestampFieldNumber = 6,
    kQuoteTimestampFieldNumber = 7,
  };
  // string pair_price = 1 [json_name = "pairPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_pair_price() ;
  const std::string& pair_price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pair_price(Arg_&& arg, Args_... args);
  std::string* mutable_pair_price();
  PROTOBUF_NODISCARD std::string* release_pair_price();
  void set_allocated_pair_price(std::string* ptr);

  private:
  const std::string& _internal_pair_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pair_price(
      const std::string& value);
  std::string* _internal_mutable_pair_price();

  public:
  // string base_price = 2 [json_name = "basePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_base_price() ;
  const std::string& base_price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_price(Arg_&& arg, Args_... args);
  std::string* mutable_base_price();
  PROTOBUF_NODISCARD std::string* release_base_price();
  void set_allocated_base_price(std::string* ptr);

  private:
  const std::string& _internal_base_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_price(
      const std::string& value);
  std::string* _internal_mutable_base_price();

  public:
  // string quote_price = 3 [json_name = "quotePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_quote_price() ;
  const std::string& quote_price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote_price(Arg_&& arg, Args_... args);
  std::string* mutable_quote_price();
  PROTOBUF_NODISCARD std::string* release_quote_price();
  void set_allocated_quote_price(std::string* ptr);

  private:
  const std::string& _internal_quote_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_price(
      const std::string& value);
  std::string* _internal_mutable_quote_price();

  public:
  // string base_cumulative_price = 4 [json_name = "baseCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_base_cumulative_price() ;
  const std::string& base_cumulative_price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_cumulative_price(Arg_&& arg, Args_... args);
  std::string* mutable_base_cumulative_price();
  PROTOBUF_NODISCARD std::string* release_base_cumulative_price();
  void set_allocated_base_cumulative_price(std::string* ptr);

  private:
  const std::string& _internal_base_cumulative_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_cumulative_price(
      const std::string& value);
  std::string* _internal_mutable_base_cumulative_price();

  public:
  // string quote_cumulative_price = 5 [json_name = "quoteCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  void clear_quote_cumulative_price() ;
  const std::string& quote_cumulative_price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote_cumulative_price(Arg_&& arg, Args_... args);
  std::string* mutable_quote_cumulative_price();
  PROTOBUF_NODISCARD std::string* release_quote_cumulative_price();
  void set_allocated_quote_cumulative_price(std::string* ptr);

  private:
  const std::string& _internal_quote_cumulative_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_cumulative_price(
      const std::string& value);
  std::string* _internal_mutable_quote_cumulative_price();

  public:
  // int64 base_timestamp = 6 [json_name = "baseTimestamp"];
  void clear_base_timestamp() ;
  ::int64_t base_timestamp() const;
  void set_base_timestamp(::int64_t value);

  private:
  ::int64_t _internal_base_timestamp() const;
  void _internal_set_base_timestamp(::int64_t value);

  public:
  // int64 quote_timestamp = 7 [json_name = "quoteTimestamp"];
  void clear_quote_timestamp() ;
  ::int64_t quote_timestamp() const;
  void set_quote_timestamp(::int64_t value);

  private:
  ::int64_t _internal_quote_timestamp() const;
  void _internal_set_quote_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.PricePairState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pair_price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_cumulative_price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_cumulative_price_;
    ::int64_t base_timestamp_;
    ::int64_t quote_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryOraclePriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.oracle.v1beta1.QueryOraclePriceResponse) */ {
 public:
  inline QueryOraclePriceResponse() : QueryOraclePriceResponse(nullptr) {}
  ~QueryOraclePriceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryOraclePriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryOraclePriceResponse(const QueryOraclePriceResponse& from);
  QueryOraclePriceResponse(QueryOraclePriceResponse&& from) noexcept
    : QueryOraclePriceResponse() {
    *this = ::std::move(from);
  }

  inline QueryOraclePriceResponse& operator=(const QueryOraclePriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryOraclePriceResponse& operator=(QueryOraclePriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryOraclePriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryOraclePriceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryOraclePriceResponse*>(
               &_QueryOraclePriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(QueryOraclePriceResponse& a, QueryOraclePriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryOraclePriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryOraclePriceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryOraclePriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryOraclePriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryOraclePriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryOraclePriceResponse& from) {
    QueryOraclePriceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryOraclePriceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.oracle.v1beta1.QueryOraclePriceResponse";
  }
  protected:
  explicit QueryOraclePriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPricePairStateFieldNumber = 1,
  };
  // .injective.oracle.v1beta1.PricePairState price_pair_state = 1 [json_name = "pricePairState"];
  bool has_price_pair_state() const;
  void clear_price_pair_state() ;
  const ::injective::oracle::v1beta1::PricePairState& price_pair_state() const;
  PROTOBUF_NODISCARD ::injective::oracle::v1beta1::PricePairState* release_price_pair_state();
  ::injective::oracle::v1beta1::PricePairState* mutable_price_pair_state();
  void set_allocated_price_pair_state(::injective::oracle::v1beta1::PricePairState* price_pair_state);
  private:
  const ::injective::oracle::v1beta1::PricePairState& _internal_price_pair_state() const;
  ::injective::oracle::v1beta1::PricePairState* _internal_mutable_price_pair_state();
  public:
  void unsafe_arena_set_allocated_price_pair_state(
      ::injective::oracle::v1beta1::PricePairState* price_pair_state);
  ::injective::oracle::v1beta1::PricePairState* unsafe_arena_release_price_pair_state();
  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.QueryOraclePriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::oracle::v1beta1::PricePairState* price_pair_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2foracle_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryPythPriceRequest

// string price_id = 1 [json_name = "priceId"];
inline void QueryPythPriceRequest::clear_price_id() {
  _impl_.price_id_.ClearToEmpty();
}
inline const std::string& QueryPythPriceRequest::price_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryPythPriceRequest.price_id)
  return _internal_price_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPythPriceRequest::set_price_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryPythPriceRequest.price_id)
}
inline std::string* QueryPythPriceRequest::mutable_price_id() {
  std::string* _s = _internal_mutable_price_id();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryPythPriceRequest.price_id)
  return _s;
}
inline const std::string& QueryPythPriceRequest::_internal_price_id() const {
  return _impl_.price_id_.Get();
}
inline void QueryPythPriceRequest::_internal_set_price_id(const std::string& value) {
  ;


  _impl_.price_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPythPriceRequest::_internal_mutable_price_id() {
  ;
  return _impl_.price_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPythPriceRequest::release_price_id() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryPythPriceRequest.price_id)
  return _impl_.price_id_.Release();
}
inline void QueryPythPriceRequest::set_allocated_price_id(std::string* value) {
  _impl_.price_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_id_.IsDefault()) {
          _impl_.price_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryPythPriceRequest.price_id)
}

// -------------------------------------------------------------------

// QueryPythPriceResponse

// .injective.oracle.v1beta1.PythPriceState price_state = 1 [json_name = "priceState"];
inline bool QueryPythPriceResponse::has_price_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_state_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::PythPriceState& QueryPythPriceResponse::_internal_price_state() const {
  const ::injective::oracle::v1beta1::PythPriceState* p = _impl_.price_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::PythPriceState&>(
      ::injective::oracle::v1beta1::_PythPriceState_default_instance_);
}
inline const ::injective::oracle::v1beta1::PythPriceState& QueryPythPriceResponse::price_state() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryPythPriceResponse.price_state)
  return _internal_price_state();
}
inline void QueryPythPriceResponse::unsafe_arena_set_allocated_price_state(
    ::injective::oracle::v1beta1::PythPriceState* price_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_state_);
  }
  _impl_.price_state_ = price_state;
  if (price_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryPythPriceResponse.price_state)
}
inline ::injective::oracle::v1beta1::PythPriceState* QueryPythPriceResponse::release_price_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::PythPriceState* temp = _impl_.price_state_;
  _impl_.price_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::PythPriceState* QueryPythPriceResponse::unsafe_arena_release_price_state() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryPythPriceResponse.price_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::PythPriceState* temp = _impl_.price_state_;
  _impl_.price_state_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::PythPriceState* QueryPythPriceResponse::_internal_mutable_price_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.price_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::PythPriceState>(GetArenaForAllocation());
    _impl_.price_state_ = p;
  }
  return _impl_.price_state_;
}
inline ::injective::oracle::v1beta1::PythPriceState* QueryPythPriceResponse::mutable_price_state() {
  ::injective::oracle::v1beta1::PythPriceState* _msg = _internal_mutable_price_state();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryPythPriceResponse.price_state)
  return _msg;
}
inline void QueryPythPriceResponse::set_allocated_price_state(::injective::oracle::v1beta1::PythPriceState* price_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_state_);
  }
  if (price_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_state));
    if (message_arena != submessage_arena) {
      price_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.price_state_ = price_state;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryPythPriceResponse.price_state)
}

// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .injective.oracle.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::Params& QueryParamsResponse::_internal_params() const {
  const ::injective::oracle::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::Params&>(
      ::injective::oracle::v1beta1::_Params_default_instance_);
}
inline const ::injective::oracle::v1beta1::Params& QueryParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(
    ::injective::oracle::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryParamsResponse.params)
}
inline ::injective::oracle::v1beta1::Params* QueryParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::Params* QueryParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::oracle::v1beta1::Params* QueryParamsResponse::mutable_params() {
  ::injective::oracle::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::injective::oracle::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryBandRelayersRequest

// -------------------------------------------------------------------

// QueryBandRelayersResponse

// repeated string relayers = 1 [json_name = "relayers"];
inline int QueryBandRelayersResponse::_internal_relayers_size() const {
  return _impl_.relayers_.size();
}
inline int QueryBandRelayersResponse::relayers_size() const {
  return _internal_relayers_size();
}
inline void QueryBandRelayersResponse::clear_relayers() {
  _internal_mutable_relayers()->Clear();
}
inline std::string* QueryBandRelayersResponse::add_relayers() {
  std::string* _s = _internal_add_relayers();
  // @@protoc_insertion_point(field_add_mutable:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
  return _s;
}
inline const std::string& QueryBandRelayersResponse::relayers(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
  return _internal_relayers(index);
}
inline std::string* QueryBandRelayersResponse::mutable_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
  return _internal_mutable_relayers()->Mutable(index);
}
inline void QueryBandRelayersResponse::set_relayers(int index, const std::string& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::set_relayers(int index, std::string&& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::set_relayers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::set_relayers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_relayers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::set_relayers(int index, absl::string_view value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::add_relayers(const std::string& value) {
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::add_relayers(std::string&& value) {
  _internal_mutable_relayers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::add_relayers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::add_relayers(const char* value, std::size_t size) {
  _internal_mutable_relayers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline void QueryBandRelayersResponse::add_relayers(absl::string_view value) {
  _internal_mutable_relayers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryBandRelayersResponse::relayers() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
  return _internal_relayers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* QueryBandRelayersResponse::mutable_relayers() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryBandRelayersResponse.relayers)
  return _internal_mutable_relayers();
}
inline const std::string& QueryBandRelayersResponse::_internal_relayers(int index) const {
  return _internal_relayers().Get(index);
}
inline std::string* QueryBandRelayersResponse::_internal_add_relayers() {
  return _internal_mutable_relayers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryBandRelayersResponse::_internal_relayers() const {
  return _impl_.relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryBandRelayersResponse::_internal_mutable_relayers() {
  return &_impl_.relayers_;
}

// -------------------------------------------------------------------

// QueryBandPriceStatesRequest

// -------------------------------------------------------------------

// QueryBandPriceStatesResponse

// repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
inline int QueryBandPriceStatesResponse::_internal_price_states_size() const {
  return _impl_.price_states_.size();
}
inline int QueryBandPriceStatesResponse::price_states_size() const {
  return _internal_price_states_size();
}
inline ::injective::oracle::v1beta1::BandPriceState* QueryBandPriceStatesResponse::mutable_price_states(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryBandPriceStatesResponse.price_states)
  return _internal_mutable_price_states()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState >*
QueryBandPriceStatesResponse::mutable_price_states() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryBandPriceStatesResponse.price_states)
  return _internal_mutable_price_states();
}
inline const ::injective::oracle::v1beta1::BandPriceState& QueryBandPriceStatesResponse::_internal_price_states(int index) const {
  return _internal_price_states().Get(index);
}
inline const ::injective::oracle::v1beta1::BandPriceState& QueryBandPriceStatesResponse::price_states(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryBandPriceStatesResponse.price_states)
  return _internal_price_states(index);
}
inline ::injective::oracle::v1beta1::BandPriceState* QueryBandPriceStatesResponse::_internal_add_price_states() {
  return _internal_mutable_price_states()->Add();
}
inline ::injective::oracle::v1beta1::BandPriceState* QueryBandPriceStatesResponse::add_price_states() {
  ::injective::oracle::v1beta1::BandPriceState* _add = _internal_add_price_states();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryBandPriceStatesResponse.price_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState >&
QueryBandPriceStatesResponse::price_states() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryBandPriceStatesResponse.price_states)
  return _internal_price_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::BandPriceState>&
QueryBandPriceStatesResponse::_internal_price_states() const {
  return _impl_.price_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::BandPriceState>*
QueryBandPriceStatesResponse::_internal_mutable_price_states() {
  return &_impl_.price_states_;
}

// -------------------------------------------------------------------

// QueryBandIBCPriceStatesRequest

// -------------------------------------------------------------------

// QueryBandIBCPriceStatesResponse

// repeated .injective.oracle.v1beta1.BandPriceState price_states = 1 [json_name = "priceStates"];
inline int QueryBandIBCPriceStatesResponse::_internal_price_states_size() const {
  return _impl_.price_states_.size();
}
inline int QueryBandIBCPriceStatesResponse::price_states_size() const {
  return _internal_price_states_size();
}
inline ::injective::oracle::v1beta1::BandPriceState* QueryBandIBCPriceStatesResponse::mutable_price_states(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.price_states)
  return _internal_mutable_price_states()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState >*
QueryBandIBCPriceStatesResponse::mutable_price_states() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.price_states)
  return _internal_mutable_price_states();
}
inline const ::injective::oracle::v1beta1::BandPriceState& QueryBandIBCPriceStatesResponse::_internal_price_states(int index) const {
  return _internal_price_states().Get(index);
}
inline const ::injective::oracle::v1beta1::BandPriceState& QueryBandIBCPriceStatesResponse::price_states(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.price_states)
  return _internal_price_states(index);
}
inline ::injective::oracle::v1beta1::BandPriceState* QueryBandIBCPriceStatesResponse::_internal_add_price_states() {
  return _internal_mutable_price_states()->Add();
}
inline ::injective::oracle::v1beta1::BandPriceState* QueryBandIBCPriceStatesResponse::add_price_states() {
  ::injective::oracle::v1beta1::BandPriceState* _add = _internal_add_price_states();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.price_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::BandPriceState >&
QueryBandIBCPriceStatesResponse::price_states() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.price_states)
  return _internal_price_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::BandPriceState>&
QueryBandIBCPriceStatesResponse::_internal_price_states() const {
  return _impl_.price_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::BandPriceState>*
QueryBandIBCPriceStatesResponse::_internal_mutable_price_states() {
  return &_impl_.price_states_;
}

// -------------------------------------------------------------------

// QueryPriceFeedPriceStatesRequest

// -------------------------------------------------------------------

// QueryPriceFeedPriceStatesResponse

// repeated .injective.oracle.v1beta1.PriceFeedState price_states = 1 [json_name = "priceStates"];
inline int QueryPriceFeedPriceStatesResponse::_internal_price_states_size() const {
  return _impl_.price_states_.size();
}
inline int QueryPriceFeedPriceStatesResponse::price_states_size() const {
  return _internal_price_states_size();
}
inline ::injective::oracle::v1beta1::PriceFeedState* QueryPriceFeedPriceStatesResponse::mutable_price_states(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.price_states)
  return _internal_mutable_price_states()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceFeedState >*
QueryPriceFeedPriceStatesResponse::mutable_price_states() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.price_states)
  return _internal_mutable_price_states();
}
inline const ::injective::oracle::v1beta1::PriceFeedState& QueryPriceFeedPriceStatesResponse::_internal_price_states(int index) const {
  return _internal_price_states().Get(index);
}
inline const ::injective::oracle::v1beta1::PriceFeedState& QueryPriceFeedPriceStatesResponse::price_states(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.price_states)
  return _internal_price_states(index);
}
inline ::injective::oracle::v1beta1::PriceFeedState* QueryPriceFeedPriceStatesResponse::_internal_add_price_states() {
  return _internal_mutable_price_states()->Add();
}
inline ::injective::oracle::v1beta1::PriceFeedState* QueryPriceFeedPriceStatesResponse::add_price_states() {
  ::injective::oracle::v1beta1::PriceFeedState* _add = _internal_add_price_states();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.price_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceFeedState >&
QueryPriceFeedPriceStatesResponse::price_states() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.price_states)
  return _internal_price_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceFeedState>&
QueryPriceFeedPriceStatesResponse::_internal_price_states() const {
  return _impl_.price_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceFeedState>*
QueryPriceFeedPriceStatesResponse::_internal_mutable_price_states() {
  return &_impl_.price_states_;
}

// -------------------------------------------------------------------

// QueryCoinbasePriceStatesRequest

// -------------------------------------------------------------------

// QueryCoinbasePriceStatesResponse

// repeated .injective.oracle.v1beta1.CoinbasePriceState price_states = 1 [json_name = "priceStates"];
inline int QueryCoinbasePriceStatesResponse::_internal_price_states_size() const {
  return _impl_.price_states_.size();
}
inline int QueryCoinbasePriceStatesResponse::price_states_size() const {
  return _internal_price_states_size();
}
inline ::injective::oracle::v1beta1::CoinbasePriceState* QueryCoinbasePriceStatesResponse::mutable_price_states(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.price_states)
  return _internal_mutable_price_states()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::CoinbasePriceState >*
QueryCoinbasePriceStatesResponse::mutable_price_states() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.price_states)
  return _internal_mutable_price_states();
}
inline const ::injective::oracle::v1beta1::CoinbasePriceState& QueryCoinbasePriceStatesResponse::_internal_price_states(int index) const {
  return _internal_price_states().Get(index);
}
inline const ::injective::oracle::v1beta1::CoinbasePriceState& QueryCoinbasePriceStatesResponse::price_states(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.price_states)
  return _internal_price_states(index);
}
inline ::injective::oracle::v1beta1::CoinbasePriceState* QueryCoinbasePriceStatesResponse::_internal_add_price_states() {
  return _internal_mutable_price_states()->Add();
}
inline ::injective::oracle::v1beta1::CoinbasePriceState* QueryCoinbasePriceStatesResponse::add_price_states() {
  ::injective::oracle::v1beta1::CoinbasePriceState* _add = _internal_add_price_states();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.price_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::CoinbasePriceState >&
QueryCoinbasePriceStatesResponse::price_states() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.price_states)
  return _internal_price_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::CoinbasePriceState>&
QueryCoinbasePriceStatesResponse::_internal_price_states() const {
  return _impl_.price_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::CoinbasePriceState>*
QueryCoinbasePriceStatesResponse::_internal_mutable_price_states() {
  return &_impl_.price_states_;
}

// -------------------------------------------------------------------

// QueryPythPriceStatesRequest

// -------------------------------------------------------------------

// QueryPythPriceStatesResponse

// repeated .injective.oracle.v1beta1.PythPriceState price_states = 1 [json_name = "priceStates"];
inline int QueryPythPriceStatesResponse::_internal_price_states_size() const {
  return _impl_.price_states_.size();
}
inline int QueryPythPriceStatesResponse::price_states_size() const {
  return _internal_price_states_size();
}
inline ::injective::oracle::v1beta1::PythPriceState* QueryPythPriceStatesResponse::mutable_price_states(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryPythPriceStatesResponse.price_states)
  return _internal_mutable_price_states()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState >*
QueryPythPriceStatesResponse::mutable_price_states() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryPythPriceStatesResponse.price_states)
  return _internal_mutable_price_states();
}
inline const ::injective::oracle::v1beta1::PythPriceState& QueryPythPriceStatesResponse::_internal_price_states(int index) const {
  return _internal_price_states().Get(index);
}
inline const ::injective::oracle::v1beta1::PythPriceState& QueryPythPriceStatesResponse::price_states(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryPythPriceStatesResponse.price_states)
  return _internal_price_states(index);
}
inline ::injective::oracle::v1beta1::PythPriceState* QueryPythPriceStatesResponse::_internal_add_price_states() {
  return _internal_mutable_price_states()->Add();
}
inline ::injective::oracle::v1beta1::PythPriceState* QueryPythPriceStatesResponse::add_price_states() {
  ::injective::oracle::v1beta1::PythPriceState* _add = _internal_add_price_states();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryPythPriceStatesResponse.price_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PythPriceState >&
QueryPythPriceStatesResponse::price_states() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryPythPriceStatesResponse.price_states)
  return _internal_price_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PythPriceState>&
QueryPythPriceStatesResponse::_internal_price_states() const {
  return _impl_.price_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PythPriceState>*
QueryPythPriceStatesResponse::_internal_mutable_price_states() {
  return &_impl_.price_states_;
}

// -------------------------------------------------------------------

// QueryProviderPriceStateRequest

// string provider = 1 [json_name = "provider"];
inline void QueryProviderPriceStateRequest::clear_provider() {
  _impl_.provider_.ClearToEmpty();
}
inline const std::string& QueryProviderPriceStateRequest::provider() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryProviderPriceStateRequest.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryProviderPriceStateRequest::set_provider(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryProviderPriceStateRequest.provider)
}
inline std::string* QueryProviderPriceStateRequest::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryProviderPriceStateRequest.provider)
  return _s;
}
inline const std::string& QueryProviderPriceStateRequest::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void QueryProviderPriceStateRequest::_internal_set_provider(const std::string& value) {
  ;


  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryProviderPriceStateRequest::_internal_mutable_provider() {
  ;
  return _impl_.provider_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryProviderPriceStateRequest::release_provider() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryProviderPriceStateRequest.provider)
  return _impl_.provider_.Release();
}
inline void QueryProviderPriceStateRequest::set_allocated_provider(std::string* value) {
  _impl_.provider_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryProviderPriceStateRequest.provider)
}

// string symbol = 2 [json_name = "symbol"];
inline void QueryProviderPriceStateRequest::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& QueryProviderPriceStateRequest::symbol() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryProviderPriceStateRequest.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryProviderPriceStateRequest::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryProviderPriceStateRequest.symbol)
}
inline std::string* QueryProviderPriceStateRequest::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryProviderPriceStateRequest.symbol)
  return _s;
}
inline const std::string& QueryProviderPriceStateRequest::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void QueryProviderPriceStateRequest::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryProviderPriceStateRequest::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryProviderPriceStateRequest::release_symbol() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryProviderPriceStateRequest.symbol)
  return _impl_.symbol_.Release();
}
inline void QueryProviderPriceStateRequest::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryProviderPriceStateRequest.symbol)
}

// -------------------------------------------------------------------

// QueryProviderPriceStateResponse

// .injective.oracle.v1beta1.PriceState price_state = 1 [json_name = "priceState"];
inline bool QueryProviderPriceStateResponse::has_price_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_state_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::PriceState& QueryProviderPriceStateResponse::_internal_price_state() const {
  const ::injective::oracle::v1beta1::PriceState* p = _impl_.price_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::PriceState&>(
      ::injective::oracle::v1beta1::_PriceState_default_instance_);
}
inline const ::injective::oracle::v1beta1::PriceState& QueryProviderPriceStateResponse::price_state() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryProviderPriceStateResponse.price_state)
  return _internal_price_state();
}
inline void QueryProviderPriceStateResponse::unsafe_arena_set_allocated_price_state(
    ::injective::oracle::v1beta1::PriceState* price_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_state_);
  }
  _impl_.price_state_ = price_state;
  if (price_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryProviderPriceStateResponse.price_state)
}
inline ::injective::oracle::v1beta1::PriceState* QueryProviderPriceStateResponse::release_price_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::PriceState* temp = _impl_.price_state_;
  _impl_.price_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::PriceState* QueryProviderPriceStateResponse::unsafe_arena_release_price_state() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryProviderPriceStateResponse.price_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::PriceState* temp = _impl_.price_state_;
  _impl_.price_state_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::PriceState* QueryProviderPriceStateResponse::_internal_mutable_price_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.price_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::PriceState>(GetArenaForAllocation());
    _impl_.price_state_ = p;
  }
  return _impl_.price_state_;
}
inline ::injective::oracle::v1beta1::PriceState* QueryProviderPriceStateResponse::mutable_price_state() {
  ::injective::oracle::v1beta1::PriceState* _msg = _internal_mutable_price_state();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryProviderPriceStateResponse.price_state)
  return _msg;
}
inline void QueryProviderPriceStateResponse::set_allocated_price_state(::injective::oracle::v1beta1::PriceState* price_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_state_);
  }
  if (price_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_state));
    if (message_arena != submessage_arena) {
      price_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.price_state_ = price_state;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryProviderPriceStateResponse.price_state)
}

// -------------------------------------------------------------------

// QueryModuleStateRequest

// -------------------------------------------------------------------

// QueryModuleStateResponse

// .injective.oracle.v1beta1.GenesisState state = 1 [json_name = "state"];
inline bool QueryModuleStateResponse::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::GenesisState& QueryModuleStateResponse::_internal_state() const {
  const ::injective::oracle::v1beta1::GenesisState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::GenesisState&>(
      ::injective::oracle::v1beta1::_GenesisState_default_instance_);
}
inline const ::injective::oracle::v1beta1::GenesisState& QueryModuleStateResponse::state() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryModuleStateResponse.state)
  return _internal_state();
}
inline void QueryModuleStateResponse::unsafe_arena_set_allocated_state(
    ::injective::oracle::v1beta1::GenesisState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryModuleStateResponse.state)
}
inline ::injective::oracle::v1beta1::GenesisState* QueryModuleStateResponse::release_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::GenesisState* QueryModuleStateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryModuleStateResponse.state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::GenesisState* QueryModuleStateResponse::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::GenesisState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::injective::oracle::v1beta1::GenesisState* QueryModuleStateResponse::mutable_state() {
  ::injective::oracle::v1beta1::GenesisState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryModuleStateResponse.state)
  return _msg;
}
inline void QueryModuleStateResponse::set_allocated_state(::injective::oracle::v1beta1::GenesisState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryModuleStateResponse.state)
}

// -------------------------------------------------------------------

// QueryHistoricalPriceRecordsRequest

// .injective.oracle.v1beta1.OracleType oracle = 1 [json_name = "oracle"];
inline void QueryHistoricalPriceRecordsRequest::clear_oracle() {
  _impl_.oracle_ = 0;
}
inline ::injective::oracle::v1beta1::OracleType QueryHistoricalPriceRecordsRequest::oracle() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.oracle)
  return _internal_oracle();
}
inline void QueryHistoricalPriceRecordsRequest::set_oracle(::injective::oracle::v1beta1::OracleType value) {
   _internal_set_oracle(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.oracle)
}
inline ::injective::oracle::v1beta1::OracleType QueryHistoricalPriceRecordsRequest::_internal_oracle() const {
  return static_cast<::injective::oracle::v1beta1::OracleType>(_impl_.oracle_);
}
inline void QueryHistoricalPriceRecordsRequest::_internal_set_oracle(::injective::oracle::v1beta1::OracleType value) {
  ;
  _impl_.oracle_ = value;
}

// string symbol_id = 2 [json_name = "symbolId"];
inline void QueryHistoricalPriceRecordsRequest::clear_symbol_id() {
  _impl_.symbol_id_.ClearToEmpty();
}
inline const std::string& QueryHistoricalPriceRecordsRequest::symbol_id() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.symbol_id)
  return _internal_symbol_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryHistoricalPriceRecordsRequest::set_symbol_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.symbol_id)
}
inline std::string* QueryHistoricalPriceRecordsRequest::mutable_symbol_id() {
  std::string* _s = _internal_mutable_symbol_id();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.symbol_id)
  return _s;
}
inline const std::string& QueryHistoricalPriceRecordsRequest::_internal_symbol_id() const {
  return _impl_.symbol_id_.Get();
}
inline void QueryHistoricalPriceRecordsRequest::_internal_set_symbol_id(const std::string& value) {
  ;


  _impl_.symbol_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryHistoricalPriceRecordsRequest::_internal_mutable_symbol_id() {
  ;
  return _impl_.symbol_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryHistoricalPriceRecordsRequest::release_symbol_id() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.symbol_id)
  return _impl_.symbol_id_.Release();
}
inline void QueryHistoricalPriceRecordsRequest::set_allocated_symbol_id(std::string* value) {
  _impl_.symbol_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_id_.IsDefault()) {
          _impl_.symbol_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.symbol_id)
}

// -------------------------------------------------------------------

// QueryHistoricalPriceRecordsResponse

// repeated .injective.oracle.v1beta1.PriceRecords price_records = 1 [json_name = "priceRecords"];
inline int QueryHistoricalPriceRecordsResponse::_internal_price_records_size() const {
  return _impl_.price_records_.size();
}
inline int QueryHistoricalPriceRecordsResponse::price_records_size() const {
  return _internal_price_records_size();
}
inline ::injective::oracle::v1beta1::PriceRecords* QueryHistoricalPriceRecordsResponse::mutable_price_records(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.price_records)
  return _internal_mutable_price_records()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecords >*
QueryHistoricalPriceRecordsResponse::mutable_price_records() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.price_records)
  return _internal_mutable_price_records();
}
inline const ::injective::oracle::v1beta1::PriceRecords& QueryHistoricalPriceRecordsResponse::_internal_price_records(int index) const {
  return _internal_price_records().Get(index);
}
inline const ::injective::oracle::v1beta1::PriceRecords& QueryHistoricalPriceRecordsResponse::price_records(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.price_records)
  return _internal_price_records(index);
}
inline ::injective::oracle::v1beta1::PriceRecords* QueryHistoricalPriceRecordsResponse::_internal_add_price_records() {
  return _internal_mutable_price_records()->Add();
}
inline ::injective::oracle::v1beta1::PriceRecords* QueryHistoricalPriceRecordsResponse::add_price_records() {
  ::injective::oracle::v1beta1::PriceRecords* _add = _internal_add_price_records();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.price_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecords >&
QueryHistoricalPriceRecordsResponse::price_records() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.price_records)
  return _internal_price_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceRecords>&
QueryHistoricalPriceRecordsResponse::_internal_price_records() const {
  return _impl_.price_records_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceRecords>*
QueryHistoricalPriceRecordsResponse::_internal_mutable_price_records() {
  return &_impl_.price_records_;
}

// -------------------------------------------------------------------

// OracleHistoryOptions

// uint64 max_age = 1 [json_name = "maxAge"];
inline void OracleHistoryOptions::clear_max_age() {
  _impl_.max_age_ = ::uint64_t{0u};
}
inline ::uint64_t OracleHistoryOptions::max_age() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.OracleHistoryOptions.max_age)
  return _internal_max_age();
}
inline void OracleHistoryOptions::set_max_age(::uint64_t value) {
  _internal_set_max_age(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.OracleHistoryOptions.max_age)
}
inline ::uint64_t OracleHistoryOptions::_internal_max_age() const {
  return _impl_.max_age_;
}
inline void OracleHistoryOptions::_internal_set_max_age(::uint64_t value) {
  ;
  _impl_.max_age_ = value;
}

// bool include_raw_history = 2 [json_name = "includeRawHistory"];
inline void OracleHistoryOptions::clear_include_raw_history() {
  _impl_.include_raw_history_ = false;
}
inline bool OracleHistoryOptions::include_raw_history() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.OracleHistoryOptions.include_raw_history)
  return _internal_include_raw_history();
}
inline void OracleHistoryOptions::set_include_raw_history(bool value) {
  _internal_set_include_raw_history(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.OracleHistoryOptions.include_raw_history)
}
inline bool OracleHistoryOptions::_internal_include_raw_history() const {
  return _impl_.include_raw_history_;
}
inline void OracleHistoryOptions::_internal_set_include_raw_history(bool value) {
  ;
  _impl_.include_raw_history_ = value;
}

// bool include_metadata = 3 [json_name = "includeMetadata"];
inline void OracleHistoryOptions::clear_include_metadata() {
  _impl_.include_metadata_ = false;
}
inline bool OracleHistoryOptions::include_metadata() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.OracleHistoryOptions.include_metadata)
  return _internal_include_metadata();
}
inline void OracleHistoryOptions::set_include_metadata(bool value) {
  _internal_set_include_metadata(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.OracleHistoryOptions.include_metadata)
}
inline bool OracleHistoryOptions::_internal_include_metadata() const {
  return _impl_.include_metadata_;
}
inline void OracleHistoryOptions::_internal_set_include_metadata(bool value) {
  ;
  _impl_.include_metadata_ = value;
}

// -------------------------------------------------------------------

// QueryOracleVolatilityRequest

// .injective.oracle.v1beta1.OracleInfo base_info = 1 [json_name = "baseInfo"];
inline bool QueryOracleVolatilityRequest::has_base_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_info_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::OracleInfo& QueryOracleVolatilityRequest::_internal_base_info() const {
  const ::injective::oracle::v1beta1::OracleInfo* p = _impl_.base_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::OracleInfo&>(
      ::injective::oracle::v1beta1::_OracleInfo_default_instance_);
}
inline const ::injective::oracle::v1beta1::OracleInfo& QueryOracleVolatilityRequest::base_info() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleVolatilityRequest.base_info)
  return _internal_base_info();
}
inline void QueryOracleVolatilityRequest::unsafe_arena_set_allocated_base_info(
    ::injective::oracle::v1beta1::OracleInfo* base_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_info_);
  }
  _impl_.base_info_ = base_info;
  if (base_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityRequest.base_info)
}
inline ::injective::oracle::v1beta1::OracleInfo* QueryOracleVolatilityRequest::release_base_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::OracleInfo* temp = _impl_.base_info_;
  _impl_.base_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::OracleInfo* QueryOracleVolatilityRequest::unsafe_arena_release_base_info() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOracleVolatilityRequest.base_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::OracleInfo* temp = _impl_.base_info_;
  _impl_.base_info_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::OracleInfo* QueryOracleVolatilityRequest::_internal_mutable_base_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::OracleInfo>(GetArenaForAllocation());
    _impl_.base_info_ = p;
  }
  return _impl_.base_info_;
}
inline ::injective::oracle::v1beta1::OracleInfo* QueryOracleVolatilityRequest::mutable_base_info() {
  ::injective::oracle::v1beta1::OracleInfo* _msg = _internal_mutable_base_info();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleVolatilityRequest.base_info)
  return _msg;
}
inline void QueryOracleVolatilityRequest::set_allocated_base_info(::injective::oracle::v1beta1::OracleInfo* base_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_info_);
  }
  if (base_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_info));
    if (message_arena != submessage_arena) {
      base_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityRequest.base_info)
}

// .injective.oracle.v1beta1.OracleInfo quote_info = 2 [json_name = "quoteInfo"];
inline bool QueryOracleVolatilityRequest::has_quote_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.quote_info_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::OracleInfo& QueryOracleVolatilityRequest::_internal_quote_info() const {
  const ::injective::oracle::v1beta1::OracleInfo* p = _impl_.quote_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::OracleInfo&>(
      ::injective::oracle::v1beta1::_OracleInfo_default_instance_);
}
inline const ::injective::oracle::v1beta1::OracleInfo& QueryOracleVolatilityRequest::quote_info() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleVolatilityRequest.quote_info)
  return _internal_quote_info();
}
inline void QueryOracleVolatilityRequest::unsafe_arena_set_allocated_quote_info(
    ::injective::oracle::v1beta1::OracleInfo* quote_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quote_info_);
  }
  _impl_.quote_info_ = quote_info;
  if (quote_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityRequest.quote_info)
}
inline ::injective::oracle::v1beta1::OracleInfo* QueryOracleVolatilityRequest::release_quote_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::oracle::v1beta1::OracleInfo* temp = _impl_.quote_info_;
  _impl_.quote_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::OracleInfo* QueryOracleVolatilityRequest::unsafe_arena_release_quote_info() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOracleVolatilityRequest.quote_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::injective::oracle::v1beta1::OracleInfo* temp = _impl_.quote_info_;
  _impl_.quote_info_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::OracleInfo* QueryOracleVolatilityRequest::_internal_mutable_quote_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.quote_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::OracleInfo>(GetArenaForAllocation());
    _impl_.quote_info_ = p;
  }
  return _impl_.quote_info_;
}
inline ::injective::oracle::v1beta1::OracleInfo* QueryOracleVolatilityRequest::mutable_quote_info() {
  ::injective::oracle::v1beta1::OracleInfo* _msg = _internal_mutable_quote_info();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleVolatilityRequest.quote_info)
  return _msg;
}
inline void QueryOracleVolatilityRequest::set_allocated_quote_info(::injective::oracle::v1beta1::OracleInfo* quote_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quote_info_);
  }
  if (quote_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quote_info));
    if (message_arena != submessage_arena) {
      quote_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quote_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.quote_info_ = quote_info;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityRequest.quote_info)
}

// .injective.oracle.v1beta1.OracleHistoryOptions oracle_history_options = 3 [json_name = "oracleHistoryOptions"];
inline bool QueryOracleVolatilityRequest::has_oracle_history_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oracle_history_options_ != nullptr);
  return value;
}
inline void QueryOracleVolatilityRequest::clear_oracle_history_options() {
  if (_impl_.oracle_history_options_ != nullptr) _impl_.oracle_history_options_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::injective::oracle::v1beta1::OracleHistoryOptions& QueryOracleVolatilityRequest::_internal_oracle_history_options() const {
  const ::injective::oracle::v1beta1::OracleHistoryOptions* p = _impl_.oracle_history_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::OracleHistoryOptions&>(
      ::injective::oracle::v1beta1::_OracleHistoryOptions_default_instance_);
}
inline const ::injective::oracle::v1beta1::OracleHistoryOptions& QueryOracleVolatilityRequest::oracle_history_options() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleVolatilityRequest.oracle_history_options)
  return _internal_oracle_history_options();
}
inline void QueryOracleVolatilityRequest::unsafe_arena_set_allocated_oracle_history_options(
    ::injective::oracle::v1beta1::OracleHistoryOptions* oracle_history_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oracle_history_options_);
  }
  _impl_.oracle_history_options_ = oracle_history_options;
  if (oracle_history_options) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityRequest.oracle_history_options)
}
inline ::injective::oracle::v1beta1::OracleHistoryOptions* QueryOracleVolatilityRequest::release_oracle_history_options() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::injective::oracle::v1beta1::OracleHistoryOptions* temp = _impl_.oracle_history_options_;
  _impl_.oracle_history_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::OracleHistoryOptions* QueryOracleVolatilityRequest::unsafe_arena_release_oracle_history_options() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOracleVolatilityRequest.oracle_history_options)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::injective::oracle::v1beta1::OracleHistoryOptions* temp = _impl_.oracle_history_options_;
  _impl_.oracle_history_options_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::OracleHistoryOptions* QueryOracleVolatilityRequest::_internal_mutable_oracle_history_options() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.oracle_history_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::OracleHistoryOptions>(GetArenaForAllocation());
    _impl_.oracle_history_options_ = p;
  }
  return _impl_.oracle_history_options_;
}
inline ::injective::oracle::v1beta1::OracleHistoryOptions* QueryOracleVolatilityRequest::mutable_oracle_history_options() {
  ::injective::oracle::v1beta1::OracleHistoryOptions* _msg = _internal_mutable_oracle_history_options();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleVolatilityRequest.oracle_history_options)
  return _msg;
}
inline void QueryOracleVolatilityRequest::set_allocated_oracle_history_options(::injective::oracle::v1beta1::OracleHistoryOptions* oracle_history_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oracle_history_options_;
  }
  if (oracle_history_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oracle_history_options);
    if (message_arena != submessage_arena) {
      oracle_history_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oracle_history_options, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.oracle_history_options_ = oracle_history_options;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityRequest.oracle_history_options)
}

// -------------------------------------------------------------------

// QueryOracleVolatilityResponse

// string volatility = 1 [json_name = "volatility", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void QueryOracleVolatilityResponse::clear_volatility() {
  _impl_.volatility_.ClearToEmpty();
}
inline const std::string& QueryOracleVolatilityResponse::volatility() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleVolatilityResponse.volatility)
  return _internal_volatility();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOracleVolatilityResponse::set_volatility(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.volatility_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryOracleVolatilityResponse.volatility)
}
inline std::string* QueryOracleVolatilityResponse::mutable_volatility() {
  std::string* _s = _internal_mutable_volatility();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleVolatilityResponse.volatility)
  return _s;
}
inline const std::string& QueryOracleVolatilityResponse::_internal_volatility() const {
  return _impl_.volatility_.Get();
}
inline void QueryOracleVolatilityResponse::_internal_set_volatility(const std::string& value) {
  ;


  _impl_.volatility_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryOracleVolatilityResponse::_internal_mutable_volatility() {
  ;
  return _impl_.volatility_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryOracleVolatilityResponse::release_volatility() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOracleVolatilityResponse.volatility)
  return _impl_.volatility_.Release();
}
inline void QueryOracleVolatilityResponse::set_allocated_volatility(std::string* value) {
  _impl_.volatility_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.volatility_.IsDefault()) {
          _impl_.volatility_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityResponse.volatility)
}

// .injective.oracle.v1beta1.MetadataStatistics history_metadata = 2 [json_name = "historyMetadata"];
inline bool QueryOracleVolatilityResponse::has_history_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.history_metadata_ != nullptr);
  return value;
}
inline const ::injective::oracle::v1beta1::MetadataStatistics& QueryOracleVolatilityResponse::_internal_history_metadata() const {
  const ::injective::oracle::v1beta1::MetadataStatistics* p = _impl_.history_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::MetadataStatistics&>(
      ::injective::oracle::v1beta1::_MetadataStatistics_default_instance_);
}
inline const ::injective::oracle::v1beta1::MetadataStatistics& QueryOracleVolatilityResponse::history_metadata() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleVolatilityResponse.history_metadata)
  return _internal_history_metadata();
}
inline void QueryOracleVolatilityResponse::unsafe_arena_set_allocated_history_metadata(
    ::injective::oracle::v1beta1::MetadataStatistics* history_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.history_metadata_);
  }
  _impl_.history_metadata_ = history_metadata;
  if (history_metadata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityResponse.history_metadata)
}
inline ::injective::oracle::v1beta1::MetadataStatistics* QueryOracleVolatilityResponse::release_history_metadata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::MetadataStatistics* temp = _impl_.history_metadata_;
  _impl_.history_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::MetadataStatistics* QueryOracleVolatilityResponse::unsafe_arena_release_history_metadata() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOracleVolatilityResponse.history_metadata)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::MetadataStatistics* temp = _impl_.history_metadata_;
  _impl_.history_metadata_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::MetadataStatistics* QueryOracleVolatilityResponse::_internal_mutable_history_metadata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.history_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::MetadataStatistics>(GetArenaForAllocation());
    _impl_.history_metadata_ = p;
  }
  return _impl_.history_metadata_;
}
inline ::injective::oracle::v1beta1::MetadataStatistics* QueryOracleVolatilityResponse::mutable_history_metadata() {
  ::injective::oracle::v1beta1::MetadataStatistics* _msg = _internal_mutable_history_metadata();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleVolatilityResponse.history_metadata)
  return _msg;
}
inline void QueryOracleVolatilityResponse::set_allocated_history_metadata(::injective::oracle::v1beta1::MetadataStatistics* history_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.history_metadata_);
  }
  if (history_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(history_metadata));
    if (message_arena != submessage_arena) {
      history_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history_metadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.history_metadata_ = history_metadata;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOracleVolatilityResponse.history_metadata)
}

// repeated .injective.oracle.v1beta1.PriceRecord raw_history = 3 [json_name = "rawHistory"];
inline int QueryOracleVolatilityResponse::_internal_raw_history_size() const {
  return _impl_.raw_history_.size();
}
inline int QueryOracleVolatilityResponse::raw_history_size() const {
  return _internal_raw_history_size();
}
inline ::injective::oracle::v1beta1::PriceRecord* QueryOracleVolatilityResponse::mutable_raw_history(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleVolatilityResponse.raw_history)
  return _internal_mutable_raw_history()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecord >*
QueryOracleVolatilityResponse::mutable_raw_history() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryOracleVolatilityResponse.raw_history)
  return _internal_mutable_raw_history();
}
inline const ::injective::oracle::v1beta1::PriceRecord& QueryOracleVolatilityResponse::_internal_raw_history(int index) const {
  return _internal_raw_history().Get(index);
}
inline const ::injective::oracle::v1beta1::PriceRecord& QueryOracleVolatilityResponse::raw_history(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleVolatilityResponse.raw_history)
  return _internal_raw_history(index);
}
inline ::injective::oracle::v1beta1::PriceRecord* QueryOracleVolatilityResponse::_internal_add_raw_history() {
  return _internal_mutable_raw_history()->Add();
}
inline ::injective::oracle::v1beta1::PriceRecord* QueryOracleVolatilityResponse::add_raw_history() {
  ::injective::oracle::v1beta1::PriceRecord* _add = _internal_add_raw_history();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryOracleVolatilityResponse.raw_history)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::PriceRecord >&
QueryOracleVolatilityResponse::raw_history() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryOracleVolatilityResponse.raw_history)
  return _internal_raw_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceRecord>&
QueryOracleVolatilityResponse::_internal_raw_history() const {
  return _impl_.raw_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::PriceRecord>*
QueryOracleVolatilityResponse::_internal_mutable_raw_history() {
  return &_impl_.raw_history_;
}

// -------------------------------------------------------------------

// QueryOracleProvidersInfoRequest

// -------------------------------------------------------------------

// QueryOracleProvidersInfoResponse

// repeated .injective.oracle.v1beta1.ProviderInfo providers = 1 [json_name = "providers"];
inline int QueryOracleProvidersInfoResponse::_internal_providers_size() const {
  return _impl_.providers_.size();
}
inline int QueryOracleProvidersInfoResponse::providers_size() const {
  return _internal_providers_size();
}
inline ::injective::oracle::v1beta1::ProviderInfo* QueryOracleProvidersInfoResponse::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.providers)
  return _internal_mutable_providers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderInfo >*
QueryOracleProvidersInfoResponse::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.providers)
  return _internal_mutable_providers();
}
inline const ::injective::oracle::v1beta1::ProviderInfo& QueryOracleProvidersInfoResponse::_internal_providers(int index) const {
  return _internal_providers().Get(index);
}
inline const ::injective::oracle::v1beta1::ProviderInfo& QueryOracleProvidersInfoResponse::providers(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.providers)
  return _internal_providers(index);
}
inline ::injective::oracle::v1beta1::ProviderInfo* QueryOracleProvidersInfoResponse::_internal_add_providers() {
  return _internal_mutable_providers()->Add();
}
inline ::injective::oracle::v1beta1::ProviderInfo* QueryOracleProvidersInfoResponse::add_providers() {
  ::injective::oracle::v1beta1::ProviderInfo* _add = _internal_add_providers();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.providers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderInfo >&
QueryOracleProvidersInfoResponse::providers() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.providers)
  return _internal_providers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::ProviderInfo>&
QueryOracleProvidersInfoResponse::_internal_providers() const {
  return _impl_.providers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::ProviderInfo>*
QueryOracleProvidersInfoResponse::_internal_mutable_providers() {
  return &_impl_.providers_;
}

// -------------------------------------------------------------------

// QueryOracleProviderPricesRequest

// string provider = 1 [json_name = "provider"];
inline void QueryOracleProviderPricesRequest::clear_provider() {
  _impl_.provider_.ClearToEmpty();
}
inline const std::string& QueryOracleProviderPricesRequest::provider() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleProviderPricesRequest.provider)
  return _internal_provider();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOracleProviderPricesRequest::set_provider(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.provider_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryOracleProviderPricesRequest.provider)
}
inline std::string* QueryOracleProviderPricesRequest::mutable_provider() {
  std::string* _s = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleProviderPricesRequest.provider)
  return _s;
}
inline const std::string& QueryOracleProviderPricesRequest::_internal_provider() const {
  return _impl_.provider_.Get();
}
inline void QueryOracleProviderPricesRequest::_internal_set_provider(const std::string& value) {
  ;


  _impl_.provider_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryOracleProviderPricesRequest::_internal_mutable_provider() {
  ;
  return _impl_.provider_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryOracleProviderPricesRequest::release_provider() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOracleProviderPricesRequest.provider)
  return _impl_.provider_.Release();
}
inline void QueryOracleProviderPricesRequest::set_allocated_provider(std::string* value) {
  _impl_.provider_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.provider_.IsDefault()) {
          _impl_.provider_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOracleProviderPricesRequest.provider)
}

// -------------------------------------------------------------------

// QueryOracleProviderPricesResponse

// repeated .injective.oracle.v1beta1.ProviderState providerState = 1 [json_name = "providerState"];
inline int QueryOracleProviderPricesResponse::_internal_providerstate_size() const {
  return _impl_.providerstate_.size();
}
inline int QueryOracleProviderPricesResponse::providerstate_size() const {
  return _internal_providerstate_size();
}
inline ::injective::oracle::v1beta1::ProviderState* QueryOracleProviderPricesResponse::mutable_providerstate(int index) {
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOracleProviderPricesResponse.providerState)
  return _internal_mutable_providerstate()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderState >*
QueryOracleProviderPricesResponse::mutable_providerstate() {
  // @@protoc_insertion_point(field_mutable_list:injective.oracle.v1beta1.QueryOracleProviderPricesResponse.providerState)
  return _internal_mutable_providerstate();
}
inline const ::injective::oracle::v1beta1::ProviderState& QueryOracleProviderPricesResponse::_internal_providerstate(int index) const {
  return _internal_providerstate().Get(index);
}
inline const ::injective::oracle::v1beta1::ProviderState& QueryOracleProviderPricesResponse::providerstate(int index) const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOracleProviderPricesResponse.providerState)
  return _internal_providerstate(index);
}
inline ::injective::oracle::v1beta1::ProviderState* QueryOracleProviderPricesResponse::_internal_add_providerstate() {
  return _internal_mutable_providerstate()->Add();
}
inline ::injective::oracle::v1beta1::ProviderState* QueryOracleProviderPricesResponse::add_providerstate() {
  ::injective::oracle::v1beta1::ProviderState* _add = _internal_add_providerstate();
  // @@protoc_insertion_point(field_add:injective.oracle.v1beta1.QueryOracleProviderPricesResponse.providerState)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::oracle::v1beta1::ProviderState >&
QueryOracleProviderPricesResponse::providerstate() const {
  // @@protoc_insertion_point(field_list:injective.oracle.v1beta1.QueryOracleProviderPricesResponse.providerState)
  return _internal_providerstate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::ProviderState>&
QueryOracleProviderPricesResponse::_internal_providerstate() const {
  return _impl_.providerstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::oracle::v1beta1::ProviderState>*
QueryOracleProviderPricesResponse::_internal_mutable_providerstate() {
  return &_impl_.providerstate_;
}

// -------------------------------------------------------------------

// QueryOraclePriceRequest

// .injective.oracle.v1beta1.OracleType oracle_type = 1 [json_name = "oracleType"];
inline void QueryOraclePriceRequest::clear_oracle_type() {
  _impl_.oracle_type_ = 0;
}
inline ::injective::oracle::v1beta1::OracleType QueryOraclePriceRequest::oracle_type() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOraclePriceRequest.oracle_type)
  return _internal_oracle_type();
}
inline void QueryOraclePriceRequest::set_oracle_type(::injective::oracle::v1beta1::OracleType value) {
   _internal_set_oracle_type(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryOraclePriceRequest.oracle_type)
}
inline ::injective::oracle::v1beta1::OracleType QueryOraclePriceRequest::_internal_oracle_type() const {
  return static_cast<::injective::oracle::v1beta1::OracleType>(_impl_.oracle_type_);
}
inline void QueryOraclePriceRequest::_internal_set_oracle_type(::injective::oracle::v1beta1::OracleType value) {
  ;
  _impl_.oracle_type_ = value;
}

// string base = 2 [json_name = "base"];
inline void QueryOraclePriceRequest::clear_base() {
  _impl_.base_.ClearToEmpty();
}
inline const std::string& QueryOraclePriceRequest::base() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOraclePriceRequest.base)
  return _internal_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOraclePriceRequest::set_base(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryOraclePriceRequest.base)
}
inline std::string* QueryOraclePriceRequest::mutable_base() {
  std::string* _s = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOraclePriceRequest.base)
  return _s;
}
inline const std::string& QueryOraclePriceRequest::_internal_base() const {
  return _impl_.base_.Get();
}
inline void QueryOraclePriceRequest::_internal_set_base(const std::string& value) {
  ;


  _impl_.base_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryOraclePriceRequest::_internal_mutable_base() {
  ;
  return _impl_.base_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryOraclePriceRequest::release_base() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOraclePriceRequest.base)
  return _impl_.base_.Release();
}
inline void QueryOraclePriceRequest::set_allocated_base(std::string* value) {
  _impl_.base_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_.IsDefault()) {
          _impl_.base_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOraclePriceRequest.base)
}

// string quote = 3 [json_name = "quote"];
inline void QueryOraclePriceRequest::clear_quote() {
  _impl_.quote_.ClearToEmpty();
}
inline const std::string& QueryOraclePriceRequest::quote() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOraclePriceRequest.quote)
  return _internal_quote();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryOraclePriceRequest::set_quote(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.QueryOraclePriceRequest.quote)
}
inline std::string* QueryOraclePriceRequest::mutable_quote() {
  std::string* _s = _internal_mutable_quote();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOraclePriceRequest.quote)
  return _s;
}
inline const std::string& QueryOraclePriceRequest::_internal_quote() const {
  return _impl_.quote_.Get();
}
inline void QueryOraclePriceRequest::_internal_set_quote(const std::string& value) {
  ;


  _impl_.quote_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryOraclePriceRequest::_internal_mutable_quote() {
  ;
  return _impl_.quote_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryOraclePriceRequest::release_quote() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOraclePriceRequest.quote)
  return _impl_.quote_.Release();
}
inline void QueryOraclePriceRequest::set_allocated_quote(std::string* value) {
  _impl_.quote_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_.IsDefault()) {
          _impl_.quote_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOraclePriceRequest.quote)
}

// -------------------------------------------------------------------

// PricePairState

// string pair_price = 1 [json_name = "pairPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void PricePairState::clear_pair_price() {
  _impl_.pair_price_.ClearToEmpty();
}
inline const std::string& PricePairState::pair_price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.PricePairState.pair_price)
  return _internal_pair_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PricePairState::set_pair_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.pair_price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.PricePairState.pair_price)
}
inline std::string* PricePairState::mutable_pair_price() {
  std::string* _s = _internal_mutable_pair_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.PricePairState.pair_price)
  return _s;
}
inline const std::string& PricePairState::_internal_pair_price() const {
  return _impl_.pair_price_.Get();
}
inline void PricePairState::_internal_set_pair_price(const std::string& value) {
  ;


  _impl_.pair_price_.Set(value, GetArenaForAllocation());
}
inline std::string* PricePairState::_internal_mutable_pair_price() {
  ;
  return _impl_.pair_price_.Mutable( GetArenaForAllocation());
}
inline std::string* PricePairState::release_pair_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.PricePairState.pair_price)
  return _impl_.pair_price_.Release();
}
inline void PricePairState::set_allocated_pair_price(std::string* value) {
  _impl_.pair_price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pair_price_.IsDefault()) {
          _impl_.pair_price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.PricePairState.pair_price)
}

// string base_price = 2 [json_name = "basePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void PricePairState::clear_base_price() {
  _impl_.base_price_.ClearToEmpty();
}
inline const std::string& PricePairState::base_price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.PricePairState.base_price)
  return _internal_base_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PricePairState::set_base_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.PricePairState.base_price)
}
inline std::string* PricePairState::mutable_base_price() {
  std::string* _s = _internal_mutable_base_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.PricePairState.base_price)
  return _s;
}
inline const std::string& PricePairState::_internal_base_price() const {
  return _impl_.base_price_.Get();
}
inline void PricePairState::_internal_set_base_price(const std::string& value) {
  ;


  _impl_.base_price_.Set(value, GetArenaForAllocation());
}
inline std::string* PricePairState::_internal_mutable_base_price() {
  ;
  return _impl_.base_price_.Mutable( GetArenaForAllocation());
}
inline std::string* PricePairState::release_base_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.PricePairState.base_price)
  return _impl_.base_price_.Release();
}
inline void PricePairState::set_allocated_base_price(std::string* value) {
  _impl_.base_price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_price_.IsDefault()) {
          _impl_.base_price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.PricePairState.base_price)
}

// string quote_price = 3 [json_name = "quotePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void PricePairState::clear_quote_price() {
  _impl_.quote_price_.ClearToEmpty();
}
inline const std::string& PricePairState::quote_price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.PricePairState.quote_price)
  return _internal_quote_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PricePairState::set_quote_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.PricePairState.quote_price)
}
inline std::string* PricePairState::mutable_quote_price() {
  std::string* _s = _internal_mutable_quote_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.PricePairState.quote_price)
  return _s;
}
inline const std::string& PricePairState::_internal_quote_price() const {
  return _impl_.quote_price_.Get();
}
inline void PricePairState::_internal_set_quote_price(const std::string& value) {
  ;


  _impl_.quote_price_.Set(value, GetArenaForAllocation());
}
inline std::string* PricePairState::_internal_mutable_quote_price() {
  ;
  return _impl_.quote_price_.Mutable( GetArenaForAllocation());
}
inline std::string* PricePairState::release_quote_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.PricePairState.quote_price)
  return _impl_.quote_price_.Release();
}
inline void PricePairState::set_allocated_quote_price(std::string* value) {
  _impl_.quote_price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_price_.IsDefault()) {
          _impl_.quote_price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.PricePairState.quote_price)
}

// string base_cumulative_price = 4 [json_name = "baseCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void PricePairState::clear_base_cumulative_price() {
  _impl_.base_cumulative_price_.ClearToEmpty();
}
inline const std::string& PricePairState::base_cumulative_price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.PricePairState.base_cumulative_price)
  return _internal_base_cumulative_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PricePairState::set_base_cumulative_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_cumulative_price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.PricePairState.base_cumulative_price)
}
inline std::string* PricePairState::mutable_base_cumulative_price() {
  std::string* _s = _internal_mutable_base_cumulative_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.PricePairState.base_cumulative_price)
  return _s;
}
inline const std::string& PricePairState::_internal_base_cumulative_price() const {
  return _impl_.base_cumulative_price_.Get();
}
inline void PricePairState::_internal_set_base_cumulative_price(const std::string& value) {
  ;


  _impl_.base_cumulative_price_.Set(value, GetArenaForAllocation());
}
inline std::string* PricePairState::_internal_mutable_base_cumulative_price() {
  ;
  return _impl_.base_cumulative_price_.Mutable( GetArenaForAllocation());
}
inline std::string* PricePairState::release_base_cumulative_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.PricePairState.base_cumulative_price)
  return _impl_.base_cumulative_price_.Release();
}
inline void PricePairState::set_allocated_base_cumulative_price(std::string* value) {
  _impl_.base_cumulative_price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_cumulative_price_.IsDefault()) {
          _impl_.base_cumulative_price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.PricePairState.base_cumulative_price)
}

// string quote_cumulative_price = 5 [json_name = "quoteCumulativePrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
inline void PricePairState::clear_quote_cumulative_price() {
  _impl_.quote_cumulative_price_.ClearToEmpty();
}
inline const std::string& PricePairState::quote_cumulative_price() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.PricePairState.quote_cumulative_price)
  return _internal_quote_cumulative_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PricePairState::set_quote_cumulative_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_cumulative_price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.PricePairState.quote_cumulative_price)
}
inline std::string* PricePairState::mutable_quote_cumulative_price() {
  std::string* _s = _internal_mutable_quote_cumulative_price();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.PricePairState.quote_cumulative_price)
  return _s;
}
inline const std::string& PricePairState::_internal_quote_cumulative_price() const {
  return _impl_.quote_cumulative_price_.Get();
}
inline void PricePairState::_internal_set_quote_cumulative_price(const std::string& value) {
  ;


  _impl_.quote_cumulative_price_.Set(value, GetArenaForAllocation());
}
inline std::string* PricePairState::_internal_mutable_quote_cumulative_price() {
  ;
  return _impl_.quote_cumulative_price_.Mutable( GetArenaForAllocation());
}
inline std::string* PricePairState::release_quote_cumulative_price() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.PricePairState.quote_cumulative_price)
  return _impl_.quote_cumulative_price_.Release();
}
inline void PricePairState::set_allocated_quote_cumulative_price(std::string* value) {
  _impl_.quote_cumulative_price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_cumulative_price_.IsDefault()) {
          _impl_.quote_cumulative_price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.PricePairState.quote_cumulative_price)
}

// int64 base_timestamp = 6 [json_name = "baseTimestamp"];
inline void PricePairState::clear_base_timestamp() {
  _impl_.base_timestamp_ = ::int64_t{0};
}
inline ::int64_t PricePairState::base_timestamp() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.PricePairState.base_timestamp)
  return _internal_base_timestamp();
}
inline void PricePairState::set_base_timestamp(::int64_t value) {
  _internal_set_base_timestamp(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.PricePairState.base_timestamp)
}
inline ::int64_t PricePairState::_internal_base_timestamp() const {
  return _impl_.base_timestamp_;
}
inline void PricePairState::_internal_set_base_timestamp(::int64_t value) {
  ;
  _impl_.base_timestamp_ = value;
}

// int64 quote_timestamp = 7 [json_name = "quoteTimestamp"];
inline void PricePairState::clear_quote_timestamp() {
  _impl_.quote_timestamp_ = ::int64_t{0};
}
inline ::int64_t PricePairState::quote_timestamp() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.PricePairState.quote_timestamp)
  return _internal_quote_timestamp();
}
inline void PricePairState::set_quote_timestamp(::int64_t value) {
  _internal_set_quote_timestamp(value);
  // @@protoc_insertion_point(field_set:injective.oracle.v1beta1.PricePairState.quote_timestamp)
}
inline ::int64_t PricePairState::_internal_quote_timestamp() const {
  return _impl_.quote_timestamp_;
}
inline void PricePairState::_internal_set_quote_timestamp(::int64_t value) {
  ;
  _impl_.quote_timestamp_ = value;
}

// -------------------------------------------------------------------

// QueryOraclePriceResponse

// .injective.oracle.v1beta1.PricePairState price_pair_state = 1 [json_name = "pricePairState"];
inline bool QueryOraclePriceResponse::has_price_pair_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_pair_state_ != nullptr);
  return value;
}
inline void QueryOraclePriceResponse::clear_price_pair_state() {
  if (_impl_.price_pair_state_ != nullptr) _impl_.price_pair_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::injective::oracle::v1beta1::PricePairState& QueryOraclePriceResponse::_internal_price_pair_state() const {
  const ::injective::oracle::v1beta1::PricePairState* p = _impl_.price_pair_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::oracle::v1beta1::PricePairState&>(
      ::injective::oracle::v1beta1::_PricePairState_default_instance_);
}
inline const ::injective::oracle::v1beta1::PricePairState& QueryOraclePriceResponse::price_pair_state() const {
  // @@protoc_insertion_point(field_get:injective.oracle.v1beta1.QueryOraclePriceResponse.price_pair_state)
  return _internal_price_pair_state();
}
inline void QueryOraclePriceResponse::unsafe_arena_set_allocated_price_pair_state(
    ::injective::oracle::v1beta1::PricePairState* price_pair_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_pair_state_);
  }
  _impl_.price_pair_state_ = price_pair_state;
  if (price_pair_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.oracle.v1beta1.QueryOraclePriceResponse.price_pair_state)
}
inline ::injective::oracle::v1beta1::PricePairState* QueryOraclePriceResponse::release_price_pair_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::PricePairState* temp = _impl_.price_pair_state_;
  _impl_.price_pair_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::oracle::v1beta1::PricePairState* QueryOraclePriceResponse::unsafe_arena_release_price_pair_state() {
  // @@protoc_insertion_point(field_release:injective.oracle.v1beta1.QueryOraclePriceResponse.price_pair_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::oracle::v1beta1::PricePairState* temp = _impl_.price_pair_state_;
  _impl_.price_pair_state_ = nullptr;
  return temp;
}
inline ::injective::oracle::v1beta1::PricePairState* QueryOraclePriceResponse::_internal_mutable_price_pair_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.price_pair_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::oracle::v1beta1::PricePairState>(GetArenaForAllocation());
    _impl_.price_pair_state_ = p;
  }
  return _impl_.price_pair_state_;
}
inline ::injective::oracle::v1beta1::PricePairState* QueryOraclePriceResponse::mutable_price_pair_state() {
  ::injective::oracle::v1beta1::PricePairState* _msg = _internal_mutable_price_pair_state();
  // @@protoc_insertion_point(field_mutable:injective.oracle.v1beta1.QueryOraclePriceResponse.price_pair_state)
  return _msg;
}
inline void QueryOraclePriceResponse::set_allocated_price_pair_state(::injective::oracle::v1beta1::PricePairState* price_pair_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.price_pair_state_;
  }
  if (price_pair_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(price_pair_state);
    if (message_arena != submessage_arena) {
      price_pair_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price_pair_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.price_pair_state_ = price_pair_state;
  // @@protoc_insertion_point(field_set_allocated:injective.oracle.v1beta1.QueryOraclePriceResponse.price_pair_state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2foracle_2fv1beta1_2fquery_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/events.proto

#include "injective/oracle/v1beta1/events.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace oracle {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR SetChainlinkPriceEvent::SetChainlinkPriceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.answer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetChainlinkPriceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetChainlinkPriceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetChainlinkPriceEventDefaultTypeInternal() {}
  union {
    SetChainlinkPriceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetChainlinkPriceEventDefaultTypeInternal _SetChainlinkPriceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetBandPriceEvent::SetBandPriceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.resolve_time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.request_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetBandPriceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetBandPriceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetBandPriceEventDefaultTypeInternal() {}
  union {
    SetBandPriceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetBandPriceEventDefaultTypeInternal _SetBandPriceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetBandIBCPriceEvent::SetBandIBCPriceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbols_)*/{}
  , /*decltype(_impl_.prices_)*/{}
  , /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.resolve_time_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.request_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.client_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetBandIBCPriceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetBandIBCPriceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetBandIBCPriceEventDefaultTypeInternal() {}
  union {
    SetBandIBCPriceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetBandIBCPriceEventDefaultTypeInternal _SetBandIBCPriceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventBandIBCAckSuccess::EventBandIBCAckSuccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ack_result_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventBandIBCAckSuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBandIBCAckSuccessDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBandIBCAckSuccessDefaultTypeInternal() {}
  union {
    EventBandIBCAckSuccess _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBandIBCAckSuccessDefaultTypeInternal _EventBandIBCAckSuccess_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventBandIBCAckError::EventBandIBCAckError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ack_error_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventBandIBCAckErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBandIBCAckErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBandIBCAckErrorDefaultTypeInternal() {}
  union {
    EventBandIBCAckError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBandIBCAckErrorDefaultTypeInternal _EventBandIBCAckError_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventBandIBCResponseTimeout::EventBandIBCResponseTimeout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventBandIBCResponseTimeoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventBandIBCResponseTimeoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventBandIBCResponseTimeoutDefaultTypeInternal() {}
  union {
    EventBandIBCResponseTimeout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventBandIBCResponseTimeoutDefaultTypeInternal _EventBandIBCResponseTimeout_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetPriceFeedPriceEvent::SetPriceFeedPriceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPriceFeedPriceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPriceFeedPriceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPriceFeedPriceEventDefaultTypeInternal() {}
  union {
    SetPriceFeedPriceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPriceFeedPriceEventDefaultTypeInternal _SetPriceFeedPriceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetProviderPriceEvent::SetProviderPriceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetProviderPriceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetProviderPriceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetProviderPriceEventDefaultTypeInternal() {}
  union {
    SetProviderPriceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetProviderPriceEventDefaultTypeInternal _SetProviderPriceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetCoinbasePriceEvent::SetCoinbasePriceEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetCoinbasePriceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCoinbasePriceEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCoinbasePriceEventDefaultTypeInternal() {}
  union {
    SetCoinbasePriceEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCoinbasePriceEventDefaultTypeInternal _SetCoinbasePriceEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventSetPythPrices::EventSetPythPrices(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.prices_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventSetPythPricesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventSetPythPricesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventSetPythPricesDefaultTypeInternal() {}
  union {
    EventSetPythPrices _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventSetPythPricesDefaultTypeInternal _EventSetPythPrices_default_instance_;
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2foracle_2fv1beta1_2fevents_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2foracle_2fv1beta1_2fevents_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetChainlinkPriceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetChainlinkPriceEvent, _impl_.feed_id_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetChainlinkPriceEvent, _impl_.answer_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetChainlinkPriceEvent, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandPriceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandPriceEvent, _impl_.relayer_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandPriceEvent, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandPriceEvent, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandPriceEvent, _impl_.resolve_time_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandPriceEvent, _impl_.request_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandIBCPriceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandIBCPriceEvent, _impl_.relayer_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandIBCPriceEvent, _impl_.symbols_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandIBCPriceEvent, _impl_.prices_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandIBCPriceEvent, _impl_.resolve_time_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandIBCPriceEvent, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetBandIBCPriceEvent, _impl_.client_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventBandIBCAckSuccess, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventBandIBCAckSuccess, _impl_.ack_result_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventBandIBCAckSuccess, _impl_.client_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventBandIBCAckError, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventBandIBCAckError, _impl_.ack_error_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventBandIBCAckError, _impl_.client_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventBandIBCResponseTimeout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventBandIBCResponseTimeout, _impl_.client_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetPriceFeedPriceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetPriceFeedPriceEvent, _impl_.relayer_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetPriceFeedPriceEvent, _impl_.base_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetPriceFeedPriceEvent, _impl_.quote_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetPriceFeedPriceEvent, _impl_.price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetProviderPriceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetProviderPriceEvent, _impl_.provider_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetProviderPriceEvent, _impl_.relayer_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetProviderPriceEvent, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetProviderPriceEvent, _impl_.price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetCoinbasePriceEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetCoinbasePriceEvent, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetCoinbasePriceEvent, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::SetCoinbasePriceEvent, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventSetPythPrices, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::EventSetPythPrices, _impl_.prices_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::oracle::v1beta1::SetChainlinkPriceEvent)},
        { 11, -1, -1, sizeof(::injective::oracle::v1beta1::SetBandPriceEvent)},
        { 24, -1, -1, sizeof(::injective::oracle::v1beta1::SetBandIBCPriceEvent)},
        { 38, -1, -1, sizeof(::injective::oracle::v1beta1::EventBandIBCAckSuccess)},
        { 48, -1, -1, sizeof(::injective::oracle::v1beta1::EventBandIBCAckError)},
        { 58, -1, -1, sizeof(::injective::oracle::v1beta1::EventBandIBCResponseTimeout)},
        { 67, -1, -1, sizeof(::injective::oracle::v1beta1::SetPriceFeedPriceEvent)},
        { 79, -1, -1, sizeof(::injective::oracle::v1beta1::SetProviderPriceEvent)},
        { 91, -1, -1, sizeof(::injective::oracle::v1beta1::SetCoinbasePriceEvent)},
        { 102, -1, -1, sizeof(::injective::oracle::v1beta1::EventSetPythPrices)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::oracle::v1beta1::_SetChainlinkPriceEvent_default_instance_._instance,
    &::injective::oracle::v1beta1::_SetBandPriceEvent_default_instance_._instance,
    &::injective::oracle::v1beta1::_SetBandIBCPriceEvent_default_instance_._instance,
    &::injective::oracle::v1beta1::_EventBandIBCAckSuccess_default_instance_._instance,
    &::injective::oracle::v1beta1::_EventBandIBCAckError_default_instance_._instance,
    &::injective::oracle::v1beta1::_EventBandIBCResponseTimeout_default_instance_._instance,
    &::injective::oracle::v1beta1::_SetPriceFeedPriceEvent_default_instance_._instance,
    &::injective::oracle::v1beta1::_SetProviderPriceEvent_default_instance_._instance,
    &::injective::oracle::v1beta1::_SetCoinbasePriceEvent_default_instance_._instance,
    &::injective::oracle::v1beta1::_EventSetPythPrices_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2foracle_2fv1beta1_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%injective/oracle/v1beta1/events.proto\022"
    "\030injective.oracle.v1beta1\032\024gogoproto/gog"
    "o.proto\032\036cosmos/base/v1beta1/coin.proto\032"
    "%injective/oracle/v1beta1/oracle.proto\"\227"
    "\001\n\026SetChainlinkPriceEvent\022\027\n\007feed_id\030\001 \001"
    "(\tR\006feedId\022F\n\006answer\030\002 \001(\tB.\310\336\037\000\332\336\037&gith"
    "ub.com/cosmos/cosmos-sdk/types.DecR\006answ"
    "er\022\034\n\ttimestamp\030\003 \001(\004R\ttimestamp\"\315\001\n\021Set"
    "BandPriceEvent\022\030\n\007relayer\030\001 \001(\tR\007relayer"
    "\022\026\n\006symbol\030\002 \001(\tR\006symbol\022D\n\005price\030\003 \001(\tB"
    ".\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.DecR\005price\022!\n\014resolve_time\030\004 \001(\004R\013re"
    "solveTime\022\035\n\nrequest_id\030\005 \001(\004R\trequestId"
    "\"\361\001\n\024SetBandIBCPriceEvent\022\030\n\007relayer\030\001 \001"
    "(\tR\007relayer\022\030\n\007symbols\030\002 \003(\tR\007symbols\022F\n"
    "\006prices\030\003 \003(\tB.\310\336\037\000\332\336\037&github.com/cosmos"
    "/cosmos-sdk/types.DecR\006prices\022!\n\014resolve"
    "_time\030\004 \001(\004R\013resolveTime\022\035\n\nrequest_id\030\005"
    " \001(\004R\trequestId\022\033\n\tclient_id\030\006 \001(\003R\010clie"
    "ntId\"T\n\026EventBandIBCAckSuccess\022\035\n\nack_re"
    "sult\030\001 \001(\tR\tackResult\022\033\n\tclient_id\030\002 \001(\003"
    "R\010clientId\"P\n\024EventBandIBCAckError\022\033\n\tac"
    "k_error\030\001 \001(\tR\010ackError\022\033\n\tclient_id\030\002 \001"
    "(\003R\010clientId\":\n\033EventBandIBCResponseTime"
    "out\022\033\n\tclient_id\030\001 \001(\003R\010clientId\"\242\001\n\026Set"
    "PriceFeedPriceEvent\022\030\n\007relayer\030\001 \001(\tR\007re"
    "layer\022\022\n\004base\030\002 \001(\tR\004base\022\024\n\005quote\030\003 \001(\t"
    "R\005quote\022D\n\005price\030\004 \001(\tB.\310\336\037\000\332\336\037&github.c"
    "om/cosmos/cosmos-sdk/types.DecR\005price\"\253\001"
    "\n\025SetProviderPriceEvent\022\032\n\010provider\030\001 \001("
    "\tR\010provider\022\030\n\007relayer\030\002 \001(\tR\007relayer\022\026\n"
    "\006symbol\030\003 \001(\tR\006symbol\022D\n\005price\030\004 \001(\tB.\310\336"
    "\037\000\332\336\037&github.com/cosmos/cosmos-sdk/types"
    ".DecR\005price\"\223\001\n\025SetCoinbasePriceEvent\022\026\n"
    "\006symbol\030\001 \001(\tR\006symbol\022D\n\005price\030\002 \001(\tB.\310\336"
    "\037\000\332\336\037&github.com/cosmos/cosmos-sdk/types"
    ".DecR\005price\022\034\n\ttimestamp\030\003 \001(\004R\ttimestam"
    "p\"V\n\022EventSetPythPrices\022@\n\006prices\030\001 \003(\0132"
    "(.injective.oracle.v1beta1.PythPriceStat"
    "eR\006pricesB\373\001\n\034com.injective.oracle.v1bet"
    "a1B\013EventsProtoP\001ZLgithub.com/InjectiveL"
    "abs/injective-core/injective-chain/modul"
    "es/oracle/types\242\002\003IOX\252\002\030Injective.Oracle"
    ".V1beta1\312\002\030Injective\\Oracle\\V1beta1\342\002$In"
    "jective\\Oracle\\V1beta1\\GPBMetadata\352\002\032Inj"
    "ective::Oracle::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2foracle_2fv1beta1_2foracle_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto = {
    false,
    false,
    1831,
    descriptor_table_protodef_injective_2foracle_2fv1beta1_2fevents_2eproto,
    "injective/oracle/v1beta1/events.proto",
    &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
    descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_deps,
    3,
    10,
    schemas,
    file_default_instances,
    TableStruct_injective_2foracle_2fv1beta1_2fevents_2eproto::offsets,
    file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto,
    file_level_enum_descriptors_injective_2foracle_2fv1beta1_2fevents_2eproto,
    file_level_service_descriptors_injective_2foracle_2fv1beta1_2fevents_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter() {
  return &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2foracle_2fv1beta1_2fevents_2eproto(&descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto);
namespace injective {
namespace oracle {
namespace v1beta1 {
// ===================================================================

class SetChainlinkPriceEvent::_Internal {
 public:
};

SetChainlinkPriceEvent::SetChainlinkPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.SetChainlinkPriceEvent)
}
SetChainlinkPriceEvent::SetChainlinkPriceEvent(const SetChainlinkPriceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetChainlinkPriceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , decltype(_impl_.answer_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feed_id().empty()) {
    _this->_impl_.feed_id_.Set(from._internal_feed_id(), _this->GetArenaForAllocation());
  }
  _impl_.answer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.answer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_answer().empty()) {
    _this->_impl_.answer_.Set(from._internal_answer(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.SetChainlinkPriceEvent)
}

inline void SetChainlinkPriceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_id_) {}

    , decltype(_impl_.answer_) {}

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feed_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feed_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.answer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.answer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetChainlinkPriceEvent::~SetChainlinkPriceEvent() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.SetChainlinkPriceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetChainlinkPriceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_id_.Destroy();
  _impl_.answer_.Destroy();
}

void SetChainlinkPriceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetChainlinkPriceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.SetChainlinkPriceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_id_.ClearToEmpty();
  _impl_.answer_.ClearToEmpty();
  _impl_.timestamp_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetChainlinkPriceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string feed_id = 1 [json_name = "feedId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_feed_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetChainlinkPriceEvent.feed_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string answer = 2 [json_name = "answer", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_answer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetChainlinkPriceEvent.answer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetChainlinkPriceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.SetChainlinkPriceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    const std::string& _s = this->_internal_feed_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetChainlinkPriceEvent.feed_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string answer = 2 [json_name = "answer", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_answer().empty()) {
    const std::string& _s = this->_internal_answer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetChainlinkPriceEvent.answer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.SetChainlinkPriceEvent)
  return target;
}

::size_t SetChainlinkPriceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.SetChainlinkPriceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feed_id = 1 [json_name = "feedId"];
  if (!this->_internal_feed_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feed_id());
  }

  // string answer = 2 [json_name = "answer", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_answer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_answer());
  }

  // uint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetChainlinkPriceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetChainlinkPriceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetChainlinkPriceEvent::GetClassData() const { return &_class_data_; }


void SetChainlinkPriceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetChainlinkPriceEvent*>(&to_msg);
  auto& from = static_cast<const SetChainlinkPriceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.SetChainlinkPriceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feed_id().empty()) {
    _this->_internal_set_feed_id(from._internal_feed_id());
  }
  if (!from._internal_answer().empty()) {
    _this->_internal_set_answer(from._internal_answer());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetChainlinkPriceEvent::CopyFrom(const SetChainlinkPriceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.SetChainlinkPriceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetChainlinkPriceEvent::IsInitialized() const {
  return true;
}

void SetChainlinkPriceEvent::InternalSwap(SetChainlinkPriceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feed_id_, lhs_arena,
                                       &other->_impl_.feed_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.answer_, lhs_arena,
                                       &other->_impl_.answer_, rhs_arena);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetChainlinkPriceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[0]);
}
// ===================================================================

class SetBandPriceEvent::_Internal {
 public:
};

SetBandPriceEvent::SetBandPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.SetBandPriceEvent)
}
SetBandPriceEvent::SetBandPriceEvent(const SetBandPriceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetBandPriceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayer_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.resolve_time_) {}

    , decltype(_impl_.request_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.resolve_time_, &from._impl_.resolve_time_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.request_id_) -
    reinterpret_cast<char*>(&_impl_.resolve_time_)) + sizeof(_impl_.request_id_));
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.SetBandPriceEvent)
}

inline void SetBandPriceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayer_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.resolve_time_) { ::uint64_t{0u} }

    , decltype(_impl_.request_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetBandPriceEvent::~SetBandPriceEvent() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.SetBandPriceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetBandPriceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relayer_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.price_.Destroy();
}

void SetBandPriceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetBandPriceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.SetBandPriceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relayer_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  ::memset(&_impl_.resolve_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.request_id_) -
      reinterpret_cast<char*>(&_impl_.resolve_time_)) + sizeof(_impl_.request_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBandPriceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string relayer = 1 [json_name = "relayer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetBandPriceEvent.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetBandPriceEvent.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 3 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetBandPriceEvent.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 resolve_time = 4 [json_name = "resolveTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.resolve_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 request_id = 5 [json_name = "requestId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetBandPriceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.SetBandPriceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string relayer = 1 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetBandPriceEvent.relayer");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetBandPriceEvent.symbol");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string price = 3 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetBandPriceEvent.price");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 resolve_time = 4 [json_name = "resolveTime"];
  if (this->_internal_resolve_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_resolve_time(), target);
  }

  // uint64 request_id = 5 [json_name = "requestId"];
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.SetBandPriceEvent)
  return target;
}

::size_t SetBandPriceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.SetBandPriceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string relayer = 1 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string price = 3 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // uint64 resolve_time = 4 [json_name = "resolveTime"];
  if (this->_internal_resolve_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_resolve_time());
  }

  // uint64 request_id = 5 [json_name = "requestId"];
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBandPriceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetBandPriceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBandPriceEvent::GetClassData() const { return &_class_data_; }


void SetBandPriceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetBandPriceEvent*>(&to_msg);
  auto& from = static_cast<const SetBandPriceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.SetBandPriceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_resolve_time() != 0) {
    _this->_internal_set_resolve_time(from._internal_resolve_time());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBandPriceEvent::CopyFrom(const SetBandPriceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.SetBandPriceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBandPriceEvent::IsInitialized() const {
  return true;
}

void SetBandPriceEvent::InternalSwap(SetBandPriceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetBandPriceEvent, _impl_.request_id_)
      + sizeof(SetBandPriceEvent::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(SetBandPriceEvent, _impl_.resolve_time_)>(
          reinterpret_cast<char*>(&_impl_.resolve_time_),
          reinterpret_cast<char*>(&other->_impl_.resolve_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBandPriceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[1]);
}
// ===================================================================

class SetBandIBCPriceEvent::_Internal {
 public:
};

SetBandIBCPriceEvent::SetBandIBCPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.SetBandIBCPriceEvent)
}
SetBandIBCPriceEvent::SetBandIBCPriceEvent(const SetBandIBCPriceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetBandIBCPriceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbols_){from._impl_.symbols_}
    , decltype(_impl_.prices_){from._impl_.prices_}
    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.resolve_time_) {}

    , decltype(_impl_.request_id_) {}

    , decltype(_impl_.client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.resolve_time_, &from._impl_.resolve_time_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.client_id_) -
    reinterpret_cast<char*>(&_impl_.resolve_time_)) + sizeof(_impl_.client_id_));
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.SetBandIBCPriceEvent)
}

inline void SetBandIBCPriceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.symbols_){arena}
    , decltype(_impl_.prices_){arena}
    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.resolve_time_) { ::uint64_t{0u} }

    , decltype(_impl_.request_id_) { ::uint64_t{0u} }

    , decltype(_impl_.client_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetBandIBCPriceEvent::~SetBandIBCPriceEvent() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.SetBandIBCPriceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetBandIBCPriceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_symbols()->~RepeatedPtrField();
  _internal_mutable_prices()->~RepeatedPtrField();
  _impl_.relayer_.Destroy();
}

void SetBandIBCPriceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetBandIBCPriceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.SetBandIBCPriceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_symbols()->Clear();
  _internal_mutable_prices()->Clear();
  _impl_.relayer_.ClearToEmpty();
  ::memset(&_impl_.resolve_time_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.client_id_) -
      reinterpret_cast<char*>(&_impl_.resolve_time_)) + sizeof(_impl_.client_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBandIBCPriceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string relayer = 1 [json_name = "relayer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetBandIBCPriceEvent.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string symbols = 2 [json_name = "symbols"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_symbols();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string prices = 3 [json_name = "prices", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_prices();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetBandIBCPriceEvent.prices"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 resolve_time = 4 [json_name = "resolveTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.resolve_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 request_id = 5 [json_name = "requestId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 client_id = 6 [json_name = "clientId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetBandIBCPriceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.SetBandIBCPriceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string relayer = 1 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetBandIBCPriceEvent.relayer");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string symbols = 2 [json_name = "symbols"];
  for (int i = 0, n = this->_internal_symbols_size(); i < n; ++i) {
    const auto& s = this->_internal_symbols(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetBandIBCPriceEvent.symbols");
    target = stream->WriteString(2, s, target);
  }

  // repeated string prices = 3 [json_name = "prices", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  for (int i = 0, n = this->_internal_prices_size(); i < n; ++i) {
    const auto& s = this->_internal_prices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetBandIBCPriceEvent.prices");
    target = stream->WriteString(3, s, target);
  }

  // uint64 resolve_time = 4 [json_name = "resolveTime"];
  if (this->_internal_resolve_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_resolve_time(), target);
  }

  // uint64 request_id = 5 [json_name = "requestId"];
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_request_id(), target);
  }

  // int64 client_id = 6 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.SetBandIBCPriceEvent)
  return target;
}

::size_t SetBandIBCPriceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.SetBandIBCPriceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string symbols = 2 [json_name = "symbols"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_symbols().size());
  for (int i = 0, n = _internal_symbols().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_symbols().Get(i));
  }

  // repeated string prices = 3 [json_name = "prices", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_prices().size());
  for (int i = 0, n = _internal_prices().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_prices().Get(i));
  }

  // string relayer = 1 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  // uint64 resolve_time = 4 [json_name = "resolveTime"];
  if (this->_internal_resolve_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_resolve_time());
  }

  // uint64 request_id = 5 [json_name = "requestId"];
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_request_id());
  }

  // int64 client_id = 6 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetBandIBCPriceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetBandIBCPriceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetBandIBCPriceEvent::GetClassData() const { return &_class_data_; }


void SetBandIBCPriceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetBandIBCPriceEvent*>(&to_msg);
  auto& from = static_cast<const SetBandIBCPriceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.SetBandIBCPriceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_symbols()->MergeFrom(from._internal_symbols());
  _this->_internal_mutable_prices()->MergeFrom(from._internal_prices());
  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  if (from._internal_resolve_time() != 0) {
    _this->_internal_set_resolve_time(from._internal_resolve_time());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetBandIBCPriceEvent::CopyFrom(const SetBandIBCPriceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.SetBandIBCPriceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBandIBCPriceEvent::IsInitialized() const {
  return true;
}

void SetBandIBCPriceEvent::InternalSwap(SetBandIBCPriceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_symbols()->InternalSwap(
      other->_internal_mutable_symbols());
  _internal_mutable_prices()->InternalSwap(
      other->_internal_mutable_prices());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetBandIBCPriceEvent, _impl_.client_id_)
      + sizeof(SetBandIBCPriceEvent::_impl_.client_id_)
      - PROTOBUF_FIELD_OFFSET(SetBandIBCPriceEvent, _impl_.resolve_time_)>(
          reinterpret_cast<char*>(&_impl_.resolve_time_),
          reinterpret_cast<char*>(&other->_impl_.resolve_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBandIBCPriceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[2]);
}
// ===================================================================

class EventBandIBCAckSuccess::_Internal {
 public:
};

EventBandIBCAckSuccess::EventBandIBCAckSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.EventBandIBCAckSuccess)
}
EventBandIBCAckSuccess::EventBandIBCAckSuccess(const EventBandIBCAckSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventBandIBCAckSuccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_result_) {}

    , decltype(_impl_.client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ack_result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ack_result_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ack_result().empty()) {
    _this->_impl_.ack_result_.Set(from._internal_ack_result(), _this->GetArenaForAllocation());
  }
  _this->_impl_.client_id_ = from._impl_.client_id_;
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.EventBandIBCAckSuccess)
}

inline void EventBandIBCAckSuccess::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_result_) {}

    , decltype(_impl_.client_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ack_result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ack_result_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventBandIBCAckSuccess::~EventBandIBCAckSuccess() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.EventBandIBCAckSuccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBandIBCAckSuccess::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_result_.Destroy();
}

void EventBandIBCAckSuccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBandIBCAckSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.EventBandIBCAckSuccess)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_result_.ClearToEmpty();
  _impl_.client_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBandIBCAckSuccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ack_result = 1 [json_name = "ackResult"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ack_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.EventBandIBCAckSuccess.ack_result"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 client_id = 2 [json_name = "clientId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventBandIBCAckSuccess::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.EventBandIBCAckSuccess)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ack_result = 1 [json_name = "ackResult"];
  if (!this->_internal_ack_result().empty()) {
    const std::string& _s = this->_internal_ack_result();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.EventBandIBCAckSuccess.ack_result");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 client_id = 2 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.EventBandIBCAckSuccess)
  return target;
}

::size_t EventBandIBCAckSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.EventBandIBCAckSuccess)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ack_result = 1 [json_name = "ackResult"];
  if (!this->_internal_ack_result().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ack_result());
  }

  // int64 client_id = 2 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBandIBCAckSuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBandIBCAckSuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBandIBCAckSuccess::GetClassData() const { return &_class_data_; }


void EventBandIBCAckSuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBandIBCAckSuccess*>(&to_msg);
  auto& from = static_cast<const EventBandIBCAckSuccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.EventBandIBCAckSuccess)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ack_result().empty()) {
    _this->_internal_set_ack_result(from._internal_ack_result());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBandIBCAckSuccess::CopyFrom(const EventBandIBCAckSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.EventBandIBCAckSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBandIBCAckSuccess::IsInitialized() const {
  return true;
}

void EventBandIBCAckSuccess::InternalSwap(EventBandIBCAckSuccess* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ack_result_, lhs_arena,
                                       &other->_impl_.ack_result_, rhs_arena);

  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBandIBCAckSuccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[3]);
}
// ===================================================================

class EventBandIBCAckError::_Internal {
 public:
};

EventBandIBCAckError::EventBandIBCAckError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.EventBandIBCAckError)
}
EventBandIBCAckError::EventBandIBCAckError(const EventBandIBCAckError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventBandIBCAckError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_error_) {}

    , decltype(_impl_.client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ack_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ack_error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ack_error().empty()) {
    _this->_impl_.ack_error_.Set(from._internal_ack_error(), _this->GetArenaForAllocation());
  }
  _this->_impl_.client_id_ = from._impl_.client_id_;
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.EventBandIBCAckError)
}

inline void EventBandIBCAckError::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_error_) {}

    , decltype(_impl_.client_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ack_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ack_error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventBandIBCAckError::~EventBandIBCAckError() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.EventBandIBCAckError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBandIBCAckError::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ack_error_.Destroy();
}

void EventBandIBCAckError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBandIBCAckError::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.EventBandIBCAckError)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_error_.ClearToEmpty();
  _impl_.client_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBandIBCAckError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ack_error = 1 [json_name = "ackError"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ack_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.EventBandIBCAckError.ack_error"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 client_id = 2 [json_name = "clientId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventBandIBCAckError::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.EventBandIBCAckError)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ack_error = 1 [json_name = "ackError"];
  if (!this->_internal_ack_error().empty()) {
    const std::string& _s = this->_internal_ack_error();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.EventBandIBCAckError.ack_error");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 client_id = 2 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.EventBandIBCAckError)
  return target;
}

::size_t EventBandIBCAckError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.EventBandIBCAckError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ack_error = 1 [json_name = "ackError"];
  if (!this->_internal_ack_error().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ack_error());
  }

  // int64 client_id = 2 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBandIBCAckError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBandIBCAckError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBandIBCAckError::GetClassData() const { return &_class_data_; }


void EventBandIBCAckError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBandIBCAckError*>(&to_msg);
  auto& from = static_cast<const EventBandIBCAckError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.EventBandIBCAckError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ack_error().empty()) {
    _this->_internal_set_ack_error(from._internal_ack_error());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBandIBCAckError::CopyFrom(const EventBandIBCAckError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.EventBandIBCAckError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBandIBCAckError::IsInitialized() const {
  return true;
}

void EventBandIBCAckError::InternalSwap(EventBandIBCAckError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ack_error_, lhs_arena,
                                       &other->_impl_.ack_error_, rhs_arena);

  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBandIBCAckError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[4]);
}
// ===================================================================

class EventBandIBCResponseTimeout::_Internal {
 public:
};

EventBandIBCResponseTimeout::EventBandIBCResponseTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
}
EventBandIBCResponseTimeout::EventBandIBCResponseTimeout(const EventBandIBCResponseTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
}

inline void EventBandIBCResponseTimeout::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventBandIBCResponseTimeout::~EventBandIBCResponseTimeout() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventBandIBCResponseTimeout::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventBandIBCResponseTimeout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventBandIBCResponseTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBandIBCResponseTimeout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventBandIBCResponseTimeout::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 client_id = 1 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
  return target;
}

::size_t EventBandIBCResponseTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 client_id = 1 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventBandIBCResponseTimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventBandIBCResponseTimeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventBandIBCResponseTimeout::GetClassData() const { return &_class_data_; }


void EventBandIBCResponseTimeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventBandIBCResponseTimeout*>(&to_msg);
  auto& from = static_cast<const EventBandIBCResponseTimeout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventBandIBCResponseTimeout::CopyFrom(const EventBandIBCResponseTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.EventBandIBCResponseTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBandIBCResponseTimeout::IsInitialized() const {
  return true;
}

void EventBandIBCResponseTimeout::InternalSwap(EventBandIBCResponseTimeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBandIBCResponseTimeout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[5]);
}
// ===================================================================

class SetPriceFeedPriceEvent::_Internal {
 public:
};

SetPriceFeedPriceEvent::SetPriceFeedPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
}
SetPriceFeedPriceEvent::SetPriceFeedPriceEvent(const SetPriceFeedPriceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPriceFeedPriceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayer_) {}

    , decltype(_impl_.base_) {}

    , decltype(_impl_.quote_) {}

    , decltype(_impl_.price_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base().empty()) {
    _this->_impl_.base_.Set(from._internal_base(), _this->GetArenaForAllocation());
  }
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote().empty()) {
    _this->_impl_.quote_.Set(from._internal_quote(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
}

inline void SetPriceFeedPriceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayer_) {}

    , decltype(_impl_.base_) {}

    , decltype(_impl_.quote_) {}

    , decltype(_impl_.price_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetPriceFeedPriceEvent::~SetPriceFeedPriceEvent() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPriceFeedPriceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relayer_.Destroy();
  _impl_.base_.Destroy();
  _impl_.quote_.Destroy();
  _impl_.price_.Destroy();
}

void SetPriceFeedPriceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPriceFeedPriceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relayer_.ClearToEmpty();
  _impl_.base_.ClearToEmpty();
  _impl_.quote_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPriceFeedPriceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string relayer = 1 [json_name = "relayer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetPriceFeedPriceEvent.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base = 2 [json_name = "base"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetPriceFeedPriceEvent.base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote = 3 [json_name = "quote"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetPriceFeedPriceEvent.quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetPriceFeedPriceEvent.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetPriceFeedPriceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string relayer = 1 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetPriceFeedPriceEvent.relayer");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string base = 2 [json_name = "base"];
  if (!this->_internal_base().empty()) {
    const std::string& _s = this->_internal_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetPriceFeedPriceEvent.base");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string quote = 3 [json_name = "quote"];
  if (!this->_internal_quote().empty()) {
    const std::string& _s = this->_internal_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetPriceFeedPriceEvent.quote");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetPriceFeedPriceEvent.price");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
  return target;
}

::size_t SetPriceFeedPriceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string relayer = 1 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  // string base = 2 [json_name = "base"];
  if (!this->_internal_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base());
  }

  // string quote = 3 [json_name = "quote"];
  if (!this->_internal_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote());
  }

  // string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPriceFeedPriceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPriceFeedPriceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPriceFeedPriceEvent::GetClassData() const { return &_class_data_; }


void SetPriceFeedPriceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPriceFeedPriceEvent*>(&to_msg);
  auto& from = static_cast<const SetPriceFeedPriceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  if (!from._internal_base().empty()) {
    _this->_internal_set_base(from._internal_base());
  }
  if (!from._internal_quote().empty()) {
    _this->_internal_set_quote(from._internal_quote());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPriceFeedPriceEvent::CopyFrom(const SetPriceFeedPriceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.SetPriceFeedPriceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPriceFeedPriceEvent::IsInitialized() const {
  return true;
}

void SetPriceFeedPriceEvent::InternalSwap(SetPriceFeedPriceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_, lhs_arena,
                                       &other->_impl_.base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_, lhs_arena,
                                       &other->_impl_.quote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPriceFeedPriceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[6]);
}
// ===================================================================

class SetProviderPriceEvent::_Internal {
 public:
};

SetProviderPriceEvent::SetProviderPriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.SetProviderPriceEvent)
}
SetProviderPriceEvent::SetProviderPriceEvent(const SetProviderPriceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetProviderPriceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.provider_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.price_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_provider().empty()) {
    _this->_impl_.provider_.Set(from._internal_provider(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.SetProviderPriceEvent)
}

inline void SetProviderPriceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.provider_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.price_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetProviderPriceEvent::~SetProviderPriceEvent() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.SetProviderPriceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetProviderPriceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.provider_.Destroy();
  _impl_.relayer_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.price_.Destroy();
}

void SetProviderPriceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetProviderPriceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.SetProviderPriceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.provider_.ClearToEmpty();
  _impl_.relayer_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetProviderPriceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string provider = 1 [json_name = "provider"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetProviderPriceEvent.provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer = 2 [json_name = "relayer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetProviderPriceEvent.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 3 [json_name = "symbol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetProviderPriceEvent.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetProviderPriceEvent.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetProviderPriceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.SetProviderPriceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider = 1 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    const std::string& _s = this->_internal_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetProviderPriceEvent.provider");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetProviderPriceEvent.relayer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string symbol = 3 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetProviderPriceEvent.symbol");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetProviderPriceEvent.price");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.SetProviderPriceEvent)
  return target;
}

::size_t SetProviderPriceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.SetProviderPriceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider = 1 [json_name = "provider"];
  if (!this->_internal_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_provider());
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  // string symbol = 3 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string price = 4 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetProviderPriceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetProviderPriceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetProviderPriceEvent::GetClassData() const { return &_class_data_; }


void SetProviderPriceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetProviderPriceEvent*>(&to_msg);
  auto& from = static_cast<const SetProviderPriceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.SetProviderPriceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_provider().empty()) {
    _this->_internal_set_provider(from._internal_provider());
  }
  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetProviderPriceEvent::CopyFrom(const SetProviderPriceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.SetProviderPriceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetProviderPriceEvent::IsInitialized() const {
  return true;
}

void SetProviderPriceEvent::InternalSwap(SetProviderPriceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.provider_, lhs_arena,
                                       &other->_impl_.provider_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetProviderPriceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[7]);
}
// ===================================================================

class SetCoinbasePriceEvent::_Internal {
 public:
};

SetCoinbasePriceEvent::SetCoinbasePriceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.SetCoinbasePriceEvent)
}
SetCoinbasePriceEvent::SetCoinbasePriceEvent(const SetCoinbasePriceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetCoinbasePriceEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.SetCoinbasePriceEvent)
}

inline void SetCoinbasePriceEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetCoinbasePriceEvent::~SetCoinbasePriceEvent() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.SetCoinbasePriceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCoinbasePriceEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.Destroy();
  _impl_.price_.Destroy();
}

void SetCoinbasePriceEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetCoinbasePriceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.SetCoinbasePriceEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _impl_.timestamp_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCoinbasePriceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string symbol = 1 [json_name = "symbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetCoinbasePriceEvent.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.SetCoinbasePriceEvent.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetCoinbasePriceEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.SetCoinbasePriceEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetCoinbasePriceEvent.symbol");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.SetCoinbasePriceEvent.price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.SetCoinbasePriceEvent)
  return target;
}

::size_t SetCoinbasePriceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.SetCoinbasePriceEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string price = 2 [json_name = "price", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // uint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCoinbasePriceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetCoinbasePriceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCoinbasePriceEvent::GetClassData() const { return &_class_data_; }


void SetCoinbasePriceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetCoinbasePriceEvent*>(&to_msg);
  auto& from = static_cast<const SetCoinbasePriceEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.SetCoinbasePriceEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCoinbasePriceEvent::CopyFrom(const SetCoinbasePriceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.SetCoinbasePriceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCoinbasePriceEvent::IsInitialized() const {
  return true;
}

void SetCoinbasePriceEvent::InternalSwap(SetCoinbasePriceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCoinbasePriceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[8]);
}
// ===================================================================

class EventSetPythPrices::_Internal {
 public:
};

void EventSetPythPrices::clear_prices() {
  _internal_mutable_prices()->Clear();
}
EventSetPythPrices::EventSetPythPrices(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.EventSetPythPrices)
}
EventSetPythPrices::EventSetPythPrices(const EventSetPythPrices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventSetPythPrices* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.prices_){from._impl_.prices_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.EventSetPythPrices)
}

inline void EventSetPythPrices::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.prices_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventSetPythPrices::~EventSetPythPrices() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.EventSetPythPrices)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventSetPythPrices::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_prices()->~RepeatedPtrField();
}

void EventSetPythPrices::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventSetPythPrices::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.EventSetPythPrices)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_prices()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventSetPythPrices::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective.oracle.v1beta1.PythPriceState prices = 1 [json_name = "prices"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventSetPythPrices::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.EventSetPythPrices)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PythPriceState prices = 1 [json_name = "prices"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_prices_size()); i < n; i++) {
    const auto& repfield = this->_internal_prices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.EventSetPythPrices)
  return target;
}

::size_t EventSetPythPrices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.EventSetPythPrices)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective.oracle.v1beta1.PythPriceState prices = 1 [json_name = "prices"];
  total_size += 1UL * this->_internal_prices_size();
  for (const auto& msg : this->_internal_prices()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventSetPythPrices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventSetPythPrices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventSetPythPrices::GetClassData() const { return &_class_data_; }


void EventSetPythPrices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventSetPythPrices*>(&to_msg);
  auto& from = static_cast<const EventSetPythPrices&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.EventSetPythPrices)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_prices()->MergeFrom(from._internal_prices());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventSetPythPrices::CopyFrom(const EventSetPythPrices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.EventSetPythPrices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventSetPythPrices::IsInitialized() const {
  return true;
}

void EventSetPythPrices::InternalSwap(EventSetPythPrices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_prices()->InternalSwap(other->_internal_mutable_prices());
}

::PROTOBUF_NAMESPACE_ID::Metadata EventSetPythPrices::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fevents_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fevents_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::SetChainlinkPriceEvent*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::SetChainlinkPriceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::SetChainlinkPriceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::SetBandPriceEvent*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::SetBandPriceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::SetBandPriceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::SetBandIBCPriceEvent*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::SetBandIBCPriceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::SetBandIBCPriceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::EventBandIBCAckSuccess*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::EventBandIBCAckSuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::EventBandIBCAckSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::EventBandIBCAckError*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::EventBandIBCAckError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::EventBandIBCAckError >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::EventBandIBCResponseTimeout*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::EventBandIBCResponseTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::EventBandIBCResponseTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::SetPriceFeedPriceEvent*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::SetPriceFeedPriceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::SetPriceFeedPriceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::SetProviderPriceEvent*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::SetProviderPriceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::SetProviderPriceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::SetCoinbasePriceEvent*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::SetCoinbasePriceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::SetCoinbasePriceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::EventSetPythPrices*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::EventSetPythPrices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::EventSetPythPrices >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

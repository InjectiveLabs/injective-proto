// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/genesis.proto

#include "injective/oracle/v1beta1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace oracle {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.band_relayers_)*/{}
  , /*decltype(_impl_.band_price_states_)*/{}
  , /*decltype(_impl_.price_feed_price_states_)*/{}
  , /*decltype(_impl_.coinbase_price_states_)*/{}
  , /*decltype(_impl_.band_ibc_price_states_)*/{}
  , /*decltype(_impl_.band_ibc_oracle_requests_)*/{}
  , /*decltype(_impl_.calldata_records_)*/{}
  , /*decltype(_impl_.chainlink_price_states_)*/{}
  , /*decltype(_impl_.historical_price_records_)*/{}
  , /*decltype(_impl_.provider_states_)*/{}
  , /*decltype(_impl_.pyth_price_states_)*/{}
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.band_ibc_params_)*/nullptr
  , /*decltype(_impl_.band_ibc_latest_client_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.band_ibc_latest_request_id_)*/ ::uint64_t{0u}
} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CalldataRecord::CalldataRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.calldata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CalldataRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalldataRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalldataRecordDefaultTypeInternal() {}
  union {
    CalldataRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalldataRecordDefaultTypeInternal _CalldataRecord_default_instance_;
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2foracle_2fv1beta1_2fgenesis_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2foracle_2fv1beta1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2foracle_2fv1beta1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2foracle_2fv1beta1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.band_relayers_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.band_price_states_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.price_feed_price_states_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.coinbase_price_states_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.band_ibc_price_states_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.band_ibc_oracle_requests_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.band_ibc_params_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.band_ibc_latest_client_id_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.calldata_records_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.band_ibc_latest_request_id_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.chainlink_price_states_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.historical_price_records_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.provider_states_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::GenesisState, _impl_.pyth_price_states_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::CalldataRecord, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::CalldataRecord, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::injective::oracle::v1beta1::CalldataRecord, _impl_.calldata_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 23, -1, sizeof(::injective::oracle::v1beta1::GenesisState)},
        { 38, -1, -1, sizeof(::injective::oracle::v1beta1::CalldataRecord)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::oracle::v1beta1::_GenesisState_default_instance_._instance,
    &::injective::oracle::v1beta1::_CalldataRecord_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2foracle_2fv1beta1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&injective/oracle/v1beta1/genesis.proto"
    "\022\030injective.oracle.v1beta1\032%injective/or"
    "acle/v1beta1/oracle.proto\032\024gogoproto/gog"
    "o.proto\"\340\t\n\014GenesisState\022>\n\006params\030\001 \001(\013"
    "2 .injective.oracle.v1beta1.ParamsB\004\310\336\037\000"
    "R\006params\022#\n\rband_relayers\030\002 \003(\tR\014bandRel"
    "ayers\022T\n\021band_price_states\030\003 \003(\0132(.injec"
    "tive.oracle.v1beta1.BandPriceStateR\017band"
    "PriceStates\022_\n\027price_feed_price_states\030\004"
    " \003(\0132(.injective.oracle.v1beta1.PriceFee"
    "dStateR\024priceFeedPriceStates\022`\n\025coinbase"
    "_price_states\030\005 \003(\0132,.injective.oracle.v"
    "1beta1.CoinbasePriceStateR\023coinbasePrice"
    "States\022[\n\025band_ibc_price_states\030\006 \003(\0132(."
    "injective.oracle.v1beta1.BandPriceStateR"
    "\022bandIbcPriceStates\022d\n\030band_ibc_oracle_r"
    "equests\030\007 \003(\0132+.injective.oracle.v1beta1"
    ".BandOracleRequestR\025bandIbcOracleRequest"
    "s\022U\n\017band_ibc_params\030\010 \001(\0132\'.injective.o"
    "racle.v1beta1.BandIBCParamsB\004\310\336\037\000R\rbandI"
    "bcParams\0228\n\031band_ibc_latest_client_id\030\t "
    "\001(\004R\025bandIbcLatestClientId\022S\n\020calldata_r"
    "ecords\030\n \003(\0132(.injective.oracle.v1beta1."
    "CalldataRecordR\017calldataRecords\022:\n\032band_"
    "ibc_latest_request_id\030\013 \001(\004R\026bandIbcLate"
    "stRequestId\022c\n\026chainlink_price_states\030\014 "
    "\003(\0132-.injective.oracle.v1beta1.Chainlink"
    "PriceStateR\024chainlinkPriceStates\022`\n\030hist"
    "orical_price_records\030\r \003(\0132&.injective.o"
    "racle.v1beta1.PriceRecordsR\026historicalPr"
    "iceRecords\022P\n\017provider_states\030\016 \003(\0132\'.in"
    "jective.oracle.v1beta1.ProviderStateR\016pr"
    "oviderStates\022T\n\021pyth_price_states\030\017 \003(\0132"
    "(.injective.oracle.v1beta1.PythPriceStat"
    "eR\017pythPriceStates\"I\n\016CalldataRecord\022\033\n\t"
    "client_id\030\001 \001(\004R\010clientId\022\032\n\010calldata\030\002 "
    "\001(\014R\010calldataB\374\001\n\034com.injective.oracle.v"
    "1beta1B\014GenesisProtoP\001ZLgithub.com/Injec"
    "tiveLabs/injective-core/injective-chain/"
    "modules/oracle/types\242\002\003IOX\252\002\030Injective.O"
    "racle.V1beta1\312\002\030Injective\\Oracle\\V1beta1"
    "\342\002$Injective\\Oracle\\V1beta1\\GPBMetadata\352"
    "\002\032Injective::Oracle::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_injective_2foracle_2fv1beta1_2foracle_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto = {
    false,
    false,
    1716,
    descriptor_table_protodef_injective_2foracle_2fv1beta1_2fgenesis_2eproto,
    "injective/oracle/v1beta1/genesis.proto",
    &descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_once,
    descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_injective_2foracle_2fv1beta1_2fgenesis_2eproto::offsets,
    file_level_metadata_injective_2foracle_2fv1beta1_2fgenesis_2eproto,
    file_level_enum_descriptors_injective_2foracle_2fv1beta1_2fgenesis_2eproto,
    file_level_service_descriptors_injective_2foracle_2fv1beta1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_getter() {
  return &descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2foracle_2fv1beta1_2fgenesis_2eproto(&descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto);
namespace injective {
namespace oracle {
namespace v1beta1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::injective::oracle::v1beta1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective::oracle::v1beta1::BandIBCParams& band_ibc_params(const GenesisState* msg);
  static void set_has_band_ibc_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::oracle::v1beta1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
const ::injective::oracle::v1beta1::BandIBCParams&
GenesisState::_Internal::band_ibc_params(const GenesisState* msg) {
  return *msg->_impl_.band_ibc_params_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GenesisState::clear_band_price_states() {
  _internal_mutable_band_price_states()->Clear();
}
void GenesisState::clear_price_feed_price_states() {
  _internal_mutable_price_feed_price_states()->Clear();
}
void GenesisState::clear_coinbase_price_states() {
  _internal_mutable_coinbase_price_states()->Clear();
}
void GenesisState::clear_band_ibc_price_states() {
  _internal_mutable_band_ibc_price_states()->Clear();
}
void GenesisState::clear_band_ibc_oracle_requests() {
  _internal_mutable_band_ibc_oracle_requests()->Clear();
}
void GenesisState::clear_band_ibc_params() {
  if (_impl_.band_ibc_params_ != nullptr) _impl_.band_ibc_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GenesisState::clear_chainlink_price_states() {
  _internal_mutable_chainlink_price_states()->Clear();
}
void GenesisState::clear_historical_price_records() {
  _internal_mutable_historical_price_records()->Clear();
}
void GenesisState::clear_provider_states() {
  _internal_mutable_provider_states()->Clear();
}
void GenesisState::clear_pyth_price_states() {
  _internal_mutable_pyth_price_states()->Clear();
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.band_relayers_){from._impl_.band_relayers_}
    , decltype(_impl_.band_price_states_){from._impl_.band_price_states_}
    , decltype(_impl_.price_feed_price_states_){from._impl_.price_feed_price_states_}
    , decltype(_impl_.coinbase_price_states_){from._impl_.coinbase_price_states_}
    , decltype(_impl_.band_ibc_price_states_){from._impl_.band_ibc_price_states_}
    , decltype(_impl_.band_ibc_oracle_requests_){from._impl_.band_ibc_oracle_requests_}
    , decltype(_impl_.calldata_records_){from._impl_.calldata_records_}
    , decltype(_impl_.chainlink_price_states_){from._impl_.chainlink_price_states_}
    , decltype(_impl_.historical_price_records_){from._impl_.historical_price_records_}
    , decltype(_impl_.provider_states_){from._impl_.provider_states_}
    , decltype(_impl_.pyth_price_states_){from._impl_.pyth_price_states_}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.band_ibc_params_){nullptr}
    , decltype(_impl_.band_ibc_latest_client_id_) {}

    , decltype(_impl_.band_ibc_latest_request_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::injective::oracle::v1beta1::Params(*from._impl_.params_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.band_ibc_params_ = new ::injective::oracle::v1beta1::BandIBCParams(*from._impl_.band_ibc_params_);
  }
  ::memcpy(&_impl_.band_ibc_latest_client_id_, &from._impl_.band_ibc_latest_client_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.band_ibc_latest_request_id_) -
    reinterpret_cast<char*>(&_impl_.band_ibc_latest_client_id_)) + sizeof(_impl_.band_ibc_latest_request_id_));
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.band_relayers_){arena}
    , decltype(_impl_.band_price_states_){arena}
    , decltype(_impl_.price_feed_price_states_){arena}
    , decltype(_impl_.coinbase_price_states_){arena}
    , decltype(_impl_.band_ibc_price_states_){arena}
    , decltype(_impl_.band_ibc_oracle_requests_){arena}
    , decltype(_impl_.calldata_records_){arena}
    , decltype(_impl_.chainlink_price_states_){arena}
    , decltype(_impl_.historical_price_records_){arena}
    , decltype(_impl_.provider_states_){arena}
    , decltype(_impl_.pyth_price_states_){arena}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.band_ibc_params_){nullptr}
    , decltype(_impl_.band_ibc_latest_client_id_) { ::uint64_t{0u} }

    , decltype(_impl_.band_ibc_latest_request_id_) { ::uint64_t{0u} }

  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_band_relayers()->~RepeatedPtrField();
  _internal_mutable_band_price_states()->~RepeatedPtrField();
  _internal_mutable_price_feed_price_states()->~RepeatedPtrField();
  _internal_mutable_coinbase_price_states()->~RepeatedPtrField();
  _internal_mutable_band_ibc_price_states()->~RepeatedPtrField();
  _internal_mutable_band_ibc_oracle_requests()->~RepeatedPtrField();
  _internal_mutable_calldata_records()->~RepeatedPtrField();
  _internal_mutable_chainlink_price_states()->~RepeatedPtrField();
  _internal_mutable_historical_price_records()->~RepeatedPtrField();
  _internal_mutable_provider_states()->~RepeatedPtrField();
  _internal_mutable_pyth_price_states()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.params_;
  if (this != internal_default_instance()) delete _impl_.band_ibc_params_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_band_relayers()->Clear();
  _internal_mutable_band_price_states()->Clear();
  _internal_mutable_price_feed_price_states()->Clear();
  _internal_mutable_coinbase_price_states()->Clear();
  _internal_mutable_band_ibc_price_states()->Clear();
  _internal_mutable_band_ibc_oracle_requests()->Clear();
  _internal_mutable_calldata_records()->Clear();
  _internal_mutable_chainlink_price_states()->Clear();
  _internal_mutable_historical_price_records()->Clear();
  _internal_mutable_provider_states()->Clear();
  _internal_mutable_pyth_price_states()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.params_ != nullptr);
      _impl_.params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.band_ibc_params_ != nullptr);
      _impl_.band_ibc_params_->Clear();
    }
  }
  ::memset(&_impl_.band_ibc_latest_client_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.band_ibc_latest_request_id_) -
      reinterpret_cast<char*>(&_impl_.band_ibc_latest_client_id_)) + sizeof(_impl_.band_ibc_latest_request_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.oracle.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string band_relayers = 2 [json_name = "bandRelayers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_band_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective.oracle.v1beta1.GenesisState.band_relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.BandPriceState band_price_states = 3 [json_name = "bandPriceStates"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_band_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.PriceFeedState price_feed_price_states = 4 [json_name = "priceFeedPriceStates"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price_feed_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.CoinbasePriceState coinbase_price_states = 5 [json_name = "coinbasePriceStates"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coinbase_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.BandPriceState band_ibc_price_states = 6 [json_name = "bandIbcPriceStates"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_band_ibc_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.BandOracleRequest band_ibc_oracle_requests = 7 [json_name = "bandIbcOracleRequests"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_band_ibc_oracle_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 8 [json_name = "bandIbcParams", (.gogoproto.nullable) = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_ibc_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 band_ibc_latest_client_id = 9 [json_name = "bandIbcLatestClientId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.band_ibc_latest_client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.CalldataRecord calldata_records = 10 [json_name = "calldataRecords"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calldata_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 band_ibc_latest_request_id = 11 [json_name = "bandIbcLatestRequestId"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.band_ibc_latest_request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.ChainlinkPriceState chainlink_price_states = 12 [json_name = "chainlinkPriceStates"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chainlink_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.PriceRecords historical_price_records = 13 [json_name = "historicalPriceRecords"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historical_price_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.ProviderState provider_states = 14 [json_name = "providerStates"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_provider_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective.oracle.v1beta1.PythPriceState pyth_price_states = 15 [json_name = "pythPriceStates"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pyth_price_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.oracle.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // repeated string band_relayers = 2 [json_name = "bandRelayers"];
  for (int i = 0, n = this->_internal_band_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_band_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.oracle.v1beta1.GenesisState.band_relayers");
    target = stream->WriteString(2, s, target);
  }

  // repeated .injective.oracle.v1beta1.BandPriceState band_price_states = 3 [json_name = "bandPriceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_band_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_band_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.oracle.v1beta1.PriceFeedState price_feed_price_states = 4 [json_name = "priceFeedPriceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_feed_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_price_feed_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.oracle.v1beta1.CoinbasePriceState coinbase_price_states = 5 [json_name = "coinbasePriceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coinbase_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_coinbase_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.oracle.v1beta1.BandPriceState band_ibc_price_states = 6 [json_name = "bandIbcPriceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_band_ibc_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_band_ibc_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.oracle.v1beta1.BandOracleRequest band_ibc_oracle_requests = 7 [json_name = "bandIbcOracleRequests"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_band_ibc_oracle_requests_size()); i < n; i++) {
    const auto& repfield = this->_internal_band_ibc_oracle_requests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 8 [json_name = "bandIbcParams", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::band_ibc_params(this),
        _Internal::band_ibc_params(this).GetCachedSize(), target, stream);
  }

  // uint64 band_ibc_latest_client_id = 9 [json_name = "bandIbcLatestClientId"];
  if (this->_internal_band_ibc_latest_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this->_internal_band_ibc_latest_client_id(), target);
  }

  // repeated .injective.oracle.v1beta1.CalldataRecord calldata_records = 10 [json_name = "calldataRecords"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_calldata_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_calldata_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 band_ibc_latest_request_id = 11 [json_name = "bandIbcLatestRequestId"];
  if (this->_internal_band_ibc_latest_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_band_ibc_latest_request_id(), target);
  }

  // repeated .injective.oracle.v1beta1.ChainlinkPriceState chainlink_price_states = 12 [json_name = "chainlinkPriceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chainlink_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_chainlink_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.oracle.v1beta1.PriceRecords historical_price_records = 13 [json_name = "historicalPriceRecords"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_historical_price_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_historical_price_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.oracle.v1beta1.ProviderState provider_states = 14 [json_name = "providerStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_provider_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_provider_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective.oracle.v1beta1.PythPriceState pyth_price_states = 15 [json_name = "pythPriceStates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pyth_price_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_pyth_price_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string band_relayers = 2 [json_name = "bandRelayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_band_relayers().size());
  for (int i = 0, n = _internal_band_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_band_relayers().Get(i));
  }

  // repeated .injective.oracle.v1beta1.BandPriceState band_price_states = 3 [json_name = "bandPriceStates"];
  total_size += 1UL * this->_internal_band_price_states_size();
  for (const auto& msg : this->_internal_band_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.PriceFeedState price_feed_price_states = 4 [json_name = "priceFeedPriceStates"];
  total_size += 1UL * this->_internal_price_feed_price_states_size();
  for (const auto& msg : this->_internal_price_feed_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.CoinbasePriceState coinbase_price_states = 5 [json_name = "coinbasePriceStates"];
  total_size += 1UL * this->_internal_coinbase_price_states_size();
  for (const auto& msg : this->_internal_coinbase_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.BandPriceState band_ibc_price_states = 6 [json_name = "bandIbcPriceStates"];
  total_size += 1UL * this->_internal_band_ibc_price_states_size();
  for (const auto& msg : this->_internal_band_ibc_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.BandOracleRequest band_ibc_oracle_requests = 7 [json_name = "bandIbcOracleRequests"];
  total_size += 1UL * this->_internal_band_ibc_oracle_requests_size();
  for (const auto& msg : this->_internal_band_ibc_oracle_requests()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.CalldataRecord calldata_records = 10 [json_name = "calldataRecords"];
  total_size += 1UL * this->_internal_calldata_records_size();
  for (const auto& msg : this->_internal_calldata_records()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.ChainlinkPriceState chainlink_price_states = 12 [json_name = "chainlinkPriceStates"];
  total_size += 1UL * this->_internal_chainlink_price_states_size();
  for (const auto& msg : this->_internal_chainlink_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.PriceRecords historical_price_records = 13 [json_name = "historicalPriceRecords"];
  total_size += 1UL * this->_internal_historical_price_records_size();
  for (const auto& msg : this->_internal_historical_price_records()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.ProviderState provider_states = 14 [json_name = "providerStates"];
  total_size += 1UL * this->_internal_provider_states_size();
  for (const auto& msg : this->_internal_provider_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective.oracle.v1beta1.PythPriceState pyth_price_states = 15 [json_name = "pythPriceStates"];
  total_size += 1UL * this->_internal_pyth_price_states_size();
  for (const auto& msg : this->_internal_pyth_price_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.oracle.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.params_);
    }

    // .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 8 [json_name = "bandIbcParams", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.band_ibc_params_);
    }

  }
  // uint64 band_ibc_latest_client_id = 9 [json_name = "bandIbcLatestClientId"];
  if (this->_internal_band_ibc_latest_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_band_ibc_latest_client_id());
  }

  // uint64 band_ibc_latest_request_id = 11 [json_name = "bandIbcLatestRequestId"];
  if (this->_internal_band_ibc_latest_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_band_ibc_latest_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_band_relayers()->MergeFrom(from._internal_band_relayers());
  _this->_internal_mutable_band_price_states()->MergeFrom(from._internal_band_price_states());
  _this->_internal_mutable_price_feed_price_states()->MergeFrom(from._internal_price_feed_price_states());
  _this->_internal_mutable_coinbase_price_states()->MergeFrom(from._internal_coinbase_price_states());
  _this->_internal_mutable_band_ibc_price_states()->MergeFrom(from._internal_band_ibc_price_states());
  _this->_internal_mutable_band_ibc_oracle_requests()->MergeFrom(from._internal_band_ibc_oracle_requests());
  _this->_internal_mutable_calldata_records()->MergeFrom(from._internal_calldata_records());
  _this->_internal_mutable_chainlink_price_states()->MergeFrom(from._internal_chainlink_price_states());
  _this->_internal_mutable_historical_price_records()->MergeFrom(from._internal_historical_price_records());
  _this->_internal_mutable_provider_states()->MergeFrom(from._internal_provider_states());
  _this->_internal_mutable_pyth_price_states()->MergeFrom(from._internal_pyth_price_states());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_params()->::injective::oracle::v1beta1::Params::MergeFrom(
          from._internal_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_band_ibc_params()->::injective::oracle::v1beta1::BandIBCParams::MergeFrom(
          from._internal_band_ibc_params());
    }
  }
  if (from._internal_band_ibc_latest_client_id() != 0) {
    _this->_internal_set_band_ibc_latest_client_id(from._internal_band_ibc_latest_client_id());
  }
  if (from._internal_band_ibc_latest_request_id() != 0) {
    _this->_internal_set_band_ibc_latest_request_id(from._internal_band_ibc_latest_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_band_relayers()->InternalSwap(
      other->_internal_mutable_band_relayers());
  _internal_mutable_band_price_states()->InternalSwap(other->_internal_mutable_band_price_states());
  _internal_mutable_price_feed_price_states()->InternalSwap(other->_internal_mutable_price_feed_price_states());
  _internal_mutable_coinbase_price_states()->InternalSwap(other->_internal_mutable_coinbase_price_states());
  _internal_mutable_band_ibc_price_states()->InternalSwap(other->_internal_mutable_band_ibc_price_states());
  _internal_mutable_band_ibc_oracle_requests()->InternalSwap(other->_internal_mutable_band_ibc_oracle_requests());
  _internal_mutable_calldata_records()->InternalSwap(other->_internal_mutable_calldata_records());
  _internal_mutable_chainlink_price_states()->InternalSwap(other->_internal_mutable_chainlink_price_states());
  _internal_mutable_historical_price_records()->InternalSwap(other->_internal_mutable_historical_price_records());
  _internal_mutable_provider_states()->InternalSwap(other->_internal_mutable_provider_states());
  _internal_mutable_pyth_price_states()->InternalSwap(other->_internal_mutable_pyth_price_states());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.band_ibc_latest_request_id_)
      + sizeof(GenesisState::_impl_.band_ibc_latest_request_id_)
      - PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.params_)>(
          reinterpret_cast<char*>(&_impl_.params_),
          reinterpret_cast<char*>(&other->_impl_.params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fgenesis_2eproto[0]);
}
// ===================================================================

class CalldataRecord::_Internal {
 public:
};

CalldataRecord::CalldataRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.oracle.v1beta1.CalldataRecord)
}
CalldataRecord::CalldataRecord(const CalldataRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CalldataRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.calldata_) {}

    , decltype(_impl_.client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.calldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.calldata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_calldata().empty()) {
    _this->_impl_.calldata_.Set(from._internal_calldata(), _this->GetArenaForAllocation());
  }
  _this->_impl_.client_id_ = from._impl_.client_id_;
  // @@protoc_insertion_point(copy_constructor:injective.oracle.v1beta1.CalldataRecord)
}

inline void CalldataRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.calldata_) {}

    , decltype(_impl_.client_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.calldata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.calldata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CalldataRecord::~CalldataRecord() {
  // @@protoc_insertion_point(destructor:injective.oracle.v1beta1.CalldataRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CalldataRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.calldata_.Destroy();
}

void CalldataRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CalldataRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.oracle.v1beta1.CalldataRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.calldata_.ClearToEmpty();
  _impl_.client_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalldataRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes calldata = 2 [json_name = "calldata"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_calldata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CalldataRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.oracle.v1beta1.CalldataRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_id = 1 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_client_id(), target);
  }

  // bytes calldata = 2 [json_name = "calldata"];
  if (!this->_internal_calldata().empty()) {
    const std::string& _s = this->_internal_calldata();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.oracle.v1beta1.CalldataRecord)
  return target;
}

::size_t CalldataRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.oracle.v1beta1.CalldataRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes calldata = 2 [json_name = "calldata"];
  if (!this->_internal_calldata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_calldata());
  }

  // uint64 client_id = 1 [json_name = "clientId"];
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalldataRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CalldataRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalldataRecord::GetClassData() const { return &_class_data_; }


void CalldataRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CalldataRecord*>(&to_msg);
  auto& from = static_cast<const CalldataRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.oracle.v1beta1.CalldataRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_calldata().empty()) {
    _this->_internal_set_calldata(from._internal_calldata());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalldataRecord::CopyFrom(const CalldataRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.oracle.v1beta1.CalldataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalldataRecord::IsInitialized() const {
  return true;
}

void CalldataRecord::InternalSwap(CalldataRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.calldata_, lhs_arena,
                                       &other->_impl_.calldata_, rhs_arena);

  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalldataRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_injective_2foracle_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_injective_2foracle_2fv1beta1_2fgenesis_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace oracle
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::GenesisState*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::oracle::v1beta1::CalldataRecord*
Arena::CreateMaybeMessage< ::injective::oracle::v1beta1::CalldataRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::oracle::v1beta1::CalldataRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/oracle/v1beta1/query.proto

#include "injective/oracle/v1beta1/query.pb.h"
#include "injective/oracle/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace oracle {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/injective.oracle.v1beta1.Query/Params",
  "/injective.oracle.v1beta1.Query/BandRelayers",
  "/injective.oracle.v1beta1.Query/BandPriceStates",
  "/injective.oracle.v1beta1.Query/BandIBCPriceStates",
  "/injective.oracle.v1beta1.Query/PriceFeedPriceStates",
  "/injective.oracle.v1beta1.Query/CoinbasePriceStates",
  "/injective.oracle.v1beta1.Query/PythPriceStates",
  "/injective.oracle.v1beta1.Query/ProviderPriceState",
  "/injective.oracle.v1beta1.Query/OracleModuleState",
  "/injective.oracle.v1beta1.Query/HistoricalPriceRecords",
  "/injective.oracle.v1beta1.Query/OracleVolatility",
  "/injective.oracle.v1beta1.Query/OracleProvidersInfo",
  "/injective.oracle.v1beta1.Query/OracleProviderPrices",
  "/injective.oracle.v1beta1.Query/OraclePrice",
  "/injective.oracle.v1beta1.Query/PythPrice",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Params_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BandRelayers_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BandPriceStates_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BandIBCPriceStates_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PriceFeedPriceStates_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CoinbasePriceStates_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PythPriceStates_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProviderPriceState_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OracleModuleState_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HistoricalPriceRecords_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OracleVolatility_(Query_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OracleProvidersInfo_(Query_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OracleProviderPrices_(Query_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OraclePrice_(Query_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PythPrice_(Query_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::injective::oracle::v1beta1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryParamsRequest, ::injective::oracle::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryParamsRequest, ::injective::oracle::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryParamsResponse, ::injective::oracle::v1beta1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::injective::oracle::v1beta1::QueryBandRelayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BandRelayers_, context, request, response);
}

void Query::Stub::async::BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::injective::oracle::v1beta1::QueryBandRelayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BandRelayers_, context, request, response, std::move(f));
}

void Query::Stub::async::BandRelayers(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BandRelayers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandRelayersResponse>* Query::Stub::PrepareAsyncBandRelayersRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryBandRelayersResponse, ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BandRelayers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandRelayersResponse>* Query::Stub::AsyncBandRelayersRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBandRelayersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BandPriceStates_, context, request, response);
}

void Query::Stub::async::BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BandPriceStates_, context, request, response, std::move(f));
}

void Query::Stub::async::BandPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BandPriceStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* Query::Stub::PrepareAsyncBandPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse, ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BandPriceStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandPriceStatesResponse>* Query::Stub::AsyncBandPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBandPriceStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BandIBCPriceStates_, context, request, response);
}

void Query::Stub::async::BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BandIBCPriceStates_, context, request, response, std::move(f));
}

void Query::Stub::async::BandIBCPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BandIBCPriceStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* Query::Stub::PrepareAsyncBandIBCPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BandIBCPriceStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse>* Query::Stub::AsyncBandIBCPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBandIBCPriceStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PriceFeedPriceStates_, context, request, response);
}

void Query::Stub::async::PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PriceFeedPriceStates_, context, request, response, std::move(f));
}

void Query::Stub::async::PriceFeedPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PriceFeedPriceStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* Query::Stub::PrepareAsyncPriceFeedPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PriceFeedPriceStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse>* Query::Stub::AsyncPriceFeedPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPriceFeedPriceStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CoinbasePriceStates_, context, request, response);
}

void Query::Stub::async::CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CoinbasePriceStates_, context, request, response, std::move(f));
}

void Query::Stub::async::CoinbasePriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CoinbasePriceStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* Query::Stub::PrepareAsyncCoinbasePriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CoinbasePriceStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse>* Query::Stub::AsyncCoinbasePriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCoinbasePriceStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PythPriceStates_, context, request, response);
}

void Query::Stub::async::PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PythPriceStates_, context, request, response, std::move(f));
}

void Query::Stub::async::PythPriceStates(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PythPriceStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* Query::Stub::PrepareAsyncPythPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse, ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PythPriceStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceStatesResponse>* Query::Stub::AsyncPythPriceStatesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPythPriceStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProviderPriceState_, context, request, response);
}

void Query::Stub::async::ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProviderPriceState_, context, request, response, std::move(f));
}

void Query::Stub::async::ProviderPriceState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProviderPriceState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* Query::Stub::PrepareAsyncProviderPriceStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse, ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProviderPriceState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryProviderPriceStateResponse>* Query::Stub::AsyncProviderPriceStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProviderPriceStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryModuleStateRequest, ::injective::oracle::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OracleModuleState_, context, request, response);
}

void Query::Stub::async::OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryModuleStateRequest, ::injective::oracle::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleModuleState_, context, request, response, std::move(f));
}

void Query::Stub::async::OracleModuleState(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleModuleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryModuleStateResponse>* Query::Stub::PrepareAsyncOracleModuleStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryModuleStateResponse, ::injective::oracle::v1beta1::QueryModuleStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OracleModuleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryModuleStateResponse>* Query::Stub::AsyncOracleModuleStateRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOracleModuleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HistoricalPriceRecords_, context, request, response);
}

void Query::Stub::async::HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistoricalPriceRecords_, context, request, response, std::move(f));
}

void Query::Stub::async::HistoricalPriceRecords(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistoricalPriceRecords_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* Query::Stub::PrepareAsyncHistoricalPriceRecordsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HistoricalPriceRecords_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse>* Query::Stub::AsyncHistoricalPriceRecordsRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHistoricalPriceRecordsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OracleVolatility_, context, request, response);
}

void Query::Stub::async::OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleVolatility_, context, request, response, std::move(f));
}

void Query::Stub::async::OracleVolatility(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleVolatility_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* Query::Stub::PrepareAsyncOracleVolatilityRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse, ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OracleVolatility_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleVolatilityResponse>* Query::Stub::AsyncOracleVolatilityRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOracleVolatilityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OracleProvidersInfo_, context, request, response);
}

void Query::Stub::async::OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleProvidersInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::OracleProvidersInfo(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleProvidersInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* Query::Stub::PrepareAsyncOracleProvidersInfoRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse, ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OracleProvidersInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse>* Query::Stub::AsyncOracleProvidersInfoRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOracleProvidersInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OracleProviderPrices_, context, request, response);
}

void Query::Stub::async::OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleProviderPrices_, context, request, response, std::move(f));
}

void Query::Stub::async::OracleProviderPrices(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleProviderPrices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* Query::Stub::PrepareAsyncOracleProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse, ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OracleProviderPrices_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse>* Query::Stub::AsyncOracleProviderPricesRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOracleProviderPricesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::injective::oracle::v1beta1::QueryOraclePriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OraclePrice_, context, request, response);
}

void Query::Stub::async::OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::injective::oracle::v1beta1::QueryOraclePriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OraclePrice_, context, request, response, std::move(f));
}

void Query::Stub::async::OraclePrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OraclePrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOraclePriceResponse>* Query::Stub::PrepareAsyncOraclePriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryOraclePriceResponse, ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OraclePrice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryOraclePriceResponse>* Query::Stub::AsyncOraclePriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOraclePriceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::oracle::v1beta1::QueryPythPriceRequest, ::injective::oracle::v1beta1::QueryPythPriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PythPrice_, context, request, response);
}

void Query::Stub::async::PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::oracle::v1beta1::QueryPythPriceRequest, ::injective::oracle::v1beta1::QueryPythPriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PythPrice_, context, request, response, std::move(f));
}

void Query::Stub::async::PythPrice(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PythPrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceResponse>* Query::Stub::PrepareAsyncPythPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::oracle::v1beta1::QueryPythPriceResponse, ::injective::oracle::v1beta1::QueryPythPriceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PythPrice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::oracle::v1beta1::QueryPythPriceResponse>* Query::Stub::AsyncPythPriceRaw(::grpc::ClientContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPythPriceRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryParamsRequest, ::injective::oracle::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryParamsRequest* req,
             ::injective::oracle::v1beta1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryBandRelayersRequest, ::injective::oracle::v1beta1::QueryBandRelayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryBandRelayersRequest* req,
             ::injective::oracle::v1beta1::QueryBandRelayersResponse* resp) {
               return service->BandRelayers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryBandPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* req,
             ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* resp) {
               return service->BandPriceStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* req,
             ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* resp) {
               return service->BandIBCPriceStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* req,
             ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* resp) {
               return service->PriceFeedPriceStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* req,
             ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* resp) {
               return service->CoinbasePriceStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryPythPriceStatesRequest, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* req,
             ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* resp) {
               return service->PythPriceStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryProviderPriceStateRequest, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* req,
             ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* resp) {
               return service->ProviderPriceState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryModuleStateRequest, ::injective::oracle::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryModuleStateRequest* req,
             ::injective::oracle::v1beta1::QueryModuleStateResponse* resp) {
               return service->OracleModuleState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* req,
             ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* resp) {
               return service->HistoricalPriceRecords(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryOracleVolatilityRequest, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* req,
             ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* resp) {
               return service->OracleVolatility(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* req,
             ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* resp) {
               return service->OracleProvidersInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* req,
             ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* resp) {
               return service->OracleProviderPrices(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryOraclePriceRequest, ::injective::oracle::v1beta1::QueryOraclePriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryOraclePriceRequest* req,
             ::injective::oracle::v1beta1::QueryOraclePriceResponse* resp) {
               return service->OraclePrice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::oracle::v1beta1::QueryPythPriceRequest, ::injective::oracle::v1beta1::QueryPythPriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::oracle::v1beta1::QueryPythPriceRequest* req,
             ::injective::oracle::v1beta1::QueryPythPriceResponse* resp) {
               return service->PythPrice(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryParamsRequest* request, ::injective::oracle::v1beta1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BandRelayers(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryBandRelayersRequest* request, ::injective::oracle::v1beta1::QueryBandRelayersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BandPriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryBandPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandPriceStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::BandIBCPriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryBandIBCPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryBandIBCPriceStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PriceFeedPriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPriceFeedPriceStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::CoinbasePriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryCoinbasePriceStatesRequest* request, ::injective::oracle::v1beta1::QueryCoinbasePriceStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PythPriceStates(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryPythPriceStatesRequest* request, ::injective::oracle::v1beta1::QueryPythPriceStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ProviderPriceState(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryProviderPriceStateRequest* request, ::injective::oracle::v1beta1::QueryProviderPriceStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OracleModuleState(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryModuleStateRequest* request, ::injective::oracle::v1beta1::QueryModuleStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::HistoricalPriceRecords(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsRequest* request, ::injective::oracle::v1beta1::QueryHistoricalPriceRecordsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OracleVolatility(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryOracleVolatilityRequest* request, ::injective::oracle::v1beta1::QueryOracleVolatilityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OracleProvidersInfo(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryOracleProvidersInfoRequest* request, ::injective::oracle::v1beta1::QueryOracleProvidersInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OracleProviderPrices(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryOracleProviderPricesRequest* request, ::injective::oracle::v1beta1::QueryOracleProviderPricesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::OraclePrice(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryOraclePriceRequest* request, ::injective::oracle::v1beta1::QueryOraclePriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PythPrice(::grpc::ServerContext* context, const ::injective::oracle::v1beta1::QueryPythPriceRequest* request, ::injective::oracle::v1beta1::QueryPythPriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace oracle
}  // namespace v1beta1


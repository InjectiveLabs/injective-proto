// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/types/v1beta1/tx_ext.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto;
namespace injective {
namespace types {
namespace v1beta1 {
class ExtensionOptionsWeb3Tx;
struct ExtensionOptionsWeb3TxDefaultTypeInternal;
extern ExtensionOptionsWeb3TxDefaultTypeInternal _ExtensionOptionsWeb3Tx_default_instance_;
}  // namespace v1beta1
}  // namespace types
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::types::v1beta1::ExtensionOptionsWeb3Tx* Arena::CreateMaybeMessage<::injective::types::v1beta1::ExtensionOptionsWeb3Tx>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace types {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class ExtensionOptionsWeb3Tx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.types.v1beta1.ExtensionOptionsWeb3Tx) */ {
 public:
  inline ExtensionOptionsWeb3Tx() : ExtensionOptionsWeb3Tx(nullptr) {}
  ~ExtensionOptionsWeb3Tx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExtensionOptionsWeb3Tx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionOptionsWeb3Tx(const ExtensionOptionsWeb3Tx& from);
  ExtensionOptionsWeb3Tx(ExtensionOptionsWeb3Tx&& from) noexcept
    : ExtensionOptionsWeb3Tx() {
    *this = ::std::move(from);
  }

  inline ExtensionOptionsWeb3Tx& operator=(const ExtensionOptionsWeb3Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionOptionsWeb3Tx& operator=(ExtensionOptionsWeb3Tx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionOptionsWeb3Tx& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionOptionsWeb3Tx* internal_default_instance() {
    return reinterpret_cast<const ExtensionOptionsWeb3Tx*>(
               &_ExtensionOptionsWeb3Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExtensionOptionsWeb3Tx& a, ExtensionOptionsWeb3Tx& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionOptionsWeb3Tx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionOptionsWeb3Tx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionOptionsWeb3Tx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionOptionsWeb3Tx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionOptionsWeb3Tx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtensionOptionsWeb3Tx& from) {
    ExtensionOptionsWeb3Tx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionOptionsWeb3Tx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.types.v1beta1.ExtensionOptionsWeb3Tx";
  }
  protected:
  explicit ExtensionOptionsWeb3Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeePayerFieldNumber = 2,
    kFeePayerSigFieldNumber = 3,
    kTypedDataChainIDFieldNumber = 1,
  };
  // string feePayer = 2 [json_name = "feePayer"];
  void clear_feepayer() ;
  const std::string& feepayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feepayer(Arg_&& arg, Args_... args);
  std::string* mutable_feepayer();
  PROTOBUF_NODISCARD std::string* release_feepayer();
  void set_allocated_feepayer(std::string* ptr);

  private:
  const std::string& _internal_feepayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feepayer(
      const std::string& value);
  std::string* _internal_mutable_feepayer();

  public:
  // bytes feePayerSig = 3 [json_name = "feePayerSig"];
  void clear_feepayersig() ;
  const std::string& feepayersig() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_feepayersig(Arg_&& arg, Args_... args);
  std::string* mutable_feepayersig();
  PROTOBUF_NODISCARD std::string* release_feepayersig();
  void set_allocated_feepayersig(std::string* ptr);

  private:
  const std::string& _internal_feepayersig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_feepayersig(
      const std::string& value);
  std::string* _internal_mutable_feepayersig();

  public:
  // uint64 typedDataChainID = 1 [json_name = "typedDataChainID"];
  void clear_typeddatachainid() ;
  ::uint64_t typeddatachainid() const;
  void set_typeddatachainid(::uint64_t value);

  private:
  ::uint64_t _internal_typeddatachainid() const;
  void _internal_set_typeddatachainid(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feepayer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feepayersig_;
    ::uint64_t typeddatachainid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ExtensionOptionsWeb3Tx

// uint64 typedDataChainID = 1 [json_name = "typedDataChainID"];
inline void ExtensionOptionsWeb3Tx::clear_typeddatachainid() {
  _impl_.typeddatachainid_ = ::uint64_t{0u};
}
inline ::uint64_t ExtensionOptionsWeb3Tx::typeddatachainid() const {
  // @@protoc_insertion_point(field_get:injective.types.v1beta1.ExtensionOptionsWeb3Tx.typedDataChainID)
  return _internal_typeddatachainid();
}
inline void ExtensionOptionsWeb3Tx::set_typeddatachainid(::uint64_t value) {
  _internal_set_typeddatachainid(value);
  // @@protoc_insertion_point(field_set:injective.types.v1beta1.ExtensionOptionsWeb3Tx.typedDataChainID)
}
inline ::uint64_t ExtensionOptionsWeb3Tx::_internal_typeddatachainid() const {
  return _impl_.typeddatachainid_;
}
inline void ExtensionOptionsWeb3Tx::_internal_set_typeddatachainid(::uint64_t value) {
  ;
  _impl_.typeddatachainid_ = value;
}

// string feePayer = 2 [json_name = "feePayer"];
inline void ExtensionOptionsWeb3Tx::clear_feepayer() {
  _impl_.feepayer_.ClearToEmpty();
}
inline const std::string& ExtensionOptionsWeb3Tx::feepayer() const {
  // @@protoc_insertion_point(field_get:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayer)
  return _internal_feepayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExtensionOptionsWeb3Tx::set_feepayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feepayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayer)
}
inline std::string* ExtensionOptionsWeb3Tx::mutable_feepayer() {
  std::string* _s = _internal_mutable_feepayer();
  // @@protoc_insertion_point(field_mutable:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayer)
  return _s;
}
inline const std::string& ExtensionOptionsWeb3Tx::_internal_feepayer() const {
  return _impl_.feepayer_.Get();
}
inline void ExtensionOptionsWeb3Tx::_internal_set_feepayer(const std::string& value) {
  ;


  _impl_.feepayer_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionOptionsWeb3Tx::_internal_mutable_feepayer() {
  ;
  return _impl_.feepayer_.Mutable( GetArenaForAllocation());
}
inline std::string* ExtensionOptionsWeb3Tx::release_feepayer() {
  // @@protoc_insertion_point(field_release:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayer)
  return _impl_.feepayer_.Release();
}
inline void ExtensionOptionsWeb3Tx::set_allocated_feepayer(std::string* value) {
  _impl_.feepayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feepayer_.IsDefault()) {
          _impl_.feepayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayer)
}

// bytes feePayerSig = 3 [json_name = "feePayerSig"];
inline void ExtensionOptionsWeb3Tx::clear_feepayersig() {
  _impl_.feepayersig_.ClearToEmpty();
}
inline const std::string& ExtensionOptionsWeb3Tx::feepayersig() const {
  // @@protoc_insertion_point(field_get:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayerSig)
  return _internal_feepayersig();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExtensionOptionsWeb3Tx::set_feepayersig(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.feepayersig_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayerSig)
}
inline std::string* ExtensionOptionsWeb3Tx::mutable_feepayersig() {
  std::string* _s = _internal_mutable_feepayersig();
  // @@protoc_insertion_point(field_mutable:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayerSig)
  return _s;
}
inline const std::string& ExtensionOptionsWeb3Tx::_internal_feepayersig() const {
  return _impl_.feepayersig_.Get();
}
inline void ExtensionOptionsWeb3Tx::_internal_set_feepayersig(const std::string& value) {
  ;


  _impl_.feepayersig_.Set(value, GetArenaForAllocation());
}
inline std::string* ExtensionOptionsWeb3Tx::_internal_mutable_feepayersig() {
  ;
  return _impl_.feepayersig_.Mutable( GetArenaForAllocation());
}
inline std::string* ExtensionOptionsWeb3Tx::release_feepayersig() {
  // @@protoc_insertion_point(field_release:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayerSig)
  return _impl_.feepayersig_.Release();
}
inline void ExtensionOptionsWeb3Tx::set_allocated_feepayersig(std::string* value) {
  _impl_.feepayersig_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.feepayersig_.IsDefault()) {
          _impl_.feepayersig_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayerSig)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace types
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_2epb_2eh

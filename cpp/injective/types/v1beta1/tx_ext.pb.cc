// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/types/v1beta1/tx_ext.proto

#include "injective/types/v1beta1/tx_ext.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace types {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR ExtensionOptionsWeb3Tx::ExtensionOptionsWeb3Tx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feepayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.feepayersig_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.typeddatachainid_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtensionOptionsWeb3TxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionOptionsWeb3TxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionOptionsWeb3TxDefaultTypeInternal() {}
  union {
    ExtensionOptionsWeb3Tx _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionOptionsWeb3TxDefaultTypeInternal _ExtensionOptionsWeb3Tx_default_instance_;
}  // namespace v1beta1
}  // namespace types
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective::types::v1beta1::ExtensionOptionsWeb3Tx, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::types::v1beta1::ExtensionOptionsWeb3Tx, _impl_.typeddatachainid_),
    PROTOBUF_FIELD_OFFSET(::injective::types::v1beta1::ExtensionOptionsWeb3Tx, _impl_.feepayer_),
    PROTOBUF_FIELD_OFFSET(::injective::types::v1beta1::ExtensionOptionsWeb3Tx, _impl_.feepayersig_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective::types::v1beta1::ExtensionOptionsWeb3Tx)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::types::v1beta1::_ExtensionOptionsWeb3Tx_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$injective/types/v1beta1/tx_ext.proto\022\027"
    "injective.types.v1beta1\032\024gogoproto/gogo."
    "proto\"\210\001\n\026ExtensionOptionsWeb3Tx\022*\n\020type"
    "dDataChainID\030\001 \001(\004R\020typedDataChainID\022\032\n\010"
    "feePayer\030\002 \001(\tR\010feePayer\022 \n\013feePayerSig\030"
    "\003 \001(\014R\013feePayerSig:\004\210\240\037\000B\346\001\n\033com.injecti"
    "ve.types.v1beta1B\nTxExtProtoP\001Z=github.c"
    "om/InjectiveLabs/injective-core/injectiv"
    "e-chain/types\242\002\003ITX\252\002\027Injective.Types.V1"
    "beta1\312\002\027Injective\\Types\\V1beta1\342\002#Inject"
    "ive\\Types\\V1beta1\\GPBMetadata\352\002\031Injectiv"
    "e::Types::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto = {
    false,
    false,
    465,
    descriptor_table_protodef_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto,
    "injective/types/v1beta1/tx_ext.proto",
    &descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_once,
    descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto::offsets,
    file_level_metadata_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto,
    file_level_enum_descriptors_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto,
    file_level_service_descriptors_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_getter() {
  return &descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto(&descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto);
namespace injective {
namespace types {
namespace v1beta1 {
// ===================================================================

class ExtensionOptionsWeb3Tx::_Internal {
 public:
};

ExtensionOptionsWeb3Tx::ExtensionOptionsWeb3Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
}
ExtensionOptionsWeb3Tx::ExtensionOptionsWeb3Tx(const ExtensionOptionsWeb3Tx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtensionOptionsWeb3Tx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feepayer_) {}

    , decltype(_impl_.feepayersig_) {}

    , decltype(_impl_.typeddatachainid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.feepayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feepayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feepayer().empty()) {
    _this->_impl_.feepayer_.Set(from._internal_feepayer(), _this->GetArenaForAllocation());
  }
  _impl_.feepayersig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feepayersig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_feepayersig().empty()) {
    _this->_impl_.feepayersig_.Set(from._internal_feepayersig(), _this->GetArenaForAllocation());
  }
  _this->_impl_.typeddatachainid_ = from._impl_.typeddatachainid_;
  // @@protoc_insertion_point(copy_constructor:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
}

inline void ExtensionOptionsWeb3Tx::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.feepayer_) {}

    , decltype(_impl_.feepayersig_) {}

    , decltype(_impl_.typeddatachainid_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.feepayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feepayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.feepayersig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.feepayersig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExtensionOptionsWeb3Tx::~ExtensionOptionsWeb3Tx() {
  // @@protoc_insertion_point(destructor:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionOptionsWeb3Tx::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feepayer_.Destroy();
  _impl_.feepayersig_.Destroy();
}

void ExtensionOptionsWeb3Tx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtensionOptionsWeb3Tx::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feepayer_.ClearToEmpty();
  _impl_.feepayersig_.ClearToEmpty();
  _impl_.typeddatachainid_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionOptionsWeb3Tx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 typedDataChainID = 1 [json_name = "typedDataChainID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.typeddatachainid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string feePayer = 2 [json_name = "feePayer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_feepayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes feePayerSig = 3 [json_name = "feePayerSig"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_feepayersig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExtensionOptionsWeb3Tx::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 typedDataChainID = 1 [json_name = "typedDataChainID"];
  if (this->_internal_typeddatachainid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_typeddatachainid(), target);
  }

  // string feePayer = 2 [json_name = "feePayer"];
  if (!this->_internal_feepayer().empty()) {
    const std::string& _s = this->_internal_feepayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.types.v1beta1.ExtensionOptionsWeb3Tx.feePayer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bytes feePayerSig = 3 [json_name = "feePayerSig"];
  if (!this->_internal_feepayersig().empty()) {
    const std::string& _s = this->_internal_feepayersig();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
  return target;
}

::size_t ExtensionOptionsWeb3Tx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string feePayer = 2 [json_name = "feePayer"];
  if (!this->_internal_feepayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_feepayer());
  }

  // bytes feePayerSig = 3 [json_name = "feePayerSig"];
  if (!this->_internal_feepayersig().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_feepayersig());
  }

  // uint64 typedDataChainID = 1 [json_name = "typedDataChainID"];
  if (this->_internal_typeddatachainid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_typeddatachainid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtensionOptionsWeb3Tx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtensionOptionsWeb3Tx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtensionOptionsWeb3Tx::GetClassData() const { return &_class_data_; }


void ExtensionOptionsWeb3Tx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtensionOptionsWeb3Tx*>(&to_msg);
  auto& from = static_cast<const ExtensionOptionsWeb3Tx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_feepayer().empty()) {
    _this->_internal_set_feepayer(from._internal_feepayer());
  }
  if (!from._internal_feepayersig().empty()) {
    _this->_internal_set_feepayersig(from._internal_feepayersig());
  }
  if (from._internal_typeddatachainid() != 0) {
    _this->_internal_set_typeddatachainid(from._internal_typeddatachainid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionOptionsWeb3Tx::CopyFrom(const ExtensionOptionsWeb3Tx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionOptionsWeb3Tx::IsInitialized() const {
  return true;
}

void ExtensionOptionsWeb3Tx::InternalSwap(ExtensionOptionsWeb3Tx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feepayer_, lhs_arena,
                                       &other->_impl_.feepayer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.feepayersig_, lhs_arena,
                                       &other->_impl_.feepayersig_, rhs_arena);

  swap(_impl_.typeddatachainid_, other->_impl_.typeddatachainid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionOptionsWeb3Tx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_getter, &descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto_once,
      file_level_metadata_injective_2ftypes_2fv1beta1_2ftx_5fext_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace types
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::types::v1beta1::ExtensionOptionsWeb3Tx*
Arena::CreateMaybeMessage< ::injective::types::v1beta1::ExtensionOptionsWeb3Tx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::types::v1beta1::ExtensionOptionsWeb3Tx >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

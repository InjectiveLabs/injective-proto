// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/types/v1beta1/tx_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2ftypes_2fv1beta1_2ftx_5fresponse_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2ftypes_2fv1beta1_2ftx_5fresponse_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2ftypes_2fv1beta1_2ftx_5fresponse_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2ftypes_2fv1beta1_2ftx_5fresponse_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2ftypes_2fv1beta1_2ftx_5fresponse_2eproto;
namespace injective {
namespace types {
namespace v1beta1 {
class TxResponseData;
struct TxResponseDataDefaultTypeInternal;
extern TxResponseDataDefaultTypeInternal _TxResponseData_default_instance_;
class TxResponseGenericMessage;
struct TxResponseGenericMessageDefaultTypeInternal;
extern TxResponseGenericMessageDefaultTypeInternal _TxResponseGenericMessage_default_instance_;
}  // namespace v1beta1
}  // namespace types
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::types::v1beta1::TxResponseData* Arena::CreateMaybeMessage<::injective::types::v1beta1::TxResponseData>(Arena*);
template <>
::injective::types::v1beta1::TxResponseGenericMessage* Arena::CreateMaybeMessage<::injective::types::v1beta1::TxResponseGenericMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace types {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class TxResponseGenericMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.types.v1beta1.TxResponseGenericMessage) */ {
 public:
  inline TxResponseGenericMessage() : TxResponseGenericMessage(nullptr) {}
  ~TxResponseGenericMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxResponseGenericMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxResponseGenericMessage(const TxResponseGenericMessage& from);
  TxResponseGenericMessage(TxResponseGenericMessage&& from) noexcept
    : TxResponseGenericMessage() {
    *this = ::std::move(from);
  }

  inline TxResponseGenericMessage& operator=(const TxResponseGenericMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxResponseGenericMessage& operator=(TxResponseGenericMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxResponseGenericMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxResponseGenericMessage* internal_default_instance() {
    return reinterpret_cast<const TxResponseGenericMessage*>(
               &_TxResponseGenericMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxResponseGenericMessage& a, TxResponseGenericMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TxResponseGenericMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxResponseGenericMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxResponseGenericMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxResponseGenericMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxResponseGenericMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxResponseGenericMessage& from) {
    TxResponseGenericMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxResponseGenericMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.types.v1beta1.TxResponseGenericMessage";
  }
  protected:
  explicit TxResponseGenericMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string header = 1 [json_name = "header"];
  void clear_header() ;
  const std::string& header() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header(Arg_&& arg, Args_... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* ptr);

  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(
      const std::string& value);
  std::string* _internal_mutable_header();

  public:
  // bytes data = 2 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:injective.types.v1beta1.TxResponseGenericMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftypes_2fv1beta1_2ftx_5fresponse_2eproto;
};// -------------------------------------------------------------------

class TxResponseData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.types.v1beta1.TxResponseData) */ {
 public:
  inline TxResponseData() : TxResponseData(nullptr) {}
  ~TxResponseData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxResponseData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxResponseData(const TxResponseData& from);
  TxResponseData(TxResponseData&& from) noexcept
    : TxResponseData() {
    *this = ::std::move(from);
  }

  inline TxResponseData& operator=(const TxResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxResponseData& operator=(TxResponseData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxResponseData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxResponseData* internal_default_instance() {
    return reinterpret_cast<const TxResponseData*>(
               &_TxResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxResponseData& a, TxResponseData& b) {
    a.Swap(&b);
  }
  inline void Swap(TxResponseData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxResponseData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxResponseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxResponseData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxResponseData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxResponseData& from) {
    TxResponseData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxResponseData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.types.v1beta1.TxResponseData";
  }
  protected:
  explicit TxResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .injective.types.v1beta1.TxResponseGenericMessage messages = 1 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::injective::types::v1beta1::TxResponseGenericMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::types::v1beta1::TxResponseGenericMessage >*
      mutable_messages();
  private:
  const ::injective::types::v1beta1::TxResponseGenericMessage& _internal_messages(int index) const;
  ::injective::types::v1beta1::TxResponseGenericMessage* _internal_add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::types::v1beta1::TxResponseGenericMessage>& _internal_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::types::v1beta1::TxResponseGenericMessage>* _internal_mutable_messages();
  public:
  const ::injective::types::v1beta1::TxResponseGenericMessage& messages(int index) const;
  ::injective::types::v1beta1::TxResponseGenericMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::types::v1beta1::TxResponseGenericMessage >&
      messages() const;
  // @@protoc_insertion_point(class_scope:injective.types.v1beta1.TxResponseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::types::v1beta1::TxResponseGenericMessage > messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2ftypes_2fv1beta1_2ftx_5fresponse_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TxResponseGenericMessage

// string header = 1 [json_name = "header"];
inline void TxResponseGenericMessage::clear_header() {
  _impl_.header_.ClearToEmpty();
}
inline const std::string& TxResponseGenericMessage::header() const {
  // @@protoc_insertion_point(field_get:injective.types.v1beta1.TxResponseGenericMessage.header)
  return _internal_header();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResponseGenericMessage::set_header(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.header_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.types.v1beta1.TxResponseGenericMessage.header)
}
inline std::string* TxResponseGenericMessage::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:injective.types.v1beta1.TxResponseGenericMessage.header)
  return _s;
}
inline const std::string& TxResponseGenericMessage::_internal_header() const {
  return _impl_.header_.Get();
}
inline void TxResponseGenericMessage::_internal_set_header(const std::string& value) {
  ;


  _impl_.header_.Set(value, GetArenaForAllocation());
}
inline std::string* TxResponseGenericMessage::_internal_mutable_header() {
  ;
  return _impl_.header_.Mutable( GetArenaForAllocation());
}
inline std::string* TxResponseGenericMessage::release_header() {
  // @@protoc_insertion_point(field_release:injective.types.v1beta1.TxResponseGenericMessage.header)
  return _impl_.header_.Release();
}
inline void TxResponseGenericMessage::set_allocated_header(std::string* value) {
  _impl_.header_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.header_.IsDefault()) {
          _impl_.header_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.types.v1beta1.TxResponseGenericMessage.header)
}

// bytes data = 2 [json_name = "data"];
inline void TxResponseGenericMessage::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TxResponseGenericMessage::data() const {
  // @@protoc_insertion_point(field_get:injective.types.v1beta1.TxResponseGenericMessage.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxResponseGenericMessage::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.types.v1beta1.TxResponseGenericMessage.data)
}
inline std::string* TxResponseGenericMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:injective.types.v1beta1.TxResponseGenericMessage.data)
  return _s;
}
inline const std::string& TxResponseGenericMessage::_internal_data() const {
  return _impl_.data_.Get();
}
inline void TxResponseGenericMessage::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* TxResponseGenericMessage::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* TxResponseGenericMessage::release_data() {
  // @@protoc_insertion_point(field_release:injective.types.v1beta1.TxResponseGenericMessage.data)
  return _impl_.data_.Release();
}
inline void TxResponseGenericMessage::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.types.v1beta1.TxResponseGenericMessage.data)
}

// -------------------------------------------------------------------

// TxResponseData

// repeated .injective.types.v1beta1.TxResponseGenericMessage messages = 1 [json_name = "messages"];
inline int TxResponseData::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int TxResponseData::messages_size() const {
  return _internal_messages_size();
}
inline void TxResponseData::clear_messages() {
  _internal_mutable_messages()->Clear();
}
inline ::injective::types::v1beta1::TxResponseGenericMessage* TxResponseData::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:injective.types.v1beta1.TxResponseData.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::types::v1beta1::TxResponseGenericMessage >*
TxResponseData::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:injective.types.v1beta1.TxResponseData.messages)
  return _internal_mutable_messages();
}
inline const ::injective::types::v1beta1::TxResponseGenericMessage& TxResponseData::_internal_messages(int index) const {
  return _internal_messages().Get(index);
}
inline const ::injective::types::v1beta1::TxResponseGenericMessage& TxResponseData::messages(int index) const {
  // @@protoc_insertion_point(field_get:injective.types.v1beta1.TxResponseData.messages)
  return _internal_messages(index);
}
inline ::injective::types::v1beta1::TxResponseGenericMessage* TxResponseData::_internal_add_messages() {
  return _internal_mutable_messages()->Add();
}
inline ::injective::types::v1beta1::TxResponseGenericMessage* TxResponseData::add_messages() {
  ::injective::types::v1beta1::TxResponseGenericMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:injective.types.v1beta1.TxResponseData.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::types::v1beta1::TxResponseGenericMessage >&
TxResponseData::messages() const {
  // @@protoc_insertion_point(field_list:injective.types.v1beta1.TxResponseData.messages)
  return _internal_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::types::v1beta1::TxResponseGenericMessage>&
TxResponseData::_internal_messages() const {
  return _impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::types::v1beta1::TxResponseGenericMessage>*
TxResponseData::_internal_mutable_messages() {
  return &_impl_.messages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace types
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2ftypes_2fv1beta1_2ftx_5fresponse_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/insurance/v1beta1/insurance.proto

#include "injective/insurance/v1beta1/insurance.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective {
namespace insurance {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.default_redemption_notice_period_duration_)*/nullptr} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InsuranceFund::InsuranceFund(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deposit_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.insurance_pool_token_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.balance_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_share_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.redemption_notice_period_duration_)*/nullptr
  , /*decltype(_impl_.expiry_)*/ ::int64_t{0}

  , /*decltype(_impl_.oracle_type_)*/ 0
} {}
struct InsuranceFundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsuranceFundDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsuranceFundDefaultTypeInternal() {}
  union {
    InsuranceFund _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsuranceFundDefaultTypeInternal _InsuranceFund_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RedemptionSchedule::RedemptionSchedule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.marketid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.redeemer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.claimable_redemption_time_)*/nullptr
  , /*decltype(_impl_.redemption_amount_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}
} {}
struct RedemptionScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedemptionScheduleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedemptionScheduleDefaultTypeInternal() {}
  union {
    RedemptionSchedule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedemptionScheduleDefaultTypeInternal _RedemptionSchedule_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventInsuranceFundUpdate::EventInsuranceFundUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fund_)*/nullptr} {}
struct EventInsuranceFundUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventInsuranceFundUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventInsuranceFundUpdateDefaultTypeInternal() {}
  union {
    EventInsuranceFundUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventInsuranceFundUpdateDefaultTypeInternal _EventInsuranceFundUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventRequestRedemption::EventRequestRedemption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.schedule_)*/nullptr} {}
struct EventRequestRedemptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventRequestRedemptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventRequestRedemptionDefaultTypeInternal() {}
  union {
    EventRequestRedemption _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventRequestRedemptionDefaultTypeInternal _EventRequestRedemption_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventWithdrawRedemption::EventWithdrawRedemption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.schedule_)*/nullptr
  , /*decltype(_impl_.redeem_coin_)*/nullptr} {}
struct EventWithdrawRedemptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventWithdrawRedemptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventWithdrawRedemptionDefaultTypeInternal() {}
  union {
    EventWithdrawRedemption _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventWithdrawRedemptionDefaultTypeInternal _EventWithdrawRedemption_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EventUnderwrite::EventUnderwrite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.underwriter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.marketid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deposit_)*/nullptr
  , /*decltype(_impl_.shares_)*/nullptr} {}
struct EventUnderwriteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventUnderwriteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventUnderwriteDefaultTypeInternal() {}
  union {
    EventUnderwrite _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventUnderwriteDefaultTypeInternal _EventUnderwrite_default_instance_;
}  // namespace v1beta1
}  // namespace insurance
}  // namespace injective
static ::_pb::Metadata file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_injective_2finsurance_2fv1beta1_2finsurance_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_injective_2finsurance_2fv1beta1_2finsurance_2eproto = nullptr;
const ::uint32_t TableStruct_injective_2finsurance_2fv1beta1_2finsurance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::Params, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::Params, _impl_.default_redemption_notice_period_duration_),
    0,
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.deposit_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.insurance_pool_token_denom_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.redemption_notice_period_duration_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.balance_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.total_share_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.market_ticker_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.oracle_base_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.oracle_quote_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::InsuranceFund, _impl_.expiry_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::RedemptionSchedule, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::RedemptionSchedule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::RedemptionSchedule, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::RedemptionSchedule, _impl_.marketid_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::RedemptionSchedule, _impl_.redeemer_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::RedemptionSchedule, _impl_.claimable_redemption_time_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::RedemptionSchedule, _impl_.redemption_amount_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventInsuranceFundUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventInsuranceFundUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventInsuranceFundUpdate, _impl_.fund_),
    0,
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventRequestRedemption, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventRequestRedemption, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventRequestRedemption, _impl_.schedule_),
    0,
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventWithdrawRedemption, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventWithdrawRedemption, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventWithdrawRedemption, _impl_.schedule_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventWithdrawRedemption, _impl_.redeem_coin_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventUnderwrite, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventUnderwrite, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventUnderwrite, _impl_.underwriter_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventUnderwrite, _impl_.marketid_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventUnderwrite, _impl_.deposit_),
    PROTOBUF_FIELD_OFFSET(::injective::insurance::v1beta1::EventUnderwrite, _impl_.shares_),
    ~0u,
    ~0u,
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::injective::insurance::v1beta1::Params)},
        { 10, 29, -1, sizeof(::injective::insurance::v1beta1::InsuranceFund)},
        { 40, 53, -1, sizeof(::injective::insurance::v1beta1::RedemptionSchedule)},
        { 58, 67, -1, sizeof(::injective::insurance::v1beta1::EventInsuranceFundUpdate)},
        { 68, 77, -1, sizeof(::injective::insurance::v1beta1::EventRequestRedemption)},
        { 78, 88, -1, sizeof(::injective::insurance::v1beta1::EventWithdrawRedemption)},
        { 90, 102, -1, sizeof(::injective::insurance::v1beta1::EventUnderwrite)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective::insurance::v1beta1::_Params_default_instance_._instance,
    &::injective::insurance::v1beta1::_InsuranceFund_default_instance_._instance,
    &::injective::insurance::v1beta1::_RedemptionSchedule_default_instance_._instance,
    &::injective::insurance::v1beta1::_EventInsuranceFundUpdate_default_instance_._instance,
    &::injective::insurance::v1beta1::_EventRequestRedemption_default_instance_._instance,
    &::injective::insurance::v1beta1::_EventWithdrawRedemption_default_instance_._instance,
    &::injective::insurance::v1beta1::_EventUnderwrite_default_instance_._instance,
};
const char descriptor_table_protodef_injective_2finsurance_2fv1beta1_2finsurance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+injective/insurance/v1beta1/insurance."
    "proto\022\033injective.insurance.v1beta1\032\024gogo"
    "proto/gogo.proto\032\036google/protobuf/durati"
    "on.proto\032\037google/protobuf/timestamp.prot"
    "o\032\036cosmos/base/v1beta1/coin.proto\032%injec"
    "tive/oracle/v1beta1/oracle.proto\"\302\001\n\006Par"
    "ams\022\261\001\n)default_redemption_notice_period"
    "_duration\030\001 \001(\0132\031.google.protobuf.Durati"
    "onB<\310\336\037\000\362\336\0370yaml:\"default_redemption_not"
    "ice_period_duration\"\230\337\037\001R%defaultRedempt"
    "ionNoticePeriodDuration:\004\350\240\037\001\"\216\005\n\rInsura"
    "nceFund\022#\n\rdeposit_denom\030\001 \001(\tR\014depositD"
    "enom\022;\n\032insurance_pool_token_denom\030\002 \001(\t"
    "R\027insurancePoolTokenDenom\022\232\001\n!redemption"
    "_notice_period_duration\030\003 \001(\0132\031.google.p"
    "rotobuf.DurationB4\310\336\037\000\362\336\037(yaml:\"redempti"
    "on_notice_period_duration\"\230\337\037\001R\036redempti"
    "onNoticePeriodDuration\022H\n\007balance\030\004 \001(\tB"
    ".\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.IntR\007balance\022O\n\013total_share\030\005 \001(\tB.\310"
    "\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/type"
    "s.IntR\ntotalShare\022\033\n\tmarket_id\030\006 \001(\tR\010ma"
    "rketId\022#\n\rmarket_ticker\030\007 \001(\tR\014marketTic"
    "ker\022\037\n\013oracle_base\030\010 \001(\tR\noracleBase\022!\n\014"
    "oracle_quote\030\t \001(\tR\013oracleQuote\022E\n\013oracl"
    "e_type\030\n \001(\0162$.injective.oracle.v1beta1."
    "OracleTypeR\noracleType\022\026\n\006expiry\030\013 \001(\003R\006"
    "expiry\"\261\002\n\022RedemptionSchedule\022\016\n\002id\030\001 \001("
    "\004R\002id\022\032\n\010marketId\030\002 \001(\tR\010marketId\022\032\n\010red"
    "eemer\030\003 \001(\tR\010redeemer\022\204\001\n\031claimable_rede"
    "mption_time\030\004 \001(\0132\032.google.protobuf.Time"
    "stampB,\310\336\037\000\362\336\037 yaml:\"claimable_redemptio"
    "n_time\"\220\337\037\001R\027claimableRedemptionTime\022L\n\021"
    "redemption_amount\030\005 \001(\0132\031.cosmos.base.v1"
    "beta1.CoinB\004\310\336\037\000R\020redemptionAmount\"Z\n\030Ev"
    "entInsuranceFundUpdate\022>\n\004fund\030\001 \001(\0132*.i"
    "njective.insurance.v1beta1.InsuranceFund"
    "R\004fund\"e\n\026EventRequestRedemption\022K\n\010sche"
    "dule\030\001 \001(\0132/.injective.insurance.v1beta1"
    ".RedemptionScheduleR\010schedule\"\250\001\n\027EventW"
    "ithdrawRedemption\022K\n\010schedule\030\001 \001(\0132/.in"
    "jective.insurance.v1beta1.RedemptionSche"
    "duleR\010schedule\022@\n\013redeem_coin\030\002 \001(\0132\031.co"
    "smos.base.v1beta1.CoinB\004\310\336\037\000R\nredeemCoin"
    "\"\303\001\n\017EventUnderwrite\022 \n\013underwriter\030\001 \001("
    "\tR\013underwriter\022\032\n\010marketId\030\002 \001(\tR\010market"
    "Id\0229\n\007deposit\030\003 \001(\0132\031.cosmos.base.v1beta"
    "1.CoinB\004\310\336\037\000R\007deposit\0227\n\006shares\030\004 \001(\0132\031."
    "cosmos.base.v1beta1.CoinB\004\310\336\037\000R\006sharesB\220"
    "\002\n\037com.injective.insurance.v1beta1B\016Insu"
    "ranceProtoP\001ZOgithub.com/InjectiveLabs/i"
    "njective-core/injective-chain/modules/in"
    "surance/types\242\002\003IIX\252\002\033Injective.Insuranc"
    "e.V1beta1\312\002\033Injective\\Insurance\\V1beta1\342"
    "\002\'Injective\\Insurance\\V1beta1\\GPBMetadat"
    "a\352\002\035Injective::Insurance::V1beta1b\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_deps[5] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_injective_2foracle_2fv1beta1_2foracle_2eproto,
};
static ::absl::once_flag descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto = {
    false,
    false,
    2241,
    descriptor_table_protodef_injective_2finsurance_2fv1beta1_2finsurance_2eproto,
    "injective/insurance/v1beta1/insurance.proto",
    &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once,
    descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_deps,
    5,
    7,
    schemas,
    file_default_instances,
    TableStruct_injective_2finsurance_2fv1beta1_2finsurance_2eproto::offsets,
    file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto,
    file_level_enum_descriptors_injective_2finsurance_2fv1beta1_2finsurance_2eproto,
    file_level_service_descriptors_injective_2finsurance_2fv1beta1_2finsurance_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_getter() {
  return &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_injective_2finsurance_2fv1beta1_2finsurance_2eproto(&descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto);
namespace injective {
namespace insurance {
namespace v1beta1 {
// ===================================================================

class Params::_Internal {
 public:
  using HasBits = decltype(std::declval<Params>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Params, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& default_redemption_notice_period_duration(const Params* msg);
  static void set_has_default_redemption_notice_period_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
Params::_Internal::default_redemption_notice_period_duration(const Params* msg) {
  return *msg->_impl_.default_redemption_notice_period_duration_;
}
void Params::clear_default_redemption_notice_period_duration() {
  if (_impl_.default_redemption_notice_period_duration_ != nullptr) _impl_.default_redemption_notice_period_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.insurance.v1beta1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_redemption_notice_period_duration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.default_redemption_notice_period_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.default_redemption_notice_period_duration_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.insurance.v1beta1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.default_redemption_notice_period_duration_){nullptr}
  };
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:injective.insurance.v1beta1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.default_redemption_notice_period_duration_;
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.insurance.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.default_redemption_notice_period_duration_ != nullptr);
    _impl_.default_redemption_notice_period_duration_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration default_redemption_notice_period_duration = 1 [json_name = "defaultRedemptionNoticePeriodDuration", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"default_redemption_notice_period_duration\"", (.gogoproto.stdduration) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_redemption_notice_period_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.insurance.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration default_redemption_notice_period_duration = 1 [json_name = "defaultRedemptionNoticePeriodDuration", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"default_redemption_notice_period_duration\"", (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::default_redemption_notice_period_duration(this),
        _Internal::default_redemption_notice_period_duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.insurance.v1beta1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.insurance.v1beta1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration default_redemption_notice_period_duration = 1 [json_name = "defaultRedemptionNoticePeriodDuration", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"default_redemption_notice_period_duration\"", (.gogoproto.stdduration) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.default_redemption_notice_period_duration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.insurance.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_default_redemption_notice_period_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_default_redemption_notice_period_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.insurance.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.default_redemption_notice_period_duration_, other->_impl_.default_redemption_notice_period_duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_getter, &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once,
      file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto[0]);
}
// ===================================================================

class InsuranceFund::_Internal {
 public:
  using HasBits = decltype(std::declval<InsuranceFund>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InsuranceFund, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& redemption_notice_period_duration(const InsuranceFund* msg);
  static void set_has_redemption_notice_period_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
InsuranceFund::_Internal::redemption_notice_period_duration(const InsuranceFund* msg) {
  return *msg->_impl_.redemption_notice_period_duration_;
}
void InsuranceFund::clear_redemption_notice_period_duration() {
  if (_impl_.redemption_notice_period_duration_ != nullptr) _impl_.redemption_notice_period_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InsuranceFund::InsuranceFund(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.insurance.v1beta1.InsuranceFund)
}
InsuranceFund::InsuranceFund(const InsuranceFund& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsuranceFund* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposit_denom_) {}

    , decltype(_impl_.insurance_pool_token_denom_) {}

    , decltype(_impl_.balance_) {}

    , decltype(_impl_.total_share_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.market_ticker_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.redemption_notice_period_duration_){nullptr}
    , decltype(_impl_.expiry_) {}

    , decltype(_impl_.oracle_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deposit_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deposit_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deposit_denom().empty()) {
    _this->_impl_.deposit_denom_.Set(from._internal_deposit_denom(), _this->GetArenaForAllocation());
  }
  _impl_.insurance_pool_token_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.insurance_pool_token_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_insurance_pool_token_denom().empty()) {
    _this->_impl_.insurance_pool_token_denom_.Set(from._internal_insurance_pool_token_denom(), _this->GetArenaForAllocation());
  }
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), _this->GetArenaForAllocation());
  }
  _impl_.total_share_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_share_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_total_share().empty()) {
    _this->_impl_.total_share_.Set(from._internal_total_share(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_ticker().empty()) {
    _this->_impl_.market_ticker_.Set(from._internal_market_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_base().empty()) {
    _this->_impl_.oracle_base_.Set(from._internal_oracle_base(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_quote().empty()) {
    _this->_impl_.oracle_quote_.Set(from._internal_oracle_quote(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.redemption_notice_period_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.redemption_notice_period_duration_);
  }
  ::memcpy(&_impl_.expiry_, &from._impl_.expiry_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.oracle_type_) -
    reinterpret_cast<char*>(&_impl_.expiry_)) + sizeof(_impl_.oracle_type_));
  // @@protoc_insertion_point(copy_constructor:injective.insurance.v1beta1.InsuranceFund)
}

inline void InsuranceFund::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposit_denom_) {}

    , decltype(_impl_.insurance_pool_token_denom_) {}

    , decltype(_impl_.balance_) {}

    , decltype(_impl_.total_share_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.market_ticker_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.redemption_notice_period_duration_){nullptr}
    , decltype(_impl_.expiry_) { ::int64_t{0} }

    , decltype(_impl_.oracle_type_) { 0 }

  };
  _impl_.deposit_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deposit_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.insurance_pool_token_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.insurance_pool_token_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.total_share_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_share_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsuranceFund::~InsuranceFund() {
  // @@protoc_insertion_point(destructor:injective.insurance.v1beta1.InsuranceFund)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsuranceFund::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deposit_denom_.Destroy();
  _impl_.insurance_pool_token_denom_.Destroy();
  _impl_.balance_.Destroy();
  _impl_.total_share_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.market_ticker_.Destroy();
  _impl_.oracle_base_.Destroy();
  _impl_.oracle_quote_.Destroy();
  if (this != internal_default_instance()) delete _impl_.redemption_notice_period_duration_;
}

void InsuranceFund::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsuranceFund::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.insurance.v1beta1.InsuranceFund)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deposit_denom_.ClearToEmpty();
  _impl_.insurance_pool_token_denom_.ClearToEmpty();
  _impl_.balance_.ClearToEmpty();
  _impl_.total_share_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.market_ticker_.ClearToEmpty();
  _impl_.oracle_base_.ClearToEmpty();
  _impl_.oracle_quote_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.redemption_notice_period_duration_ != nullptr);
    _impl_.redemption_notice_period_duration_->Clear();
  }
  ::memset(&_impl_.expiry_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.oracle_type_) -
      reinterpret_cast<char*>(&_impl_.expiry_)) + sizeof(_impl_.oracle_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsuranceFund::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string deposit_denom = 1 [json_name = "depositDenom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deposit_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.InsuranceFund.deposit_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string insurance_pool_token_denom = 2 [json_name = "insurancePoolTokenDenom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_insurance_pool_token_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.InsuranceFund.insurance_pool_token_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration redemption_notice_period_duration = 3 [json_name = "redemptionNoticePeriodDuration", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"redemption_notice_period_duration\"", (.gogoproto.stdduration) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_redemption_notice_period_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.InsuranceFund.balance"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string total_share = 5 [json_name = "totalShare", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_total_share();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.InsuranceFund.total_share"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 6 [json_name = "marketId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.InsuranceFund.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_ticker = 7 [json_name = "marketTicker"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_market_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.InsuranceFund.market_ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_base = 8 [json_name = "oracleBase"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_oracle_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.InsuranceFund.oracle_base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_quote = 9 [json_name = "oracleQuote"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_oracle_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.InsuranceFund.oracle_quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective.oracle.v1beta1.OracleType oracle_type = 10 [json_name = "oracleType"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_oracle_type(static_cast<::injective::oracle::v1beta1::OracleType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 expiry = 11 [json_name = "expiry"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InsuranceFund::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.insurance.v1beta1.InsuranceFund)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string deposit_denom = 1 [json_name = "depositDenom"];
  if (!this->_internal_deposit_denom().empty()) {
    const std::string& _s = this->_internal_deposit_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.InsuranceFund.deposit_denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string insurance_pool_token_denom = 2 [json_name = "insurancePoolTokenDenom"];
  if (!this->_internal_insurance_pool_token_denom().empty()) {
    const std::string& _s = this->_internal_insurance_pool_token_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.InsuranceFund.insurance_pool_token_denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration redemption_notice_period_duration = 3 [json_name = "redemptionNoticePeriodDuration", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"redemption_notice_period_duration\"", (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::redemption_notice_period_duration(this),
        _Internal::redemption_notice_period_duration(this).GetCachedSize(), target, stream);
  }

  // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_balance().empty()) {
    const std::string& _s = this->_internal_balance();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.InsuranceFund.balance");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string total_share = 5 [json_name = "totalShare", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_total_share().empty()) {
    const std::string& _s = this->_internal_total_share();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.InsuranceFund.total_share");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string market_id = 6 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.InsuranceFund.market_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string market_ticker = 7 [json_name = "marketTicker"];
  if (!this->_internal_market_ticker().empty()) {
    const std::string& _s = this->_internal_market_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.InsuranceFund.market_ticker");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string oracle_base = 8 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    const std::string& _s = this->_internal_oracle_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.InsuranceFund.oracle_base");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string oracle_quote = 9 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    const std::string& _s = this->_internal_oracle_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.InsuranceFund.oracle_quote");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 10 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_oracle_type(), target);
  }

  // int64 expiry = 11 [json_name = "expiry"];
  if (this->_internal_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        11, this->_internal_expiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.insurance.v1beta1.InsuranceFund)
  return target;
}

::size_t InsuranceFund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.insurance.v1beta1.InsuranceFund)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deposit_denom = 1 [json_name = "depositDenom"];
  if (!this->_internal_deposit_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deposit_denom());
  }

  // string insurance_pool_token_denom = 2 [json_name = "insurancePoolTokenDenom"];
  if (!this->_internal_insurance_pool_token_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_insurance_pool_token_denom());
  }

  // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_balance().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_balance());
  }

  // string total_share = 5 [json_name = "totalShare", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];
  if (!this->_internal_total_share().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_total_share());
  }

  // string market_id = 6 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string market_ticker = 7 [json_name = "marketTicker"];
  if (!this->_internal_market_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_ticker());
  }

  // string oracle_base = 8 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_base());
  }

  // string oracle_quote = 9 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_quote());
  }

  // .google.protobuf.Duration redemption_notice_period_duration = 3 [json_name = "redemptionNoticePeriodDuration", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"redemption_notice_period_duration\"", (.gogoproto.stdduration) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redemption_notice_period_duration_);
  }

  // int64 expiry = 11 [json_name = "expiry"];
  if (this->_internal_expiry() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_expiry());
  }

  // .injective.oracle.v1beta1.OracleType oracle_type = 10 [json_name = "oracleType"];
  if (this->_internal_oracle_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_oracle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsuranceFund::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsuranceFund::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsuranceFund::GetClassData() const { return &_class_data_; }


void InsuranceFund::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsuranceFund*>(&to_msg);
  auto& from = static_cast<const InsuranceFund&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.insurance.v1beta1.InsuranceFund)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deposit_denom().empty()) {
    _this->_internal_set_deposit_denom(from._internal_deposit_denom());
  }
  if (!from._internal_insurance_pool_token_denom().empty()) {
    _this->_internal_set_insurance_pool_token_denom(from._internal_insurance_pool_token_denom());
  }
  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (!from._internal_total_share().empty()) {
    _this->_internal_set_total_share(from._internal_total_share());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_market_ticker().empty()) {
    _this->_internal_set_market_ticker(from._internal_market_ticker());
  }
  if (!from._internal_oracle_base().empty()) {
    _this->_internal_set_oracle_base(from._internal_oracle_base());
  }
  if (!from._internal_oracle_quote().empty()) {
    _this->_internal_set_oracle_quote(from._internal_oracle_quote());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_redemption_notice_period_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_redemption_notice_period_duration());
  }
  if (from._internal_expiry() != 0) {
    _this->_internal_set_expiry(from._internal_expiry());
  }
  if (from._internal_oracle_type() != 0) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsuranceFund::CopyFrom(const InsuranceFund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.insurance.v1beta1.InsuranceFund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsuranceFund::IsInitialized() const {
  return true;
}

void InsuranceFund::InternalSwap(InsuranceFund* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deposit_denom_, lhs_arena,
                                       &other->_impl_.deposit_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.insurance_pool_token_denom_, lhs_arena,
                                       &other->_impl_.insurance_pool_token_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.balance_, lhs_arena,
                                       &other->_impl_.balance_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.total_share_, lhs_arena,
                                       &other->_impl_.total_share_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_ticker_, lhs_arena,
                                       &other->_impl_.market_ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_base_, lhs_arena,
                                       &other->_impl_.oracle_base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_quote_, lhs_arena,
                                       &other->_impl_.oracle_quote_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsuranceFund, _impl_.oracle_type_)
      + sizeof(InsuranceFund::_impl_.oracle_type_)
      - PROTOBUF_FIELD_OFFSET(InsuranceFund, _impl_.redemption_notice_period_duration_)>(
          reinterpret_cast<char*>(&_impl_.redemption_notice_period_duration_),
          reinterpret_cast<char*>(&other->_impl_.redemption_notice_period_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsuranceFund::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_getter, &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once,
      file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto[1]);
}
// ===================================================================

class RedemptionSchedule::_Internal {
 public:
  using HasBits = decltype(std::declval<RedemptionSchedule>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedemptionSchedule, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& claimable_redemption_time(const RedemptionSchedule* msg);
  static void set_has_claimable_redemption_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::base::v1beta1::Coin& redemption_amount(const RedemptionSchedule* msg);
  static void set_has_redemption_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RedemptionSchedule::_Internal::claimable_redemption_time(const RedemptionSchedule* msg) {
  return *msg->_impl_.claimable_redemption_time_;
}
const ::cosmos::base::v1beta1::Coin&
RedemptionSchedule::_Internal::redemption_amount(const RedemptionSchedule* msg) {
  return *msg->_impl_.redemption_amount_;
}
void RedemptionSchedule::clear_claimable_redemption_time() {
  if (_impl_.claimable_redemption_time_ != nullptr) _impl_.claimable_redemption_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RedemptionSchedule::clear_redemption_amount() {
  if (_impl_.redemption_amount_ != nullptr) _impl_.redemption_amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RedemptionSchedule::RedemptionSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.insurance.v1beta1.RedemptionSchedule)
}
RedemptionSchedule::RedemptionSchedule(const RedemptionSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedemptionSchedule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.marketid_) {}

    , decltype(_impl_.redeemer_) {}

    , decltype(_impl_.claimable_redemption_time_){nullptr}
    , decltype(_impl_.redemption_amount_){nullptr}
    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.marketid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marketid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_marketid().empty()) {
    _this->_impl_.marketid_.Set(from._internal_marketid(), _this->GetArenaForAllocation());
  }
  _impl_.redeemer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redeemer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redeemer().empty()) {
    _this->_impl_.redeemer_.Set(from._internal_redeemer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.claimable_redemption_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.claimable_redemption_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.redemption_amount_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.redemption_amount_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:injective.insurance.v1beta1.RedemptionSchedule)
}

inline void RedemptionSchedule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.marketid_) {}

    , decltype(_impl_.redeemer_) {}

    , decltype(_impl_.claimable_redemption_time_){nullptr}
    , decltype(_impl_.redemption_amount_){nullptr}
    , decltype(_impl_.id_) { ::uint64_t{0u} }

  };
  _impl_.marketid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marketid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redeemer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redeemer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RedemptionSchedule::~RedemptionSchedule() {
  // @@protoc_insertion_point(destructor:injective.insurance.v1beta1.RedemptionSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedemptionSchedule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.marketid_.Destroy();
  _impl_.redeemer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.claimable_redemption_time_;
  if (this != internal_default_instance()) delete _impl_.redemption_amount_;
}

void RedemptionSchedule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedemptionSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.insurance.v1beta1.RedemptionSchedule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.marketid_.ClearToEmpty();
  _impl_.redeemer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.claimable_redemption_time_ != nullptr);
      _impl_.claimable_redemption_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.redemption_amount_ != nullptr);
      _impl_.redemption_amount_->Clear();
    }
  }
  _impl_.id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedemptionSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string marketId = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.RedemptionSchedule.marketId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string redeemer = 3 [json_name = "redeemer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_redeemer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.RedemptionSchedule.redeemer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp claimable_redemption_time = 4 [json_name = "claimableRedemptionTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"claimable_redemption_time\"", (.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_claimable_redemption_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin redemption_amount = 5 [json_name = "redemptionAmount", (.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_redemption_amount(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedemptionSchedule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.insurance.v1beta1.RedemptionSchedule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // string marketId = 2 [json_name = "marketId"];
  if (!this->_internal_marketid().empty()) {
    const std::string& _s = this->_internal_marketid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.RedemptionSchedule.marketId");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string redeemer = 3 [json_name = "redeemer"];
  if (!this->_internal_redeemer().empty()) {
    const std::string& _s = this->_internal_redeemer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.RedemptionSchedule.redeemer");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp claimable_redemption_time = 4 [json_name = "claimableRedemptionTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"claimable_redemption_time\"", (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::claimable_redemption_time(this),
        _Internal::claimable_redemption_time(this).GetCachedSize(), target, stream);
  }

  // .cosmos.base.v1beta1.Coin redemption_amount = 5 [json_name = "redemptionAmount", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::redemption_amount(this),
        _Internal::redemption_amount(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.insurance.v1beta1.RedemptionSchedule)
  return target;
}

::size_t RedemptionSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.insurance.v1beta1.RedemptionSchedule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string marketId = 2 [json_name = "marketId"];
  if (!this->_internal_marketid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_marketid());
  }

  // string redeemer = 3 [json_name = "redeemer"];
  if (!this->_internal_redeemer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_redeemer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp claimable_redemption_time = 4 [json_name = "claimableRedemptionTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:\"claimable_redemption_time\"", (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.claimable_redemption_time_);
    }

    // .cosmos.base.v1beta1.Coin redemption_amount = 5 [json_name = "redemptionAmount", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.redemption_amount_);
    }

  }
  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedemptionSchedule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedemptionSchedule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedemptionSchedule::GetClassData() const { return &_class_data_; }


void RedemptionSchedule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedemptionSchedule*>(&to_msg);
  auto& from = static_cast<const RedemptionSchedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.insurance.v1beta1.RedemptionSchedule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_marketid().empty()) {
    _this->_internal_set_marketid(from._internal_marketid());
  }
  if (!from._internal_redeemer().empty()) {
    _this->_internal_set_redeemer(from._internal_redeemer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_claimable_redemption_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_claimable_redemption_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_redemption_amount()->::cosmos::base::v1beta1::Coin::MergeFrom(
          from._internal_redemption_amount());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedemptionSchedule::CopyFrom(const RedemptionSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.insurance.v1beta1.RedemptionSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedemptionSchedule::IsInitialized() const {
  return true;
}

void RedemptionSchedule::InternalSwap(RedemptionSchedule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marketid_, lhs_arena,
                                       &other->_impl_.marketid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redeemer_, lhs_arena,
                                       &other->_impl_.redeemer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedemptionSchedule, _impl_.id_)
      + sizeof(RedemptionSchedule::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(RedemptionSchedule, _impl_.claimable_redemption_time_)>(
          reinterpret_cast<char*>(&_impl_.claimable_redemption_time_),
          reinterpret_cast<char*>(&other->_impl_.claimable_redemption_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedemptionSchedule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_getter, &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once,
      file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto[2]);
}
// ===================================================================

class EventInsuranceFundUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<EventInsuranceFundUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventInsuranceFundUpdate, _impl_._has_bits_);
  static const ::injective::insurance::v1beta1::InsuranceFund& fund(const EventInsuranceFundUpdate* msg);
  static void set_has_fund(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::insurance::v1beta1::InsuranceFund&
EventInsuranceFundUpdate::_Internal::fund(const EventInsuranceFundUpdate* msg) {
  return *msg->_impl_.fund_;
}
EventInsuranceFundUpdate::EventInsuranceFundUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.insurance.v1beta1.EventInsuranceFundUpdate)
}
EventInsuranceFundUpdate::EventInsuranceFundUpdate(const EventInsuranceFundUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventInsuranceFundUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fund_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fund_ = new ::injective::insurance::v1beta1::InsuranceFund(*from._impl_.fund_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.insurance.v1beta1.EventInsuranceFundUpdate)
}

inline void EventInsuranceFundUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fund_){nullptr}
  };
}

EventInsuranceFundUpdate::~EventInsuranceFundUpdate() {
  // @@protoc_insertion_point(destructor:injective.insurance.v1beta1.EventInsuranceFundUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventInsuranceFundUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fund_;
}

void EventInsuranceFundUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventInsuranceFundUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.insurance.v1beta1.EventInsuranceFundUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fund_ != nullptr);
    _impl_.fund_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventInsuranceFundUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.insurance.v1beta1.InsuranceFund fund = 1 [json_name = "fund"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fund(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventInsuranceFundUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.insurance.v1beta1.EventInsuranceFundUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.insurance.v1beta1.InsuranceFund fund = 1 [json_name = "fund"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fund(this),
        _Internal::fund(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.insurance.v1beta1.EventInsuranceFundUpdate)
  return target;
}

::size_t EventInsuranceFundUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.insurance.v1beta1.EventInsuranceFundUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.insurance.v1beta1.InsuranceFund fund = 1 [json_name = "fund"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fund_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventInsuranceFundUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventInsuranceFundUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventInsuranceFundUpdate::GetClassData() const { return &_class_data_; }


void EventInsuranceFundUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventInsuranceFundUpdate*>(&to_msg);
  auto& from = static_cast<const EventInsuranceFundUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.insurance.v1beta1.EventInsuranceFundUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fund()->::injective::insurance::v1beta1::InsuranceFund::MergeFrom(
        from._internal_fund());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventInsuranceFundUpdate::CopyFrom(const EventInsuranceFundUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.insurance.v1beta1.EventInsuranceFundUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventInsuranceFundUpdate::IsInitialized() const {
  return true;
}

void EventInsuranceFundUpdate::InternalSwap(EventInsuranceFundUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.fund_, other->_impl_.fund_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventInsuranceFundUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_getter, &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once,
      file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto[3]);
}
// ===================================================================

class EventRequestRedemption::_Internal {
 public:
  using HasBits = decltype(std::declval<EventRequestRedemption>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventRequestRedemption, _impl_._has_bits_);
  static const ::injective::insurance::v1beta1::RedemptionSchedule& schedule(const EventRequestRedemption* msg);
  static void set_has_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective::insurance::v1beta1::RedemptionSchedule&
EventRequestRedemption::_Internal::schedule(const EventRequestRedemption* msg) {
  return *msg->_impl_.schedule_;
}
EventRequestRedemption::EventRequestRedemption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.insurance.v1beta1.EventRequestRedemption)
}
EventRequestRedemption::EventRequestRedemption(const EventRequestRedemption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventRequestRedemption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schedule_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.schedule_ = new ::injective::insurance::v1beta1::RedemptionSchedule(*from._impl_.schedule_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.insurance.v1beta1.EventRequestRedemption)
}

inline void EventRequestRedemption::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schedule_){nullptr}
  };
}

EventRequestRedemption::~EventRequestRedemption() {
  // @@protoc_insertion_point(destructor:injective.insurance.v1beta1.EventRequestRedemption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventRequestRedemption::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.schedule_;
}

void EventRequestRedemption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventRequestRedemption::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.insurance.v1beta1.EventRequestRedemption)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.schedule_ != nullptr);
    _impl_.schedule_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventRequestRedemption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.insurance.v1beta1.RedemptionSchedule schedule = 1 [json_name = "schedule"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventRequestRedemption::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.insurance.v1beta1.EventRequestRedemption)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.insurance.v1beta1.RedemptionSchedule schedule = 1 [json_name = "schedule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::schedule(this),
        _Internal::schedule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.insurance.v1beta1.EventRequestRedemption)
  return target;
}

::size_t EventRequestRedemption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.insurance.v1beta1.EventRequestRedemption)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective.insurance.v1beta1.RedemptionSchedule schedule = 1 [json_name = "schedule"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.schedule_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventRequestRedemption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventRequestRedemption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventRequestRedemption::GetClassData() const { return &_class_data_; }


void EventRequestRedemption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventRequestRedemption*>(&to_msg);
  auto& from = static_cast<const EventRequestRedemption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.insurance.v1beta1.EventRequestRedemption)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_schedule()->::injective::insurance::v1beta1::RedemptionSchedule::MergeFrom(
        from._internal_schedule());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventRequestRedemption::CopyFrom(const EventRequestRedemption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.insurance.v1beta1.EventRequestRedemption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventRequestRedemption::IsInitialized() const {
  return true;
}

void EventRequestRedemption::InternalSwap(EventRequestRedemption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.schedule_, other->_impl_.schedule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventRequestRedemption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_getter, &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once,
      file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto[4]);
}
// ===================================================================

class EventWithdrawRedemption::_Internal {
 public:
  using HasBits = decltype(std::declval<EventWithdrawRedemption>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventWithdrawRedemption, _impl_._has_bits_);
  static const ::injective::insurance::v1beta1::RedemptionSchedule& schedule(const EventWithdrawRedemption* msg);
  static void set_has_schedule(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::base::v1beta1::Coin& redeem_coin(const EventWithdrawRedemption* msg);
  static void set_has_redeem_coin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective::insurance::v1beta1::RedemptionSchedule&
EventWithdrawRedemption::_Internal::schedule(const EventWithdrawRedemption* msg) {
  return *msg->_impl_.schedule_;
}
const ::cosmos::base::v1beta1::Coin&
EventWithdrawRedemption::_Internal::redeem_coin(const EventWithdrawRedemption* msg) {
  return *msg->_impl_.redeem_coin_;
}
void EventWithdrawRedemption::clear_redeem_coin() {
  if (_impl_.redeem_coin_ != nullptr) _impl_.redeem_coin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
EventWithdrawRedemption::EventWithdrawRedemption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.insurance.v1beta1.EventWithdrawRedemption)
}
EventWithdrawRedemption::EventWithdrawRedemption(const EventWithdrawRedemption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventWithdrawRedemption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schedule_){nullptr}
    , decltype(_impl_.redeem_coin_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.schedule_ = new ::injective::insurance::v1beta1::RedemptionSchedule(*from._impl_.schedule_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.redeem_coin_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.redeem_coin_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.insurance.v1beta1.EventWithdrawRedemption)
}

inline void EventWithdrawRedemption::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schedule_){nullptr}
    , decltype(_impl_.redeem_coin_){nullptr}
  };
}

EventWithdrawRedemption::~EventWithdrawRedemption() {
  // @@protoc_insertion_point(destructor:injective.insurance.v1beta1.EventWithdrawRedemption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventWithdrawRedemption::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.schedule_;
  if (this != internal_default_instance()) delete _impl_.redeem_coin_;
}

void EventWithdrawRedemption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventWithdrawRedemption::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.insurance.v1beta1.EventWithdrawRedemption)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.schedule_ != nullptr);
      _impl_.schedule_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.redeem_coin_ != nullptr);
      _impl_.redeem_coin_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventWithdrawRedemption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective.insurance.v1beta1.RedemptionSchedule schedule = 1 [json_name = "schedule"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_schedule(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin redeem_coin = 2 [json_name = "redeemCoin", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_redeem_coin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventWithdrawRedemption::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.insurance.v1beta1.EventWithdrawRedemption)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective.insurance.v1beta1.RedemptionSchedule schedule = 1 [json_name = "schedule"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::schedule(this),
        _Internal::schedule(this).GetCachedSize(), target, stream);
  }

  // .cosmos.base.v1beta1.Coin redeem_coin = 2 [json_name = "redeemCoin", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::redeem_coin(this),
        _Internal::redeem_coin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.insurance.v1beta1.EventWithdrawRedemption)
  return target;
}

::size_t EventWithdrawRedemption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.insurance.v1beta1.EventWithdrawRedemption)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective.insurance.v1beta1.RedemptionSchedule schedule = 1 [json_name = "schedule"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.schedule_);
    }

    // .cosmos.base.v1beta1.Coin redeem_coin = 2 [json_name = "redeemCoin", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.redeem_coin_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventWithdrawRedemption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventWithdrawRedemption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventWithdrawRedemption::GetClassData() const { return &_class_data_; }


void EventWithdrawRedemption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventWithdrawRedemption*>(&to_msg);
  auto& from = static_cast<const EventWithdrawRedemption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.insurance.v1beta1.EventWithdrawRedemption)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_schedule()->::injective::insurance::v1beta1::RedemptionSchedule::MergeFrom(
          from._internal_schedule());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_redeem_coin()->::cosmos::base::v1beta1::Coin::MergeFrom(
          from._internal_redeem_coin());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventWithdrawRedemption::CopyFrom(const EventWithdrawRedemption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.insurance.v1beta1.EventWithdrawRedemption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventWithdrawRedemption::IsInitialized() const {
  return true;
}

void EventWithdrawRedemption::InternalSwap(EventWithdrawRedemption* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventWithdrawRedemption, _impl_.redeem_coin_)
      + sizeof(EventWithdrawRedemption::_impl_.redeem_coin_)
      - PROTOBUF_FIELD_OFFSET(EventWithdrawRedemption, _impl_.schedule_)>(
          reinterpret_cast<char*>(&_impl_.schedule_),
          reinterpret_cast<char*>(&other->_impl_.schedule_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventWithdrawRedemption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_getter, &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once,
      file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto[5]);
}
// ===================================================================

class EventUnderwrite::_Internal {
 public:
  using HasBits = decltype(std::declval<EventUnderwrite>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EventUnderwrite, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& deposit(const EventUnderwrite* msg);
  static void set_has_deposit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::base::v1beta1::Coin& shares(const EventUnderwrite* msg);
  static void set_has_shares(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::base::v1beta1::Coin&
EventUnderwrite::_Internal::deposit(const EventUnderwrite* msg) {
  return *msg->_impl_.deposit_;
}
const ::cosmos::base::v1beta1::Coin&
EventUnderwrite::_Internal::shares(const EventUnderwrite* msg) {
  return *msg->_impl_.shares_;
}
void EventUnderwrite::clear_deposit() {
  if (_impl_.deposit_ != nullptr) _impl_.deposit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EventUnderwrite::clear_shares() {
  if (_impl_.shares_ != nullptr) _impl_.shares_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
EventUnderwrite::EventUnderwrite(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective.insurance.v1beta1.EventUnderwrite)
}
EventUnderwrite::EventUnderwrite(const EventUnderwrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventUnderwrite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.underwriter_) {}

    , decltype(_impl_.marketid_) {}

    , decltype(_impl_.deposit_){nullptr}
    , decltype(_impl_.shares_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.underwriter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.underwriter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underwriter().empty()) {
    _this->_impl_.underwriter_.Set(from._internal_underwriter(), _this->GetArenaForAllocation());
  }
  _impl_.marketid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marketid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_marketid().empty()) {
    _this->_impl_.marketid_.Set(from._internal_marketid(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deposit_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.deposit_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.shares_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.shares_);
  }
  // @@protoc_insertion_point(copy_constructor:injective.insurance.v1beta1.EventUnderwrite)
}

inline void EventUnderwrite::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.underwriter_) {}

    , decltype(_impl_.marketid_) {}

    , decltype(_impl_.deposit_){nullptr}
    , decltype(_impl_.shares_){nullptr}
  };
  _impl_.underwriter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.underwriter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marketid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marketid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventUnderwrite::~EventUnderwrite() {
  // @@protoc_insertion_point(destructor:injective.insurance.v1beta1.EventUnderwrite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventUnderwrite::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.underwriter_.Destroy();
  _impl_.marketid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deposit_;
  if (this != internal_default_instance()) delete _impl_.shares_;
}

void EventUnderwrite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventUnderwrite::Clear() {
// @@protoc_insertion_point(message_clear_start:injective.insurance.v1beta1.EventUnderwrite)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.underwriter_.ClearToEmpty();
  _impl_.marketid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.deposit_ != nullptr);
      _impl_.deposit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.shares_ != nullptr);
      _impl_.shares_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventUnderwrite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string underwriter = 1 [json_name = "underwriter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_underwriter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.EventUnderwrite.underwriter"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string marketId = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_marketid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective.insurance.v1beta1.EventUnderwrite.marketId"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin deposit = 3 [json_name = "deposit", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin shares = 4 [json_name = "shares", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shares(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventUnderwrite::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective.insurance.v1beta1.EventUnderwrite)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string underwriter = 1 [json_name = "underwriter"];
  if (!this->_internal_underwriter().empty()) {
    const std::string& _s = this->_internal_underwriter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.EventUnderwrite.underwriter");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string marketId = 2 [json_name = "marketId"];
  if (!this->_internal_marketid().empty()) {
    const std::string& _s = this->_internal_marketid();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective.insurance.v1beta1.EventUnderwrite.marketId");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin deposit = 3 [json_name = "deposit", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::deposit(this),
        _Internal::deposit(this).GetCachedSize(), target, stream);
  }

  // .cosmos.base.v1beta1.Coin shares = 4 [json_name = "shares", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::shares(this),
        _Internal::shares(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective.insurance.v1beta1.EventUnderwrite)
  return target;
}

::size_t EventUnderwrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective.insurance.v1beta1.EventUnderwrite)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string underwriter = 1 [json_name = "underwriter"];
  if (!this->_internal_underwriter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_underwriter());
  }

  // string marketId = 2 [json_name = "marketId"];
  if (!this->_internal_marketid().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_marketid());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.base.v1beta1.Coin deposit = 3 [json_name = "deposit", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deposit_);
    }

    // .cosmos.base.v1beta1.Coin shares = 4 [json_name = "shares", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shares_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventUnderwrite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventUnderwrite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventUnderwrite::GetClassData() const { return &_class_data_; }


void EventUnderwrite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventUnderwrite*>(&to_msg);
  auto& from = static_cast<const EventUnderwrite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective.insurance.v1beta1.EventUnderwrite)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_underwriter().empty()) {
    _this->_internal_set_underwriter(from._internal_underwriter());
  }
  if (!from._internal_marketid().empty()) {
    _this->_internal_set_marketid(from._internal_marketid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_deposit()->::cosmos::base::v1beta1::Coin::MergeFrom(
          from._internal_deposit());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shares()->::cosmos::base::v1beta1::Coin::MergeFrom(
          from._internal_shares());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventUnderwrite::CopyFrom(const EventUnderwrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective.insurance.v1beta1.EventUnderwrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUnderwrite::IsInitialized() const {
  return true;
}

void EventUnderwrite::InternalSwap(EventUnderwrite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.underwriter_, lhs_arena,
                                       &other->_impl_.underwriter_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marketid_, lhs_arena,
                                       &other->_impl_.marketid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventUnderwrite, _impl_.shares_)
      + sizeof(EventUnderwrite::_impl_.shares_)
      - PROTOBUF_FIELD_OFFSET(EventUnderwrite, _impl_.deposit_)>(
          reinterpret_cast<char*>(&_impl_.deposit_),
          reinterpret_cast<char*>(&other->_impl_.deposit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventUnderwrite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_getter, &descriptor_table_injective_2finsurance_2fv1beta1_2finsurance_2eproto_once,
      file_level_metadata_injective_2finsurance_2fv1beta1_2finsurance_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace insurance
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective::insurance::v1beta1::Params*
Arena::CreateMaybeMessage< ::injective::insurance::v1beta1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::insurance::v1beta1::Params >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::insurance::v1beta1::InsuranceFund*
Arena::CreateMaybeMessage< ::injective::insurance::v1beta1::InsuranceFund >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::insurance::v1beta1::InsuranceFund >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::insurance::v1beta1::RedemptionSchedule*
Arena::CreateMaybeMessage< ::injective::insurance::v1beta1::RedemptionSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::insurance::v1beta1::RedemptionSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::insurance::v1beta1::EventInsuranceFundUpdate*
Arena::CreateMaybeMessage< ::injective::insurance::v1beta1::EventInsuranceFundUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::insurance::v1beta1::EventInsuranceFundUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::insurance::v1beta1::EventRequestRedemption*
Arena::CreateMaybeMessage< ::injective::insurance::v1beta1::EventRequestRedemption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::insurance::v1beta1::EventRequestRedemption >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::insurance::v1beta1::EventWithdrawRedemption*
Arena::CreateMaybeMessage< ::injective::insurance::v1beta1::EventWithdrawRedemption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::insurance::v1beta1::EventWithdrawRedemption >(arena);
}
template<> PROTOBUF_NOINLINE ::injective::insurance::v1beta1::EventUnderwrite*
Arena::CreateMaybeMessage< ::injective::insurance::v1beta1::EventUnderwrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective::insurance::v1beta1::EventUnderwrite >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

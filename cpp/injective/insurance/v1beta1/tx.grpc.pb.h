// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/insurance/v1beta1/tx.proto
#ifndef GRPC_injective_2finsurance_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_injective_2finsurance_2fv1beta1_2ftx_2eproto__INCLUDED

#include "injective/insurance/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace insurance {
namespace v1beta1 {

// Msg defines the insurance Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.insurance.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CreateInsuranceFund defines a method for creating an insurance fund
    virtual ::grpc::Status CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>> AsyncCreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>>(AsyncCreateInsuranceFundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>> PrepareAsyncCreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>>(PrepareAsyncCreateInsuranceFundRaw(context, request, cq));
    }
    // Underwrite defines a method for depositing tokens to underwrite an
    // insurance fund
    virtual ::grpc::Status Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUnderwriteResponse>> AsyncUnderwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUnderwriteResponse>>(AsyncUnderwriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUnderwriteResponse>> PrepareAsyncUnderwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUnderwriteResponse>>(PrepareAsyncUnderwriteRaw(context, request, cq));
    }
    // RequestRedemption defines a method for requesting a redemption of the
    // sender's insurance fund tokens
    virtual ::grpc::Status RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>> AsyncRequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>>(AsyncRequestRedemptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>> PrepareAsyncRequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>>(PrepareAsyncRequestRedemptionRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // CreateInsuranceFund defines a method for creating an insurance fund
      virtual void CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Underwrite defines a method for depositing tokens to underwrite an
      // insurance fund
      virtual void Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RequestRedemption defines a method for requesting a redemption of the
      // sender's insurance fund tokens
      virtual void RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* AsyncCreateInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* PrepareAsyncCreateInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUnderwriteResponse>* AsyncUnderwriteRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUnderwriteResponse>* PrepareAsyncUnderwriteRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* AsyncRequestRedemptionRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* PrepareAsyncRequestRedemptionRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>> AsyncCreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>>(AsyncCreateInsuranceFundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>> PrepareAsyncCreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>>(PrepareAsyncCreateInsuranceFundRaw(context, request, cq));
    }
    ::grpc::Status Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUnderwriteResponse>> AsyncUnderwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUnderwriteResponse>>(AsyncUnderwriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUnderwriteResponse>> PrepareAsyncUnderwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUnderwriteResponse>>(PrepareAsyncUnderwriteRaw(context, request, cq));
    }
    ::grpc::Status RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>> AsyncRequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>>(AsyncRequestRedemptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>> PrepareAsyncRequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>>(PrepareAsyncRequestRedemptionRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response, std::function<void(::grpc::Status)>) override;
      void Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response, std::function<void(::grpc::Status)>) override;
      void RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* AsyncCreateInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* PrepareAsyncCreateInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUnderwriteResponse>* AsyncUnderwriteRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUnderwriteResponse>* PrepareAsyncUnderwriteRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* AsyncRequestRedemptionRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* PrepareAsyncRequestRedemptionRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInsuranceFund_;
    const ::grpc::internal::RpcMethod rpcmethod_Underwrite_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestRedemption_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CreateInsuranceFund defines a method for creating an insurance fund
    virtual ::grpc::Status CreateInsuranceFund(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response);
    // Underwrite defines a method for depositing tokens to underwrite an
    // insurance fund
    virtual ::grpc::Status Underwrite(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response);
    // RequestRedemption defines a method for requesting a redemption of the
    // sender's insurance fund tokens
    virtual ::grpc::Status RequestRedemption(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response);
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateInsuranceFund() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateInsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* /*request*/, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInsuranceFund(::grpc::ServerContext* context, ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Underwrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Underwrite() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Underwrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Underwrite(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUnderwrite* /*request*/, ::injective::insurance::v1beta1::MsgUnderwriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnderwrite(::grpc::ServerContext* context, ::injective::insurance::v1beta1::MsgUnderwrite* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::MsgUnderwriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestRedemption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestRedemption() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RequestRedemption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRedemption(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgRequestRedemption* /*request*/, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestRedemption(::grpc::ServerContext* context, ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUpdateParams* /*request*/, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::injective::insurance::v1beta1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateInsuranceFund<WithAsyncMethod_Underwrite<WithAsyncMethod_RequestRedemption<WithAsyncMethod_UpdateParams<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateInsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateInsuranceFund() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response) { return this->CreateInsuranceFund(context, request, response); }));}
    void SetMessageAllocatorFor_CreateInsuranceFund(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateInsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* /*request*/, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateInsuranceFund(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* /*request*/, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Underwrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Underwrite() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::MsgUnderwrite, ::injective::insurance::v1beta1::MsgUnderwriteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response) { return this->Underwrite(context, request, response); }));}
    void SetMessageAllocatorFor_Underwrite(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::MsgUnderwrite, ::injective::insurance::v1beta1::MsgUnderwriteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::MsgUnderwrite, ::injective::insurance::v1beta1::MsgUnderwriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Underwrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Underwrite(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUnderwrite* /*request*/, ::injective::insurance::v1beta1::MsgUnderwriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Underwrite(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUnderwrite* /*request*/, ::injective::insurance::v1beta1::MsgUnderwriteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestRedemption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestRedemption() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::MsgRequestRedemption, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response) { return this->RequestRedemption(context, request, response); }));}
    void SetMessageAllocatorFor_RequestRedemption(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::MsgRequestRedemption, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::MsgRequestRedemption, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestRedemption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRedemption(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgRequestRedemption* /*request*/, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestRedemption(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgRequestRedemption* /*request*/, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::MsgUpdateParams, ::injective::insurance::v1beta1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::MsgUpdateParams, ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::MsgUpdateParams, ::injective::insurance::v1beta1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUpdateParams* /*request*/, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUpdateParams* /*request*/, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateInsuranceFund<WithCallbackMethod_Underwrite<WithCallbackMethod_RequestRedemption<WithCallbackMethod_UpdateParams<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateInsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateInsuranceFund() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateInsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* /*request*/, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Underwrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Underwrite() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Underwrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Underwrite(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUnderwrite* /*request*/, ::injective::insurance::v1beta1::MsgUnderwriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestRedemption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestRedemption() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RequestRedemption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRedemption(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgRequestRedemption* /*request*/, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUpdateParams* /*request*/, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateInsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateInsuranceFund() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateInsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* /*request*/, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInsuranceFund(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Underwrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Underwrite() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Underwrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Underwrite(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUnderwrite* /*request*/, ::injective::insurance::v1beta1::MsgUnderwriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnderwrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestRedemption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestRedemption() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RequestRedemption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRedemption(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgRequestRedemption* /*request*/, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestRedemption(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUpdateParams* /*request*/, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateInsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateInsuranceFund() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateInsuranceFund(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateInsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* /*request*/, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateInsuranceFund(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Underwrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Underwrite() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Underwrite(context, request, response); }));
    }
    ~WithRawCallbackMethod_Underwrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Underwrite(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUnderwrite* /*request*/, ::injective::insurance::v1beta1::MsgUnderwriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Underwrite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestRedemption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestRedemption() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestRedemption(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestRedemption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestRedemption(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgRequestRedemption* /*request*/, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestRedemption(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUpdateParams* /*request*/, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateInsuranceFund() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* streamer) {
                       return this->StreamedCreateInsuranceFund(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateInsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* /*request*/, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInsuranceFund(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::MsgCreateInsuranceFund,::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Underwrite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Underwrite() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::MsgUnderwrite, ::injective::insurance::v1beta1::MsgUnderwriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::MsgUnderwrite, ::injective::insurance::v1beta1::MsgUnderwriteResponse>* streamer) {
                       return this->StreamedUnderwrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Underwrite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Underwrite(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUnderwrite* /*request*/, ::injective::insurance::v1beta1::MsgUnderwriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnderwrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::MsgUnderwrite,::injective::insurance::v1beta1::MsgUnderwriteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestRedemption : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestRedemption() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::MsgRequestRedemption, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::MsgRequestRedemption, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* streamer) {
                       return this->StreamedRequestRedemption(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestRedemption() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestRedemption(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgRequestRedemption* /*request*/, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestRedemption(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::MsgRequestRedemption,::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::MsgUpdateParams, ::injective::insurance::v1beta1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::MsgUpdateParams, ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::MsgUpdateParams* /*request*/, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::MsgUpdateParams,::injective::insurance::v1beta1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateInsuranceFund<WithStreamedUnaryMethod_Underwrite<WithStreamedUnaryMethod_RequestRedemption<WithStreamedUnaryMethod_UpdateParams<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateInsuranceFund<WithStreamedUnaryMethod_Underwrite<WithStreamedUnaryMethod_RequestRedemption<WithStreamedUnaryMethod_UpdateParams<Service > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace insurance
}  // namespace injective


#endif  // GRPC_injective_2finsurance_2fv1beta1_2ftx_2eproto__INCLUDED

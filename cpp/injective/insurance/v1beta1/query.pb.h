// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/insurance/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2finsurance_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2finsurance_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "injective/insurance/v1beta1/insurance.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "injective/insurance/v1beta1/genesis.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2finsurance_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2finsurance_2fv1beta1_2fquery_2eproto;
namespace injective {
namespace insurance {
namespace v1beta1 {
class QueryEstimatedRedemptionsRequest;
struct QueryEstimatedRedemptionsRequestDefaultTypeInternal;
extern QueryEstimatedRedemptionsRequestDefaultTypeInternal _QueryEstimatedRedemptionsRequest_default_instance_;
class QueryEstimatedRedemptionsResponse;
struct QueryEstimatedRedemptionsResponseDefaultTypeInternal;
extern QueryEstimatedRedemptionsResponseDefaultTypeInternal _QueryEstimatedRedemptionsResponse_default_instance_;
class QueryInsuranceFundRequest;
struct QueryInsuranceFundRequestDefaultTypeInternal;
extern QueryInsuranceFundRequestDefaultTypeInternal _QueryInsuranceFundRequest_default_instance_;
class QueryInsuranceFundResponse;
struct QueryInsuranceFundResponseDefaultTypeInternal;
extern QueryInsuranceFundResponseDefaultTypeInternal _QueryInsuranceFundResponse_default_instance_;
class QueryInsuranceFundsRequest;
struct QueryInsuranceFundsRequestDefaultTypeInternal;
extern QueryInsuranceFundsRequestDefaultTypeInternal _QueryInsuranceFundsRequest_default_instance_;
class QueryInsuranceFundsResponse;
struct QueryInsuranceFundsResponseDefaultTypeInternal;
extern QueryInsuranceFundsResponseDefaultTypeInternal _QueryInsuranceFundsResponse_default_instance_;
class QueryInsuranceParamsRequest;
struct QueryInsuranceParamsRequestDefaultTypeInternal;
extern QueryInsuranceParamsRequestDefaultTypeInternal _QueryInsuranceParamsRequest_default_instance_;
class QueryInsuranceParamsResponse;
struct QueryInsuranceParamsResponseDefaultTypeInternal;
extern QueryInsuranceParamsResponseDefaultTypeInternal _QueryInsuranceParamsResponse_default_instance_;
class QueryModuleStateRequest;
struct QueryModuleStateRequestDefaultTypeInternal;
extern QueryModuleStateRequestDefaultTypeInternal _QueryModuleStateRequest_default_instance_;
class QueryModuleStateResponse;
struct QueryModuleStateResponseDefaultTypeInternal;
extern QueryModuleStateResponseDefaultTypeInternal _QueryModuleStateResponse_default_instance_;
class QueryPendingRedemptionsRequest;
struct QueryPendingRedemptionsRequestDefaultTypeInternal;
extern QueryPendingRedemptionsRequestDefaultTypeInternal _QueryPendingRedemptionsRequest_default_instance_;
class QueryPendingRedemptionsResponse;
struct QueryPendingRedemptionsResponseDefaultTypeInternal;
extern QueryPendingRedemptionsResponseDefaultTypeInternal _QueryPendingRedemptionsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace insurance
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest>(Arena*);
template <>
::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>(Arena*);
template <>
::injective::insurance::v1beta1::QueryInsuranceFundRequest* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryInsuranceFundRequest>(Arena*);
template <>
::injective::insurance::v1beta1::QueryInsuranceFundResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryInsuranceFundResponse>(Arena*);
template <>
::injective::insurance::v1beta1::QueryInsuranceFundsRequest* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryInsuranceFundsRequest>(Arena*);
template <>
::injective::insurance::v1beta1::QueryInsuranceFundsResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryInsuranceFundsResponse>(Arena*);
template <>
::injective::insurance::v1beta1::QueryInsuranceParamsRequest* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryInsuranceParamsRequest>(Arena*);
template <>
::injective::insurance::v1beta1::QueryInsuranceParamsResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryInsuranceParamsResponse>(Arena*);
template <>
::injective::insurance::v1beta1::QueryModuleStateRequest* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryModuleStateRequest>(Arena*);
template <>
::injective::insurance::v1beta1::QueryModuleStateResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryModuleStateResponse>(Arena*);
template <>
::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryPendingRedemptionsRequest>(Arena*);
template <>
::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace insurance {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryInsuranceParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryInsuranceParamsRequest) */ {
 public:
  inline QueryInsuranceParamsRequest() : QueryInsuranceParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryInsuranceParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryInsuranceParamsRequest(const QueryInsuranceParamsRequest& from);
  QueryInsuranceParamsRequest(QueryInsuranceParamsRequest&& from) noexcept
    : QueryInsuranceParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryInsuranceParamsRequest& operator=(const QueryInsuranceParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInsuranceParamsRequest& operator=(QueryInsuranceParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryInsuranceParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryInsuranceParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryInsuranceParamsRequest*>(
               &_QueryInsuranceParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryInsuranceParamsRequest& a, QueryInsuranceParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInsuranceParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInsuranceParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryInsuranceParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryInsuranceParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryInsuranceParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryInsuranceParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryInsuranceParamsRequest";
  }
  protected:
  explicit QueryInsuranceParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryInsuranceParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryInsuranceParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryInsuranceParamsResponse) */ {
 public:
  inline QueryInsuranceParamsResponse() : QueryInsuranceParamsResponse(nullptr) {}
  ~QueryInsuranceParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryInsuranceParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryInsuranceParamsResponse(const QueryInsuranceParamsResponse& from);
  QueryInsuranceParamsResponse(QueryInsuranceParamsResponse&& from) noexcept
    : QueryInsuranceParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryInsuranceParamsResponse& operator=(const QueryInsuranceParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInsuranceParamsResponse& operator=(QueryInsuranceParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryInsuranceParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryInsuranceParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryInsuranceParamsResponse*>(
               &_QueryInsuranceParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryInsuranceParamsResponse& a, QueryInsuranceParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInsuranceParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInsuranceParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryInsuranceParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryInsuranceParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryInsuranceParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryInsuranceParamsResponse& from) {
    QueryInsuranceParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryInsuranceParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryInsuranceParamsResponse";
  }
  protected:
  explicit QueryInsuranceParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .injective.insurance.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::insurance::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::insurance::v1beta1::Params* release_params();
  ::injective::insurance::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::insurance::v1beta1::Params* params);
  private:
  const ::injective::insurance::v1beta1::Params& _internal_params() const;
  ::injective::insurance::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::insurance::v1beta1::Params* params);
  ::injective::insurance::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryInsuranceParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::insurance::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryInsuranceFundRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryInsuranceFundRequest) */ {
 public:
  inline QueryInsuranceFundRequest() : QueryInsuranceFundRequest(nullptr) {}
  ~QueryInsuranceFundRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryInsuranceFundRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryInsuranceFundRequest(const QueryInsuranceFundRequest& from);
  QueryInsuranceFundRequest(QueryInsuranceFundRequest&& from) noexcept
    : QueryInsuranceFundRequest() {
    *this = ::std::move(from);
  }

  inline QueryInsuranceFundRequest& operator=(const QueryInsuranceFundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInsuranceFundRequest& operator=(QueryInsuranceFundRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryInsuranceFundRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryInsuranceFundRequest* internal_default_instance() {
    return reinterpret_cast<const QueryInsuranceFundRequest*>(
               &_QueryInsuranceFundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryInsuranceFundRequest& a, QueryInsuranceFundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInsuranceFundRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInsuranceFundRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryInsuranceFundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryInsuranceFundRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryInsuranceFundRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryInsuranceFundRequest& from) {
    QueryInsuranceFundRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryInsuranceFundRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryInsuranceFundRequest";
  }
  protected:
  explicit QueryInsuranceFundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
  };
  // string market_id = 1 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryInsuranceFundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryInsuranceFundResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryInsuranceFundResponse) */ {
 public:
  inline QueryInsuranceFundResponse() : QueryInsuranceFundResponse(nullptr) {}
  ~QueryInsuranceFundResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryInsuranceFundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryInsuranceFundResponse(const QueryInsuranceFundResponse& from);
  QueryInsuranceFundResponse(QueryInsuranceFundResponse&& from) noexcept
    : QueryInsuranceFundResponse() {
    *this = ::std::move(from);
  }

  inline QueryInsuranceFundResponse& operator=(const QueryInsuranceFundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInsuranceFundResponse& operator=(QueryInsuranceFundResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryInsuranceFundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryInsuranceFundResponse* internal_default_instance() {
    return reinterpret_cast<const QueryInsuranceFundResponse*>(
               &_QueryInsuranceFundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryInsuranceFundResponse& a, QueryInsuranceFundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInsuranceFundResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInsuranceFundResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryInsuranceFundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryInsuranceFundResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryInsuranceFundResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryInsuranceFundResponse& from) {
    QueryInsuranceFundResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryInsuranceFundResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryInsuranceFundResponse";
  }
  protected:
  explicit QueryInsuranceFundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFundFieldNumber = 1,
  };
  // .injective.insurance.v1beta1.InsuranceFund fund = 1 [json_name = "fund"];
  bool has_fund() const;
  void clear_fund() ;
  const ::injective::insurance::v1beta1::InsuranceFund& fund() const;
  PROTOBUF_NODISCARD ::injective::insurance::v1beta1::InsuranceFund* release_fund();
  ::injective::insurance::v1beta1::InsuranceFund* mutable_fund();
  void set_allocated_fund(::injective::insurance::v1beta1::InsuranceFund* fund);
  private:
  const ::injective::insurance::v1beta1::InsuranceFund& _internal_fund() const;
  ::injective::insurance::v1beta1::InsuranceFund* _internal_mutable_fund();
  public:
  void unsafe_arena_set_allocated_fund(
      ::injective::insurance::v1beta1::InsuranceFund* fund);
  ::injective::insurance::v1beta1::InsuranceFund* unsafe_arena_release_fund();
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryInsuranceFundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::insurance::v1beta1::InsuranceFund* fund_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryInsuranceFundsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryInsuranceFundsRequest) */ {
 public:
  inline QueryInsuranceFundsRequest() : QueryInsuranceFundsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryInsuranceFundsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryInsuranceFundsRequest(const QueryInsuranceFundsRequest& from);
  QueryInsuranceFundsRequest(QueryInsuranceFundsRequest&& from) noexcept
    : QueryInsuranceFundsRequest() {
    *this = ::std::move(from);
  }

  inline QueryInsuranceFundsRequest& operator=(const QueryInsuranceFundsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInsuranceFundsRequest& operator=(QueryInsuranceFundsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryInsuranceFundsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryInsuranceFundsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryInsuranceFundsRequest*>(
               &_QueryInsuranceFundsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryInsuranceFundsRequest& a, QueryInsuranceFundsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInsuranceFundsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInsuranceFundsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryInsuranceFundsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryInsuranceFundsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryInsuranceFundsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryInsuranceFundsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryInsuranceFundsRequest";
  }
  protected:
  explicit QueryInsuranceFundsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryInsuranceFundsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryInsuranceFundsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryInsuranceFundsResponse) */ {
 public:
  inline QueryInsuranceFundsResponse() : QueryInsuranceFundsResponse(nullptr) {}
  ~QueryInsuranceFundsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryInsuranceFundsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryInsuranceFundsResponse(const QueryInsuranceFundsResponse& from);
  QueryInsuranceFundsResponse(QueryInsuranceFundsResponse&& from) noexcept
    : QueryInsuranceFundsResponse() {
    *this = ::std::move(from);
  }

  inline QueryInsuranceFundsResponse& operator=(const QueryInsuranceFundsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryInsuranceFundsResponse& operator=(QueryInsuranceFundsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryInsuranceFundsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryInsuranceFundsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryInsuranceFundsResponse*>(
               &_QueryInsuranceFundsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryInsuranceFundsResponse& a, QueryInsuranceFundsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryInsuranceFundsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryInsuranceFundsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryInsuranceFundsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryInsuranceFundsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryInsuranceFundsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryInsuranceFundsResponse& from) {
    QueryInsuranceFundsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryInsuranceFundsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryInsuranceFundsResponse";
  }
  protected:
  explicit QueryInsuranceFundsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFundsFieldNumber = 1,
  };
  // repeated .injective.insurance.v1beta1.InsuranceFund funds = 1 [json_name = "funds", (.gogoproto.nullable) = false];
  int funds_size() const;
  private:
  int _internal_funds_size() const;

  public:
  void clear_funds() ;
  ::injective::insurance::v1beta1::InsuranceFund* mutable_funds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::insurance::v1beta1::InsuranceFund >*
      mutable_funds();
  private:
  const ::injective::insurance::v1beta1::InsuranceFund& _internal_funds(int index) const;
  ::injective::insurance::v1beta1::InsuranceFund* _internal_add_funds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::insurance::v1beta1::InsuranceFund>& _internal_funds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::insurance::v1beta1::InsuranceFund>* _internal_mutable_funds();
  public:
  const ::injective::insurance::v1beta1::InsuranceFund& funds(int index) const;
  ::injective::insurance::v1beta1::InsuranceFund* add_funds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::insurance::v1beta1::InsuranceFund >&
      funds() const;
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryInsuranceFundsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::insurance::v1beta1::InsuranceFund > funds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEstimatedRedemptionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest) */ {
 public:
  inline QueryEstimatedRedemptionsRequest() : QueryEstimatedRedemptionsRequest(nullptr) {}
  ~QueryEstimatedRedemptionsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEstimatedRedemptionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEstimatedRedemptionsRequest(const QueryEstimatedRedemptionsRequest& from);
  QueryEstimatedRedemptionsRequest(QueryEstimatedRedemptionsRequest&& from) noexcept
    : QueryEstimatedRedemptionsRequest() {
    *this = ::std::move(from);
  }

  inline QueryEstimatedRedemptionsRequest& operator=(const QueryEstimatedRedemptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEstimatedRedemptionsRequest& operator=(QueryEstimatedRedemptionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEstimatedRedemptionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEstimatedRedemptionsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryEstimatedRedemptionsRequest*>(
               &_QueryEstimatedRedemptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryEstimatedRedemptionsRequest& a, QueryEstimatedRedemptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEstimatedRedemptionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEstimatedRedemptionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEstimatedRedemptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEstimatedRedemptionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEstimatedRedemptionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEstimatedRedemptionsRequest& from) {
    QueryEstimatedRedemptionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEstimatedRedemptionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest";
  }
  protected:
  explicit QueryEstimatedRedemptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string marketId = 1 [json_name = "marketId"];
  void clear_marketid() ;
  const std::string& marketid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_marketid(Arg_&& arg, Args_... args);
  std::string* mutable_marketid();
  PROTOBUF_NODISCARD std::string* release_marketid();
  void set_allocated_marketid(std::string* ptr);

  private:
  const std::string& _internal_marketid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marketid(
      const std::string& value);
  std::string* _internal_mutable_marketid();

  public:
  // string address = 2 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEstimatedRedemptionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse) */ {
 public:
  inline QueryEstimatedRedemptionsResponse() : QueryEstimatedRedemptionsResponse(nullptr) {}
  ~QueryEstimatedRedemptionsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEstimatedRedemptionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEstimatedRedemptionsResponse(const QueryEstimatedRedemptionsResponse& from);
  QueryEstimatedRedemptionsResponse(QueryEstimatedRedemptionsResponse&& from) noexcept
    : QueryEstimatedRedemptionsResponse() {
    *this = ::std::move(from);
  }

  inline QueryEstimatedRedemptionsResponse& operator=(const QueryEstimatedRedemptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEstimatedRedemptionsResponse& operator=(QueryEstimatedRedemptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEstimatedRedemptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEstimatedRedemptionsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryEstimatedRedemptionsResponse*>(
               &_QueryEstimatedRedemptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryEstimatedRedemptionsResponse& a, QueryEstimatedRedemptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEstimatedRedemptionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEstimatedRedemptionsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEstimatedRedemptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEstimatedRedemptionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEstimatedRedemptionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEstimatedRedemptionsResponse& from) {
    QueryEstimatedRedemptionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEstimatedRedemptionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse";
  }
  protected:
  explicit QueryEstimatedRedemptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_amount();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      amount() const;
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPendingRedemptionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryPendingRedemptionsRequest) */ {
 public:
  inline QueryPendingRedemptionsRequest() : QueryPendingRedemptionsRequest(nullptr) {}
  ~QueryPendingRedemptionsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPendingRedemptionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPendingRedemptionsRequest(const QueryPendingRedemptionsRequest& from);
  QueryPendingRedemptionsRequest(QueryPendingRedemptionsRequest&& from) noexcept
    : QueryPendingRedemptionsRequest() {
    *this = ::std::move(from);
  }

  inline QueryPendingRedemptionsRequest& operator=(const QueryPendingRedemptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPendingRedemptionsRequest& operator=(QueryPendingRedemptionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPendingRedemptionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPendingRedemptionsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPendingRedemptionsRequest*>(
               &_QueryPendingRedemptionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryPendingRedemptionsRequest& a, QueryPendingRedemptionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPendingRedemptionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPendingRedemptionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPendingRedemptionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPendingRedemptionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPendingRedemptionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPendingRedemptionsRequest& from) {
    QueryPendingRedemptionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPendingRedemptionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryPendingRedemptionsRequest";
  }
  protected:
  explicit QueryPendingRedemptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // string marketId = 1 [json_name = "marketId"];
  void clear_marketid() ;
  const std::string& marketid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_marketid(Arg_&& arg, Args_... args);
  std::string* mutable_marketid();
  PROTOBUF_NODISCARD std::string* release_marketid();
  void set_allocated_marketid(std::string* ptr);

  private:
  const std::string& _internal_marketid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marketid(
      const std::string& value);
  std::string* _internal_mutable_marketid();

  public:
  // string address = 2 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryPendingRedemptionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPendingRedemptionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryPendingRedemptionsResponse) */ {
 public:
  inline QueryPendingRedemptionsResponse() : QueryPendingRedemptionsResponse(nullptr) {}
  ~QueryPendingRedemptionsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPendingRedemptionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPendingRedemptionsResponse(const QueryPendingRedemptionsResponse& from);
  QueryPendingRedemptionsResponse(QueryPendingRedemptionsResponse&& from) noexcept
    : QueryPendingRedemptionsResponse() {
    *this = ::std::move(from);
  }

  inline QueryPendingRedemptionsResponse& operator=(const QueryPendingRedemptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPendingRedemptionsResponse& operator=(QueryPendingRedemptionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPendingRedemptionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPendingRedemptionsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPendingRedemptionsResponse*>(
               &_QueryPendingRedemptionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryPendingRedemptionsResponse& a, QueryPendingRedemptionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPendingRedemptionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPendingRedemptionsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPendingRedemptionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPendingRedemptionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPendingRedemptionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPendingRedemptionsResponse& from) {
    QueryPendingRedemptionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPendingRedemptionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryPendingRedemptionsResponse";
  }
  protected:
  explicit QueryPendingRedemptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_amount();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      amount() const;
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryPendingRedemptionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryModuleStateRequest) */ {
 public:
  inline QueryModuleStateRequest() : QueryModuleStateRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateRequest(const QueryModuleStateRequest& from);
  QueryModuleStateRequest(QueryModuleStateRequest&& from) noexcept
    : QueryModuleStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateRequest& operator=(const QueryModuleStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateRequest& operator=(QueryModuleStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateRequest*>(
               &_QueryModuleStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryModuleStateRequest& a, QueryModuleStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryModuleStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryModuleStateRequest";
  }
  protected:
  explicit QueryModuleStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryModuleStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.QueryModuleStateResponse) */ {
 public:
  inline QueryModuleStateResponse() : QueryModuleStateResponse(nullptr) {}
  ~QueryModuleStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleStateResponse(const QueryModuleStateResponse& from);
  QueryModuleStateResponse(QueryModuleStateResponse&& from) noexcept
    : QueryModuleStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleStateResponse& operator=(const QueryModuleStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleStateResponse& operator=(QueryModuleStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleStateResponse*>(
               &_QueryModuleStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryModuleStateResponse& a, QueryModuleStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleStateResponse& from) {
    QueryModuleStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.QueryModuleStateResponse";
  }
  protected:
  explicit QueryModuleStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .injective.insurance.v1beta1.GenesisState state = 1 [json_name = "state"];
  bool has_state() const;
  void clear_state() ;
  const ::injective::insurance::v1beta1::GenesisState& state() const;
  PROTOBUF_NODISCARD ::injective::insurance::v1beta1::GenesisState* release_state();
  ::injective::insurance::v1beta1::GenesisState* mutable_state();
  void set_allocated_state(::injective::insurance::v1beta1::GenesisState* state);
  private:
  const ::injective::insurance::v1beta1::GenesisState& _internal_state() const;
  ::injective::insurance::v1beta1::GenesisState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::injective::insurance::v1beta1::GenesisState* state);
  ::injective::insurance::v1beta1::GenesisState* unsafe_arena_release_state();
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.QueryModuleStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective::insurance::v1beta1::GenesisState* state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryInsuranceParamsRequest

// -------------------------------------------------------------------

// QueryInsuranceParamsResponse

// .injective.insurance.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool QueryInsuranceParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::insurance::v1beta1::Params& QueryInsuranceParamsResponse::_internal_params() const {
  const ::injective::insurance::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::insurance::v1beta1::Params&>(
      ::injective::insurance::v1beta1::_Params_default_instance_);
}
inline const ::injective::insurance::v1beta1::Params& QueryInsuranceParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryInsuranceParamsResponse.params)
  return _internal_params();
}
inline void QueryInsuranceParamsResponse::unsafe_arena_set_allocated_params(
    ::injective::insurance::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.insurance.v1beta1.QueryInsuranceParamsResponse.params)
}
inline ::injective::insurance::v1beta1::Params* QueryInsuranceParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::insurance::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::insurance::v1beta1::Params* QueryInsuranceParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.QueryInsuranceParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::insurance::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::insurance::v1beta1::Params* QueryInsuranceParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::insurance::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::insurance::v1beta1::Params* QueryInsuranceParamsResponse::mutable_params() {
  ::injective::insurance::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryInsuranceParamsResponse.params)
  return _msg;
}
inline void QueryInsuranceParamsResponse::set_allocated_params(::injective::insurance::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.QueryInsuranceParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryInsuranceFundRequest

// string market_id = 1 [json_name = "marketId"];
inline void QueryInsuranceFundRequest::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& QueryInsuranceFundRequest::market_id() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryInsuranceFundRequest.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryInsuranceFundRequest::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.QueryInsuranceFundRequest.market_id)
}
inline std::string* QueryInsuranceFundRequest::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryInsuranceFundRequest.market_id)
  return _s;
}
inline const std::string& QueryInsuranceFundRequest::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void QueryInsuranceFundRequest::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryInsuranceFundRequest::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryInsuranceFundRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.QueryInsuranceFundRequest.market_id)
  return _impl_.market_id_.Release();
}
inline void QueryInsuranceFundRequest::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.QueryInsuranceFundRequest.market_id)
}

// -------------------------------------------------------------------

// QueryInsuranceFundResponse

// .injective.insurance.v1beta1.InsuranceFund fund = 1 [json_name = "fund"];
inline bool QueryInsuranceFundResponse::has_fund() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fund_ != nullptr);
  return value;
}
inline const ::injective::insurance::v1beta1::InsuranceFund& QueryInsuranceFundResponse::_internal_fund() const {
  const ::injective::insurance::v1beta1::InsuranceFund* p = _impl_.fund_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::insurance::v1beta1::InsuranceFund&>(
      ::injective::insurance::v1beta1::_InsuranceFund_default_instance_);
}
inline const ::injective::insurance::v1beta1::InsuranceFund& QueryInsuranceFundResponse::fund() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryInsuranceFundResponse.fund)
  return _internal_fund();
}
inline void QueryInsuranceFundResponse::unsafe_arena_set_allocated_fund(
    ::injective::insurance::v1beta1::InsuranceFund* fund) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fund_);
  }
  _impl_.fund_ = fund;
  if (fund) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.insurance.v1beta1.QueryInsuranceFundResponse.fund)
}
inline ::injective::insurance::v1beta1::InsuranceFund* QueryInsuranceFundResponse::release_fund() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::insurance::v1beta1::InsuranceFund* temp = _impl_.fund_;
  _impl_.fund_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::insurance::v1beta1::InsuranceFund* QueryInsuranceFundResponse::unsafe_arena_release_fund() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.QueryInsuranceFundResponse.fund)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::insurance::v1beta1::InsuranceFund* temp = _impl_.fund_;
  _impl_.fund_ = nullptr;
  return temp;
}
inline ::injective::insurance::v1beta1::InsuranceFund* QueryInsuranceFundResponse::_internal_mutable_fund() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fund_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::insurance::v1beta1::InsuranceFund>(GetArenaForAllocation());
    _impl_.fund_ = p;
  }
  return _impl_.fund_;
}
inline ::injective::insurance::v1beta1::InsuranceFund* QueryInsuranceFundResponse::mutable_fund() {
  ::injective::insurance::v1beta1::InsuranceFund* _msg = _internal_mutable_fund();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryInsuranceFundResponse.fund)
  return _msg;
}
inline void QueryInsuranceFundResponse::set_allocated_fund(::injective::insurance::v1beta1::InsuranceFund* fund) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fund_);
  }
  if (fund) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fund));
    if (message_arena != submessage_arena) {
      fund = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fund, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fund_ = fund;
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.QueryInsuranceFundResponse.fund)
}

// -------------------------------------------------------------------

// QueryInsuranceFundsRequest

// -------------------------------------------------------------------

// QueryInsuranceFundsResponse

// repeated .injective.insurance.v1beta1.InsuranceFund funds = 1 [json_name = "funds", (.gogoproto.nullable) = false];
inline int QueryInsuranceFundsResponse::_internal_funds_size() const {
  return _impl_.funds_.size();
}
inline int QueryInsuranceFundsResponse::funds_size() const {
  return _internal_funds_size();
}
inline ::injective::insurance::v1beta1::InsuranceFund* QueryInsuranceFundsResponse::mutable_funds(int index) {
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryInsuranceFundsResponse.funds)
  return _internal_mutable_funds()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::insurance::v1beta1::InsuranceFund >*
QueryInsuranceFundsResponse::mutable_funds() {
  // @@protoc_insertion_point(field_mutable_list:injective.insurance.v1beta1.QueryInsuranceFundsResponse.funds)
  return _internal_mutable_funds();
}
inline const ::injective::insurance::v1beta1::InsuranceFund& QueryInsuranceFundsResponse::_internal_funds(int index) const {
  return _internal_funds().Get(index);
}
inline const ::injective::insurance::v1beta1::InsuranceFund& QueryInsuranceFundsResponse::funds(int index) const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryInsuranceFundsResponse.funds)
  return _internal_funds(index);
}
inline ::injective::insurance::v1beta1::InsuranceFund* QueryInsuranceFundsResponse::_internal_add_funds() {
  return _internal_mutable_funds()->Add();
}
inline ::injective::insurance::v1beta1::InsuranceFund* QueryInsuranceFundsResponse::add_funds() {
  ::injective::insurance::v1beta1::InsuranceFund* _add = _internal_add_funds();
  // @@protoc_insertion_point(field_add:injective.insurance.v1beta1.QueryInsuranceFundsResponse.funds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective::insurance::v1beta1::InsuranceFund >&
QueryInsuranceFundsResponse::funds() const {
  // @@protoc_insertion_point(field_list:injective.insurance.v1beta1.QueryInsuranceFundsResponse.funds)
  return _internal_funds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::insurance::v1beta1::InsuranceFund>&
QueryInsuranceFundsResponse::_internal_funds() const {
  return _impl_.funds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective::insurance::v1beta1::InsuranceFund>*
QueryInsuranceFundsResponse::_internal_mutable_funds() {
  return &_impl_.funds_;
}

// -------------------------------------------------------------------

// QueryEstimatedRedemptionsRequest

// string marketId = 1 [json_name = "marketId"];
inline void QueryEstimatedRedemptionsRequest::clear_marketid() {
  _impl_.marketid_.ClearToEmpty();
}
inline const std::string& QueryEstimatedRedemptionsRequest::marketid() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.marketId)
  return _internal_marketid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryEstimatedRedemptionsRequest::set_marketid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.marketid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.marketId)
}
inline std::string* QueryEstimatedRedemptionsRequest::mutable_marketid() {
  std::string* _s = _internal_mutable_marketid();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.marketId)
  return _s;
}
inline const std::string& QueryEstimatedRedemptionsRequest::_internal_marketid() const {
  return _impl_.marketid_.Get();
}
inline void QueryEstimatedRedemptionsRequest::_internal_set_marketid(const std::string& value) {
  ;


  _impl_.marketid_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryEstimatedRedemptionsRequest::_internal_mutable_marketid() {
  ;
  return _impl_.marketid_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryEstimatedRedemptionsRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.marketId)
  return _impl_.marketid_.Release();
}
inline void QueryEstimatedRedemptionsRequest::set_allocated_marketid(std::string* value) {
  _impl_.marketid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.marketid_.IsDefault()) {
          _impl_.marketid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.marketId)
}

// string address = 2 [json_name = "address"];
inline void QueryEstimatedRedemptionsRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryEstimatedRedemptionsRequest::address() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryEstimatedRedemptionsRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.address)
}
inline std::string* QueryEstimatedRedemptionsRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.address)
  return _s;
}
inline const std::string& QueryEstimatedRedemptionsRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryEstimatedRedemptionsRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryEstimatedRedemptionsRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryEstimatedRedemptionsRequest::release_address() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.address)
  return _impl_.address_.Release();
}
inline void QueryEstimatedRedemptionsRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.QueryEstimatedRedemptionsRequest.address)
}

// -------------------------------------------------------------------

// QueryEstimatedRedemptionsResponse

// repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
inline int QueryEstimatedRedemptionsResponse::_internal_amount_size() const {
  return _impl_.amount_.size();
}
inline int QueryEstimatedRedemptionsResponse::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* QueryEstimatedRedemptionsResponse::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QueryEstimatedRedemptionsResponse::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.amount)
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& QueryEstimatedRedemptionsResponse::_internal_amount(int index) const {
  return _internal_amount().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QueryEstimatedRedemptionsResponse::amount(int index) const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.amount)
  return _internal_amount(index);
}
inline ::cosmos::base::v1beta1::Coin* QueryEstimatedRedemptionsResponse::_internal_add_amount() {
  return _internal_mutable_amount()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QueryEstimatedRedemptionsResponse::add_amount() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_amount();
  // @@protoc_insertion_point(field_add:injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.amount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QueryEstimatedRedemptionsResponse::amount() const {
  // @@protoc_insertion_point(field_list:injective.insurance.v1beta1.QueryEstimatedRedemptionsResponse.amount)
  return _internal_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QueryEstimatedRedemptionsResponse::_internal_amount() const {
  return _impl_.amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QueryEstimatedRedemptionsResponse::_internal_mutable_amount() {
  return &_impl_.amount_;
}

// -------------------------------------------------------------------

// QueryPendingRedemptionsRequest

// string marketId = 1 [json_name = "marketId"];
inline void QueryPendingRedemptionsRequest::clear_marketid() {
  _impl_.marketid_.ClearToEmpty();
}
inline const std::string& QueryPendingRedemptionsRequest::marketid() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.marketId)
  return _internal_marketid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPendingRedemptionsRequest::set_marketid(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.marketid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.marketId)
}
inline std::string* QueryPendingRedemptionsRequest::mutable_marketid() {
  std::string* _s = _internal_mutable_marketid();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.marketId)
  return _s;
}
inline const std::string& QueryPendingRedemptionsRequest::_internal_marketid() const {
  return _impl_.marketid_.Get();
}
inline void QueryPendingRedemptionsRequest::_internal_set_marketid(const std::string& value) {
  ;


  _impl_.marketid_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPendingRedemptionsRequest::_internal_mutable_marketid() {
  ;
  return _impl_.marketid_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPendingRedemptionsRequest::release_marketid() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.marketId)
  return _impl_.marketid_.Release();
}
inline void QueryPendingRedemptionsRequest::set_allocated_marketid(std::string* value) {
  _impl_.marketid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.marketid_.IsDefault()) {
          _impl_.marketid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.marketId)
}

// string address = 2 [json_name = "address"];
inline void QueryPendingRedemptionsRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryPendingRedemptionsRequest::address() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPendingRedemptionsRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.address)
}
inline std::string* QueryPendingRedemptionsRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.address)
  return _s;
}
inline const std::string& QueryPendingRedemptionsRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryPendingRedemptionsRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPendingRedemptionsRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPendingRedemptionsRequest::release_address() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.address)
  return _impl_.address_.Release();
}
inline void QueryPendingRedemptionsRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.QueryPendingRedemptionsRequest.address)
}

// -------------------------------------------------------------------

// QueryPendingRedemptionsResponse

// repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
inline int QueryPendingRedemptionsResponse::_internal_amount_size() const {
  return _impl_.amount_.size();
}
inline int QueryPendingRedemptionsResponse::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* QueryPendingRedemptionsResponse::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryPendingRedemptionsResponse.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QueryPendingRedemptionsResponse::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:injective.insurance.v1beta1.QueryPendingRedemptionsResponse.amount)
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& QueryPendingRedemptionsResponse::_internal_amount(int index) const {
  return _internal_amount().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QueryPendingRedemptionsResponse::amount(int index) const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryPendingRedemptionsResponse.amount)
  return _internal_amount(index);
}
inline ::cosmos::base::v1beta1::Coin* QueryPendingRedemptionsResponse::_internal_add_amount() {
  return _internal_mutable_amount()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QueryPendingRedemptionsResponse::add_amount() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_amount();
  // @@protoc_insertion_point(field_add:injective.insurance.v1beta1.QueryPendingRedemptionsResponse.amount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QueryPendingRedemptionsResponse::amount() const {
  // @@protoc_insertion_point(field_list:injective.insurance.v1beta1.QueryPendingRedemptionsResponse.amount)
  return _internal_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QueryPendingRedemptionsResponse::_internal_amount() const {
  return _impl_.amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QueryPendingRedemptionsResponse::_internal_mutable_amount() {
  return &_impl_.amount_;
}

// -------------------------------------------------------------------

// QueryModuleStateRequest

// -------------------------------------------------------------------

// QueryModuleStateResponse

// .injective.insurance.v1beta1.GenesisState state = 1 [json_name = "state"];
inline bool QueryModuleStateResponse::has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.state_ != nullptr);
  return value;
}
inline const ::injective::insurance::v1beta1::GenesisState& QueryModuleStateResponse::_internal_state() const {
  const ::injective::insurance::v1beta1::GenesisState* p = _impl_.state_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::insurance::v1beta1::GenesisState&>(
      ::injective::insurance::v1beta1::_GenesisState_default_instance_);
}
inline const ::injective::insurance::v1beta1::GenesisState& QueryModuleStateResponse::state() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.QueryModuleStateResponse.state)
  return _internal_state();
}
inline void QueryModuleStateResponse::unsafe_arena_set_allocated_state(
    ::injective::insurance::v1beta1::GenesisState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  _impl_.state_ = state;
  if (state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.insurance.v1beta1.QueryModuleStateResponse.state)
}
inline ::injective::insurance::v1beta1::GenesisState* QueryModuleStateResponse::release_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::insurance::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::insurance::v1beta1::GenesisState* QueryModuleStateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.QueryModuleStateResponse.state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::insurance::v1beta1::GenesisState* temp = _impl_.state_;
  _impl_.state_ = nullptr;
  return temp;
}
inline ::injective::insurance::v1beta1::GenesisState* QueryModuleStateResponse::_internal_mutable_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.state_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::insurance::v1beta1::GenesisState>(GetArenaForAllocation());
    _impl_.state_ = p;
  }
  return _impl_.state_;
}
inline ::injective::insurance::v1beta1::GenesisState* QueryModuleStateResponse::mutable_state() {
  ::injective::insurance::v1beta1::GenesisState* _msg = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.QueryModuleStateResponse.state)
  return _msg;
}
inline void QueryModuleStateResponse::set_allocated_state(::injective::insurance::v1beta1::GenesisState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state));
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.state_ = state;
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.QueryModuleStateResponse.state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace insurance
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2finsurance_2fv1beta1_2fquery_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/insurance/v1beta1/query.proto
#ifndef GRPC_injective_2finsurance_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_injective_2finsurance_2fv1beta1_2fquery_2eproto__INCLUDED

#include "injective/insurance/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective {
namespace insurance {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "injective.insurance.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Retrieves insurance params
    virtual ::grpc::Status InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>> AsyncInsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>>(AsyncInsuranceParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>> PrepareAsyncInsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>>(PrepareAsyncInsuranceParamsRaw(context, request, cq));
    }
    // Retrieves individual insurance fund information from market id
    virtual ::grpc::Status InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>> AsyncInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>>(AsyncInsuranceFundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>> PrepareAsyncInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>>(PrepareAsyncInsuranceFundRaw(context, request, cq));
    }
    // Retrieves all insurance funds
    virtual ::grpc::Status InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>> AsyncInsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>>(AsyncInsuranceFundsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>> PrepareAsyncInsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>>(PrepareAsyncInsuranceFundsRaw(context, request, cq));
    }
    // Retrives the value of insurance fund share token at current price (not
    // pending redemption)
    virtual ::grpc::Status EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>> AsyncEstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>>(AsyncEstimatedRedemptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>> PrepareAsyncEstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>>(PrepareAsyncEstimatedRedemptionsRaw(context, request, cq));
    }
    // Retrieves pending redemptions' share token at current price
    virtual ::grpc::Status PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>> AsyncPendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>>(AsyncPendingRedemptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>> PrepareAsyncPendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>>(PrepareAsyncPendingRedemptionsRaw(context, request, cq));
    }
    // Retrieves the entire insurance module's state
    virtual ::grpc::Status InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryModuleStateResponse>> AsyncInsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryModuleStateResponse>>(AsyncInsuranceModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryModuleStateResponse>> PrepareAsyncInsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryModuleStateResponse>>(PrepareAsyncInsuranceModuleStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Retrieves insurance params
      virtual void InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves individual insurance fund information from market id
      virtual void InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves all insurance funds
      virtual void InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrives the value of insurance fund share token at current price (not
      // pending redemption)
      virtual void EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves pending redemptions' share token at current price
      virtual void PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the entire insurance module's state
      virtual void InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* AsyncInsuranceParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* PrepareAsyncInsuranceParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* AsyncInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* PrepareAsyncInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* AsyncInsuranceFundsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* PrepareAsyncInsuranceFundsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* AsyncEstimatedRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* PrepareAsyncEstimatedRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* AsyncPendingRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* PrepareAsyncPendingRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryModuleStateResponse>* AsyncInsuranceModuleStateRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective::insurance::v1beta1::QueryModuleStateResponse>* PrepareAsyncInsuranceModuleStateRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>> AsyncInsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>>(AsyncInsuranceParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>> PrepareAsyncInsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>>(PrepareAsyncInsuranceParamsRaw(context, request, cq));
    }
    ::grpc::Status InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>> AsyncInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>>(AsyncInsuranceFundRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>> PrepareAsyncInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>>(PrepareAsyncInsuranceFundRaw(context, request, cq));
    }
    ::grpc::Status InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>> AsyncInsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>>(AsyncInsuranceFundsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>> PrepareAsyncInsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>>(PrepareAsyncInsuranceFundsRaw(context, request, cq));
    }
    ::grpc::Status EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>> AsyncEstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>>(AsyncEstimatedRedemptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>> PrepareAsyncEstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>>(PrepareAsyncEstimatedRedemptionsRaw(context, request, cq));
    }
    ::grpc::Status PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>> AsyncPendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>>(AsyncPendingRedemptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>> PrepareAsyncPendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>>(PrepareAsyncPendingRedemptionsRaw(context, request, cq));
    }
    ::grpc::Status InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryModuleStateResponse>> AsyncInsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryModuleStateResponse>>(AsyncInsuranceModuleStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryModuleStateResponse>> PrepareAsyncInsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryModuleStateResponse>>(PrepareAsyncInsuranceModuleStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response, std::function<void(::grpc::Status)>) override;
      void InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response, std::function<void(::grpc::Status)>) override;
      void InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response, std::function<void(::grpc::Status)>) override;
      void EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response, std::function<void(::grpc::Status)>) override;
      void PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)>) override;
      void InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* AsyncInsuranceParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* PrepareAsyncInsuranceParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* AsyncInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* PrepareAsyncInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* AsyncInsuranceFundsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* PrepareAsyncInsuranceFundsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* AsyncEstimatedRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* PrepareAsyncEstimatedRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* AsyncPendingRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* PrepareAsyncPendingRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryModuleStateResponse>* AsyncInsuranceModuleStateRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryModuleStateResponse>* PrepareAsyncInsuranceModuleStateRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InsuranceParams_;
    const ::grpc::internal::RpcMethod rpcmethod_InsuranceFund_;
    const ::grpc::internal::RpcMethod rpcmethod_InsuranceFunds_;
    const ::grpc::internal::RpcMethod rpcmethod_EstimatedRedemptions_;
    const ::grpc::internal::RpcMethod rpcmethod_PendingRedemptions_;
    const ::grpc::internal::RpcMethod rpcmethod_InsuranceModuleState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Retrieves insurance params
    virtual ::grpc::Status InsuranceParams(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response);
    // Retrieves individual insurance fund information from market id
    virtual ::grpc::Status InsuranceFund(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response);
    // Retrieves all insurance funds
    virtual ::grpc::Status InsuranceFunds(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response);
    // Retrives the value of insurance fund share token at current price (not
    // pending redemption)
    virtual ::grpc::Status EstimatedRedemptions(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response);
    // Retrieves pending redemptions' share token at current price
    virtual ::grpc::Status PendingRedemptions(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response);
    // Retrieves the entire insurance module's state
    virtual ::grpc::Status InsuranceModuleState(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InsuranceParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsuranceParams() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InsuranceParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsuranceParams(::grpc::ServerContext* context, ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsuranceFund() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsuranceFund(::grpc::ServerContext* context, ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsuranceFunds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsuranceFunds() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InsuranceFunds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFunds(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsuranceFunds(::grpc::ServerContext* context, ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EstimatedRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EstimatedRedemptions() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EstimatedRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimatedRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimatedRedemptions(::grpc::ServerContext* context, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PendingRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PendingRedemptions() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PendingRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPendingRedemptions(::grpc::ServerContext* context, ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsuranceModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsuranceModuleState() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_InsuranceModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceModuleState(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::insurance::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsuranceModuleState(::grpc::ServerContext* context, ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective::insurance::v1beta1::QueryModuleStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InsuranceParams<WithAsyncMethod_InsuranceFund<WithAsyncMethod_InsuranceFunds<WithAsyncMethod_EstimatedRedemptions<WithAsyncMethod_PendingRedemptions<WithAsyncMethod_InsuranceModuleState<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InsuranceParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsuranceParams() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response) { return this->InsuranceParams(context, request, response); }));}
    void SetMessageAllocatorFor_InsuranceParams(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsuranceParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsuranceParams(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsuranceFund() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::injective::insurance::v1beta1::QueryInsuranceFundResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response) { return this->InsuranceFund(context, request, response); }));}
    void SetMessageAllocatorFor_InsuranceFund(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::injective::insurance::v1beta1::QueryInsuranceFundResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsuranceFund(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InsuranceFunds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsuranceFunds() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response) { return this->InsuranceFunds(context, request, response); }));}
    void SetMessageAllocatorFor_InsuranceFunds(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsuranceFunds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFunds(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsuranceFunds(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EstimatedRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EstimatedRedemptions() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response) { return this->EstimatedRedemptions(context, request, response); }));}
    void SetMessageAllocatorFor_EstimatedRedemptions(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EstimatedRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimatedRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstimatedRedemptions(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PendingRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PendingRedemptions() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response) { return this->PendingRedemptions(context, request, response); }));}
    void SetMessageAllocatorFor_PendingRedemptions(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PendingRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PendingRedemptions(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InsuranceModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsuranceModuleState() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryModuleStateRequest, ::injective::insurance::v1beta1::QueryModuleStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response) { return this->InsuranceModuleState(context, request, response); }));}
    void SetMessageAllocatorFor_InsuranceModuleState(
        ::grpc::MessageAllocator< ::injective::insurance::v1beta1::QueryModuleStateRequest, ::injective::insurance::v1beta1::QueryModuleStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective::insurance::v1beta1::QueryModuleStateRequest, ::injective::insurance::v1beta1::QueryModuleStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsuranceModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceModuleState(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::insurance::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsuranceModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::insurance::v1beta1::QueryModuleStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InsuranceParams<WithCallbackMethod_InsuranceFund<WithCallbackMethod_InsuranceFunds<WithCallbackMethod_EstimatedRedemptions<WithCallbackMethod_PendingRedemptions<WithCallbackMethod_InsuranceModuleState<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InsuranceParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsuranceParams() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InsuranceParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsuranceFund() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsuranceFunds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsuranceFunds() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InsuranceFunds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFunds(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EstimatedRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EstimatedRedemptions() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EstimatedRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimatedRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PendingRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PendingRedemptions() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PendingRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsuranceModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsuranceModuleState() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_InsuranceModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceModuleState(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::insurance::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsuranceParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsuranceParams() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InsuranceParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsuranceParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsuranceFund() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsuranceFund(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsuranceFunds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsuranceFunds() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InsuranceFunds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFunds(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsuranceFunds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EstimatedRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EstimatedRedemptions() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EstimatedRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimatedRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimatedRedemptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PendingRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PendingRedemptions() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PendingRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPendingRedemptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsuranceModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsuranceModuleState() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_InsuranceModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceModuleState(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::insurance::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsuranceModuleState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsuranceParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsuranceParams() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsuranceParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsuranceParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsuranceParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsuranceFund() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsuranceFund(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsuranceFund(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsuranceFunds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsuranceFunds() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsuranceFunds(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsuranceFunds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceFunds(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsuranceFunds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EstimatedRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EstimatedRedemptions() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EstimatedRedemptions(context, request, response); }));
    }
    ~WithRawCallbackMethod_EstimatedRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimatedRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EstimatedRedemptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PendingRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PendingRedemptions() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PendingRedemptions(context, request, response); }));
    }
    ~WithRawCallbackMethod_PendingRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PendingRedemptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsuranceModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsuranceModuleState() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsuranceModuleState(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsuranceModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsuranceModuleState(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::insurance::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsuranceModuleState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsuranceParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsuranceParams() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* streamer) {
                       return this->StreamedInsuranceParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsuranceParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsuranceParams(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsuranceParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::QueryInsuranceParamsRequest,::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsuranceFund : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsuranceFund() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::injective::insurance::v1beta1::QueryInsuranceFundResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* streamer) {
                       return this->StreamedInsuranceFund(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsuranceFund() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsuranceFund(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsuranceFund(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::QueryInsuranceFundRequest,::injective::insurance::v1beta1::QueryInsuranceFundResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsuranceFunds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsuranceFunds() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* streamer) {
                       return this->StreamedInsuranceFunds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsuranceFunds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsuranceFunds(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* /*request*/, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsuranceFunds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::QueryInsuranceFundsRequest,::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstimatedRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EstimatedRedemptions() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* streamer) {
                       return this->StreamedEstimatedRedemptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EstimatedRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstimatedRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstimatedRedemptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest,::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PendingRedemptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PendingRedemptions() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* streamer) {
                       return this->StreamedPendingRedemptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PendingRedemptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PendingRedemptions(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* /*request*/, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPendingRedemptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest,::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsuranceModuleState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsuranceModuleState() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective::insurance::v1beta1::QueryModuleStateRequest, ::injective::insurance::v1beta1::QueryModuleStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective::insurance::v1beta1::QueryModuleStateRequest, ::injective::insurance::v1beta1::QueryModuleStateResponse>* streamer) {
                       return this->StreamedInsuranceModuleState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsuranceModuleState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsuranceModuleState(::grpc::ServerContext* /*context*/, const ::injective::insurance::v1beta1::QueryModuleStateRequest* /*request*/, ::injective::insurance::v1beta1::QueryModuleStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsuranceModuleState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective::insurance::v1beta1::QueryModuleStateRequest,::injective::insurance::v1beta1::QueryModuleStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InsuranceParams<WithStreamedUnaryMethod_InsuranceFund<WithStreamedUnaryMethod_InsuranceFunds<WithStreamedUnaryMethod_EstimatedRedemptions<WithStreamedUnaryMethod_PendingRedemptions<WithStreamedUnaryMethod_InsuranceModuleState<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InsuranceParams<WithStreamedUnaryMethod_InsuranceFund<WithStreamedUnaryMethod_InsuranceFunds<WithStreamedUnaryMethod_EstimatedRedemptions<WithStreamedUnaryMethod_PendingRedemptions<WithStreamedUnaryMethod_InsuranceModuleState<Service > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace insurance
}  // namespace injective


#endif  // GRPC_injective_2finsurance_2fv1beta1_2fquery_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/insurance/v1beta1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_injective_2finsurance_2fv1beta1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_injective_2finsurance_2fv1beta1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "injective/insurance/v1beta1/insurance.pb.h"
#include "injective/oracle/v1beta1/oracle.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_injective_2finsurance_2fv1beta1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_injective_2finsurance_2fv1beta1_2ftx_2eproto;
namespace injective {
namespace insurance {
namespace v1beta1 {
class MsgCreateInsuranceFund;
struct MsgCreateInsuranceFundDefaultTypeInternal;
extern MsgCreateInsuranceFundDefaultTypeInternal _MsgCreateInsuranceFund_default_instance_;
class MsgCreateInsuranceFundResponse;
struct MsgCreateInsuranceFundResponseDefaultTypeInternal;
extern MsgCreateInsuranceFundResponseDefaultTypeInternal _MsgCreateInsuranceFundResponse_default_instance_;
class MsgRequestRedemption;
struct MsgRequestRedemptionDefaultTypeInternal;
extern MsgRequestRedemptionDefaultTypeInternal _MsgRequestRedemption_default_instance_;
class MsgRequestRedemptionResponse;
struct MsgRequestRedemptionResponseDefaultTypeInternal;
extern MsgRequestRedemptionResponseDefaultTypeInternal _MsgRequestRedemptionResponse_default_instance_;
class MsgUnderwrite;
struct MsgUnderwriteDefaultTypeInternal;
extern MsgUnderwriteDefaultTypeInternal _MsgUnderwrite_default_instance_;
class MsgUnderwriteResponse;
struct MsgUnderwriteResponseDefaultTypeInternal;
extern MsgUnderwriteResponseDefaultTypeInternal _MsgUnderwriteResponse_default_instance_;
class MsgUpdateParams;
struct MsgUpdateParamsDefaultTypeInternal;
extern MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
class MsgUpdateParamsResponse;
struct MsgUpdateParamsResponseDefaultTypeInternal;
extern MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace insurance
}  // namespace injective
PROTOBUF_NAMESPACE_OPEN
template <>
::injective::insurance::v1beta1::MsgCreateInsuranceFund* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::MsgCreateInsuranceFund>(Arena*);
template <>
::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>(Arena*);
template <>
::injective::insurance::v1beta1::MsgRequestRedemption* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::MsgRequestRedemption>(Arena*);
template <>
::injective::insurance::v1beta1::MsgRequestRedemptionResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::MsgRequestRedemptionResponse>(Arena*);
template <>
::injective::insurance::v1beta1::MsgUnderwrite* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::MsgUnderwrite>(Arena*);
template <>
::injective::insurance::v1beta1::MsgUnderwriteResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::MsgUnderwriteResponse>(Arena*);
template <>
::injective::insurance::v1beta1::MsgUpdateParams* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::MsgUpdateParams>(Arena*);
template <>
::injective::insurance::v1beta1::MsgUpdateParamsResponse* Arena::CreateMaybeMessage<::injective::insurance::v1beta1::MsgUpdateParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective {
namespace insurance {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgCreateInsuranceFund final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.MsgCreateInsuranceFund) */ {
 public:
  inline MsgCreateInsuranceFund() : MsgCreateInsuranceFund(nullptr) {}
  ~MsgCreateInsuranceFund() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateInsuranceFund(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateInsuranceFund(const MsgCreateInsuranceFund& from);
  MsgCreateInsuranceFund(MsgCreateInsuranceFund&& from) noexcept
    : MsgCreateInsuranceFund() {
    *this = ::std::move(from);
  }

  inline MsgCreateInsuranceFund& operator=(const MsgCreateInsuranceFund& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateInsuranceFund& operator=(MsgCreateInsuranceFund&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateInsuranceFund& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateInsuranceFund* internal_default_instance() {
    return reinterpret_cast<const MsgCreateInsuranceFund*>(
               &_MsgCreateInsuranceFund_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgCreateInsuranceFund& a, MsgCreateInsuranceFund& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateInsuranceFund* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateInsuranceFund* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateInsuranceFund* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateInsuranceFund>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateInsuranceFund& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateInsuranceFund& from) {
    MsgCreateInsuranceFund::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateInsuranceFund* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.MsgCreateInsuranceFund";
  }
  protected:
  explicit MsgCreateInsuranceFund(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kTickerFieldNumber = 2,
    kQuoteDenomFieldNumber = 3,
    kOracleBaseFieldNumber = 4,
    kOracleQuoteFieldNumber = 5,
    kInitialDepositFieldNumber = 8,
    kExpiryFieldNumber = 7,
    kOracleTypeFieldNumber = 6,
  };
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string ticker = 2 [json_name = "ticker"];
  void clear_ticker() ;
  const std::string& ticker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* ptr);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string quote_denom = 3 [json_name = "quoteDenom"];
  void clear_quote_denom() ;
  const std::string& quote_denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote_denom(Arg_&& arg, Args_... args);
  std::string* mutable_quote_denom();
  PROTOBUF_NODISCARD std::string* release_quote_denom();
  void set_allocated_quote_denom(std::string* ptr);

  private:
  const std::string& _internal_quote_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_denom(
      const std::string& value);
  std::string* _internal_mutable_quote_denom();

  public:
  // string oracle_base = 4 [json_name = "oracleBase"];
  void clear_oracle_base() ;
  const std::string& oracle_base() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oracle_base(Arg_&& arg, Args_... args);
  std::string* mutable_oracle_base();
  PROTOBUF_NODISCARD std::string* release_oracle_base();
  void set_allocated_oracle_base(std::string* ptr);

  private:
  const std::string& _internal_oracle_base() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oracle_base(
      const std::string& value);
  std::string* _internal_mutable_oracle_base();

  public:
  // string oracle_quote = 5 [json_name = "oracleQuote"];
  void clear_oracle_quote() ;
  const std::string& oracle_quote() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oracle_quote(Arg_&& arg, Args_... args);
  std::string* mutable_oracle_quote();
  PROTOBUF_NODISCARD std::string* release_oracle_quote();
  void set_allocated_oracle_quote(std::string* ptr);

  private:
  const std::string& _internal_oracle_quote() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oracle_quote(
      const std::string& value);
  std::string* _internal_mutable_oracle_quote();

  public:
  // .cosmos.base.v1beta1.Coin initial_deposit = 8 [json_name = "initialDeposit", (.gogoproto.nullable) = false];
  bool has_initial_deposit() const;
  void clear_initial_deposit() ;
  const ::cosmos::base::v1beta1::Coin& initial_deposit() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_initial_deposit();
  ::cosmos::base::v1beta1::Coin* mutable_initial_deposit();
  void set_allocated_initial_deposit(::cosmos::base::v1beta1::Coin* initial_deposit);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_initial_deposit() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_initial_deposit();
  public:
  void unsafe_arena_set_allocated_initial_deposit(
      ::cosmos::base::v1beta1::Coin* initial_deposit);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_initial_deposit();
  // int64 expiry = 7 [json_name = "expiry"];
  void clear_expiry() ;
  ::int64_t expiry() const;
  void set_expiry(::int64_t value);

  private:
  ::int64_t _internal_expiry() const;
  void _internal_set_expiry(::int64_t value);

  public:
  // .injective.oracle.v1beta1.OracleType oracle_type = 6 [json_name = "oracleType"];
  void clear_oracle_type() ;
  ::injective::oracle::v1beta1::OracleType oracle_type() const;
  void set_oracle_type(::injective::oracle::v1beta1::OracleType value);

  private:
  ::injective::oracle::v1beta1::OracleType _internal_oracle_type() const;
  void _internal_set_oracle_type(::injective::oracle::v1beta1::OracleType value);

  public:
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.MsgCreateInsuranceFund)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_denom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oracle_base_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oracle_quote_;
    ::cosmos::base::v1beta1::Coin* initial_deposit_;
    ::int64_t expiry_;
    int oracle_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCreateInsuranceFundResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.MsgCreateInsuranceFundResponse) */ {
 public:
  inline MsgCreateInsuranceFundResponse() : MsgCreateInsuranceFundResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateInsuranceFundResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateInsuranceFundResponse(const MsgCreateInsuranceFundResponse& from);
  MsgCreateInsuranceFundResponse(MsgCreateInsuranceFundResponse&& from) noexcept
    : MsgCreateInsuranceFundResponse() {
    *this = ::std::move(from);
  }

  inline MsgCreateInsuranceFundResponse& operator=(const MsgCreateInsuranceFundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateInsuranceFundResponse& operator=(MsgCreateInsuranceFundResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateInsuranceFundResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateInsuranceFundResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateInsuranceFundResponse*>(
               &_MsgCreateInsuranceFundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgCreateInsuranceFundResponse& a, MsgCreateInsuranceFundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateInsuranceFundResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateInsuranceFundResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateInsuranceFundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateInsuranceFundResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgCreateInsuranceFundResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgCreateInsuranceFundResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.MsgCreateInsuranceFundResponse";
  }
  protected:
  explicit MsgCreateInsuranceFundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.MsgCreateInsuranceFundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUnderwrite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.MsgUnderwrite) */ {
 public:
  inline MsgUnderwrite() : MsgUnderwrite(nullptr) {}
  ~MsgUnderwrite() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUnderwrite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUnderwrite(const MsgUnderwrite& from);
  MsgUnderwrite(MsgUnderwrite&& from) noexcept
    : MsgUnderwrite() {
    *this = ::std::move(from);
  }

  inline MsgUnderwrite& operator=(const MsgUnderwrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUnderwrite& operator=(MsgUnderwrite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUnderwrite& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUnderwrite* internal_default_instance() {
    return reinterpret_cast<const MsgUnderwrite*>(
               &_MsgUnderwrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgUnderwrite& a, MsgUnderwrite& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUnderwrite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUnderwrite* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUnderwrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUnderwrite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUnderwrite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUnderwrite& from) {
    MsgUnderwrite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUnderwrite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.MsgUnderwrite";
  }
  protected:
  explicit MsgUnderwrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kDepositFieldNumber = 3,
  };
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .cosmos.base.v1beta1.Coin deposit = 3 [json_name = "deposit", (.gogoproto.nullable) = false];
  bool has_deposit() const;
  void clear_deposit() ;
  const ::cosmos::base::v1beta1::Coin& deposit() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_deposit();
  ::cosmos::base::v1beta1::Coin* mutable_deposit();
  void set_allocated_deposit(::cosmos::base::v1beta1::Coin* deposit);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_deposit() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_deposit();
  public:
  void unsafe_arena_set_allocated_deposit(
      ::cosmos::base::v1beta1::Coin* deposit);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_deposit();
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.MsgUnderwrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::cosmos::base::v1beta1::Coin* deposit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUnderwriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.MsgUnderwriteResponse) */ {
 public:
  inline MsgUnderwriteResponse() : MsgUnderwriteResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUnderwriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUnderwriteResponse(const MsgUnderwriteResponse& from);
  MsgUnderwriteResponse(MsgUnderwriteResponse&& from) noexcept
    : MsgUnderwriteResponse() {
    *this = ::std::move(from);
  }

  inline MsgUnderwriteResponse& operator=(const MsgUnderwriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUnderwriteResponse& operator=(MsgUnderwriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUnderwriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUnderwriteResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUnderwriteResponse*>(
               &_MsgUnderwriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgUnderwriteResponse& a, MsgUnderwriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUnderwriteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUnderwriteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUnderwriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUnderwriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUnderwriteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUnderwriteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.MsgUnderwriteResponse";
  }
  protected:
  explicit MsgUnderwriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.MsgUnderwriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRequestRedemption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.MsgRequestRedemption) */ {
 public:
  inline MsgRequestRedemption() : MsgRequestRedemption(nullptr) {}
  ~MsgRequestRedemption() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRequestRedemption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRequestRedemption(const MsgRequestRedemption& from);
  MsgRequestRedemption(MsgRequestRedemption&& from) noexcept
    : MsgRequestRedemption() {
    *this = ::std::move(from);
  }

  inline MsgRequestRedemption& operator=(const MsgRequestRedemption& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRequestRedemption& operator=(MsgRequestRedemption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRequestRedemption& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRequestRedemption* internal_default_instance() {
    return reinterpret_cast<const MsgRequestRedemption*>(
               &_MsgRequestRedemption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgRequestRedemption& a, MsgRequestRedemption& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRequestRedemption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRequestRedemption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRequestRedemption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRequestRedemption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRequestRedemption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRequestRedemption& from) {
    MsgRequestRedemption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRequestRedemption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.MsgRequestRedemption";
  }
  protected:
  explicit MsgRequestRedemption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string sender = 1 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string market_id = 2 [json_name = "marketId"];
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.MsgRequestRedemption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRequestRedemptionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.MsgRequestRedemptionResponse) */ {
 public:
  inline MsgRequestRedemptionResponse() : MsgRequestRedemptionResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRequestRedemptionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRequestRedemptionResponse(const MsgRequestRedemptionResponse& from);
  MsgRequestRedemptionResponse(MsgRequestRedemptionResponse&& from) noexcept
    : MsgRequestRedemptionResponse() {
    *this = ::std::move(from);
  }

  inline MsgRequestRedemptionResponse& operator=(const MsgRequestRedemptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRequestRedemptionResponse& operator=(MsgRequestRedemptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRequestRedemptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRequestRedemptionResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRequestRedemptionResponse*>(
               &_MsgRequestRedemptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgRequestRedemptionResponse& a, MsgRequestRedemptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRequestRedemptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRequestRedemptionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRequestRedemptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRequestRedemptionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgRequestRedemptionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgRequestRedemptionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.MsgRequestRedemptionResponse";
  }
  protected:
  explicit MsgRequestRedemptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.MsgRequestRedemptionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.MsgUpdateParams) */ {
 public:
  inline MsgUpdateParams() : MsgUpdateParams(nullptr) {}
  ~MsgUpdateParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParams(const MsgUpdateParams& from);
  MsgUpdateParams(MsgUpdateParams&& from) noexcept
    : MsgUpdateParams() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParams& operator=(const MsgUpdateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParams& operator=(MsgUpdateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParams* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParams*>(
               &_MsgUpdateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgUpdateParams& a, MsgUpdateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateParams& from) {
    MsgUpdateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.MsgUpdateParams";
  }
  protected:
  explicit MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .injective.insurance.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::injective::insurance::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::injective::insurance::v1beta1::Params* release_params();
  ::injective::insurance::v1beta1::Params* mutable_params();
  void set_allocated_params(::injective::insurance::v1beta1::Params* params);
  private:
  const ::injective::insurance::v1beta1::Params& _internal_params() const;
  ::injective::insurance::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::injective::insurance::v1beta1::Params* params);
  ::injective::insurance::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.MsgUpdateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::injective::insurance::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective.insurance.v1beta1.MsgUpdateParamsResponse) */ {
 public:
  inline MsgUpdateParamsResponse() : MsgUpdateParamsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from);
  MsgUpdateParamsResponse(MsgUpdateParamsResponse&& from) noexcept
    : MsgUpdateParamsResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParamsResponse& operator=(const MsgUpdateParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParamsResponse& operator=(MsgUpdateParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParamsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParamsResponse*>(
               &_MsgUpdateParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgUpdateParamsResponse& a, MsgUpdateParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective.insurance.v1beta1.MsgUpdateParamsResponse";
  }
  protected:
  explicit MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective.insurance.v1beta1.MsgUpdateParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_injective_2finsurance_2fv1beta1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgCreateInsuranceFund

// string sender = 1 [json_name = "sender"];
inline void MsgCreateInsuranceFund::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgCreateInsuranceFund::sender() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgCreateInsuranceFund.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateInsuranceFund::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgCreateInsuranceFund.sender)
}
inline std::string* MsgCreateInsuranceFund::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgCreateInsuranceFund.sender)
  return _s;
}
inline const std::string& MsgCreateInsuranceFund::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgCreateInsuranceFund::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::release_sender() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgCreateInsuranceFund.sender)
  return _impl_.sender_.Release();
}
inline void MsgCreateInsuranceFund::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgCreateInsuranceFund.sender)
}

// string ticker = 2 [json_name = "ticker"];
inline void MsgCreateInsuranceFund::clear_ticker() {
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& MsgCreateInsuranceFund::ticker() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgCreateInsuranceFund.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateInsuranceFund::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgCreateInsuranceFund.ticker)
}
inline std::string* MsgCreateInsuranceFund::mutable_ticker() {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgCreateInsuranceFund.ticker)
  return _s;
}
inline const std::string& MsgCreateInsuranceFund::_internal_ticker() const {
  return _impl_.ticker_.Get();
}
inline void MsgCreateInsuranceFund::_internal_set_ticker(const std::string& value) {
  ;


  _impl_.ticker_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::_internal_mutable_ticker() {
  ;
  return _impl_.ticker_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::release_ticker() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgCreateInsuranceFund.ticker)
  return _impl_.ticker_.Release();
}
inline void MsgCreateInsuranceFund::set_allocated_ticker(std::string* value) {
  _impl_.ticker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgCreateInsuranceFund.ticker)
}

// string quote_denom = 3 [json_name = "quoteDenom"];
inline void MsgCreateInsuranceFund::clear_quote_denom() {
  _impl_.quote_denom_.ClearToEmpty();
}
inline const std::string& MsgCreateInsuranceFund::quote_denom() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgCreateInsuranceFund.quote_denom)
  return _internal_quote_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateInsuranceFund::set_quote_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgCreateInsuranceFund.quote_denom)
}
inline std::string* MsgCreateInsuranceFund::mutable_quote_denom() {
  std::string* _s = _internal_mutable_quote_denom();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgCreateInsuranceFund.quote_denom)
  return _s;
}
inline const std::string& MsgCreateInsuranceFund::_internal_quote_denom() const {
  return _impl_.quote_denom_.Get();
}
inline void MsgCreateInsuranceFund::_internal_set_quote_denom(const std::string& value) {
  ;


  _impl_.quote_denom_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::_internal_mutable_quote_denom() {
  ;
  return _impl_.quote_denom_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::release_quote_denom() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgCreateInsuranceFund.quote_denom)
  return _impl_.quote_denom_.Release();
}
inline void MsgCreateInsuranceFund::set_allocated_quote_denom(std::string* value) {
  _impl_.quote_denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_denom_.IsDefault()) {
          _impl_.quote_denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgCreateInsuranceFund.quote_denom)
}

// string oracle_base = 4 [json_name = "oracleBase"];
inline void MsgCreateInsuranceFund::clear_oracle_base() {
  _impl_.oracle_base_.ClearToEmpty();
}
inline const std::string& MsgCreateInsuranceFund::oracle_base() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_base)
  return _internal_oracle_base();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateInsuranceFund::set_oracle_base(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.oracle_base_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_base)
}
inline std::string* MsgCreateInsuranceFund::mutable_oracle_base() {
  std::string* _s = _internal_mutable_oracle_base();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_base)
  return _s;
}
inline const std::string& MsgCreateInsuranceFund::_internal_oracle_base() const {
  return _impl_.oracle_base_.Get();
}
inline void MsgCreateInsuranceFund::_internal_set_oracle_base(const std::string& value) {
  ;


  _impl_.oracle_base_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::_internal_mutable_oracle_base() {
  ;
  return _impl_.oracle_base_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::release_oracle_base() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_base)
  return _impl_.oracle_base_.Release();
}
inline void MsgCreateInsuranceFund::set_allocated_oracle_base(std::string* value) {
  _impl_.oracle_base_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oracle_base_.IsDefault()) {
          _impl_.oracle_base_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_base)
}

// string oracle_quote = 5 [json_name = "oracleQuote"];
inline void MsgCreateInsuranceFund::clear_oracle_quote() {
  _impl_.oracle_quote_.ClearToEmpty();
}
inline const std::string& MsgCreateInsuranceFund::oracle_quote() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_quote)
  return _internal_oracle_quote();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateInsuranceFund::set_oracle_quote(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.oracle_quote_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_quote)
}
inline std::string* MsgCreateInsuranceFund::mutable_oracle_quote() {
  std::string* _s = _internal_mutable_oracle_quote();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_quote)
  return _s;
}
inline const std::string& MsgCreateInsuranceFund::_internal_oracle_quote() const {
  return _impl_.oracle_quote_.Get();
}
inline void MsgCreateInsuranceFund::_internal_set_oracle_quote(const std::string& value) {
  ;


  _impl_.oracle_quote_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::_internal_mutable_oracle_quote() {
  ;
  return _impl_.oracle_quote_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateInsuranceFund::release_oracle_quote() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_quote)
  return _impl_.oracle_quote_.Release();
}
inline void MsgCreateInsuranceFund::set_allocated_oracle_quote(std::string* value) {
  _impl_.oracle_quote_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oracle_quote_.IsDefault()) {
          _impl_.oracle_quote_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_quote)
}

// .injective.oracle.v1beta1.OracleType oracle_type = 6 [json_name = "oracleType"];
inline void MsgCreateInsuranceFund::clear_oracle_type() {
  _impl_.oracle_type_ = 0;
}
inline ::injective::oracle::v1beta1::OracleType MsgCreateInsuranceFund::oracle_type() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_type)
  return _internal_oracle_type();
}
inline void MsgCreateInsuranceFund::set_oracle_type(::injective::oracle::v1beta1::OracleType value) {
   _internal_set_oracle_type(value);
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgCreateInsuranceFund.oracle_type)
}
inline ::injective::oracle::v1beta1::OracleType MsgCreateInsuranceFund::_internal_oracle_type() const {
  return static_cast<::injective::oracle::v1beta1::OracleType>(_impl_.oracle_type_);
}
inline void MsgCreateInsuranceFund::_internal_set_oracle_type(::injective::oracle::v1beta1::OracleType value) {
  ;
  _impl_.oracle_type_ = value;
}

// int64 expiry = 7 [json_name = "expiry"];
inline void MsgCreateInsuranceFund::clear_expiry() {
  _impl_.expiry_ = ::int64_t{0};
}
inline ::int64_t MsgCreateInsuranceFund::expiry() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgCreateInsuranceFund.expiry)
  return _internal_expiry();
}
inline void MsgCreateInsuranceFund::set_expiry(::int64_t value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgCreateInsuranceFund.expiry)
}
inline ::int64_t MsgCreateInsuranceFund::_internal_expiry() const {
  return _impl_.expiry_;
}
inline void MsgCreateInsuranceFund::_internal_set_expiry(::int64_t value) {
  ;
  _impl_.expiry_ = value;
}

// .cosmos.base.v1beta1.Coin initial_deposit = 8 [json_name = "initialDeposit", (.gogoproto.nullable) = false];
inline bool MsgCreateInsuranceFund::has_initial_deposit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_deposit_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgCreateInsuranceFund::_internal_initial_deposit() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.initial_deposit_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgCreateInsuranceFund::initial_deposit() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgCreateInsuranceFund.initial_deposit)
  return _internal_initial_deposit();
}
inline void MsgCreateInsuranceFund::unsafe_arena_set_allocated_initial_deposit(
    ::cosmos::base::v1beta1::Coin* initial_deposit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_deposit_);
  }
  _impl_.initial_deposit_ = initial_deposit;
  if (initial_deposit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.insurance.v1beta1.MsgCreateInsuranceFund.initial_deposit)
}
inline ::cosmos::base::v1beta1::Coin* MsgCreateInsuranceFund::release_initial_deposit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.initial_deposit_;
  _impl_.initial_deposit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgCreateInsuranceFund::unsafe_arena_release_initial_deposit() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgCreateInsuranceFund.initial_deposit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.initial_deposit_;
  _impl_.initial_deposit_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgCreateInsuranceFund::_internal_mutable_initial_deposit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.initial_deposit_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.initial_deposit_ = p;
  }
  return _impl_.initial_deposit_;
}
inline ::cosmos::base::v1beta1::Coin* MsgCreateInsuranceFund::mutable_initial_deposit() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_initial_deposit();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgCreateInsuranceFund.initial_deposit)
  return _msg;
}
inline void MsgCreateInsuranceFund::set_allocated_initial_deposit(::cosmos::base::v1beta1::Coin* initial_deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.initial_deposit_);
  }
  if (initial_deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_deposit));
    if (message_arena != submessage_arena) {
      initial_deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_deposit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.initial_deposit_ = initial_deposit;
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgCreateInsuranceFund.initial_deposit)
}

// -------------------------------------------------------------------

// MsgCreateInsuranceFundResponse

// -------------------------------------------------------------------

// MsgUnderwrite

// string sender = 1 [json_name = "sender"];
inline void MsgUnderwrite::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgUnderwrite::sender() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgUnderwrite.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUnderwrite::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgUnderwrite.sender)
}
inline std::string* MsgUnderwrite::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgUnderwrite.sender)
  return _s;
}
inline const std::string& MsgUnderwrite::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgUnderwrite::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUnderwrite::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUnderwrite::release_sender() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgUnderwrite.sender)
  return _impl_.sender_.Release();
}
inline void MsgUnderwrite::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgUnderwrite.sender)
}

// string market_id = 2 [json_name = "marketId"];
inline void MsgUnderwrite::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MsgUnderwrite::market_id() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgUnderwrite.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUnderwrite::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgUnderwrite.market_id)
}
inline std::string* MsgUnderwrite::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgUnderwrite.market_id)
  return _s;
}
inline const std::string& MsgUnderwrite::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MsgUnderwrite::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUnderwrite::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUnderwrite::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgUnderwrite.market_id)
  return _impl_.market_id_.Release();
}
inline void MsgUnderwrite::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgUnderwrite.market_id)
}

// .cosmos.base.v1beta1.Coin deposit = 3 [json_name = "deposit", (.gogoproto.nullable) = false];
inline bool MsgUnderwrite::has_deposit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deposit_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgUnderwrite::_internal_deposit() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.deposit_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgUnderwrite::deposit() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgUnderwrite.deposit)
  return _internal_deposit();
}
inline void MsgUnderwrite::unsafe_arena_set_allocated_deposit(
    ::cosmos::base::v1beta1::Coin* deposit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposit_);
  }
  _impl_.deposit_ = deposit;
  if (deposit) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.insurance.v1beta1.MsgUnderwrite.deposit)
}
inline ::cosmos::base::v1beta1::Coin* MsgUnderwrite::release_deposit() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.deposit_;
  _impl_.deposit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgUnderwrite::unsafe_arena_release_deposit() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgUnderwrite.deposit)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.deposit_;
  _impl_.deposit_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgUnderwrite::_internal_mutable_deposit() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.deposit_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.deposit_ = p;
  }
  return _impl_.deposit_;
}
inline ::cosmos::base::v1beta1::Coin* MsgUnderwrite::mutable_deposit() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_deposit();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgUnderwrite.deposit)
  return _msg;
}
inline void MsgUnderwrite::set_allocated_deposit(::cosmos::base::v1beta1::Coin* deposit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposit_);
  }
  if (deposit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit));
    if (message_arena != submessage_arena) {
      deposit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deposit_ = deposit;
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgUnderwrite.deposit)
}

// -------------------------------------------------------------------

// MsgUnderwriteResponse

// -------------------------------------------------------------------

// MsgRequestRedemption

// string sender = 1 [json_name = "sender"];
inline void MsgRequestRedemption::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgRequestRedemption::sender() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgRequestRedemption.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRequestRedemption::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgRequestRedemption.sender)
}
inline std::string* MsgRequestRedemption::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgRequestRedemption.sender)
  return _s;
}
inline const std::string& MsgRequestRedemption::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgRequestRedemption::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRequestRedemption::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRequestRedemption::release_sender() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgRequestRedemption.sender)
  return _impl_.sender_.Release();
}
inline void MsgRequestRedemption::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgRequestRedemption.sender)
}

// string market_id = 2 [json_name = "marketId"];
inline void MsgRequestRedemption::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MsgRequestRedemption::market_id() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgRequestRedemption.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRequestRedemption::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgRequestRedemption.market_id)
}
inline std::string* MsgRequestRedemption::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgRequestRedemption.market_id)
  return _s;
}
inline const std::string& MsgRequestRedemption::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MsgRequestRedemption::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRequestRedemption::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRequestRedemption::release_market_id() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgRequestRedemption.market_id)
  return _impl_.market_id_.Release();
}
inline void MsgRequestRedemption::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgRequestRedemption.market_id)
}

// .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false];
inline bool MsgRequestRedemption::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgRequestRedemption::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgRequestRedemption::amount() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgRequestRedemption.amount)
  return _internal_amount();
}
inline void MsgRequestRedemption::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.insurance.v1beta1.MsgRequestRedemption.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgRequestRedemption::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgRequestRedemption::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgRequestRedemption.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgRequestRedemption::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgRequestRedemption::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgRequestRedemption.amount)
  return _msg;
}
inline void MsgRequestRedemption::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgRequestRedemption.amount)
}

// -------------------------------------------------------------------

// MsgRequestRedemptionResponse

// -------------------------------------------------------------------

// MsgUpdateParams

// string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateParams::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateParams::authority() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgUpdateParams.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateParams::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective.insurance.v1beta1.MsgUpdateParams.authority)
}
inline std::string* MsgUpdateParams::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgUpdateParams.authority)
  return _s;
}
inline const std::string& MsgUpdateParams::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateParams::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::release_authority() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgUpdateParams.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateParams::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgUpdateParams.authority)
}

// .injective.insurance.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
inline bool MsgUpdateParams::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::injective::insurance::v1beta1::Params& MsgUpdateParams::_internal_params() const {
  const ::injective::insurance::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective::insurance::v1beta1::Params&>(
      ::injective::insurance::v1beta1::_Params_default_instance_);
}
inline const ::injective::insurance::v1beta1::Params& MsgUpdateParams::params() const {
  // @@protoc_insertion_point(field_get:injective.insurance.v1beta1.MsgUpdateParams.params)
  return _internal_params();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_params(
    ::injective::insurance::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective.insurance.v1beta1.MsgUpdateParams.params)
}
inline ::injective::insurance::v1beta1::Params* MsgUpdateParams::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::insurance::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective::insurance::v1beta1::Params* MsgUpdateParams::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:injective.insurance.v1beta1.MsgUpdateParams.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective::insurance::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::injective::insurance::v1beta1::Params* MsgUpdateParams::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective::insurance::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::injective::insurance::v1beta1::Params* MsgUpdateParams::mutable_params() {
  ::injective::insurance::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:injective.insurance.v1beta1.MsgUpdateParams.params)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_params(::injective::insurance::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:injective.insurance.v1beta1.MsgUpdateParams.params)
}

// -------------------------------------------------------------------

// MsgUpdateParamsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace insurance
}  // namespace injective


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_injective_2finsurance_2fv1beta1_2ftx_2eproto_2epb_2eh

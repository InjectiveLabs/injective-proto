// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/insurance/v1beta1/tx.proto

#include "injective/insurance/v1beta1/tx.pb.h"
#include "injective/insurance/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace insurance {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/injective.insurance.v1beta1.Msg/CreateInsuranceFund",
  "/injective.insurance.v1beta1.Msg/Underwrite",
  "/injective.insurance.v1beta1.Msg/RequestRedemption",
  "/injective.insurance.v1beta1.Msg/UpdateParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateInsuranceFund_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Underwrite_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestRedemption_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateInsuranceFund_, context, request, response);
}

void Msg::Stub::async::CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInsuranceFund_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateInsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateInsuranceFund_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* Msg::Stub::PrepareAsyncCreateInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse, ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateInsuranceFund_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse>* Msg::Stub::AsyncCreateInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateInsuranceFundRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::MsgUnderwrite, ::injective::insurance::v1beta1::MsgUnderwriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Underwrite_, context, request, response);
}

void Msg::Stub::async::Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::MsgUnderwrite, ::injective::insurance::v1beta1::MsgUnderwriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Underwrite_, context, request, response, std::move(f));
}

void Msg::Stub::async::Underwrite(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Underwrite_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUnderwriteResponse>* Msg::Stub::PrepareAsyncUnderwriteRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::MsgUnderwriteResponse, ::injective::insurance::v1beta1::MsgUnderwrite, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Underwrite_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUnderwriteResponse>* Msg::Stub::AsyncUnderwriteRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnderwriteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::MsgRequestRedemption, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestRedemption_, context, request, response);
}

void Msg::Stub::async::RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::MsgRequestRedemption, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestRedemption_, context, request, response, std::move(f));
}

void Msg::Stub::async::RequestRedemption(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestRedemption_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* Msg::Stub::PrepareAsyncRequestRedemptionRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse, ::injective::insurance::v1beta1::MsgRequestRedemption, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestRedemption_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgRequestRedemptionResponse>* Msg::Stub::AsyncRequestRedemptionRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestRedemptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::MsgUpdateParams, ::injective::insurance::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::MsgUpdateParams, ::injective::insurance::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::MsgUpdateParamsResponse, ::injective::insurance::v1beta1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::insurance::v1beta1::MsgCreateInsuranceFund, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* req,
             ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* resp) {
               return service->CreateInsuranceFund(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::insurance::v1beta1::MsgUnderwrite, ::injective::insurance::v1beta1::MsgUnderwriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::MsgUnderwrite* req,
             ::injective::insurance::v1beta1::MsgUnderwriteResponse* resp) {
               return service->Underwrite(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::insurance::v1beta1::MsgRequestRedemption, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::MsgRequestRedemption* req,
             ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* resp) {
               return service->RequestRedemption(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::injective::insurance::v1beta1::MsgUpdateParams, ::injective::insurance::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::MsgUpdateParams* req,
             ::injective::insurance::v1beta1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::CreateInsuranceFund(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::MsgCreateInsuranceFund* request, ::injective::insurance::v1beta1::MsgCreateInsuranceFundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Underwrite(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::MsgUnderwrite* request, ::injective::insurance::v1beta1::MsgUnderwriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::RequestRedemption(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::MsgRequestRedemption* request, ::injective::insurance::v1beta1::MsgRequestRedemptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::MsgUpdateParams* request, ::injective::insurance::v1beta1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace insurance
}  // namespace v1beta1


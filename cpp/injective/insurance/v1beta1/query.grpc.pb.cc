// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: injective/insurance/v1beta1/query.proto

#include "injective/insurance/v1beta1/query.pb.h"
#include "injective/insurance/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective {
namespace insurance {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/injective.insurance.v1beta1.Query/InsuranceParams",
  "/injective.insurance.v1beta1.Query/InsuranceFund",
  "/injective.insurance.v1beta1.Query/InsuranceFunds",
  "/injective.insurance.v1beta1.Query/EstimatedRedemptions",
  "/injective.insurance.v1beta1.Query/PendingRedemptions",
  "/injective.insurance.v1beta1.Query/InsuranceModuleState",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InsuranceParams_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsuranceFund_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsuranceFunds_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimatedRedemptions_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PendingRedemptions_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsuranceModuleState_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsuranceParams_, context, request, response);
}

void Query::Stub::async::InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsuranceParams_, context, request, response, std::move(f));
}

void Query::Stub::async::InsuranceParams(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsuranceParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* Query::Stub::PrepareAsyncInsuranceParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse, ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsuranceParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceParamsResponse>* Query::Stub::AsyncInsuranceParamsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsuranceParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::injective::insurance::v1beta1::QueryInsuranceFundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsuranceFund_, context, request, response);
}

void Query::Stub::async::InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::injective::insurance::v1beta1::QueryInsuranceFundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsuranceFund_, context, request, response, std::move(f));
}

void Query::Stub::async::InsuranceFund(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsuranceFund_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* Query::Stub::PrepareAsyncInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::QueryInsuranceFundResponse, ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsuranceFund_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundResponse>* Query::Stub::AsyncInsuranceFundRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsuranceFundRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsuranceFunds_, context, request, response);
}

void Query::Stub::async::InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsuranceFunds_, context, request, response, std::move(f));
}

void Query::Stub::async::InsuranceFunds(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsuranceFunds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* Query::Stub::PrepareAsyncInsuranceFundsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse, ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsuranceFunds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryInsuranceFundsResponse>* Query::Stub::AsyncInsuranceFundsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsuranceFundsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EstimatedRedemptions_, context, request, response);
}

void Query::Stub::async::EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimatedRedemptions_, context, request, response, std::move(f));
}

void Query::Stub::async::EstimatedRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EstimatedRedemptions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* Query::Stub::PrepareAsyncEstimatedRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EstimatedRedemptions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse>* Query::Stub::AsyncEstimatedRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEstimatedRedemptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PendingRedemptions_, context, request, response);
}

void Query::Stub::async::PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PendingRedemptions_, context, request, response, std::move(f));
}

void Query::Stub::async::PendingRedemptions(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PendingRedemptions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* Query::Stub::PrepareAsyncPendingRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse, ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PendingRedemptions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse>* Query::Stub::AsyncPendingRedemptionsRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPendingRedemptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective::insurance::v1beta1::QueryModuleStateRequest, ::injective::insurance::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsuranceModuleState_, context, request, response);
}

void Query::Stub::async::InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective::insurance::v1beta1::QueryModuleStateRequest, ::injective::insurance::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsuranceModuleState_, context, request, response, std::move(f));
}

void Query::Stub::async::InsuranceModuleState(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsuranceModuleState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryModuleStateResponse>* Query::Stub::PrepareAsyncInsuranceModuleStateRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective::insurance::v1beta1::QueryModuleStateResponse, ::injective::insurance::v1beta1::QueryModuleStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsuranceModuleState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective::insurance::v1beta1::QueryModuleStateResponse>* Query::Stub::AsyncInsuranceModuleStateRaw(::grpc::ClientContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsuranceModuleStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::insurance::v1beta1::QueryInsuranceParamsRequest, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* req,
             ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* resp) {
               return service->InsuranceParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::insurance::v1beta1::QueryInsuranceFundRequest, ::injective::insurance::v1beta1::QueryInsuranceFundResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* req,
             ::injective::insurance::v1beta1::QueryInsuranceFundResponse* resp) {
               return service->InsuranceFund(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::insurance::v1beta1::QueryInsuranceFundsRequest, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* req,
             ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* resp) {
               return service->InsuranceFunds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* req,
             ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* resp) {
               return service->EstimatedRedemptions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* req,
             ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* resp) {
               return service->PendingRedemptions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::injective::insurance::v1beta1::QueryModuleStateRequest, ::injective::insurance::v1beta1::QueryModuleStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective::insurance::v1beta1::QueryModuleStateRequest* req,
             ::injective::insurance::v1beta1::QueryModuleStateResponse* resp) {
               return service->InsuranceModuleState(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::InsuranceParams(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceParamsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::InsuranceFund(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::InsuranceFunds(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryInsuranceFundsRequest* request, ::injective::insurance::v1beta1::QueryInsuranceFundsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::EstimatedRedemptions(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryEstimatedRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryEstimatedRedemptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PendingRedemptions(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryPendingRedemptionsRequest* request, ::injective::insurance::v1beta1::QueryPendingRedemptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::InsuranceModuleState(::grpc::ServerContext* context, const ::injective::insurance::v1beta1::QueryModuleStateRequest* request, ::injective::insurance::v1beta1::QueryModuleStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective
}  // namespace insurance
}  // namespace v1beta1


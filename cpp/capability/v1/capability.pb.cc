// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: capability/v1/capability.proto

#include "capability/v1/capability.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace capability {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Capability::Capability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapabilityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapabilityDefaultTypeInternal() {}
  union {
    Capability _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapabilityDefaultTypeInternal _Capability_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Owner::Owner(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.module_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OwnerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerDefaultTypeInternal() {}
  union {
    Owner _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerDefaultTypeInternal _Owner_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CapabilityOwners::CapabilityOwners(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owners_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CapabilityOwnersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapabilityOwnersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapabilityOwnersDefaultTypeInternal() {}
  union {
    CapabilityOwners _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapabilityOwnersDefaultTypeInternal _CapabilityOwners_default_instance_;
}  // namespace v1
}  // namespace capability
static ::_pb::Metadata file_level_metadata_capability_2fv1_2fcapability_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_capability_2fv1_2fcapability_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_capability_2fv1_2fcapability_2eproto = nullptr;
const ::uint32_t TableStruct_capability_2fv1_2fcapability_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::capability::v1::Capability, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::capability::v1::Capability, _impl_.index_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::capability::v1::Owner, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::capability::v1::Owner, _impl_.module_),
    PROTOBUF_FIELD_OFFSET(::capability::v1::Owner, _impl_.name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::capability::v1::CapabilityOwners, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::capability::v1::CapabilityOwners, _impl_.owners_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::capability::v1::Capability)},
        { 9, -1, -1, sizeof(::capability::v1::Owner)},
        { 19, -1, -1, sizeof(::capability::v1::CapabilityOwners)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::capability::v1::_Capability_default_instance_._instance,
    &::capability::v1::_Owner_default_instance_._instance,
    &::capability::v1::_CapabilityOwners_default_instance_._instance,
};
const char descriptor_table_protodef_capability_2fv1_2fcapability_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036capability/v1/capability.proto\022\rcapabi"
    "lity.v1\032\024gogoproto/gogo.proto\032\021amino/ami"
    "no.proto\"(\n\nCapability\022\024\n\005index\030\001 \001(\004R\005i"
    "ndex:\004\230\240\037\000\"=\n\005Owner\022\026\n\006module\030\001 \001(\tR\006mod"
    "ule\022\022\n\004name\030\002 \001(\tR\004name:\010\210\240\037\000\230\240\037\000\"K\n\020Cap"
    "abilityOwners\0227\n\006owners\030\001 \003(\0132\024.capabili"
    "ty.v1.OwnerB\t\310\336\037\000\250\347\260*\001R\006ownersB\254\001\n\021com.c"
    "apability.v1B\017CapabilityProtoP\001Z1github."
    "com/cosmos/ibc-go/modules/capability/typ"
    "es\242\002\003CXX\252\002\rCapability.V1\312\002\rCapability\\V1"
    "\342\002\031Capability\\V1\\GPBMetadata\352\002\016Capabilit"
    "y::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_capability_2fv1_2fcapability_2eproto_deps[2] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_capability_2fv1_2fcapability_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_capability_2fv1_2fcapability_2eproto = {
    false,
    false,
    453,
    descriptor_table_protodef_capability_2fv1_2fcapability_2eproto,
    "capability/v1/capability.proto",
    &descriptor_table_capability_2fv1_2fcapability_2eproto_once,
    descriptor_table_capability_2fv1_2fcapability_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_capability_2fv1_2fcapability_2eproto::offsets,
    file_level_metadata_capability_2fv1_2fcapability_2eproto,
    file_level_enum_descriptors_capability_2fv1_2fcapability_2eproto,
    file_level_service_descriptors_capability_2fv1_2fcapability_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_capability_2fv1_2fcapability_2eproto_getter() {
  return &descriptor_table_capability_2fv1_2fcapability_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_capability_2fv1_2fcapability_2eproto(&descriptor_table_capability_2fv1_2fcapability_2eproto);
namespace capability {
namespace v1 {
// ===================================================================

class Capability::_Internal {
 public:
};

Capability::Capability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:capability.v1.Capability)
}
Capability::Capability(const Capability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:capability.v1.Capability)
}

inline void Capability::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.index_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Capability::~Capability() {
  // @@protoc_insertion_point(destructor:capability.v1.Capability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Capability::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Capability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Capability::Clear() {
// @@protoc_insertion_point(message_clear_start:capability.v1.Capability)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Capability::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:capability.v1.Capability)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:capability.v1.Capability)
  return target;
}

::size_t Capability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:capability.v1.Capability)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Capability::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Capability::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Capability::GetClassData() const { return &_class_data_; }


void Capability::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Capability*>(&to_msg);
  auto& from = static_cast<const Capability&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:capability.v1.Capability)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Capability::CopyFrom(const Capability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:capability.v1.Capability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capability::IsInitialized() const {
  return true;
}

void Capability::InternalSwap(Capability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capability::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_capability_2fv1_2fcapability_2eproto_getter, &descriptor_table_capability_2fv1_2fcapability_2eproto_once,
      file_level_metadata_capability_2fv1_2fcapability_2eproto[0]);
}
// ===================================================================

class Owner::_Internal {
 public:
};

Owner::Owner(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:capability.v1.Owner)
}
Owner::Owner(const Owner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Owner* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.module_) {}

    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module().empty()) {
    _this->_impl_.module_.Set(from._internal_module(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:capability.v1.Owner)
}

inline void Owner::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.module_) {}

    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Owner::~Owner() {
  // @@protoc_insertion_point(destructor:capability.v1.Owner)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Owner::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.module_.Destroy();
  _impl_.name_.Destroy();
}

void Owner::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Owner::Clear() {
// @@protoc_insertion_point(message_clear_start:capability.v1.Owner)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.module_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Owner::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string module = 1 [json_name = "module"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_module();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "capability.v1.Owner.module"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "capability.v1.Owner.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Owner::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:capability.v1.Owner)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string module = 1 [json_name = "module"];
  if (!this->_internal_module().empty()) {
    const std::string& _s = this->_internal_module();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "capability.v1.Owner.module");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "capability.v1.Owner.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:capability.v1.Owner)
  return target;
}

::size_t Owner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:capability.v1.Owner)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string module = 1 [json_name = "module"];
  if (!this->_internal_module().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_module());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Owner::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Owner::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Owner::GetClassData() const { return &_class_data_; }


void Owner::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Owner*>(&to_msg);
  auto& from = static_cast<const Owner&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:capability.v1.Owner)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_module().empty()) {
    _this->_internal_set_module(from._internal_module());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Owner::CopyFrom(const Owner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:capability.v1.Owner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Owner::IsInitialized() const {
  return true;
}

void Owner::InternalSwap(Owner* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.module_, lhs_arena,
                                       &other->_impl_.module_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Owner::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_capability_2fv1_2fcapability_2eproto_getter, &descriptor_table_capability_2fv1_2fcapability_2eproto_once,
      file_level_metadata_capability_2fv1_2fcapability_2eproto[1]);
}
// ===================================================================

class CapabilityOwners::_Internal {
 public:
};

CapabilityOwners::CapabilityOwners(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:capability.v1.CapabilityOwners)
}
CapabilityOwners::CapabilityOwners(const CapabilityOwners& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CapabilityOwners* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owners_){from._impl_.owners_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:capability.v1.CapabilityOwners)
}

inline void CapabilityOwners::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.owners_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CapabilityOwners::~CapabilityOwners() {
  // @@protoc_insertion_point(destructor:capability.v1.CapabilityOwners)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CapabilityOwners::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_owners()->~RepeatedPtrField();
}

void CapabilityOwners::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CapabilityOwners::Clear() {
// @@protoc_insertion_point(message_clear_start:capability.v1.CapabilityOwners)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_owners()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CapabilityOwners::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .capability.v1.Owner owners = 1 [json_name = "owners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CapabilityOwners::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:capability.v1.CapabilityOwners)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .capability.v1.Owner owners = 1 [json_name = "owners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owners_size()); i < n; i++) {
    const auto& repfield = this->_internal_owners(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:capability.v1.CapabilityOwners)
  return target;
}

::size_t CapabilityOwners::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:capability.v1.CapabilityOwners)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .capability.v1.Owner owners = 1 [json_name = "owners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_owners_size();
  for (const auto& msg : this->_internal_owners()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CapabilityOwners::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CapabilityOwners::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CapabilityOwners::GetClassData() const { return &_class_data_; }


void CapabilityOwners::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CapabilityOwners*>(&to_msg);
  auto& from = static_cast<const CapabilityOwners&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:capability.v1.CapabilityOwners)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_owners()->MergeFrom(from._internal_owners());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CapabilityOwners::CopyFrom(const CapabilityOwners& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:capability.v1.CapabilityOwners)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CapabilityOwners::IsInitialized() const {
  return true;
}

void CapabilityOwners::InternalSwap(CapabilityOwners* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_owners()->InternalSwap(other->_internal_mutable_owners());
}

::PROTOBUF_NAMESPACE_ID::Metadata CapabilityOwners::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_capability_2fv1_2fcapability_2eproto_getter, &descriptor_table_capability_2fv1_2fcapability_2eproto_once,
      file_level_metadata_capability_2fv1_2fcapability_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace capability
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::capability::v1::Capability*
Arena::CreateMaybeMessage< ::capability::v1::Capability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::capability::v1::Capability >(arena);
}
template<> PROTOBUF_NOINLINE ::capability::v1::Owner*
Arena::CreateMaybeMessage< ::capability::v1::Owner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::capability::v1::Owner >(arena);
}
template<> PROTOBUF_NOINLINE ::capability::v1::CapabilityOwners*
Arena::CreateMaybeMessage< ::capability::v1::CapabilityOwners >(Arena* arena) {
  return Arena::CreateMessageInternal< ::capability::v1::CapabilityOwners >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

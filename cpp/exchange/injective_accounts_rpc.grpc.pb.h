// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_accounts_rpc.proto
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveAccountsRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#ifndef GRPC_exchange_2finjective_5faccounts_5frpc_2eproto__INCLUDED
#define GRPC_exchange_2finjective_5faccounts_5frpc_2eproto__INCLUDED

#include "exchange/injective_accounts_rpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective_accounts_rpc {

// InjectiveAccountsRPC defines gRPC API of Exchange Accounts provider.
class InjectiveAccountsRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "injective_accounts_rpc.InjectiveAccountsRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Provide the account's portfolio value in USD.
    virtual ::grpc::Status Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::injective_accounts_rpc::PortfolioResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::PortfolioResponse>> AsyncPortfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::PortfolioResponse>>(AsyncPortfolioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::PortfolioResponse>> PrepareAsyncPortfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::PortfolioResponse>>(PrepareAsyncPortfolioRaw(context, request, cq));
    }
    // List order states by order hashes
    virtual ::grpc::Status OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::injective_accounts_rpc::OrderStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::OrderStatesResponse>> AsyncOrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::OrderStatesResponse>>(AsyncOrderStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::OrderStatesResponse>> PrepareAsyncOrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::OrderStatesResponse>>(PrepareAsyncOrderStatesRaw(context, request, cq));
    }
    // List all subaccounts IDs of an account address
    virtual ::grpc::Status SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::injective_accounts_rpc::SubaccountsListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountsListResponse>> AsyncSubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountsListResponse>>(AsyncSubaccountsListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountsListResponse>> PrepareAsyncSubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountsListResponse>>(PrepareAsyncSubaccountsListRaw(context, request, cq));
    }
    // List subaccount balances for the provided denoms.
    virtual ::grpc::Status SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalancesListResponse>> AsyncSubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalancesListResponse>>(AsyncSubaccountBalancesListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalancesListResponse>> PrepareAsyncSubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalancesListResponse>>(PrepareAsyncSubaccountBalancesListRaw(context, request, cq));
    }
    // Gets a balance for specific coin denom
    virtual ::grpc::Status SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::injective_accounts_rpc::SubaccountBalanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalanceResponse>> AsyncSubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalanceResponse>>(AsyncSubaccountBalanceEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalanceResponse>> PrepareAsyncSubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalanceResponse>>(PrepareAsyncSubaccountBalanceEndpointRaw(context, request, cq));
    }
    // StreamSubaccountBalance streams new balance changes for a specified
    // subaccount and denoms. If no denoms are provided, all denom changes are
    // streamed.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>> StreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>>(StreamSubaccountBalanceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>> AsyncStreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>>(AsyncStreamSubaccountBalanceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>> PrepareAsyncStreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>>(PrepareAsyncStreamSubaccountBalanceRaw(context, request, cq));
    }
    // Get subaccount's deposits and withdrawals history
    virtual ::grpc::Status SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::injective_accounts_rpc::SubaccountHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountHistoryResponse>> AsyncSubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountHistoryResponse>>(AsyncSubaccountHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountHistoryResponse>> PrepareAsyncSubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountHistoryResponse>>(PrepareAsyncSubaccountHistoryRaw(context, request, cq));
    }
    // Get subaccount's orders summary
    virtual ::grpc::Status SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>> AsyncSubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>>(AsyncSubaccountOrderSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>> PrepareAsyncSubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>>(PrepareAsyncSubaccountOrderSummaryRaw(context, request, cq));
    }
    // Provide historical trading rewards
    virtual ::grpc::Status Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::injective_accounts_rpc::RewardsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::RewardsResponse>> AsyncRewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::RewardsResponse>>(AsyncRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::RewardsResponse>> PrepareAsyncRewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::RewardsResponse>>(PrepareAsyncRewardsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Provide the account's portfolio value in USD.
      virtual void Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List order states by order hashes
      virtual void OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all subaccounts IDs of an account address
      virtual void SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List subaccount balances for the provided denoms.
      virtual void SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a balance for specific coin denom
      virtual void SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // StreamSubaccountBalance streams new balance changes for a specified
      // subaccount and denoms. If no denoms are provided, all denom changes are
      // streamed.
      virtual void StreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* request, ::grpc::ClientReadReactor< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* reactor) = 0;
      // Get subaccount's deposits and withdrawals history
      virtual void SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get subaccount's orders summary
      virtual void SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Provide historical trading rewards
      virtual void Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::PortfolioResponse>* AsyncPortfolioRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::PortfolioResponse>* PrepareAsyncPortfolioRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::OrderStatesResponse>* AsyncOrderStatesRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::OrderStatesResponse>* PrepareAsyncOrderStatesRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountsListResponse>* AsyncSubaccountsListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountsListResponse>* PrepareAsyncSubaccountsListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalancesListResponse>* AsyncSubaccountBalancesListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalancesListResponse>* PrepareAsyncSubaccountBalancesListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalanceResponse>* AsyncSubaccountBalanceEndpointRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountBalanceResponse>* PrepareAsyncSubaccountBalanceEndpointRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* StreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* AsyncStreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* PrepareAsyncStreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountHistoryResponse>* AsyncSubaccountHistoryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountHistoryResponse>* PrepareAsyncSubaccountHistoryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* AsyncSubaccountOrderSummaryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* PrepareAsyncSubaccountOrderSummaryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::RewardsResponse>* AsyncRewardsRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_accounts_rpc::RewardsResponse>* PrepareAsyncRewardsRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::injective_accounts_rpc::PortfolioResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::PortfolioResponse>> AsyncPortfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::PortfolioResponse>>(AsyncPortfolioRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::PortfolioResponse>> PrepareAsyncPortfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::PortfolioResponse>>(PrepareAsyncPortfolioRaw(context, request, cq));
    }
    ::grpc::Status OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::injective_accounts_rpc::OrderStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::OrderStatesResponse>> AsyncOrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::OrderStatesResponse>>(AsyncOrderStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::OrderStatesResponse>> PrepareAsyncOrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::OrderStatesResponse>>(PrepareAsyncOrderStatesRaw(context, request, cq));
    }
    ::grpc::Status SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::injective_accounts_rpc::SubaccountsListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountsListResponse>> AsyncSubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountsListResponse>>(AsyncSubaccountsListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountsListResponse>> PrepareAsyncSubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountsListResponse>>(PrepareAsyncSubaccountsListRaw(context, request, cq));
    }
    ::grpc::Status SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalancesListResponse>> AsyncSubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalancesListResponse>>(AsyncSubaccountBalancesListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalancesListResponse>> PrepareAsyncSubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalancesListResponse>>(PrepareAsyncSubaccountBalancesListRaw(context, request, cq));
    }
    ::grpc::Status SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::injective_accounts_rpc::SubaccountBalanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalanceResponse>> AsyncSubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalanceResponse>>(AsyncSubaccountBalanceEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalanceResponse>> PrepareAsyncSubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalanceResponse>>(PrepareAsyncSubaccountBalanceEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>> StreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>>(StreamSubaccountBalanceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>> AsyncStreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>>(AsyncStreamSubaccountBalanceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>> PrepareAsyncStreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>>(PrepareAsyncStreamSubaccountBalanceRaw(context, request, cq));
    }
    ::grpc::Status SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::injective_accounts_rpc::SubaccountHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountHistoryResponse>> AsyncSubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountHistoryResponse>>(AsyncSubaccountHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountHistoryResponse>> PrepareAsyncSubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountHistoryResponse>>(PrepareAsyncSubaccountHistoryRaw(context, request, cq));
    }
    ::grpc::Status SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>> AsyncSubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>>(AsyncSubaccountOrderSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>> PrepareAsyncSubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>>(PrepareAsyncSubaccountOrderSummaryRaw(context, request, cq));
    }
    ::grpc::Status Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::injective_accounts_rpc::RewardsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::RewardsResponse>> AsyncRewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::RewardsResponse>>(AsyncRewardsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::RewardsResponse>> PrepareAsyncRewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::RewardsResponse>>(PrepareAsyncRewardsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response, std::function<void(::grpc::Status)>) override;
      void Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response, std::function<void(::grpc::Status)>) override;
      void SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response, std::function<void(::grpc::Status)>) override;
      void SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response, std::function<void(::grpc::Status)>) override;
      void SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* request, ::grpc::ClientReadReactor< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* reactor) override;
      void SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response, std::function<void(::grpc::Status)>) override;
      void SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response, std::function<void(::grpc::Status)>) override;
      void Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::PortfolioResponse>* AsyncPortfolioRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::PortfolioResponse>* PrepareAsyncPortfolioRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::OrderStatesResponse>* AsyncOrderStatesRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::OrderStatesResponse>* PrepareAsyncOrderStatesRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountsListResponse>* AsyncSubaccountsListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountsListResponse>* PrepareAsyncSubaccountsListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalancesListResponse>* AsyncSubaccountBalancesListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalancesListResponse>* PrepareAsyncSubaccountBalancesListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalanceResponse>* AsyncSubaccountBalanceEndpointRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalanceResponse>* PrepareAsyncSubaccountBalanceEndpointRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* StreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request) override;
    ::grpc::ClientAsyncReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* AsyncStreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* PrepareAsyncStreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountHistoryResponse>* AsyncSubaccountHistoryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountHistoryResponse>* PrepareAsyncSubaccountHistoryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* AsyncSubaccountOrderSummaryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* PrepareAsyncSubaccountOrderSummaryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::RewardsResponse>* AsyncRewardsRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::RewardsResponse>* PrepareAsyncRewardsRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Portfolio_;
    const ::grpc::internal::RpcMethod rpcmethod_OrderStates_;
    const ::grpc::internal::RpcMethod rpcmethod_SubaccountsList_;
    const ::grpc::internal::RpcMethod rpcmethod_SubaccountBalancesList_;
    const ::grpc::internal::RpcMethod rpcmethod_SubaccountBalanceEndpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamSubaccountBalance_;
    const ::grpc::internal::RpcMethod rpcmethod_SubaccountHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_SubaccountOrderSummary_;
    const ::grpc::internal::RpcMethod rpcmethod_Rewards_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Provide the account's portfolio value in USD.
    virtual ::grpc::Status Portfolio(::grpc::ServerContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response);
    // List order states by order hashes
    virtual ::grpc::Status OrderStates(::grpc::ServerContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response);
    // List all subaccounts IDs of an account address
    virtual ::grpc::Status SubaccountsList(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response);
    // List subaccount balances for the provided denoms.
    virtual ::grpc::Status SubaccountBalancesList(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response);
    // Gets a balance for specific coin denom
    virtual ::grpc::Status SubaccountBalanceEndpoint(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response);
    // StreamSubaccountBalance streams new balance changes for a specified
    // subaccount and denoms. If no denoms are provided, all denom changes are
    // streamed.
    virtual ::grpc::Status StreamSubaccountBalance(::grpc::ServerContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* request, ::grpc::ServerWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* writer);
    // Get subaccount's deposits and withdrawals history
    virtual ::grpc::Status SubaccountHistory(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response);
    // Get subaccount's orders summary
    virtual ::grpc::Status SubaccountOrderSummary(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response);
    // Provide historical trading rewards
    virtual ::grpc::Status Rewards(::grpc::ServerContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Portfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Portfolio() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Portfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Portfolio(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::PortfolioRequest* /*request*/, ::injective_accounts_rpc::PortfolioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPortfolio(::grpc::ServerContext* context, ::injective_accounts_rpc::PortfolioRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_accounts_rpc::PortfolioResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OrderStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OrderStates() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_OrderStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OrderStates(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::OrderStatesRequest* /*request*/, ::injective_accounts_rpc::OrderStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOrderStates(::grpc::ServerContext* context, ::injective_accounts_rpc::OrderStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_accounts_rpc::OrderStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubaccountsList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubaccountsList() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubaccountsList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountsList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountsListRequest* /*request*/, ::injective_accounts_rpc::SubaccountsListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountsList(::grpc::ServerContext* context, ::injective_accounts_rpc::SubaccountsListRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_accounts_rpc::SubaccountsListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubaccountBalancesList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubaccountBalancesList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubaccountBalancesList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalancesList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalancesListRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalancesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountBalancesList(::grpc::ServerContext* context, ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_accounts_rpc::SubaccountBalancesListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubaccountBalanceEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubaccountBalanceEndpoint() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SubaccountBalanceEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalanceEndpoint(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalanceRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountBalanceEndpoint(::grpc::ServerContext* context, ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_accounts_rpc::SubaccountBalanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamSubaccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamSubaccountBalance() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StreamSubaccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamSubaccountBalance(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* /*request*/, ::grpc::ServerWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamSubaccountBalance(::grpc::ServerContext* context, ::injective_accounts_rpc::StreamSubaccountBalanceRequest* request, ::grpc::ServerAsyncWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubaccountHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubaccountHistory() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SubaccountHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountHistory(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountHistoryRequest* /*request*/, ::injective_accounts_rpc::SubaccountHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountHistory(::grpc::ServerContext* context, ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_accounts_rpc::SubaccountHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubaccountOrderSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubaccountOrderSummary() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SubaccountOrderSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountOrderSummary(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* /*request*/, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountOrderSummary(::grpc::ServerContext* context, ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rewards() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Rewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rewards(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::RewardsRequest* /*request*/, ::injective_accounts_rpc::RewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRewards(::grpc::ServerContext* context, ::injective_accounts_rpc::RewardsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_accounts_rpc::RewardsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Portfolio<WithAsyncMethod_OrderStates<WithAsyncMethod_SubaccountsList<WithAsyncMethod_SubaccountBalancesList<WithAsyncMethod_SubaccountBalanceEndpoint<WithAsyncMethod_StreamSubaccountBalance<WithAsyncMethod_SubaccountHistory<WithAsyncMethod_SubaccountOrderSummary<WithAsyncMethod_Rewards<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Portfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Portfolio() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::PortfolioRequest, ::injective_accounts_rpc::PortfolioResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response) { return this->Portfolio(context, request, response); }));}
    void SetMessageAllocatorFor_Portfolio(
        ::grpc::MessageAllocator< ::injective_accounts_rpc::PortfolioRequest, ::injective_accounts_rpc::PortfolioResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::PortfolioRequest, ::injective_accounts_rpc::PortfolioResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Portfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Portfolio(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::PortfolioRequest* /*request*/, ::injective_accounts_rpc::PortfolioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Portfolio(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::PortfolioRequest* /*request*/, ::injective_accounts_rpc::PortfolioResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OrderStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OrderStates() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::OrderStatesRequest, ::injective_accounts_rpc::OrderStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response) { return this->OrderStates(context, request, response); }));}
    void SetMessageAllocatorFor_OrderStates(
        ::grpc::MessageAllocator< ::injective_accounts_rpc::OrderStatesRequest, ::injective_accounts_rpc::OrderStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::OrderStatesRequest, ::injective_accounts_rpc::OrderStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OrderStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OrderStates(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::OrderStatesRequest* /*request*/, ::injective_accounts_rpc::OrderStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OrderStates(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::OrderStatesRequest* /*request*/, ::injective_accounts_rpc::OrderStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubaccountsList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubaccountsList() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountsListRequest, ::injective_accounts_rpc::SubaccountsListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response) { return this->SubaccountsList(context, request, response); }));}
    void SetMessageAllocatorFor_SubaccountsList(
        ::grpc::MessageAllocator< ::injective_accounts_rpc::SubaccountsListRequest, ::injective_accounts_rpc::SubaccountsListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountsListRequest, ::injective_accounts_rpc::SubaccountsListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubaccountsList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountsList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountsListRequest* /*request*/, ::injective_accounts_rpc::SubaccountsListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountsList(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountsListRequest* /*request*/, ::injective_accounts_rpc::SubaccountsListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubaccountBalancesList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubaccountBalancesList() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountBalancesListRequest, ::injective_accounts_rpc::SubaccountBalancesListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response) { return this->SubaccountBalancesList(context, request, response); }));}
    void SetMessageAllocatorFor_SubaccountBalancesList(
        ::grpc::MessageAllocator< ::injective_accounts_rpc::SubaccountBalancesListRequest, ::injective_accounts_rpc::SubaccountBalancesListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountBalancesListRequest, ::injective_accounts_rpc::SubaccountBalancesListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubaccountBalancesList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalancesList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalancesListRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalancesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountBalancesList(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalancesListRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalancesListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubaccountBalanceEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubaccountBalanceEndpoint() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountBalanceRequest, ::injective_accounts_rpc::SubaccountBalanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response) { return this->SubaccountBalanceEndpoint(context, request, response); }));}
    void SetMessageAllocatorFor_SubaccountBalanceEndpoint(
        ::grpc::MessageAllocator< ::injective_accounts_rpc::SubaccountBalanceRequest, ::injective_accounts_rpc::SubaccountBalanceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountBalanceRequest, ::injective_accounts_rpc::SubaccountBalanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubaccountBalanceEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalanceEndpoint(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalanceRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountBalanceEndpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalanceRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalanceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamSubaccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamSubaccountBalance() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::injective_accounts_rpc::StreamSubaccountBalanceRequest, ::injective_accounts_rpc::StreamSubaccountBalanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* request) { return this->StreamSubaccountBalance(context, request); }));
    }
    ~WithCallbackMethod_StreamSubaccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamSubaccountBalance(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* /*request*/, ::grpc::ServerWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* StreamSubaccountBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubaccountHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubaccountHistory() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountHistoryRequest, ::injective_accounts_rpc::SubaccountHistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response) { return this->SubaccountHistory(context, request, response); }));}
    void SetMessageAllocatorFor_SubaccountHistory(
        ::grpc::MessageAllocator< ::injective_accounts_rpc::SubaccountHistoryRequest, ::injective_accounts_rpc::SubaccountHistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountHistoryRequest, ::injective_accounts_rpc::SubaccountHistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubaccountHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountHistory(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountHistoryRequest* /*request*/, ::injective_accounts_rpc::SubaccountHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountHistoryRequest* /*request*/, ::injective_accounts_rpc::SubaccountHistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubaccountOrderSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubaccountOrderSummary() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::injective_accounts_rpc::SubaccountOrderSummaryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response) { return this->SubaccountOrderSummary(context, request, response); }));}
    void SetMessageAllocatorFor_SubaccountOrderSummary(
        ::grpc::MessageAllocator< ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::injective_accounts_rpc::SubaccountOrderSummaryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubaccountOrderSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountOrderSummary(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* /*request*/, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountOrderSummary(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* /*request*/, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Rewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Rewards() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::RewardsRequest, ::injective_accounts_rpc::RewardsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response) { return this->Rewards(context, request, response); }));}
    void SetMessageAllocatorFor_Rewards(
        ::grpc::MessageAllocator< ::injective_accounts_rpc::RewardsRequest, ::injective_accounts_rpc::RewardsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_accounts_rpc::RewardsRequest, ::injective_accounts_rpc::RewardsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Rewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rewards(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::RewardsRequest* /*request*/, ::injective_accounts_rpc::RewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rewards(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_accounts_rpc::RewardsRequest* /*request*/, ::injective_accounts_rpc::RewardsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Portfolio<WithCallbackMethod_OrderStates<WithCallbackMethod_SubaccountsList<WithCallbackMethod_SubaccountBalancesList<WithCallbackMethod_SubaccountBalanceEndpoint<WithCallbackMethod_StreamSubaccountBalance<WithCallbackMethod_SubaccountHistory<WithCallbackMethod_SubaccountOrderSummary<WithCallbackMethod_Rewards<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Portfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Portfolio() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Portfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Portfolio(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::PortfolioRequest* /*request*/, ::injective_accounts_rpc::PortfolioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OrderStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OrderStates() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_OrderStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OrderStates(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::OrderStatesRequest* /*request*/, ::injective_accounts_rpc::OrderStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubaccountsList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubaccountsList() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubaccountsList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountsList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountsListRequest* /*request*/, ::injective_accounts_rpc::SubaccountsListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubaccountBalancesList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubaccountBalancesList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubaccountBalancesList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalancesList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalancesListRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalancesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubaccountBalanceEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubaccountBalanceEndpoint() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SubaccountBalanceEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalanceEndpoint(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalanceRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamSubaccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamSubaccountBalance() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StreamSubaccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamSubaccountBalance(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* /*request*/, ::grpc::ServerWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubaccountHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubaccountHistory() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SubaccountHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountHistory(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountHistoryRequest* /*request*/, ::injective_accounts_rpc::SubaccountHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubaccountOrderSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubaccountOrderSummary() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SubaccountOrderSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountOrderSummary(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* /*request*/, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rewards() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Rewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rewards(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::RewardsRequest* /*request*/, ::injective_accounts_rpc::RewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Portfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Portfolio() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Portfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Portfolio(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::PortfolioRequest* /*request*/, ::injective_accounts_rpc::PortfolioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPortfolio(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OrderStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OrderStates() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_OrderStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OrderStates(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::OrderStatesRequest* /*request*/, ::injective_accounts_rpc::OrderStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOrderStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubaccountsList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubaccountsList() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubaccountsList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountsList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountsListRequest* /*request*/, ::injective_accounts_rpc::SubaccountsListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountsList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubaccountBalancesList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubaccountBalancesList() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubaccountBalancesList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalancesList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalancesListRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalancesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountBalancesList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubaccountBalanceEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubaccountBalanceEndpoint() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SubaccountBalanceEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalanceEndpoint(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalanceRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountBalanceEndpoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamSubaccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamSubaccountBalance() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StreamSubaccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamSubaccountBalance(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* /*request*/, ::grpc::ServerWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamSubaccountBalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubaccountHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubaccountHistory() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SubaccountHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountHistory(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountHistoryRequest* /*request*/, ::injective_accounts_rpc::SubaccountHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubaccountOrderSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubaccountOrderSummary() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SubaccountOrderSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountOrderSummary(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* /*request*/, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubaccountOrderSummary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rewards() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Rewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rewards(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::RewardsRequest* /*request*/, ::injective_accounts_rpc::RewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRewards(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Portfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Portfolio() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Portfolio(context, request, response); }));
    }
    ~WithRawCallbackMethod_Portfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Portfolio(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::PortfolioRequest* /*request*/, ::injective_accounts_rpc::PortfolioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Portfolio(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OrderStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OrderStates() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OrderStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_OrderStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OrderStates(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::OrderStatesRequest* /*request*/, ::injective_accounts_rpc::OrderStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OrderStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubaccountsList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubaccountsList() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubaccountsList(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubaccountsList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountsList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountsListRequest* /*request*/, ::injective_accounts_rpc::SubaccountsListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountsList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubaccountBalancesList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubaccountBalancesList() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubaccountBalancesList(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubaccountBalancesList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalancesList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalancesListRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalancesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountBalancesList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubaccountBalanceEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubaccountBalanceEndpoint() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubaccountBalanceEndpoint(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubaccountBalanceEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountBalanceEndpoint(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalanceRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountBalanceEndpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamSubaccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamSubaccountBalance() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamSubaccountBalance(context, request); }));
    }
    ~WithRawCallbackMethod_StreamSubaccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamSubaccountBalance(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* /*request*/, ::grpc::ServerWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamSubaccountBalance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubaccountHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubaccountHistory() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubaccountHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubaccountHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountHistory(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountHistoryRequest* /*request*/, ::injective_accounts_rpc::SubaccountHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubaccountOrderSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubaccountOrderSummary() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubaccountOrderSummary(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubaccountOrderSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubaccountOrderSummary(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* /*request*/, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubaccountOrderSummary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Rewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Rewards() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rewards(context, request, response); }));
    }
    ~WithRawCallbackMethod_Rewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rewards(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::RewardsRequest* /*request*/, ::injective_accounts_rpc::RewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rewards(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Portfolio : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Portfolio() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_accounts_rpc::PortfolioRequest, ::injective_accounts_rpc::PortfolioResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_accounts_rpc::PortfolioRequest, ::injective_accounts_rpc::PortfolioResponse>* streamer) {
                       return this->StreamedPortfolio(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Portfolio() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Portfolio(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::PortfolioRequest* /*request*/, ::injective_accounts_rpc::PortfolioResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPortfolio(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_accounts_rpc::PortfolioRequest,::injective_accounts_rpc::PortfolioResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OrderStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OrderStates() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_accounts_rpc::OrderStatesRequest, ::injective_accounts_rpc::OrderStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_accounts_rpc::OrderStatesRequest, ::injective_accounts_rpc::OrderStatesResponse>* streamer) {
                       return this->StreamedOrderStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OrderStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OrderStates(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::OrderStatesRequest* /*request*/, ::injective_accounts_rpc::OrderStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOrderStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_accounts_rpc::OrderStatesRequest,::injective_accounts_rpc::OrderStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubaccountsList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubaccountsList() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_accounts_rpc::SubaccountsListRequest, ::injective_accounts_rpc::SubaccountsListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_accounts_rpc::SubaccountsListRequest, ::injective_accounts_rpc::SubaccountsListResponse>* streamer) {
                       return this->StreamedSubaccountsList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubaccountsList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubaccountsList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountsListRequest* /*request*/, ::injective_accounts_rpc::SubaccountsListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubaccountsList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_accounts_rpc::SubaccountsListRequest,::injective_accounts_rpc::SubaccountsListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubaccountBalancesList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubaccountBalancesList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_accounts_rpc::SubaccountBalancesListRequest, ::injective_accounts_rpc::SubaccountBalancesListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_accounts_rpc::SubaccountBalancesListRequest, ::injective_accounts_rpc::SubaccountBalancesListResponse>* streamer) {
                       return this->StreamedSubaccountBalancesList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubaccountBalancesList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubaccountBalancesList(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalancesListRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalancesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubaccountBalancesList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_accounts_rpc::SubaccountBalancesListRequest,::injective_accounts_rpc::SubaccountBalancesListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubaccountBalanceEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubaccountBalanceEndpoint() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_accounts_rpc::SubaccountBalanceRequest, ::injective_accounts_rpc::SubaccountBalanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_accounts_rpc::SubaccountBalanceRequest, ::injective_accounts_rpc::SubaccountBalanceResponse>* streamer) {
                       return this->StreamedSubaccountBalanceEndpoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubaccountBalanceEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubaccountBalanceEndpoint(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountBalanceRequest* /*request*/, ::injective_accounts_rpc::SubaccountBalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubaccountBalanceEndpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_accounts_rpc::SubaccountBalanceRequest,::injective_accounts_rpc::SubaccountBalanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubaccountHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubaccountHistory() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_accounts_rpc::SubaccountHistoryRequest, ::injective_accounts_rpc::SubaccountHistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_accounts_rpc::SubaccountHistoryRequest, ::injective_accounts_rpc::SubaccountHistoryResponse>* streamer) {
                       return this->StreamedSubaccountHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubaccountHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubaccountHistory(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountHistoryRequest* /*request*/, ::injective_accounts_rpc::SubaccountHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubaccountHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_accounts_rpc::SubaccountHistoryRequest,::injective_accounts_rpc::SubaccountHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubaccountOrderSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubaccountOrderSummary() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::injective_accounts_rpc::SubaccountOrderSummaryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* streamer) {
                       return this->StreamedSubaccountOrderSummary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubaccountOrderSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubaccountOrderSummary(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* /*request*/, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubaccountOrderSummary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_accounts_rpc::SubaccountOrderSummaryRequest,::injective_accounts_rpc::SubaccountOrderSummaryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rewards : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rewards() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_accounts_rpc::RewardsRequest, ::injective_accounts_rpc::RewardsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_accounts_rpc::RewardsRequest, ::injective_accounts_rpc::RewardsResponse>* streamer) {
                       return this->StreamedRewards(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rewards() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rewards(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::RewardsRequest* /*request*/, ::injective_accounts_rpc::RewardsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRewards(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_accounts_rpc::RewardsRequest,::injective_accounts_rpc::RewardsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Portfolio<WithStreamedUnaryMethod_OrderStates<WithStreamedUnaryMethod_SubaccountsList<WithStreamedUnaryMethod_SubaccountBalancesList<WithStreamedUnaryMethod_SubaccountBalanceEndpoint<WithStreamedUnaryMethod_SubaccountHistory<WithStreamedUnaryMethod_SubaccountOrderSummary<WithStreamedUnaryMethod_Rewards<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamSubaccountBalance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamSubaccountBalance() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::injective_accounts_rpc::StreamSubaccountBalanceRequest, ::injective_accounts_rpc::StreamSubaccountBalanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::injective_accounts_rpc::StreamSubaccountBalanceRequest, ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* streamer) {
                       return this->StreamedStreamSubaccountBalance(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamSubaccountBalance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamSubaccountBalance(::grpc::ServerContext* /*context*/, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* /*request*/, ::grpc::ServerWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamSubaccountBalance(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::injective_accounts_rpc::StreamSubaccountBalanceRequest,::injective_accounts_rpc::StreamSubaccountBalanceResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamSubaccountBalance<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Portfolio<WithStreamedUnaryMethod_OrderStates<WithStreamedUnaryMethod_SubaccountsList<WithStreamedUnaryMethod_SubaccountBalancesList<WithStreamedUnaryMethod_SubaccountBalanceEndpoint<WithSplitStreamingMethod_StreamSubaccountBalance<WithStreamedUnaryMethod_SubaccountHistory<WithStreamedUnaryMethod_SubaccountOrderSummary<WithStreamedUnaryMethod_Rewards<Service > > > > > > > > > StreamedService;
};

}  // namespace injective_accounts_rpc


#endif  // GRPC_exchange_2finjective_5faccounts_5frpc_2eproto__INCLUDED

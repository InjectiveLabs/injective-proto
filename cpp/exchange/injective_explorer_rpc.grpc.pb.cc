// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_explorer_rpc.proto

#include "exchange/injective_explorer_rpc.pb.h"
#include "exchange/injective_explorer_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective_explorer_rpc {

static const char* InjectiveExplorerRPC_method_names[] = {
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetAccountTxs",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetContractTxs",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetBlocks",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetBlock",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetValidators",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetValidator",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetValidatorUptime",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetTxs",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetTxByTxHash",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetPeggyDepositTxs",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetPeggyWithdrawalTxs",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetIBCTransferTxs",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetWasmCodes",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetWasmCodeByID",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetWasmContracts",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetWasmContractByAddress",
  "/injective_explorer_rpc.InjectiveExplorerRPC/GetCw20Balance",
  "/injective_explorer_rpc.InjectiveExplorerRPC/Relayers",
  "/injective_explorer_rpc.InjectiveExplorerRPC/StreamTxs",
  "/injective_explorer_rpc.InjectiveExplorerRPC/StreamBlocks",
};

std::unique_ptr< InjectiveExplorerRPC::Stub> InjectiveExplorerRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InjectiveExplorerRPC::Stub> stub(new InjectiveExplorerRPC::Stub(channel, options));
  return stub;
}

InjectiveExplorerRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAccountTxs_(InjectiveExplorerRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContractTxs_(InjectiveExplorerRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlocks_(InjectiveExplorerRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlock_(InjectiveExplorerRPC_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetValidators_(InjectiveExplorerRPC_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetValidator_(InjectiveExplorerRPC_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetValidatorUptime_(InjectiveExplorerRPC_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxs_(InjectiveExplorerRPC_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxByTxHash_(InjectiveExplorerRPC_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeggyDepositTxs_(InjectiveExplorerRPC_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPeggyWithdrawalTxs_(InjectiveExplorerRPC_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIBCTransferTxs_(InjectiveExplorerRPC_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWasmCodes_(InjectiveExplorerRPC_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWasmCodeByID_(InjectiveExplorerRPC_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWasmContracts_(InjectiveExplorerRPC_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWasmContractByAddress_(InjectiveExplorerRPC_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCw20Balance_(InjectiveExplorerRPC_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Relayers_(InjectiveExplorerRPC_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamTxs_(InjectiveExplorerRPC_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamBlocks_(InjectiveExplorerRPC_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status InjectiveExplorerRPC::Stub::GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::injective_explorer_rpc::GetAccountTxsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetAccountTxsRequest, ::injective_explorer_rpc::GetAccountTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAccountTxs_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetAccountTxsRequest, ::injective_explorer_rpc::GetAccountTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountTxs_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAccountTxs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetAccountTxsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetAccountTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetAccountTxsResponse, ::injective_explorer_rpc::GetAccountTxsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAccountTxs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetAccountTxsResponse>* InjectiveExplorerRPC::Stub::AsyncGetAccountTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAccountTxsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::injective_explorer_rpc::GetContractTxsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetContractTxsRequest, ::injective_explorer_rpc::GetContractTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetContractTxs_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetContractTxsRequest, ::injective_explorer_rpc::GetContractTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContractTxs_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetContractTxs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetContractTxsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetContractTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetContractTxsResponse, ::injective_explorer_rpc::GetContractTxsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetContractTxs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetContractTxsResponse>* InjectiveExplorerRPC::Stub::AsyncGetContractTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetContractTxsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::injective_explorer_rpc::GetBlocksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetBlocksRequest, ::injective_explorer_rpc::GetBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlocks_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetBlocksRequest, ::injective_explorer_rpc::GetBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlocks_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlocks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlocksResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetBlocksResponse, ::injective_explorer_rpc::GetBlocksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlocks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlocksResponse>* InjectiveExplorerRPC::Stub::AsyncGetBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlocksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::injective_explorer_rpc::GetBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetBlockRequest, ::injective_explorer_rpc::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlock_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetBlockRequest, ::injective_explorer_rpc::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlockResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetBlockResponse, ::injective_explorer_rpc::GetBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlockResponse>* InjectiveExplorerRPC::Stub::AsyncGetBlockRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::injective_explorer_rpc::GetValidatorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetValidatorsRequest, ::injective_explorer_rpc::GetValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetValidators_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetValidatorsRequest, ::injective_explorer_rpc::GetValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidators_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetValidatorsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetValidatorsResponse, ::injective_explorer_rpc::GetValidatorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetValidators_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorsResponse>* InjectiveExplorerRPC::Stub::AsyncGetValidatorsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetValidatorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::injective_explorer_rpc::GetValidatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetValidatorRequest, ::injective_explorer_rpc::GetValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetValidator_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetValidatorRequest, ::injective_explorer_rpc::GetValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidator_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetValidatorRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetValidatorResponse, ::injective_explorer_rpc::GetValidatorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetValidator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorResponse>* InjectiveExplorerRPC::Stub::AsyncGetValidatorRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetValidatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetValidatorUptimeRequest, ::injective_explorer_rpc::GetValidatorUptimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetValidatorUptime_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetValidatorUptimeRequest, ::injective_explorer_rpc::GetValidatorUptimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidatorUptime_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetValidatorUptime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorUptimeResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetValidatorUptimeRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetValidatorUptimeResponse, ::injective_explorer_rpc::GetValidatorUptimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetValidatorUptime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorUptimeResponse>* InjectiveExplorerRPC::Stub::AsyncGetValidatorUptimeRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetValidatorUptimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::injective_explorer_rpc::GetTxsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetTxsRequest, ::injective_explorer_rpc::GetTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTxs_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetTxsRequest, ::injective_explorer_rpc::GetTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxs_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetTxsResponse, ::injective_explorer_rpc::GetTxsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTxs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxsResponse>* InjectiveExplorerRPC::Stub::AsyncGetTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTxsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::injective_explorer_rpc::GetTxByTxHashResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetTxByTxHashRequest, ::injective_explorer_rpc::GetTxByTxHashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTxByTxHash_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetTxByTxHashRequest, ::injective_explorer_rpc::GetTxByTxHashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxByTxHash_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxByTxHash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxByTxHashResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetTxByTxHashRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetTxByTxHashResponse, ::injective_explorer_rpc::GetTxByTxHashRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTxByTxHash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxByTxHashResponse>* InjectiveExplorerRPC::Stub::AsyncGetTxByTxHashRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTxByTxHashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::injective_explorer_rpc::GetPeggyDepositTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPeggyDepositTxs_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::injective_explorer_rpc::GetPeggyDepositTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeggyDepositTxs_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeggyDepositTxs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetPeggyDepositTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetPeggyDepositTxsResponse, ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPeggyDepositTxs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* InjectiveExplorerRPC::Stub::AsyncGetPeggyDepositTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPeggyDepositTxsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPeggyWithdrawalTxs_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeggyWithdrawalTxs_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPeggyWithdrawalTxs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetPeggyWithdrawalTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse, ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPeggyWithdrawalTxs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* InjectiveExplorerRPC::Stub::AsyncGetPeggyWithdrawalTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPeggyWithdrawalTxsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::injective_explorer_rpc::GetIBCTransferTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetIBCTransferTxs_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::injective_explorer_rpc::GetIBCTransferTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIBCTransferTxs_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetIBCTransferTxs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetIBCTransferTxsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetIBCTransferTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetIBCTransferTxsResponse, ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetIBCTransferTxs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetIBCTransferTxsResponse>* InjectiveExplorerRPC::Stub::AsyncGetIBCTransferTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetIBCTransferTxsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::injective_explorer_rpc::GetWasmCodesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetWasmCodesRequest, ::injective_explorer_rpc::GetWasmCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWasmCodes_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetWasmCodesRequest, ::injective_explorer_rpc::GetWasmCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWasmCodes_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWasmCodes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodesResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetWasmCodesRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetWasmCodesResponse, ::injective_explorer_rpc::GetWasmCodesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWasmCodes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodesResponse>* InjectiveExplorerRPC::Stub::AsyncGetWasmCodesRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWasmCodesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::injective_explorer_rpc::GetWasmCodeByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWasmCodeByID_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::injective_explorer_rpc::GetWasmCodeByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWasmCodeByID_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWasmCodeByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodeByIDResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetWasmCodeByIDRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetWasmCodeByIDResponse, ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWasmCodeByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodeByIDResponse>* InjectiveExplorerRPC::Stub::AsyncGetWasmCodeByIDRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWasmCodeByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::injective_explorer_rpc::GetWasmContractsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetWasmContractsRequest, ::injective_explorer_rpc::GetWasmContractsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWasmContracts_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetWasmContractsRequest, ::injective_explorer_rpc::GetWasmContractsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWasmContracts_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWasmContracts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetWasmContractsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetWasmContractsResponse, ::injective_explorer_rpc::GetWasmContractsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWasmContracts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractsResponse>* InjectiveExplorerRPC::Stub::AsyncGetWasmContractsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWasmContractsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::injective_explorer_rpc::GetWasmContractByAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWasmContractByAddress_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::injective_explorer_rpc::GetWasmContractByAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWasmContractByAddress_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWasmContractByAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractByAddressResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetWasmContractByAddressRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetWasmContractByAddressResponse, ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWasmContractByAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractByAddressResponse>* InjectiveExplorerRPC::Stub::AsyncGetWasmContractByAddressRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWasmContractByAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::injective_explorer_rpc::GetCw20BalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::GetCw20BalanceRequest, ::injective_explorer_rpc::GetCw20BalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCw20Balance_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::GetCw20BalanceRequest, ::injective_explorer_rpc::GetCw20BalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCw20Balance_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCw20Balance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetCw20BalanceResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncGetCw20BalanceRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::GetCw20BalanceResponse, ::injective_explorer_rpc::GetCw20BalanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCw20Balance_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetCw20BalanceResponse>* InjectiveExplorerRPC::Stub::AsyncGetCw20BalanceRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCw20BalanceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveExplorerRPC::Stub::Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::injective_explorer_rpc::RelayersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_explorer_rpc::RelayersRequest, ::injective_explorer_rpc::RelayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Relayers_, context, request, response);
}

void InjectiveExplorerRPC::Stub::async::Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_explorer_rpc::RelayersRequest, ::injective_explorer_rpc::RelayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Relayers_, context, request, response, std::move(f));
}

void InjectiveExplorerRPC::Stub::async::Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Relayers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::RelayersResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncRelayersRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_explorer_rpc::RelayersResponse, ::injective_explorer_rpc::RelayersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Relayers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::RelayersResponse>* InjectiveExplorerRPC::Stub::AsyncRelayersRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRelayersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_explorer_rpc::StreamTxsResponse>* InjectiveExplorerRPC::Stub::StreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_explorer_rpc::StreamTxsResponse>::Create(channel_.get(), rpcmethod_StreamTxs_, context, request);
}

void InjectiveExplorerRPC::Stub::async::StreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest* request, ::grpc::ClientReadReactor< ::injective_explorer_rpc::StreamTxsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_explorer_rpc::StreamTxsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamTxs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamTxsResponse>* InjectiveExplorerRPC::Stub::AsyncStreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_explorer_rpc::StreamTxsResponse>::Create(channel_.get(), cq, rpcmethod_StreamTxs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamTxsResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncStreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_explorer_rpc::StreamTxsResponse>::Create(channel_.get(), cq, rpcmethod_StreamTxs_, context, request, false, nullptr);
}

::grpc::ClientReader< ::injective_explorer_rpc::StreamBlocksResponse>* InjectiveExplorerRPC::Stub::StreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_explorer_rpc::StreamBlocksResponse>::Create(channel_.get(), rpcmethod_StreamBlocks_, context, request);
}

void InjectiveExplorerRPC::Stub::async::StreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest* request, ::grpc::ClientReadReactor< ::injective_explorer_rpc::StreamBlocksResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_explorer_rpc::StreamBlocksResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamBlocks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamBlocksResponse>* InjectiveExplorerRPC::Stub::AsyncStreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_explorer_rpc::StreamBlocksResponse>::Create(channel_.get(), cq, rpcmethod_StreamBlocks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamBlocksResponse>* InjectiveExplorerRPC::Stub::PrepareAsyncStreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_explorer_rpc::StreamBlocksResponse>::Create(channel_.get(), cq, rpcmethod_StreamBlocks_, context, request, false, nullptr);
}

InjectiveExplorerRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetAccountTxsRequest, ::injective_explorer_rpc::GetAccountTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetAccountTxsRequest* req,
             ::injective_explorer_rpc::GetAccountTxsResponse* resp) {
               return service->GetAccountTxs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetContractTxsRequest, ::injective_explorer_rpc::GetContractTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetContractTxsRequest* req,
             ::injective_explorer_rpc::GetContractTxsResponse* resp) {
               return service->GetContractTxs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetBlocksRequest, ::injective_explorer_rpc::GetBlocksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetBlocksRequest* req,
             ::injective_explorer_rpc::GetBlocksResponse* resp) {
               return service->GetBlocks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetBlockRequest, ::injective_explorer_rpc::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetBlockRequest* req,
             ::injective_explorer_rpc::GetBlockResponse* resp) {
               return service->GetBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetValidatorsRequest, ::injective_explorer_rpc::GetValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetValidatorsRequest* req,
             ::injective_explorer_rpc::GetValidatorsResponse* resp) {
               return service->GetValidators(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetValidatorRequest, ::injective_explorer_rpc::GetValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetValidatorRequest* req,
             ::injective_explorer_rpc::GetValidatorResponse* resp) {
               return service->GetValidator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetValidatorUptimeRequest, ::injective_explorer_rpc::GetValidatorUptimeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetValidatorUptimeRequest* req,
             ::injective_explorer_rpc::GetValidatorUptimeResponse* resp) {
               return service->GetValidatorUptime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetTxsRequest, ::injective_explorer_rpc::GetTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetTxsRequest* req,
             ::injective_explorer_rpc::GetTxsResponse* resp) {
               return service->GetTxs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetTxByTxHashRequest, ::injective_explorer_rpc::GetTxByTxHashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetTxByTxHashRequest* req,
             ::injective_explorer_rpc::GetTxByTxHashResponse* resp) {
               return service->GetTxByTxHash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::injective_explorer_rpc::GetPeggyDepositTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* req,
             ::injective_explorer_rpc::GetPeggyDepositTxsResponse* resp) {
               return service->GetPeggyDepositTxs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* req,
             ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* resp) {
               return service->GetPeggyWithdrawalTxs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::injective_explorer_rpc::GetIBCTransferTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetIBCTransferTxsRequest* req,
             ::injective_explorer_rpc::GetIBCTransferTxsResponse* resp) {
               return service->GetIBCTransferTxs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetWasmCodesRequest, ::injective_explorer_rpc::GetWasmCodesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetWasmCodesRequest* req,
             ::injective_explorer_rpc::GetWasmCodesResponse* resp) {
               return service->GetWasmCodes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::injective_explorer_rpc::GetWasmCodeByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetWasmCodeByIDRequest* req,
             ::injective_explorer_rpc::GetWasmCodeByIDResponse* resp) {
               return service->GetWasmCodeByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetWasmContractsRequest, ::injective_explorer_rpc::GetWasmContractsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetWasmContractsRequest* req,
             ::injective_explorer_rpc::GetWasmContractsResponse* resp) {
               return service->GetWasmContracts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::injective_explorer_rpc::GetWasmContractByAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetWasmContractByAddressRequest* req,
             ::injective_explorer_rpc::GetWasmContractByAddressResponse* resp) {
               return service->GetWasmContractByAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::GetCw20BalanceRequest, ::injective_explorer_rpc::GetCw20BalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::GetCw20BalanceRequest* req,
             ::injective_explorer_rpc::GetCw20BalanceResponse* resp) {
               return service->GetCw20Balance(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::RelayersRequest, ::injective_explorer_rpc::RelayersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::RelayersRequest* req,
             ::injective_explorer_rpc::RelayersResponse* resp) {
               return service->Relayers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[18],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::StreamTxsRequest, ::injective_explorer_rpc::StreamTxsResponse>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::StreamTxsRequest* req,
             ::grpc::ServerWriter<::injective_explorer_rpc::StreamTxsResponse>* writer) {
               return service->StreamTxs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveExplorerRPC_method_names[19],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveExplorerRPC::Service, ::injective_explorer_rpc::StreamBlocksRequest, ::injective_explorer_rpc::StreamBlocksResponse>(
          [](InjectiveExplorerRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_explorer_rpc::StreamBlocksRequest* req,
             ::grpc::ServerWriter<::injective_explorer_rpc::StreamBlocksResponse>* writer) {
               return service->StreamBlocks(ctx, req, writer);
             }, this)));
}

InjectiveExplorerRPC::Service::~Service() {
}

::grpc::Status InjectiveExplorerRPC::Service::GetAccountTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetContractTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetBlocks(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetBlock(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetValidators(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetValidator(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetValidatorUptime(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetTxByTxHash(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetPeggyDepositTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetPeggyWithdrawalTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetIBCTransferTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetWasmCodes(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetWasmCodeByID(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetWasmContracts(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetWasmContractByAddress(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::GetCw20Balance(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::Relayers(::grpc::ServerContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::StreamTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::StreamTxsRequest* request, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamTxsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveExplorerRPC::Service::StreamBlocks(::grpc::ServerContext* context, const ::injective_explorer_rpc::StreamBlocksRequest* request, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamBlocksResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective_explorer_rpc


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_auction_rpc.proto

#include "exchange/injective_auction_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective_auction_rpc {
template <typename>
PROTOBUF_CONSTEXPR AuctionRequest::AuctionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.round_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuctionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuctionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuctionRequestDefaultTypeInternal() {}
  union {
    AuctionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuctionRequestDefaultTypeInternal _AuctionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AuctionResponse::AuctionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bids_)*/{}
  , /*decltype(_impl_.auction_)*/nullptr} {}
struct AuctionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuctionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuctionResponseDefaultTypeInternal() {}
  union {
    AuctionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuctionResponseDefaultTypeInternal _AuctionResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Auction::Auction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.basket_)*/{}
  , /*decltype(_impl_.winner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.winning_bid_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.round_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.end_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuctionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuctionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuctionDefaultTypeInternal() {}
  union {
    Auction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuctionDefaultTypeInternal _Auction_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Coin::Coin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoinDefaultTypeInternal() {}
  union {
    Coin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoinDefaultTypeInternal _Coin_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Bid::Bid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bidder_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BidDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BidDefaultTypeInternal() {}
  union {
    Bid _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BidDefaultTypeInternal _Bid_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AuctionsRequest::AuctionsRequest(
    ::_pbi::ConstantInitialized) {}
struct AuctionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuctionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuctionsRequestDefaultTypeInternal() {}
  union {
    AuctionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuctionsRequestDefaultTypeInternal _AuctionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AuctionsResponse::AuctionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.auctions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuctionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuctionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuctionsResponseDefaultTypeInternal() {}
  union {
    AuctionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuctionsResponseDefaultTypeInternal _AuctionsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamBidsRequest::StreamBidsRequest(
    ::_pbi::ConstantInitialized) {}
struct StreamBidsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamBidsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamBidsRequestDefaultTypeInternal() {}
  union {
    StreamBidsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamBidsRequestDefaultTypeInternal _StreamBidsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamBidsResponse::StreamBidsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bidder_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bid_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.round_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamBidsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamBidsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamBidsResponseDefaultTypeInternal() {}
  union {
    StreamBidsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamBidsResponseDefaultTypeInternal _StreamBidsResponse_default_instance_;
}  // namespace injective_auction_rpc
static ::_pb::Metadata file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_exchange_2finjective_5fauction_5frpc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_exchange_2finjective_5fauction_5frpc_2eproto = nullptr;
const ::uint32_t TableStruct_exchange_2finjective_5fauction_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionRequest, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionResponse, _impl_.auction_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionResponse, _impl_.bids_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Auction, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Auction, _impl_.winner_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Auction, _impl_.basket_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Auction, _impl_.winning_bid_amount_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Auction, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Auction, _impl_.end_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Auction, _impl_.updated_at_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Coin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Coin, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Coin, _impl_.amount_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Bid, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Bid, _impl_.bidder_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Bid, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::Bid, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::AuctionsResponse, _impl_.auctions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::StreamBidsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::StreamBidsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::StreamBidsResponse, _impl_.bidder_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::StreamBidsResponse, _impl_.bid_amount_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::StreamBidsResponse, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::injective_auction_rpc::StreamBidsResponse, _impl_.timestamp_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective_auction_rpc::AuctionRequest)},
        { 9, 19, -1, sizeof(::injective_auction_rpc::AuctionResponse)},
        { 21, -1, -1, sizeof(::injective_auction_rpc::Auction)},
        { 35, -1, -1, sizeof(::injective_auction_rpc::Coin)},
        { 45, -1, -1, sizeof(::injective_auction_rpc::Bid)},
        { 56, -1, -1, sizeof(::injective_auction_rpc::AuctionsRequest)},
        { 64, -1, -1, sizeof(::injective_auction_rpc::AuctionsResponse)},
        { 73, -1, -1, sizeof(::injective_auction_rpc::StreamBidsRequest)},
        { 81, -1, -1, sizeof(::injective_auction_rpc::StreamBidsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective_auction_rpc::_AuctionRequest_default_instance_._instance,
    &::injective_auction_rpc::_AuctionResponse_default_instance_._instance,
    &::injective_auction_rpc::_Auction_default_instance_._instance,
    &::injective_auction_rpc::_Coin_default_instance_._instance,
    &::injective_auction_rpc::_Bid_default_instance_._instance,
    &::injective_auction_rpc::_AuctionsRequest_default_instance_._instance,
    &::injective_auction_rpc::_AuctionsResponse_default_instance_._instance,
    &::injective_auction_rpc::_StreamBidsRequest_default_instance_._instance,
    &::injective_auction_rpc::_StreamBidsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_exchange_2finjective_5fauction_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$exchange/injective_auction_rpc.proto\022\025"
    "injective_auction_rpc\"&\n\016AuctionRequest\022"
    "\024\n\005round\030\001 \001(\022R\005round\"{\n\017AuctionResponse"
    "\0228\n\007auction\030\001 \001(\0132\036.injective_auction_rp"
    "c.AuctionR\007auction\022.\n\004bids\030\002 \003(\0132\032.injec"
    "tive_auction_rpc.BidR\004bids\"\336\001\n\007Auction\022\026"
    "\n\006winner\030\001 \001(\tR\006winner\0223\n\006basket\030\002 \003(\0132\033"
    ".injective_auction_rpc.CoinR\006basket\022,\n\022w"
    "inning_bid_amount\030\003 \001(\tR\020winningBidAmoun"
    "t\022\024\n\005round\030\004 \001(\004R\005round\022#\n\rend_timestamp"
    "\030\005 \001(\022R\014endTimestamp\022\035\n\nupdated_at\030\006 \001(\022"
    "R\tupdatedAt\"4\n\004Coin\022\024\n\005denom\030\001 \001(\tR\005deno"
    "m\022\026\n\006amount\030\002 \001(\tR\006amount\"S\n\003Bid\022\026\n\006bidd"
    "er\030\001 \001(\tR\006bidder\022\026\n\006amount\030\002 \001(\tR\006amount"
    "\022\034\n\ttimestamp\030\003 \001(\022R\ttimestamp\"\021\n\017Auctio"
    "nsRequest\"N\n\020AuctionsResponse\022:\n\010auction"
    "s\030\001 \003(\0132\036.injective_auction_rpc.AuctionR"
    "\010auctions\"\023\n\021StreamBidsRequest\"\177\n\022Stream"
    "BidsResponse\022\026\n\006bidder\030\001 \001(\tR\006bidder\022\035\n\n"
    "bid_amount\030\002 \001(\tR\tbidAmount\022\024\n\005round\030\003 \001"
    "(\004R\005round\022\034\n\ttimestamp\030\004 \001(\022R\ttimestamp2"
    "\271\002\n\023InjectiveAuctionRPC\022`\n\017AuctionEndpoi"
    "nt\022%.injective_auction_rpc.AuctionReques"
    "t\032&.injective_auction_rpc.AuctionRespons"
    "e\022[\n\010Auctions\022&.injective_auction_rpc.Au"
    "ctionsRequest\032\'.injective_auction_rpc.Au"
    "ctionsResponse\022c\n\nStreamBids\022(.injective"
    "_auction_rpc.StreamBidsRequest\032).injecti"
    "ve_auction_rpc.StreamBidsResponse0\001B\273\001\n\031"
    "com.injective_auction_rpcB\030InjectiveAuct"
    "ionRpcProtoP\001Z\030/injective_auction_rpcpb\242"
    "\002\003IXX\252\002\023InjectiveAuctionRpc\312\002\023InjectiveA"
    "uctionRpc\342\002\037InjectiveAuctionRpc\\GPBMetad"
    "ata\352\002\023InjectiveAuctionRpcb\006proto3"
};
static ::absl::once_flag descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto = {
    false,
    false,
    1353,
    descriptor_table_protodef_exchange_2finjective_5fauction_5frpc_2eproto,
    "exchange/injective_auction_rpc.proto",
    &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_exchange_2finjective_5fauction_5frpc_2eproto::offsets,
    file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto,
    file_level_enum_descriptors_exchange_2finjective_5fauction_5frpc_2eproto,
    file_level_service_descriptors_exchange_2finjective_5fauction_5frpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter() {
  return &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_2finjective_5fauction_5frpc_2eproto(&descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto);
namespace injective_auction_rpc {
// ===================================================================

class AuctionRequest::_Internal {
 public:
};

AuctionRequest::AuctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.AuctionRequest)
}
AuctionRequest::AuctionRequest(const AuctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.AuctionRequest)
}

inline void AuctionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.round_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AuctionRequest::~AuctionRequest() {
  // @@protoc_insertion_point(destructor:injective_auction_rpc.AuctionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuctionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void AuctionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_auction_rpc.AuctionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.round_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuctionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 round = 1 [json_name = "round"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuctionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_auction_rpc.AuctionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 round = 1 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        1, this->_internal_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_auction_rpc.AuctionRequest)
  return target;
}

::size_t AuctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_auction_rpc.AuctionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 round = 1 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuctionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuctionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuctionRequest::GetClassData() const { return &_class_data_; }


void AuctionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuctionRequest*>(&to_msg);
  auto& from = static_cast<const AuctionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_auction_rpc.AuctionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuctionRequest::CopyFrom(const AuctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_auction_rpc.AuctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionRequest::IsInitialized() const {
  return true;
}

void AuctionRequest::InternalSwap(AuctionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.round_, other->_impl_.round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuctionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[0]);
}
// ===================================================================

class AuctionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AuctionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AuctionResponse, _impl_._has_bits_);
  static const ::injective_auction_rpc::Auction& auction(const AuctionResponse* msg);
  static void set_has_auction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_auction_rpc::Auction&
AuctionResponse::_Internal::auction(const AuctionResponse* msg) {
  return *msg->_impl_.auction_;
}
AuctionResponse::AuctionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.AuctionResponse)
}
AuctionResponse::AuctionResponse(const AuctionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuctionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bids_){from._impl_.bids_}
    , decltype(_impl_.auction_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.auction_ = new ::injective_auction_rpc::Auction(*from._impl_.auction_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.AuctionResponse)
}

inline void AuctionResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bids_){arena}
    , decltype(_impl_.auction_){nullptr}
  };
}

AuctionResponse::~AuctionResponse() {
  // @@protoc_insertion_point(destructor:injective_auction_rpc.AuctionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuctionResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_bids()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.auction_;
}

void AuctionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuctionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_auction_rpc.AuctionResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_bids()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.auction_ != nullptr);
    _impl_.auction_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuctionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_auction_rpc.Auction auction = 1 [json_name = "auction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_auction(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_auction_rpc.Bid bids = 2 [json_name = "bids"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuctionResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_auction_rpc.AuctionResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_auction_rpc.Auction auction = 1 [json_name = "auction"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::auction(this),
        _Internal::auction(this).GetCachedSize(), target, stream);
  }

  // repeated .injective_auction_rpc.Bid bids = 2 [json_name = "bids"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_auction_rpc.AuctionResponse)
  return target;
}

::size_t AuctionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_auction_rpc.AuctionResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_auction_rpc.Bid bids = 2 [json_name = "bids"];
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_internal_bids()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_auction_rpc.Auction auction = 1 [json_name = "auction"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.auction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuctionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuctionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuctionResponse::GetClassData() const { return &_class_data_; }


void AuctionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuctionResponse*>(&to_msg);
  auto& from = static_cast<const AuctionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_auction_rpc.AuctionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bids()->MergeFrom(from._internal_bids());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_auction()->::injective_auction_rpc::Auction::MergeFrom(
        from._internal_auction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuctionResponse::CopyFrom(const AuctionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_auction_rpc.AuctionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionResponse::IsInitialized() const {
  return true;
}

void AuctionResponse::InternalSwap(AuctionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_bids()->InternalSwap(other->_internal_mutable_bids());
  swap(_impl_.auction_, other->_impl_.auction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuctionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[1]);
}
// ===================================================================

class Auction::_Internal {
 public:
};

Auction::Auction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.Auction)
}
Auction::Auction(const Auction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Auction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.basket_){from._impl_.basket_}
    , decltype(_impl_.winner_) {}

    , decltype(_impl_.winning_bid_amount_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.end_timestamp_) {}

    , decltype(_impl_.updated_at_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.winner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.winner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_winner().empty()) {
    _this->_impl_.winner_.Set(from._internal_winner(), _this->GetArenaForAllocation());
  }
  _impl_.winning_bid_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.winning_bid_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_winning_bid_amount().empty()) {
    _this->_impl_.winning_bid_amount_.Set(from._internal_winning_bid_amount(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.round_, &from._impl_.round_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.updated_at_) -
    reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.updated_at_));
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.Auction)
}

inline void Auction::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.basket_){arena}
    , decltype(_impl_.winner_) {}

    , decltype(_impl_.winning_bid_amount_) {}

    , decltype(_impl_.round_) { ::uint64_t{0u} }

    , decltype(_impl_.end_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.updated_at_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.winner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.winner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.winning_bid_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.winning_bid_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Auction::~Auction() {
  // @@protoc_insertion_point(destructor:injective_auction_rpc.Auction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Auction::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_basket()->~RepeatedPtrField();
  _impl_.winner_.Destroy();
  _impl_.winning_bid_amount_.Destroy();
}

void Auction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Auction::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_auction_rpc.Auction)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_basket()->Clear();
  _impl_.winner_.ClearToEmpty();
  _impl_.winning_bid_amount_.ClearToEmpty();
  ::memset(&_impl_.round_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.updated_at_) -
      reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.updated_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Auction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string winner = 1 [json_name = "winner"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_winner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_auction_rpc.Auction.winner"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_auction_rpc.Coin basket = 2 [json_name = "basket"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_basket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string winning_bid_amount = 3 [json_name = "winningBidAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_winning_bid_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_auction_rpc.Auction.winning_bid_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 round = 4 [json_name = "round"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_timestamp = 5 [json_name = "endTimestamp"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 updated_at = 6 [json_name = "updatedAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Auction::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_auction_rpc.Auction)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string winner = 1 [json_name = "winner"];
  if (!this->_internal_winner().empty()) {
    const std::string& _s = this->_internal_winner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_auction_rpc.Auction.winner");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective_auction_rpc.Coin basket = 2 [json_name = "basket"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_basket_size()); i < n; i++) {
    const auto& repfield = this->_internal_basket(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string winning_bid_amount = 3 [json_name = "winningBidAmount"];
  if (!this->_internal_winning_bid_amount().empty()) {
    const std::string& _s = this->_internal_winning_bid_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_auction_rpc.Auction.winning_bid_amount");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 round = 4 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_round(), target);
  }

  // sint64 end_timestamp = 5 [json_name = "endTimestamp"];
  if (this->_internal_end_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        5, this->_internal_end_timestamp(), target);
  }

  // sint64 updated_at = 6 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_auction_rpc.Auction)
  return target;
}

::size_t Auction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_auction_rpc.Auction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_auction_rpc.Coin basket = 2 [json_name = "basket"];
  total_size += 1UL * this->_internal_basket_size();
  for (const auto& msg : this->_internal_basket()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string winner = 1 [json_name = "winner"];
  if (!this->_internal_winner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_winner());
  }

  // string winning_bid_amount = 3 [json_name = "winningBidAmount"];
  if (!this->_internal_winning_bid_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_winning_bid_amount());
  }

  // uint64 round = 4 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_round());
  }

  // sint64 end_timestamp = 5 [json_name = "endTimestamp"];
  if (this->_internal_end_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_timestamp());
  }

  // sint64 updated_at = 6 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_updated_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Auction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Auction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Auction::GetClassData() const { return &_class_data_; }


void Auction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Auction*>(&to_msg);
  auto& from = static_cast<const Auction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_auction_rpc.Auction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_basket()->MergeFrom(from._internal_basket());
  if (!from._internal_winner().empty()) {
    _this->_internal_set_winner(from._internal_winner());
  }
  if (!from._internal_winning_bid_amount().empty()) {
    _this->_internal_set_winning_bid_amount(from._internal_winning_bid_amount());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_end_timestamp() != 0) {
    _this->_internal_set_end_timestamp(from._internal_end_timestamp());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Auction::CopyFrom(const Auction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_auction_rpc.Auction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auction::IsInitialized() const {
  return true;
}

void Auction::InternalSwap(Auction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_basket()->InternalSwap(other->_internal_mutable_basket());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.winner_, lhs_arena,
                                       &other->_impl_.winner_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.winning_bid_amount_, lhs_arena,
                                       &other->_impl_.winning_bid_amount_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Auction, _impl_.updated_at_)
      + sizeof(Auction::_impl_.updated_at_)
      - PROTOBUF_FIELD_OFFSET(Auction, _impl_.round_)>(
          reinterpret_cast<char*>(&_impl_.round_),
          reinterpret_cast<char*>(&other->_impl_.round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Auction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[2]);
}
// ===================================================================

class Coin::_Internal {
 public:
};

Coin::Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.Coin)
}
Coin::Coin(const Coin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.Coin)
}

inline void Coin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Coin::~Coin() {
  // @@protoc_insertion_point(destructor:injective_auction_rpc.Coin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  _impl_.amount_.Destroy();
}

void Coin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coin::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_auction_rpc.Coin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_auction_rpc.Coin.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_auction_rpc.Coin.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Coin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_auction_rpc.Coin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_auction_rpc.Coin.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_auction_rpc.Coin.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_auction_rpc.Coin)
  return target;
}

::size_t Coin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_auction_rpc.Coin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coin::GetClassData() const { return &_class_data_; }


void Coin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coin*>(&to_msg);
  auto& from = static_cast<const Coin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_auction_rpc.Coin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coin::CopyFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_auction_rpc.Coin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coin::IsInitialized() const {
  return true;
}

void Coin::InternalSwap(Coin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[3]);
}
// ===================================================================

class Bid::_Internal {
 public:
};

Bid::Bid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.Bid)
}
Bid::Bid(const Bid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bidder_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bidder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bidder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bidder().empty()) {
    _this->_impl_.bidder_.Set(from._internal_bidder(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.Bid)
}

inline void Bid::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bidder_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bidder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bidder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bid::~Bid() {
  // @@protoc_insertion_point(destructor:injective_auction_rpc.Bid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bid::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bidder_.Destroy();
  _impl_.amount_.Destroy();
}

void Bid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bid::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_auction_rpc.Bid)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bidder_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bidder = 1 [json_name = "bidder"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bidder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_auction_rpc.Bid.bidder"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_auction_rpc.Bid.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Bid::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_auction_rpc.Bid)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bidder = 1 [json_name = "bidder"];
  if (!this->_internal_bidder().empty()) {
    const std::string& _s = this->_internal_bidder();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_auction_rpc.Bid.bidder");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_auction_rpc.Bid.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_auction_rpc.Bid)
  return target;
}

::size_t Bid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_auction_rpc.Bid)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bidder = 1 [json_name = "bidder"];
  if (!this->_internal_bidder().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bidder());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bid::GetClassData() const { return &_class_data_; }


void Bid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bid*>(&to_msg);
  auto& from = static_cast<const Bid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_auction_rpc.Bid)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bidder().empty()) {
    _this->_internal_set_bidder(from._internal_bidder());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bid::CopyFrom(const Bid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_auction_rpc.Bid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bid::IsInitialized() const {
  return true;
}

void Bid::InternalSwap(Bid* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bidder_, lhs_arena,
                                       &other->_impl_.bidder_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[4]);
}
// ===================================================================

class AuctionsRequest::_Internal {
 public:
};

AuctionsRequest::AuctionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.AuctionsRequest)
}
AuctionsRequest::AuctionsRequest(const AuctionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AuctionsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.AuctionsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuctionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuctionsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AuctionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[5]);
}
// ===================================================================

class AuctionsResponse::_Internal {
 public:
};

AuctionsResponse::AuctionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.AuctionsResponse)
}
AuctionsResponse::AuctionsResponse(const AuctionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuctionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.auctions_){from._impl_.auctions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.AuctionsResponse)
}

inline void AuctionsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.auctions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AuctionsResponse::~AuctionsResponse() {
  // @@protoc_insertion_point(destructor:injective_auction_rpc.AuctionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuctionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_auctions()->~RepeatedPtrField();
}

void AuctionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuctionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_auction_rpc.AuctionsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_auctions()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuctionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_auction_rpc.Auction auctions = 1 [json_name = "auctions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_auctions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuctionsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_auction_rpc.AuctionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_auction_rpc.Auction auctions = 1 [json_name = "auctions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_auctions_size()); i < n; i++) {
    const auto& repfield = this->_internal_auctions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_auction_rpc.AuctionsResponse)
  return target;
}

::size_t AuctionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_auction_rpc.AuctionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_auction_rpc.Auction auctions = 1 [json_name = "auctions"];
  total_size += 1UL * this->_internal_auctions_size();
  for (const auto& msg : this->_internal_auctions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuctionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuctionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuctionsResponse::GetClassData() const { return &_class_data_; }


void AuctionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuctionsResponse*>(&to_msg);
  auto& from = static_cast<const AuctionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_auction_rpc.AuctionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_auctions()->MergeFrom(from._internal_auctions());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuctionsResponse::CopyFrom(const AuctionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_auction_rpc.AuctionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuctionsResponse::IsInitialized() const {
  return true;
}

void AuctionsResponse::InternalSwap(AuctionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_auctions()->InternalSwap(other->_internal_mutable_auctions());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuctionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[6]);
}
// ===================================================================

class StreamBidsRequest::_Internal {
 public:
};

StreamBidsRequest::StreamBidsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.StreamBidsRequest)
}
StreamBidsRequest::StreamBidsRequest(const StreamBidsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StreamBidsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.StreamBidsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamBidsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamBidsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StreamBidsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[7]);
}
// ===================================================================

class StreamBidsResponse::_Internal {
 public:
};

StreamBidsResponse::StreamBidsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_auction_rpc.StreamBidsResponse)
}
StreamBidsResponse::StreamBidsResponse(const StreamBidsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamBidsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bidder_) {}

    , decltype(_impl_.bid_amount_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bidder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bidder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bidder().empty()) {
    _this->_impl_.bidder_.Set(from._internal_bidder(), _this->GetArenaForAllocation());
  }
  _impl_.bid_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bid_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bid_amount().empty()) {
    _this->_impl_.bid_amount_.Set(from._internal_bid_amount(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.round_, &from._impl_.round_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:injective_auction_rpc.StreamBidsResponse)
}

inline void StreamBidsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bidder_) {}

    , decltype(_impl_.bid_amount_) {}

    , decltype(_impl_.round_) { ::uint64_t{0u} }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bidder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bidder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bid_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bid_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamBidsResponse::~StreamBidsResponse() {
  // @@protoc_insertion_point(destructor:injective_auction_rpc.StreamBidsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamBidsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bidder_.Destroy();
  _impl_.bid_amount_.Destroy();
}

void StreamBidsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamBidsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_auction_rpc.StreamBidsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bidder_.ClearToEmpty();
  _impl_.bid_amount_.ClearToEmpty();
  ::memset(&_impl_.round_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamBidsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bidder = 1 [json_name = "bidder"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bidder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_auction_rpc.StreamBidsResponse.bidder"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string bid_amount = 2 [json_name = "bidAmount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bid_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_auction_rpc.StreamBidsResponse.bid_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 round = 3 [json_name = "round"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 4 [json_name = "timestamp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamBidsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_auction_rpc.StreamBidsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bidder = 1 [json_name = "bidder"];
  if (!this->_internal_bidder().empty()) {
    const std::string& _s = this->_internal_bidder();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_auction_rpc.StreamBidsResponse.bidder");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string bid_amount = 2 [json_name = "bidAmount"];
  if (!this->_internal_bid_amount().empty()) {
    const std::string& _s = this->_internal_bid_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_auction_rpc.StreamBidsResponse.bid_amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_round(), target);
  }

  // sint64 timestamp = 4 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_auction_rpc.StreamBidsResponse)
  return target;
}

::size_t StreamBidsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_auction_rpc.StreamBidsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bidder = 1 [json_name = "bidder"];
  if (!this->_internal_bidder().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bidder());
  }

  // string bid_amount = 2 [json_name = "bidAmount"];
  if (!this->_internal_bid_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bid_amount());
  }

  // uint64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_round());
  }

  // sint64 timestamp = 4 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamBidsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamBidsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamBidsResponse::GetClassData() const { return &_class_data_; }


void StreamBidsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamBidsResponse*>(&to_msg);
  auto& from = static_cast<const StreamBidsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_auction_rpc.StreamBidsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bidder().empty()) {
    _this->_internal_set_bidder(from._internal_bidder());
  }
  if (!from._internal_bid_amount().empty()) {
    _this->_internal_set_bid_amount(from._internal_bid_amount());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamBidsResponse::CopyFrom(const StreamBidsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_auction_rpc.StreamBidsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamBidsResponse::IsInitialized() const {
  return true;
}

void StreamBidsResponse::InternalSwap(StreamBidsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bidder_, lhs_arena,
                                       &other->_impl_.bidder_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bid_amount_, lhs_arena,
                                       &other->_impl_.bid_amount_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamBidsResponse, _impl_.timestamp_)
      + sizeof(StreamBidsResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamBidsResponse, _impl_.round_)>(
          reinterpret_cast<char*>(&_impl_.round_),
          reinterpret_cast<char*>(&other->_impl_.round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamBidsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fauction_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fauction_5frpc_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_auction_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::AuctionRequest*
Arena::CreateMaybeMessage< ::injective_auction_rpc::AuctionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::AuctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::AuctionResponse*
Arena::CreateMaybeMessage< ::injective_auction_rpc::AuctionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::AuctionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::Auction*
Arena::CreateMaybeMessage< ::injective_auction_rpc::Auction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::Auction >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::Coin*
Arena::CreateMaybeMessage< ::injective_auction_rpc::Coin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::Coin >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::Bid*
Arena::CreateMaybeMessage< ::injective_auction_rpc::Bid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::Bid >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::AuctionsRequest*
Arena::CreateMaybeMessage< ::injective_auction_rpc::AuctionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::AuctionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::AuctionsResponse*
Arena::CreateMaybeMessage< ::injective_auction_rpc::AuctionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::AuctionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::StreamBidsRequest*
Arena::CreateMaybeMessage< ::injective_auction_rpc::StreamBidsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::StreamBidsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_auction_rpc::StreamBidsResponse*
Arena::CreateMaybeMessage< ::injective_auction_rpc::StreamBidsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_auction_rpc::StreamBidsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

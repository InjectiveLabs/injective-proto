// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_auction_rpc.proto

#include "exchange/injective_auction_rpc.pb.h"
#include "exchange/injective_auction_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective_auction_rpc {

static const char* InjectiveAuctionRPC_method_names[] = {
  "/injective_auction_rpc.InjectiveAuctionRPC/AuctionEndpoint",
  "/injective_auction_rpc.InjectiveAuctionRPC/Auctions",
  "/injective_auction_rpc.InjectiveAuctionRPC/StreamBids",
};

std::unique_ptr< InjectiveAuctionRPC::Stub> InjectiveAuctionRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InjectiveAuctionRPC::Stub> stub(new InjectiveAuctionRPC::Stub(channel, options));
  return stub;
}

InjectiveAuctionRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_AuctionEndpoint_(InjectiveAuctionRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Auctions_(InjectiveAuctionRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamBids_(InjectiveAuctionRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status InjectiveAuctionRPC::Stub::AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::injective_auction_rpc::AuctionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_auction_rpc::AuctionRequest, ::injective_auction_rpc::AuctionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AuctionEndpoint_, context, request, response);
}

void InjectiveAuctionRPC::Stub::async::AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_auction_rpc::AuctionRequest, ::injective_auction_rpc::AuctionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuctionEndpoint_, context, request, response, std::move(f));
}

void InjectiveAuctionRPC::Stub::async::AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AuctionEndpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionResponse>* InjectiveAuctionRPC::Stub::PrepareAsyncAuctionEndpointRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_auction_rpc::AuctionResponse, ::injective_auction_rpc::AuctionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AuctionEndpoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionResponse>* InjectiveAuctionRPC::Stub::AsyncAuctionEndpointRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuctionEndpointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveAuctionRPC::Stub::Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::injective_auction_rpc::AuctionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_auction_rpc::AuctionsRequest, ::injective_auction_rpc::AuctionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Auctions_, context, request, response);
}

void InjectiveAuctionRPC::Stub::async::Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_auction_rpc::AuctionsRequest, ::injective_auction_rpc::AuctionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Auctions_, context, request, response, std::move(f));
}

void InjectiveAuctionRPC::Stub::async::Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Auctions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionsResponse>* InjectiveAuctionRPC::Stub::PrepareAsyncAuctionsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_auction_rpc::AuctionsResponse, ::injective_auction_rpc::AuctionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Auctions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionsResponse>* InjectiveAuctionRPC::Stub::AsyncAuctionsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAuctionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_auction_rpc::StreamBidsResponse>* InjectiveAuctionRPC::Stub::StreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_auction_rpc::StreamBidsResponse>::Create(channel_.get(), rpcmethod_StreamBids_, context, request);
}

void InjectiveAuctionRPC::Stub::async::StreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest* request, ::grpc::ClientReadReactor< ::injective_auction_rpc::StreamBidsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_auction_rpc::StreamBidsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamBids_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_auction_rpc::StreamBidsResponse>* InjectiveAuctionRPC::Stub::AsyncStreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_auction_rpc::StreamBidsResponse>::Create(channel_.get(), cq, rpcmethod_StreamBids_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_auction_rpc::StreamBidsResponse>* InjectiveAuctionRPC::Stub::PrepareAsyncStreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_auction_rpc::StreamBidsResponse>::Create(channel_.get(), cq, rpcmethod_StreamBids_, context, request, false, nullptr);
}

InjectiveAuctionRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAuctionRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAuctionRPC::Service, ::injective_auction_rpc::AuctionRequest, ::injective_auction_rpc::AuctionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAuctionRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_auction_rpc::AuctionRequest* req,
             ::injective_auction_rpc::AuctionResponse* resp) {
               return service->AuctionEndpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAuctionRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAuctionRPC::Service, ::injective_auction_rpc::AuctionsRequest, ::injective_auction_rpc::AuctionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAuctionRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_auction_rpc::AuctionsRequest* req,
             ::injective_auction_rpc::AuctionsResponse* resp) {
               return service->Auctions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAuctionRPC_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveAuctionRPC::Service, ::injective_auction_rpc::StreamBidsRequest, ::injective_auction_rpc::StreamBidsResponse>(
          [](InjectiveAuctionRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_auction_rpc::StreamBidsRequest* req,
             ::grpc::ServerWriter<::injective_auction_rpc::StreamBidsResponse>* writer) {
               return service->StreamBids(ctx, req, writer);
             }, this)));
}

InjectiveAuctionRPC::Service::~Service() {
}

::grpc::Status InjectiveAuctionRPC::Service::AuctionEndpoint(::grpc::ServerContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAuctionRPC::Service::Auctions(::grpc::ServerContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAuctionRPC::Service::StreamBids(::grpc::ServerContext* context, const ::injective_auction_rpc::StreamBidsRequest* request, ::grpc::ServerWriter< ::injective_auction_rpc::StreamBidsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective_auction_rpc


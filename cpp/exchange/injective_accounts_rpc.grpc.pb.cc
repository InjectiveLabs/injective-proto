// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_accounts_rpc.proto

#include "exchange/injective_accounts_rpc.pb.h"
#include "exchange/injective_accounts_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective_accounts_rpc {

static const char* InjectiveAccountsRPC_method_names[] = {
  "/injective_accounts_rpc.InjectiveAccountsRPC/Portfolio",
  "/injective_accounts_rpc.InjectiveAccountsRPC/OrderStates",
  "/injective_accounts_rpc.InjectiveAccountsRPC/SubaccountsList",
  "/injective_accounts_rpc.InjectiveAccountsRPC/SubaccountBalancesList",
  "/injective_accounts_rpc.InjectiveAccountsRPC/SubaccountBalanceEndpoint",
  "/injective_accounts_rpc.InjectiveAccountsRPC/StreamSubaccountBalance",
  "/injective_accounts_rpc.InjectiveAccountsRPC/SubaccountHistory",
  "/injective_accounts_rpc.InjectiveAccountsRPC/SubaccountOrderSummary",
  "/injective_accounts_rpc.InjectiveAccountsRPC/Rewards",
};

std::unique_ptr< InjectiveAccountsRPC::Stub> InjectiveAccountsRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InjectiveAccountsRPC::Stub> stub(new InjectiveAccountsRPC::Stub(channel, options));
  return stub;
}

InjectiveAccountsRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Portfolio_(InjectiveAccountsRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderStates_(InjectiveAccountsRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountsList_(InjectiveAccountsRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountBalancesList_(InjectiveAccountsRPC_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountBalanceEndpoint_(InjectiveAccountsRPC_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamSubaccountBalance_(InjectiveAccountsRPC_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubaccountHistory_(InjectiveAccountsRPC_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountOrderSummary_(InjectiveAccountsRPC_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Rewards_(InjectiveAccountsRPC_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InjectiveAccountsRPC::Stub::Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::injective_accounts_rpc::PortfolioResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_accounts_rpc::PortfolioRequest, ::injective_accounts_rpc::PortfolioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Portfolio_, context, request, response);
}

void InjectiveAccountsRPC::Stub::async::Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_accounts_rpc::PortfolioRequest, ::injective_accounts_rpc::PortfolioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Portfolio_, context, request, response, std::move(f));
}

void InjectiveAccountsRPC::Stub::async::Portfolio(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Portfolio_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::PortfolioResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncPortfolioRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_accounts_rpc::PortfolioResponse, ::injective_accounts_rpc::PortfolioRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Portfolio_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::PortfolioResponse>* InjectiveAccountsRPC::Stub::AsyncPortfolioRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::PortfolioRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPortfolioRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveAccountsRPC::Stub::OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::injective_accounts_rpc::OrderStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_accounts_rpc::OrderStatesRequest, ::injective_accounts_rpc::OrderStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderStates_, context, request, response);
}

void InjectiveAccountsRPC::Stub::async::OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_accounts_rpc::OrderStatesRequest, ::injective_accounts_rpc::OrderStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderStates_, context, request, response, std::move(f));
}

void InjectiveAccountsRPC::Stub::async::OrderStates(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::OrderStatesResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncOrderStatesRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_accounts_rpc::OrderStatesResponse, ::injective_accounts_rpc::OrderStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::OrderStatesResponse>* InjectiveAccountsRPC::Stub::AsyncOrderStatesRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::OrderStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveAccountsRPC::Stub::SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::injective_accounts_rpc::SubaccountsListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_accounts_rpc::SubaccountsListRequest, ::injective_accounts_rpc::SubaccountsListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountsList_, context, request, response);
}

void InjectiveAccountsRPC::Stub::async::SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_accounts_rpc::SubaccountsListRequest, ::injective_accounts_rpc::SubaccountsListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountsList_, context, request, response, std::move(f));
}

void InjectiveAccountsRPC::Stub::async::SubaccountsList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountsList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountsListResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncSubaccountsListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_accounts_rpc::SubaccountsListResponse, ::injective_accounts_rpc::SubaccountsListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountsList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountsListResponse>* InjectiveAccountsRPC::Stub::AsyncSubaccountsListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountsListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountsListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveAccountsRPC::Stub::SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_accounts_rpc::SubaccountBalancesListRequest, ::injective_accounts_rpc::SubaccountBalancesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountBalancesList_, context, request, response);
}

void InjectiveAccountsRPC::Stub::async::SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_accounts_rpc::SubaccountBalancesListRequest, ::injective_accounts_rpc::SubaccountBalancesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountBalancesList_, context, request, response, std::move(f));
}

void InjectiveAccountsRPC::Stub::async::SubaccountBalancesList(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountBalancesList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalancesListResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncSubaccountBalancesListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_accounts_rpc::SubaccountBalancesListResponse, ::injective_accounts_rpc::SubaccountBalancesListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountBalancesList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalancesListResponse>* InjectiveAccountsRPC::Stub::AsyncSubaccountBalancesListRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountBalancesListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveAccountsRPC::Stub::SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::injective_accounts_rpc::SubaccountBalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_accounts_rpc::SubaccountBalanceRequest, ::injective_accounts_rpc::SubaccountBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountBalanceEndpoint_, context, request, response);
}

void InjectiveAccountsRPC::Stub::async::SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_accounts_rpc::SubaccountBalanceRequest, ::injective_accounts_rpc::SubaccountBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountBalanceEndpoint_, context, request, response, std::move(f));
}

void InjectiveAccountsRPC::Stub::async::SubaccountBalanceEndpoint(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountBalanceEndpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalanceResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncSubaccountBalanceEndpointRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_accounts_rpc::SubaccountBalanceResponse, ::injective_accounts_rpc::SubaccountBalanceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountBalanceEndpoint_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountBalanceResponse>* InjectiveAccountsRPC::Stub::AsyncSubaccountBalanceEndpointRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountBalanceEndpointRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* InjectiveAccountsRPC::Stub::StreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>::Create(channel_.get(), rpcmethod_StreamSubaccountBalance_, context, request);
}

void InjectiveAccountsRPC::Stub::async::StreamSubaccountBalance(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* request, ::grpc::ClientReadReactor< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamSubaccountBalance_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* InjectiveAccountsRPC::Stub::AsyncStreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>::Create(channel_.get(), cq, rpcmethod_StreamSubaccountBalance_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncStreamSubaccountBalanceRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>::Create(channel_.get(), cq, rpcmethod_StreamSubaccountBalance_, context, request, false, nullptr);
}

::grpc::Status InjectiveAccountsRPC::Stub::SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::injective_accounts_rpc::SubaccountHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_accounts_rpc::SubaccountHistoryRequest, ::injective_accounts_rpc::SubaccountHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountHistory_, context, request, response);
}

void InjectiveAccountsRPC::Stub::async::SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_accounts_rpc::SubaccountHistoryRequest, ::injective_accounts_rpc::SubaccountHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountHistory_, context, request, response, std::move(f));
}

void InjectiveAccountsRPC::Stub::async::SubaccountHistory(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountHistoryResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncSubaccountHistoryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_accounts_rpc::SubaccountHistoryResponse, ::injective_accounts_rpc::SubaccountHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountHistoryResponse>* InjectiveAccountsRPC::Stub::AsyncSubaccountHistoryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveAccountsRPC::Stub::SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::injective_accounts_rpc::SubaccountOrderSummaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountOrderSummary_, context, request, response);
}

void InjectiveAccountsRPC::Stub::async::SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::injective_accounts_rpc::SubaccountOrderSummaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountOrderSummary_, context, request, response, std::move(f));
}

void InjectiveAccountsRPC::Stub::async::SubaccountOrderSummary(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountOrderSummary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncSubaccountOrderSummaryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_accounts_rpc::SubaccountOrderSummaryResponse, ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountOrderSummary_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::SubaccountOrderSummaryResponse>* InjectiveAccountsRPC::Stub::AsyncSubaccountOrderSummaryRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountOrderSummaryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveAccountsRPC::Stub::Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::injective_accounts_rpc::RewardsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_accounts_rpc::RewardsRequest, ::injective_accounts_rpc::RewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Rewards_, context, request, response);
}

void InjectiveAccountsRPC::Stub::async::Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_accounts_rpc::RewardsRequest, ::injective_accounts_rpc::RewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rewards_, context, request, response, std::move(f));
}

void InjectiveAccountsRPC::Stub::async::Rewards(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Rewards_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::RewardsResponse>* InjectiveAccountsRPC::Stub::PrepareAsyncRewardsRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_accounts_rpc::RewardsResponse, ::injective_accounts_rpc::RewardsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Rewards_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_accounts_rpc::RewardsResponse>* InjectiveAccountsRPC::Stub::AsyncRewardsRaw(::grpc::ClientContext* context, const ::injective_accounts_rpc::RewardsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRewardsRaw(context, request, cq);
  result->StartCall();
  return result;
}

InjectiveAccountsRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::PortfolioRequest, ::injective_accounts_rpc::PortfolioResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::PortfolioRequest* req,
             ::injective_accounts_rpc::PortfolioResponse* resp) {
               return service->Portfolio(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::OrderStatesRequest, ::injective_accounts_rpc::OrderStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::OrderStatesRequest* req,
             ::injective_accounts_rpc::OrderStatesResponse* resp) {
               return service->OrderStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::SubaccountsListRequest, ::injective_accounts_rpc::SubaccountsListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::SubaccountsListRequest* req,
             ::injective_accounts_rpc::SubaccountsListResponse* resp) {
               return service->SubaccountsList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::SubaccountBalancesListRequest, ::injective_accounts_rpc::SubaccountBalancesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::SubaccountBalancesListRequest* req,
             ::injective_accounts_rpc::SubaccountBalancesListResponse* resp) {
               return service->SubaccountBalancesList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::SubaccountBalanceRequest, ::injective_accounts_rpc::SubaccountBalanceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::SubaccountBalanceRequest* req,
             ::injective_accounts_rpc::SubaccountBalanceResponse* resp) {
               return service->SubaccountBalanceEndpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::StreamSubaccountBalanceRequest, ::injective_accounts_rpc::StreamSubaccountBalanceResponse>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* req,
             ::grpc::ServerWriter<::injective_accounts_rpc::StreamSubaccountBalanceResponse>* writer) {
               return service->StreamSubaccountBalance(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::SubaccountHistoryRequest, ::injective_accounts_rpc::SubaccountHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::SubaccountHistoryRequest* req,
             ::injective_accounts_rpc::SubaccountHistoryResponse* resp) {
               return service->SubaccountHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::SubaccountOrderSummaryRequest, ::injective_accounts_rpc::SubaccountOrderSummaryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* req,
             ::injective_accounts_rpc::SubaccountOrderSummaryResponse* resp) {
               return service->SubaccountOrderSummary(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveAccountsRPC_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveAccountsRPC::Service, ::injective_accounts_rpc::RewardsRequest, ::injective_accounts_rpc::RewardsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveAccountsRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_accounts_rpc::RewardsRequest* req,
             ::injective_accounts_rpc::RewardsResponse* resp) {
               return service->Rewards(ctx, req, resp);
             }, this)));
}

InjectiveAccountsRPC::Service::~Service() {
}

::grpc::Status InjectiveAccountsRPC::Service::Portfolio(::grpc::ServerContext* context, const ::injective_accounts_rpc::PortfolioRequest* request, ::injective_accounts_rpc::PortfolioResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAccountsRPC::Service::OrderStates(::grpc::ServerContext* context, const ::injective_accounts_rpc::OrderStatesRequest* request, ::injective_accounts_rpc::OrderStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAccountsRPC::Service::SubaccountsList(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountsListRequest* request, ::injective_accounts_rpc::SubaccountsListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAccountsRPC::Service::SubaccountBalancesList(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountBalancesListRequest* request, ::injective_accounts_rpc::SubaccountBalancesListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAccountsRPC::Service::SubaccountBalanceEndpoint(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountBalanceRequest* request, ::injective_accounts_rpc::SubaccountBalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAccountsRPC::Service::StreamSubaccountBalance(::grpc::ServerContext* context, const ::injective_accounts_rpc::StreamSubaccountBalanceRequest* request, ::grpc::ServerWriter< ::injective_accounts_rpc::StreamSubaccountBalanceResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAccountsRPC::Service::SubaccountHistory(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountHistoryRequest* request, ::injective_accounts_rpc::SubaccountHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAccountsRPC::Service::SubaccountOrderSummary(::grpc::ServerContext* context, const ::injective_accounts_rpc::SubaccountOrderSummaryRequest* request, ::injective_accounts_rpc::SubaccountOrderSummaryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveAccountsRPC::Service::Rewards(::grpc::ServerContext* context, const ::injective_accounts_rpc::RewardsRequest* request, ::injective_accounts_rpc::RewardsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective_accounts_rpc


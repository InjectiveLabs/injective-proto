// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_insurance_rpc.proto

#include "exchange/injective_insurance_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective_insurance_rpc {
template <typename>
PROTOBUF_CONSTEXPR FundsRequest::FundsRequest(
    ::_pbi::ConstantInitialized) {}
struct FundsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundsRequestDefaultTypeInternal() {}
  union {
    FundsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundsRequestDefaultTypeInternal _FundsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FundsResponse::FundsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.funds_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FundsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundsResponseDefaultTypeInternal() {}
  union {
    FundsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundsResponseDefaultTypeInternal _FundsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InsuranceFund::InsuranceFund(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deposit_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pool_token_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.balance_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_share_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deposit_token_meta_)*/nullptr
  , /*decltype(_impl_.redemption_notice_period_duration_)*/ ::int64_t{0}

  , /*decltype(_impl_.expiry_)*/ ::int64_t{0}
} {}
struct InsuranceFundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsuranceFundDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsuranceFundDefaultTypeInternal() {}
  union {
    InsuranceFund _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsuranceFundDefaultTypeInternal _InsuranceFund_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TokenMeta::TokenMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.logo_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.decimals_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenMetaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenMetaDefaultTypeInternal() {}
  union {
    TokenMeta _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenMetaDefaultTypeInternal _TokenMeta_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RedemptionsRequest::RedemptionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.redeemer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.redemption_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RedemptionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedemptionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedemptionsRequestDefaultTypeInternal() {}
  union {
    RedemptionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedemptionsRequestDefaultTypeInternal _RedemptionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RedemptionsResponse::RedemptionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.redemption_schedules_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RedemptionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedemptionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedemptionsResponseDefaultTypeInternal() {}
  union {
    RedemptionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedemptionsResponseDefaultTypeInternal _RedemptionsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RedemptionSchedule::RedemptionSchedule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.redeemer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.redemption_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.redemption_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.disbursed_amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.disbursed_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.redemption_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.claimable_redemption_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.requested_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.disbursed_at_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RedemptionScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedemptionScheduleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedemptionScheduleDefaultTypeInternal() {}
  union {
    RedemptionSchedule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedemptionScheduleDefaultTypeInternal _RedemptionSchedule_default_instance_;
}  // namespace injective_insurance_rpc
static ::_pb::Metadata file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_exchange_2finjective_5finsurance_5frpc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_exchange_2finjective_5finsurance_5frpc_2eproto = nullptr;
const ::uint32_t TableStruct_exchange_2finjective_5finsurance_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::FundsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::FundsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::FundsResponse, _impl_.funds_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.market_ticker_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.deposit_denom_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.pool_token_denom_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.redemption_notice_period_duration_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.balance_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.total_share_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.oracle_base_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.oracle_quote_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.expiry_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::InsuranceFund, _impl_.deposit_token_meta_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::TokenMeta, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::TokenMeta, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::TokenMeta, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::TokenMeta, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::TokenMeta, _impl_.logo_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::TokenMeta, _impl_.decimals_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::TokenMeta, _impl_.updated_at_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionsRequest, _impl_.redeemer_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionsRequest, _impl_.redemption_denom_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionsRequest, _impl_.status_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionsResponse, _impl_.redemption_schedules_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.redemption_id_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.redeemer_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.claimable_redemption_time_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.redemption_amount_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.redemption_denom_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.requested_at_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.disbursed_amount_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.disbursed_denom_),
    PROTOBUF_FIELD_OFFSET(::injective_insurance_rpc::RedemptionSchedule, _impl_.disbursed_at_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective_insurance_rpc::FundsRequest)},
        { 8, -1, -1, sizeof(::injective_insurance_rpc::FundsResponse)},
        { 17, 37, -1, sizeof(::injective_insurance_rpc::InsuranceFund)},
        { 49, -1, -1, sizeof(::injective_insurance_rpc::TokenMeta)},
        { 63, -1, -1, sizeof(::injective_insurance_rpc::RedemptionsRequest)},
        { 74, -1, -1, sizeof(::injective_insurance_rpc::RedemptionsResponse)},
        { 83, -1, -1, sizeof(::injective_insurance_rpc::RedemptionSchedule)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective_insurance_rpc::_FundsRequest_default_instance_._instance,
    &::injective_insurance_rpc::_FundsResponse_default_instance_._instance,
    &::injective_insurance_rpc::_InsuranceFund_default_instance_._instance,
    &::injective_insurance_rpc::_TokenMeta_default_instance_._instance,
    &::injective_insurance_rpc::_RedemptionsRequest_default_instance_._instance,
    &::injective_insurance_rpc::_RedemptionsResponse_default_instance_._instance,
    &::injective_insurance_rpc::_RedemptionSchedule_default_instance_._instance,
};
const char descriptor_table_protodef_exchange_2finjective_5finsurance_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&exchange/injective_insurance_rpc.proto"
    "\022\027injective_insurance_rpc\"\016\n\014FundsReques"
    "t\"M\n\rFundsResponse\022<\n\005funds\030\001 \003(\0132&.inje"
    "ctive_insurance_rpc.InsuranceFundR\005funds"
    "\"\365\003\n\rInsuranceFund\022#\n\rmarket_ticker\030\001 \001("
    "\tR\014marketTicker\022\033\n\tmarket_id\030\002 \001(\tR\010mark"
    "etId\022#\n\rdeposit_denom\030\003 \001(\tR\014depositDeno"
    "m\022(\n\020pool_token_denom\030\004 \001(\tR\016poolTokenDe"
    "nom\022I\n!redemption_notice_period_duration"
    "\030\005 \001(\022R\036redemptionNoticePeriodDuration\022\030"
    "\n\007balance\030\006 \001(\tR\007balance\022\037\n\013total_share\030"
    "\007 \001(\tR\ntotalShare\022\037\n\013oracle_base\030\010 \001(\tR\n"
    "oracleBase\022!\n\014oracle_quote\030\t \001(\tR\013oracle"
    "Quote\022\037\n\013oracle_type\030\n \001(\tR\noracleType\022\026"
    "\n\006expiry\030\013 \001(\022R\006expiry\022P\n\022deposit_token_"
    "meta\030\014 \001(\0132\".injective_insurance_rpc.Tok"
    "enMetaR\020depositTokenMeta\"\240\001\n\tTokenMeta\022\022"
    "\n\004name\030\001 \001(\tR\004name\022\030\n\007address\030\002 \001(\tR\007add"
    "ress\022\026\n\006symbol\030\003 \001(\tR\006symbol\022\022\n\004logo\030\004 \001"
    "(\tR\004logo\022\032\n\010decimals\030\005 \001(\021R\010decimals\022\035\n\n"
    "updated_at\030\006 \001(\022R\tupdatedAt\"s\n\022Redemptio"
    "nsRequest\022\032\n\010redeemer\030\001 \001(\tR\010redeemer\022)\n"
    "\020redemption_denom\030\002 \001(\tR\017redemptionDenom"
    "\022\026\n\006status\030\003 \001(\tR\006status\"u\n\023RedemptionsR"
    "esponse\022^\n\024redemption_schedules\030\001 \003(\0132+."
    "injective_insurance_rpc.RedemptionSchedu"
    "leR\023redemptionSchedules\"\233\003\n\022RedemptionSc"
    "hedule\022#\n\rredemption_id\030\001 \001(\004R\014redemptio"
    "nId\022\026\n\006status\030\002 \001(\tR\006status\022\032\n\010redeemer\030"
    "\003 \001(\tR\010redeemer\022:\n\031claimable_redemption_"
    "time\030\004 \001(\022R\027claimableRedemptionTime\022+\n\021r"
    "edemption_amount\030\005 \001(\tR\020redemptionAmount"
    "\022)\n\020redemption_denom\030\006 \001(\tR\017redemptionDe"
    "nom\022!\n\014requested_at\030\007 \001(\022R\013requestedAt\022)"
    "\n\020disbursed_amount\030\010 \001(\tR\017disbursedAmoun"
    "t\022\'\n\017disbursed_denom\030\t \001(\tR\016disbursedDen"
    "om\022!\n\014disbursed_at\030\n \001(\022R\013disbursedAt2\331\001"
    "\n\025InjectiveInsuranceRPC\022V\n\005Funds\022%.injec"
    "tive_insurance_rpc.FundsRequest\032&.inject"
    "ive_insurance_rpc.FundsResponse\022h\n\013Redem"
    "ptions\022+.injective_insurance_rpc.Redempt"
    "ionsRequest\032,.injective_insurance_rpc.Re"
    "demptionsResponseB\311\001\n\033com.injective_insu"
    "rance_rpcB\032InjectiveInsuranceRpcProtoP\001Z"
    "\032/injective_insurance_rpcpb\242\002\003IXX\252\002\025Inje"
    "ctiveInsuranceRpc\312\002\025InjectiveInsuranceRp"
    "c\342\002!InjectiveInsuranceRpc\\GPBMetadata\352\002\025"
    "InjectiveInsuranceRpcb\006proto3"
};
static ::absl::once_flag descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto = {
    false,
    false,
    1909,
    descriptor_table_protodef_exchange_2finjective_5finsurance_5frpc_2eproto,
    "exchange/injective_insurance_rpc.proto",
    &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_exchange_2finjective_5finsurance_5frpc_2eproto::offsets,
    file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto,
    file_level_enum_descriptors_exchange_2finjective_5finsurance_5frpc_2eproto,
    file_level_service_descriptors_exchange_2finjective_5finsurance_5frpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_getter() {
  return &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_2finjective_5finsurance_5frpc_2eproto(&descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto);
namespace injective_insurance_rpc {
// ===================================================================

class FundsRequest::_Internal {
 public:
};

FundsRequest::FundsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective_insurance_rpc.FundsRequest)
}
FundsRequest::FundsRequest(const FundsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  FundsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_insurance_rpc.FundsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata FundsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto[0]);
}
// ===================================================================

class FundsResponse::_Internal {
 public:
};

FundsResponse::FundsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_insurance_rpc.FundsResponse)
}
FundsResponse::FundsResponse(const FundsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_){from._impl_.funds_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_insurance_rpc.FundsResponse)
}

inline void FundsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.funds_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FundsResponse::~FundsResponse() {
  // @@protoc_insertion_point(destructor:injective_insurance_rpc.FundsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funds()->~RepeatedPtrField();
}

void FundsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_insurance_rpc.FundsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funds()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_insurance_rpc.InsuranceFund funds = 1 [json_name = "funds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FundsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_insurance_rpc.FundsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_insurance_rpc.InsuranceFund funds = 1 [json_name = "funds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funds_size()); i < n; i++) {
    const auto& repfield = this->_internal_funds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_insurance_rpc.FundsResponse)
  return target;
}

::size_t FundsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_insurance_rpc.FundsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_insurance_rpc.InsuranceFund funds = 1 [json_name = "funds"];
  total_size += 1UL * this->_internal_funds_size();
  for (const auto& msg : this->_internal_funds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundsResponse::GetClassData() const { return &_class_data_; }


void FundsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundsResponse*>(&to_msg);
  auto& from = static_cast<const FundsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_insurance_rpc.FundsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funds()->MergeFrom(from._internal_funds());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundsResponse::CopyFrom(const FundsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_insurance_rpc.FundsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundsResponse::IsInitialized() const {
  return true;
}

void FundsResponse::InternalSwap(FundsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_funds()->InternalSwap(other->_internal_mutable_funds());
}

::PROTOBUF_NAMESPACE_ID::Metadata FundsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto[1]);
}
// ===================================================================

class InsuranceFund::_Internal {
 public:
  using HasBits = decltype(std::declval<InsuranceFund>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InsuranceFund, _impl_._has_bits_);
  static const ::injective_insurance_rpc::TokenMeta& deposit_token_meta(const InsuranceFund* msg);
  static void set_has_deposit_token_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_insurance_rpc::TokenMeta&
InsuranceFund::_Internal::deposit_token_meta(const InsuranceFund* msg) {
  return *msg->_impl_.deposit_token_meta_;
}
InsuranceFund::InsuranceFund(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_insurance_rpc.InsuranceFund)
}
InsuranceFund::InsuranceFund(const InsuranceFund& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsuranceFund* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_ticker_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.deposit_denom_) {}

    , decltype(_impl_.pool_token_denom_) {}

    , decltype(_impl_.balance_) {}

    , decltype(_impl_.total_share_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.deposit_token_meta_){nullptr}
    , decltype(_impl_.redemption_notice_period_duration_) {}

    , decltype(_impl_.expiry_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_ticker().empty()) {
    _this->_impl_.market_ticker_.Set(from._internal_market_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.deposit_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deposit_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deposit_denom().empty()) {
    _this->_impl_.deposit_denom_.Set(from._internal_deposit_denom(), _this->GetArenaForAllocation());
  }
  _impl_.pool_token_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pool_token_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pool_token_denom().empty()) {
    _this->_impl_.pool_token_denom_.Set(from._internal_pool_token_denom(), _this->GetArenaForAllocation());
  }
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), _this->GetArenaForAllocation());
  }
  _impl_.total_share_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_share_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_total_share().empty()) {
    _this->_impl_.total_share_.Set(from._internal_total_share(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_base().empty()) {
    _this->_impl_.oracle_base_.Set(from._internal_oracle_base(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_quote().empty()) {
    _this->_impl_.oracle_quote_.Set(from._internal_oracle_quote(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_type().empty()) {
    _this->_impl_.oracle_type_.Set(from._internal_oracle_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deposit_token_meta_ = new ::injective_insurance_rpc::TokenMeta(*from._impl_.deposit_token_meta_);
  }
  ::memcpy(&_impl_.redemption_notice_period_duration_, &from._impl_.redemption_notice_period_duration_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.expiry_) -
    reinterpret_cast<char*>(&_impl_.redemption_notice_period_duration_)) + sizeof(_impl_.expiry_));
  // @@protoc_insertion_point(copy_constructor:injective_insurance_rpc.InsuranceFund)
}

inline void InsuranceFund::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_ticker_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.deposit_denom_) {}

    , decltype(_impl_.pool_token_denom_) {}

    , decltype(_impl_.balance_) {}

    , decltype(_impl_.total_share_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.deposit_token_meta_){nullptr}
    , decltype(_impl_.redemption_notice_period_duration_) { ::int64_t{0} }

    , decltype(_impl_.expiry_) { ::int64_t{0} }

  };
  _impl_.market_ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deposit_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deposit_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pool_token_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pool_token_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.total_share_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_share_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsuranceFund::~InsuranceFund() {
  // @@protoc_insertion_point(destructor:injective_insurance_rpc.InsuranceFund)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsuranceFund::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_ticker_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.deposit_denom_.Destroy();
  _impl_.pool_token_denom_.Destroy();
  _impl_.balance_.Destroy();
  _impl_.total_share_.Destroy();
  _impl_.oracle_base_.Destroy();
  _impl_.oracle_quote_.Destroy();
  _impl_.oracle_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.deposit_token_meta_;
}

void InsuranceFund::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsuranceFund::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_insurance_rpc.InsuranceFund)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_ticker_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.deposit_denom_.ClearToEmpty();
  _impl_.pool_token_denom_.ClearToEmpty();
  _impl_.balance_.ClearToEmpty();
  _impl_.total_share_.ClearToEmpty();
  _impl_.oracle_base_.ClearToEmpty();
  _impl_.oracle_quote_.ClearToEmpty();
  _impl_.oracle_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.deposit_token_meta_ != nullptr);
    _impl_.deposit_token_meta_->Clear();
  }
  ::memset(&_impl_.redemption_notice_period_duration_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.expiry_) -
      reinterpret_cast<char*>(&_impl_.redemption_notice_period_duration_)) + sizeof(_impl_.expiry_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsuranceFund::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_ticker = 1 [json_name = "marketTicker"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.market_ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string deposit_denom = 3 [json_name = "depositDenom"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_deposit_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.deposit_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string pool_token_denom = 4 [json_name = "poolTokenDenom"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pool_token_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.pool_token_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 redemption_notice_period_duration = 5 [json_name = "redemptionNoticePeriodDuration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.redemption_notice_period_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string balance = 6 [json_name = "balance"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.balance"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string total_share = 7 [json_name = "totalShare"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_total_share();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.total_share"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_base = 8 [json_name = "oracleBase"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_oracle_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.oracle_base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_quote = 9 [json_name = "oracleQuote"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_oracle_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.oracle_quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_type = 10 [json_name = "oracleType"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_oracle_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.InsuranceFund.oracle_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 expiry = 11 [json_name = "expiry"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_insurance_rpc.TokenMeta deposit_token_meta = 12 [json_name = "depositTokenMeta"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit_token_meta(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InsuranceFund::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_insurance_rpc.InsuranceFund)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_ticker = 1 [json_name = "marketTicker"];
  if (!this->_internal_market_ticker().empty()) {
    const std::string& _s = this->_internal_market_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.market_ticker");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string deposit_denom = 3 [json_name = "depositDenom"];
  if (!this->_internal_deposit_denom().empty()) {
    const std::string& _s = this->_internal_deposit_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.deposit_denom");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string pool_token_denom = 4 [json_name = "poolTokenDenom"];
  if (!this->_internal_pool_token_denom().empty()) {
    const std::string& _s = this->_internal_pool_token_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.pool_token_denom");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // sint64 redemption_notice_period_duration = 5 [json_name = "redemptionNoticePeriodDuration"];
  if (this->_internal_redemption_notice_period_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        5, this->_internal_redemption_notice_period_duration(), target);
  }

  // string balance = 6 [json_name = "balance"];
  if (!this->_internal_balance().empty()) {
    const std::string& _s = this->_internal_balance();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.balance");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string total_share = 7 [json_name = "totalShare"];
  if (!this->_internal_total_share().empty()) {
    const std::string& _s = this->_internal_total_share();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.total_share");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string oracle_base = 8 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    const std::string& _s = this->_internal_oracle_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.oracle_base");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string oracle_quote = 9 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    const std::string& _s = this->_internal_oracle_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.oracle_quote");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string oracle_type = 10 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    const std::string& _s = this->_internal_oracle_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.InsuranceFund.oracle_type");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // sint64 expiry = 11 [json_name = "expiry"];
  if (this->_internal_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        11, this->_internal_expiry(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_insurance_rpc.TokenMeta deposit_token_meta = 12 [json_name = "depositTokenMeta"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::deposit_token_meta(this),
        _Internal::deposit_token_meta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_insurance_rpc.InsuranceFund)
  return target;
}

::size_t InsuranceFund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_insurance_rpc.InsuranceFund)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_ticker = 1 [json_name = "marketTicker"];
  if (!this->_internal_market_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_ticker());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string deposit_denom = 3 [json_name = "depositDenom"];
  if (!this->_internal_deposit_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deposit_denom());
  }

  // string pool_token_denom = 4 [json_name = "poolTokenDenom"];
  if (!this->_internal_pool_token_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_pool_token_denom());
  }

  // string balance = 6 [json_name = "balance"];
  if (!this->_internal_balance().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_balance());
  }

  // string total_share = 7 [json_name = "totalShare"];
  if (!this->_internal_total_share().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_total_share());
  }

  // string oracle_base = 8 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_base());
  }

  // string oracle_quote = 9 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_quote());
  }

  // string oracle_type = 10 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_type());
  }

  // .injective_insurance_rpc.TokenMeta deposit_token_meta = 12 [json_name = "depositTokenMeta"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deposit_token_meta_);
  }

  // sint64 redemption_notice_period_duration = 5 [json_name = "redemptionNoticePeriodDuration"];
  if (this->_internal_redemption_notice_period_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_redemption_notice_period_duration());
  }

  // sint64 expiry = 11 [json_name = "expiry"];
  if (this->_internal_expiry() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_expiry());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsuranceFund::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsuranceFund::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsuranceFund::GetClassData() const { return &_class_data_; }


void InsuranceFund::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsuranceFund*>(&to_msg);
  auto& from = static_cast<const InsuranceFund&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_insurance_rpc.InsuranceFund)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_ticker().empty()) {
    _this->_internal_set_market_ticker(from._internal_market_ticker());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_deposit_denom().empty()) {
    _this->_internal_set_deposit_denom(from._internal_deposit_denom());
  }
  if (!from._internal_pool_token_denom().empty()) {
    _this->_internal_set_pool_token_denom(from._internal_pool_token_denom());
  }
  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if (!from._internal_total_share().empty()) {
    _this->_internal_set_total_share(from._internal_total_share());
  }
  if (!from._internal_oracle_base().empty()) {
    _this->_internal_set_oracle_base(from._internal_oracle_base());
  }
  if (!from._internal_oracle_quote().empty()) {
    _this->_internal_set_oracle_quote(from._internal_oracle_quote());
  }
  if (!from._internal_oracle_type().empty()) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_deposit_token_meta()->::injective_insurance_rpc::TokenMeta::MergeFrom(
        from._internal_deposit_token_meta());
  }
  if (from._internal_redemption_notice_period_duration() != 0) {
    _this->_internal_set_redemption_notice_period_duration(from._internal_redemption_notice_period_duration());
  }
  if (from._internal_expiry() != 0) {
    _this->_internal_set_expiry(from._internal_expiry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsuranceFund::CopyFrom(const InsuranceFund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_insurance_rpc.InsuranceFund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsuranceFund::IsInitialized() const {
  return true;
}

void InsuranceFund::InternalSwap(InsuranceFund* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_ticker_, lhs_arena,
                                       &other->_impl_.market_ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deposit_denom_, lhs_arena,
                                       &other->_impl_.deposit_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pool_token_denom_, lhs_arena,
                                       &other->_impl_.pool_token_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.balance_, lhs_arena,
                                       &other->_impl_.balance_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.total_share_, lhs_arena,
                                       &other->_impl_.total_share_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_base_, lhs_arena,
                                       &other->_impl_.oracle_base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_quote_, lhs_arena,
                                       &other->_impl_.oracle_quote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_type_, lhs_arena,
                                       &other->_impl_.oracle_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsuranceFund, _impl_.expiry_)
      + sizeof(InsuranceFund::_impl_.expiry_)
      - PROTOBUF_FIELD_OFFSET(InsuranceFund, _impl_.deposit_token_meta_)>(
          reinterpret_cast<char*>(&_impl_.deposit_token_meta_),
          reinterpret_cast<char*>(&other->_impl_.deposit_token_meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsuranceFund::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto[2]);
}
// ===================================================================

class TokenMeta::_Internal {
 public:
};

TokenMeta::TokenMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_insurance_rpc.TokenMeta)
}
TokenMeta::TokenMeta(const TokenMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.logo_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.decimals_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo().empty()) {
    _this->_impl_.logo_.Set(from._internal_logo(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.updated_at_, &from._impl_.updated_at_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.decimals_) -
    reinterpret_cast<char*>(&_impl_.updated_at_)) + sizeof(_impl_.decimals_));
  // @@protoc_insertion_point(copy_constructor:injective_insurance_rpc.TokenMeta)
}

inline void TokenMeta::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.logo_) {}

    , decltype(_impl_.updated_at_) { ::int64_t{0} }

    , decltype(_impl_.decimals_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenMeta::~TokenMeta() {
  // @@protoc_insertion_point(destructor:injective_insurance_rpc.TokenMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenMeta::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.address_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.logo_.Destroy();
}

void TokenMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_insurance_rpc.TokenMeta)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.logo_.ClearToEmpty();
  ::memset(&_impl_.updated_at_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.decimals_) -
      reinterpret_cast<char*>(&_impl_.updated_at_)) + sizeof(_impl_.decimals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.TokenMeta.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.TokenMeta.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 3 [json_name = "symbol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.TokenMeta.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string logo = 4 [json_name = "logo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.TokenMeta.logo"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 decimals = 5 [json_name = "decimals"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 updated_at = 6 [json_name = "updatedAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TokenMeta::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_insurance_rpc.TokenMeta)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.TokenMeta.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.TokenMeta.address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string symbol = 3 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.TokenMeta.symbol");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string logo = 4 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    const std::string& _s = this->_internal_logo();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.TokenMeta.logo");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // sint32 decimals = 5 [json_name = "decimals"];
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        5, this->_internal_decimals(), target);
  }

  // sint64 updated_at = 6 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_insurance_rpc.TokenMeta)
  return target;
}

::size_t TokenMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_insurance_rpc.TokenMeta)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string symbol = 3 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string logo = 4 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_logo());
  }

  // sint64 updated_at = 6 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_updated_at());
  }

  // sint32 decimals = 5 [json_name = "decimals"];
  if (this->_internal_decimals() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_decimals());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenMeta::GetClassData() const { return &_class_data_; }


void TokenMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenMeta*>(&to_msg);
  auto& from = static_cast<const TokenMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_insurance_rpc.TokenMeta)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_logo().empty()) {
    _this->_internal_set_logo(from._internal_logo());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_decimals() != 0) {
    _this->_internal_set_decimals(from._internal_decimals());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenMeta::CopyFrom(const TokenMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_insurance_rpc.TokenMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenMeta::IsInitialized() const {
  return true;
}

void TokenMeta::InternalSwap(TokenMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.logo_, lhs_arena,
                                       &other->_impl_.logo_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenMeta, _impl_.decimals_)
      + sizeof(TokenMeta::_impl_.decimals_)
      - PROTOBUF_FIELD_OFFSET(TokenMeta, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto[3]);
}
// ===================================================================

class RedemptionsRequest::_Internal {
 public:
};

RedemptionsRequest::RedemptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_insurance_rpc.RedemptionsRequest)
}
RedemptionsRequest::RedemptionsRequest(const RedemptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedemptionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.redeemer_) {}

    , decltype(_impl_.redemption_denom_) {}

    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.redeemer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redeemer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redeemer().empty()) {
    _this->_impl_.redeemer_.Set(from._internal_redeemer(), _this->GetArenaForAllocation());
  }
  _impl_.redemption_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redemption_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redemption_denom().empty()) {
    _this->_impl_.redemption_denom_.Set(from._internal_redemption_denom(), _this->GetArenaForAllocation());
  }
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_insurance_rpc.RedemptionsRequest)
}

inline void RedemptionsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.redeemer_) {}

    , decltype(_impl_.redemption_denom_) {}

    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.redeemer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redeemer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redemption_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redemption_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RedemptionsRequest::~RedemptionsRequest() {
  // @@protoc_insertion_point(destructor:injective_insurance_rpc.RedemptionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedemptionsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.redeemer_.Destroy();
  _impl_.redemption_denom_.Destroy();
  _impl_.status_.Destroy();
}

void RedemptionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedemptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_insurance_rpc.RedemptionsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.redeemer_.ClearToEmpty();
  _impl_.redemption_denom_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedemptionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string redeemer = 1 [json_name = "redeemer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_redeemer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionsRequest.redeemer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string redemption_denom = 2 [json_name = "redemptionDenom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_redemption_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionsRequest.redemption_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string status = 3 [json_name = "status"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionsRequest.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedemptionsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_insurance_rpc.RedemptionsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string redeemer = 1 [json_name = "redeemer"];
  if (!this->_internal_redeemer().empty()) {
    const std::string& _s = this->_internal_redeemer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionsRequest.redeemer");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string redemption_denom = 2 [json_name = "redemptionDenom"];
  if (!this->_internal_redemption_denom().empty()) {
    const std::string& _s = this->_internal_redemption_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionsRequest.redemption_denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string status = 3 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionsRequest.status");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_insurance_rpc.RedemptionsRequest)
  return target;
}

::size_t RedemptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_insurance_rpc.RedemptionsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string redeemer = 1 [json_name = "redeemer"];
  if (!this->_internal_redeemer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_redeemer());
  }

  // string redemption_denom = 2 [json_name = "redemptionDenom"];
  if (!this->_internal_redemption_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_redemption_denom());
  }

  // string status = 3 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedemptionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedemptionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedemptionsRequest::GetClassData() const { return &_class_data_; }


void RedemptionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedemptionsRequest*>(&to_msg);
  auto& from = static_cast<const RedemptionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_insurance_rpc.RedemptionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_redeemer().empty()) {
    _this->_internal_set_redeemer(from._internal_redeemer());
  }
  if (!from._internal_redemption_denom().empty()) {
    _this->_internal_set_redemption_denom(from._internal_redemption_denom());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedemptionsRequest::CopyFrom(const RedemptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_insurance_rpc.RedemptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedemptionsRequest::IsInitialized() const {
  return true;
}

void RedemptionsRequest::InternalSwap(RedemptionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redeemer_, lhs_arena,
                                       &other->_impl_.redeemer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redemption_denom_, lhs_arena,
                                       &other->_impl_.redemption_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedemptionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto[4]);
}
// ===================================================================

class RedemptionsResponse::_Internal {
 public:
};

RedemptionsResponse::RedemptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_insurance_rpc.RedemptionsResponse)
}
RedemptionsResponse::RedemptionsResponse(const RedemptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedemptionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.redemption_schedules_){from._impl_.redemption_schedules_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_insurance_rpc.RedemptionsResponse)
}

inline void RedemptionsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.redemption_schedules_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RedemptionsResponse::~RedemptionsResponse() {
  // @@protoc_insertion_point(destructor:injective_insurance_rpc.RedemptionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedemptionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_redemption_schedules()->~RepeatedPtrField();
}

void RedemptionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedemptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_insurance_rpc.RedemptionsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_redemption_schedules()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedemptionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_insurance_rpc.RedemptionSchedule redemption_schedules = 1 [json_name = "redemptionSchedules"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redemption_schedules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedemptionsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_insurance_rpc.RedemptionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_insurance_rpc.RedemptionSchedule redemption_schedules = 1 [json_name = "redemptionSchedules"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_redemption_schedules_size()); i < n; i++) {
    const auto& repfield = this->_internal_redemption_schedules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_insurance_rpc.RedemptionsResponse)
  return target;
}

::size_t RedemptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_insurance_rpc.RedemptionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_insurance_rpc.RedemptionSchedule redemption_schedules = 1 [json_name = "redemptionSchedules"];
  total_size += 1UL * this->_internal_redemption_schedules_size();
  for (const auto& msg : this->_internal_redemption_schedules()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedemptionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedemptionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedemptionsResponse::GetClassData() const { return &_class_data_; }


void RedemptionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedemptionsResponse*>(&to_msg);
  auto& from = static_cast<const RedemptionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_insurance_rpc.RedemptionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_redemption_schedules()->MergeFrom(from._internal_redemption_schedules());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedemptionsResponse::CopyFrom(const RedemptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_insurance_rpc.RedemptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedemptionsResponse::IsInitialized() const {
  return true;
}

void RedemptionsResponse::InternalSwap(RedemptionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_redemption_schedules()->InternalSwap(other->_internal_mutable_redemption_schedules());
}

::PROTOBUF_NAMESPACE_ID::Metadata RedemptionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto[5]);
}
// ===================================================================

class RedemptionSchedule::_Internal {
 public:
};

RedemptionSchedule::RedemptionSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_insurance_rpc.RedemptionSchedule)
}
RedemptionSchedule::RedemptionSchedule(const RedemptionSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedemptionSchedule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) {}

    , decltype(_impl_.redeemer_) {}

    , decltype(_impl_.redemption_amount_) {}

    , decltype(_impl_.redemption_denom_) {}

    , decltype(_impl_.disbursed_amount_) {}

    , decltype(_impl_.disbursed_denom_) {}

    , decltype(_impl_.redemption_id_) {}

    , decltype(_impl_.claimable_redemption_time_) {}

    , decltype(_impl_.requested_at_) {}

    , decltype(_impl_.disbursed_at_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  _impl_.redeemer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redeemer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redeemer().empty()) {
    _this->_impl_.redeemer_.Set(from._internal_redeemer(), _this->GetArenaForAllocation());
  }
  _impl_.redemption_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redemption_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redemption_amount().empty()) {
    _this->_impl_.redemption_amount_.Set(from._internal_redemption_amount(), _this->GetArenaForAllocation());
  }
  _impl_.redemption_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redemption_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redemption_denom().empty()) {
    _this->_impl_.redemption_denom_.Set(from._internal_redemption_denom(), _this->GetArenaForAllocation());
  }
  _impl_.disbursed_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.disbursed_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_disbursed_amount().empty()) {
    _this->_impl_.disbursed_amount_.Set(from._internal_disbursed_amount(), _this->GetArenaForAllocation());
  }
  _impl_.disbursed_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.disbursed_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_disbursed_denom().empty()) {
    _this->_impl_.disbursed_denom_.Set(from._internal_disbursed_denom(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.redemption_id_, &from._impl_.redemption_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.disbursed_at_) -
    reinterpret_cast<char*>(&_impl_.redemption_id_)) + sizeof(_impl_.disbursed_at_));
  // @@protoc_insertion_point(copy_constructor:injective_insurance_rpc.RedemptionSchedule)
}

inline void RedemptionSchedule::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) {}

    , decltype(_impl_.redeemer_) {}

    , decltype(_impl_.redemption_amount_) {}

    , decltype(_impl_.redemption_denom_) {}

    , decltype(_impl_.disbursed_amount_) {}

    , decltype(_impl_.disbursed_denom_) {}

    , decltype(_impl_.redemption_id_) { ::uint64_t{0u} }

    , decltype(_impl_.claimable_redemption_time_) { ::int64_t{0} }

    , decltype(_impl_.requested_at_) { ::int64_t{0} }

    , decltype(_impl_.disbursed_at_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redeemer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redeemer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redemption_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redemption_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redemption_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.redemption_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.disbursed_amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.disbursed_amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.disbursed_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.disbursed_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RedemptionSchedule::~RedemptionSchedule() {
  // @@protoc_insertion_point(destructor:injective_insurance_rpc.RedemptionSchedule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedemptionSchedule::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
  _impl_.redeemer_.Destroy();
  _impl_.redemption_amount_.Destroy();
  _impl_.redemption_denom_.Destroy();
  _impl_.disbursed_amount_.Destroy();
  _impl_.disbursed_denom_.Destroy();
}

void RedemptionSchedule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedemptionSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_insurance_rpc.RedemptionSchedule)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _impl_.redeemer_.ClearToEmpty();
  _impl_.redemption_amount_.ClearToEmpty();
  _impl_.redemption_denom_.ClearToEmpty();
  _impl_.disbursed_amount_.ClearToEmpty();
  _impl_.disbursed_denom_.ClearToEmpty();
  ::memset(&_impl_.redemption_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.disbursed_at_) -
      reinterpret_cast<char*>(&_impl_.redemption_id_)) + sizeof(_impl_.disbursed_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedemptionSchedule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 redemption_id = 1 [json_name = "redemptionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.redemption_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionSchedule.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string redeemer = 3 [json_name = "redeemer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_redeemer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionSchedule.redeemer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 claimable_redemption_time = 4 [json_name = "claimableRedemptionTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.claimable_redemption_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string redemption_amount = 5 [json_name = "redemptionAmount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_redemption_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionSchedule.redemption_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string redemption_denom = 6 [json_name = "redemptionDenom"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_redemption_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionSchedule.redemption_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 requested_at = 7 [json_name = "requestedAt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.requested_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string disbursed_amount = 8 [json_name = "disbursedAmount"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_disbursed_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionSchedule.disbursed_amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string disbursed_denom = 9 [json_name = "disbursedDenom"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_disbursed_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_insurance_rpc.RedemptionSchedule.disbursed_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 disbursed_at = 10 [json_name = "disbursedAt"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.disbursed_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedemptionSchedule::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_insurance_rpc.RedemptionSchedule)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 redemption_id = 1 [json_name = "redemptionId"];
  if (this->_internal_redemption_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_redemption_id(), target);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionSchedule.status");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string redeemer = 3 [json_name = "redeemer"];
  if (!this->_internal_redeemer().empty()) {
    const std::string& _s = this->_internal_redeemer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionSchedule.redeemer");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // sint64 claimable_redemption_time = 4 [json_name = "claimableRedemptionTime"];
  if (this->_internal_claimable_redemption_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_claimable_redemption_time(), target);
  }

  // string redemption_amount = 5 [json_name = "redemptionAmount"];
  if (!this->_internal_redemption_amount().empty()) {
    const std::string& _s = this->_internal_redemption_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionSchedule.redemption_amount");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string redemption_denom = 6 [json_name = "redemptionDenom"];
  if (!this->_internal_redemption_denom().empty()) {
    const std::string& _s = this->_internal_redemption_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionSchedule.redemption_denom");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // sint64 requested_at = 7 [json_name = "requestedAt"];
  if (this->_internal_requested_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_requested_at(), target);
  }

  // string disbursed_amount = 8 [json_name = "disbursedAmount"];
  if (!this->_internal_disbursed_amount().empty()) {
    const std::string& _s = this->_internal_disbursed_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionSchedule.disbursed_amount");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string disbursed_denom = 9 [json_name = "disbursedDenom"];
  if (!this->_internal_disbursed_denom().empty()) {
    const std::string& _s = this->_internal_disbursed_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_insurance_rpc.RedemptionSchedule.disbursed_denom");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // sint64 disbursed_at = 10 [json_name = "disbursedAt"];
  if (this->_internal_disbursed_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        10, this->_internal_disbursed_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_insurance_rpc.RedemptionSchedule)
  return target;
}

::size_t RedemptionSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_insurance_rpc.RedemptionSchedule)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // string redeemer = 3 [json_name = "redeemer"];
  if (!this->_internal_redeemer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_redeemer());
  }

  // string redemption_amount = 5 [json_name = "redemptionAmount"];
  if (!this->_internal_redemption_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_redemption_amount());
  }

  // string redemption_denom = 6 [json_name = "redemptionDenom"];
  if (!this->_internal_redemption_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_redemption_denom());
  }

  // string disbursed_amount = 8 [json_name = "disbursedAmount"];
  if (!this->_internal_disbursed_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_disbursed_amount());
  }

  // string disbursed_denom = 9 [json_name = "disbursedDenom"];
  if (!this->_internal_disbursed_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_disbursed_denom());
  }

  // uint64 redemption_id = 1 [json_name = "redemptionId"];
  if (this->_internal_redemption_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_redemption_id());
  }

  // sint64 claimable_redemption_time = 4 [json_name = "claimableRedemptionTime"];
  if (this->_internal_claimable_redemption_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_claimable_redemption_time());
  }

  // sint64 requested_at = 7 [json_name = "requestedAt"];
  if (this->_internal_requested_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_requested_at());
  }

  // sint64 disbursed_at = 10 [json_name = "disbursedAt"];
  if (this->_internal_disbursed_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_disbursed_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedemptionSchedule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedemptionSchedule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedemptionSchedule::GetClassData() const { return &_class_data_; }


void RedemptionSchedule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedemptionSchedule*>(&to_msg);
  auto& from = static_cast<const RedemptionSchedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_insurance_rpc.RedemptionSchedule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_redeemer().empty()) {
    _this->_internal_set_redeemer(from._internal_redeemer());
  }
  if (!from._internal_redemption_amount().empty()) {
    _this->_internal_set_redemption_amount(from._internal_redemption_amount());
  }
  if (!from._internal_redemption_denom().empty()) {
    _this->_internal_set_redemption_denom(from._internal_redemption_denom());
  }
  if (!from._internal_disbursed_amount().empty()) {
    _this->_internal_set_disbursed_amount(from._internal_disbursed_amount());
  }
  if (!from._internal_disbursed_denom().empty()) {
    _this->_internal_set_disbursed_denom(from._internal_disbursed_denom());
  }
  if (from._internal_redemption_id() != 0) {
    _this->_internal_set_redemption_id(from._internal_redemption_id());
  }
  if (from._internal_claimable_redemption_time() != 0) {
    _this->_internal_set_claimable_redemption_time(from._internal_claimable_redemption_time());
  }
  if (from._internal_requested_at() != 0) {
    _this->_internal_set_requested_at(from._internal_requested_at());
  }
  if (from._internal_disbursed_at() != 0) {
    _this->_internal_set_disbursed_at(from._internal_disbursed_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedemptionSchedule::CopyFrom(const RedemptionSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_insurance_rpc.RedemptionSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedemptionSchedule::IsInitialized() const {
  return true;
}

void RedemptionSchedule::InternalSwap(RedemptionSchedule* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redeemer_, lhs_arena,
                                       &other->_impl_.redeemer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redemption_amount_, lhs_arena,
                                       &other->_impl_.redemption_amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.redemption_denom_, lhs_arena,
                                       &other->_impl_.redemption_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.disbursed_amount_, lhs_arena,
                                       &other->_impl_.disbursed_amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.disbursed_denom_, lhs_arena,
                                       &other->_impl_.disbursed_denom_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedemptionSchedule, _impl_.disbursed_at_)
      + sizeof(RedemptionSchedule::_impl_.disbursed_at_)
      - PROTOBUF_FIELD_OFFSET(RedemptionSchedule, _impl_.redemption_id_)>(
          reinterpret_cast<char*>(&_impl_.redemption_id_),
          reinterpret_cast<char*>(&other->_impl_.redemption_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedemptionSchedule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5finsurance_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5finsurance_5frpc_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_insurance_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective_insurance_rpc::FundsRequest*
Arena::CreateMaybeMessage< ::injective_insurance_rpc::FundsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_insurance_rpc::FundsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_insurance_rpc::FundsResponse*
Arena::CreateMaybeMessage< ::injective_insurance_rpc::FundsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_insurance_rpc::FundsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_insurance_rpc::InsuranceFund*
Arena::CreateMaybeMessage< ::injective_insurance_rpc::InsuranceFund >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_insurance_rpc::InsuranceFund >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_insurance_rpc::TokenMeta*
Arena::CreateMaybeMessage< ::injective_insurance_rpc::TokenMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_insurance_rpc::TokenMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_insurance_rpc::RedemptionsRequest*
Arena::CreateMaybeMessage< ::injective_insurance_rpc::RedemptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_insurance_rpc::RedemptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_insurance_rpc::RedemptionsResponse*
Arena::CreateMaybeMessage< ::injective_insurance_rpc::RedemptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_insurance_rpc::RedemptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_insurance_rpc::RedemptionSchedule*
Arena::CreateMaybeMessage< ::injective_insurance_rpc::RedemptionSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_insurance_rpc::RedemptionSchedule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

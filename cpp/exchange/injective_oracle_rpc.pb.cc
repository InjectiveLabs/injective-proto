// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_oracle_rpc.proto

#include "exchange/injective_oracle_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective_oracle_rpc {
template <typename>
PROTOBUF_CONSTEXPR OracleListRequest::OracleListRequest(
    ::_pbi::ConstantInitialized) {}
struct OracleListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OracleListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OracleListRequestDefaultTypeInternal() {}
  union {
    OracleListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OracleListRequestDefaultTypeInternal _OracleListRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OracleListResponse::OracleListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.oracles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OracleListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OracleListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OracleListResponseDefaultTypeInternal() {}
  union {
    OracleListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OracleListResponseDefaultTypeInternal _OracleListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Oracle::Oracle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OracleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OracleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OracleDefaultTypeInternal() {}
  union {
    Oracle _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OracleDefaultTypeInternal _Oracle_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PriceRequest::PriceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceRequestDefaultTypeInternal() {}
  union {
    PriceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceRequestDefaultTypeInternal _PriceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PriceResponse::PriceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PriceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceResponseDefaultTypeInternal() {}
  union {
    PriceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceResponseDefaultTypeInternal _PriceResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamPricesRequest::StreamPricesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamPricesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamPricesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamPricesRequestDefaultTypeInternal() {}
  union {
    StreamPricesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamPricesRequestDefaultTypeInternal _StreamPricesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamPricesResponse::StreamPricesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamPricesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamPricesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamPricesResponseDefaultTypeInternal() {}
  union {
    StreamPricesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamPricesResponseDefaultTypeInternal _StreamPricesResponse_default_instance_;
}  // namespace injective_oracle_rpc
static ::_pb::Metadata file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_exchange_2finjective_5foracle_5frpc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_exchange_2finjective_5foracle_5frpc_2eproto = nullptr;
const ::uint32_t TableStruct_exchange_2finjective_5foracle_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::OracleListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::OracleListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::OracleListResponse, _impl_.oracles_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::Oracle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::Oracle, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::Oracle, _impl_.base_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::Oracle, _impl_.quote_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::Oracle, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::Oracle, _impl_.price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::PriceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::PriceRequest, _impl_.base_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::PriceRequest, _impl_.quote_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::PriceRequest, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::PriceRequest, _impl_.oracle_scale_factor_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::PriceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::PriceResponse, _impl_.price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::StreamPricesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::StreamPricesRequest, _impl_.base_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::StreamPricesRequest, _impl_.quote_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::StreamPricesRequest, _impl_.oracle_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::StreamPricesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::StreamPricesResponse, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective_oracle_rpc::StreamPricesResponse, _impl_.timestamp_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective_oracle_rpc::OracleListRequest)},
        { 8, -1, -1, sizeof(::injective_oracle_rpc::OracleListResponse)},
        { 17, -1, -1, sizeof(::injective_oracle_rpc::Oracle)},
        { 30, -1, -1, sizeof(::injective_oracle_rpc::PriceRequest)},
        { 42, -1, -1, sizeof(::injective_oracle_rpc::PriceResponse)},
        { 51, -1, -1, sizeof(::injective_oracle_rpc::StreamPricesRequest)},
        { 62, -1, -1, sizeof(::injective_oracle_rpc::StreamPricesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective_oracle_rpc::_OracleListRequest_default_instance_._instance,
    &::injective_oracle_rpc::_OracleListResponse_default_instance_._instance,
    &::injective_oracle_rpc::_Oracle_default_instance_._instance,
    &::injective_oracle_rpc::_PriceRequest_default_instance_._instance,
    &::injective_oracle_rpc::_PriceResponse_default_instance_._instance,
    &::injective_oracle_rpc::_StreamPricesRequest_default_instance_._instance,
    &::injective_oracle_rpc::_StreamPricesResponse_default_instance_._instance,
};
const char descriptor_table_protodef_exchange_2finjective_5foracle_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#exchange/injective_oracle_rpc.proto\022\024i"
    "njective_oracle_rpc\"\023\n\021OracleListRequest"
    "\"L\n\022OracleListResponse\0226\n\007oracles\030\001 \003(\0132"
    "\034.injective_oracle_rpc.OracleR\007oracles\"\233"
    "\001\n\006Oracle\022\026\n\006symbol\030\001 \001(\tR\006symbol\022\037\n\013bas"
    "e_symbol\030\002 \001(\tR\nbaseSymbol\022!\n\014quote_symb"
    "ol\030\003 \001(\tR\013quoteSymbol\022\037\n\013oracle_type\030\004 \001"
    "(\tR\noracleType\022\024\n\005price\030\005 \001(\tR\005price\"\243\001\n"
    "\014PriceRequest\022\037\n\013base_symbol\030\001 \001(\tR\nbase"
    "Symbol\022!\n\014quote_symbol\030\002 \001(\tR\013quoteSymbo"
    "l\022\037\n\013oracle_type\030\003 \001(\tR\noracleType\022.\n\023or"
    "acle_scale_factor\030\004 \001(\rR\021oracleScaleFact"
    "or\"%\n\rPriceResponse\022\024\n\005price\030\001 \001(\tR\005pric"
    "e\"z\n\023StreamPricesRequest\022\037\n\013base_symbol\030"
    "\001 \001(\tR\nbaseSymbol\022!\n\014quote_symbol\030\002 \001(\tR"
    "\013quoteSymbol\022\037\n\013oracle_type\030\003 \001(\tR\noracl"
    "eType\"J\n\024StreamPricesResponse\022\024\n\005price\030\001"
    " \001(\tR\005price\022\034\n\ttimestamp\030\002 \001(\022R\ttimestam"
    "p2\260\002\n\022InjectiveOracleRPC\022_\n\nOracleList\022\'"
    ".injective_oracle_rpc.OracleListRequest\032"
    "(.injective_oracle_rpc.OracleListRespons"
    "e\022P\n\005Price\022\".injective_oracle_rpc.PriceR"
    "equest\032#.injective_oracle_rpc.PriceRespo"
    "nse\022g\n\014StreamPrices\022).injective_oracle_r"
    "pc.StreamPricesRequest\032*.injective_oracl"
    "e_rpc.StreamPricesResponse0\001B\264\001\n\030com.inj"
    "ective_oracle_rpcB\027InjectiveOracleRpcPro"
    "toP\001Z\027/injective_oracle_rpcpb\242\002\003IXX\252\002\022In"
    "jectiveOracleRpc\312\002\022InjectiveOracleRpc\342\002\036"
    "InjectiveOracleRpc\\GPBMetadata\352\002\022Injecti"
    "veOracleRpcb\006proto3"
};
static ::absl::once_flag descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto = {
    false,
    false,
    1219,
    descriptor_table_protodef_exchange_2finjective_5foracle_5frpc_2eproto,
    "exchange/injective_oracle_rpc.proto",
    &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_exchange_2finjective_5foracle_5frpc_2eproto::offsets,
    file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto,
    file_level_enum_descriptors_exchange_2finjective_5foracle_5frpc_2eproto,
    file_level_service_descriptors_exchange_2finjective_5foracle_5frpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_getter() {
  return &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_2finjective_5foracle_5frpc_2eproto(&descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto);
namespace injective_oracle_rpc {
// ===================================================================

class OracleListRequest::_Internal {
 public:
};

OracleListRequest::OracleListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective_oracle_rpc.OracleListRequest)
}
OracleListRequest::OracleListRequest(const OracleListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  OracleListRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_oracle_rpc.OracleListRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OracleListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OracleListRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OracleListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto[0]);
}
// ===================================================================

class OracleListResponse::_Internal {
 public:
};

OracleListResponse::OracleListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_oracle_rpc.OracleListResponse)
}
OracleListResponse::OracleListResponse(const OracleListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OracleListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.oracles_){from._impl_.oracles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_oracle_rpc.OracleListResponse)
}

inline void OracleListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.oracles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OracleListResponse::~OracleListResponse() {
  // @@protoc_insertion_point(destructor:injective_oracle_rpc.OracleListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OracleListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_oracles()->~RepeatedPtrField();
}

void OracleListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OracleListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_oracle_rpc.OracleListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_oracles()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OracleListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_oracle_rpc.Oracle oracles = 1 [json_name = "oracles"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_oracles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OracleListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_oracle_rpc.OracleListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_oracle_rpc.Oracle oracles = 1 [json_name = "oracles"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_oracles_size()); i < n; i++) {
    const auto& repfield = this->_internal_oracles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_oracle_rpc.OracleListResponse)
  return target;
}

::size_t OracleListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_oracle_rpc.OracleListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_oracle_rpc.Oracle oracles = 1 [json_name = "oracles"];
  total_size += 1UL * this->_internal_oracles_size();
  for (const auto& msg : this->_internal_oracles()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OracleListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OracleListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OracleListResponse::GetClassData() const { return &_class_data_; }


void OracleListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OracleListResponse*>(&to_msg);
  auto& from = static_cast<const OracleListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_oracle_rpc.OracleListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_oracles()->MergeFrom(from._internal_oracles());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OracleListResponse::CopyFrom(const OracleListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_oracle_rpc.OracleListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OracleListResponse::IsInitialized() const {
  return true;
}

void OracleListResponse::InternalSwap(OracleListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_oracles()->InternalSwap(other->_internal_mutable_oracles());
}

::PROTOBUF_NAMESPACE_ID::Metadata OracleListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto[1]);
}
// ===================================================================

class Oracle::_Internal {
 public:
};

Oracle::Oracle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_oracle_rpc.Oracle)
}
Oracle::Oracle(const Oracle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Oracle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.base_symbol_) {}

    , decltype(_impl_.quote_symbol_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.price_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.base_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_symbol().empty()) {
    _this->_impl_.base_symbol_.Set(from._internal_base_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.quote_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_symbol().empty()) {
    _this->_impl_.quote_symbol_.Set(from._internal_quote_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_type().empty()) {
    _this->_impl_.oracle_type_.Set(from._internal_oracle_type(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_oracle_rpc.Oracle)
}

inline void Oracle::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.base_symbol_) {}

    , decltype(_impl_.quote_symbol_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.price_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Oracle::~Oracle() {
  // @@protoc_insertion_point(destructor:injective_oracle_rpc.Oracle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Oracle::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.Destroy();
  _impl_.base_symbol_.Destroy();
  _impl_.quote_symbol_.Destroy();
  _impl_.oracle_type_.Destroy();
  _impl_.price_.Destroy();
}

void Oracle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Oracle::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_oracle_rpc.Oracle)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.base_symbol_.ClearToEmpty();
  _impl_.quote_symbol_.ClearToEmpty();
  _impl_.oracle_type_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Oracle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string symbol = 1 [json_name = "symbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.Oracle.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base_symbol = 2 [json_name = "baseSymbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.Oracle.base_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_symbol = 3 [json_name = "quoteSymbol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_quote_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.Oracle.quote_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_type = 4 [json_name = "oracleType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oracle_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.Oracle.oracle_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 5 [json_name = "price"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.Oracle.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Oracle::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_oracle_rpc.Oracle)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string symbol = 1 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.Oracle.symbol");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string base_symbol = 2 [json_name = "baseSymbol"];
  if (!this->_internal_base_symbol().empty()) {
    const std::string& _s = this->_internal_base_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.Oracle.base_symbol");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string quote_symbol = 3 [json_name = "quoteSymbol"];
  if (!this->_internal_quote_symbol().empty()) {
    const std::string& _s = this->_internal_quote_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.Oracle.quote_symbol");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string oracle_type = 4 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    const std::string& _s = this->_internal_oracle_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.Oracle.oracle_type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string price = 5 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.Oracle.price");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_oracle_rpc.Oracle)
  return target;
}

::size_t Oracle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_oracle_rpc.Oracle)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 1 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string base_symbol = 2 [json_name = "baseSymbol"];
  if (!this->_internal_base_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_symbol());
  }

  // string quote_symbol = 3 [json_name = "quoteSymbol"];
  if (!this->_internal_quote_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_symbol());
  }

  // string oracle_type = 4 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_type());
  }

  // string price = 5 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Oracle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Oracle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Oracle::GetClassData() const { return &_class_data_; }


void Oracle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Oracle*>(&to_msg);
  auto& from = static_cast<const Oracle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_oracle_rpc.Oracle)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_base_symbol().empty()) {
    _this->_internal_set_base_symbol(from._internal_base_symbol());
  }
  if (!from._internal_quote_symbol().empty()) {
    _this->_internal_set_quote_symbol(from._internal_quote_symbol());
  }
  if (!from._internal_oracle_type().empty()) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Oracle::CopyFrom(const Oracle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_oracle_rpc.Oracle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Oracle::IsInitialized() const {
  return true;
}

void Oracle::InternalSwap(Oracle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_symbol_, lhs_arena,
                                       &other->_impl_.base_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_symbol_, lhs_arena,
                                       &other->_impl_.quote_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_type_, lhs_arena,
                                       &other->_impl_.oracle_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Oracle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto[2]);
}
// ===================================================================

class PriceRequest::_Internal {
 public:
};

PriceRequest::PriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_oracle_rpc.PriceRequest)
}
PriceRequest::PriceRequest(const PriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PriceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_symbol_) {}

    , decltype(_impl_.quote_symbol_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.oracle_scale_factor_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.base_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_symbol().empty()) {
    _this->_impl_.base_symbol_.Set(from._internal_base_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.quote_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_symbol().empty()) {
    _this->_impl_.quote_symbol_.Set(from._internal_quote_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_type().empty()) {
    _this->_impl_.oracle_type_.Set(from._internal_oracle_type(), _this->GetArenaForAllocation());
  }
  _this->_impl_.oracle_scale_factor_ = from._impl_.oracle_scale_factor_;
  // @@protoc_insertion_point(copy_constructor:injective_oracle_rpc.PriceRequest)
}

inline void PriceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.base_symbol_) {}

    , decltype(_impl_.quote_symbol_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.base_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PriceRequest::~PriceRequest() {
  // @@protoc_insertion_point(destructor:injective_oracle_rpc.PriceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PriceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.base_symbol_.Destroy();
  _impl_.quote_symbol_.Destroy();
  _impl_.oracle_type_.Destroy();
}

void PriceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_oracle_rpc.PriceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_symbol_.ClearToEmpty();
  _impl_.quote_symbol_.ClearToEmpty();
  _impl_.oracle_type_.ClearToEmpty();
  _impl_.oracle_scale_factor_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string base_symbol = 1 [json_name = "baseSymbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_base_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.PriceRequest.base_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_symbol = 2 [json_name = "quoteSymbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quote_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.PriceRequest.quote_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_type = 3 [json_name = "oracleType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oracle_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.PriceRequest.oracle_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 4 [json_name = "oracleScaleFactor"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PriceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_oracle_rpc.PriceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string base_symbol = 1 [json_name = "baseSymbol"];
  if (!this->_internal_base_symbol().empty()) {
    const std::string& _s = this->_internal_base_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.PriceRequest.base_symbol");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quote_symbol = 2 [json_name = "quoteSymbol"];
  if (!this->_internal_quote_symbol().empty()) {
    const std::string& _s = this->_internal_quote_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.PriceRequest.quote_symbol");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string oracle_type = 3 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    const std::string& _s = this->_internal_oracle_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.PriceRequest.oracle_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint32 oracle_scale_factor = 4 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_oracle_scale_factor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_oracle_rpc.PriceRequest)
  return target;
}

::size_t PriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_oracle_rpc.PriceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_symbol = 1 [json_name = "baseSymbol"];
  if (!this->_internal_base_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_symbol());
  }

  // string quote_symbol = 2 [json_name = "quoteSymbol"];
  if (!this->_internal_quote_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_symbol());
  }

  // string oracle_type = 3 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_type());
  }

  // uint32 oracle_scale_factor = 4 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceRequest::GetClassData() const { return &_class_data_; }


void PriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PriceRequest*>(&to_msg);
  auto& from = static_cast<const PriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_oracle_rpc.PriceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_base_symbol().empty()) {
    _this->_internal_set_base_symbol(from._internal_base_symbol());
  }
  if (!from._internal_quote_symbol().empty()) {
    _this->_internal_set_quote_symbol(from._internal_quote_symbol());
  }
  if (!from._internal_oracle_type().empty()) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceRequest::CopyFrom(const PriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_oracle_rpc.PriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceRequest::IsInitialized() const {
  return true;
}

void PriceRequest::InternalSwap(PriceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_symbol_, lhs_arena,
                                       &other->_impl_.base_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_symbol_, lhs_arena,
                                       &other->_impl_.quote_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_type_, lhs_arena,
                                       &other->_impl_.oracle_type_, rhs_arena);

  swap(_impl_.oracle_scale_factor_, other->_impl_.oracle_scale_factor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto[3]);
}
// ===================================================================

class PriceResponse::_Internal {
 public:
};

PriceResponse::PriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_oracle_rpc.PriceResponse)
}
PriceResponse::PriceResponse(const PriceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PriceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_oracle_rpc.PriceResponse)
}

inline void PriceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PriceResponse::~PriceResponse() {
  // @@protoc_insertion_point(destructor:injective_oracle_rpc.PriceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PriceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_.Destroy();
}

void PriceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PriceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_oracle_rpc.PriceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1 [json_name = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.PriceResponse.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PriceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_oracle_rpc.PriceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.PriceResponse.price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_oracle_rpc.PriceResponse)
  return target;
}

::size_t PriceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_oracle_rpc.PriceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PriceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceResponse::GetClassData() const { return &_class_data_; }


void PriceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PriceResponse*>(&to_msg);
  auto& from = static_cast<const PriceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_oracle_rpc.PriceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceResponse::CopyFrom(const PriceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_oracle_rpc.PriceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceResponse::IsInitialized() const {
  return true;
}

void PriceResponse::InternalSwap(PriceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto[4]);
}
// ===================================================================

class StreamPricesRequest::_Internal {
 public:
};

StreamPricesRequest::StreamPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_oracle_rpc.StreamPricesRequest)
}
StreamPricesRequest::StreamPricesRequest(const StreamPricesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamPricesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.base_symbol_) {}

    , decltype(_impl_.quote_symbol_) {}

    , decltype(_impl_.oracle_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.base_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_symbol().empty()) {
    _this->_impl_.base_symbol_.Set(from._internal_base_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.quote_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_symbol().empty()) {
    _this->_impl_.quote_symbol_.Set(from._internal_quote_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_type().empty()) {
    _this->_impl_.oracle_type_.Set(from._internal_oracle_type(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_oracle_rpc.StreamPricesRequest)
}

inline void StreamPricesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.base_symbol_) {}

    , decltype(_impl_.quote_symbol_) {}

    , decltype(_impl_.oracle_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.base_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamPricesRequest::~StreamPricesRequest() {
  // @@protoc_insertion_point(destructor:injective_oracle_rpc.StreamPricesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamPricesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.base_symbol_.Destroy();
  _impl_.quote_symbol_.Destroy();
  _impl_.oracle_type_.Destroy();
}

void StreamPricesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamPricesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_oracle_rpc.StreamPricesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_symbol_.ClearToEmpty();
  _impl_.quote_symbol_.ClearToEmpty();
  _impl_.oracle_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPricesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string base_symbol = 1 [json_name = "baseSymbol"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_base_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.StreamPricesRequest.base_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_symbol = 2 [json_name = "quoteSymbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quote_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.StreamPricesRequest.quote_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_type = 3 [json_name = "oracleType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_oracle_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.StreamPricesRequest.oracle_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamPricesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_oracle_rpc.StreamPricesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string base_symbol = 1 [json_name = "baseSymbol"];
  if (!this->_internal_base_symbol().empty()) {
    const std::string& _s = this->_internal_base_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.StreamPricesRequest.base_symbol");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quote_symbol = 2 [json_name = "quoteSymbol"];
  if (!this->_internal_quote_symbol().empty()) {
    const std::string& _s = this->_internal_quote_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.StreamPricesRequest.quote_symbol");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string oracle_type = 3 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    const std::string& _s = this->_internal_oracle_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.StreamPricesRequest.oracle_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_oracle_rpc.StreamPricesRequest)
  return target;
}

::size_t StreamPricesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_oracle_rpc.StreamPricesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_symbol = 1 [json_name = "baseSymbol"];
  if (!this->_internal_base_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_symbol());
  }

  // string quote_symbol = 2 [json_name = "quoteSymbol"];
  if (!this->_internal_quote_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_symbol());
  }

  // string oracle_type = 3 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamPricesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamPricesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamPricesRequest::GetClassData() const { return &_class_data_; }


void StreamPricesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamPricesRequest*>(&to_msg);
  auto& from = static_cast<const StreamPricesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_oracle_rpc.StreamPricesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_base_symbol().empty()) {
    _this->_internal_set_base_symbol(from._internal_base_symbol());
  }
  if (!from._internal_quote_symbol().empty()) {
    _this->_internal_set_quote_symbol(from._internal_quote_symbol());
  }
  if (!from._internal_oracle_type().empty()) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamPricesRequest::CopyFrom(const StreamPricesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_oracle_rpc.StreamPricesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPricesRequest::IsInitialized() const {
  return true;
}

void StreamPricesRequest::InternalSwap(StreamPricesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_symbol_, lhs_arena,
                                       &other->_impl_.base_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_symbol_, lhs_arena,
                                       &other->_impl_.quote_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_type_, lhs_arena,
                                       &other->_impl_.oracle_type_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPricesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto[5]);
}
// ===================================================================

class StreamPricesResponse::_Internal {
 public:
};

StreamPricesResponse::StreamPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_oracle_rpc.StreamPricesResponse)
}
StreamPricesResponse::StreamPricesResponse(const StreamPricesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamPricesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_oracle_rpc.StreamPricesResponse)
}

inline void StreamPricesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamPricesResponse::~StreamPricesResponse() {
  // @@protoc_insertion_point(destructor:injective_oracle_rpc.StreamPricesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamPricesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_.Destroy();
}

void StreamPricesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamPricesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_oracle_rpc.StreamPricesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_.ClearToEmpty();
  _impl_.timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPricesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1 [json_name = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_oracle_rpc.StreamPricesResponse.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamPricesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_oracle_rpc.StreamPricesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_oracle_rpc.StreamPricesResponse.price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // sint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_oracle_rpc.StreamPricesResponse)
  return target;
}

::size_t StreamPricesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_oracle_rpc.StreamPricesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // sint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamPricesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamPricesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamPricesResponse::GetClassData() const { return &_class_data_; }


void StreamPricesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamPricesResponse*>(&to_msg);
  auto& from = static_cast<const StreamPricesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_oracle_rpc.StreamPricesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamPricesResponse::CopyFrom(const StreamPricesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_oracle_rpc.StreamPricesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPricesResponse::IsInitialized() const {
  return true;
}

void StreamPricesResponse::InternalSwap(StreamPricesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPricesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5foracle_5frpc_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_oracle_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective_oracle_rpc::OracleListRequest*
Arena::CreateMaybeMessage< ::injective_oracle_rpc::OracleListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_oracle_rpc::OracleListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_oracle_rpc::OracleListResponse*
Arena::CreateMaybeMessage< ::injective_oracle_rpc::OracleListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_oracle_rpc::OracleListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_oracle_rpc::Oracle*
Arena::CreateMaybeMessage< ::injective_oracle_rpc::Oracle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_oracle_rpc::Oracle >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_oracle_rpc::PriceRequest*
Arena::CreateMaybeMessage< ::injective_oracle_rpc::PriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_oracle_rpc::PriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_oracle_rpc::PriceResponse*
Arena::CreateMaybeMessage< ::injective_oracle_rpc::PriceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_oracle_rpc::PriceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_oracle_rpc::StreamPricesRequest*
Arena::CreateMaybeMessage< ::injective_oracle_rpc::StreamPricesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_oracle_rpc::StreamPricesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_oracle_rpc::StreamPricesResponse*
Arena::CreateMaybeMessage< ::injective_oracle_rpc::StreamPricesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_oracle_rpc::StreamPricesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

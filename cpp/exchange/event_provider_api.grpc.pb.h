// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/event_provider_api.proto
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// EventProviderAPI protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#ifndef GRPC_exchange_2fevent_5fprovider_5fapi_2eproto__INCLUDED
#define GRPC_exchange_2fevent_5fprovider_5fapi_2eproto__INCLUDED

#include "exchange/event_provider_api.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace event_provider_api {

// EventProviderAPI provides processed block events for different backends.
class EventProviderAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "event_provider_api.EventProviderAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Get latest block from event provider
    virtual ::grpc::Status GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::event_provider_api::GetLatestHeightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetLatestHeightResponse>> AsyncGetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetLatestHeightResponse>>(AsyncGetLatestHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetLatestHeightResponse>> PrepareAsyncGetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetLatestHeightResponse>>(PrepareAsyncGetLatestHeightRaw(context, request, cq));
    }
    // Get processed block events for selected backend
    virtual ::grpc::Status GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::event_provider_api::GetBlockEventsRPCResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetBlockEventsRPCResponse>> AsyncGetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetBlockEventsRPCResponse>>(AsyncGetBlockEventsRPCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetBlockEventsRPCResponse>> PrepareAsyncGetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetBlockEventsRPCResponse>>(PrepareAsyncGetBlockEventsRPCRaw(context, request, cq));
    }
    // Get custom processed block events for selected backend
    virtual ::grpc::Status GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::event_provider_api::GetCustomEventsRPCResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetCustomEventsRPCResponse>> AsyncGetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetCustomEventsRPCResponse>>(AsyncGetCustomEventsRPCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetCustomEventsRPCResponse>> PrepareAsyncGetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetCustomEventsRPCResponse>>(PrepareAsyncGetCustomEventsRPCRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Get latest block from event provider
      virtual void GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get processed block events for selected backend
      virtual void GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get custom processed block events for selected backend
      virtual void GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetLatestHeightResponse>* AsyncGetLatestHeightRaw(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetLatestHeightResponse>* PrepareAsyncGetLatestHeightRaw(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetBlockEventsRPCResponse>* AsyncGetBlockEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetBlockEventsRPCResponse>* PrepareAsyncGetBlockEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetCustomEventsRPCResponse>* AsyncGetCustomEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::event_provider_api::GetCustomEventsRPCResponse>* PrepareAsyncGetCustomEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::event_provider_api::GetLatestHeightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetLatestHeightResponse>> AsyncGetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetLatestHeightResponse>>(AsyncGetLatestHeightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetLatestHeightResponse>> PrepareAsyncGetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetLatestHeightResponse>>(PrepareAsyncGetLatestHeightRaw(context, request, cq));
    }
    ::grpc::Status GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::event_provider_api::GetBlockEventsRPCResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetBlockEventsRPCResponse>> AsyncGetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetBlockEventsRPCResponse>>(AsyncGetBlockEventsRPCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetBlockEventsRPCResponse>> PrepareAsyncGetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetBlockEventsRPCResponse>>(PrepareAsyncGetBlockEventsRPCRaw(context, request, cq));
    }
    ::grpc::Status GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::event_provider_api::GetCustomEventsRPCResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetCustomEventsRPCResponse>> AsyncGetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetCustomEventsRPCResponse>>(AsyncGetCustomEventsRPCRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetCustomEventsRPCResponse>> PrepareAsyncGetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetCustomEventsRPCResponse>>(PrepareAsyncGetCustomEventsRPCRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetLatestHeightResponse>* AsyncGetLatestHeightRaw(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetLatestHeightResponse>* PrepareAsyncGetLatestHeightRaw(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetBlockEventsRPCResponse>* AsyncGetBlockEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetBlockEventsRPCResponse>* PrepareAsyncGetBlockEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetCustomEventsRPCResponse>* AsyncGetCustomEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::event_provider_api::GetCustomEventsRPCResponse>* PrepareAsyncGetCustomEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetLatestHeight_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockEventsRPC_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCustomEventsRPC_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Get latest block from event provider
    virtual ::grpc::Status GetLatestHeight(::grpc::ServerContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response);
    // Get processed block events for selected backend
    virtual ::grpc::Status GetBlockEventsRPC(::grpc::ServerContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response);
    // Get custom processed block events for selected backend
    virtual ::grpc::Status GetCustomEventsRPC(::grpc::ServerContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLatestHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLatestHeight() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetLatestHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLatestHeight(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetLatestHeightRequest* /*request*/, ::event_provider_api::GetLatestHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLatestHeight(::grpc::ServerContext* context, ::event_provider_api::GetLatestHeightRequest* request, ::grpc::ServerAsyncResponseWriter< ::event_provider_api::GetLatestHeightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockEventsRPC() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBlockEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetBlockEventsRPCRequest* /*request*/, ::event_provider_api::GetBlockEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockEventsRPC(::grpc::ServerContext* context, ::event_provider_api::GetBlockEventsRPCRequest* request, ::grpc::ServerAsyncResponseWriter< ::event_provider_api::GetBlockEventsRPCResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCustomEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCustomEventsRPC() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCustomEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCustomEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetCustomEventsRPCRequest* /*request*/, ::event_provider_api::GetCustomEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCustomEventsRPC(::grpc::ServerContext* context, ::event_provider_api::GetCustomEventsRPCRequest* request, ::grpc::ServerAsyncResponseWriter< ::event_provider_api::GetCustomEventsRPCResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetLatestHeight<WithAsyncMethod_GetBlockEventsRPC<WithAsyncMethod_GetCustomEventsRPC<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetLatestHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLatestHeight() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::event_provider_api::GetLatestHeightRequest, ::event_provider_api::GetLatestHeightResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response) { return this->GetLatestHeight(context, request, response); }));}
    void SetMessageAllocatorFor_GetLatestHeight(
        ::grpc::MessageAllocator< ::event_provider_api::GetLatestHeightRequest, ::event_provider_api::GetLatestHeightResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::event_provider_api::GetLatestHeightRequest, ::event_provider_api::GetLatestHeightResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLatestHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLatestHeight(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetLatestHeightRequest* /*request*/, ::event_provider_api::GetLatestHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLatestHeight(
      ::grpc::CallbackServerContext* /*context*/, const ::event_provider_api::GetLatestHeightRequest* /*request*/, ::event_provider_api::GetLatestHeightResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockEventsRPC() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::event_provider_api::GetBlockEventsRPCRequest, ::event_provider_api::GetBlockEventsRPCResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response) { return this->GetBlockEventsRPC(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockEventsRPC(
        ::grpc::MessageAllocator< ::event_provider_api::GetBlockEventsRPCRequest, ::event_provider_api::GetBlockEventsRPCResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::event_provider_api::GetBlockEventsRPCRequest, ::event_provider_api::GetBlockEventsRPCResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetBlockEventsRPCRequest* /*request*/, ::event_provider_api::GetBlockEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockEventsRPC(
      ::grpc::CallbackServerContext* /*context*/, const ::event_provider_api::GetBlockEventsRPCRequest* /*request*/, ::event_provider_api::GetBlockEventsRPCResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCustomEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCustomEventsRPC() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::event_provider_api::GetCustomEventsRPCRequest, ::event_provider_api::GetCustomEventsRPCResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response) { return this->GetCustomEventsRPC(context, request, response); }));}
    void SetMessageAllocatorFor_GetCustomEventsRPC(
        ::grpc::MessageAllocator< ::event_provider_api::GetCustomEventsRPCRequest, ::event_provider_api::GetCustomEventsRPCResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::event_provider_api::GetCustomEventsRPCRequest, ::event_provider_api::GetCustomEventsRPCResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCustomEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCustomEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetCustomEventsRPCRequest* /*request*/, ::event_provider_api::GetCustomEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCustomEventsRPC(
      ::grpc::CallbackServerContext* /*context*/, const ::event_provider_api::GetCustomEventsRPCRequest* /*request*/, ::event_provider_api::GetCustomEventsRPCResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetLatestHeight<WithCallbackMethod_GetBlockEventsRPC<WithCallbackMethod_GetCustomEventsRPC<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetLatestHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLatestHeight() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetLatestHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLatestHeight(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetLatestHeightRequest* /*request*/, ::event_provider_api::GetLatestHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockEventsRPC() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBlockEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetBlockEventsRPCRequest* /*request*/, ::event_provider_api::GetBlockEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCustomEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCustomEventsRPC() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCustomEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCustomEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetCustomEventsRPCRequest* /*request*/, ::event_provider_api::GetCustomEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLatestHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLatestHeight() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetLatestHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLatestHeight(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetLatestHeightRequest* /*request*/, ::event_provider_api::GetLatestHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLatestHeight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockEventsRPC() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetBlockEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetBlockEventsRPCRequest* /*request*/, ::event_provider_api::GetBlockEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockEventsRPC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCustomEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCustomEventsRPC() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCustomEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCustomEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetCustomEventsRPCRequest* /*request*/, ::event_provider_api::GetCustomEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCustomEventsRPC(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLatestHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLatestHeight() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLatestHeight(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLatestHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLatestHeight(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetLatestHeightRequest* /*request*/, ::event_provider_api::GetLatestHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLatestHeight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockEventsRPC() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockEventsRPC(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetBlockEventsRPCRequest* /*request*/, ::event_provider_api::GetBlockEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockEventsRPC(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCustomEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCustomEventsRPC() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCustomEventsRPC(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCustomEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCustomEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetCustomEventsRPCRequest* /*request*/, ::event_provider_api::GetCustomEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCustomEventsRPC(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLatestHeight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLatestHeight() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_provider_api::GetLatestHeightRequest, ::event_provider_api::GetLatestHeightResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::event_provider_api::GetLatestHeightRequest, ::event_provider_api::GetLatestHeightResponse>* streamer) {
                       return this->StreamedGetLatestHeight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLatestHeight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLatestHeight(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetLatestHeightRequest* /*request*/, ::event_provider_api::GetLatestHeightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLatestHeight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_provider_api::GetLatestHeightRequest,::event_provider_api::GetLatestHeightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockEventsRPC() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_provider_api::GetBlockEventsRPCRequest, ::event_provider_api::GetBlockEventsRPCResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::event_provider_api::GetBlockEventsRPCRequest, ::event_provider_api::GetBlockEventsRPCResponse>* streamer) {
                       return this->StreamedGetBlockEventsRPC(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetBlockEventsRPCRequest* /*request*/, ::event_provider_api::GetBlockEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockEventsRPC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_provider_api::GetBlockEventsRPCRequest,::event_provider_api::GetBlockEventsRPCResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCustomEventsRPC : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCustomEventsRPC() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::event_provider_api::GetCustomEventsRPCRequest, ::event_provider_api::GetCustomEventsRPCResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::event_provider_api::GetCustomEventsRPCRequest, ::event_provider_api::GetCustomEventsRPCResponse>* streamer) {
                       return this->StreamedGetCustomEventsRPC(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCustomEventsRPC() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCustomEventsRPC(::grpc::ServerContext* /*context*/, const ::event_provider_api::GetCustomEventsRPCRequest* /*request*/, ::event_provider_api::GetCustomEventsRPCResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCustomEventsRPC(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::event_provider_api::GetCustomEventsRPCRequest,::event_provider_api::GetCustomEventsRPCResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetLatestHeight<WithStreamedUnaryMethod_GetBlockEventsRPC<WithStreamedUnaryMethod_GetCustomEventsRPC<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetLatestHeight<WithStreamedUnaryMethod_GetBlockEventsRPC<WithStreamedUnaryMethod_GetCustomEventsRPC<Service > > > StreamedService;
};

}  // namespace event_provider_api


#endif  // GRPC_exchange_2fevent_5fprovider_5fapi_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_auction_rpc.proto
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveAuctionRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#ifndef GRPC_exchange_2finjective_5fauction_5frpc_2eproto__INCLUDED
#define GRPC_exchange_2finjective_5fauction_5frpc_2eproto__INCLUDED

#include "exchange/injective_auction_rpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective_auction_rpc {

// InjectiveAuctionRPC defines gRPC API of the Auction API.
class InjectiveAuctionRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "injective_auction_rpc.InjectiveAuctionRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Provide historical auction info for a given auction
    virtual ::grpc::Status AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::injective_auction_rpc::AuctionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionResponse>> AsyncAuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionResponse>>(AsyncAuctionEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionResponse>> PrepareAsyncAuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionResponse>>(PrepareAsyncAuctionEndpointRaw(context, request, cq));
    }
    // Provide the historical auctions info
    virtual ::grpc::Status Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::injective_auction_rpc::AuctionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionsResponse>> AsyncAuctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionsResponse>>(AsyncAuctionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionsResponse>> PrepareAsyncAuctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionsResponse>>(PrepareAsyncAuctionsRaw(context, request, cq));
    }
    // StreamBids streams new bids of an auction.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_auction_rpc::StreamBidsResponse>> StreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_auction_rpc::StreamBidsResponse>>(StreamBidsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_auction_rpc::StreamBidsResponse>> AsyncStreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_auction_rpc::StreamBidsResponse>>(AsyncStreamBidsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_auction_rpc::StreamBidsResponse>> PrepareAsyncStreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_auction_rpc::StreamBidsResponse>>(PrepareAsyncStreamBidsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Provide historical auction info for a given auction
      virtual void AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Provide the historical auctions info
      virtual void Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // StreamBids streams new bids of an auction.
      virtual void StreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest* request, ::grpc::ClientReadReactor< ::injective_auction_rpc::StreamBidsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionResponse>* AsyncAuctionEndpointRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionResponse>* PrepareAsyncAuctionEndpointRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionsResponse>* AsyncAuctionsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_auction_rpc::AuctionsResponse>* PrepareAsyncAuctionsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::injective_auction_rpc::StreamBidsResponse>* StreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_auction_rpc::StreamBidsResponse>* AsyncStreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_auction_rpc::StreamBidsResponse>* PrepareAsyncStreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::injective_auction_rpc::AuctionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionResponse>> AsyncAuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionResponse>>(AsyncAuctionEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionResponse>> PrepareAsyncAuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionResponse>>(PrepareAsyncAuctionEndpointRaw(context, request, cq));
    }
    ::grpc::Status Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::injective_auction_rpc::AuctionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionsResponse>> AsyncAuctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionsResponse>>(AsyncAuctionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionsResponse>> PrepareAsyncAuctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionsResponse>>(PrepareAsyncAuctionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::injective_auction_rpc::StreamBidsResponse>> StreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::injective_auction_rpc::StreamBidsResponse>>(StreamBidsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_auction_rpc::StreamBidsResponse>> AsyncStreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_auction_rpc::StreamBidsResponse>>(AsyncStreamBidsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_auction_rpc::StreamBidsResponse>> PrepareAsyncStreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_auction_rpc::StreamBidsResponse>>(PrepareAsyncStreamBidsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response, std::function<void(::grpc::Status)>) override;
      void AuctionEndpoint(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response, std::function<void(::grpc::Status)>) override;
      void Auctions(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamBids(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest* request, ::grpc::ClientReadReactor< ::injective_auction_rpc::StreamBidsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionResponse>* AsyncAuctionEndpointRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionResponse>* PrepareAsyncAuctionEndpointRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionsResponse>* AsyncAuctionsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_auction_rpc::AuctionsResponse>* PrepareAsyncAuctionsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::AuctionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::injective_auction_rpc::StreamBidsResponse>* StreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request) override;
    ::grpc::ClientAsyncReader< ::injective_auction_rpc::StreamBidsResponse>* AsyncStreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::injective_auction_rpc::StreamBidsResponse>* PrepareAsyncStreamBidsRaw(::grpc::ClientContext* context, const ::injective_auction_rpc::StreamBidsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AuctionEndpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_Auctions_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamBids_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Provide historical auction info for a given auction
    virtual ::grpc::Status AuctionEndpoint(::grpc::ServerContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response);
    // Provide the historical auctions info
    virtual ::grpc::Status Auctions(::grpc::ServerContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response);
    // StreamBids streams new bids of an auction.
    virtual ::grpc::Status StreamBids(::grpc::ServerContext* context, const ::injective_auction_rpc::StreamBidsRequest* request, ::grpc::ServerWriter< ::injective_auction_rpc::StreamBidsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_AuctionEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuctionEndpoint() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AuctionEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionEndpoint(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionRequest* /*request*/, ::injective_auction_rpc::AuctionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuctionEndpoint(::grpc::ServerContext* context, ::injective_auction_rpc::AuctionRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_auction_rpc::AuctionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Auctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Auctions() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Auctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auctions(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionsRequest* /*request*/, ::injective_auction_rpc::AuctionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuctions(::grpc::ServerContext* context, ::injective_auction_rpc::AuctionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_auction_rpc::AuctionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamBids : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamBids() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamBids() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBids(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::StreamBidsRequest* /*request*/, ::grpc::ServerWriter< ::injective_auction_rpc::StreamBidsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamBids(::grpc::ServerContext* context, ::injective_auction_rpc::StreamBidsRequest* request, ::grpc::ServerAsyncWriter< ::injective_auction_rpc::StreamBidsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AuctionEndpoint<WithAsyncMethod_Auctions<WithAsyncMethod_StreamBids<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AuctionEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AuctionEndpoint() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_auction_rpc::AuctionRequest, ::injective_auction_rpc::AuctionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_auction_rpc::AuctionRequest* request, ::injective_auction_rpc::AuctionResponse* response) { return this->AuctionEndpoint(context, request, response); }));}
    void SetMessageAllocatorFor_AuctionEndpoint(
        ::grpc::MessageAllocator< ::injective_auction_rpc::AuctionRequest, ::injective_auction_rpc::AuctionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_auction_rpc::AuctionRequest, ::injective_auction_rpc::AuctionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AuctionEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionEndpoint(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionRequest* /*request*/, ::injective_auction_rpc::AuctionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuctionEndpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_auction_rpc::AuctionRequest* /*request*/, ::injective_auction_rpc::AuctionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Auctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Auctions() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_auction_rpc::AuctionsRequest, ::injective_auction_rpc::AuctionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_auction_rpc::AuctionsRequest* request, ::injective_auction_rpc::AuctionsResponse* response) { return this->Auctions(context, request, response); }));}
    void SetMessageAllocatorFor_Auctions(
        ::grpc::MessageAllocator< ::injective_auction_rpc::AuctionsRequest, ::injective_auction_rpc::AuctionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_auction_rpc::AuctionsRequest, ::injective_auction_rpc::AuctionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Auctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auctions(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionsRequest* /*request*/, ::injective_auction_rpc::AuctionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Auctions(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_auction_rpc::AuctionsRequest* /*request*/, ::injective_auction_rpc::AuctionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamBids : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamBids() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::injective_auction_rpc::StreamBidsRequest, ::injective_auction_rpc::StreamBidsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_auction_rpc::StreamBidsRequest* request) { return this->StreamBids(context, request); }));
    }
    ~WithCallbackMethod_StreamBids() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBids(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::StreamBidsRequest* /*request*/, ::grpc::ServerWriter< ::injective_auction_rpc::StreamBidsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::injective_auction_rpc::StreamBidsResponse>* StreamBids(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_auction_rpc::StreamBidsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AuctionEndpoint<WithCallbackMethod_Auctions<WithCallbackMethod_StreamBids<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AuctionEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuctionEndpoint() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AuctionEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionEndpoint(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionRequest* /*request*/, ::injective_auction_rpc::AuctionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Auctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Auctions() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Auctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auctions(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionsRequest* /*request*/, ::injective_auction_rpc::AuctionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamBids : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamBids() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamBids() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBids(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::StreamBidsRequest* /*request*/, ::grpc::ServerWriter< ::injective_auction_rpc::StreamBidsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuctionEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuctionEndpoint() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AuctionEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionEndpoint(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionRequest* /*request*/, ::injective_auction_rpc::AuctionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuctionEndpoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Auctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Auctions() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Auctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auctions(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionsRequest* /*request*/, ::injective_auction_rpc::AuctionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuctions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamBids : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamBids() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamBids() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBids(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::StreamBidsRequest* /*request*/, ::grpc::ServerWriter< ::injective_auction_rpc::StreamBidsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamBids(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AuctionEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AuctionEndpoint() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuctionEndpoint(context, request, response); }));
    }
    ~WithRawCallbackMethod_AuctionEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuctionEndpoint(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionRequest* /*request*/, ::injective_auction_rpc::AuctionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AuctionEndpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Auctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Auctions() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Auctions(context, request, response); }));
    }
    ~WithRawCallbackMethod_Auctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Auctions(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionsRequest* /*request*/, ::injective_auction_rpc::AuctionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Auctions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamBids : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamBids() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamBids(context, request); }));
    }
    ~WithRawCallbackMethod_StreamBids() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBids(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::StreamBidsRequest* /*request*/, ::grpc::ServerWriter< ::injective_auction_rpc::StreamBidsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamBids(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuctionEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuctionEndpoint() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_auction_rpc::AuctionRequest, ::injective_auction_rpc::AuctionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_auction_rpc::AuctionRequest, ::injective_auction_rpc::AuctionResponse>* streamer) {
                       return this->StreamedAuctionEndpoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AuctionEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuctionEndpoint(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionRequest* /*request*/, ::injective_auction_rpc::AuctionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuctionEndpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_auction_rpc::AuctionRequest,::injective_auction_rpc::AuctionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Auctions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Auctions() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_auction_rpc::AuctionsRequest, ::injective_auction_rpc::AuctionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_auction_rpc::AuctionsRequest, ::injective_auction_rpc::AuctionsResponse>* streamer) {
                       return this->StreamedAuctions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Auctions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Auctions(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::AuctionsRequest* /*request*/, ::injective_auction_rpc::AuctionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuctions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_auction_rpc::AuctionsRequest,::injective_auction_rpc::AuctionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AuctionEndpoint<WithStreamedUnaryMethod_Auctions<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamBids : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamBids() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::injective_auction_rpc::StreamBidsRequest, ::injective_auction_rpc::StreamBidsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::injective_auction_rpc::StreamBidsRequest, ::injective_auction_rpc::StreamBidsResponse>* streamer) {
                       return this->StreamedStreamBids(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamBids() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamBids(::grpc::ServerContext* /*context*/, const ::injective_auction_rpc::StreamBidsRequest* /*request*/, ::grpc::ServerWriter< ::injective_auction_rpc::StreamBidsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamBids(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::injective_auction_rpc::StreamBidsRequest,::injective_auction_rpc::StreamBidsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamBids<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_AuctionEndpoint<WithStreamedUnaryMethod_Auctions<WithSplitStreamingMethod_StreamBids<Service > > > StreamedService;
};

}  // namespace injective_auction_rpc


#endif  // GRPC_exchange_2finjective_5fauction_5frpc_2eproto__INCLUDED

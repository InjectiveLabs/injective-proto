// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_exchange_rpc.proto

#include "exchange/injective_exchange_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective_exchange_rpc {
template <typename>
PROTOBUF_CONSTEXPR GetTxRequest::GetTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxRequestDefaultTypeInternal() {}
  union {
    GetTxRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxRequestDefaultTypeInternal _GetTxRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetTxResponse::GetTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codespace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.raw_log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.index_)*/ 0u

  , /*decltype(_impl_.code_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxResponseDefaultTypeInternal() {}
  union {
    GetTxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxResponseDefaultTypeInternal _GetTxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PrepareTxRequest::PrepareTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msgs_)*/{}
  , /*decltype(_impl_.signer_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.memo_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_)*/nullptr
  , /*decltype(_impl_.chain_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.timeout_height_)*/ ::uint64_t{0u}
} {}
struct PrepareTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrepareTxRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrepareTxRequestDefaultTypeInternal() {}
  union {
    PrepareTxRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrepareTxRequestDefaultTypeInternal _PrepareTxRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CosmosTxFee::CosmosTxFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/{}
  , /*decltype(_impl_.gas_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.delegate_fee_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CosmosTxFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CosmosTxFeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CosmosTxFeeDefaultTypeInternal() {}
  union {
    CosmosTxFee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CosmosTxFeeDefaultTypeInternal _CosmosTxFee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CosmosCoin::CosmosCoin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CosmosCoinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CosmosCoinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CosmosCoinDefaultTypeInternal() {}
  union {
    CosmosCoin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CosmosCoinDefaultTypeInternal _CosmosCoin_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PrepareTxResponse::PrepareTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sign_mode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pub_key_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_payer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_payer_sig_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrepareTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrepareTxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrepareTxResponseDefaultTypeInternal() {}
  union {
    PrepareTxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrepareTxResponseDefaultTypeInternal _PrepareTxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BroadcastTxRequest::BroadcastTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msgs_)*/{}
  , /*decltype(_impl_.tx_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_payer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_payer_sig_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pub_key_)*/nullptr
  , /*decltype(_impl_.chain_id_)*/ ::uint64_t{0u}
} {}
struct BroadcastTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastTxRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastTxRequestDefaultTypeInternal() {}
  union {
    BroadcastTxRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastTxRequestDefaultTypeInternal _BroadcastTxRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CosmosPubKey::CosmosPubKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CosmosPubKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CosmosPubKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CosmosPubKeyDefaultTypeInternal() {}
  union {
    CosmosPubKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CosmosPubKeyDefaultTypeInternal _CosmosPubKey_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BroadcastTxResponse::BroadcastTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codespace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.raw_log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.index_)*/ 0u

  , /*decltype(_impl_.code_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastTxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastTxResponseDefaultTypeInternal() {}
  union {
    BroadcastTxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastTxResponseDefaultTypeInternal _BroadcastTxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PrepareCosmosTxRequest::PrepareCosmosTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msgs_)*/{}
  , /*decltype(_impl_.sender_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.memo_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_)*/nullptr
  , /*decltype(_impl_.chain_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.timeout_height_)*/ ::uint64_t{0u}
} {}
struct PrepareCosmosTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrepareCosmosTxRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrepareCosmosTxRequestDefaultTypeInternal() {}
  union {
    PrepareCosmosTxRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrepareCosmosTxRequestDefaultTypeInternal _PrepareCosmosTxRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PrepareCosmosTxResponse::PrepareCosmosTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tx_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sign_mode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pub_key_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_payer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_payer_sig_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_payer_pub_key_)*/nullptr} {}
struct PrepareCosmosTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrepareCosmosTxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrepareCosmosTxResponseDefaultTypeInternal() {}
  union {
    PrepareCosmosTxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrepareCosmosTxResponseDefaultTypeInternal _PrepareCosmosTxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BroadcastCosmosTxRequest::BroadcastCosmosTxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tx_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sender_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pub_key_)*/nullptr} {}
struct BroadcastCosmosTxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastCosmosTxRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastCosmosTxRequestDefaultTypeInternal() {}
  union {
    BroadcastCosmosTxRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastCosmosTxRequestDefaultTypeInternal _BroadcastCosmosTxRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BroadcastCosmosTxResponse::BroadcastCosmosTxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codespace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.raw_log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.index_)*/ 0u

  , /*decltype(_impl_.code_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadcastCosmosTxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadcastCosmosTxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadcastCosmosTxResponseDefaultTypeInternal() {}
  union {
    BroadcastCosmosTxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadcastCosmosTxResponseDefaultTypeInternal _BroadcastCosmosTxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetFeePayerRequest::GetFeePayerRequest(
    ::_pbi::ConstantInitialized) {}
struct GetFeePayerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFeePayerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFeePayerRequestDefaultTypeInternal() {}
  union {
    GetFeePayerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFeePayerRequestDefaultTypeInternal _GetFeePayerRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetFeePayerResponse::GetFeePayerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fee_payer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_payer_pub_key_)*/nullptr} {}
struct GetFeePayerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFeePayerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFeePayerResponseDefaultTypeInternal() {}
  union {
    GetFeePayerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFeePayerResponseDefaultTypeInternal _GetFeePayerResponse_default_instance_;
}  // namespace injective_exchange_rpc
static ::_pb::Metadata file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[15];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_exchange_2finjective_5fexchange_5frpc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_exchange_2finjective_5fexchange_5frpc_2eproto = nullptr;
const ::uint32_t TableStruct_exchange_2finjective_5fexchange_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxRequest, _impl_.hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _impl_.tx_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _impl_.codespace_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _impl_.raw_log_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetTxResponse, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _impl_.chain_id_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _impl_.signer_address_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _impl_.memo_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _impl_.timeout_height_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _impl_.fee_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxRequest, _impl_.msgs_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosTxFee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosTxFee, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosTxFee, _impl_.gas_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosTxFee, _impl_.delegate_fee_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosCoin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosCoin, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosCoin, _impl_.amount_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxResponse, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxResponse, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxResponse, _impl_.sign_mode_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxResponse, _impl_.pub_key_type_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxResponse, _impl_.fee_payer_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareTxResponse, _impl_.fee_payer_sig_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_.chain_id_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_.tx_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_.msgs_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_.pub_key_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_.fee_payer_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_.fee_payer_sig_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxRequest, _impl_.mode_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosPubKey, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosPubKey, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::CosmosPubKey, _impl_.key_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _impl_.tx_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _impl_.codespace_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _impl_.raw_log_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastTxResponse, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxRequest, _impl_.chain_id_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxRequest, _impl_.sender_address_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxRequest, _impl_.memo_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxRequest, _impl_.timeout_height_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxRequest, _impl_.fee_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxRequest, _impl_.msgs_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxResponse, _impl_.tx_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxResponse, _impl_.sign_mode_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxResponse, _impl_.pub_key_type_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxResponse, _impl_.fee_payer_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxResponse, _impl_.fee_payer_sig_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::PrepareCosmosTxResponse, _impl_.fee_payer_pub_key_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxRequest, _impl_.tx_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxRequest, _impl_.pub_key_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxRequest, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxRequest, _impl_.sender_address_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _impl_.tx_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _impl_.codespace_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _impl_.raw_log_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::BroadcastCosmosTxResponse, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetFeePayerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetFeePayerResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetFeePayerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetFeePayerResponse, _impl_.fee_payer_),
    PROTOBUF_FIELD_OFFSET(::injective_exchange_rpc::GetFeePayerResponse, _impl_.fee_payer_pub_key_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective_exchange_rpc::GetTxRequest)},
        { 9, -1, -1, sizeof(::injective_exchange_rpc::GetTxResponse)},
        { 25, 40, -1, sizeof(::injective_exchange_rpc::PrepareTxRequest)},
        { 47, -1, -1, sizeof(::injective_exchange_rpc::CosmosTxFee)},
        { 58, -1, -1, sizeof(::injective_exchange_rpc::CosmosCoin)},
        { 68, -1, -1, sizeof(::injective_exchange_rpc::PrepareTxResponse)},
        { 82, 98, -1, sizeof(::injective_exchange_rpc::BroadcastTxRequest)},
        { 106, -1, -1, sizeof(::injective_exchange_rpc::CosmosPubKey)},
        { 116, -1, -1, sizeof(::injective_exchange_rpc::BroadcastTxResponse)},
        { 132, 146, -1, sizeof(::injective_exchange_rpc::PrepareCosmosTxRequest)},
        { 152, 166, -1, sizeof(::injective_exchange_rpc::PrepareCosmosTxResponse)},
        { 172, 184, -1, sizeof(::injective_exchange_rpc::BroadcastCosmosTxRequest)},
        { 188, -1, -1, sizeof(::injective_exchange_rpc::BroadcastCosmosTxResponse)},
        { 204, -1, -1, sizeof(::injective_exchange_rpc::GetFeePayerRequest)},
        { 212, 222, -1, sizeof(::injective_exchange_rpc::GetFeePayerResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective_exchange_rpc::_GetTxRequest_default_instance_._instance,
    &::injective_exchange_rpc::_GetTxResponse_default_instance_._instance,
    &::injective_exchange_rpc::_PrepareTxRequest_default_instance_._instance,
    &::injective_exchange_rpc::_CosmosTxFee_default_instance_._instance,
    &::injective_exchange_rpc::_CosmosCoin_default_instance_._instance,
    &::injective_exchange_rpc::_PrepareTxResponse_default_instance_._instance,
    &::injective_exchange_rpc::_BroadcastTxRequest_default_instance_._instance,
    &::injective_exchange_rpc::_CosmosPubKey_default_instance_._instance,
    &::injective_exchange_rpc::_BroadcastTxResponse_default_instance_._instance,
    &::injective_exchange_rpc::_PrepareCosmosTxRequest_default_instance_._instance,
    &::injective_exchange_rpc::_PrepareCosmosTxResponse_default_instance_._instance,
    &::injective_exchange_rpc::_BroadcastCosmosTxRequest_default_instance_._instance,
    &::injective_exchange_rpc::_BroadcastCosmosTxResponse_default_instance_._instance,
    &::injective_exchange_rpc::_GetFeePayerRequest_default_instance_._instance,
    &::injective_exchange_rpc::_GetFeePayerResponse_default_instance_._instance,
};
const char descriptor_table_protodef_exchange_2finjective_5fexchange_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%exchange/injective_exchange_rpc.proto\022"
    "\026injective_exchange_rpc\"\"\n\014GetTxRequest\022"
    "\022\n\004hash\030\001 \001(\tR\004hash\"\323\001\n\rGetTxResponse\022\027\n"
    "\007tx_hash\030\001 \001(\tR\006txHash\022\026\n\006height\030\002 \001(\022R\006"
    "height\022\024\n\005index\030\003 \001(\rR\005index\022\034\n\tcodespac"
    "e\030\004 \001(\tR\tcodespace\022\022\n\004code\030\005 \001(\rR\004code\022\022"
    "\n\004data\030\006 \001(\014R\004data\022\027\n\007raw_log\030\007 \001(\tR\006raw"
    "Log\022\034\n\ttimestamp\030\010 \001(\tR\ttimestamp\"\366\001\n\020Pr"
    "epareTxRequest\022\031\n\010chain_id\030\001 \001(\004R\007chainI"
    "d\022%\n\016signer_address\030\002 \001(\tR\rsignerAddress"
    "\022\032\n\010sequence\030\003 \001(\004R\010sequence\022\022\n\004memo\030\004 \001"
    "(\tR\004memo\022%\n\016timeout_height\030\005 \001(\004R\rtimeou"
    "tHeight\0225\n\003fee\030\006 \001(\0132#.injective_exchang"
    "e_rpc.CosmosTxFeeR\003fee\022\022\n\004msgs\030\007 \003(\014R\004ms"
    "gs\"|\n\013CosmosTxFee\0228\n\005price\030\001 \003(\0132\".injec"
    "tive_exchange_rpc.CosmosCoinR\005price\022\020\n\003g"
    "as\030\002 \001(\004R\003gas\022!\n\014delegate_fee\030\003 \001(\010R\013del"
    "egateFee\":\n\nCosmosCoin\022\024\n\005denom\030\001 \001(\tR\005d"
    "enom\022\026\n\006amount\030\002 \001(\tR\006amount\"\303\001\n\021Prepare"
    "TxResponse\022\022\n\004data\030\001 \001(\tR\004data\022\032\n\010sequen"
    "ce\030\002 \001(\004R\010sequence\022\033\n\tsign_mode\030\003 \001(\tR\010s"
    "ignMode\022 \n\014pub_key_type\030\004 \001(\tR\npubKeyTyp"
    "e\022\033\n\tfee_payer\030\005 \001(\tR\010feePayer\022\"\n\rfee_pa"
    "yer_sig\030\006 \001(\tR\013feePayerSig\"\205\002\n\022Broadcast"
    "TxRequest\022\031\n\010chain_id\030\001 \001(\004R\007chainId\022\016\n\002"
    "tx\030\002 \001(\014R\002tx\022\022\n\004msgs\030\003 \003(\014R\004msgs\022=\n\007pub_"
    "key\030\004 \001(\0132$.injective_exchange_rpc.Cosmo"
    "sPubKeyR\006pubKey\022\034\n\tsignature\030\005 \001(\tR\tsign"
    "ature\022\033\n\tfee_payer\030\006 \001(\tR\010feePayer\022\"\n\rfe"
    "e_payer_sig\030\007 \001(\tR\013feePayerSig\022\022\n\004mode\030\010"
    " \001(\tR\004mode\"4\n\014CosmosPubKey\022\022\n\004type\030\001 \001(\t"
    "R\004type\022\020\n\003key\030\002 \001(\tR\003key\"\331\001\n\023BroadcastTx"
    "Response\022\027\n\007tx_hash\030\001 \001(\tR\006txHash\022\026\n\006hei"
    "ght\030\002 \001(\022R\006height\022\024\n\005index\030\003 \001(\rR\005index\022"
    "\034\n\tcodespace\030\004 \001(\tR\tcodespace\022\022\n\004code\030\005 "
    "\001(\rR\004code\022\022\n\004data\030\006 \001(\014R\004data\022\027\n\007raw_log"
    "\030\007 \001(\tR\006rawLog\022\034\n\ttimestamp\030\010 \001(\tR\ttimes"
    "tamp\"\340\001\n\026PrepareCosmosTxRequest\022\031\n\010chain"
    "_id\030\001 \001(\004R\007chainId\022%\n\016sender_address\030\002 \001"
    "(\tR\rsenderAddress\022\022\n\004memo\030\003 \001(\tR\004memo\022%\n"
    "\016timeout_height\030\004 \001(\004R\rtimeoutHeight\0225\n\003"
    "fee\030\005 \001(\0132#.injective_exchange_rpc.Cosmo"
    "sTxFeeR\003fee\022\022\n\004msgs\030\006 \003(\014R\004msgs\"\372\001\n\027Prep"
    "areCosmosTxResponse\022\016\n\002tx\030\001 \001(\014R\002tx\022\033\n\ts"
    "ign_mode\030\002 \001(\tR\010signMode\022 \n\014pub_key_type"
    "\030\003 \001(\tR\npubKeyType\022\033\n\tfee_payer\030\004 \001(\tR\010f"
    "eePayer\022\"\n\rfee_payer_sig\030\005 \001(\tR\013feePayer"
    "Sig\022O\n\021fee_payer_pub_key\030\006 \001(\0132$.injecti"
    "ve_exchange_rpc.CosmosPubKeyR\016feePayerPu"
    "bKey\"\256\001\n\030BroadcastCosmosTxRequest\022\016\n\002tx\030"
    "\001 \001(\014R\002tx\022=\n\007pub_key\030\002 \001(\0132$.injective_e"
    "xchange_rpc.CosmosPubKeyR\006pubKey\022\034\n\tsign"
    "ature\030\003 \001(\tR\tsignature\022%\n\016sender_address"
    "\030\004 \001(\tR\rsenderAddress\"\337\001\n\031BroadcastCosmo"
    "sTxResponse\022\027\n\007tx_hash\030\001 \001(\tR\006txHash\022\026\n\006"
    "height\030\002 \001(\022R\006height\022\024\n\005index\030\003 \001(\rR\005ind"
    "ex\022\034\n\tcodespace\030\004 \001(\tR\tcodespace\022\022\n\004code"
    "\030\005 \001(\rR\004code\022\022\n\004data\030\006 \001(\014R\004data\022\027\n\007raw_"
    "log\030\007 \001(\tR\006rawLog\022\034\n\ttimestamp\030\010 \001(\tR\tti"
    "mestamp\"\024\n\022GetFeePayerRequest\"\203\001\n\023GetFee"
    "PayerResponse\022\033\n\tfee_payer\030\001 \001(\tR\010feePay"
    "er\022O\n\021fee_payer_pub_key\030\002 \001(\0132$.injectiv"
    "e_exchange_rpc.CosmosPubKeyR\016feePayerPub"
    "Key2\214\005\n\024InjectiveExchangeRPC\022T\n\005GetTx\022$."
    "injective_exchange_rpc.GetTxRequest\032%.in"
    "jective_exchange_rpc.GetTxResponse\022`\n\tPr"
    "epareTx\022(.injective_exchange_rpc.Prepare"
    "TxRequest\032).injective_exchange_rpc.Prepa"
    "reTxResponse\022f\n\013BroadcastTx\022*.injective_"
    "exchange_rpc.BroadcastTxRequest\032+.inject"
    "ive_exchange_rpc.BroadcastTxResponse\022r\n\017"
    "PrepareCosmosTx\022..injective_exchange_rpc"
    ".PrepareCosmosTxRequest\032/.injective_exch"
    "ange_rpc.PrepareCosmosTxResponse\022x\n\021Broa"
    "dcastCosmosTx\0220.injective_exchange_rpc.B"
    "roadcastCosmosTxRequest\0321.injective_exch"
    "ange_rpc.BroadcastCosmosTxResponse\022f\n\013Ge"
    "tFeePayer\022*.injective_exchange_rpc.GetFe"
    "ePayerRequest\032+.injective_exchange_rpc.G"
    "etFeePayerResponseB\302\001\n\032com.injective_exc"
    "hange_rpcB\031InjectiveExchangeRpcProtoP\001Z\031"
    "/injective_exchange_rpcpb\242\002\003IXX\252\002\024Inject"
    "iveExchangeRpc\312\002\024InjectiveExchangeRpc\342\002 "
    "InjectiveExchangeRpc\\GPBMetadata\352\002\024Injec"
    "tiveExchangeRpcb\006proto3"
};
static ::absl::once_flag descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto = {
    false,
    false,
    3383,
    descriptor_table_protodef_exchange_2finjective_5fexchange_5frpc_2eproto,
    "exchange/injective_exchange_rpc.proto",
    &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
    nullptr,
    0,
    15,
    schemas,
    file_default_instances,
    TableStruct_exchange_2finjective_5fexchange_5frpc_2eproto::offsets,
    file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto,
    file_level_enum_descriptors_exchange_2finjective_5fexchange_5frpc_2eproto,
    file_level_service_descriptors_exchange_2finjective_5fexchange_5frpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter() {
  return &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_2finjective_5fexchange_5frpc_2eproto(&descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto);
namespace injective_exchange_rpc {
// ===================================================================

class GetTxRequest::_Internal {
 public:
};

GetTxRequest::GetTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.GetTxRequest)
}
GetTxRequest::GetTxRequest(const GetTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.GetTxRequest)
}

inline void GetTxRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTxRequest::~GetTxRequest() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.GetTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void GetTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.GetTxRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.GetTxRequest.hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetTxRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.GetTxRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.GetTxRequest.hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.GetTxRequest)
  return target;
}

::size_t GetTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.GetTxRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxRequest::GetClassData() const { return &_class_data_; }


void GetTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxRequest*>(&to_msg);
  auto& from = static_cast<const GetTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.GetTxRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxRequest::CopyFrom(const GetTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.GetTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxRequest::IsInitialized() const {
  return true;
}

void GetTxRequest::InternalSwap(GetTxRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[0]);
}
// ===================================================================

class GetTxResponse::_Internal {
 public:
};

GetTxResponse::GetTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.GetTxResponse)
}
GetTxResponse::GetTxResponse(const GetTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.raw_log_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _impl_.raw_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_log().empty()) {
    _this->_impl_.raw_log_.Set(from._internal_raw_log(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.GetTxResponse)
}

inline void GetTxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.raw_log_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.index_) { 0u }

    , decltype(_impl_.code_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTxResponse::~GetTxResponse() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.GetTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hash_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.data_.Destroy();
  _impl_.raw_log_.Destroy();
  _impl_.timestamp_.Destroy();
}

void GetTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.GetTxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hash_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.raw_log_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx_hash = 1 [json_name = "txHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.GetTxResponse.tx_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 index = 3 [json_name = "index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string codespace = 4 [json_name = "codespace"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.GetTxResponse.codespace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 code = 5 [json_name = "code"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 6 [json_name = "data"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string raw_log = 7 [json_name = "rawLog"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_raw_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.GetTxResponse.raw_log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 8 [json_name = "timestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.GetTxResponse.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetTxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.GetTxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_hash = 1 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    const std::string& _s = this->_internal_tx_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.GetTxResponse.tx_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // sint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        2, this->_internal_height(), target);
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_index(), target);
  }

  // string codespace = 4 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    const std::string& _s = this->_internal_codespace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.GetTxResponse.codespace");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint32 code = 5 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_code(), target);
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // string raw_log = 7 [json_name = "rawLog"];
  if (!this->_internal_raw_log().empty()) {
    const std::string& _s = this->_internal_raw_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.GetTxResponse.raw_log");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string timestamp = 8 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.GetTxResponse.timestamp");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.GetTxResponse)
  return target;
}

::size_t GetTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.GetTxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_hash = 1 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_hash());
  }

  // string codespace = 4 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_codespace());
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // string raw_log = 7 [json_name = "rawLog"];
  if (!this->_internal_raw_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_raw_log());
  }

  // string timestamp = 8 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // sint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_height());
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  // uint32 code = 5 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxResponse::GetClassData() const { return &_class_data_; }


void GetTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxResponse*>(&to_msg);
  auto& from = static_cast<const GetTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.GetTxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_raw_log().empty()) {
    _this->_internal_set_raw_log(from._internal_raw_log());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxResponse::CopyFrom(const GetTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.GetTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxResponse::IsInitialized() const {
  return true;
}

void GetTxResponse::InternalSwap(GetTxResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_hash_, lhs_arena,
                                       &other->_impl_.tx_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codespace_, lhs_arena,
                                       &other->_impl_.codespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_log_, lhs_arena,
                                       &other->_impl_.raw_log_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTxResponse, _impl_.code_)
      + sizeof(GetTxResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(GetTxResponse, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[1]);
}
// ===================================================================

class PrepareTxRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PrepareTxRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrepareTxRequest, _impl_._has_bits_);
  static const ::injective_exchange_rpc::CosmosTxFee& fee(const PrepareTxRequest* msg);
  static void set_has_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_exchange_rpc::CosmosTxFee&
PrepareTxRequest::_Internal::fee(const PrepareTxRequest* msg) {
  return *msg->_impl_.fee_;
}
PrepareTxRequest::PrepareTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.PrepareTxRequest)
}
PrepareTxRequest::PrepareTxRequest(const PrepareTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrepareTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgs_){from._impl_.msgs_}
    , decltype(_impl_.signer_address_) {}

    , decltype(_impl_.memo_) {}

    , decltype(_impl_.fee_){nullptr}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.sequence_) {}

    , decltype(_impl_.timeout_height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer_address().empty()) {
    _this->_impl_.signer_address_.Set(from._internal_signer_address(), _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.memo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fee_ = new ::injective_exchange_rpc::CosmosTxFee(*from._impl_.fee_);
  }
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.timeout_height_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.timeout_height_));
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.PrepareTxRequest)
}

inline void PrepareTxRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgs_){arena}
    , decltype(_impl_.signer_address_) {}

    , decltype(_impl_.memo_) {}

    , decltype(_impl_.fee_){nullptr}
    , decltype(_impl_.chain_id_) { ::uint64_t{0u} }

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , decltype(_impl_.timeout_height_) { ::uint64_t{0u} }

  };
  _impl_.signer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.memo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrepareTxRequest::~PrepareTxRequest() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.PrepareTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrepareTxRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_msgs()->~RepeatedPtrField();
  _impl_.signer_address_.Destroy();
  _impl_.memo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fee_;
}

void PrepareTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrepareTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.PrepareTxRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_msgs()->Clear();
  _impl_.signer_address_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fee_ != nullptr);
    _impl_.fee_->Clear();
  }
  ::memset(&_impl_.chain_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_height_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.timeout_height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1 [json_name = "chainId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer_address = 2 [json_name = "signerAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signer_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareTxRequest.signer_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string memo = 4 [json_name = "memo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareTxRequest.memo"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timeout_height = 5 [json_name = "timeoutHeight"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.timeout_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_exchange_rpc.CosmosTxFee fee = 6 [json_name = "fee"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bytes msgs = 7 [json_name = "msgs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrepareTxRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.PrepareTxRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1 [json_name = "chainId"];
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_chain_id(), target);
  }

  // string signer_address = 2 [json_name = "signerAddress"];
  if (!this->_internal_signer_address().empty()) {
    const std::string& _s = this->_internal_signer_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareTxRequest.signer_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  // string memo = 4 [json_name = "memo"];
  if (!this->_internal_memo().empty()) {
    const std::string& _s = this->_internal_memo();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareTxRequest.memo");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 timeout_height = 5 [json_name = "timeoutHeight"];
  if (this->_internal_timeout_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_timeout_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_exchange_rpc.CosmosTxFee fee = 6 [json_name = "fee"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fee(this),
        _Internal::fee(this).GetCachedSize(), target, stream);
  }

  // repeated bytes msgs = 7 [json_name = "msgs"];
  for (int i = 0, n = this->_internal_msgs_size(); i < n; ++i) {
    const auto& s = this->_internal_msgs(i);
    target = stream->WriteBytes(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.PrepareTxRequest)
  return target;
}

::size_t PrepareTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.PrepareTxRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msgs = 7 [json_name = "msgs"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_msgs().size());
  for (int i = 0, n = _internal_msgs().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_msgs().Get(i));
  }

  // string signer_address = 2 [json_name = "signerAddress"];
  if (!this->_internal_signer_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer_address());
  }

  // string memo = 4 [json_name = "memo"];
  if (!this->_internal_memo().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_memo());
  }

  // .injective_exchange_rpc.CosmosTxFee fee = 6 [json_name = "fee"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_);
  }

  // uint64 chain_id = 1 [json_name = "chainId"];
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_chain_id());
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  // uint64 timeout_height = 5 [json_name = "timeoutHeight"];
  if (this->_internal_timeout_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timeout_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrepareTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrepareTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrepareTxRequest::GetClassData() const { return &_class_data_; }


void PrepareTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrepareTxRequest*>(&to_msg);
  auto& from = static_cast<const PrepareTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.PrepareTxRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_msgs()->MergeFrom(from._internal_msgs());
  if (!from._internal_signer_address().empty()) {
    _this->_internal_set_signer_address(from._internal_signer_address());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fee()->::injective_exchange_rpc::CosmosTxFee::MergeFrom(
        from._internal_fee());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_timeout_height() != 0) {
    _this->_internal_set_timeout_height(from._internal_timeout_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrepareTxRequest::CopyFrom(const PrepareTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.PrepareTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareTxRequest::IsInitialized() const {
  return true;
}

void PrepareTxRequest::InternalSwap(PrepareTxRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_msgs()->InternalSwap(
      other->_internal_mutable_msgs());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_address_, lhs_arena,
                                       &other->_impl_.signer_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.memo_, lhs_arena,
                                       &other->_impl_.memo_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrepareTxRequest, _impl_.timeout_height_)
      + sizeof(PrepareTxRequest::_impl_.timeout_height_)
      - PROTOBUF_FIELD_OFFSET(PrepareTxRequest, _impl_.fee_)>(
          reinterpret_cast<char*>(&_impl_.fee_),
          reinterpret_cast<char*>(&other->_impl_.fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[2]);
}
// ===================================================================

class CosmosTxFee::_Internal {
 public:
};

CosmosTxFee::CosmosTxFee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.CosmosTxFee)
}
CosmosTxFee::CosmosTxFee(const CosmosTxFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CosmosTxFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){from._impl_.price_}
    , decltype(_impl_.gas_) {}

    , decltype(_impl_.delegate_fee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gas_, &from._impl_.gas_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.delegate_fee_) -
    reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.delegate_fee_));
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.CosmosTxFee)
}

inline void CosmosTxFee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){arena}
    , decltype(_impl_.gas_) { ::uint64_t{0u} }

    , decltype(_impl_.delegate_fee_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CosmosTxFee::~CosmosTxFee() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.CosmosTxFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CosmosTxFee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_price()->~RepeatedPtrField();
}

void CosmosTxFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CosmosTxFee::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.CosmosTxFee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_price()->Clear();
  ::memset(&_impl_.gas_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delegate_fee_) -
      reinterpret_cast<char*>(&_impl_.gas_)) + sizeof(_impl_.delegate_fee_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosmosTxFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_exchange_rpc.CosmosCoin price = 1 [json_name = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_price(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 gas = 2 [json_name = "gas"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.gas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool delegate_fee = 3 [json_name = "delegateFee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.delegate_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CosmosTxFee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.CosmosTxFee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_exchange_rpc.CosmosCoin price = 1 [json_name = "price"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_price_size()); i < n; i++) {
    const auto& repfield = this->_internal_price(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 gas = 2 [json_name = "gas"];
  if (this->_internal_gas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_gas(), target);
  }

  // bool delegate_fee = 3 [json_name = "delegateFee"];
  if (this->_internal_delegate_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_delegate_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.CosmosTxFee)
  return target;
}

::size_t CosmosTxFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.CosmosTxFee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_exchange_rpc.CosmosCoin price = 1 [json_name = "price"];
  total_size += 1UL * this->_internal_price_size();
  for (const auto& msg : this->_internal_price()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 gas = 2 [json_name = "gas"];
  if (this->_internal_gas() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_gas());
  }

  // bool delegate_fee = 3 [json_name = "delegateFee"];
  if (this->_internal_delegate_fee() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CosmosTxFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CosmosTxFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CosmosTxFee::GetClassData() const { return &_class_data_; }


void CosmosTxFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CosmosTxFee*>(&to_msg);
  auto& from = static_cast<const CosmosTxFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.CosmosTxFee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_price()->MergeFrom(from._internal_price());
  if (from._internal_gas() != 0) {
    _this->_internal_set_gas(from._internal_gas());
  }
  if (from._internal_delegate_fee() != 0) {
    _this->_internal_set_delegate_fee(from._internal_delegate_fee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CosmosTxFee::CopyFrom(const CosmosTxFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.CosmosTxFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmosTxFee::IsInitialized() const {
  return true;
}

void CosmosTxFee::InternalSwap(CosmosTxFee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_price()->InternalSwap(other->_internal_mutable_price());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CosmosTxFee, _impl_.delegate_fee_)
      + sizeof(CosmosTxFee::_impl_.delegate_fee_)
      - PROTOBUF_FIELD_OFFSET(CosmosTxFee, _impl_.gas_)>(
          reinterpret_cast<char*>(&_impl_.gas_),
          reinterpret_cast<char*>(&other->_impl_.gas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CosmosTxFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[3]);
}
// ===================================================================

class CosmosCoin::_Internal {
 public:
};

CosmosCoin::CosmosCoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.CosmosCoin)
}
CosmosCoin::CosmosCoin(const CosmosCoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CosmosCoin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.CosmosCoin)
}

inline void CosmosCoin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CosmosCoin::~CosmosCoin() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.CosmosCoin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CosmosCoin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  _impl_.amount_.Destroy();
}

void CosmosCoin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CosmosCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.CosmosCoin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosmosCoin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.CosmosCoin.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.CosmosCoin.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CosmosCoin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.CosmosCoin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.CosmosCoin.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.CosmosCoin.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.CosmosCoin)
  return target;
}

::size_t CosmosCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.CosmosCoin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CosmosCoin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CosmosCoin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CosmosCoin::GetClassData() const { return &_class_data_; }


void CosmosCoin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CosmosCoin*>(&to_msg);
  auto& from = static_cast<const CosmosCoin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.CosmosCoin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CosmosCoin::CopyFrom(const CosmosCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.CosmosCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmosCoin::IsInitialized() const {
  return true;
}

void CosmosCoin::InternalSwap(CosmosCoin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CosmosCoin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[4]);
}
// ===================================================================

class PrepareTxResponse::_Internal {
 public:
};

PrepareTxResponse::PrepareTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.PrepareTxResponse)
}
PrepareTxResponse::PrepareTxResponse(const PrepareTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrepareTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.sign_mode_) {}

    , decltype(_impl_.pub_key_type_) {}

    , decltype(_impl_.fee_payer_) {}

    , decltype(_impl_.fee_payer_sig_) {}

    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _impl_.sign_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sign_mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign_mode().empty()) {
    _this->_impl_.sign_mode_.Set(from._internal_sign_mode(), _this->GetArenaForAllocation());
  }
  _impl_.pub_key_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pub_key_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pub_key_type().empty()) {
    _this->_impl_.pub_key_type_.Set(from._internal_pub_key_type(), _this->GetArenaForAllocation());
  }
  _impl_.fee_payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer().empty()) {
    _this->_impl_.fee_payer_.Set(from._internal_fee_payer(), _this->GetArenaForAllocation());
  }
  _impl_.fee_payer_sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_sig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer_sig().empty()) {
    _this->_impl_.fee_payer_sig_.Set(from._internal_fee_payer_sig(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.PrepareTxResponse)
}

inline void PrepareTxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.sign_mode_) {}

    , decltype(_impl_.pub_key_type_) {}

    , decltype(_impl_.fee_payer_) {}

    , decltype(_impl_.fee_payer_sig_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sign_mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pub_key_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pub_key_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_payer_sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_sig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrepareTxResponse::~PrepareTxResponse() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.PrepareTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrepareTxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.sign_mode_.Destroy();
  _impl_.pub_key_type_.Destroy();
  _impl_.fee_payer_.Destroy();
  _impl_.fee_payer_sig_.Destroy();
}

void PrepareTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrepareTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.PrepareTxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.sign_mode_.ClearToEmpty();
  _impl_.pub_key_type_.ClearToEmpty();
  _impl_.fee_payer_.ClearToEmpty();
  _impl_.fee_payer_sig_.ClearToEmpty();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareTxResponse.data"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 2 [json_name = "sequence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string sign_mode = 3 [json_name = "signMode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sign_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareTxResponse.sign_mode"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string pub_key_type = 4 [json_name = "pubKeyType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_pub_key_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareTxResponse.pub_key_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee_payer = 5 [json_name = "feePayer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fee_payer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareTxResponse.fee_payer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee_payer_sig = 6 [json_name = "feePayerSig"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_fee_payer_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareTxResponse.fee_payer_sig"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrepareTxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.PrepareTxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareTxResponse.data");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 sequence = 2 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sequence(), target);
  }

  // string sign_mode = 3 [json_name = "signMode"];
  if (!this->_internal_sign_mode().empty()) {
    const std::string& _s = this->_internal_sign_mode();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareTxResponse.sign_mode");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string pub_key_type = 4 [json_name = "pubKeyType"];
  if (!this->_internal_pub_key_type().empty()) {
    const std::string& _s = this->_internal_pub_key_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareTxResponse.pub_key_type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string fee_payer = 5 [json_name = "feePayer"];
  if (!this->_internal_fee_payer().empty()) {
    const std::string& _s = this->_internal_fee_payer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareTxResponse.fee_payer");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string fee_payer_sig = 6 [json_name = "feePayerSig"];
  if (!this->_internal_fee_payer_sig().empty()) {
    const std::string& _s = this->_internal_fee_payer_sig();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareTxResponse.fee_payer_sig");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.PrepareTxResponse)
  return target;
}

::size_t PrepareTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.PrepareTxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_data());
  }

  // string sign_mode = 3 [json_name = "signMode"];
  if (!this->_internal_sign_mode().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sign_mode());
  }

  // string pub_key_type = 4 [json_name = "pubKeyType"];
  if (!this->_internal_pub_key_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_pub_key_type());
  }

  // string fee_payer = 5 [json_name = "feePayer"];
  if (!this->_internal_fee_payer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_payer());
  }

  // string fee_payer_sig = 6 [json_name = "feePayerSig"];
  if (!this->_internal_fee_payer_sig().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_payer_sig());
  }

  // uint64 sequence = 2 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrepareTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrepareTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrepareTxResponse::GetClassData() const { return &_class_data_; }


void PrepareTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrepareTxResponse*>(&to_msg);
  auto& from = static_cast<const PrepareTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.PrepareTxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_sign_mode().empty()) {
    _this->_internal_set_sign_mode(from._internal_sign_mode());
  }
  if (!from._internal_pub_key_type().empty()) {
    _this->_internal_set_pub_key_type(from._internal_pub_key_type());
  }
  if (!from._internal_fee_payer().empty()) {
    _this->_internal_set_fee_payer(from._internal_fee_payer());
  }
  if (!from._internal_fee_payer_sig().empty()) {
    _this->_internal_set_fee_payer_sig(from._internal_fee_payer_sig());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrepareTxResponse::CopyFrom(const PrepareTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.PrepareTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareTxResponse::IsInitialized() const {
  return true;
}

void PrepareTxResponse::InternalSwap(PrepareTxResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sign_mode_, lhs_arena,
                                       &other->_impl_.sign_mode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pub_key_type_, lhs_arena,
                                       &other->_impl_.pub_key_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_payer_, lhs_arena,
                                       &other->_impl_.fee_payer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_payer_sig_, lhs_arena,
                                       &other->_impl_.fee_payer_sig_, rhs_arena);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[5]);
}
// ===================================================================

class BroadcastTxRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastTxRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BroadcastTxRequest, _impl_._has_bits_);
  static const ::injective_exchange_rpc::CosmosPubKey& pub_key(const BroadcastTxRequest* msg);
  static void set_has_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_exchange_rpc::CosmosPubKey&
BroadcastTxRequest::_Internal::pub_key(const BroadcastTxRequest* msg) {
  return *msg->_impl_.pub_key_;
}
BroadcastTxRequest::BroadcastTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.BroadcastTxRequest)
}
BroadcastTxRequest::BroadcastTxRequest(const BroadcastTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgs_){from._impl_.msgs_}
    , decltype(_impl_.tx_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.fee_payer_) {}

    , decltype(_impl_.fee_payer_sig_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.chain_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _impl_.fee_payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer().empty()) {
    _this->_impl_.fee_payer_.Set(from._internal_fee_payer(), _this->GetArenaForAllocation());
  }
  _impl_.fee_payer_sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_sig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer_sig().empty()) {
    _this->_impl_.fee_payer_sig_.Set(from._internal_fee_payer_sig(), _this->GetArenaForAllocation());
  }
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pub_key_ = new ::injective_exchange_rpc::CosmosPubKey(*from._impl_.pub_key_);
  }
  _this->_impl_.chain_id_ = from._impl_.chain_id_;
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.BroadcastTxRequest)
}

inline void BroadcastTxRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgs_){arena}
    , decltype(_impl_.tx_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.fee_payer_) {}

    , decltype(_impl_.fee_payer_sig_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.chain_id_) { ::uint64_t{0u} }

  };
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_payer_sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_sig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastTxRequest::~BroadcastTxRequest() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.BroadcastTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastTxRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_msgs()->~RepeatedPtrField();
  _impl_.tx_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.fee_payer_.Destroy();
  _impl_.fee_payer_sig_.Destroy();
  _impl_.mode_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pub_key_;
}

void BroadcastTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.BroadcastTxRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_msgs()->Clear();
  _impl_.tx_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _impl_.fee_payer_.ClearToEmpty();
  _impl_.fee_payer_sig_.ClearToEmpty();
  _impl_.mode_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pub_key_ != nullptr);
    _impl_.pub_key_->Clear();
  }
  _impl_.chain_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1 [json_name = "chainId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes tx = 2 [json_name = "tx"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bytes msgs = 3 [json_name = "msgs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_exchange_rpc.CosmosPubKey pub_key = 4 [json_name = "pubKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signature = 5 [json_name = "signature"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastTxRequest.signature"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee_payer = 6 [json_name = "feePayer"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_fee_payer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastTxRequest.fee_payer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee_payer_sig = 7 [json_name = "feePayerSig"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_fee_payer_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastTxRequest.fee_payer_sig"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string mode = 8 [json_name = "mode"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastTxRequest.mode"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BroadcastTxRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.BroadcastTxRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1 [json_name = "chainId"];
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_chain_id(), target);
  }

  // bytes tx = 2 [json_name = "tx"];
  if (!this->_internal_tx().empty()) {
    const std::string& _s = this->_internal_tx();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // repeated bytes msgs = 3 [json_name = "msgs"];
  for (int i = 0, n = this->_internal_msgs_size(); i < n; ++i) {
    const auto& s = this->_internal_msgs(i);
    target = stream->WriteBytes(3, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_exchange_rpc.CosmosPubKey pub_key = 4 [json_name = "pubKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  // string signature = 5 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastTxRequest.signature");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string fee_payer = 6 [json_name = "feePayer"];
  if (!this->_internal_fee_payer().empty()) {
    const std::string& _s = this->_internal_fee_payer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastTxRequest.fee_payer");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string fee_payer_sig = 7 [json_name = "feePayerSig"];
  if (!this->_internal_fee_payer_sig().empty()) {
    const std::string& _s = this->_internal_fee_payer_sig();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastTxRequest.fee_payer_sig");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string mode = 8 [json_name = "mode"];
  if (!this->_internal_mode().empty()) {
    const std::string& _s = this->_internal_mode();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastTxRequest.mode");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.BroadcastTxRequest)
  return target;
}

::size_t BroadcastTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.BroadcastTxRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msgs = 3 [json_name = "msgs"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_msgs().size());
  for (int i = 0, n = _internal_msgs().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_msgs().Get(i));
  }

  // bytes tx = 2 [json_name = "tx"];
  if (!this->_internal_tx().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_tx());
  }

  // string signature = 5 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signature());
  }

  // string fee_payer = 6 [json_name = "feePayer"];
  if (!this->_internal_fee_payer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_payer());
  }

  // string fee_payer_sig = 7 [json_name = "feePayerSig"];
  if (!this->_internal_fee_payer_sig().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_payer_sig());
  }

  // string mode = 8 [json_name = "mode"];
  if (!this->_internal_mode().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mode());
  }

  // .injective_exchange_rpc.CosmosPubKey pub_key = 4 [json_name = "pubKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_key_);
  }

  // uint64 chain_id = 1 [json_name = "chainId"];
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_chain_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastTxRequest::GetClassData() const { return &_class_data_; }


void BroadcastTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastTxRequest*>(&to_msg);
  auto& from = static_cast<const BroadcastTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.BroadcastTxRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_msgs()->MergeFrom(from._internal_msgs());
  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_fee_payer().empty()) {
    _this->_internal_set_fee_payer(from._internal_fee_payer());
  }
  if (!from._internal_fee_payer_sig().empty()) {
    _this->_internal_set_fee_payer_sig(from._internal_fee_payer_sig());
  }
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pub_key()->::injective_exchange_rpc::CosmosPubKey::MergeFrom(
        from._internal_pub_key());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastTxRequest::CopyFrom(const BroadcastTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.BroadcastTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastTxRequest::IsInitialized() const {
  return true;
}

void BroadcastTxRequest::InternalSwap(BroadcastTxRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_msgs()->InternalSwap(
      other->_internal_mutable_msgs());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_, lhs_arena,
                                       &other->_impl_.tx_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_payer_, lhs_arena,
                                       &other->_impl_.fee_payer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_payer_sig_, lhs_arena,
                                       &other->_impl_.fee_payer_sig_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mode_, lhs_arena,
                                       &other->_impl_.mode_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastTxRequest, _impl_.chain_id_)
      + sizeof(BroadcastTxRequest::_impl_.chain_id_)
      - PROTOBUF_FIELD_OFFSET(BroadcastTxRequest, _impl_.pub_key_)>(
          reinterpret_cast<char*>(&_impl_.pub_key_),
          reinterpret_cast<char*>(&other->_impl_.pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[6]);
}
// ===================================================================

class CosmosPubKey::_Internal {
 public:
};

CosmosPubKey::CosmosPubKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.CosmosPubKey)
}
CosmosPubKey::CosmosPubKey(const CosmosPubKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CosmosPubKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_) {}

    , decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.CosmosPubKey)
}

inline void CosmosPubKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_) {}

    , decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CosmosPubKey::~CosmosPubKey() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.CosmosPubKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CosmosPubKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.key_.Destroy();
}

void CosmosPubKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CosmosPubKey::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.CosmosPubKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosmosPubKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.CosmosPubKey.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string key = 2 [json_name = "key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.CosmosPubKey.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CosmosPubKey::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.CosmosPubKey)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.CosmosPubKey.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.CosmosPubKey.key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.CosmosPubKey)
  return target;
}

::size_t CosmosPubKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.CosmosPubKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // string key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CosmosPubKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CosmosPubKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CosmosPubKey::GetClassData() const { return &_class_data_; }


void CosmosPubKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CosmosPubKey*>(&to_msg);
  auto& from = static_cast<const CosmosPubKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.CosmosPubKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CosmosPubKey::CopyFrom(const CosmosPubKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.CosmosPubKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmosPubKey::IsInitialized() const {
  return true;
}

void CosmosPubKey::InternalSwap(CosmosPubKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CosmosPubKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[7]);
}
// ===================================================================

class BroadcastTxResponse::_Internal {
 public:
};

BroadcastTxResponse::BroadcastTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.BroadcastTxResponse)
}
BroadcastTxResponse::BroadcastTxResponse(const BroadcastTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.raw_log_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _impl_.raw_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_log().empty()) {
    _this->_impl_.raw_log_.Set(from._internal_raw_log(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.BroadcastTxResponse)
}

inline void BroadcastTxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.raw_log_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.index_) { 0u }

    , decltype(_impl_.code_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastTxResponse::~BroadcastTxResponse() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.BroadcastTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastTxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hash_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.data_.Destroy();
  _impl_.raw_log_.Destroy();
  _impl_.timestamp_.Destroy();
}

void BroadcastTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.BroadcastTxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hash_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.raw_log_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx_hash = 1 [json_name = "txHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastTxResponse.tx_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 index = 3 [json_name = "index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string codespace = 4 [json_name = "codespace"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastTxResponse.codespace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 code = 5 [json_name = "code"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 6 [json_name = "data"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string raw_log = 7 [json_name = "rawLog"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_raw_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastTxResponse.raw_log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 8 [json_name = "timestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastTxResponse.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BroadcastTxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.BroadcastTxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_hash = 1 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    const std::string& _s = this->_internal_tx_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastTxResponse.tx_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // sint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        2, this->_internal_height(), target);
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_index(), target);
  }

  // string codespace = 4 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    const std::string& _s = this->_internal_codespace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastTxResponse.codespace");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint32 code = 5 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_code(), target);
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // string raw_log = 7 [json_name = "rawLog"];
  if (!this->_internal_raw_log().empty()) {
    const std::string& _s = this->_internal_raw_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastTxResponse.raw_log");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string timestamp = 8 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastTxResponse.timestamp");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.BroadcastTxResponse)
  return target;
}

::size_t BroadcastTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.BroadcastTxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_hash = 1 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_hash());
  }

  // string codespace = 4 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_codespace());
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // string raw_log = 7 [json_name = "rawLog"];
  if (!this->_internal_raw_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_raw_log());
  }

  // string timestamp = 8 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // sint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_height());
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  // uint32 code = 5 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastTxResponse::GetClassData() const { return &_class_data_; }


void BroadcastTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastTxResponse*>(&to_msg);
  auto& from = static_cast<const BroadcastTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.BroadcastTxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_raw_log().empty()) {
    _this->_internal_set_raw_log(from._internal_raw_log());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastTxResponse::CopyFrom(const BroadcastTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.BroadcastTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastTxResponse::IsInitialized() const {
  return true;
}

void BroadcastTxResponse::InternalSwap(BroadcastTxResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_hash_, lhs_arena,
                                       &other->_impl_.tx_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codespace_, lhs_arena,
                                       &other->_impl_.codespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_log_, lhs_arena,
                                       &other->_impl_.raw_log_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastTxResponse, _impl_.code_)
      + sizeof(BroadcastTxResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(BroadcastTxResponse, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[8]);
}
// ===================================================================

class PrepareCosmosTxRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<PrepareCosmosTxRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrepareCosmosTxRequest, _impl_._has_bits_);
  static const ::injective_exchange_rpc::CosmosTxFee& fee(const PrepareCosmosTxRequest* msg);
  static void set_has_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_exchange_rpc::CosmosTxFee&
PrepareCosmosTxRequest::_Internal::fee(const PrepareCosmosTxRequest* msg) {
  return *msg->_impl_.fee_;
}
PrepareCosmosTxRequest::PrepareCosmosTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.PrepareCosmosTxRequest)
}
PrepareCosmosTxRequest::PrepareCosmosTxRequest(const PrepareCosmosTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrepareCosmosTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgs_){from._impl_.msgs_}
    , decltype(_impl_.sender_address_) {}

    , decltype(_impl_.memo_) {}

    , decltype(_impl_.fee_){nullptr}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.timeout_height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_address().empty()) {
    _this->_impl_.sender_address_.Set(from._internal_sender_address(), _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.memo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fee_ = new ::injective_exchange_rpc::CosmosTxFee(*from._impl_.fee_);
  }
  ::memcpy(&_impl_.chain_id_, &from._impl_.chain_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.timeout_height_) -
    reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.timeout_height_));
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.PrepareCosmosTxRequest)
}

inline void PrepareCosmosTxRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msgs_){arena}
    , decltype(_impl_.sender_address_) {}

    , decltype(_impl_.memo_) {}

    , decltype(_impl_.fee_){nullptr}
    , decltype(_impl_.chain_id_) { ::uint64_t{0u} }

    , decltype(_impl_.timeout_height_) { ::uint64_t{0u} }

  };
  _impl_.sender_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.memo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrepareCosmosTxRequest::~PrepareCosmosTxRequest() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.PrepareCosmosTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrepareCosmosTxRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_msgs()->~RepeatedPtrField();
  _impl_.sender_address_.Destroy();
  _impl_.memo_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fee_;
}

void PrepareCosmosTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrepareCosmosTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.PrepareCosmosTxRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_msgs()->Clear();
  _impl_.sender_address_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fee_ != nullptr);
    _impl_.fee_->Clear();
  }
  ::memset(&_impl_.chain_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_height_) -
      reinterpret_cast<char*>(&_impl_.chain_id_)) + sizeof(_impl_.timeout_height_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareCosmosTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 chain_id = 1 [json_name = "chainId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender_address = 2 [json_name = "senderAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareCosmosTxRequest.sender_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string memo = 3 [json_name = "memo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareCosmosTxRequest.memo"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timeout_height = 4 [json_name = "timeoutHeight"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.timeout_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_exchange_rpc.CosmosTxFee fee = 5 [json_name = "fee"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bytes msgs = 6 [json_name = "msgs"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_msgs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrepareCosmosTxRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.PrepareCosmosTxRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chain_id = 1 [json_name = "chainId"];
  if (this->_internal_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_chain_id(), target);
  }

  // string sender_address = 2 [json_name = "senderAddress"];
  if (!this->_internal_sender_address().empty()) {
    const std::string& _s = this->_internal_sender_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareCosmosTxRequest.sender_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string memo = 3 [json_name = "memo"];
  if (!this->_internal_memo().empty()) {
    const std::string& _s = this->_internal_memo();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareCosmosTxRequest.memo");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 timeout_height = 4 [json_name = "timeoutHeight"];
  if (this->_internal_timeout_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_timeout_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_exchange_rpc.CosmosTxFee fee = 5 [json_name = "fee"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fee(this),
        _Internal::fee(this).GetCachedSize(), target, stream);
  }

  // repeated bytes msgs = 6 [json_name = "msgs"];
  for (int i = 0, n = this->_internal_msgs_size(); i < n; ++i) {
    const auto& s = this->_internal_msgs(i);
    target = stream->WriteBytes(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.PrepareCosmosTxRequest)
  return target;
}

::size_t PrepareCosmosTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.PrepareCosmosTxRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes msgs = 6 [json_name = "msgs"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_msgs().size());
  for (int i = 0, n = _internal_msgs().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_msgs().Get(i));
  }

  // string sender_address = 2 [json_name = "senderAddress"];
  if (!this->_internal_sender_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_address());
  }

  // string memo = 3 [json_name = "memo"];
  if (!this->_internal_memo().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_memo());
  }

  // .injective_exchange_rpc.CosmosTxFee fee = 5 [json_name = "fee"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_);
  }

  // uint64 chain_id = 1 [json_name = "chainId"];
  if (this->_internal_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_chain_id());
  }

  // uint64 timeout_height = 4 [json_name = "timeoutHeight"];
  if (this->_internal_timeout_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timeout_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrepareCosmosTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrepareCosmosTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrepareCosmosTxRequest::GetClassData() const { return &_class_data_; }


void PrepareCosmosTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrepareCosmosTxRequest*>(&to_msg);
  auto& from = static_cast<const PrepareCosmosTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.PrepareCosmosTxRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_msgs()->MergeFrom(from._internal_msgs());
  if (!from._internal_sender_address().empty()) {
    _this->_internal_set_sender_address(from._internal_sender_address());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fee()->::injective_exchange_rpc::CosmosTxFee::MergeFrom(
        from._internal_fee());
  }
  if (from._internal_chain_id() != 0) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_timeout_height() != 0) {
    _this->_internal_set_timeout_height(from._internal_timeout_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrepareCosmosTxRequest::CopyFrom(const PrepareCosmosTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.PrepareCosmosTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareCosmosTxRequest::IsInitialized() const {
  return true;
}

void PrepareCosmosTxRequest::InternalSwap(PrepareCosmosTxRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_msgs()->InternalSwap(
      other->_internal_mutable_msgs());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_address_, lhs_arena,
                                       &other->_impl_.sender_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.memo_, lhs_arena,
                                       &other->_impl_.memo_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrepareCosmosTxRequest, _impl_.timeout_height_)
      + sizeof(PrepareCosmosTxRequest::_impl_.timeout_height_)
      - PROTOBUF_FIELD_OFFSET(PrepareCosmosTxRequest, _impl_.fee_)>(
          reinterpret_cast<char*>(&_impl_.fee_),
          reinterpret_cast<char*>(&other->_impl_.fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareCosmosTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[9]);
}
// ===================================================================

class PrepareCosmosTxResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PrepareCosmosTxResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PrepareCosmosTxResponse, _impl_._has_bits_);
  static const ::injective_exchange_rpc::CosmosPubKey& fee_payer_pub_key(const PrepareCosmosTxResponse* msg);
  static void set_has_fee_payer_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_exchange_rpc::CosmosPubKey&
PrepareCosmosTxResponse::_Internal::fee_payer_pub_key(const PrepareCosmosTxResponse* msg) {
  return *msg->_impl_.fee_payer_pub_key_;
}
PrepareCosmosTxResponse::PrepareCosmosTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.PrepareCosmosTxResponse)
}
PrepareCosmosTxResponse::PrepareCosmosTxResponse(const PrepareCosmosTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PrepareCosmosTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_) {}

    , decltype(_impl_.sign_mode_) {}

    , decltype(_impl_.pub_key_type_) {}

    , decltype(_impl_.fee_payer_) {}

    , decltype(_impl_.fee_payer_sig_) {}

    , decltype(_impl_.fee_payer_pub_key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), _this->GetArenaForAllocation());
  }
  _impl_.sign_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sign_mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign_mode().empty()) {
    _this->_impl_.sign_mode_.Set(from._internal_sign_mode(), _this->GetArenaForAllocation());
  }
  _impl_.pub_key_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pub_key_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pub_key_type().empty()) {
    _this->_impl_.pub_key_type_.Set(from._internal_pub_key_type(), _this->GetArenaForAllocation());
  }
  _impl_.fee_payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer().empty()) {
    _this->_impl_.fee_payer_.Set(from._internal_fee_payer(), _this->GetArenaForAllocation());
  }
  _impl_.fee_payer_sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_sig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer_sig().empty()) {
    _this->_impl_.fee_payer_sig_.Set(from._internal_fee_payer_sig(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fee_payer_pub_key_ = new ::injective_exchange_rpc::CosmosPubKey(*from._impl_.fee_payer_pub_key_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.PrepareCosmosTxResponse)
}

inline void PrepareCosmosTxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_) {}

    , decltype(_impl_.sign_mode_) {}

    , decltype(_impl_.pub_key_type_) {}

    , decltype(_impl_.fee_payer_) {}

    , decltype(_impl_.fee_payer_sig_) {}

    , decltype(_impl_.fee_payer_pub_key_){nullptr}
  };
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sign_mode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pub_key_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pub_key_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_payer_sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_sig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrepareCosmosTxResponse::~PrepareCosmosTxResponse() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.PrepareCosmosTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrepareCosmosTxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_.Destroy();
  _impl_.sign_mode_.Destroy();
  _impl_.pub_key_type_.Destroy();
  _impl_.fee_payer_.Destroy();
  _impl_.fee_payer_sig_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fee_payer_pub_key_;
}

void PrepareCosmosTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrepareCosmosTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.PrepareCosmosTxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_.ClearToEmpty();
  _impl_.sign_mode_.ClearToEmpty();
  _impl_.pub_key_type_.ClearToEmpty();
  _impl_.fee_payer_.ClearToEmpty();
  _impl_.fee_payer_sig_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fee_payer_pub_key_ != nullptr);
    _impl_.fee_payer_pub_key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrepareCosmosTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string sign_mode = 2 [json_name = "signMode"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sign_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareCosmosTxResponse.sign_mode"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string pub_key_type = 3 [json_name = "pubKeyType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pub_key_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareCosmosTxResponse.pub_key_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee_payer = 4 [json_name = "feePayer"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fee_payer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareCosmosTxResponse.fee_payer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee_payer_sig = 5 [json_name = "feePayerSig"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_fee_payer_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.PrepareCosmosTxResponse.fee_payer_sig"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_exchange_rpc.CosmosPubKey fee_payer_pub_key = 6 [json_name = "feePayerPubKey"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_payer_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PrepareCosmosTxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.PrepareCosmosTxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (!this->_internal_tx().empty()) {
    const std::string& _s = this->_internal_tx();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // string sign_mode = 2 [json_name = "signMode"];
  if (!this->_internal_sign_mode().empty()) {
    const std::string& _s = this->_internal_sign_mode();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareCosmosTxResponse.sign_mode");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string pub_key_type = 3 [json_name = "pubKeyType"];
  if (!this->_internal_pub_key_type().empty()) {
    const std::string& _s = this->_internal_pub_key_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareCosmosTxResponse.pub_key_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string fee_payer = 4 [json_name = "feePayer"];
  if (!this->_internal_fee_payer().empty()) {
    const std::string& _s = this->_internal_fee_payer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareCosmosTxResponse.fee_payer");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string fee_payer_sig = 5 [json_name = "feePayerSig"];
  if (!this->_internal_fee_payer_sig().empty()) {
    const std::string& _s = this->_internal_fee_payer_sig();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.PrepareCosmosTxResponse.fee_payer_sig");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_exchange_rpc.CosmosPubKey fee_payer_pub_key = 6 [json_name = "feePayerPubKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fee_payer_pub_key(this),
        _Internal::fee_payer_pub_key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.PrepareCosmosTxResponse)
  return target;
}

::size_t PrepareCosmosTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.PrepareCosmosTxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (!this->_internal_tx().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_tx());
  }

  // string sign_mode = 2 [json_name = "signMode"];
  if (!this->_internal_sign_mode().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sign_mode());
  }

  // string pub_key_type = 3 [json_name = "pubKeyType"];
  if (!this->_internal_pub_key_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_pub_key_type());
  }

  // string fee_payer = 4 [json_name = "feePayer"];
  if (!this->_internal_fee_payer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_payer());
  }

  // string fee_payer_sig = 5 [json_name = "feePayerSig"];
  if (!this->_internal_fee_payer_sig().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_payer_sig());
  }

  // .injective_exchange_rpc.CosmosPubKey fee_payer_pub_key = 6 [json_name = "feePayerPubKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_payer_pub_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrepareCosmosTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PrepareCosmosTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrepareCosmosTxResponse::GetClassData() const { return &_class_data_; }


void PrepareCosmosTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PrepareCosmosTxResponse*>(&to_msg);
  auto& from = static_cast<const PrepareCosmosTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.PrepareCosmosTxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (!from._internal_sign_mode().empty()) {
    _this->_internal_set_sign_mode(from._internal_sign_mode());
  }
  if (!from._internal_pub_key_type().empty()) {
    _this->_internal_set_pub_key_type(from._internal_pub_key_type());
  }
  if (!from._internal_fee_payer().empty()) {
    _this->_internal_set_fee_payer(from._internal_fee_payer());
  }
  if (!from._internal_fee_payer_sig().empty()) {
    _this->_internal_set_fee_payer_sig(from._internal_fee_payer_sig());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fee_payer_pub_key()->::injective_exchange_rpc::CosmosPubKey::MergeFrom(
        from._internal_fee_payer_pub_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrepareCosmosTxResponse::CopyFrom(const PrepareCosmosTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.PrepareCosmosTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareCosmosTxResponse::IsInitialized() const {
  return true;
}

void PrepareCosmosTxResponse::InternalSwap(PrepareCosmosTxResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_, lhs_arena,
                                       &other->_impl_.tx_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sign_mode_, lhs_arena,
                                       &other->_impl_.sign_mode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pub_key_type_, lhs_arena,
                                       &other->_impl_.pub_key_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_payer_, lhs_arena,
                                       &other->_impl_.fee_payer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_payer_sig_, lhs_arena,
                                       &other->_impl_.fee_payer_sig_, rhs_arena);
  swap(_impl_.fee_payer_pub_key_, other->_impl_.fee_payer_pub_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PrepareCosmosTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[10]);
}
// ===================================================================

class BroadcastCosmosTxRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastCosmosTxRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BroadcastCosmosTxRequest, _impl_._has_bits_);
  static const ::injective_exchange_rpc::CosmosPubKey& pub_key(const BroadcastCosmosTxRequest* msg);
  static void set_has_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_exchange_rpc::CosmosPubKey&
BroadcastCosmosTxRequest::_Internal::pub_key(const BroadcastCosmosTxRequest* msg) {
  return *msg->_impl_.pub_key_;
}
BroadcastCosmosTxRequest::BroadcastCosmosTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.BroadcastCosmosTxRequest)
}
BroadcastCosmosTxRequest::BroadcastCosmosTxRequest(const BroadcastCosmosTxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastCosmosTxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.sender_address_) {}

    , decltype(_impl_.pub_key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx().empty()) {
    _this->_impl_.tx_.Set(from._internal_tx(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _impl_.sender_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_address().empty()) {
    _this->_impl_.sender_address_.Set(from._internal_sender_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pub_key_ = new ::injective_exchange_rpc::CosmosPubKey(*from._impl_.pub_key_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.BroadcastCosmosTxRequest)
}

inline void BroadcastCosmosTxRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.sender_address_) {}

    , decltype(_impl_.pub_key_){nullptr}
  };
  _impl_.tx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastCosmosTxRequest::~BroadcastCosmosTxRequest() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.BroadcastCosmosTxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastCosmosTxRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_.Destroy();
  _impl_.signature_.Destroy();
  _impl_.sender_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pub_key_;
}

void BroadcastCosmosTxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastCosmosTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.BroadcastCosmosTxRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _impl_.sender_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pub_key_ != nullptr);
    _impl_.pub_key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastCosmosTxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes tx = 1 [json_name = "tx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_exchange_rpc.CosmosPubKey pub_key = 2 [json_name = "pubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signature = 3 [json_name = "signature"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastCosmosTxRequest.signature"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender_address = 4 [json_name = "senderAddress"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastCosmosTxRequest.sender_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BroadcastCosmosTxRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.BroadcastCosmosTxRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (!this->_internal_tx().empty()) {
    const std::string& _s = this->_internal_tx();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_exchange_rpc.CosmosPubKey pub_key = 2 [json_name = "pubKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  // string signature = 3 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastCosmosTxRequest.signature");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string sender_address = 4 [json_name = "senderAddress"];
  if (!this->_internal_sender_address().empty()) {
    const std::string& _s = this->_internal_sender_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastCosmosTxRequest.sender_address");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.BroadcastCosmosTxRequest)
  return target;
}

::size_t BroadcastCosmosTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.BroadcastCosmosTxRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes tx = 1 [json_name = "tx"];
  if (!this->_internal_tx().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_tx());
  }

  // string signature = 3 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signature());
  }

  // string sender_address = 4 [json_name = "senderAddress"];
  if (!this->_internal_sender_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_address());
  }

  // .injective_exchange_rpc.CosmosPubKey pub_key = 2 [json_name = "pubKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastCosmosTxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastCosmosTxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastCosmosTxRequest::GetClassData() const { return &_class_data_; }


void BroadcastCosmosTxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastCosmosTxRequest*>(&to_msg);
  auto& from = static_cast<const BroadcastCosmosTxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.BroadcastCosmosTxRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx().empty()) {
    _this->_internal_set_tx(from._internal_tx());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_sender_address().empty()) {
    _this->_internal_set_sender_address(from._internal_sender_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pub_key()->::injective_exchange_rpc::CosmosPubKey::MergeFrom(
        from._internal_pub_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastCosmosTxRequest::CopyFrom(const BroadcastCosmosTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.BroadcastCosmosTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastCosmosTxRequest::IsInitialized() const {
  return true;
}

void BroadcastCosmosTxRequest::InternalSwap(BroadcastCosmosTxRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_, lhs_arena,
                                       &other->_impl_.tx_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_address_, lhs_arena,
                                       &other->_impl_.sender_address_, rhs_arena);
  swap(_impl_.pub_key_, other->_impl_.pub_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastCosmosTxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[11]);
}
// ===================================================================

class BroadcastCosmosTxResponse::_Internal {
 public:
};

BroadcastCosmosTxResponse::BroadcastCosmosTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.BroadcastCosmosTxResponse)
}
BroadcastCosmosTxResponse::BroadcastCosmosTxResponse(const BroadcastCosmosTxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadcastCosmosTxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.raw_log_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _impl_.raw_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_log().empty()) {
    _this->_impl_.raw_log_.Set(from._internal_raw_log(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.BroadcastCosmosTxResponse)
}

inline void BroadcastCosmosTxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.raw_log_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.index_) { 0u }

    , decltype(_impl_.code_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadcastCosmosTxResponse::~BroadcastCosmosTxResponse() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.BroadcastCosmosTxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadcastCosmosTxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hash_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.data_.Destroy();
  _impl_.raw_log_.Destroy();
  _impl_.timestamp_.Destroy();
}

void BroadcastCosmosTxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadcastCosmosTxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.BroadcastCosmosTxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hash_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.raw_log_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadcastCosmosTxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx_hash = 1 [json_name = "txHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastCosmosTxResponse.tx_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 index = 3 [json_name = "index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string codespace = 4 [json_name = "codespace"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastCosmosTxResponse.codespace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 code = 5 [json_name = "code"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 6 [json_name = "data"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string raw_log = 7 [json_name = "rawLog"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_raw_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastCosmosTxResponse.raw_log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 8 [json_name = "timestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.BroadcastCosmosTxResponse.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BroadcastCosmosTxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.BroadcastCosmosTxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_hash = 1 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    const std::string& _s = this->_internal_tx_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastCosmosTxResponse.tx_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // sint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        2, this->_internal_height(), target);
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_index(), target);
  }

  // string codespace = 4 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    const std::string& _s = this->_internal_codespace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastCosmosTxResponse.codespace");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint32 code = 5 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_code(), target);
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // string raw_log = 7 [json_name = "rawLog"];
  if (!this->_internal_raw_log().empty()) {
    const std::string& _s = this->_internal_raw_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastCosmosTxResponse.raw_log");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string timestamp = 8 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.BroadcastCosmosTxResponse.timestamp");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.BroadcastCosmosTxResponse)
  return target;
}

::size_t BroadcastCosmosTxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.BroadcastCosmosTxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_hash = 1 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_hash());
  }

  // string codespace = 4 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_codespace());
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // string raw_log = 7 [json_name = "rawLog"];
  if (!this->_internal_raw_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_raw_log());
  }

  // string timestamp = 8 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // sint64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_height());
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  // uint32 code = 5 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadcastCosmosTxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadcastCosmosTxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadcastCosmosTxResponse::GetClassData() const { return &_class_data_; }


void BroadcastCosmosTxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadcastCosmosTxResponse*>(&to_msg);
  auto& from = static_cast<const BroadcastCosmosTxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.BroadcastCosmosTxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_raw_log().empty()) {
    _this->_internal_set_raw_log(from._internal_raw_log());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadcastCosmosTxResponse::CopyFrom(const BroadcastCosmosTxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.BroadcastCosmosTxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastCosmosTxResponse::IsInitialized() const {
  return true;
}

void BroadcastCosmosTxResponse::InternalSwap(BroadcastCosmosTxResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_hash_, lhs_arena,
                                       &other->_impl_.tx_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codespace_, lhs_arena,
                                       &other->_impl_.codespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_log_, lhs_arena,
                                       &other->_impl_.raw_log_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BroadcastCosmosTxResponse, _impl_.code_)
      + sizeof(BroadcastCosmosTxResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(BroadcastCosmosTxResponse, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadcastCosmosTxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[12]);
}
// ===================================================================

class GetFeePayerRequest::_Internal {
 public:
};

GetFeePayerRequest::GetFeePayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.GetFeePayerRequest)
}
GetFeePayerRequest::GetFeePayerRequest(const GetFeePayerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetFeePayerRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.GetFeePayerRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFeePayerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFeePayerRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetFeePayerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[13]);
}
// ===================================================================

class GetFeePayerResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetFeePayerResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetFeePayerResponse, _impl_._has_bits_);
  static const ::injective_exchange_rpc::CosmosPubKey& fee_payer_pub_key(const GetFeePayerResponse* msg);
  static void set_has_fee_payer_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_exchange_rpc::CosmosPubKey&
GetFeePayerResponse::_Internal::fee_payer_pub_key(const GetFeePayerResponse* msg) {
  return *msg->_impl_.fee_payer_pub_key_;
}
GetFeePayerResponse::GetFeePayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_exchange_rpc.GetFeePayerResponse)
}
GetFeePayerResponse::GetFeePayerResponse(const GetFeePayerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetFeePayerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fee_payer_) {}

    , decltype(_impl_.fee_payer_pub_key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.fee_payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_payer().empty()) {
    _this->_impl_.fee_payer_.Set(from._internal_fee_payer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fee_payer_pub_key_ = new ::injective_exchange_rpc::CosmosPubKey(*from._impl_.fee_payer_pub_key_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_exchange_rpc.GetFeePayerResponse)
}

inline void GetFeePayerResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fee_payer_) {}

    , decltype(_impl_.fee_payer_pub_key_){nullptr}
  };
  _impl_.fee_payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetFeePayerResponse::~GetFeePayerResponse() {
  // @@protoc_insertion_point(destructor:injective_exchange_rpc.GetFeePayerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetFeePayerResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fee_payer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fee_payer_pub_key_;
}

void GetFeePayerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetFeePayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_exchange_rpc.GetFeePayerResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fee_payer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fee_payer_pub_key_ != nullptr);
    _impl_.fee_payer_pub_key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetFeePayerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fee_payer = 1 [json_name = "feePayer"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fee_payer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_exchange_rpc.GetFeePayerResponse.fee_payer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_exchange_rpc.CosmosPubKey fee_payer_pub_key = 2 [json_name = "feePayerPubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_payer_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetFeePayerResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_exchange_rpc.GetFeePayerResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fee_payer = 1 [json_name = "feePayer"];
  if (!this->_internal_fee_payer().empty()) {
    const std::string& _s = this->_internal_fee_payer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_exchange_rpc.GetFeePayerResponse.fee_payer");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_exchange_rpc.CosmosPubKey fee_payer_pub_key = 2 [json_name = "feePayerPubKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fee_payer_pub_key(this),
        _Internal::fee_payer_pub_key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_exchange_rpc.GetFeePayerResponse)
  return target;
}

::size_t GetFeePayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_exchange_rpc.GetFeePayerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fee_payer = 1 [json_name = "feePayer"];
  if (!this->_internal_fee_payer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_payer());
  }

  // .injective_exchange_rpc.CosmosPubKey fee_payer_pub_key = 2 [json_name = "feePayerPubKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_payer_pub_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetFeePayerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetFeePayerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetFeePayerResponse::GetClassData() const { return &_class_data_; }


void GetFeePayerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetFeePayerResponse*>(&to_msg);
  auto& from = static_cast<const GetFeePayerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_exchange_rpc.GetFeePayerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fee_payer().empty()) {
    _this->_internal_set_fee_payer(from._internal_fee_payer());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fee_payer_pub_key()->::injective_exchange_rpc::CosmosPubKey::MergeFrom(
        from._internal_fee_payer_pub_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetFeePayerResponse::CopyFrom(const GetFeePayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_exchange_rpc.GetFeePayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeePayerResponse::IsInitialized() const {
  return true;
}

void GetFeePayerResponse::InternalSwap(GetFeePayerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_payer_, lhs_arena,
                                       &other->_impl_.fee_payer_, rhs_arena);
  swap(_impl_.fee_payer_pub_key_, other->_impl_.fee_payer_pub_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeePayerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexchange_5frpc_2eproto[14]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_exchange_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::GetTxRequest*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::GetTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::GetTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::GetTxResponse*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::GetTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::GetTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::PrepareTxRequest*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::PrepareTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::PrepareTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::CosmosTxFee*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::CosmosTxFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::CosmosTxFee >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::CosmosCoin*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::CosmosCoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::CosmosCoin >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::PrepareTxResponse*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::PrepareTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::PrepareTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::BroadcastTxRequest*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::BroadcastTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::BroadcastTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::CosmosPubKey*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::CosmosPubKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::CosmosPubKey >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::BroadcastTxResponse*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::BroadcastTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::BroadcastTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::PrepareCosmosTxRequest*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::PrepareCosmosTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::PrepareCosmosTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::PrepareCosmosTxResponse*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::PrepareCosmosTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::PrepareCosmosTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::BroadcastCosmosTxRequest*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::BroadcastCosmosTxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::BroadcastCosmosTxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::BroadcastCosmosTxResponse*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::BroadcastCosmosTxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::BroadcastCosmosTxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::GetFeePayerRequest*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::GetFeePayerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::GetFeePayerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_exchange_rpc::GetFeePayerResponse*
Arena::CreateMaybeMessage< ::injective_exchange_rpc::GetFeePayerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_exchange_rpc::GetFeePayerResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

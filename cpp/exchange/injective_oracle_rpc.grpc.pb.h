// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_oracle_rpc.proto
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveOracleRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#ifndef GRPC_exchange_2finjective_5foracle_5frpc_2eproto__INCLUDED
#define GRPC_exchange_2finjective_5foracle_5frpc_2eproto__INCLUDED

#include "exchange/injective_oracle_rpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective_oracle_rpc {

// InjectiveOracleRPC defines gRPC API of Exchange Oracle provider.
class InjectiveOracleRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "injective_oracle_rpc.InjectiveOracleRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // List all oracles
    virtual ::grpc::Status OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::injective_oracle_rpc::OracleListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::OracleListResponse>> AsyncOracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::OracleListResponse>>(AsyncOracleListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::OracleListResponse>> PrepareAsyncOracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::OracleListResponse>>(PrepareAsyncOracleListRaw(context, request, cq));
    }
    // Gets the price of the oracle
    virtual ::grpc::Status Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::injective_oracle_rpc::PriceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::PriceResponse>> AsyncPrice(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::PriceResponse>>(AsyncPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::PriceResponse>> PrepareAsyncPrice(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::PriceResponse>>(PrepareAsyncPriceRaw(context, request, cq));
    }
    // StreamPrices streams new price changes for a specified oracle. If no oracles
    // are provided, all price changes are streamed.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>> StreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>>(StreamPricesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>> AsyncStreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>>(AsyncStreamPricesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>> PrepareAsyncStreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>>(PrepareAsyncStreamPricesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // List all oracles
      virtual void OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the price of the oracle
      virtual void Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // StreamPrices streams new price changes for a specified oracle. If no oracles
      // are provided, all price changes are streamed.
      virtual void StreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest* request, ::grpc::ClientReadReactor< ::injective_oracle_rpc::StreamPricesResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::OracleListResponse>* AsyncOracleListRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::OracleListResponse>* PrepareAsyncOracleListRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::PriceResponse>* AsyncPriceRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_oracle_rpc::PriceResponse>* PrepareAsyncPriceRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>* StreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>* AsyncStreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_oracle_rpc::StreamPricesResponse>* PrepareAsyncStreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::injective_oracle_rpc::OracleListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::OracleListResponse>> AsyncOracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::OracleListResponse>>(AsyncOracleListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::OracleListResponse>> PrepareAsyncOracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::OracleListResponse>>(PrepareAsyncOracleListRaw(context, request, cq));
    }
    ::grpc::Status Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::injective_oracle_rpc::PriceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::PriceResponse>> AsyncPrice(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::PriceResponse>>(AsyncPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::PriceResponse>> PrepareAsyncPrice(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::PriceResponse>>(PrepareAsyncPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::injective_oracle_rpc::StreamPricesResponse>> StreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::injective_oracle_rpc::StreamPricesResponse>>(StreamPricesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_oracle_rpc::StreamPricesResponse>> AsyncStreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_oracle_rpc::StreamPricesResponse>>(AsyncStreamPricesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_oracle_rpc::StreamPricesResponse>> PrepareAsyncStreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_oracle_rpc::StreamPricesResponse>>(PrepareAsyncStreamPricesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response, std::function<void(::grpc::Status)>) override;
      void OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response, std::function<void(::grpc::Status)>) override;
      void Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest* request, ::grpc::ClientReadReactor< ::injective_oracle_rpc::StreamPricesResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::OracleListResponse>* AsyncOracleListRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::OracleListResponse>* PrepareAsyncOracleListRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::PriceResponse>* AsyncPriceRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::PriceResponse>* PrepareAsyncPriceRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::injective_oracle_rpc::StreamPricesResponse>* StreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request) override;
    ::grpc::ClientAsyncReader< ::injective_oracle_rpc::StreamPricesResponse>* AsyncStreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::injective_oracle_rpc::StreamPricesResponse>* PrepareAsyncStreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_OracleList_;
    const ::grpc::internal::RpcMethod rpcmethod_Price_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamPrices_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // List all oracles
    virtual ::grpc::Status OracleList(::grpc::ServerContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response);
    // Gets the price of the oracle
    virtual ::grpc::Status Price(::grpc::ServerContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response);
    // StreamPrices streams new price changes for a specified oracle. If no oracles
    // are provided, all price changes are streamed.
    virtual ::grpc::Status StreamPrices(::grpc::ServerContext* context, const ::injective_oracle_rpc::StreamPricesRequest* request, ::grpc::ServerWriter< ::injective_oracle_rpc::StreamPricesResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_OracleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OracleList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_OracleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleList(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::OracleListRequest* /*request*/, ::injective_oracle_rpc::OracleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleList(::grpc::ServerContext* context, ::injective_oracle_rpc::OracleListRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_oracle_rpc::OracleListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Price : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Price() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Price() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Price(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::PriceRequest* /*request*/, ::injective_oracle_rpc::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrice(::grpc::ServerContext* context, ::injective_oracle_rpc::PriceRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_oracle_rpc::PriceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamPrices() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPrices(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::StreamPricesRequest* /*request*/, ::grpc::ServerWriter< ::injective_oracle_rpc::StreamPricesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamPrices(::grpc::ServerContext* context, ::injective_oracle_rpc::StreamPricesRequest* request, ::grpc::ServerAsyncWriter< ::injective_oracle_rpc::StreamPricesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_OracleList<WithAsyncMethod_Price<WithAsyncMethod_StreamPrices<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_OracleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OracleList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_oracle_rpc::OracleListRequest, ::injective_oracle_rpc::OracleListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response) { return this->OracleList(context, request, response); }));}
    void SetMessageAllocatorFor_OracleList(
        ::grpc::MessageAllocator< ::injective_oracle_rpc::OracleListRequest, ::injective_oracle_rpc::OracleListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_oracle_rpc::OracleListRequest, ::injective_oracle_rpc::OracleListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OracleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleList(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::OracleListRequest* /*request*/, ::injective_oracle_rpc::OracleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleList(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_oracle_rpc::OracleListRequest* /*request*/, ::injective_oracle_rpc::OracleListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Price : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Price() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_oracle_rpc::PriceRequest, ::injective_oracle_rpc::PriceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response) { return this->Price(context, request, response); }));}
    void SetMessageAllocatorFor_Price(
        ::grpc::MessageAllocator< ::injective_oracle_rpc::PriceRequest, ::injective_oracle_rpc::PriceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_oracle_rpc::PriceRequest, ::injective_oracle_rpc::PriceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Price() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Price(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::PriceRequest* /*request*/, ::injective_oracle_rpc::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Price(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_oracle_rpc::PriceRequest* /*request*/, ::injective_oracle_rpc::PriceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamPrices() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::injective_oracle_rpc::StreamPricesRequest, ::injective_oracle_rpc::StreamPricesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_oracle_rpc::StreamPricesRequest* request) { return this->StreamPrices(context, request); }));
    }
    ~WithCallbackMethod_StreamPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPrices(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::StreamPricesRequest* /*request*/, ::grpc::ServerWriter< ::injective_oracle_rpc::StreamPricesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::injective_oracle_rpc::StreamPricesResponse>* StreamPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_oracle_rpc::StreamPricesRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_OracleList<WithCallbackMethod_Price<WithCallbackMethod_StreamPrices<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_OracleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OracleList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_OracleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleList(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::OracleListRequest* /*request*/, ::injective_oracle_rpc::OracleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Price : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Price() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Price() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Price(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::PriceRequest* /*request*/, ::injective_oracle_rpc::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamPrices() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPrices(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::StreamPricesRequest* /*request*/, ::grpc::ServerWriter< ::injective_oracle_rpc::StreamPricesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_OracleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OracleList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_OracleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleList(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::OracleListRequest* /*request*/, ::injective_oracle_rpc::OracleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOracleList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Price : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Price() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Price() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Price(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::PriceRequest* /*request*/, ::injective_oracle_rpc::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamPrices() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPrices(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::StreamPricesRequest* /*request*/, ::grpc::ServerWriter< ::injective_oracle_rpc::StreamPricesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamPrices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OracleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OracleList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OracleList(context, request, response); }));
    }
    ~WithRawCallbackMethod_OracleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OracleList(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::OracleListRequest* /*request*/, ::injective_oracle_rpc::OracleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OracleList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Price : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Price() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Price(context, request, response); }));
    }
    ~WithRawCallbackMethod_Price() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Price(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::PriceRequest* /*request*/, ::injective_oracle_rpc::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Price(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamPrices() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamPrices(context, request); }));
    }
    ~WithRawCallbackMethod_StreamPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPrices(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::StreamPricesRequest* /*request*/, ::grpc::ServerWriter< ::injective_oracle_rpc::StreamPricesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamPrices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OracleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OracleList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_oracle_rpc::OracleListRequest, ::injective_oracle_rpc::OracleListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_oracle_rpc::OracleListRequest, ::injective_oracle_rpc::OracleListResponse>* streamer) {
                       return this->StreamedOracleList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OracleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OracleList(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::OracleListRequest* /*request*/, ::injective_oracle_rpc::OracleListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOracleList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_oracle_rpc::OracleListRequest,::injective_oracle_rpc::OracleListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Price : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Price() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_oracle_rpc::PriceRequest, ::injective_oracle_rpc::PriceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_oracle_rpc::PriceRequest, ::injective_oracle_rpc::PriceResponse>* streamer) {
                       return this->StreamedPrice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Price() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Price(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::PriceRequest* /*request*/, ::injective_oracle_rpc::PriceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_oracle_rpc::PriceRequest,::injective_oracle_rpc::PriceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_OracleList<WithStreamedUnaryMethod_Price<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamPrices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamPrices() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::injective_oracle_rpc::StreamPricesRequest, ::injective_oracle_rpc::StreamPricesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::injective_oracle_rpc::StreamPricesRequest, ::injective_oracle_rpc::StreamPricesResponse>* streamer) {
                       return this->StreamedStreamPrices(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamPrices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamPrices(::grpc::ServerContext* /*context*/, const ::injective_oracle_rpc::StreamPricesRequest* /*request*/, ::grpc::ServerWriter< ::injective_oracle_rpc::StreamPricesResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamPrices(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::injective_oracle_rpc::StreamPricesRequest,::injective_oracle_rpc::StreamPricesResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamPrices<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_OracleList<WithStreamedUnaryMethod_Price<WithSplitStreamingMethod_StreamPrices<Service > > > StreamedService;
};

}  // namespace injective_oracle_rpc


#endif  // GRPC_exchange_2finjective_5foracle_5frpc_2eproto__INCLUDED

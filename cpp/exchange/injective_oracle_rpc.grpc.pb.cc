// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_oracle_rpc.proto

#include "exchange/injective_oracle_rpc.pb.h"
#include "exchange/injective_oracle_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective_oracle_rpc {

static const char* InjectiveOracleRPC_method_names[] = {
  "/injective_oracle_rpc.InjectiveOracleRPC/OracleList",
  "/injective_oracle_rpc.InjectiveOracleRPC/Price",
  "/injective_oracle_rpc.InjectiveOracleRPC/StreamPrices",
};

std::unique_ptr< InjectiveOracleRPC::Stub> InjectiveOracleRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InjectiveOracleRPC::Stub> stub(new InjectiveOracleRPC::Stub(channel, options));
  return stub;
}

InjectiveOracleRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_OracleList_(InjectiveOracleRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Price_(InjectiveOracleRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamPrices_(InjectiveOracleRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status InjectiveOracleRPC::Stub::OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::injective_oracle_rpc::OracleListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_oracle_rpc::OracleListRequest, ::injective_oracle_rpc::OracleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OracleList_, context, request, response);
}

void InjectiveOracleRPC::Stub::async::OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_oracle_rpc::OracleListRequest, ::injective_oracle_rpc::OracleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleList_, context, request, response, std::move(f));
}

void InjectiveOracleRPC::Stub::async::OracleList(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OracleList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::OracleListResponse>* InjectiveOracleRPC::Stub::PrepareAsyncOracleListRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_oracle_rpc::OracleListResponse, ::injective_oracle_rpc::OracleListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OracleList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::OracleListResponse>* InjectiveOracleRPC::Stub::AsyncOracleListRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::OracleListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOracleListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveOracleRPC::Stub::Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::injective_oracle_rpc::PriceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_oracle_rpc::PriceRequest, ::injective_oracle_rpc::PriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Price_, context, request, response);
}

void InjectiveOracleRPC::Stub::async::Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_oracle_rpc::PriceRequest, ::injective_oracle_rpc::PriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Price_, context, request, response, std::move(f));
}

void InjectiveOracleRPC::Stub::async::Price(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Price_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::PriceResponse>* InjectiveOracleRPC::Stub::PrepareAsyncPriceRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_oracle_rpc::PriceResponse, ::injective_oracle_rpc::PriceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Price_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_oracle_rpc::PriceResponse>* InjectiveOracleRPC::Stub::AsyncPriceRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::PriceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPriceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_oracle_rpc::StreamPricesResponse>* InjectiveOracleRPC::Stub::StreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_oracle_rpc::StreamPricesResponse>::Create(channel_.get(), rpcmethod_StreamPrices_, context, request);
}

void InjectiveOracleRPC::Stub::async::StreamPrices(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest* request, ::grpc::ClientReadReactor< ::injective_oracle_rpc::StreamPricesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_oracle_rpc::StreamPricesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamPrices_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_oracle_rpc::StreamPricesResponse>* InjectiveOracleRPC::Stub::AsyncStreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_oracle_rpc::StreamPricesResponse>::Create(channel_.get(), cq, rpcmethod_StreamPrices_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_oracle_rpc::StreamPricesResponse>* InjectiveOracleRPC::Stub::PrepareAsyncStreamPricesRaw(::grpc::ClientContext* context, const ::injective_oracle_rpc::StreamPricesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_oracle_rpc::StreamPricesResponse>::Create(channel_.get(), cq, rpcmethod_StreamPrices_, context, request, false, nullptr);
}

InjectiveOracleRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveOracleRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveOracleRPC::Service, ::injective_oracle_rpc::OracleListRequest, ::injective_oracle_rpc::OracleListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveOracleRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_oracle_rpc::OracleListRequest* req,
             ::injective_oracle_rpc::OracleListResponse* resp) {
               return service->OracleList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveOracleRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveOracleRPC::Service, ::injective_oracle_rpc::PriceRequest, ::injective_oracle_rpc::PriceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveOracleRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_oracle_rpc::PriceRequest* req,
             ::injective_oracle_rpc::PriceResponse* resp) {
               return service->Price(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveOracleRPC_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveOracleRPC::Service, ::injective_oracle_rpc::StreamPricesRequest, ::injective_oracle_rpc::StreamPricesResponse>(
          [](InjectiveOracleRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_oracle_rpc::StreamPricesRequest* req,
             ::grpc::ServerWriter<::injective_oracle_rpc::StreamPricesResponse>* writer) {
               return service->StreamPrices(ctx, req, writer);
             }, this)));
}

InjectiveOracleRPC::Service::~Service() {
}

::grpc::Status InjectiveOracleRPC::Service::OracleList(::grpc::ServerContext* context, const ::injective_oracle_rpc::OracleListRequest* request, ::injective_oracle_rpc::OracleListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveOracleRPC::Service::Price(::grpc::ServerContext* context, const ::injective_oracle_rpc::PriceRequest* request, ::injective_oracle_rpc::PriceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveOracleRPC::Service::StreamPrices(::grpc::ServerContext* context, const ::injective_oracle_rpc::StreamPricesRequest* request, ::grpc::ServerWriter< ::injective_oracle_rpc::StreamPricesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective_oracle_rpc


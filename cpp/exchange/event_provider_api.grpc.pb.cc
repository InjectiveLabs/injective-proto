// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/event_provider_api.proto

#include "exchange/event_provider_api.pb.h"
#include "exchange/event_provider_api.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace event_provider_api {

static const char* EventProviderAPI_method_names[] = {
  "/event_provider_api.EventProviderAPI/GetLatestHeight",
  "/event_provider_api.EventProviderAPI/GetBlockEventsRPC",
  "/event_provider_api.EventProviderAPI/GetCustomEventsRPC",
};

std::unique_ptr< EventProviderAPI::Stub> EventProviderAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EventProviderAPI::Stub> stub(new EventProviderAPI::Stub(channel, options));
  return stub;
}

EventProviderAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetLatestHeight_(EventProviderAPI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockEventsRPC_(EventProviderAPI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCustomEventsRPC_(EventProviderAPI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EventProviderAPI::Stub::GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::event_provider_api::GetLatestHeightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::event_provider_api::GetLatestHeightRequest, ::event_provider_api::GetLatestHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLatestHeight_, context, request, response);
}

void EventProviderAPI::Stub::async::GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::event_provider_api::GetLatestHeightRequest, ::event_provider_api::GetLatestHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestHeight_, context, request, response, std::move(f));
}

void EventProviderAPI::Stub::async::GetLatestHeight(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLatestHeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_provider_api::GetLatestHeightResponse>* EventProviderAPI::Stub::PrepareAsyncGetLatestHeightRaw(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::event_provider_api::GetLatestHeightResponse, ::event_provider_api::GetLatestHeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLatestHeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::event_provider_api::GetLatestHeightResponse>* EventProviderAPI::Stub::AsyncGetLatestHeightRaw(::grpc::ClientContext* context, const ::event_provider_api::GetLatestHeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLatestHeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventProviderAPI::Stub::GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::event_provider_api::GetBlockEventsRPCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::event_provider_api::GetBlockEventsRPCRequest, ::event_provider_api::GetBlockEventsRPCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockEventsRPC_, context, request, response);
}

void EventProviderAPI::Stub::async::GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::event_provider_api::GetBlockEventsRPCRequest, ::event_provider_api::GetBlockEventsRPCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockEventsRPC_, context, request, response, std::move(f));
}

void EventProviderAPI::Stub::async::GetBlockEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockEventsRPC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_provider_api::GetBlockEventsRPCResponse>* EventProviderAPI::Stub::PrepareAsyncGetBlockEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::event_provider_api::GetBlockEventsRPCResponse, ::event_provider_api::GetBlockEventsRPCRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockEventsRPC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::event_provider_api::GetBlockEventsRPCResponse>* EventProviderAPI::Stub::AsyncGetBlockEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetBlockEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockEventsRPCRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventProviderAPI::Stub::GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::event_provider_api::GetCustomEventsRPCResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::event_provider_api::GetCustomEventsRPCRequest, ::event_provider_api::GetCustomEventsRPCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCustomEventsRPC_, context, request, response);
}

void EventProviderAPI::Stub::async::GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::event_provider_api::GetCustomEventsRPCRequest, ::event_provider_api::GetCustomEventsRPCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCustomEventsRPC_, context, request, response, std::move(f));
}

void EventProviderAPI::Stub::async::GetCustomEventsRPC(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCustomEventsRPC_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::event_provider_api::GetCustomEventsRPCResponse>* EventProviderAPI::Stub::PrepareAsyncGetCustomEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::event_provider_api::GetCustomEventsRPCResponse, ::event_provider_api::GetCustomEventsRPCRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCustomEventsRPC_, context, request);
}

::grpc::ClientAsyncResponseReader< ::event_provider_api::GetCustomEventsRPCResponse>* EventProviderAPI::Stub::AsyncGetCustomEventsRPCRaw(::grpc::ClientContext* context, const ::event_provider_api::GetCustomEventsRPCRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCustomEventsRPCRaw(context, request, cq);
  result->StartCall();
  return result;
}

EventProviderAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventProviderAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventProviderAPI::Service, ::event_provider_api::GetLatestHeightRequest, ::event_provider_api::GetLatestHeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventProviderAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::event_provider_api::GetLatestHeightRequest* req,
             ::event_provider_api::GetLatestHeightResponse* resp) {
               return service->GetLatestHeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventProviderAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventProviderAPI::Service, ::event_provider_api::GetBlockEventsRPCRequest, ::event_provider_api::GetBlockEventsRPCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventProviderAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::event_provider_api::GetBlockEventsRPCRequest* req,
             ::event_provider_api::GetBlockEventsRPCResponse* resp) {
               return service->GetBlockEventsRPC(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventProviderAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventProviderAPI::Service, ::event_provider_api::GetCustomEventsRPCRequest, ::event_provider_api::GetCustomEventsRPCResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventProviderAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::event_provider_api::GetCustomEventsRPCRequest* req,
             ::event_provider_api::GetCustomEventsRPCResponse* resp) {
               return service->GetCustomEventsRPC(ctx, req, resp);
             }, this)));
}

EventProviderAPI::Service::~Service() {
}

::grpc::Status EventProviderAPI::Service::GetLatestHeight(::grpc::ServerContext* context, const ::event_provider_api::GetLatestHeightRequest* request, ::event_provider_api::GetLatestHeightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventProviderAPI::Service::GetBlockEventsRPC(::grpc::ServerContext* context, const ::event_provider_api::GetBlockEventsRPCRequest* request, ::event_provider_api::GetBlockEventsRPCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventProviderAPI::Service::GetCustomEventsRPC(::grpc::ServerContext* context, const ::event_provider_api::GetCustomEventsRPCRequest* request, ::event_provider_api::GetCustomEventsRPCResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace event_provider_api


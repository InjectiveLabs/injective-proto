// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_insurance_rpc.proto

#include "exchange/injective_insurance_rpc.pb.h"
#include "exchange/injective_insurance_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective_insurance_rpc {

static const char* InjectiveInsuranceRPC_method_names[] = {
  "/injective_insurance_rpc.InjectiveInsuranceRPC/Funds",
  "/injective_insurance_rpc.InjectiveInsuranceRPC/Redemptions",
};

std::unique_ptr< InjectiveInsuranceRPC::Stub> InjectiveInsuranceRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InjectiveInsuranceRPC::Stub> stub(new InjectiveInsuranceRPC::Stub(channel, options));
  return stub;
}

InjectiveInsuranceRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Funds_(InjectiveInsuranceRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Redemptions_(InjectiveInsuranceRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InjectiveInsuranceRPC::Stub::Funds(::grpc::ClientContext* context, const ::injective_insurance_rpc::FundsRequest& request, ::injective_insurance_rpc::FundsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_insurance_rpc::FundsRequest, ::injective_insurance_rpc::FundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Funds_, context, request, response);
}

void InjectiveInsuranceRPC::Stub::async::Funds(::grpc::ClientContext* context, const ::injective_insurance_rpc::FundsRequest* request, ::injective_insurance_rpc::FundsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_insurance_rpc::FundsRequest, ::injective_insurance_rpc::FundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Funds_, context, request, response, std::move(f));
}

void InjectiveInsuranceRPC::Stub::async::Funds(::grpc::ClientContext* context, const ::injective_insurance_rpc::FundsRequest* request, ::injective_insurance_rpc::FundsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Funds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_insurance_rpc::FundsResponse>* InjectiveInsuranceRPC::Stub::PrepareAsyncFundsRaw(::grpc::ClientContext* context, const ::injective_insurance_rpc::FundsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_insurance_rpc::FundsResponse, ::injective_insurance_rpc::FundsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Funds_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_insurance_rpc::FundsResponse>* InjectiveInsuranceRPC::Stub::AsyncFundsRaw(::grpc::ClientContext* context, const ::injective_insurance_rpc::FundsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFundsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveInsuranceRPC::Stub::Redemptions(::grpc::ClientContext* context, const ::injective_insurance_rpc::RedemptionsRequest& request, ::injective_insurance_rpc::RedemptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_insurance_rpc::RedemptionsRequest, ::injective_insurance_rpc::RedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Redemptions_, context, request, response);
}

void InjectiveInsuranceRPC::Stub::async::Redemptions(::grpc::ClientContext* context, const ::injective_insurance_rpc::RedemptionsRequest* request, ::injective_insurance_rpc::RedemptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_insurance_rpc::RedemptionsRequest, ::injective_insurance_rpc::RedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Redemptions_, context, request, response, std::move(f));
}

void InjectiveInsuranceRPC::Stub::async::Redemptions(::grpc::ClientContext* context, const ::injective_insurance_rpc::RedemptionsRequest* request, ::injective_insurance_rpc::RedemptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Redemptions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_insurance_rpc::RedemptionsResponse>* InjectiveInsuranceRPC::Stub::PrepareAsyncRedemptionsRaw(::grpc::ClientContext* context, const ::injective_insurance_rpc::RedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_insurance_rpc::RedemptionsResponse, ::injective_insurance_rpc::RedemptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Redemptions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_insurance_rpc::RedemptionsResponse>* InjectiveInsuranceRPC::Stub::AsyncRedemptionsRaw(::grpc::ClientContext* context, const ::injective_insurance_rpc::RedemptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRedemptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

InjectiveInsuranceRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveInsuranceRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveInsuranceRPC::Service, ::injective_insurance_rpc::FundsRequest, ::injective_insurance_rpc::FundsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveInsuranceRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_insurance_rpc::FundsRequest* req,
             ::injective_insurance_rpc::FundsResponse* resp) {
               return service->Funds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveInsuranceRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveInsuranceRPC::Service, ::injective_insurance_rpc::RedemptionsRequest, ::injective_insurance_rpc::RedemptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveInsuranceRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_insurance_rpc::RedemptionsRequest* req,
             ::injective_insurance_rpc::RedemptionsResponse* resp) {
               return service->Redemptions(ctx, req, resp);
             }, this)));
}

InjectiveInsuranceRPC::Service::~Service() {
}

::grpc::Status InjectiveInsuranceRPC::Service::Funds(::grpc::ServerContext* context, const ::injective_insurance_rpc::FundsRequest* request, ::injective_insurance_rpc::FundsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveInsuranceRPC::Service::Redemptions(::grpc::ServerContext* context, const ::injective_insurance_rpc::RedemptionsRequest* request, ::injective_insurance_rpc::RedemptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective_insurance_rpc


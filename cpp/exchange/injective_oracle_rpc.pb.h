// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_oracle_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_exchange_2finjective_5foracle_5frpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_exchange_2finjective_5foracle_5frpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_exchange_2finjective_5foracle_5frpc_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_exchange_2finjective_5foracle_5frpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_exchange_2finjective_5foracle_5frpc_2eproto;
namespace injective_oracle_rpc {
class Oracle;
struct OracleDefaultTypeInternal;
extern OracleDefaultTypeInternal _Oracle_default_instance_;
class OracleListRequest;
struct OracleListRequestDefaultTypeInternal;
extern OracleListRequestDefaultTypeInternal _OracleListRequest_default_instance_;
class OracleListResponse;
struct OracleListResponseDefaultTypeInternal;
extern OracleListResponseDefaultTypeInternal _OracleListResponse_default_instance_;
class PriceRequest;
struct PriceRequestDefaultTypeInternal;
extern PriceRequestDefaultTypeInternal _PriceRequest_default_instance_;
class PriceResponse;
struct PriceResponseDefaultTypeInternal;
extern PriceResponseDefaultTypeInternal _PriceResponse_default_instance_;
class StreamPricesRequest;
struct StreamPricesRequestDefaultTypeInternal;
extern StreamPricesRequestDefaultTypeInternal _StreamPricesRequest_default_instance_;
class StreamPricesResponse;
struct StreamPricesResponseDefaultTypeInternal;
extern StreamPricesResponseDefaultTypeInternal _StreamPricesResponse_default_instance_;
}  // namespace injective_oracle_rpc
PROTOBUF_NAMESPACE_OPEN
template <>
::injective_oracle_rpc::Oracle* Arena::CreateMaybeMessage<::injective_oracle_rpc::Oracle>(Arena*);
template <>
::injective_oracle_rpc::OracleListRequest* Arena::CreateMaybeMessage<::injective_oracle_rpc::OracleListRequest>(Arena*);
template <>
::injective_oracle_rpc::OracleListResponse* Arena::CreateMaybeMessage<::injective_oracle_rpc::OracleListResponse>(Arena*);
template <>
::injective_oracle_rpc::PriceRequest* Arena::CreateMaybeMessage<::injective_oracle_rpc::PriceRequest>(Arena*);
template <>
::injective_oracle_rpc::PriceResponse* Arena::CreateMaybeMessage<::injective_oracle_rpc::PriceResponse>(Arena*);
template <>
::injective_oracle_rpc::StreamPricesRequest* Arena::CreateMaybeMessage<::injective_oracle_rpc::StreamPricesRequest>(Arena*);
template <>
::injective_oracle_rpc::StreamPricesResponse* Arena::CreateMaybeMessage<::injective_oracle_rpc::StreamPricesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective_oracle_rpc {

// ===================================================================


// -------------------------------------------------------------------

class OracleListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:injective_oracle_rpc.OracleListRequest) */ {
 public:
  inline OracleListRequest() : OracleListRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OracleListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OracleListRequest(const OracleListRequest& from);
  OracleListRequest(OracleListRequest&& from) noexcept
    : OracleListRequest() {
    *this = ::std::move(from);
  }

  inline OracleListRequest& operator=(const OracleListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleListRequest& operator=(OracleListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OracleListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OracleListRequest* internal_default_instance() {
    return reinterpret_cast<const OracleListRequest*>(
               &_OracleListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OracleListRequest& a, OracleListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OracleListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OracleListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OracleListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OracleListRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_oracle_rpc.OracleListRequest";
  }
  protected:
  explicit OracleListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:injective_oracle_rpc.OracleListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_exchange_2finjective_5foracle_5frpc_2eproto;
};// -------------------------------------------------------------------

class OracleListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_oracle_rpc.OracleListResponse) */ {
 public:
  inline OracleListResponse() : OracleListResponse(nullptr) {}
  ~OracleListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OracleListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OracleListResponse(const OracleListResponse& from);
  OracleListResponse(OracleListResponse&& from) noexcept
    : OracleListResponse() {
    *this = ::std::move(from);
  }

  inline OracleListResponse& operator=(const OracleListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OracleListResponse& operator=(OracleListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OracleListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OracleListResponse* internal_default_instance() {
    return reinterpret_cast<const OracleListResponse*>(
               &_OracleListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OracleListResponse& a, OracleListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OracleListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OracleListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OracleListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OracleListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OracleListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OracleListResponse& from) {
    OracleListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OracleListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_oracle_rpc.OracleListResponse";
  }
  protected:
  explicit OracleListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOraclesFieldNumber = 1,
  };
  // repeated .injective_oracle_rpc.Oracle oracles = 1 [json_name = "oracles"];
  int oracles_size() const;
  private:
  int _internal_oracles_size() const;

  public:
  void clear_oracles() ;
  ::injective_oracle_rpc::Oracle* mutable_oracles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_oracle_rpc::Oracle >*
      mutable_oracles();
  private:
  const ::injective_oracle_rpc::Oracle& _internal_oracles(int index) const;
  ::injective_oracle_rpc::Oracle* _internal_add_oracles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_oracle_rpc::Oracle>& _internal_oracles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_oracle_rpc::Oracle>* _internal_mutable_oracles();
  public:
  const ::injective_oracle_rpc::Oracle& oracles(int index) const;
  ::injective_oracle_rpc::Oracle* add_oracles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_oracle_rpc::Oracle >&
      oracles() const;
  // @@protoc_insertion_point(class_scope:injective_oracle_rpc.OracleListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_oracle_rpc::Oracle > oracles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5foracle_5frpc_2eproto;
};// -------------------------------------------------------------------

class Oracle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_oracle_rpc.Oracle) */ {
 public:
  inline Oracle() : Oracle(nullptr) {}
  ~Oracle() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Oracle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Oracle(const Oracle& from);
  Oracle(Oracle&& from) noexcept
    : Oracle() {
    *this = ::std::move(from);
  }

  inline Oracle& operator=(const Oracle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oracle& operator=(Oracle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Oracle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Oracle* internal_default_instance() {
    return reinterpret_cast<const Oracle*>(
               &_Oracle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Oracle& a, Oracle& b) {
    a.Swap(&b);
  }
  inline void Swap(Oracle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oracle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Oracle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Oracle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Oracle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Oracle& from) {
    Oracle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oracle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_oracle_rpc.Oracle";
  }
  protected:
  explicit Oracle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 1,
    kBaseSymbolFieldNumber = 2,
    kQuoteSymbolFieldNumber = 3,
    kOracleTypeFieldNumber = 4,
    kPriceFieldNumber = 5,
  };
  // string symbol = 1 [json_name = "symbol"];
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string base_symbol = 2 [json_name = "baseSymbol"];
  void clear_base_symbol() ;
  const std::string& base_symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_base_symbol();
  PROTOBUF_NODISCARD std::string* release_base_symbol();
  void set_allocated_base_symbol(std::string* ptr);

  private:
  const std::string& _internal_base_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_symbol(
      const std::string& value);
  std::string* _internal_mutable_base_symbol();

  public:
  // string quote_symbol = 3 [json_name = "quoteSymbol"];
  void clear_quote_symbol() ;
  const std::string& quote_symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_quote_symbol();
  PROTOBUF_NODISCARD std::string* release_quote_symbol();
  void set_allocated_quote_symbol(std::string* ptr);

  private:
  const std::string& _internal_quote_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_symbol(
      const std::string& value);
  std::string* _internal_mutable_quote_symbol();

  public:
  // string oracle_type = 4 [json_name = "oracleType"];
  void clear_oracle_type() ;
  const std::string& oracle_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oracle_type(Arg_&& arg, Args_... args);
  std::string* mutable_oracle_type();
  PROTOBUF_NODISCARD std::string* release_oracle_type();
  void set_allocated_oracle_type(std::string* ptr);

  private:
  const std::string& _internal_oracle_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oracle_type(
      const std::string& value);
  std::string* _internal_mutable_oracle_type();

  public:
  // string price = 5 [json_name = "price"];
  void clear_price() ;
  const std::string& price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* ptr);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // @@protoc_insertion_point(class_scope:injective_oracle_rpc.Oracle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oracle_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5foracle_5frpc_2eproto;
};// -------------------------------------------------------------------

class PriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_oracle_rpc.PriceRequest) */ {
 public:
  inline PriceRequest() : PriceRequest(nullptr) {}
  ~PriceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriceRequest(const PriceRequest& from);
  PriceRequest(PriceRequest&& from) noexcept
    : PriceRequest() {
    *this = ::std::move(from);
  }

  inline PriceRequest& operator=(const PriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceRequest& operator=(PriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceRequest* internal_default_instance() {
    return reinterpret_cast<const PriceRequest*>(
               &_PriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PriceRequest& a, PriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PriceRequest& from) {
    PriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_oracle_rpc.PriceRequest";
  }
  protected:
  explicit PriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseSymbolFieldNumber = 1,
    kQuoteSymbolFieldNumber = 2,
    kOracleTypeFieldNumber = 3,
    kOracleScaleFactorFieldNumber = 4,
  };
  // string base_symbol = 1 [json_name = "baseSymbol"];
  void clear_base_symbol() ;
  const std::string& base_symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_base_symbol();
  PROTOBUF_NODISCARD std::string* release_base_symbol();
  void set_allocated_base_symbol(std::string* ptr);

  private:
  const std::string& _internal_base_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_symbol(
      const std::string& value);
  std::string* _internal_mutable_base_symbol();

  public:
  // string quote_symbol = 2 [json_name = "quoteSymbol"];
  void clear_quote_symbol() ;
  const std::string& quote_symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_quote_symbol();
  PROTOBUF_NODISCARD std::string* release_quote_symbol();
  void set_allocated_quote_symbol(std::string* ptr);

  private:
  const std::string& _internal_quote_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_symbol(
      const std::string& value);
  std::string* _internal_mutable_quote_symbol();

  public:
  // string oracle_type = 3 [json_name = "oracleType"];
  void clear_oracle_type() ;
  const std::string& oracle_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oracle_type(Arg_&& arg, Args_... args);
  std::string* mutable_oracle_type();
  PROTOBUF_NODISCARD std::string* release_oracle_type();
  void set_allocated_oracle_type(std::string* ptr);

  private:
  const std::string& _internal_oracle_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oracle_type(
      const std::string& value);
  std::string* _internal_mutable_oracle_type();

  public:
  // uint32 oracle_scale_factor = 4 [json_name = "oracleScaleFactor"];
  void clear_oracle_scale_factor() ;
  ::uint32_t oracle_scale_factor() const;
  void set_oracle_scale_factor(::uint32_t value);

  private:
  ::uint32_t _internal_oracle_scale_factor() const;
  void _internal_set_oracle_scale_factor(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective_oracle_rpc.PriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oracle_type_;
    ::uint32_t oracle_scale_factor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5foracle_5frpc_2eproto;
};// -------------------------------------------------------------------

class PriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_oracle_rpc.PriceResponse) */ {
 public:
  inline PriceResponse() : PriceResponse(nullptr) {}
  ~PriceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PriceResponse(const PriceResponse& from);
  PriceResponse(PriceResponse&& from) noexcept
    : PriceResponse() {
    *this = ::std::move(from);
  }

  inline PriceResponse& operator=(const PriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceResponse& operator=(PriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceResponse* internal_default_instance() {
    return reinterpret_cast<const PriceResponse*>(
               &_PriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PriceResponse& a, PriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PriceResponse& from) {
    PriceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_oracle_rpc.PriceResponse";
  }
  protected:
  explicit PriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
  };
  // string price = 1 [json_name = "price"];
  void clear_price() ;
  const std::string& price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* ptr);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // @@protoc_insertion_point(class_scope:injective_oracle_rpc.PriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5foracle_5frpc_2eproto;
};// -------------------------------------------------------------------

class StreamPricesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_oracle_rpc.StreamPricesRequest) */ {
 public:
  inline StreamPricesRequest() : StreamPricesRequest(nullptr) {}
  ~StreamPricesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamPricesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamPricesRequest(const StreamPricesRequest& from);
  StreamPricesRequest(StreamPricesRequest&& from) noexcept
    : StreamPricesRequest() {
    *this = ::std::move(from);
  }

  inline StreamPricesRequest& operator=(const StreamPricesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPricesRequest& operator=(StreamPricesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPricesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamPricesRequest* internal_default_instance() {
    return reinterpret_cast<const StreamPricesRequest*>(
               &_StreamPricesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamPricesRequest& a, StreamPricesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPricesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPricesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPricesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamPricesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamPricesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamPricesRequest& from) {
    StreamPricesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPricesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_oracle_rpc.StreamPricesRequest";
  }
  protected:
  explicit StreamPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseSymbolFieldNumber = 1,
    kQuoteSymbolFieldNumber = 2,
    kOracleTypeFieldNumber = 3,
  };
  // string base_symbol = 1 [json_name = "baseSymbol"];
  void clear_base_symbol() ;
  const std::string& base_symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_base_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_base_symbol();
  PROTOBUF_NODISCARD std::string* release_base_symbol();
  void set_allocated_base_symbol(std::string* ptr);

  private:
  const std::string& _internal_base_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_base_symbol(
      const std::string& value);
  std::string* _internal_mutable_base_symbol();

  public:
  // string quote_symbol = 2 [json_name = "quoteSymbol"];
  void clear_quote_symbol() ;
  const std::string& quote_symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quote_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_quote_symbol();
  PROTOBUF_NODISCARD std::string* release_quote_symbol();
  void set_allocated_quote_symbol(std::string* ptr);

  private:
  const std::string& _internal_quote_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quote_symbol(
      const std::string& value);
  std::string* _internal_mutable_quote_symbol();

  public:
  // string oracle_type = 3 [json_name = "oracleType"];
  void clear_oracle_type() ;
  const std::string& oracle_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oracle_type(Arg_&& arg, Args_... args);
  std::string* mutable_oracle_type();
  PROTOBUF_NODISCARD std::string* release_oracle_type();
  void set_allocated_oracle_type(std::string* ptr);

  private:
  const std::string& _internal_oracle_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oracle_type(
      const std::string& value);
  std::string* _internal_mutable_oracle_type();

  public:
  // @@protoc_insertion_point(class_scope:injective_oracle_rpc.StreamPricesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quote_symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oracle_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5foracle_5frpc_2eproto;
};// -------------------------------------------------------------------

class StreamPricesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_oracle_rpc.StreamPricesResponse) */ {
 public:
  inline StreamPricesResponse() : StreamPricesResponse(nullptr) {}
  ~StreamPricesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamPricesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamPricesResponse(const StreamPricesResponse& from);
  StreamPricesResponse(StreamPricesResponse&& from) noexcept
    : StreamPricesResponse() {
    *this = ::std::move(from);
  }

  inline StreamPricesResponse& operator=(const StreamPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPricesResponse& operator=(StreamPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamPricesResponse* internal_default_instance() {
    return reinterpret_cast<const StreamPricesResponse*>(
               &_StreamPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StreamPricesResponse& a, StreamPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPricesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPricesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamPricesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamPricesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamPricesResponse& from) {
    StreamPricesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPricesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_oracle_rpc.StreamPricesResponse";
  }
  protected:
  explicit StreamPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // string price = 1 [json_name = "price"];
  void clear_price() ;
  const std::string& price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* ptr);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // sint64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:injective_oracle_rpc.StreamPricesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    ::int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5foracle_5frpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OracleListRequest

// -------------------------------------------------------------------

// OracleListResponse

// repeated .injective_oracle_rpc.Oracle oracles = 1 [json_name = "oracles"];
inline int OracleListResponse::_internal_oracles_size() const {
  return _impl_.oracles_.size();
}
inline int OracleListResponse::oracles_size() const {
  return _internal_oracles_size();
}
inline void OracleListResponse::clear_oracles() {
  _internal_mutable_oracles()->Clear();
}
inline ::injective_oracle_rpc::Oracle* OracleListResponse::mutable_oracles(int index) {
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.OracleListResponse.oracles)
  return _internal_mutable_oracles()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_oracle_rpc::Oracle >*
OracleListResponse::mutable_oracles() {
  // @@protoc_insertion_point(field_mutable_list:injective_oracle_rpc.OracleListResponse.oracles)
  return _internal_mutable_oracles();
}
inline const ::injective_oracle_rpc::Oracle& OracleListResponse::_internal_oracles(int index) const {
  return _internal_oracles().Get(index);
}
inline const ::injective_oracle_rpc::Oracle& OracleListResponse::oracles(int index) const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.OracleListResponse.oracles)
  return _internal_oracles(index);
}
inline ::injective_oracle_rpc::Oracle* OracleListResponse::_internal_add_oracles() {
  return _internal_mutable_oracles()->Add();
}
inline ::injective_oracle_rpc::Oracle* OracleListResponse::add_oracles() {
  ::injective_oracle_rpc::Oracle* _add = _internal_add_oracles();
  // @@protoc_insertion_point(field_add:injective_oracle_rpc.OracleListResponse.oracles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_oracle_rpc::Oracle >&
OracleListResponse::oracles() const {
  // @@protoc_insertion_point(field_list:injective_oracle_rpc.OracleListResponse.oracles)
  return _internal_oracles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_oracle_rpc::Oracle>&
OracleListResponse::_internal_oracles() const {
  return _impl_.oracles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_oracle_rpc::Oracle>*
OracleListResponse::_internal_mutable_oracles() {
  return &_impl_.oracles_;
}

// -------------------------------------------------------------------

// Oracle

// string symbol = 1 [json_name = "symbol"];
inline void Oracle::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Oracle::symbol() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.Oracle.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oracle::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.Oracle.symbol)
}
inline std::string* Oracle::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.Oracle.symbol)
  return _s;
}
inline const std::string& Oracle::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void Oracle::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* Oracle::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* Oracle::release_symbol() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.Oracle.symbol)
  return _impl_.symbol_.Release();
}
inline void Oracle::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.Oracle.symbol)
}

// string base_symbol = 2 [json_name = "baseSymbol"];
inline void Oracle::clear_base_symbol() {
  _impl_.base_symbol_.ClearToEmpty();
}
inline const std::string& Oracle::base_symbol() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.Oracle.base_symbol)
  return _internal_base_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oracle::set_base_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.Oracle.base_symbol)
}
inline std::string* Oracle::mutable_base_symbol() {
  std::string* _s = _internal_mutable_base_symbol();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.Oracle.base_symbol)
  return _s;
}
inline const std::string& Oracle::_internal_base_symbol() const {
  return _impl_.base_symbol_.Get();
}
inline void Oracle::_internal_set_base_symbol(const std::string& value) {
  ;


  _impl_.base_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* Oracle::_internal_mutable_base_symbol() {
  ;
  return _impl_.base_symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* Oracle::release_base_symbol() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.Oracle.base_symbol)
  return _impl_.base_symbol_.Release();
}
inline void Oracle::set_allocated_base_symbol(std::string* value) {
  _impl_.base_symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_symbol_.IsDefault()) {
          _impl_.base_symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.Oracle.base_symbol)
}

// string quote_symbol = 3 [json_name = "quoteSymbol"];
inline void Oracle::clear_quote_symbol() {
  _impl_.quote_symbol_.ClearToEmpty();
}
inline const std::string& Oracle::quote_symbol() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.Oracle.quote_symbol)
  return _internal_quote_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oracle::set_quote_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.Oracle.quote_symbol)
}
inline std::string* Oracle::mutable_quote_symbol() {
  std::string* _s = _internal_mutable_quote_symbol();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.Oracle.quote_symbol)
  return _s;
}
inline const std::string& Oracle::_internal_quote_symbol() const {
  return _impl_.quote_symbol_.Get();
}
inline void Oracle::_internal_set_quote_symbol(const std::string& value) {
  ;


  _impl_.quote_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* Oracle::_internal_mutable_quote_symbol() {
  ;
  return _impl_.quote_symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* Oracle::release_quote_symbol() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.Oracle.quote_symbol)
  return _impl_.quote_symbol_.Release();
}
inline void Oracle::set_allocated_quote_symbol(std::string* value) {
  _impl_.quote_symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_symbol_.IsDefault()) {
          _impl_.quote_symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.Oracle.quote_symbol)
}

// string oracle_type = 4 [json_name = "oracleType"];
inline void Oracle::clear_oracle_type() {
  _impl_.oracle_type_.ClearToEmpty();
}
inline const std::string& Oracle::oracle_type() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.Oracle.oracle_type)
  return _internal_oracle_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oracle::set_oracle_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.oracle_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.Oracle.oracle_type)
}
inline std::string* Oracle::mutable_oracle_type() {
  std::string* _s = _internal_mutable_oracle_type();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.Oracle.oracle_type)
  return _s;
}
inline const std::string& Oracle::_internal_oracle_type() const {
  return _impl_.oracle_type_.Get();
}
inline void Oracle::_internal_set_oracle_type(const std::string& value) {
  ;


  _impl_.oracle_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Oracle::_internal_mutable_oracle_type() {
  ;
  return _impl_.oracle_type_.Mutable( GetArenaForAllocation());
}
inline std::string* Oracle::release_oracle_type() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.Oracle.oracle_type)
  return _impl_.oracle_type_.Release();
}
inline void Oracle::set_allocated_oracle_type(std::string* value) {
  _impl_.oracle_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oracle_type_.IsDefault()) {
          _impl_.oracle_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.Oracle.oracle_type)
}

// string price = 5 [json_name = "price"];
inline void Oracle::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& Oracle::price() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.Oracle.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Oracle::set_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.Oracle.price)
}
inline std::string* Oracle::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.Oracle.price)
  return _s;
}
inline const std::string& Oracle::_internal_price() const {
  return _impl_.price_.Get();
}
inline void Oracle::_internal_set_price(const std::string& value) {
  ;


  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* Oracle::_internal_mutable_price() {
  ;
  return _impl_.price_.Mutable( GetArenaForAllocation());
}
inline std::string* Oracle::release_price() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.Oracle.price)
  return _impl_.price_.Release();
}
inline void Oracle::set_allocated_price(std::string* value) {
  _impl_.price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.Oracle.price)
}

// -------------------------------------------------------------------

// PriceRequest

// string base_symbol = 1 [json_name = "baseSymbol"];
inline void PriceRequest::clear_base_symbol() {
  _impl_.base_symbol_.ClearToEmpty();
}
inline const std::string& PriceRequest::base_symbol() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.PriceRequest.base_symbol)
  return _internal_base_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PriceRequest::set_base_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.PriceRequest.base_symbol)
}
inline std::string* PriceRequest::mutable_base_symbol() {
  std::string* _s = _internal_mutable_base_symbol();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.PriceRequest.base_symbol)
  return _s;
}
inline const std::string& PriceRequest::_internal_base_symbol() const {
  return _impl_.base_symbol_.Get();
}
inline void PriceRequest::_internal_set_base_symbol(const std::string& value) {
  ;


  _impl_.base_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* PriceRequest::_internal_mutable_base_symbol() {
  ;
  return _impl_.base_symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* PriceRequest::release_base_symbol() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.PriceRequest.base_symbol)
  return _impl_.base_symbol_.Release();
}
inline void PriceRequest::set_allocated_base_symbol(std::string* value) {
  _impl_.base_symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_symbol_.IsDefault()) {
          _impl_.base_symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.PriceRequest.base_symbol)
}

// string quote_symbol = 2 [json_name = "quoteSymbol"];
inline void PriceRequest::clear_quote_symbol() {
  _impl_.quote_symbol_.ClearToEmpty();
}
inline const std::string& PriceRequest::quote_symbol() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.PriceRequest.quote_symbol)
  return _internal_quote_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PriceRequest::set_quote_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.PriceRequest.quote_symbol)
}
inline std::string* PriceRequest::mutable_quote_symbol() {
  std::string* _s = _internal_mutable_quote_symbol();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.PriceRequest.quote_symbol)
  return _s;
}
inline const std::string& PriceRequest::_internal_quote_symbol() const {
  return _impl_.quote_symbol_.Get();
}
inline void PriceRequest::_internal_set_quote_symbol(const std::string& value) {
  ;


  _impl_.quote_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* PriceRequest::_internal_mutable_quote_symbol() {
  ;
  return _impl_.quote_symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* PriceRequest::release_quote_symbol() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.PriceRequest.quote_symbol)
  return _impl_.quote_symbol_.Release();
}
inline void PriceRequest::set_allocated_quote_symbol(std::string* value) {
  _impl_.quote_symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_symbol_.IsDefault()) {
          _impl_.quote_symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.PriceRequest.quote_symbol)
}

// string oracle_type = 3 [json_name = "oracleType"];
inline void PriceRequest::clear_oracle_type() {
  _impl_.oracle_type_.ClearToEmpty();
}
inline const std::string& PriceRequest::oracle_type() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.PriceRequest.oracle_type)
  return _internal_oracle_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PriceRequest::set_oracle_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.oracle_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.PriceRequest.oracle_type)
}
inline std::string* PriceRequest::mutable_oracle_type() {
  std::string* _s = _internal_mutable_oracle_type();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.PriceRequest.oracle_type)
  return _s;
}
inline const std::string& PriceRequest::_internal_oracle_type() const {
  return _impl_.oracle_type_.Get();
}
inline void PriceRequest::_internal_set_oracle_type(const std::string& value) {
  ;


  _impl_.oracle_type_.Set(value, GetArenaForAllocation());
}
inline std::string* PriceRequest::_internal_mutable_oracle_type() {
  ;
  return _impl_.oracle_type_.Mutable( GetArenaForAllocation());
}
inline std::string* PriceRequest::release_oracle_type() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.PriceRequest.oracle_type)
  return _impl_.oracle_type_.Release();
}
inline void PriceRequest::set_allocated_oracle_type(std::string* value) {
  _impl_.oracle_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oracle_type_.IsDefault()) {
          _impl_.oracle_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.PriceRequest.oracle_type)
}

// uint32 oracle_scale_factor = 4 [json_name = "oracleScaleFactor"];
inline void PriceRequest::clear_oracle_scale_factor() {
  _impl_.oracle_scale_factor_ = 0u;
}
inline ::uint32_t PriceRequest::oracle_scale_factor() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.PriceRequest.oracle_scale_factor)
  return _internal_oracle_scale_factor();
}
inline void PriceRequest::set_oracle_scale_factor(::uint32_t value) {
  _internal_set_oracle_scale_factor(value);
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.PriceRequest.oracle_scale_factor)
}
inline ::uint32_t PriceRequest::_internal_oracle_scale_factor() const {
  return _impl_.oracle_scale_factor_;
}
inline void PriceRequest::_internal_set_oracle_scale_factor(::uint32_t value) {
  ;
  _impl_.oracle_scale_factor_ = value;
}

// -------------------------------------------------------------------

// PriceResponse

// string price = 1 [json_name = "price"];
inline void PriceResponse::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& PriceResponse::price() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.PriceResponse.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PriceResponse::set_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.PriceResponse.price)
}
inline std::string* PriceResponse::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.PriceResponse.price)
  return _s;
}
inline const std::string& PriceResponse::_internal_price() const {
  return _impl_.price_.Get();
}
inline void PriceResponse::_internal_set_price(const std::string& value) {
  ;


  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* PriceResponse::_internal_mutable_price() {
  ;
  return _impl_.price_.Mutable( GetArenaForAllocation());
}
inline std::string* PriceResponse::release_price() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.PriceResponse.price)
  return _impl_.price_.Release();
}
inline void PriceResponse::set_allocated_price(std::string* value) {
  _impl_.price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.PriceResponse.price)
}

// -------------------------------------------------------------------

// StreamPricesRequest

// string base_symbol = 1 [json_name = "baseSymbol"];
inline void StreamPricesRequest::clear_base_symbol() {
  _impl_.base_symbol_.ClearToEmpty();
}
inline const std::string& StreamPricesRequest::base_symbol() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.StreamPricesRequest.base_symbol)
  return _internal_base_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPricesRequest::set_base_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.base_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.StreamPricesRequest.base_symbol)
}
inline std::string* StreamPricesRequest::mutable_base_symbol() {
  std::string* _s = _internal_mutable_base_symbol();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.StreamPricesRequest.base_symbol)
  return _s;
}
inline const std::string& StreamPricesRequest::_internal_base_symbol() const {
  return _impl_.base_symbol_.Get();
}
inline void StreamPricesRequest::_internal_set_base_symbol(const std::string& value) {
  ;


  _impl_.base_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPricesRequest::_internal_mutable_base_symbol() {
  ;
  return _impl_.base_symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamPricesRequest::release_base_symbol() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.StreamPricesRequest.base_symbol)
  return _impl_.base_symbol_.Release();
}
inline void StreamPricesRequest::set_allocated_base_symbol(std::string* value) {
  _impl_.base_symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.base_symbol_.IsDefault()) {
          _impl_.base_symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.StreamPricesRequest.base_symbol)
}

// string quote_symbol = 2 [json_name = "quoteSymbol"];
inline void StreamPricesRequest::clear_quote_symbol() {
  _impl_.quote_symbol_.ClearToEmpty();
}
inline const std::string& StreamPricesRequest::quote_symbol() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.StreamPricesRequest.quote_symbol)
  return _internal_quote_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPricesRequest::set_quote_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quote_symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.StreamPricesRequest.quote_symbol)
}
inline std::string* StreamPricesRequest::mutable_quote_symbol() {
  std::string* _s = _internal_mutable_quote_symbol();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.StreamPricesRequest.quote_symbol)
  return _s;
}
inline const std::string& StreamPricesRequest::_internal_quote_symbol() const {
  return _impl_.quote_symbol_.Get();
}
inline void StreamPricesRequest::_internal_set_quote_symbol(const std::string& value) {
  ;


  _impl_.quote_symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPricesRequest::_internal_mutable_quote_symbol() {
  ;
  return _impl_.quote_symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamPricesRequest::release_quote_symbol() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.StreamPricesRequest.quote_symbol)
  return _impl_.quote_symbol_.Release();
}
inline void StreamPricesRequest::set_allocated_quote_symbol(std::string* value) {
  _impl_.quote_symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quote_symbol_.IsDefault()) {
          _impl_.quote_symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.StreamPricesRequest.quote_symbol)
}

// string oracle_type = 3 [json_name = "oracleType"];
inline void StreamPricesRequest::clear_oracle_type() {
  _impl_.oracle_type_.ClearToEmpty();
}
inline const std::string& StreamPricesRequest::oracle_type() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.StreamPricesRequest.oracle_type)
  return _internal_oracle_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPricesRequest::set_oracle_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.oracle_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.StreamPricesRequest.oracle_type)
}
inline std::string* StreamPricesRequest::mutable_oracle_type() {
  std::string* _s = _internal_mutable_oracle_type();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.StreamPricesRequest.oracle_type)
  return _s;
}
inline const std::string& StreamPricesRequest::_internal_oracle_type() const {
  return _impl_.oracle_type_.Get();
}
inline void StreamPricesRequest::_internal_set_oracle_type(const std::string& value) {
  ;


  _impl_.oracle_type_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPricesRequest::_internal_mutable_oracle_type() {
  ;
  return _impl_.oracle_type_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamPricesRequest::release_oracle_type() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.StreamPricesRequest.oracle_type)
  return _impl_.oracle_type_.Release();
}
inline void StreamPricesRequest::set_allocated_oracle_type(std::string* value) {
  _impl_.oracle_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oracle_type_.IsDefault()) {
          _impl_.oracle_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.StreamPricesRequest.oracle_type)
}

// -------------------------------------------------------------------

// StreamPricesResponse

// string price = 1 [json_name = "price"];
inline void StreamPricesResponse::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& StreamPricesResponse::price() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.StreamPricesResponse.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamPricesResponse::set_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.StreamPricesResponse.price)
}
inline std::string* StreamPricesResponse::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:injective_oracle_rpc.StreamPricesResponse.price)
  return _s;
}
inline const std::string& StreamPricesResponse::_internal_price() const {
  return _impl_.price_.Get();
}
inline void StreamPricesResponse::_internal_set_price(const std::string& value) {
  ;


  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamPricesResponse::_internal_mutable_price() {
  ;
  return _impl_.price_.Mutable( GetArenaForAllocation());
}
inline std::string* StreamPricesResponse::release_price() {
  // @@protoc_insertion_point(field_release:injective_oracle_rpc.StreamPricesResponse.price)
  return _impl_.price_.Release();
}
inline void StreamPricesResponse::set_allocated_price(std::string* value) {
  _impl_.price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_oracle_rpc.StreamPricesResponse.price)
}

// sint64 timestamp = 2 [json_name = "timestamp"];
inline void StreamPricesResponse::clear_timestamp() {
  _impl_.timestamp_ = ::int64_t{0};
}
inline ::int64_t StreamPricesResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:injective_oracle_rpc.StreamPricesResponse.timestamp)
  return _internal_timestamp();
}
inline void StreamPricesResponse::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:injective_oracle_rpc.StreamPricesResponse.timestamp)
}
inline ::int64_t StreamPricesResponse::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void StreamPricesResponse::_internal_set_timestamp(::int64_t value) {
  ;
  _impl_.timestamp_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_oracle_rpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_exchange_2finjective_5foracle_5frpc_2eproto_2epb_2eh

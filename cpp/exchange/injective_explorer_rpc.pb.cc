// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_explorer_rpc.proto

#include "exchange/injective_explorer_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective_explorer_rpc {
template <typename>
PROTOBUF_CONSTEXPR GetAccountTxsRequest::GetAccountTxsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.module_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.before_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.after_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.from_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.to_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAccountTxsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountTxsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountTxsRequestDefaultTypeInternal() {}
  union {
    GetAccountTxsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountTxsRequestDefaultTypeInternal _GetAccountTxsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetAccountTxsResponse::GetAccountTxsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct GetAccountTxsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccountTxsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccountTxsResponseDefaultTypeInternal() {}
  union {
    GetAccountTxsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccountTxsResponseDefaultTypeInternal _GetAccountTxsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Paging::Paging(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_)*/ ::int64_t{0}

  , /*decltype(_impl_.from_)*/ 0

  , /*decltype(_impl_.to_)*/ 0

  , /*decltype(_impl_.count_by_subaccount_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PagingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PagingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PagingDefaultTypeInternal() {}
  union {
    Paging _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PagingDefaultTypeInternal _Paging_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TxDetailData::TxDetailData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.signatures_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.info_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codespace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tx_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.messages_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.memo_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gas_fee_)*/nullptr
  , /*decltype(_impl_.block_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.gas_wanted_)*/ ::int64_t{0}

  , /*decltype(_impl_.gas_used_)*/ ::int64_t{0}

  , /*decltype(_impl_.tx_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.block_unix_timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_)*/ 0u
} {}
struct TxDetailDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxDetailDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxDetailDataDefaultTypeInternal() {}
  union {
    TxDetailData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxDetailDataDefaultTypeInternal _TxDetailData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GasFee::GasFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/{}
  , /*decltype(_impl_.payer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.granter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gas_limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GasFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GasFeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GasFeeDefaultTypeInternal() {}
  union {
    GasFee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GasFeeDefaultTypeInternal _GasFee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CosmosCoin::CosmosCoin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CosmosCoinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CosmosCoinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CosmosCoinDefaultTypeInternal() {}
  union {
    CosmosCoin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CosmosCoinDefaultTypeInternal _CosmosCoin_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Event_AttributesEntry_DoNotUse::Event_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Event_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Event_AttributesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Event_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Event_AttributesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Event_AttributesEntry_DoNotUseDefaultTypeInternal _Event_AttributesEntry_DoNotUse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Signature::Signature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pubkey_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDefaultTypeInternal() {}
  union {
    Signature _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDefaultTypeInternal _Signature_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetContractTxsRequest::GetContractTxsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.from_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.to_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetContractTxsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetContractTxsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetContractTxsRequestDefaultTypeInternal() {}
  union {
    GetContractTxsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetContractTxsRequestDefaultTypeInternal _GetContractTxsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetContractTxsResponse::GetContractTxsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct GetContractTxsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetContractTxsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetContractTxsResponseDefaultTypeInternal() {}
  union {
    GetContractTxsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetContractTxsResponseDefaultTypeInternal _GetContractTxsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetBlocksRequest::GetBlocksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.before_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.after_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBlocksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlocksRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlocksRequestDefaultTypeInternal() {}
  union {
    GetBlocksRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlocksRequestDefaultTypeInternal _GetBlocksRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetBlocksResponse::GetBlocksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct GetBlocksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlocksResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlocksResponseDefaultTypeInternal() {}
  union {
    GetBlocksResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlocksResponseDefaultTypeInternal _GetBlocksResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockInfo::BlockInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.proposer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.moniker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.parent_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.num_pre_commits_)*/ ::int64_t{0}

  , /*decltype(_impl_.num_txs_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockInfoDefaultTypeInternal() {}
  union {
    BlockInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TxDataRPC::TxDataRPC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codespace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.messages_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tx_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxDataRPCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxDataRPCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxDataRPCDefaultTypeInternal() {}
  union {
    TxDataRPC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxDataRPCDefaultTypeInternal _TxDataRPC_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetBlockRequest::GetBlockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBlockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockRequestDefaultTypeInternal() {}
  union {
    GetBlockRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockRequestDefaultTypeInternal _GetBlockRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetBlockResponse::GetBlockResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.errmsg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/nullptr} {}
struct GetBlockResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBlockResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBlockResponseDefaultTypeInternal() {}
  union {
    GetBlockResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBlockResponseDefaultTypeInternal _GetBlockResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockDetailInfo::BlockDetailInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.proposer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.moniker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.parent_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.num_pre_commits_)*/ ::int64_t{0}

  , /*decltype(_impl_.num_txs_)*/ ::int64_t{0}

  , /*decltype(_impl_.total_txs_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockDetailInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDetailInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDetailInfoDefaultTypeInternal() {}
  union {
    BlockDetailInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDetailInfoDefaultTypeInternal _BlockDetailInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TxData::TxData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codespace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.messages_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tx_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxDataDefaultTypeInternal() {}
  union {
    TxData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxDataDefaultTypeInternal _TxData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetValidatorsRequest::GetValidatorsRequest(
    ::_pbi::ConstantInitialized) {}
struct GetValidatorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetValidatorsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetValidatorsRequestDefaultTypeInternal() {}
  union {
    GetValidatorsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetValidatorsRequestDefaultTypeInternal _GetValidatorsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetValidatorsResponse::GetValidatorsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.s_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.errmsg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetValidatorsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetValidatorsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetValidatorsResponseDefaultTypeInternal() {}
  union {
    GetValidatorsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetValidatorsResponseDefaultTypeInternal _GetValidatorsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Validator::Validator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uptimes_)*/{}
  , /*decltype(_impl_.slashing_events_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.moniker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.operator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.consensus_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tokens_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.delegator_shares_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.unbonding_time_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.commission_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.commission_max_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.commission_max_change_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.commission_update_time_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/nullptr
  , /*decltype(_impl_.jailed_)*/ false

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.unbonding_height_)*/ ::int64_t{0}

  , /*decltype(_impl_.proposed_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.signed__)*/ ::uint64_t{0u}

  , /*decltype(_impl_.missed_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.uptime_percentage_)*/ 0
} {}
struct ValidatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorDefaultTypeInternal() {}
  union {
    Validator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorDefaultTypeInternal _Validator_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorDescription::ValidatorDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.moniker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.identity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.website_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.security_contact_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.details_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorDescriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorDescriptionDefaultTypeInternal() {}
  union {
    ValidatorDescription _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorDescriptionDefaultTypeInternal _ValidatorDescription_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorUptime::ValidatorUptime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorUptimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorUptimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorUptimeDefaultTypeInternal() {}
  union {
    ValidatorUptime _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorUptimeDefaultTypeInternal _ValidatorUptime_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SlashingEvent::SlashingEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.reason_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.jailed_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.power_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.missed_blocks_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SlashingEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SlashingEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SlashingEventDefaultTypeInternal() {}
  union {
    SlashingEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SlashingEventDefaultTypeInternal _SlashingEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetValidatorRequest::GetValidatorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetValidatorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetValidatorRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetValidatorRequestDefaultTypeInternal() {}
  union {
    GetValidatorRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetValidatorRequestDefaultTypeInternal _GetValidatorRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetValidatorResponse::GetValidatorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.errmsg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/nullptr} {}
struct GetValidatorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetValidatorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetValidatorResponseDefaultTypeInternal() {}
  union {
    GetValidatorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetValidatorResponseDefaultTypeInternal _GetValidatorResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetValidatorUptimeRequest::GetValidatorUptimeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetValidatorUptimeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetValidatorUptimeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetValidatorUptimeRequestDefaultTypeInternal() {}
  union {
    GetValidatorUptimeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetValidatorUptimeRequestDefaultTypeInternal _GetValidatorUptimeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetValidatorUptimeResponse::GetValidatorUptimeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.s_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.errmsg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetValidatorUptimeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetValidatorUptimeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetValidatorUptimeResponseDefaultTypeInternal() {}
  union {
    GetValidatorUptimeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetValidatorUptimeResponseDefaultTypeInternal _GetValidatorUptimeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetTxsRequest::GetTxsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.module_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.before_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.after_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.from_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.to_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTxsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxsRequestDefaultTypeInternal() {}
  union {
    GetTxsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxsRequestDefaultTypeInternal _GetTxsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetTxsResponse::GetTxsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct GetTxsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxsResponseDefaultTypeInternal() {}
  union {
    GetTxsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxsResponseDefaultTypeInternal _GetTxsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetTxByTxHashRequest::GetTxByTxHashRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTxByTxHashRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxByTxHashRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxByTxHashRequestDefaultTypeInternal() {}
  union {
    GetTxByTxHashRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxByTxHashRequestDefaultTypeInternal _GetTxByTxHashRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetTxByTxHashResponse::GetTxByTxHashResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.s_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.errmsg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/nullptr} {}
struct GetTxByTxHashResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTxByTxHashResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTxByTxHashResponseDefaultTypeInternal() {}
  union {
    GetTxByTxHashResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTxByTxHashResponseDefaultTypeInternal _GetTxByTxHashResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetPeggyDepositTxsRequest::GetPeggyDepositTxsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPeggyDepositTxsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPeggyDepositTxsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPeggyDepositTxsRequestDefaultTypeInternal() {}
  union {
    GetPeggyDepositTxsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPeggyDepositTxsRequestDefaultTypeInternal _GetPeggyDepositTxsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetPeggyDepositTxsResponse::GetPeggyDepositTxsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPeggyDepositTxsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPeggyDepositTxsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPeggyDepositTxsResponseDefaultTypeInternal() {}
  union {
    GetPeggyDepositTxsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPeggyDepositTxsResponseDefaultTypeInternal _GetPeggyDepositTxsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PeggyDepositTx::PeggyDepositTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hashes_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.created_at_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_at_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.event_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.event_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.claim_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeggyDepositTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeggyDepositTxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeggyDepositTxDefaultTypeInternal() {}
  union {
    PeggyDepositTx _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeggyDepositTxDefaultTypeInternal _PeggyDepositTx_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetPeggyWithdrawalTxsRequest::GetPeggyWithdrawalTxsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPeggyWithdrawalTxsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPeggyWithdrawalTxsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPeggyWithdrawalTxsRequestDefaultTypeInternal() {}
  union {
    GetPeggyWithdrawalTxsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPeggyWithdrawalTxsRequestDefaultTypeInternal _GetPeggyWithdrawalTxsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetPeggyWithdrawalTxsResponse::GetPeggyWithdrawalTxsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPeggyWithdrawalTxsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPeggyWithdrawalTxsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPeggyWithdrawalTxsResponseDefaultTypeInternal() {}
  union {
    GetPeggyWithdrawalTxsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPeggyWithdrawalTxsResponseDefaultTypeInternal _GetPeggyWithdrawalTxsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PeggyWithdrawalTx::PeggyWithdrawalTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hashes_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bridge_fee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orchestrator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.created_at_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_at_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.outgoing_tx_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.batch_timeout_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.batch_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.event_nonce_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.event_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.claim_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeggyWithdrawalTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeggyWithdrawalTxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeggyWithdrawalTxDefaultTypeInternal() {}
  union {
    PeggyWithdrawalTx _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeggyWithdrawalTxDefaultTypeInternal _PeggyWithdrawalTx_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetIBCTransferTxsRequest::GetIBCTransferTxsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.src_channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.src_port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dest_channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dest_port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIBCTransferTxsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIBCTransferTxsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIBCTransferTxsRequestDefaultTypeInternal() {}
  union {
    GetIBCTransferTxsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIBCTransferTxsRequestDefaultTypeInternal _GetIBCTransferTxsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetIBCTransferTxsResponse::GetIBCTransferTxsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetIBCTransferTxsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetIBCTransferTxsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetIBCTransferTxsResponseDefaultTypeInternal() {}
  union {
    GetIBCTransferTxsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetIBCTransferTxsResponseDefaultTypeInternal _GetIBCTransferTxsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IBCTransferTx::IBCTransferTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_hashes_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timeout_height_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_hex_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.created_at_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_at_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timeout_timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.packet_sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IBCTransferTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IBCTransferTxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IBCTransferTxDefaultTypeInternal() {}
  union {
    IBCTransferTx _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IBCTransferTxDefaultTypeInternal _IBCTransferTx_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWasmCodesRequest::GetWasmCodesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.to_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWasmCodesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWasmCodesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWasmCodesRequestDefaultTypeInternal() {}
  union {
    GetWasmCodesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWasmCodesRequestDefaultTypeInternal _GetWasmCodesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWasmCodesResponse::GetWasmCodesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct GetWasmCodesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWasmCodesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWasmCodesResponseDefaultTypeInternal() {}
  union {
    GetWasmCodesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWasmCodesResponseDefaultTypeInternal _GetWasmCodesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WasmCode::WasmCode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tx_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_schema_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_view_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.creator_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.checksum_)*/nullptr
  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.created_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.instantiates_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.proposal_id_)*/ ::int64_t{0}
} {}
struct WasmCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WasmCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WasmCodeDefaultTypeInternal() {}
  union {
    WasmCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WasmCodeDefaultTypeInternal _WasmCode_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Checksum::Checksum(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.algorithm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChecksumDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChecksumDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChecksumDefaultTypeInternal() {}
  union {
    Checksum _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChecksumDefaultTypeInternal _Checksum_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContractPermission::ContractPermission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.access_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractPermissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractPermissionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractPermissionDefaultTypeInternal() {}
  union {
    ContractPermission _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractPermissionDefaultTypeInternal _ContractPermission_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWasmCodeByIDRequest::GetWasmCodeByIDRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWasmCodeByIDRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWasmCodeByIDRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWasmCodeByIDRequestDefaultTypeInternal() {}
  union {
    GetWasmCodeByIDRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWasmCodeByIDRequestDefaultTypeInternal _GetWasmCodeByIDRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWasmCodeByIDResponse::GetWasmCodeByIDResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tx_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_schema_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_view_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.creator_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.checksum_)*/nullptr
  , /*decltype(_impl_.permission_)*/nullptr
  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.created_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.instantiates_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.proposal_id_)*/ ::int64_t{0}
} {}
struct GetWasmCodeByIDResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWasmCodeByIDResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWasmCodeByIDResponseDefaultTypeInternal() {}
  union {
    GetWasmCodeByIDResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWasmCodeByIDResponseDefaultTypeInternal _GetWasmCodeByIDResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWasmContractsRequest::GetWasmContractsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_id_)*/ ::int64_t{0}

  , /*decltype(_impl_.from_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_.assets_only_)*/ false

  , /*decltype(_impl_.to_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.skip_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWasmContractsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWasmContractsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWasmContractsRequestDefaultTypeInternal() {}
  union {
    GetWasmContractsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWasmContractsRequestDefaultTypeInternal _GetWasmContractsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWasmContractsResponse::GetWasmContractsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct GetWasmContractsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWasmContractsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWasmContractsResponseDefaultTypeInternal() {}
  union {
    GetWasmContractsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWasmContractsResponseDefaultTypeInternal _GetWasmContractsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WasmContract::WasmContract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.funds_)*/{}
  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tx_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.creator_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.init_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.current_migrate_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cw20_metadata_)*/nullptr
  , /*decltype(_impl_.executes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.instantiated_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_executed_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.contract_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.proposal_id_)*/ ::int64_t{0}
} {}
struct WasmContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WasmContractDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WasmContractDefaultTypeInternal() {}
  union {
    WasmContract _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WasmContractDefaultTypeInternal _WasmContract_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContractFund::ContractFund(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractFundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractFundDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractFundDefaultTypeInternal() {}
  union {
    ContractFund _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractFundDefaultTypeInternal _ContractFund_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Cw20Metadata::Cw20Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_info_)*/nullptr
  , /*decltype(_impl_.marketing_info_)*/nullptr} {}
struct Cw20MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Cw20MetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Cw20MetadataDefaultTypeInternal() {}
  union {
    Cw20Metadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Cw20MetadataDefaultTypeInternal _Cw20Metadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Cw20TokenInfo::Cw20TokenInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_supply_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.decimals_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Cw20TokenInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Cw20TokenInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Cw20TokenInfoDefaultTypeInternal() {}
  union {
    Cw20TokenInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Cw20TokenInfoDefaultTypeInternal _Cw20TokenInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Cw20MarketingInfo::Cw20MarketingInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.project_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.logo_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.marketing_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Cw20MarketingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Cw20MarketingInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Cw20MarketingInfoDefaultTypeInternal() {}
  union {
    Cw20MarketingInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Cw20MarketingInfoDefaultTypeInternal _Cw20MarketingInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWasmContractByAddressRequest::GetWasmContractByAddressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contract_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetWasmContractByAddressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWasmContractByAddressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWasmContractByAddressRequestDefaultTypeInternal() {}
  union {
    GetWasmContractByAddressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWasmContractByAddressRequestDefaultTypeInternal _GetWasmContractByAddressRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetWasmContractByAddressResponse::GetWasmContractByAddressResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.funds_)*/{}
  , /*decltype(_impl_.label_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tx_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.creator_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.init_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.admin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.current_migrate_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cw20_metadata_)*/nullptr
  , /*decltype(_impl_.executes_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.instantiated_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.last_executed_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.contract_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.proposal_id_)*/ ::int64_t{0}
} {}
struct GetWasmContractByAddressResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetWasmContractByAddressResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetWasmContractByAddressResponseDefaultTypeInternal() {}
  union {
    GetWasmContractByAddressResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetWasmContractByAddressResponseDefaultTypeInternal _GetWasmContractByAddressResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetCw20BalanceRequest::GetCw20BalanceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCw20BalanceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCw20BalanceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCw20BalanceRequestDefaultTypeInternal() {}
  union {
    GetCw20BalanceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCw20BalanceRequestDefaultTypeInternal _GetCw20BalanceRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetCw20BalanceResponse::GetCw20BalanceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCw20BalanceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCw20BalanceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCw20BalanceResponseDefaultTypeInternal() {}
  union {
    GetCw20BalanceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCw20BalanceResponseDefaultTypeInternal _GetCw20BalanceResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WasmCw20Balance::WasmCw20Balance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contract_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.balance_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cw20_metadata_)*/nullptr
  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}
} {}
struct WasmCw20BalanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WasmCw20BalanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WasmCw20BalanceDefaultTypeInternal() {}
  union {
    WasmCw20Balance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WasmCw20BalanceDefaultTypeInternal _WasmCw20Balance_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RelayersRequest::RelayersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_i_ds_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayersRequestDefaultTypeInternal() {}
  union {
    RelayersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayersRequestDefaultTypeInternal _RelayersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RelayersResponse::RelayersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.field_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayersResponseDefaultTypeInternal() {}
  union {
    RelayersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayersResponseDefaultTypeInternal _RelayersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RelayerMarkets::RelayerMarkets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayerMarketsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayerMarketsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayerMarketsDefaultTypeInternal() {}
  union {
    RelayerMarkets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayerMarketsDefaultTypeInternal _RelayerMarkets_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Relayer::Relayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cta_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RelayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelayerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelayerDefaultTypeInternal() {}
  union {
    Relayer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelayerDefaultTypeInternal _Relayer_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamTxsRequest::StreamTxsRequest(
    ::_pbi::ConstantInitialized) {}
struct StreamTxsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamTxsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamTxsRequestDefaultTypeInternal() {}
  union {
    StreamTxsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamTxsRequestDefaultTypeInternal _StreamTxsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamTxsResponse::StreamTxsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codespace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.messages_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tx_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.code_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamTxsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamTxsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamTxsResponseDefaultTypeInternal() {}
  union {
    StreamTxsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamTxsResponseDefaultTypeInternal _StreamTxsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamBlocksRequest::StreamBlocksRequest(
    ::_pbi::ConstantInitialized) {}
struct StreamBlocksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamBlocksRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamBlocksRequestDefaultTypeInternal() {}
  union {
    StreamBlocksRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamBlocksRequestDefaultTypeInternal _StreamBlocksRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamBlocksResponse::StreamBlocksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.proposer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.moniker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.parent_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.num_pre_commits_)*/ ::int64_t{0}

  , /*decltype(_impl_.num_txs_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamBlocksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamBlocksResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamBlocksResponseDefaultTypeInternal() {}
  union {
    StreamBlocksResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamBlocksResponseDefaultTypeInternal _StreamBlocksResponse_default_instance_;
}  // namespace injective_explorer_rpc
static ::_pb::Metadata file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[69];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_exchange_2finjective_5fexplorer_5frpc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_exchange_2finjective_5fexplorer_5frpc_2eproto = nullptr;
const ::uint32_t TableStruct_exchange_2finjective_5fexplorer_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.before_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.after_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.module_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.from_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsRequest, _impl_.to_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsResponse, _impl_.paging_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetAccountTxsResponse, _impl_.data_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Paging, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Paging, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Paging, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Paging, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Paging, _impl_.count_by_subaccount_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.block_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.block_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.gas_wanted_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.gas_used_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.gas_fee_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.codespace_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.tx_type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.messages_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.signatures_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.memo_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.tx_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.block_unix_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDetailData, _impl_.error_log_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GasFee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GasFee, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GasFee, _impl_.gas_limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GasFee, _impl_.payer_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GasFee, _impl_.granter_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::CosmosCoin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::CosmosCoin, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::CosmosCoin, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Event_AttributesEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Event_AttributesEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Event_AttributesEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Event_AttributesEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Event, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Event, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Event, _impl_.attributes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Signature, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Signature, _impl_.pubkey_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Signature, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Signature, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Signature, _impl_.signature_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsRequest, _impl_.from_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsRequest, _impl_.to_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsResponse, _impl_.paging_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetContractTxsResponse, _impl_.data_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlocksRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlocksRequest, _impl_.before_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlocksRequest, _impl_.after_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlocksRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlocksResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlocksResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlocksResponse, _impl_.paging_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlocksResponse, _impl_.data_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.proposer_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.moniker_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.block_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.parent_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.num_pre_commits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.num_txs_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.txs_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockInfo, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.block_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.block_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.codespace_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.messages_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.tx_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.error_log_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxDataRPC, _impl_.code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlockRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlockRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlockResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlockResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlockResponse, _impl_.s_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlockResponse, _impl_.errmsg_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetBlockResponse, _impl_.data_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.proposer_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.moniker_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.block_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.parent_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.num_pre_commits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.num_txs_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.total_txs_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.txs_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::BlockDetailInfo, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.block_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.block_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.codespace_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.messages_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.tx_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.error_log_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::TxData, _impl_.code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorsResponse, _impl_.s_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorsResponse, _impl_.errmsg_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorsResponse, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.moniker_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.operator_address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.consensus_address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.jailed_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.tokens_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.delegator_shares_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.unbonding_height_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.unbonding_time_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.commission_rate_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.commission_max_rate_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.commission_max_change_rate_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.commission_update_time_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.proposed_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.signed__),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.missed_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.uptimes_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.slashing_events_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Validator, _impl_.uptime_percentage_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorDescription, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorDescription, _impl_.moniker_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorDescription, _impl_.identity_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorDescription, _impl_.website_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorDescription, _impl_.security_contact_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorDescription, _impl_.details_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorUptime, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorUptime, _impl_.block_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ValidatorUptime, _impl_.status_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::SlashingEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::SlashingEvent, _impl_.block_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::SlashingEvent, _impl_.block_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::SlashingEvent, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::SlashingEvent, _impl_.power_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::SlashingEvent, _impl_.reason_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::SlashingEvent, _impl_.jailed_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::SlashingEvent, _impl_.missed_blocks_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorResponse, _impl_.s_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorResponse, _impl_.errmsg_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorResponse, _impl_.data_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorUptimeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorUptimeRequest, _impl_.address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorUptimeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorUptimeResponse, _impl_.s_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorUptimeResponse, _impl_.errmsg_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetValidatorUptimeResponse, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _impl_.before_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _impl_.after_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _impl_.module_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _impl_.from_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsRequest, _impl_.to_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsResponse, _impl_.paging_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxsResponse, _impl_.data_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxByTxHashRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxByTxHashRequest, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxByTxHashResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxByTxHashResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxByTxHashResponse, _impl_.s_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxByTxHashResponse, _impl_.errmsg_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetTxByTxHashResponse, _impl_.data_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyDepositTxsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyDepositTxsRequest, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyDepositTxsRequest, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyDepositTxsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyDepositTxsRequest, _impl_.skip_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyDepositTxsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyDepositTxsResponse, _impl_.field_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.event_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.event_height_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.orchestrator_address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.claim_type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.tx_hashes_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyDepositTx, _impl_.updated_at_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, _impl_.skip_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse, _impl_.field_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.bridge_fee_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.outgoing_tx_id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.batch_timeout_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.batch_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.orchestrator_address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.event_nonce_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.event_height_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.claim_type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.tx_hashes_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::PeggyWithdrawalTx, _impl_.updated_at_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _impl_.src_channel_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _impl_.src_port_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _impl_.dest_channel_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _impl_.dest_port_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsRequest, _impl_.skip_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetIBCTransferTxsResponse, _impl_.field_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.source_port_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.source_channel_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.destination_port_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.destination_channel_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.timeout_height_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.timeout_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.packet_sequence_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.data_hex_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.tx_hashes_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::IBCTransferTx, _impl_.updated_at_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodesRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodesRequest, _impl_.from_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodesRequest, _impl_.to_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodesResponse, _impl_.paging_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodesResponse, _impl_.data_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.tx_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.checksum_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.contract_type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.permission_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.code_schema_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.code_view_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.instantiates_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.creator_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.code_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCode, _impl_.proposal_id_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Checksum, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Checksum, _impl_.algorithm_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Checksum, _impl_.hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ContractPermission, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ContractPermission, _impl_.access_type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ContractPermission, _impl_.address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDRequest, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.tx_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.checksum_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.contract_type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.permission_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.code_schema_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.code_view_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.instantiates_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.creator_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.code_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmCodeByIDResponse, _impl_.proposal_id_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsRequest, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsRequest, _impl_.from_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsRequest, _impl_.to_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsRequest, _impl_.assets_only_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsResponse, _impl_.paging_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractsResponse, _impl_.data_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.tx_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.creator_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.executes_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.instantiated_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.init_message_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.last_executed_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.funds_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.current_migrate_message_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.contract_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.cw20_metadata_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmContract, _impl_.proposal_id_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ContractFund, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ContractFund, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::ContractFund, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20Metadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20Metadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20Metadata, _impl_.token_info_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20Metadata, _impl_.marketing_info_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20TokenInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20TokenInfo, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20TokenInfo, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20TokenInfo, _impl_.decimals_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20TokenInfo, _impl_.total_supply_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20MarketingInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20MarketingInfo, _impl_.project_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20MarketingInfo, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20MarketingInfo, _impl_.logo_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Cw20MarketingInfo, _impl_.marketing_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressRequest, _impl_.contract_address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.label_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.tx_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.creator_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.executes_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.instantiated_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.init_message_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.last_executed_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.funds_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.code_id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.admin_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.current_migrate_message_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.contract_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.cw20_metadata_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetWasmContractByAddressResponse, _impl_.proposal_id_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetCw20BalanceRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetCw20BalanceRequest, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetCw20BalanceRequest, _impl_.limit_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetCw20BalanceResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::GetCw20BalanceResponse, _impl_.field_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCw20Balance, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCw20Balance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCw20Balance, _impl_.contract_address_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCw20Balance, _impl_.account_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCw20Balance, _impl_.balance_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCw20Balance, _impl_.updated_at_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::WasmCw20Balance, _impl_.cw20_metadata_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::RelayersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::RelayersRequest, _impl_.market_i_ds_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::RelayersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::RelayersResponse, _impl_.field_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::RelayerMarkets, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::RelayerMarkets, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::RelayerMarkets, _impl_.relayers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Relayer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Relayer, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::Relayer, _impl_.cta_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.block_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.block_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.codespace_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.messages_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.tx_number_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.error_log_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamTxsResponse, _impl_.code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.proposer_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.moniker_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.block_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.parent_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.num_pre_commits_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.num_txs_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.txs_),
    PROTOBUF_FIELD_OFFSET(::injective_explorer_rpc::StreamBlocksResponse, _impl_.timestamp_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective_explorer_rpc::GetAccountTxsRequest)},
        { 17, 27, -1, sizeof(::injective_explorer_rpc::GetAccountTxsResponse)},
        { 29, -1, -1, sizeof(::injective_explorer_rpc::Paging)},
        { 41, 68, -1, sizeof(::injective_explorer_rpc::TxDetailData)},
        { 87, -1, -1, sizeof(::injective_explorer_rpc::GasFee)},
        { 99, -1, -1, sizeof(::injective_explorer_rpc::CosmosCoin)},
        { 109, 119, -1, sizeof(::injective_explorer_rpc::Event_AttributesEntry_DoNotUse)},
        { 121, -1, -1, sizeof(::injective_explorer_rpc::Event)},
        { 131, -1, -1, sizeof(::injective_explorer_rpc::Signature)},
        { 143, -1, -1, sizeof(::injective_explorer_rpc::GetContractTxsRequest)},
        { 156, 166, -1, sizeof(::injective_explorer_rpc::GetContractTxsResponse)},
        { 168, -1, -1, sizeof(::injective_explorer_rpc::GetBlocksRequest)},
        { 179, 189, -1, sizeof(::injective_explorer_rpc::GetBlocksResponse)},
        { 191, -1, -1, sizeof(::injective_explorer_rpc::BlockInfo)},
        { 208, -1, -1, sizeof(::injective_explorer_rpc::TxDataRPC)},
        { 225, -1, -1, sizeof(::injective_explorer_rpc::GetBlockRequest)},
        { 234, 245, -1, sizeof(::injective_explorer_rpc::GetBlockResponse)},
        { 248, -1, -1, sizeof(::injective_explorer_rpc::BlockDetailInfo)},
        { 266, -1, -1, sizeof(::injective_explorer_rpc::TxData)},
        { 283, -1, -1, sizeof(::injective_explorer_rpc::GetValidatorsRequest)},
        { 291, -1, -1, sizeof(::injective_explorer_rpc::GetValidatorsResponse)},
        { 302, 332, -1, sizeof(::injective_explorer_rpc::Validator)},
        { 354, -1, -1, sizeof(::injective_explorer_rpc::ValidatorDescription)},
        { 367, -1, -1, sizeof(::injective_explorer_rpc::ValidatorUptime)},
        { 377, -1, -1, sizeof(::injective_explorer_rpc::SlashingEvent)},
        { 392, -1, -1, sizeof(::injective_explorer_rpc::GetValidatorRequest)},
        { 401, 412, -1, sizeof(::injective_explorer_rpc::GetValidatorResponse)},
        { 415, -1, -1, sizeof(::injective_explorer_rpc::GetValidatorUptimeRequest)},
        { 424, -1, -1, sizeof(::injective_explorer_rpc::GetValidatorUptimeResponse)},
        { 435, -1, -1, sizeof(::injective_explorer_rpc::GetTxsRequest)},
        { 451, 461, -1, sizeof(::injective_explorer_rpc::GetTxsResponse)},
        { 463, -1, -1, sizeof(::injective_explorer_rpc::GetTxByTxHashRequest)},
        { 472, 483, -1, sizeof(::injective_explorer_rpc::GetTxByTxHashResponse)},
        { 486, -1, -1, sizeof(::injective_explorer_rpc::GetPeggyDepositTxsRequest)},
        { 498, -1, -1, sizeof(::injective_explorer_rpc::GetPeggyDepositTxsResponse)},
        { 507, -1, -1, sizeof(::injective_explorer_rpc::PeggyDepositTx)},
        { 527, -1, -1, sizeof(::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest)},
        { 539, -1, -1, sizeof(::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse)},
        { 548, -1, -1, sizeof(::injective_explorer_rpc::PeggyWithdrawalTx)},
        { 572, -1, -1, sizeof(::injective_explorer_rpc::GetIBCTransferTxsRequest)},
        { 588, -1, -1, sizeof(::injective_explorer_rpc::GetIBCTransferTxsResponse)},
        { 597, -1, -1, sizeof(::injective_explorer_rpc::IBCTransferTx)},
        { 621, -1, -1, sizeof(::injective_explorer_rpc::GetWasmCodesRequest)},
        { 632, 642, -1, sizeof(::injective_explorer_rpc::GetWasmCodesResponse)},
        { 644, 665, -1, sizeof(::injective_explorer_rpc::WasmCode)},
        { 678, -1, -1, sizeof(::injective_explorer_rpc::Checksum)},
        { 688, -1, -1, sizeof(::injective_explorer_rpc::ContractPermission)},
        { 698, -1, -1, sizeof(::injective_explorer_rpc::GetWasmCodeByIDRequest)},
        { 707, 728, -1, sizeof(::injective_explorer_rpc::GetWasmCodeByIDResponse)},
        { 741, -1, -1, sizeof(::injective_explorer_rpc::GetWasmContractsRequest)},
        { 755, 765, -1, sizeof(::injective_explorer_rpc::GetWasmContractsResponse)},
        { 767, 792, -1, sizeof(::injective_explorer_rpc::WasmContract)},
        { 809, -1, -1, sizeof(::injective_explorer_rpc::ContractFund)},
        { 819, 829, -1, sizeof(::injective_explorer_rpc::Cw20Metadata)},
        { 831, -1, -1, sizeof(::injective_explorer_rpc::Cw20TokenInfo)},
        { 843, -1, -1, sizeof(::injective_explorer_rpc::Cw20MarketingInfo)},
        { 855, -1, -1, sizeof(::injective_explorer_rpc::GetWasmContractByAddressRequest)},
        { 864, 889, -1, sizeof(::injective_explorer_rpc::GetWasmContractByAddressResponse)},
        { 906, -1, -1, sizeof(::injective_explorer_rpc::GetCw20BalanceRequest)},
        { 916, -1, -1, sizeof(::injective_explorer_rpc::GetCw20BalanceResponse)},
        { 925, 938, -1, sizeof(::injective_explorer_rpc::WasmCw20Balance)},
        { 943, -1, -1, sizeof(::injective_explorer_rpc::RelayersRequest)},
        { 952, -1, -1, sizeof(::injective_explorer_rpc::RelayersResponse)},
        { 961, -1, -1, sizeof(::injective_explorer_rpc::RelayerMarkets)},
        { 971, -1, -1, sizeof(::injective_explorer_rpc::Relayer)},
        { 981, -1, -1, sizeof(::injective_explorer_rpc::StreamTxsRequest)},
        { 989, -1, -1, sizeof(::injective_explorer_rpc::StreamTxsResponse)},
        { 1006, -1, -1, sizeof(::injective_explorer_rpc::StreamBlocksRequest)},
        { 1014, -1, -1, sizeof(::injective_explorer_rpc::StreamBlocksResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective_explorer_rpc::_GetAccountTxsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetAccountTxsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_Paging_default_instance_._instance,
    &::injective_explorer_rpc::_TxDetailData_default_instance_._instance,
    &::injective_explorer_rpc::_GasFee_default_instance_._instance,
    &::injective_explorer_rpc::_CosmosCoin_default_instance_._instance,
    &::injective_explorer_rpc::_Event_AttributesEntry_DoNotUse_default_instance_._instance,
    &::injective_explorer_rpc::_Event_default_instance_._instance,
    &::injective_explorer_rpc::_Signature_default_instance_._instance,
    &::injective_explorer_rpc::_GetContractTxsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetContractTxsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_GetBlocksRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetBlocksResponse_default_instance_._instance,
    &::injective_explorer_rpc::_BlockInfo_default_instance_._instance,
    &::injective_explorer_rpc::_TxDataRPC_default_instance_._instance,
    &::injective_explorer_rpc::_GetBlockRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetBlockResponse_default_instance_._instance,
    &::injective_explorer_rpc::_BlockDetailInfo_default_instance_._instance,
    &::injective_explorer_rpc::_TxData_default_instance_._instance,
    &::injective_explorer_rpc::_GetValidatorsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetValidatorsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_Validator_default_instance_._instance,
    &::injective_explorer_rpc::_ValidatorDescription_default_instance_._instance,
    &::injective_explorer_rpc::_ValidatorUptime_default_instance_._instance,
    &::injective_explorer_rpc::_SlashingEvent_default_instance_._instance,
    &::injective_explorer_rpc::_GetValidatorRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetValidatorResponse_default_instance_._instance,
    &::injective_explorer_rpc::_GetValidatorUptimeRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetValidatorUptimeResponse_default_instance_._instance,
    &::injective_explorer_rpc::_GetTxsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetTxsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_GetTxByTxHashRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetTxByTxHashResponse_default_instance_._instance,
    &::injective_explorer_rpc::_GetPeggyDepositTxsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetPeggyDepositTxsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_PeggyDepositTx_default_instance_._instance,
    &::injective_explorer_rpc::_GetPeggyWithdrawalTxsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetPeggyWithdrawalTxsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_PeggyWithdrawalTx_default_instance_._instance,
    &::injective_explorer_rpc::_GetIBCTransferTxsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetIBCTransferTxsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_IBCTransferTx_default_instance_._instance,
    &::injective_explorer_rpc::_GetWasmCodesRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetWasmCodesResponse_default_instance_._instance,
    &::injective_explorer_rpc::_WasmCode_default_instance_._instance,
    &::injective_explorer_rpc::_Checksum_default_instance_._instance,
    &::injective_explorer_rpc::_ContractPermission_default_instance_._instance,
    &::injective_explorer_rpc::_GetWasmCodeByIDRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetWasmCodeByIDResponse_default_instance_._instance,
    &::injective_explorer_rpc::_GetWasmContractsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetWasmContractsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_WasmContract_default_instance_._instance,
    &::injective_explorer_rpc::_ContractFund_default_instance_._instance,
    &::injective_explorer_rpc::_Cw20Metadata_default_instance_._instance,
    &::injective_explorer_rpc::_Cw20TokenInfo_default_instance_._instance,
    &::injective_explorer_rpc::_Cw20MarketingInfo_default_instance_._instance,
    &::injective_explorer_rpc::_GetWasmContractByAddressRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetWasmContractByAddressResponse_default_instance_._instance,
    &::injective_explorer_rpc::_GetCw20BalanceRequest_default_instance_._instance,
    &::injective_explorer_rpc::_GetCw20BalanceResponse_default_instance_._instance,
    &::injective_explorer_rpc::_WasmCw20Balance_default_instance_._instance,
    &::injective_explorer_rpc::_RelayersRequest_default_instance_._instance,
    &::injective_explorer_rpc::_RelayersResponse_default_instance_._instance,
    &::injective_explorer_rpc::_RelayerMarkets_default_instance_._instance,
    &::injective_explorer_rpc::_Relayer_default_instance_._instance,
    &::injective_explorer_rpc::_StreamTxsRequest_default_instance_._instance,
    &::injective_explorer_rpc::_StreamTxsResponse_default_instance_._instance,
    &::injective_explorer_rpc::_StreamBlocksRequest_default_instance_._instance,
    &::injective_explorer_rpc::_StreamBlocksResponse_default_instance_._instance,
};
const char descriptor_table_protodef_exchange_2finjective_5fexplorer_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%exchange/injective_explorer_rpc.proto\022"
    "\026injective_explorer_rpc\"\362\001\n\024GetAccountTx"
    "sRequest\022\030\n\007address\030\001 \001(\tR\007address\022\026\n\006be"
    "fore\030\002 \001(\004R\006before\022\024\n\005after\030\003 \001(\004R\005after"
    "\022\024\n\005limit\030\004 \001(\021R\005limit\022\022\n\004skip\030\005 \001(\004R\004sk"
    "ip\022\022\n\004type\030\006 \001(\tR\004type\022\026\n\006module\030\007 \001(\tR\006"
    "module\022\037\n\013from_number\030\010 \001(\022R\nfromNumber\022"
    "\033\n\tto_number\030\t \001(\022R\010toNumber\"\211\001\n\025GetAcco"
    "untTxsResponse\0226\n\006paging\030\001 \001(\0132\036.injecti"
    "ve_explorer_rpc.PagingR\006paging\0228\n\004data\030\002"
    " \003(\0132$.injective_explorer_rpc.TxDetailDa"
    "taR\004data\"r\n\006Paging\022\024\n\005total\030\001 \001(\022R\005total"
    "\022\022\n\004from\030\002 \001(\021R\004from\022\016\n\002to\030\003 \001(\021R\002to\022.\n\023"
    "count_by_subaccount\030\004 \001(\022R\021countBySubacc"
    "ount\"\372\004\n\014TxDetailData\022\016\n\002id\030\001 \001(\tR\002id\022!\n"
    "\014block_number\030\002 \001(\004R\013blockNumber\022\'\n\017bloc"
    "k_timestamp\030\003 \001(\tR\016blockTimestamp\022\022\n\004has"
    "h\030\004 \001(\tR\004hash\022\022\n\004code\030\005 \001(\rR\004code\022\022\n\004dat"
    "a\030\006 \001(\014R\004data\022\022\n\004info\030\010 \001(\tR\004info\022\035\n\ngas"
    "_wanted\030\t \001(\022R\tgasWanted\022\031\n\010gas_used\030\n \001"
    "(\022R\007gasUsed\0227\n\007gas_fee\030\013 \001(\0132\036.injective"
    "_explorer_rpc.GasFeeR\006gasFee\022\034\n\tcodespac"
    "e\030\014 \001(\tR\tcodespace\0225\n\006events\030\r \003(\0132\035.inj"
    "ective_explorer_rpc.EventR\006events\022\027\n\007tx_"
    "type\030\016 \001(\tR\006txType\022\032\n\010messages\030\017 \001(\014R\010me"
    "ssages\022A\n\nsignatures\030\020 \003(\0132!.injective_e"
    "xplorer_rpc.SignatureR\nsignatures\022\022\n\004mem"
    "o\030\021 \001(\tR\004memo\022\033\n\ttx_number\030\022 \001(\004R\010txNumb"
    "er\0220\n\024block_unix_timestamp\030\023 \001(\004R\022blockU"
    "nixTimestamp\022\033\n\terror_log\030\024 \001(\tR\010errorLo"
    "g\"\221\001\n\006GasFee\022:\n\006amount\030\001 \003(\0132\".injective"
    "_explorer_rpc.CosmosCoinR\006amount\022\033\n\tgas_"
    "limit\030\002 \001(\004R\010gasLimit\022\024\n\005payer\030\003 \001(\tR\005pa"
    "yer\022\030\n\007granter\030\004 \001(\tR\007granter\":\n\nCosmosC"
    "oin\022\024\n\005denom\030\001 \001(\tR\005denom\022\026\n\006amount\030\002 \001("
    "\tR\006amount\"\251\001\n\005Event\022\022\n\004type\030\001 \001(\tR\004type\022"
    "M\n\nattributes\030\002 \003(\0132-.injective_explorer"
    "_rpc.Event.AttributesEntryR\nattributes\032="
    "\n\017AttributesEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005v"
    "alue\030\002 \001(\tR\005value:\0028\001\"w\n\tSignature\022\026\n\006pu"
    "bkey\030\001 \001(\tR\006pubkey\022\030\n\007address\030\002 \001(\tR\007add"
    "ress\022\032\n\010sequence\030\003 \001(\004R\010sequence\022\034\n\tsign"
    "ature\030\004 \001(\tR\tsignature\"\231\001\n\025GetContractTx"
    "sRequest\022\030\n\007address\030\001 \001(\tR\007address\022\024\n\005li"
    "mit\030\002 \001(\021R\005limit\022\022\n\004skip\030\003 \001(\004R\004skip\022\037\n\013"
    "from_number\030\004 \001(\022R\nfromNumber\022\033\n\tto_numb"
    "er\030\005 \001(\022R\010toNumber\"\212\001\n\026GetContractTxsRes"
    "ponse\0226\n\006paging\030\001 \001(\0132\036.injective_explor"
    "er_rpc.PagingR\006paging\0228\n\004data\030\002 \003(\0132$.in"
    "jective_explorer_rpc.TxDetailDataR\004data\""
    "V\n\020GetBlocksRequest\022\026\n\006before\030\001 \001(\004R\006bef"
    "ore\022\024\n\005after\030\002 \001(\004R\005after\022\024\n\005limit\030\003 \001(\021"
    "R\005limit\"\202\001\n\021GetBlocksResponse\0226\n\006paging\030"
    "\001 \001(\0132\036.injective_explorer_rpc.PagingR\006p"
    "aging\0225\n\004data\030\002 \003(\0132!.injective_explorer"
    "_rpc.BlockInfoR\004data\"\255\002\n\tBlockInfo\022\026\n\006he"
    "ight\030\001 \001(\004R\006height\022\032\n\010proposer\030\002 \001(\tR\010pr"
    "oposer\022\030\n\007moniker\030\003 \001(\tR\007moniker\022\035\n\nbloc"
    "k_hash\030\004 \001(\tR\tblockHash\022\037\n\013parent_hash\030\005"
    " \001(\tR\nparentHash\022&\n\017num_pre_commits\030\006 \001("
    "\022R\rnumPreCommits\022\027\n\007num_txs\030\007 \001(\022R\006numTx"
    "s\0223\n\003txs\030\010 \003(\0132!.injective_explorer_rpc."
    "TxDataRPCR\003txs\022\034\n\ttimestamp\030\t \001(\tR\ttimes"
    "tamp\"\203\002\n\tTxDataRPC\022\016\n\002id\030\001 \001(\tR\002id\022!\n\014bl"
    "ock_number\030\002 \001(\004R\013blockNumber\022\'\n\017block_t"
    "imestamp\030\003 \001(\tR\016blockTimestamp\022\022\n\004hash\030\004"
    " \001(\tR\004hash\022\034\n\tcodespace\030\005 \001(\tR\tcodespace"
    "\022\032\n\010messages\030\006 \001(\tR\010messages\022\033\n\ttx_numbe"
    "r\030\007 \001(\004R\010txNumber\022\033\n\terror_log\030\010 \001(\tR\010er"
    "rorLog\022\022\n\004code\030\t \001(\rR\004code\"!\n\017GetBlockRe"
    "quest\022\016\n\002id\030\001 \001(\tR\002id\"u\n\020GetBlockRespons"
    "e\022\014\n\001s\030\001 \001(\tR\001s\022\026\n\006errmsg\030\002 \001(\tR\006errmsg\022"
    ";\n\004data\030\003 \001(\0132\'.injective_explorer_rpc.B"
    "lockDetailInfoR\004data\"\315\002\n\017BlockDetailInfo"
    "\022\026\n\006height\030\001 \001(\004R\006height\022\032\n\010proposer\030\002 \001"
    "(\tR\010proposer\022\030\n\007moniker\030\003 \001(\tR\007moniker\022\035"
    "\n\nblock_hash\030\004 \001(\tR\tblockHash\022\037\n\013parent_"
    "hash\030\005 \001(\tR\nparentHash\022&\n\017num_pre_commit"
    "s\030\006 \001(\022R\rnumPreCommits\022\027\n\007num_txs\030\007 \001(\022R"
    "\006numTxs\022\033\n\ttotal_txs\030\010 \001(\022R\010totalTxs\0220\n\003"
    "txs\030\t \003(\0132\036.injective_explorer_rpc.TxDat"
    "aR\003txs\022\034\n\ttimestamp\030\n \001(\tR\ttimestamp\"\200\002\n"
    "\006TxData\022\016\n\002id\030\001 \001(\tR\002id\022!\n\014block_number\030"
    "\002 \001(\004R\013blockNumber\022\'\n\017block_timestamp\030\003 "
    "\001(\tR\016blockTimestamp\022\022\n\004hash\030\004 \001(\tR\004hash\022"
    "\034\n\tcodespace\030\005 \001(\tR\tcodespace\022\032\n\010message"
    "s\030\006 \001(\014R\010messages\022\033\n\ttx_number\030\007 \001(\004R\010tx"
    "Number\022\033\n\terror_log\030\010 \001(\tR\010errorLog\022\022\n\004c"
    "ode\030\t \001(\rR\004code\"\026\n\024GetValidatorsRequest\""
    "t\n\025GetValidatorsResponse\022\014\n\001s\030\001 \001(\tR\001s\022\026"
    "\n\006errmsg\030\002 \001(\tR\006errmsg\0225\n\004data\030\003 \003(\0132!.i"
    "njective_explorer_rpc.ValidatorR\004data\"\230\007"
    "\n\tValidator\022\016\n\002id\030\001 \001(\tR\002id\022\030\n\007moniker\030\002"
    " \001(\tR\007moniker\022)\n\020operator_address\030\003 \001(\tR"
    "\017operatorAddress\022+\n\021consensus_address\030\004 "
    "\001(\tR\020consensusAddress\022\026\n\006jailed\030\005 \001(\010R\006j"
    "ailed\022\026\n\006status\030\006 \001(\021R\006status\022\026\n\006tokens\030"
    "\007 \001(\tR\006tokens\022)\n\020delegator_shares\030\010 \001(\tR"
    "\017delegatorShares\022N\n\013description\030\t \001(\0132,."
    "injective_explorer_rpc.ValidatorDescript"
    "ionR\013description\022)\n\020unbonding_height\030\n \001"
    "(\022R\017unbondingHeight\022%\n\016unbonding_time\030\013 "
    "\001(\tR\runbondingTime\022\'\n\017commission_rate\030\014 "
    "\001(\tR\016commissionRate\022.\n\023commission_max_ra"
    "te\030\r \001(\tR\021commissionMaxRate\022;\n\032commissio"
    "n_max_change_rate\030\016 \001(\tR\027commissionMaxCh"
    "angeRate\0224\n\026commission_update_time\030\017 \001(\t"
    "R\024commissionUpdateTime\022\032\n\010proposed\030\020 \001(\004"
    "R\010proposed\022\026\n\006signed\030\021 \001(\004R\006signed\022\026\n\006mi"
    "ssed\030\022 \001(\004R\006missed\022\034\n\ttimestamp\030\023 \001(\tR\tt"
    "imestamp\022A\n\007uptimes\030\024 \003(\0132\'.injective_ex"
    "plorer_rpc.ValidatorUptimeR\007uptimes\022N\n\017s"
    "lashing_events\030\025 \003(\0132%.injective_explore"
    "r_rpc.SlashingEventR\016slashingEvents\022+\n\021u"
    "ptime_percentage\030\026 \001(\001R\020uptimePercentage"
    "\"\253\001\n\024ValidatorDescription\022\030\n\007moniker\030\001 \001"
    "(\tR\007moniker\022\032\n\010identity\030\002 \001(\tR\010identity\022"
    "\030\n\007website\030\003 \001(\tR\007website\022)\n\020security_co"
    "ntact\030\004 \001(\tR\017securityContact\022\030\n\007details\030"
    "\005 \001(\tR\007details\"L\n\017ValidatorUptime\022!\n\014blo"
    "ck_number\030\001 \001(\004R\013blockNumber\022\026\n\006status\030\002"
    " \001(\tR\006status\"\340\001\n\rSlashingEvent\022!\n\014block_"
    "number\030\001 \001(\004R\013blockNumber\022\'\n\017block_times"
    "tamp\030\002 \001(\tR\016blockTimestamp\022\030\n\007address\030\003 "
    "\001(\tR\007address\022\024\n\005power\030\004 \001(\004R\005power\022\026\n\006re"
    "ason\030\005 \001(\tR\006reason\022\026\n\006jailed\030\006 \001(\tR\006jail"
    "ed\022#\n\rmissed_blocks\030\007 \001(\004R\014missedBlocks\""
    "/\n\023GetValidatorRequest\022\030\n\007address\030\001 \001(\tR"
    "\007address\"s\n\024GetValidatorResponse\022\014\n\001s\030\001 "
    "\001(\tR\001s\022\026\n\006errmsg\030\002 \001(\tR\006errmsg\0225\n\004data\030\003"
    " \001(\0132!.injective_explorer_rpc.ValidatorR"
    "\004data\"5\n\031GetValidatorUptimeRequest\022\030\n\007ad"
    "dress\030\001 \001(\tR\007address\"\177\n\032GetValidatorUpti"
    "meResponse\022\014\n\001s\030\001 \001(\tR\001s\022\026\n\006errmsg\030\002 \001(\t"
    "R\006errmsg\022;\n\004data\030\003 \003(\0132\'.injective_explo"
    "rer_rpc.ValidatorUptimeR\004data\"\321\001\n\rGetTxs"
    "Request\022\026\n\006before\030\001 \001(\004R\006before\022\024\n\005after"
    "\030\002 \001(\004R\005after\022\024\n\005limit\030\003 \001(\021R\005limit\022\022\n\004s"
    "kip\030\004 \001(\004R\004skip\022\022\n\004type\030\005 \001(\tR\004type\022\026\n\006m"
    "odule\030\006 \001(\tR\006module\022\037\n\013from_number\030\007 \001(\022"
    "R\nfromNumber\022\033\n\tto_number\030\010 \001(\022R\010toNumbe"
    "r\"|\n\016GetTxsResponse\0226\n\006paging\030\001 \001(\0132\036.in"
    "jective_explorer_rpc.PagingR\006paging\0222\n\004d"
    "ata\030\002 \003(\0132\036.injective_explorer_rpc.TxDat"
    "aR\004data\"*\n\024GetTxByTxHashRequest\022\022\n\004hash\030"
    "\001 \001(\tR\004hash\"w\n\025GetTxByTxHashResponse\022\014\n\001"
    "s\030\001 \001(\tR\001s\022\026\n\006errmsg\030\002 \001(\tR\006errmsg\0228\n\004da"
    "ta\030\003 \001(\0132$.injective_explorer_rpc.TxDeta"
    "ilDataR\004data\"y\n\031GetPeggyDepositTxsReques"
    "t\022\026\n\006sender\030\001 \001(\tR\006sender\022\032\n\010receiver\030\002 "
    "\001(\tR\010receiver\022\024\n\005limit\030\003 \001(\021R\005limit\022\022\n\004s"
    "kip\030\004 \001(\004R\004skip\"Z\n\032GetPeggyDepositTxsRes"
    "ponse\022<\n\005field\030\001 \003(\0132&.injective_explore"
    "r_rpc.PeggyDepositTxR\005field\"\371\002\n\016PeggyDep"
    "ositTx\022\026\n\006sender\030\001 \001(\tR\006sender\022\032\n\010receiv"
    "er\030\002 \001(\tR\010receiver\022\037\n\013event_nonce\030\003 \001(\004R"
    "\neventNonce\022!\n\014event_height\030\004 \001(\004R\013event"
    "Height\022\026\n\006amount\030\005 \001(\tR\006amount\022\024\n\005denom\030"
    "\006 \001(\tR\005denom\0221\n\024orchestrator_address\030\007 \001"
    "(\tR\023orchestratorAddress\022\024\n\005state\030\010 \001(\tR\005"
    "state\022\035\n\nclaim_type\030\t \001(\021R\tclaimType\022\033\n\t"
    "tx_hashes\030\n \003(\tR\010txHashes\022\035\n\ncreated_at\030"
    "\013 \001(\tR\tcreatedAt\022\035\n\nupdated_at\030\014 \001(\tR\tup"
    "datedAt\"|\n\034GetPeggyWithdrawalTxsRequest\022"
    "\026\n\006sender\030\001 \001(\tR\006sender\022\032\n\010receiver\030\002 \001("
    "\tR\010receiver\022\024\n\005limit\030\003 \001(\021R\005limit\022\022\n\004ski"
    "p\030\004 \001(\004R\004skip\"`\n\035GetPeggyWithdrawalTxsRe"
    "sponse\022\?\n\005field\030\001 \003(\0132).injective_explor"
    "er_rpc.PeggyWithdrawalTxR\005field\"\207\004\n\021Pegg"
    "yWithdrawalTx\022\026\n\006sender\030\001 \001(\tR\006sender\022\032\n"
    "\010receiver\030\002 \001(\tR\010receiver\022\026\n\006amount\030\003 \001("
    "\tR\006amount\022\024\n\005denom\030\004 \001(\tR\005denom\022\035\n\nbridg"
    "e_fee\030\005 \001(\tR\tbridgeFee\022$\n\016outgoing_tx_id"
    "\030\006 \001(\004R\014outgoingTxId\022#\n\rbatch_timeout\030\007 "
    "\001(\004R\014batchTimeout\022\037\n\013batch_nonce\030\010 \001(\004R\n"
    "batchNonce\0221\n\024orchestrator_address\030\t \001(\t"
    "R\023orchestratorAddress\022\037\n\013event_nonce\030\n \001"
    "(\004R\neventNonce\022!\n\014event_height\030\013 \001(\004R\013ev"
    "entHeight\022\024\n\005state\030\014 \001(\tR\005state\022\035\n\nclaim"
    "_type\030\r \001(\021R\tclaimType\022\033\n\ttx_hashes\030\016 \003("
    "\tR\010txHashes\022\035\n\ncreated_at\030\017 \001(\tR\tcreated"
    "At\022\035\n\nupdated_at\030\020 \001(\tR\tupdatedAt\"\364\001\n\030Ge"
    "tIBCTransferTxsRequest\022\026\n\006sender\030\001 \001(\tR\006"
    "sender\022\032\n\010receiver\030\002 \001(\tR\010receiver\022\037\n\013sr"
    "c_channel\030\003 \001(\tR\nsrcChannel\022\031\n\010src_port\030"
    "\004 \001(\tR\007srcPort\022!\n\014dest_channel\030\005 \001(\tR\013de"
    "stChannel\022\033\n\tdest_port\030\006 \001(\tR\010destPort\022\024"
    "\n\005limit\030\007 \001(\021R\005limit\022\022\n\004skip\030\010 \001(\004R\004skip"
    "\"X\n\031GetIBCTransferTxsResponse\022;\n\005field\030\001"
    " \003(\0132%.injective_explorer_rpc.IBCTransfe"
    "rTxR\005field\"\236\004\n\rIBCTransferTx\022\026\n\006sender\030\001"
    " \001(\tR\006sender\022\032\n\010receiver\030\002 \001(\tR\010receiver"
    "\022\037\n\013source_port\030\003 \001(\tR\nsourcePort\022%\n\016sou"
    "rce_channel\030\004 \001(\tR\rsourceChannel\022)\n\020dest"
    "ination_port\030\005 \001(\tR\017destinationPort\022/\n\023d"
    "estination_channel\030\006 \001(\tR\022destinationCha"
    "nnel\022\026\n\006amount\030\007 \001(\tR\006amount\022\024\n\005denom\030\010 "
    "\001(\tR\005denom\022%\n\016timeout_height\030\t \001(\tR\rtime"
    "outHeight\022+\n\021timeout_timestamp\030\n \001(\004R\020ti"
    "meoutTimestamp\022\'\n\017packet_sequence\030\013 \001(\004R"
    "\016packetSequence\022\031\n\010data_hex\030\014 \001(\014R\007dataH"
    "ex\022\024\n\005state\030\r \001(\tR\005state\022\033\n\ttx_hashes\030\016 "
    "\003(\tR\010txHashes\022\035\n\ncreated_at\030\017 \001(\tR\tcreat"
    "edAt\022\035\n\nupdated_at\030\020 \001(\tR\tupdatedAt\"i\n\023G"
    "etWasmCodesRequest\022\024\n\005limit\030\001 \001(\021R\005limit"
    "\022\037\n\013from_number\030\002 \001(\022R\nfromNumber\022\033\n\tto_"
    "number\030\003 \001(\022R\010toNumber\"\204\001\n\024GetWasmCodesR"
    "esponse\0226\n\006paging\030\001 \001(\0132\036.injective_expl"
    "orer_rpc.PagingR\006paging\0224\n\004data\030\002 \003(\0132 ."
    "injective_explorer_rpc.WasmCodeR\004data\"\342\003"
    "\n\010WasmCode\022\027\n\007code_id\030\001 \001(\004R\006codeId\022\027\n\007t"
    "x_hash\030\002 \001(\tR\006txHash\022<\n\010checksum\030\003 \001(\0132 "
    ".injective_explorer_rpc.ChecksumR\010checks"
    "um\022\035\n\ncreated_at\030\004 \001(\004R\tcreatedAt\022#\n\rcon"
    "tract_type\030\005 \001(\tR\014contractType\022\030\n\007versio"
    "n\030\006 \001(\tR\007version\022J\n\npermission\030\007 \001(\0132*.i"
    "njective_explorer_rpc.ContractPermission"
    "R\npermission\022\037\n\013code_schema\030\010 \001(\tR\ncodeS"
    "chema\022\033\n\tcode_view\030\t \001(\tR\010codeView\022\"\n\014in"
    "stantiates\030\n \001(\004R\014instantiates\022\030\n\007creato"
    "r\030\013 \001(\tR\007creator\022\037\n\013code_number\030\014 \001(\022R\nc"
    "odeNumber\022\037\n\013proposal_id\030\r \001(\022R\nproposal"
    "Id\"<\n\010Checksum\022\034\n\talgorithm\030\001 \001(\tR\talgor"
    "ithm\022\022\n\004hash\030\002 \001(\tR\004hash\"O\n\022ContractPerm"
    "ission\022\037\n\013access_type\030\001 \001(\021R\naccessType\022"
    "\030\n\007address\030\002 \001(\tR\007address\"1\n\026GetWasmCode"
    "ByIDRequest\022\027\n\007code_id\030\001 \001(\022R\006codeId\"\361\003\n"
    "\027GetWasmCodeByIDResponse\022\027\n\007code_id\030\001 \001("
    "\004R\006codeId\022\027\n\007tx_hash\030\002 \001(\tR\006txHash\022<\n\010ch"
    "ecksum\030\003 \001(\0132 .injective_explorer_rpc.Ch"
    "ecksumR\010checksum\022\035\n\ncreated_at\030\004 \001(\004R\tcr"
    "eatedAt\022#\n\rcontract_type\030\005 \001(\tR\014contract"
    "Type\022\030\n\007version\030\006 \001(\tR\007version\022J\n\npermis"
    "sion\030\007 \001(\0132*.injective_explorer_rpc.Cont"
    "ractPermissionR\npermission\022\037\n\013code_schem"
    "a\030\010 \001(\tR\ncodeSchema\022\033\n\tcode_view\030\t \001(\tR\010"
    "codeView\022\"\n\014instantiates\030\n \001(\004R\014instanti"
    "ates\022\030\n\007creator\030\013 \001(\tR\007creator\022\037\n\013code_n"
    "umber\030\014 \001(\022R\ncodeNumber\022\037\n\013proposal_id\030\r"
    " \001(\022R\nproposalId\"\273\001\n\027GetWasmContractsReq"
    "uest\022\024\n\005limit\030\001 \001(\021R\005limit\022\027\n\007code_id\030\002 "
    "\001(\022R\006codeId\022\037\n\013from_number\030\003 \001(\022R\nfromNu"
    "mber\022\033\n\tto_number\030\004 \001(\022R\010toNumber\022\037\n\013ass"
    "ets_only\030\005 \001(\010R\nassetsOnly\022\022\n\004skip\030\006 \001(\022"
    "R\004skip\"\214\001\n\030GetWasmContractsResponse\0226\n\006p"
    "aging\030\001 \001(\0132\036.injective_explorer_rpc.Pag"
    "ingR\006paging\0228\n\004data\030\002 \003(\0132$.injective_ex"
    "plorer_rpc.WasmContractR\004data\"\351\004\n\014WasmCo"
    "ntract\022\024\n\005label\030\001 \001(\tR\005label\022\030\n\007address\030"
    "\002 \001(\tR\007address\022\027\n\007tx_hash\030\003 \001(\tR\006txHash\022"
    "\030\n\007creator\030\004 \001(\tR\007creator\022\032\n\010executes\030\005 "
    "\001(\004R\010executes\022\'\n\017instantiated_at\030\006 \001(\004R\016"
    "instantiatedAt\022!\n\014init_message\030\007 \001(\tR\013in"
    "itMessage\022(\n\020last_executed_at\030\010 \001(\004R\016las"
    "tExecutedAt\022:\n\005funds\030\t \003(\0132$.injective_e"
    "xplorer_rpc.ContractFundR\005funds\022\027\n\007code_"
    "id\030\n \001(\004R\006codeId\022\024\n\005admin\030\013 \001(\tR\005admin\0226"
    "\n\027current_migrate_message\030\014 \001(\tR\025current"
    "MigrateMessage\022\'\n\017contract_number\030\r \001(\022R"
    "\016contractNumber\022\030\n\007version\030\016 \001(\tR\007versio"
    "n\022\022\n\004type\030\017 \001(\tR\004type\022I\n\rcw20_metadata\030\020"
    " \001(\0132$.injective_explorer_rpc.Cw20Metada"
    "taR\014cw20Metadata\022\037\n\013proposal_id\030\021 \001(\022R\np"
    "roposalId\"<\n\014ContractFund\022\024\n\005denom\030\001 \001(\t"
    "R\005denom\022\026\n\006amount\030\002 \001(\tR\006amount\"\246\001\n\014Cw20"
    "Metadata\022D\n\ntoken_info\030\001 \001(\0132%.injective"
    "_explorer_rpc.Cw20TokenInfoR\ttokenInfo\022P"
    "\n\016marketing_info\030\002 \001(\0132).injective_explo"
    "rer_rpc.Cw20MarketingInfoR\rmarketingInfo"
    "\"z\n\rCw20TokenInfo\022\022\n\004name\030\001 \001(\tR\004name\022\026\n"
    "\006symbol\030\002 \001(\tR\006symbol\022\032\n\010decimals\030\003 \001(\022R"
    "\010decimals\022!\n\014total_supply\030\004 \001(\tR\013totalSu"
    "pply\"\201\001\n\021Cw20MarketingInfo\022\030\n\007project\030\001 "
    "\001(\tR\007project\022 \n\013description\030\002 \001(\tR\013descr"
    "iption\022\022\n\004logo\030\003 \001(\tR\004logo\022\034\n\tmarketing\030"
    "\004 \001(\014R\tmarketing\"L\n\037GetWasmContractByAdd"
    "ressRequest\022)\n\020contract_address\030\001 \001(\tR\017c"
    "ontractAddress\"\375\004\n GetWasmContractByAddr"
    "essResponse\022\024\n\005label\030\001 \001(\tR\005label\022\030\n\007add"
    "ress\030\002 \001(\tR\007address\022\027\n\007tx_hash\030\003 \001(\tR\006tx"
    "Hash\022\030\n\007creator\030\004 \001(\tR\007creator\022\032\n\010execut"
    "es\030\005 \001(\004R\010executes\022\'\n\017instantiated_at\030\006 "
    "\001(\004R\016instantiatedAt\022!\n\014init_message\030\007 \001("
    "\tR\013initMessage\022(\n\020last_executed_at\030\010 \001(\004"
    "R\016lastExecutedAt\022:\n\005funds\030\t \003(\0132$.inject"
    "ive_explorer_rpc.ContractFundR\005funds\022\027\n\007"
    "code_id\030\n \001(\004R\006codeId\022\024\n\005admin\030\013 \001(\tR\005ad"
    "min\0226\n\027current_migrate_message\030\014 \001(\tR\025cu"
    "rrentMigrateMessage\022\'\n\017contract_number\030\r"
    " \001(\022R\016contractNumber\022\030\n\007version\030\016 \001(\tR\007v"
    "ersion\022\022\n\004type\030\017 \001(\tR\004type\022I\n\rcw20_metad"
    "ata\030\020 \001(\0132$.injective_explorer_rpc.Cw20M"
    "etadataR\014cw20Metadata\022\037\n\013proposal_id\030\021 \001"
    "(\022R\nproposalId\"G\n\025GetCw20BalanceRequest\022"
    "\030\n\007address\030\001 \001(\tR\007address\022\024\n\005limit\030\002 \001(\021"
    "R\005limit\"W\n\026GetCw20BalanceResponse\022=\n\005fie"
    "ld\030\001 \003(\0132\'.injective_explorer_rpc.WasmCw"
    "20BalanceR\005field\"\332\001\n\017WasmCw20Balance\022)\n\020"
    "contract_address\030\001 \001(\tR\017contractAddress\022"
    "\030\n\007account\030\002 \001(\tR\007account\022\030\n\007balance\030\003 \001"
    "(\tR\007balance\022\035\n\nupdated_at\030\004 \001(\022R\tupdated"
    "At\022I\n\rcw20_metadata\030\005 \001(\0132$.injective_ex"
    "plorer_rpc.Cw20MetadataR\014cw20Metadata\"1\n"
    "\017RelayersRequest\022\036\n\013market_i_ds\030\001 \003(\tR\tm"
    "arketIDs\"P\n\020RelayersResponse\022<\n\005field\030\001 "
    "\003(\0132&.injective_explorer_rpc.RelayerMark"
    "etsR\005field\"j\n\016RelayerMarkets\022\033\n\tmarket_i"
    "d\030\001 \001(\tR\010marketId\022;\n\010relayers\030\002 \003(\0132\037.in"
    "jective_explorer_rpc.RelayerR\010relayers\"/"
    "\n\007Relayer\022\022\n\004name\030\001 \001(\tR\004name\022\020\n\003cta\030\002 \001"
    "(\tR\003cta\"\022\n\020StreamTxsRequest\"\213\002\n\021StreamTx"
    "sResponse\022\016\n\002id\030\001 \001(\tR\002id\022!\n\014block_numbe"
    "r\030\002 \001(\004R\013blockNumber\022\'\n\017block_timestamp\030"
    "\003 \001(\tR\016blockTimestamp\022\022\n\004hash\030\004 \001(\tR\004has"
    "h\022\034\n\tcodespace\030\005 \001(\tR\tcodespace\022\032\n\010messa"
    "ges\030\006 \001(\tR\010messages\022\033\n\ttx_number\030\007 \001(\004R\010"
    "txNumber\022\033\n\terror_log\030\010 \001(\tR\010errorLog\022\022\n"
    "\004code\030\t \001(\rR\004code\"\025\n\023StreamBlocksRequest"
    "\"\270\002\n\024StreamBlocksResponse\022\026\n\006height\030\001 \001("
    "\004R\006height\022\032\n\010proposer\030\002 \001(\tR\010proposer\022\030\n"
    "\007moniker\030\003 \001(\tR\007moniker\022\035\n\nblock_hash\030\004 "
    "\001(\tR\tblockHash\022\037\n\013parent_hash\030\005 \001(\tR\npar"
    "entHash\022&\n\017num_pre_commits\030\006 \001(\022R\rnumPre"
    "Commits\022\027\n\007num_txs\030\007 \001(\022R\006numTxs\0223\n\003txs\030"
    "\010 \003(\0132!.injective_explorer_rpc.TxDataRPC"
    "R\003txs\022\034\n\ttimestamp\030\t \001(\tR\ttimestamp2\330\021\n\024"
    "InjectiveExplorerRPC\022l\n\rGetAccountTxs\022,."
    "injective_explorer_rpc.GetAccountTxsRequ"
    "est\032-.injective_explorer_rpc.GetAccountT"
    "xsResponse\022o\n\016GetContractTxs\022-.injective"
    "_explorer_rpc.GetContractTxsRequest\032..in"
    "jective_explorer_rpc.GetContractTxsRespo"
    "nse\022`\n\tGetBlocks\022(.injective_explorer_rp"
    "c.GetBlocksRequest\032).injective_explorer_"
    "rpc.GetBlocksResponse\022]\n\010GetBlock\022\'.inje"
    "ctive_explorer_rpc.GetBlockRequest\032(.inj"
    "ective_explorer_rpc.GetBlockResponse\022l\n\r"
    "GetValidators\022,.injective_explorer_rpc.G"
    "etValidatorsRequest\032-.injective_explorer"
    "_rpc.GetValidatorsResponse\022i\n\014GetValidat"
    "or\022+.injective_explorer_rpc.GetValidator"
    "Request\032,.injective_explorer_rpc.GetVali"
    "datorResponse\022{\n\022GetValidatorUptime\0221.in"
    "jective_explorer_rpc.GetValidatorUptimeR"
    "equest\0322.injective_explorer_rpc.GetValid"
    "atorUptimeResponse\022W\n\006GetTxs\022%.injective"
    "_explorer_rpc.GetTxsRequest\032&.injective_"
    "explorer_rpc.GetTxsResponse\022l\n\rGetTxByTx"
    "Hash\022,.injective_explorer_rpc.GetTxByTxH"
    "ashRequest\032-.injective_explorer_rpc.GetT"
    "xByTxHashResponse\022{\n\022GetPeggyDepositTxs\022"
    "1.injective_explorer_rpc.GetPeggyDeposit"
    "TxsRequest\0322.injective_explorer_rpc.GetP"
    "eggyDepositTxsResponse\022\204\001\n\025GetPeggyWithd"
    "rawalTxs\0224.injective_explorer_rpc.GetPeg"
    "gyWithdrawalTxsRequest\0325.injective_explo"
    "rer_rpc.GetPeggyWithdrawalTxsResponse\022x\n"
    "\021GetIBCTransferTxs\0220.injective_explorer_"
    "rpc.GetIBCTransferTxsRequest\0321.injective"
    "_explorer_rpc.GetIBCTransferTxsResponse\022"
    "i\n\014GetWasmCodes\022+.injective_explorer_rpc"
    ".GetWasmCodesRequest\032,.injective_explore"
    "r_rpc.GetWasmCodesResponse\022r\n\017GetWasmCod"
    "eByID\022..injective_explorer_rpc.GetWasmCo"
    "deByIDRequest\032/.injective_explorer_rpc.G"
    "etWasmCodeByIDResponse\022u\n\020GetWasmContrac"
    "ts\022/.injective_explorer_rpc.GetWasmContr"
    "actsRequest\0320.injective_explorer_rpc.Get"
    "WasmContractsResponse\022\215\001\n\030GetWasmContrac"
    "tByAddress\0227.injective_explorer_rpc.GetW"
    "asmContractByAddressRequest\0328.injective_"
    "explorer_rpc.GetWasmContractByAddressRes"
    "ponse\022o\n\016GetCw20Balance\022-.injective_expl"
    "orer_rpc.GetCw20BalanceRequest\032..injecti"
    "ve_explorer_rpc.GetCw20BalanceResponse\022]"
    "\n\010Relayers\022\'.injective_explorer_rpc.Rela"
    "yersRequest\032(.injective_explorer_rpc.Rel"
    "ayersResponse\022b\n\tStreamTxs\022(.injective_e"
    "xplorer_rpc.StreamTxsRequest\032).injective"
    "_explorer_rpc.StreamTxsResponse0\001\022k\n\014Str"
    "eamBlocks\022+.injective_explorer_rpc.Strea"
    "mBlocksRequest\032,.injective_explorer_rpc."
    "StreamBlocksResponse0\001B\302\001\n\032com.injective"
    "_explorer_rpcB\031InjectiveExplorerRpcProto"
    "P\001Z\031/injective_explorer_rpcpb\242\002\003IXX\252\002\024In"
    "jectiveExplorerRpc\312\002\024InjectiveExplorerRp"
    "c\342\002 InjectiveExplorerRpc\\GPBMetadata\352\002\024I"
    "njectiveExplorerRpcb\006proto3"
};
static ::absl::once_flag descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto = {
    false,
    false,
    15507,
    descriptor_table_protodef_exchange_2finjective_5fexplorer_5frpc_2eproto,
    "exchange/injective_explorer_rpc.proto",
    &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
    nullptr,
    0,
    69,
    schemas,
    file_default_instances,
    TableStruct_exchange_2finjective_5fexplorer_5frpc_2eproto::offsets,
    file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto,
    file_level_enum_descriptors_exchange_2finjective_5fexplorer_5frpc_2eproto,
    file_level_service_descriptors_exchange_2finjective_5fexplorer_5frpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter() {
  return &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_2finjective_5fexplorer_5frpc_2eproto(&descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto);
namespace injective_explorer_rpc {
// ===================================================================

class GetAccountTxsRequest::_Internal {
 public:
};

GetAccountTxsRequest::GetAccountTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetAccountTxsRequest)
}
GetAccountTxsRequest::GetAccountTxsRequest(const GetAccountTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountTxsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.module_) {}

    , decltype(_impl_.before_) {}

    , decltype(_impl_.after_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.from_number_) {}

    , decltype(_impl_.to_number_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module().empty()) {
    _this->_impl_.module_.Set(from._internal_module(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.before_, &from._impl_.before_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.before_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetAccountTxsRequest)
}

inline void GetAccountTxsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.module_) {}

    , decltype(_impl_.before_) { ::uint64_t{0u} }

    , decltype(_impl_.after_) { ::uint64_t{0u} }

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.from_number_) { ::int64_t{0} }

    , decltype(_impl_.to_number_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetAccountTxsRequest::~GetAccountTxsRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetAccountTxsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountTxsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.type_.Destroy();
  _impl_.module_.Destroy();
}

void GetAccountTxsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountTxsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetAccountTxsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.module_.ClearToEmpty();
  ::memset(&_impl_.before_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.before_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountTxsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetAccountTxsRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 before = 2 [json_name = "before"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 after = 3 [json_name = "after"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 4 [json_name = "limit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 5 [json_name = "skip"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string type = 6 [json_name = "type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetAccountTxsRequest.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string module = 7 [json_name = "module"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_module();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetAccountTxsRequest.module"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 from_number = 8 [json_name = "fromNumber"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.from_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 to_number = 9 [json_name = "toNumber"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.to_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetAccountTxsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetAccountTxsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetAccountTxsRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 before = 2 [json_name = "before"];
  if (this->_internal_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_before(), target);
  }

  // uint64 after = 3 [json_name = "after"];
  if (this->_internal_after() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_after(), target);
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_limit(), target);
  }

  // uint64 skip = 5 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_skip(), target);
  }

  // string type = 6 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetAccountTxsRequest.type");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string module = 7 [json_name = "module"];
  if (!this->_internal_module().empty()) {
    const std::string& _s = this->_internal_module();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetAccountTxsRequest.module");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // sint64 from_number = 8 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_from_number(), target);
  }

  // sint64 to_number = 9 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        9, this->_internal_to_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetAccountTxsRequest)
  return target;
}

::size_t GetAccountTxsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetAccountTxsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string type = 6 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // string module = 7 [json_name = "module"];
  if (!this->_internal_module().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_module());
  }

  // uint64 before = 2 [json_name = "before"];
  if (this->_internal_before() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_before());
  }

  // uint64 after = 3 [json_name = "after"];
  if (this->_internal_after() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_after());
  }

  // uint64 skip = 5 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 from_number = 8 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_from_number());
  }

  // sint64 to_number = 9 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_to_number());
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountTxsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountTxsRequest::GetClassData() const { return &_class_data_; }


void GetAccountTxsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountTxsRequest*>(&to_msg);
  auto& from = static_cast<const GetAccountTxsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetAccountTxsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_module().empty()) {
    _this->_internal_set_module(from._internal_module());
  }
  if (from._internal_before() != 0) {
    _this->_internal_set_before(from._internal_before());
  }
  if (from._internal_after() != 0) {
    _this->_internal_set_after(from._internal_after());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_from_number() != 0) {
    _this->_internal_set_from_number(from._internal_from_number());
  }
  if (from._internal_to_number() != 0) {
    _this->_internal_set_to_number(from._internal_to_number());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountTxsRequest::CopyFrom(const GetAccountTxsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetAccountTxsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountTxsRequest::IsInitialized() const {
  return true;
}

void GetAccountTxsRequest::InternalSwap(GetAccountTxsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.module_, lhs_arena,
                                       &other->_impl_.module_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccountTxsRequest, _impl_.limit_)
      + sizeof(GetAccountTxsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetAccountTxsRequest, _impl_.before_)>(
          reinterpret_cast<char*>(&_impl_.before_),
          reinterpret_cast<char*>(&other->_impl_.before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountTxsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[0]);
}
// ===================================================================

class GetAccountTxsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetAccountTxsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetAccountTxsResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Paging& paging(const GetAccountTxsResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Paging&
GetAccountTxsResponse::_Internal::paging(const GetAccountTxsResponse* msg) {
  return *msg->_impl_.paging_;
}
GetAccountTxsResponse::GetAccountTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetAccountTxsResponse)
}
GetAccountTxsResponse::GetAccountTxsResponse(const GetAccountTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAccountTxsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_explorer_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetAccountTxsResponse)
}

inline void GetAccountTxsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

GetAccountTxsResponse::~GetAccountTxsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetAccountTxsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAccountTxsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetAccountTxsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAccountTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetAccountTxsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAccountTxsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.TxDetailData data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetAccountTxsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetAccountTxsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  // repeated .injective_explorer_rpc.TxDetailData data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetAccountTxsResponse)
  return target;
}

::size_t GetAccountTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetAccountTxsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.TxDetailData data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAccountTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAccountTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAccountTxsResponse::GetClassData() const { return &_class_data_; }


void GetAccountTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAccountTxsResponse*>(&to_msg);
  auto& from = static_cast<const GetAccountTxsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetAccountTxsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_explorer_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccountTxsResponse::CopyFrom(const GetAccountTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetAccountTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAccountTxsResponse::IsInitialized() const {
  return true;
}

void GetAccountTxsResponse::InternalSwap(GetAccountTxsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAccountTxsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[1]);
}
// ===================================================================

class Paging::_Internal {
 public:
};

Paging::Paging(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Paging)
}
Paging::Paging(const Paging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Paging)
}

inline void Paging::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.total_) { ::int64_t{0} }

    , decltype(_impl_.from_) { 0 }

    , decltype(_impl_.to_) { 0 }

    , decltype(_impl_.count_by_subaccount_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Paging::~Paging() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Paging)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Paging::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Paging::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Paging::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Paging)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_by_subaccount_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.count_by_subaccount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Paging::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 total = 1 [json_name = "total"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 from = 2 [json_name = "from"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 to = 3 [json_name = "to"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 count_by_subaccount = 4 [json_name = "countBySubaccount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.count_by_subaccount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Paging::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Paging)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        1, this->_internal_total(), target);
  }

  // sint32 from = 2 [json_name = "from"];
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        2, this->_internal_from(), target);
  }

  // sint32 to = 3 [json_name = "to"];
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_to(), target);
  }

  // sint64 count_by_subaccount = 4 [json_name = "countBySubaccount"];
  if (this->_internal_count_by_subaccount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_count_by_subaccount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Paging)
  return target;
}

::size_t Paging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Paging)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_total());
  }

  // sint32 from = 2 [json_name = "from"];
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_from());
  }

  // sint32 to = 3 [json_name = "to"];
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_to());
  }

  // sint64 count_by_subaccount = 4 [json_name = "countBySubaccount"];
  if (this->_internal_count_by_subaccount() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_count_by_subaccount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Paging::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Paging::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Paging::GetClassData() const { return &_class_data_; }


void Paging::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Paging*>(&to_msg);
  auto& from = static_cast<const Paging&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Paging)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  if (from._internal_count_by_subaccount() != 0) {
    _this->_internal_set_count_by_subaccount(from._internal_count_by_subaccount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Paging::CopyFrom(const Paging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Paging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paging::IsInitialized() const {
  return true;
}

void Paging::InternalSwap(Paging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Paging, _impl_.count_by_subaccount_)
      + sizeof(Paging::_impl_.count_by_subaccount_)
      - PROTOBUF_FIELD_OFFSET(Paging, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Paging::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[2]);
}
// ===================================================================

class TxDetailData::_Internal {
 public:
  using HasBits = decltype(std::declval<TxDetailData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TxDetailData, _impl_._has_bits_);
  static const ::injective_explorer_rpc::GasFee& gas_fee(const TxDetailData* msg);
  static void set_has_gas_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::GasFee&
TxDetailData::_Internal::gas_fee(const TxDetailData* msg) {
  return *msg->_impl_.gas_fee_;
}
TxDetailData::TxDetailData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.TxDetailData)
}
TxDetailData::TxDetailData(const TxDetailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxDetailData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.signatures_){from._impl_.signatures_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.info_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.tx_type_) {}

    , decltype(_impl_.messages_) {}

    , decltype(_impl_.memo_) {}

    , decltype(_impl_.error_log_) {}

    , decltype(_impl_.gas_fee_){nullptr}
    , decltype(_impl_.block_number_) {}

    , decltype(_impl_.gas_wanted_) {}

    , decltype(_impl_.gas_used_) {}

    , decltype(_impl_.tx_number_) {}

    , decltype(_impl_.block_unix_timestamp_) {}

    , decltype(_impl_.code_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_timestamp().empty()) {
    _this->_impl_.block_timestamp_.Set(from._internal_block_timestamp(), _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.info_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), _this->GetArenaForAllocation());
  }
  _impl_.tx_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_type().empty()) {
    _this->_impl_.tx_type_.Set(from._internal_tx_type(), _this->GetArenaForAllocation());
  }
  _impl_.messages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messages_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messages().empty()) {
    _this->_impl_.messages_.Set(from._internal_messages(), _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.memo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), _this->GetArenaForAllocation());
  }
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_log().empty()) {
    _this->_impl_.error_log_.Set(from._internal_error_log(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.gas_fee_ = new ::injective_explorer_rpc::GasFee(*from._impl_.gas_fee_);
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.TxDetailData)
}

inline void TxDetailData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.signatures_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.info_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.tx_type_) {}

    , decltype(_impl_.messages_) {}

    , decltype(_impl_.memo_) {}

    , decltype(_impl_.error_log_) {}

    , decltype(_impl_.gas_fee_){nullptr}
    , decltype(_impl_.block_number_) { ::uint64_t{0u} }

    , decltype(_impl_.gas_wanted_) { ::int64_t{0} }

    , decltype(_impl_.gas_used_) { ::int64_t{0} }

    , decltype(_impl_.tx_number_) { ::uint64_t{0u} }

    , decltype(_impl_.block_unix_timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.code_) { 0u }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.info_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messages_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.memo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxDetailData::~TxDetailData() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.TxDetailData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxDetailData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_events()->~RepeatedPtrField();
  _internal_mutable_signatures()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.block_timestamp_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.data_.Destroy();
  _impl_.info_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.tx_type_.Destroy();
  _impl_.messages_.Destroy();
  _impl_.memo_.Destroy();
  _impl_.error_log_.Destroy();
  if (this != internal_default_instance()) delete _impl_.gas_fee_;
}

void TxDetailData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxDetailData::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.TxDetailData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_events()->Clear();
  _internal_mutable_signatures()->Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.block_timestamp_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.tx_type_.ClearToEmpty();
  _impl_.messages_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  _impl_.error_log_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.gas_fee_ != nullptr);
    _impl_.gas_fee_->Clear();
  }
  ::memset(&_impl_.block_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxDetailData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDetailData.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 block_number = 2 [json_name = "blockNumber"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string block_timestamp = 3 [json_name = "blockTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_block_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDetailData.block_timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string hash = 4 [json_name = "hash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDetailData.hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 code = 5 [json_name = "code"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 6 [json_name = "data"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string info = 8 [json_name = "info"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDetailData.info"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 gas_wanted = 9 [json_name = "gasWanted"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.gas_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 gas_used = 10 [json_name = "gasUsed"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.GasFee gas_fee = 11 [json_name = "gasFee"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_gas_fee(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string codespace = 12 [json_name = "codespace"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDetailData.codespace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.Event events = 13 [json_name = "events"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tx_type = 14 [json_name = "txType"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_tx_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDetailData.tx_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes messages = 15 [json_name = "messages"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_messages();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.Signature signatures = 16 [json_name = "signatures"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string memo = 17 [json_name = "memo"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDetailData.memo"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 tx_number = 18 [json_name = "txNumber"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _impl_.tx_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 block_unix_timestamp = 19 [json_name = "blockUnixTimestamp"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _impl_.block_unix_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error_log = 20 [json_name = "errorLog"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_error_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDetailData.error_log"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TxDetailData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.TxDetailData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDetailData.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 block_number = 2 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_block_number(), target);
  }

  // string block_timestamp = 3 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    const std::string& _s = this->_internal_block_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDetailData.block_timestamp");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDetailData.hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint32 code = 5 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_code(), target);
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // string info = 8 [json_name = "info"];
  if (!this->_internal_info().empty()) {
    const std::string& _s = this->_internal_info();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDetailData.info");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // sint64 gas_wanted = 9 [json_name = "gasWanted"];
  if (this->_internal_gas_wanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        9, this->_internal_gas_wanted(), target);
  }

  // sint64 gas_used = 10 [json_name = "gasUsed"];
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        10, this->_internal_gas_used(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.GasFee gas_fee = 11 [json_name = "gasFee"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::gas_fee(this),
        _Internal::gas_fee(this).GetCachedSize(), target, stream);
  }

  // string codespace = 12 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    const std::string& _s = this->_internal_codespace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDetailData.codespace");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // repeated .injective_explorer_rpc.Event events = 13 [json_name = "events"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string tx_type = 14 [json_name = "txType"];
  if (!this->_internal_tx_type().empty()) {
    const std::string& _s = this->_internal_tx_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDetailData.tx_type");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // bytes messages = 15 [json_name = "messages"];
  if (!this->_internal_messages().empty()) {
    const std::string& _s = this->_internal_messages();
    target = stream->WriteBytesMaybeAliased(15, _s, target);
  }

  // repeated .injective_explorer_rpc.Signature signatures = 16 [json_name = "signatures"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_signatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string memo = 17 [json_name = "memo"];
  if (!this->_internal_memo().empty()) {
    const std::string& _s = this->_internal_memo();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDetailData.memo");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // uint64 tx_number = 18 [json_name = "txNumber"];
  if (this->_internal_tx_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        18, this->_internal_tx_number(), target);
  }

  // uint64 block_unix_timestamp = 19 [json_name = "blockUnixTimestamp"];
  if (this->_internal_block_unix_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        19, this->_internal_block_unix_timestamp(), target);
  }

  // string error_log = 20 [json_name = "errorLog"];
  if (!this->_internal_error_log().empty()) {
    const std::string& _s = this->_internal_error_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDetailData.error_log");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.TxDetailData)
  return target;
}

::size_t TxDetailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.TxDetailData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.Event events = 13 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective_explorer_rpc.Signature signatures = 16 [json_name = "signatures"];
  total_size += 2UL * this->_internal_signatures_size();
  for (const auto& msg : this->_internal_signatures()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string block_timestamp = 3 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_timestamp());
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hash());
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // string info = 8 [json_name = "info"];
  if (!this->_internal_info().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_info());
  }

  // string codespace = 12 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_codespace());
  }

  // string tx_type = 14 [json_name = "txType"];
  if (!this->_internal_tx_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_type());
  }

  // bytes messages = 15 [json_name = "messages"];
  if (!this->_internal_messages().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_messages());
  }

  // string memo = 17 [json_name = "memo"];
  if (!this->_internal_memo().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_memo());
  }

  // string error_log = 20 [json_name = "errorLog"];
  if (!this->_internal_error_log().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error_log());
  }

  // .injective_explorer_rpc.GasFee gas_fee = 11 [json_name = "gasFee"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.gas_fee_);
  }

  // uint64 block_number = 2 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_block_number());
  }

  // sint64 gas_wanted = 9 [json_name = "gasWanted"];
  if (this->_internal_gas_wanted() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_gas_wanted());
  }

  // sint64 gas_used = 10 [json_name = "gasUsed"];
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_gas_used());
  }

  // uint64 tx_number = 18 [json_name = "txNumber"];
  if (this->_internal_tx_number() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_tx_number());
  }

  // uint64 block_unix_timestamp = 19 [json_name = "blockUnixTimestamp"];
  if (this->_internal_block_unix_timestamp() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_block_unix_timestamp());
  }

  // uint32 code = 5 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxDetailData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxDetailData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxDetailData::GetClassData() const { return &_class_data_; }


void TxDetailData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxDetailData*>(&to_msg);
  auto& from = static_cast<const TxDetailData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.TxDetailData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_mutable_signatures()->MergeFrom(from._internal_signatures());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_block_timestamp().empty()) {
    _this->_internal_set_block_timestamp(from._internal_block_timestamp());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_tx_type().empty()) {
    _this->_internal_set_tx_type(from._internal_tx_type());
  }
  if (!from._internal_messages().empty()) {
    _this->_internal_set_messages(from._internal_messages());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  if (!from._internal_error_log().empty()) {
    _this->_internal_set_error_log(from._internal_error_log());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_gas_fee()->::injective_explorer_rpc::GasFee::MergeFrom(
        from._internal_gas_fee());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_gas_wanted() != 0) {
    _this->_internal_set_gas_wanted(from._internal_gas_wanted());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_tx_number() != 0) {
    _this->_internal_set_tx_number(from._internal_tx_number());
  }
  if (from._internal_block_unix_timestamp() != 0) {
    _this->_internal_set_block_unix_timestamp(from._internal_block_unix_timestamp());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxDetailData::CopyFrom(const TxDetailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.TxDetailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxDetailData::IsInitialized() const {
  return true;
}

void TxDetailData::InternalSwap(TxDetailData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
  _internal_mutable_signatures()->InternalSwap(other->_internal_mutable_signatures());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_timestamp_, lhs_arena,
                                       &other->_impl_.block_timestamp_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.info_, lhs_arena,
                                       &other->_impl_.info_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codespace_, lhs_arena,
                                       &other->_impl_.codespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_type_, lhs_arena,
                                       &other->_impl_.tx_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messages_, lhs_arena,
                                       &other->_impl_.messages_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.memo_, lhs_arena,
                                       &other->_impl_.memo_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_log_, lhs_arena,
                                       &other->_impl_.error_log_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxDetailData, _impl_.code_)
      + sizeof(TxDetailData::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(TxDetailData, _impl_.gas_fee_)>(
          reinterpret_cast<char*>(&_impl_.gas_fee_),
          reinterpret_cast<char*>(&other->_impl_.gas_fee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxDetailData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[3]);
}
// ===================================================================

class GasFee::_Internal {
 public:
};

GasFee::GasFee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GasFee)
}
GasFee::GasFee(const GasFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GasFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){from._impl_.amount_}
    , decltype(_impl_.payer_) {}

    , decltype(_impl_.granter_) {}

    , decltype(_impl_.gas_limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payer().empty()) {
    _this->_impl_.payer_.Set(from._internal_payer(), _this->GetArenaForAllocation());
  }
  _impl_.granter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.granter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_granter().empty()) {
    _this->_impl_.granter_.Set(from._internal_granter(), _this->GetArenaForAllocation());
  }
  _this->_impl_.gas_limit_ = from._impl_.gas_limit_;
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GasFee)
}

inline void GasFee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){arena}
    , decltype(_impl_.payer_) {}

    , decltype(_impl_.granter_) {}

    , decltype(_impl_.gas_limit_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.granter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.granter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GasFee::~GasFee() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GasFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GasFee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_amount()->~RepeatedPtrField();
  _impl_.payer_.Destroy();
  _impl_.granter_.Destroy();
}

void GasFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GasFee::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GasFee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_amount()->Clear();
  _impl_.payer_.ClearToEmpty();
  _impl_.granter_.ClearToEmpty();
  _impl_.gas_limit_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GasFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_explorer_rpc.CosmosCoin amount = 1 [json_name = "amount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 gas_limit = 2 [json_name = "gasLimit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.gas_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string payer = 3 [json_name = "payer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GasFee.payer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string granter = 4 [json_name = "granter"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_granter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GasFee.granter"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GasFee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GasFee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.CosmosCoin amount = 1 [json_name = "amount"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_amount_size()); i < n; i++) {
    const auto& repfield = this->_internal_amount(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 gas_limit = 2 [json_name = "gasLimit"];
  if (this->_internal_gas_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_gas_limit(), target);
  }

  // string payer = 3 [json_name = "payer"];
  if (!this->_internal_payer().empty()) {
    const std::string& _s = this->_internal_payer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GasFee.payer");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string granter = 4 [json_name = "granter"];
  if (!this->_internal_granter().empty()) {
    const std::string& _s = this->_internal_granter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GasFee.granter");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GasFee)
  return target;
}

::size_t GasFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GasFee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.CosmosCoin amount = 1 [json_name = "amount"];
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->_internal_amount()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string payer = 3 [json_name = "payer"];
  if (!this->_internal_payer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_payer());
  }

  // string granter = 4 [json_name = "granter"];
  if (!this->_internal_granter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_granter());
  }

  // uint64 gas_limit = 2 [json_name = "gasLimit"];
  if (this->_internal_gas_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_gas_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GasFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GasFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GasFee::GetClassData() const { return &_class_data_; }


void GasFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GasFee*>(&to_msg);
  auto& from = static_cast<const GasFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GasFee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amount()->MergeFrom(from._internal_amount());
  if (!from._internal_payer().empty()) {
    _this->_internal_set_payer(from._internal_payer());
  }
  if (!from._internal_granter().empty()) {
    _this->_internal_set_granter(from._internal_granter());
  }
  if (from._internal_gas_limit() != 0) {
    _this->_internal_set_gas_limit(from._internal_gas_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GasFee::CopyFrom(const GasFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GasFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasFee::IsInitialized() const {
  return true;
}

void GasFee::InternalSwap(GasFee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_amount()->InternalSwap(other->_internal_mutable_amount());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payer_, lhs_arena,
                                       &other->_impl_.payer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.granter_, lhs_arena,
                                       &other->_impl_.granter_, rhs_arena);

  swap(_impl_.gas_limit_, other->_impl_.gas_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GasFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[4]);
}
// ===================================================================

class CosmosCoin::_Internal {
 public:
};

CosmosCoin::CosmosCoin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.CosmosCoin)
}
CosmosCoin::CosmosCoin(const CosmosCoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CosmosCoin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.CosmosCoin)
}

inline void CosmosCoin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CosmosCoin::~CosmosCoin() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.CosmosCoin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CosmosCoin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  _impl_.amount_.Destroy();
}

void CosmosCoin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CosmosCoin::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.CosmosCoin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosmosCoin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.CosmosCoin.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.CosmosCoin.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CosmosCoin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.CosmosCoin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.CosmosCoin.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.CosmosCoin.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.CosmosCoin)
  return target;
}

::size_t CosmosCoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.CosmosCoin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CosmosCoin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CosmosCoin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CosmosCoin::GetClassData() const { return &_class_data_; }


void CosmosCoin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CosmosCoin*>(&to_msg);
  auto& from = static_cast<const CosmosCoin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.CosmosCoin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CosmosCoin::CopyFrom(const CosmosCoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.CosmosCoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosmosCoin::IsInitialized() const {
  return true;
}

void CosmosCoin::InternalSwap(CosmosCoin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CosmosCoin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[5]);
}
// ===================================================================

Event_AttributesEntry_DoNotUse::Event_AttributesEntry_DoNotUse() {}
Event_AttributesEntry_DoNotUse::Event_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Event_AttributesEntry_DoNotUse::MergeFrom(const Event_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Event_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[6]);
}
// ===================================================================

class Event::_Internal {
 public:
};

Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Event)
}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.type_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.~MapField();
  _impl_.type_.Destroy();
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Event)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Event.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> attributes = 2 [json_name = "attributes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Event)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Event.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // map<string, string> attributes = 2 [json_name = "attributes"];
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Event_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Event.attributes");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Event.attributes");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 2 [json_name = "attributes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += Event_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[7]);
}
// ===================================================================

class Signature::_Internal {
 public:
};

Signature::Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Signature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pubkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pubkey().empty()) {
    _this->_impl_.pubkey_.Set(from._internal_pubkey(), _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Signature)
}

inline void Signature::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pubkey_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pubkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.pubkey_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Signature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Signature::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pubkey_.Destroy();
  _impl_.address_.Destroy();
  _impl_.signature_.Destroy();
}

void Signature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Signature)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pubkey_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pubkey = 1 [json_name = "pubkey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Signature.pubkey"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Signature.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signature = 4 [json_name = "signature"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Signature.signature"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Signature::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Signature)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pubkey = 1 [json_name = "pubkey"];
  if (!this->_internal_pubkey().empty()) {
    const std::string& _s = this->_internal_pubkey();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Signature.pubkey");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Signature.address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  // string signature = 4 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Signature.signature");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Signature)
  return target;
}

::size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Signature)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pubkey = 1 [json_name = "pubkey"];
  if (!this->_internal_pubkey().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_pubkey());
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string signature = 4 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signature());
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Signature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Signature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Signature::GetClassData() const { return &_class_data_; }


void Signature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Signature*>(&to_msg);
  auto& from = static_cast<const Signature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Signature)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pubkey().empty()) {
    _this->_internal_set_pubkey(from._internal_pubkey());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pubkey_, lhs_arena,
                                       &other->_impl_.pubkey_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[8]);
}
// ===================================================================

class GetContractTxsRequest::_Internal {
 public:
};

GetContractTxsRequest::GetContractTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetContractTxsRequest)
}
GetContractTxsRequest::GetContractTxsRequest(const GetContractTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetContractTxsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.from_number_) {}

    , decltype(_impl_.to_number_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetContractTxsRequest)
}

inline void GetContractTxsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.from_number_) { ::int64_t{0} }

    , decltype(_impl_.to_number_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetContractTxsRequest::~GetContractTxsRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetContractTxsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetContractTxsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void GetContractTxsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetContractTxsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetContractTxsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContractTxsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetContractTxsRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 3 [json_name = "skip"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 from_number = 4 [json_name = "fromNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.from_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 to_number = 5 [json_name = "toNumber"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.to_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetContractTxsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetContractTxsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetContractTxsRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // sint32 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        2, this->_internal_limit(), target);
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_skip(), target);
  }

  // sint64 from_number = 4 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_from_number(), target);
  }

  // sint64 to_number = 5 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        5, this->_internal_to_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetContractTxsRequest)
  return target;
}

::size_t GetContractTxsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetContractTxsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 from_number = 4 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_from_number());
  }

  // sint64 to_number = 5 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_to_number());
  }

  // sint32 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetContractTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetContractTxsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetContractTxsRequest::GetClassData() const { return &_class_data_; }


void GetContractTxsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetContractTxsRequest*>(&to_msg);
  auto& from = static_cast<const GetContractTxsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetContractTxsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_from_number() != 0) {
    _this->_internal_set_from_number(from._internal_from_number());
  }
  if (from._internal_to_number() != 0) {
    _this->_internal_set_to_number(from._internal_to_number());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetContractTxsRequest::CopyFrom(const GetContractTxsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetContractTxsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContractTxsRequest::IsInitialized() const {
  return true;
}

void GetContractTxsRequest::InternalSwap(GetContractTxsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetContractTxsRequest, _impl_.limit_)
      + sizeof(GetContractTxsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetContractTxsRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContractTxsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[9]);
}
// ===================================================================

class GetContractTxsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetContractTxsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetContractTxsResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Paging& paging(const GetContractTxsResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Paging&
GetContractTxsResponse::_Internal::paging(const GetContractTxsResponse* msg) {
  return *msg->_impl_.paging_;
}
GetContractTxsResponse::GetContractTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetContractTxsResponse)
}
GetContractTxsResponse::GetContractTxsResponse(const GetContractTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetContractTxsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_explorer_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetContractTxsResponse)
}

inline void GetContractTxsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

GetContractTxsResponse::~GetContractTxsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetContractTxsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetContractTxsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetContractTxsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetContractTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetContractTxsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetContractTxsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.TxDetailData data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetContractTxsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetContractTxsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  // repeated .injective_explorer_rpc.TxDetailData data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetContractTxsResponse)
  return target;
}

::size_t GetContractTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetContractTxsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.TxDetailData data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetContractTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetContractTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetContractTxsResponse::GetClassData() const { return &_class_data_; }


void GetContractTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetContractTxsResponse*>(&to_msg);
  auto& from = static_cast<const GetContractTxsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetContractTxsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_explorer_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetContractTxsResponse::CopyFrom(const GetContractTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetContractTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContractTxsResponse::IsInitialized() const {
  return true;
}

void GetContractTxsResponse::InternalSwap(GetContractTxsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetContractTxsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[10]);
}
// ===================================================================

class GetBlocksRequest::_Internal {
 public:
};

GetBlocksRequest::GetBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetBlocksRequest)
}
GetBlocksRequest::GetBlocksRequest(const GetBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetBlocksRequest)
}

inline void GetBlocksRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.before_) { ::uint64_t{0u} }

    , decltype(_impl_.after_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBlocksRequest::~GetBlocksRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetBlocksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlocksRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetBlocksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetBlocksRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.before_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.before_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlocksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 before = 1 [json_name = "before"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 after = 2 [json_name = "after"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetBlocksRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetBlocksRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 before = 1 [json_name = "before"];
  if (this->_internal_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_before(), target);
  }

  // uint64 after = 2 [json_name = "after"];
  if (this->_internal_after() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_after(), target);
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetBlocksRequest)
  return target;
}

::size_t GetBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetBlocksRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 before = 1 [json_name = "before"];
  if (this->_internal_before() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_before());
  }

  // uint64 after = 2 [json_name = "after"];
  if (this->_internal_after() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_after());
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlocksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlocksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlocksRequest::GetClassData() const { return &_class_data_; }


void GetBlocksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlocksRequest*>(&to_msg);
  auto& from = static_cast<const GetBlocksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetBlocksRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_before() != 0) {
    _this->_internal_set_before(from._internal_before());
  }
  if (from._internal_after() != 0) {
    _this->_internal_set_after(from._internal_after());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlocksRequest::CopyFrom(const GetBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlocksRequest::IsInitialized() const {
  return true;
}

void GetBlocksRequest::InternalSwap(GetBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBlocksRequest, _impl_.limit_)
      + sizeof(GetBlocksRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetBlocksRequest, _impl_.before_)>(
          reinterpret_cast<char*>(&_impl_.before_),
          reinterpret_cast<char*>(&other->_impl_.before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlocksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[11]);
}
// ===================================================================

class GetBlocksResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBlocksResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetBlocksResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Paging& paging(const GetBlocksResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Paging&
GetBlocksResponse::_Internal::paging(const GetBlocksResponse* msg) {
  return *msg->_impl_.paging_;
}
GetBlocksResponse::GetBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetBlocksResponse)
}
GetBlocksResponse::GetBlocksResponse(const GetBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlocksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_explorer_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetBlocksResponse)
}

inline void GetBlocksResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

GetBlocksResponse::~GetBlocksResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetBlocksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlocksResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetBlocksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetBlocksResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlocksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.BlockInfo data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetBlocksResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetBlocksResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  // repeated .injective_explorer_rpc.BlockInfo data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetBlocksResponse)
  return target;
}

::size_t GetBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetBlocksResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.BlockInfo data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlocksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlocksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlocksResponse::GetClassData() const { return &_class_data_; }


void GetBlocksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlocksResponse*>(&to_msg);
  auto& from = static_cast<const GetBlocksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetBlocksResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_explorer_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlocksResponse::CopyFrom(const GetBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlocksResponse::IsInitialized() const {
  return true;
}

void GetBlocksResponse::InternalSwap(GetBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlocksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[12]);
}
// ===================================================================

class BlockInfo::_Internal {
 public:
};

BlockInfo::BlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.BlockInfo)
}
BlockInfo::BlockInfo(const BlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.proposer_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.block_hash_) {}

    , decltype(_impl_.parent_hash_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.num_pre_commits_) {}

    , decltype(_impl_.num_txs_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer().empty()) {
    _this->_impl_.proposer_.Set(from._internal_proposer(), _this->GetArenaForAllocation());
  }
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_moniker().empty()) {
    _this->_impl_.moniker_.Set(from._internal_moniker(), _this->GetArenaForAllocation());
  }
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    _this->_impl_.block_hash_.Set(from._internal_block_hash(), _this->GetArenaForAllocation());
  }
  _impl_.parent_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_hash().empty()) {
    _this->_impl_.parent_hash_.Set(from._internal_parent_hash(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_txs_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.num_txs_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.BlockInfo)
}

inline void BlockInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.proposer_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.block_hash_) {}

    , decltype(_impl_.parent_hash_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.num_pre_commits_) { ::int64_t{0} }

    , decltype(_impl_.num_txs_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockInfo::~BlockInfo() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.BlockInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_txs()->~RepeatedPtrField();
  _impl_.proposer_.Destroy();
  _impl_.moniker_.Destroy();
  _impl_.block_hash_.Destroy();
  _impl_.parent_hash_.Destroy();
  _impl_.timestamp_.Destroy();
}

void BlockInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.BlockInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_txs()->Clear();
  _impl_.proposer_.ClearToEmpty();
  _impl_.moniker_.ClearToEmpty();
  _impl_.block_hash_.ClearToEmpty();
  _impl_.parent_hash_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_txs_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.num_txs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string proposer = 2 [json_name = "proposer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proposer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockInfo.proposer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string moniker = 3 [json_name = "moniker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_moniker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockInfo.moniker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string block_hash = 4 [json_name = "blockHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockInfo.block_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string parent_hash = 5 [json_name = "parentHash"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_parent_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockInfo.parent_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.num_pre_commits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 num_txs = 7 [json_name = "numTxs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.num_txs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.TxDataRPC txs = 8 [json_name = "txs"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 9 [json_name = "timestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockInfo.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.BlockInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_height(), target);
  }

  // string proposer = 2 [json_name = "proposer"];
  if (!this->_internal_proposer().empty()) {
    const std::string& _s = this->_internal_proposer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockInfo.proposer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string moniker = 3 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    const std::string& _s = this->_internal_moniker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockInfo.moniker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string block_hash = 4 [json_name = "blockHash"];
  if (!this->_internal_block_hash().empty()) {
    const std::string& _s = this->_internal_block_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockInfo.block_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string parent_hash = 5 [json_name = "parentHash"];
  if (!this->_internal_parent_hash().empty()) {
    const std::string& _s = this->_internal_parent_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockInfo.parent_hash");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
  if (this->_internal_num_pre_commits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_num_pre_commits(), target);
  }

  // sint64 num_txs = 7 [json_name = "numTxs"];
  if (this->_internal_num_txs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_num_txs(), target);
  }

  // repeated .injective_explorer_rpc.TxDataRPC txs = 8 [json_name = "txs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string timestamp = 9 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockInfo.timestamp");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.BlockInfo)
  return target;
}

::size_t BlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.BlockInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.TxDataRPC txs = 8 [json_name = "txs"];
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_internal_txs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string proposer = 2 [json_name = "proposer"];
  if (!this->_internal_proposer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_proposer());
  }

  // string moniker = 3 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_moniker());
  }

  // string block_hash = 4 [json_name = "blockHash"];
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_hash());
  }

  // string parent_hash = 5 [json_name = "parentHash"];
  if (!this->_internal_parent_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_parent_hash());
  }

  // string timestamp = 9 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
  if (this->_internal_num_pre_commits() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_num_pre_commits());
  }

  // sint64 num_txs = 7 [json_name = "numTxs"];
  if (this->_internal_num_txs() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_num_txs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockInfo::GetClassData() const { return &_class_data_; }


void BlockInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockInfo*>(&to_msg);
  auto& from = static_cast<const BlockInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.BlockInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_txs()->MergeFrom(from._internal_txs());
  if (!from._internal_proposer().empty()) {
    _this->_internal_set_proposer(from._internal_proposer());
  }
  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (!from._internal_block_hash().empty()) {
    _this->_internal_set_block_hash(from._internal_block_hash());
  }
  if (!from._internal_parent_hash().empty()) {
    _this->_internal_set_parent_hash(from._internal_parent_hash());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_num_pre_commits() != 0) {
    _this->_internal_set_num_pre_commits(from._internal_num_pre_commits());
  }
  if (from._internal_num_txs() != 0) {
    _this->_internal_set_num_txs(from._internal_num_txs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockInfo::CopyFrom(const BlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.BlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo::IsInitialized() const {
  return true;
}

void BlockInfo::InternalSwap(BlockInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_txs()->InternalSwap(other->_internal_mutable_txs());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposer_, lhs_arena,
                                       &other->_impl_.proposer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, lhs_arena,
                                       &other->_impl_.moniker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_hash_, lhs_arena,
                                       &other->_impl_.block_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_hash_, lhs_arena,
                                       &other->_impl_.parent_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockInfo, _impl_.num_txs_)
      + sizeof(BlockInfo::_impl_.num_txs_)
      - PROTOBUF_FIELD_OFFSET(BlockInfo, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[13]);
}
// ===================================================================

class TxDataRPC::_Internal {
 public:
};

TxDataRPC::TxDataRPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.TxDataRPC)
}
TxDataRPC::TxDataRPC(const TxDataRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxDataRPC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.messages_) {}

    , decltype(_impl_.error_log_) {}

    , decltype(_impl_.block_number_) {}

    , decltype(_impl_.tx_number_) {}

    , decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_timestamp().empty()) {
    _this->_impl_.block_timestamp_.Set(from._internal_block_timestamp(), _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), _this->GetArenaForAllocation());
  }
  _impl_.messages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messages_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messages().empty()) {
    _this->_impl_.messages_.Set(from._internal_messages(), _this->GetArenaForAllocation());
  }
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_log().empty()) {
    _this->_impl_.error_log_.Set(from._internal_error_log(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.TxDataRPC)
}

inline void TxDataRPC::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.messages_) {}

    , decltype(_impl_.error_log_) {}

    , decltype(_impl_.block_number_) { ::uint64_t{0u} }

    , decltype(_impl_.tx_number_) { ::uint64_t{0u} }

    , decltype(_impl_.code_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messages_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxDataRPC::~TxDataRPC() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.TxDataRPC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxDataRPC::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.block_timestamp_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.messages_.Destroy();
  _impl_.error_log_.Destroy();
}

void TxDataRPC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxDataRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.TxDataRPC)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.block_timestamp_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.messages_.ClearToEmpty();
  _impl_.error_log_.ClearToEmpty();
  ::memset(&_impl_.block_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxDataRPC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDataRPC.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 block_number = 2 [json_name = "blockNumber"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string block_timestamp = 3 [json_name = "blockTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_block_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDataRPC.block_timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string hash = 4 [json_name = "hash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDataRPC.hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string codespace = 5 [json_name = "codespace"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDataRPC.codespace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string messages = 6 [json_name = "messages"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_messages();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDataRPC.messages"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 tx_number = 7 [json_name = "txNumber"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.tx_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error_log = 8 [json_name = "errorLog"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_error_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxDataRPC.error_log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 code = 9 [json_name = "code"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TxDataRPC::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.TxDataRPC)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDataRPC.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 block_number = 2 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_block_number(), target);
  }

  // string block_timestamp = 3 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    const std::string& _s = this->_internal_block_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDataRPC.block_timestamp");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDataRPC.hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string codespace = 5 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    const std::string& _s = this->_internal_codespace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDataRPC.codespace");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string messages = 6 [json_name = "messages"];
  if (!this->_internal_messages().empty()) {
    const std::string& _s = this->_internal_messages();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDataRPC.messages");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint64 tx_number = 7 [json_name = "txNumber"];
  if (this->_internal_tx_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_tx_number(), target);
  }

  // string error_log = 8 [json_name = "errorLog"];
  if (!this->_internal_error_log().empty()) {
    const std::string& _s = this->_internal_error_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxDataRPC.error_log");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // uint32 code = 9 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.TxDataRPC)
  return target;
}

::size_t TxDataRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.TxDataRPC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string block_timestamp = 3 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_timestamp());
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hash());
  }

  // string codespace = 5 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_codespace());
  }

  // string messages = 6 [json_name = "messages"];
  if (!this->_internal_messages().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_messages());
  }

  // string error_log = 8 [json_name = "errorLog"];
  if (!this->_internal_error_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error_log());
  }

  // uint64 block_number = 2 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_block_number());
  }

  // uint64 tx_number = 7 [json_name = "txNumber"];
  if (this->_internal_tx_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_tx_number());
  }

  // uint32 code = 9 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxDataRPC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxDataRPC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxDataRPC::GetClassData() const { return &_class_data_; }


void TxDataRPC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxDataRPC*>(&to_msg);
  auto& from = static_cast<const TxDataRPC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.TxDataRPC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_block_timestamp().empty()) {
    _this->_internal_set_block_timestamp(from._internal_block_timestamp());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_messages().empty()) {
    _this->_internal_set_messages(from._internal_messages());
  }
  if (!from._internal_error_log().empty()) {
    _this->_internal_set_error_log(from._internal_error_log());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_tx_number() != 0) {
    _this->_internal_set_tx_number(from._internal_tx_number());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxDataRPC::CopyFrom(const TxDataRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.TxDataRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxDataRPC::IsInitialized() const {
  return true;
}

void TxDataRPC::InternalSwap(TxDataRPC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_timestamp_, lhs_arena,
                                       &other->_impl_.block_timestamp_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codespace_, lhs_arena,
                                       &other->_impl_.codespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messages_, lhs_arena,
                                       &other->_impl_.messages_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_log_, lhs_arena,
                                       &other->_impl_.error_log_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxDataRPC, _impl_.code_)
      + sizeof(TxDataRPC::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(TxDataRPC, _impl_.block_number_)>(
          reinterpret_cast<char*>(&_impl_.block_number_),
          reinterpret_cast<char*>(&other->_impl_.block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxDataRPC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[14]);
}
// ===================================================================

class GetBlockRequest::_Internal {
 public:
};

GetBlockRequest::GetBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetBlockRequest)
}
GetBlockRequest::GetBlockRequest(const GetBlockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetBlockRequest)
}

inline void GetBlockRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBlockRequest::~GetBlockRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetBlockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlockRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void GetBlockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetBlockRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetBlockRequest.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetBlockRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetBlockRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetBlockRequest.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetBlockRequest)
  return target;
}

::size_t GetBlockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetBlockRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockRequest::GetClassData() const { return &_class_data_; }


void GetBlockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlockRequest*>(&to_msg);
  auto& from = static_cast<const GetBlockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetBlockRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockRequest::CopyFrom(const GetBlockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetBlockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockRequest::IsInitialized() const {
  return true;
}

void GetBlockRequest::InternalSwap(GetBlockRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[15]);
}
// ===================================================================

class GetBlockResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetBlockResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetBlockResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::BlockDetailInfo& data(const GetBlockResponse* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::BlockDetailInfo&
GetBlockResponse::_Internal::data(const GetBlockResponse* msg) {
  return *msg->_impl_.data_;
}
GetBlockResponse::GetBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetBlockResponse)
}
GetBlockResponse::GetBlockResponse(const GetBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBlockResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    _this->_impl_.s_.Set(from._internal_s(), _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::injective_explorer_rpc::BlockDetailInfo(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetBlockResponse)
}

inline void GetBlockResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , decltype(_impl_.data_){nullptr}
  };
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBlockResponse::~GetBlockResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetBlockResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBlockResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_.Destroy();
  _impl_.errmsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GetBlockResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetBlockResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlockResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1 [json_name = "s"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetBlockResponse.s"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string errmsg = 2 [json_name = "errmsg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetBlockResponse.errmsg"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.BlockDetailInfo data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetBlockResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetBlockResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    const std::string& _s = this->_internal_s();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetBlockResponse.s");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    const std::string& _s = this->_internal_errmsg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetBlockResponse.errmsg");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.BlockDetailInfo data = 3 [json_name = "data"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetBlockResponse)
  return target;
}

::size_t GetBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetBlockResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_s());
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_errmsg());
  }

  // .injective_explorer_rpc.BlockDetailInfo data = 3 [json_name = "data"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBlockResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBlockResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBlockResponse::GetClassData() const { return &_class_data_; }


void GetBlockResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBlockResponse*>(&to_msg);
  auto& from = static_cast<const GetBlockResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetBlockResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s().empty()) {
    _this->_internal_set_s(from._internal_s());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::injective_explorer_rpc::BlockDetailInfo::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBlockResponse::CopyFrom(const GetBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockResponse::IsInitialized() const {
  return true;
}

void GetBlockResponse::InternalSwap(GetBlockResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s_, lhs_arena,
                                       &other->_impl_.s_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.errmsg_, lhs_arena,
                                       &other->_impl_.errmsg_, rhs_arena);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[16]);
}
// ===================================================================

class BlockDetailInfo::_Internal {
 public:
};

BlockDetailInfo::BlockDetailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.BlockDetailInfo)
}
BlockDetailInfo::BlockDetailInfo(const BlockDetailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockDetailInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.proposer_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.block_hash_) {}

    , decltype(_impl_.parent_hash_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.num_pre_commits_) {}

    , decltype(_impl_.num_txs_) {}

    , decltype(_impl_.total_txs_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer().empty()) {
    _this->_impl_.proposer_.Set(from._internal_proposer(), _this->GetArenaForAllocation());
  }
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_moniker().empty()) {
    _this->_impl_.moniker_.Set(from._internal_moniker(), _this->GetArenaForAllocation());
  }
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    _this->_impl_.block_hash_.Set(from._internal_block_hash(), _this->GetArenaForAllocation());
  }
  _impl_.parent_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_hash().empty()) {
    _this->_impl_.parent_hash_.Set(from._internal_parent_hash(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.total_txs_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.total_txs_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.BlockDetailInfo)
}

inline void BlockDetailInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.proposer_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.block_hash_) {}

    , decltype(_impl_.parent_hash_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.num_pre_commits_) { ::int64_t{0} }

    , decltype(_impl_.num_txs_) { ::int64_t{0} }

    , decltype(_impl_.total_txs_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockDetailInfo::~BlockDetailInfo() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.BlockDetailInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockDetailInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_txs()->~RepeatedPtrField();
  _impl_.proposer_.Destroy();
  _impl_.moniker_.Destroy();
  _impl_.block_hash_.Destroy();
  _impl_.parent_hash_.Destroy();
  _impl_.timestamp_.Destroy();
}

void BlockDetailInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.BlockDetailInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_txs()->Clear();
  _impl_.proposer_.ClearToEmpty();
  _impl_.moniker_.ClearToEmpty();
  _impl_.block_hash_.ClearToEmpty();
  _impl_.parent_hash_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_txs_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.total_txs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockDetailInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string proposer = 2 [json_name = "proposer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proposer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockDetailInfo.proposer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string moniker = 3 [json_name = "moniker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_moniker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockDetailInfo.moniker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string block_hash = 4 [json_name = "blockHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockDetailInfo.block_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string parent_hash = 5 [json_name = "parentHash"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_parent_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockDetailInfo.parent_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.num_pre_commits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 num_txs = 7 [json_name = "numTxs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.num_txs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 total_txs = 8 [json_name = "totalTxs"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.total_txs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.TxData txs = 9 [json_name = "txs"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 10 [json_name = "timestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.BlockDetailInfo.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockDetailInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.BlockDetailInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_height(), target);
  }

  // string proposer = 2 [json_name = "proposer"];
  if (!this->_internal_proposer().empty()) {
    const std::string& _s = this->_internal_proposer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockDetailInfo.proposer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string moniker = 3 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    const std::string& _s = this->_internal_moniker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockDetailInfo.moniker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string block_hash = 4 [json_name = "blockHash"];
  if (!this->_internal_block_hash().empty()) {
    const std::string& _s = this->_internal_block_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockDetailInfo.block_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string parent_hash = 5 [json_name = "parentHash"];
  if (!this->_internal_parent_hash().empty()) {
    const std::string& _s = this->_internal_parent_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockDetailInfo.parent_hash");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
  if (this->_internal_num_pre_commits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_num_pre_commits(), target);
  }

  // sint64 num_txs = 7 [json_name = "numTxs"];
  if (this->_internal_num_txs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_num_txs(), target);
  }

  // sint64 total_txs = 8 [json_name = "totalTxs"];
  if (this->_internal_total_txs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_total_txs(), target);
  }

  // repeated .injective_explorer_rpc.TxData txs = 9 [json_name = "txs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string timestamp = 10 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.BlockDetailInfo.timestamp");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.BlockDetailInfo)
  return target;
}

::size_t BlockDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.BlockDetailInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.TxData txs = 9 [json_name = "txs"];
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_internal_txs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string proposer = 2 [json_name = "proposer"];
  if (!this->_internal_proposer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_proposer());
  }

  // string moniker = 3 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_moniker());
  }

  // string block_hash = 4 [json_name = "blockHash"];
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_hash());
  }

  // string parent_hash = 5 [json_name = "parentHash"];
  if (!this->_internal_parent_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_parent_hash());
  }

  // string timestamp = 10 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
  if (this->_internal_num_pre_commits() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_num_pre_commits());
  }

  // sint64 num_txs = 7 [json_name = "numTxs"];
  if (this->_internal_num_txs() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_num_txs());
  }

  // sint64 total_txs = 8 [json_name = "totalTxs"];
  if (this->_internal_total_txs() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_total_txs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockDetailInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockDetailInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockDetailInfo::GetClassData() const { return &_class_data_; }


void BlockDetailInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockDetailInfo*>(&to_msg);
  auto& from = static_cast<const BlockDetailInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.BlockDetailInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_txs()->MergeFrom(from._internal_txs());
  if (!from._internal_proposer().empty()) {
    _this->_internal_set_proposer(from._internal_proposer());
  }
  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (!from._internal_block_hash().empty()) {
    _this->_internal_set_block_hash(from._internal_block_hash());
  }
  if (!from._internal_parent_hash().empty()) {
    _this->_internal_set_parent_hash(from._internal_parent_hash());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_num_pre_commits() != 0) {
    _this->_internal_set_num_pre_commits(from._internal_num_pre_commits());
  }
  if (from._internal_num_txs() != 0) {
    _this->_internal_set_num_txs(from._internal_num_txs());
  }
  if (from._internal_total_txs() != 0) {
    _this->_internal_set_total_txs(from._internal_total_txs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockDetailInfo::CopyFrom(const BlockDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.BlockDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockDetailInfo::IsInitialized() const {
  return true;
}

void BlockDetailInfo::InternalSwap(BlockDetailInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_txs()->InternalSwap(other->_internal_mutable_txs());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposer_, lhs_arena,
                                       &other->_impl_.proposer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, lhs_arena,
                                       &other->_impl_.moniker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_hash_, lhs_arena,
                                       &other->_impl_.block_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_hash_, lhs_arena,
                                       &other->_impl_.parent_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockDetailInfo, _impl_.total_txs_)
      + sizeof(BlockDetailInfo::_impl_.total_txs_)
      - PROTOBUF_FIELD_OFFSET(BlockDetailInfo, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockDetailInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[17]);
}
// ===================================================================

class TxData::_Internal {
 public:
};

TxData::TxData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.TxData)
}
TxData::TxData(const TxData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.messages_) {}

    , decltype(_impl_.error_log_) {}

    , decltype(_impl_.block_number_) {}

    , decltype(_impl_.tx_number_) {}

    , decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_timestamp().empty()) {
    _this->_impl_.block_timestamp_.Set(from._internal_block_timestamp(), _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), _this->GetArenaForAllocation());
  }
  _impl_.messages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messages_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messages().empty()) {
    _this->_impl_.messages_.Set(from._internal_messages(), _this->GetArenaForAllocation());
  }
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_log().empty()) {
    _this->_impl_.error_log_.Set(from._internal_error_log(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.TxData)
}

inline void TxData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.messages_) {}

    , decltype(_impl_.error_log_) {}

    , decltype(_impl_.block_number_) { ::uint64_t{0u} }

    , decltype(_impl_.tx_number_) { ::uint64_t{0u} }

    , decltype(_impl_.code_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messages_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxData::~TxData() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.TxData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.block_timestamp_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.messages_.Destroy();
  _impl_.error_log_.Destroy();
}

void TxData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxData::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.TxData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.block_timestamp_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.messages_.ClearToEmpty();
  _impl_.error_log_.ClearToEmpty();
  ::memset(&_impl_.block_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxData.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 block_number = 2 [json_name = "blockNumber"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string block_timestamp = 3 [json_name = "blockTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_block_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxData.block_timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string hash = 4 [json_name = "hash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxData.hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string codespace = 5 [json_name = "codespace"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxData.codespace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes messages = 6 [json_name = "messages"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_messages();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 tx_number = 7 [json_name = "txNumber"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.tx_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error_log = 8 [json_name = "errorLog"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_error_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.TxData.error_log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 code = 9 [json_name = "code"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TxData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.TxData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxData.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 block_number = 2 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_block_number(), target);
  }

  // string block_timestamp = 3 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    const std::string& _s = this->_internal_block_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxData.block_timestamp");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxData.hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string codespace = 5 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    const std::string& _s = this->_internal_codespace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxData.codespace");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bytes messages = 6 [json_name = "messages"];
  if (!this->_internal_messages().empty()) {
    const std::string& _s = this->_internal_messages();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // uint64 tx_number = 7 [json_name = "txNumber"];
  if (this->_internal_tx_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_tx_number(), target);
  }

  // string error_log = 8 [json_name = "errorLog"];
  if (!this->_internal_error_log().empty()) {
    const std::string& _s = this->_internal_error_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.TxData.error_log");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // uint32 code = 9 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.TxData)
  return target;
}

::size_t TxData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.TxData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string block_timestamp = 3 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_timestamp());
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hash());
  }

  // string codespace = 5 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_codespace());
  }

  // bytes messages = 6 [json_name = "messages"];
  if (!this->_internal_messages().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_messages());
  }

  // string error_log = 8 [json_name = "errorLog"];
  if (!this->_internal_error_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error_log());
  }

  // uint64 block_number = 2 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_block_number());
  }

  // uint64 tx_number = 7 [json_name = "txNumber"];
  if (this->_internal_tx_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_tx_number());
  }

  // uint32 code = 9 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxData::GetClassData() const { return &_class_data_; }


void TxData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxData*>(&to_msg);
  auto& from = static_cast<const TxData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.TxData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_block_timestamp().empty()) {
    _this->_internal_set_block_timestamp(from._internal_block_timestamp());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_messages().empty()) {
    _this->_internal_set_messages(from._internal_messages());
  }
  if (!from._internal_error_log().empty()) {
    _this->_internal_set_error_log(from._internal_error_log());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_tx_number() != 0) {
    _this->_internal_set_tx_number(from._internal_tx_number());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxData::CopyFrom(const TxData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.TxData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxData::IsInitialized() const {
  return true;
}

void TxData::InternalSwap(TxData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_timestamp_, lhs_arena,
                                       &other->_impl_.block_timestamp_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codespace_, lhs_arena,
                                       &other->_impl_.codespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messages_, lhs_arena,
                                       &other->_impl_.messages_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_log_, lhs_arena,
                                       &other->_impl_.error_log_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxData, _impl_.code_)
      + sizeof(TxData::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(TxData, _impl_.block_number_)>(
          reinterpret_cast<char*>(&_impl_.block_number_),
          reinterpret_cast<char*>(&other->_impl_.block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[18]);
}
// ===================================================================

class GetValidatorsRequest::_Internal {
 public:
};

GetValidatorsRequest::GetValidatorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetValidatorsRequest)
}
GetValidatorsRequest::GetValidatorsRequest(const GetValidatorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetValidatorsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetValidatorsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetValidatorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetValidatorsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetValidatorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[19]);
}
// ===================================================================

class GetValidatorsResponse::_Internal {
 public:
};

GetValidatorsResponse::GetValidatorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetValidatorsResponse)
}
GetValidatorsResponse::GetValidatorsResponse(const GetValidatorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetValidatorsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    _this->_impl_.s_.Set(from._internal_s(), _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetValidatorsResponse)
}

inline void GetValidatorsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetValidatorsResponse::~GetValidatorsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetValidatorsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetValidatorsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  _impl_.s_.Destroy();
  _impl_.errmsg_.Destroy();
}

void GetValidatorsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetValidatorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetValidatorsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _impl_.s_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetValidatorsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1 [json_name = "s"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetValidatorsResponse.s"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string errmsg = 2 [json_name = "errmsg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetValidatorsResponse.errmsg"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.Validator data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetValidatorsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetValidatorsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    const std::string& _s = this->_internal_s();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetValidatorsResponse.s");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    const std::string& _s = this->_internal_errmsg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetValidatorsResponse.errmsg");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .injective_explorer_rpc.Validator data = 3 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetValidatorsResponse)
  return target;
}

::size_t GetValidatorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetValidatorsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.Validator data = 3 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_s());
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_errmsg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetValidatorsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetValidatorsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetValidatorsResponse::GetClassData() const { return &_class_data_; }


void GetValidatorsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetValidatorsResponse*>(&to_msg);
  auto& from = static_cast<const GetValidatorsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetValidatorsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if (!from._internal_s().empty()) {
    _this->_internal_set_s(from._internal_s());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetValidatorsResponse::CopyFrom(const GetValidatorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetValidatorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetValidatorsResponse::IsInitialized() const {
  return true;
}

void GetValidatorsResponse::InternalSwap(GetValidatorsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s_, lhs_arena,
                                       &other->_impl_.s_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.errmsg_, lhs_arena,
                                       &other->_impl_.errmsg_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetValidatorsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[20]);
}
// ===================================================================

class Validator::_Internal {
 public:
  using HasBits = decltype(std::declval<Validator>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Validator, _impl_._has_bits_);
  static const ::injective_explorer_rpc::ValidatorDescription& description(const Validator* msg);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::ValidatorDescription&
Validator::_Internal::description(const Validator* msg) {
  return *msg->_impl_.description_;
}
Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Validator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uptimes_){from._impl_.uptimes_}
    , decltype(_impl_.slashing_events_){from._impl_.slashing_events_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.operator_address_) {}

    , decltype(_impl_.consensus_address_) {}

    , decltype(_impl_.tokens_) {}

    , decltype(_impl_.delegator_shares_) {}

    , decltype(_impl_.unbonding_time_) {}

    , decltype(_impl_.commission_rate_) {}

    , decltype(_impl_.commission_max_rate_) {}

    , decltype(_impl_.commission_max_change_rate_) {}

    , decltype(_impl_.commission_update_time_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.description_){nullptr}
    , decltype(_impl_.jailed_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.unbonding_height_) {}

    , decltype(_impl_.proposed_) {}

    , decltype(_impl_.signed__) {}

    , decltype(_impl_.missed_) {}

    , decltype(_impl_.uptime_percentage_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_moniker().empty()) {
    _this->_impl_.moniker_.Set(from._internal_moniker(), _this->GetArenaForAllocation());
  }
  _impl_.operator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operator_address().empty()) {
    _this->_impl_.operator_address_.Set(from._internal_operator_address(), _this->GetArenaForAllocation());
  }
  _impl_.consensus_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.consensus_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consensus_address().empty()) {
    _this->_impl_.consensus_address_.Set(from._internal_consensus_address(), _this->GetArenaForAllocation());
  }
  _impl_.tokens_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tokens_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tokens().empty()) {
    _this->_impl_.tokens_.Set(from._internal_tokens(), _this->GetArenaForAllocation());
  }
  _impl_.delegator_shares_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_shares_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_shares().empty()) {
    _this->_impl_.delegator_shares_.Set(from._internal_delegator_shares(), _this->GetArenaForAllocation());
  }
  _impl_.unbonding_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unbonding_time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unbonding_time().empty()) {
    _this->_impl_.unbonding_time_.Set(from._internal_unbonding_time(), _this->GetArenaForAllocation());
  }
  _impl_.commission_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commission_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commission_rate().empty()) {
    _this->_impl_.commission_rate_.Set(from._internal_commission_rate(), _this->GetArenaForAllocation());
  }
  _impl_.commission_max_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commission_max_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commission_max_rate().empty()) {
    _this->_impl_.commission_max_rate_.Set(from._internal_commission_max_rate(), _this->GetArenaForAllocation());
  }
  _impl_.commission_max_change_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commission_max_change_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commission_max_change_rate().empty()) {
    _this->_impl_.commission_max_change_rate_.Set(from._internal_commission_max_change_rate(), _this->GetArenaForAllocation());
  }
  _impl_.commission_update_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commission_update_time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commission_update_time().empty()) {
    _this->_impl_.commission_update_time_.Set(from._internal_commission_update_time(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.description_ = new ::injective_explorer_rpc::ValidatorDescription(*from._impl_.description_);
  }
  ::memcpy(&_impl_.jailed_, &from._impl_.jailed_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.uptime_percentage_) -
    reinterpret_cast<char*>(&_impl_.jailed_)) + sizeof(_impl_.uptime_percentage_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Validator)
}

inline void Validator::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uptimes_){arena}
    , decltype(_impl_.slashing_events_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.operator_address_) {}

    , decltype(_impl_.consensus_address_) {}

    , decltype(_impl_.tokens_) {}

    , decltype(_impl_.delegator_shares_) {}

    , decltype(_impl_.unbonding_time_) {}

    , decltype(_impl_.commission_rate_) {}

    , decltype(_impl_.commission_max_rate_) {}

    , decltype(_impl_.commission_max_change_rate_) {}

    , decltype(_impl_.commission_update_time_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.description_){nullptr}
    , decltype(_impl_.jailed_) { false }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.unbonding_height_) { ::int64_t{0} }

    , decltype(_impl_.proposed_) { ::uint64_t{0u} }

    , decltype(_impl_.signed__) { ::uint64_t{0u} }

    , decltype(_impl_.missed_) { ::uint64_t{0u} }

    , decltype(_impl_.uptime_percentage_) { 0 }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.operator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consensus_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.consensus_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tokens_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tokens_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.delegator_shares_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_shares_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unbonding_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unbonding_time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commission_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commission_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commission_max_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commission_max_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commission_max_change_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commission_max_change_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commission_update_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commission_update_time_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Validator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Validator::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_uptimes()->~RepeatedPtrField();
  _internal_mutable_slashing_events()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.moniker_.Destroy();
  _impl_.operator_address_.Destroy();
  _impl_.consensus_address_.Destroy();
  _impl_.tokens_.Destroy();
  _impl_.delegator_shares_.Destroy();
  _impl_.unbonding_time_.Destroy();
  _impl_.commission_rate_.Destroy();
  _impl_.commission_max_rate_.Destroy();
  _impl_.commission_max_change_rate_.Destroy();
  _impl_.commission_update_time_.Destroy();
  _impl_.timestamp_.Destroy();
  if (this != internal_default_instance()) delete _impl_.description_;
}

void Validator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Validator)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_uptimes()->Clear();
  _internal_mutable_slashing_events()->Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.moniker_.ClearToEmpty();
  _impl_.operator_address_.ClearToEmpty();
  _impl_.consensus_address_.ClearToEmpty();
  _impl_.tokens_.ClearToEmpty();
  _impl_.delegator_shares_.ClearToEmpty();
  _impl_.unbonding_time_.ClearToEmpty();
  _impl_.commission_rate_.ClearToEmpty();
  _impl_.commission_max_rate_.ClearToEmpty();
  _impl_.commission_max_change_rate_.ClearToEmpty();
  _impl_.commission_update_time_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.description_ != nullptr);
    _impl_.description_->Clear();
  }
  ::memset(&_impl_.jailed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.uptime_percentage_) -
      reinterpret_cast<char*>(&_impl_.jailed_)) + sizeof(_impl_.uptime_percentage_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string moniker = 2 [json_name = "moniker"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_moniker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.moniker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string operator_address = 3 [json_name = "operatorAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_operator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.operator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string consensus_address = 4 [json_name = "consensusAddress"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_consensus_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.consensus_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool jailed = 5 [json_name = "jailed"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.jailed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 status = 6 [json_name = "status"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string tokens = 7 [json_name = "tokens"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_tokens();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.tokens"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string delegator_shares = 8 [json_name = "delegatorShares"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_delegator_shares();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.delegator_shares"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.ValidatorDescription description = 9 [json_name = "description"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 unbonding_height = 10 [json_name = "unbondingHeight"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.unbonding_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string unbonding_time = 11 [json_name = "unbondingTime"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_unbonding_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.unbonding_time"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string commission_rate = 12 [json_name = "commissionRate"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_commission_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.commission_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string commission_max_rate = 13 [json_name = "commissionMaxRate"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_commission_max_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.commission_max_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string commission_max_change_rate = 14 [json_name = "commissionMaxChangeRate"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_commission_max_change_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.commission_max_change_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string commission_update_time = 15 [json_name = "commissionUpdateTime"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_commission_update_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.commission_update_time"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 proposed = 16 [json_name = "proposed"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _impl_.proposed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 signed = 17 [json_name = "signed"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _impl_.signed__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 missed = 18 [json_name = "missed"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _impl_.missed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 19 [json_name = "timestamp"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Validator.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.ValidatorUptime uptimes = 20 [json_name = "uptimes"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_uptimes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.SlashingEvent slashing_events = 21 [json_name = "slashingEvents"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_slashing_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // double uptime_percentage = 22 [json_name = "uptimePercentage"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 177)) {
          _impl_.uptime_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Validator::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Validator)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string moniker = 2 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    const std::string& _s = this->_internal_moniker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.moniker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string operator_address = 3 [json_name = "operatorAddress"];
  if (!this->_internal_operator_address().empty()) {
    const std::string& _s = this->_internal_operator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.operator_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string consensus_address = 4 [json_name = "consensusAddress"];
  if (!this->_internal_consensus_address().empty()) {
    const std::string& _s = this->_internal_consensus_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.consensus_address");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool jailed = 5 [json_name = "jailed"];
  if (this->_internal_jailed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_jailed(), target);
  }

  // sint32 status = 6 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        6, this->_internal_status(), target);
  }

  // string tokens = 7 [json_name = "tokens"];
  if (!this->_internal_tokens().empty()) {
    const std::string& _s = this->_internal_tokens();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.tokens");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string delegator_shares = 8 [json_name = "delegatorShares"];
  if (!this->_internal_delegator_shares().empty()) {
    const std::string& _s = this->_internal_delegator_shares();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.delegator_shares");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.ValidatorDescription description = 9 [json_name = "description"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::description(this),
        _Internal::description(this).GetCachedSize(), target, stream);
  }

  // sint64 unbonding_height = 10 [json_name = "unbondingHeight"];
  if (this->_internal_unbonding_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        10, this->_internal_unbonding_height(), target);
  }

  // string unbonding_time = 11 [json_name = "unbondingTime"];
  if (!this->_internal_unbonding_time().empty()) {
    const std::string& _s = this->_internal_unbonding_time();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.unbonding_time");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string commission_rate = 12 [json_name = "commissionRate"];
  if (!this->_internal_commission_rate().empty()) {
    const std::string& _s = this->_internal_commission_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.commission_rate");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string commission_max_rate = 13 [json_name = "commissionMaxRate"];
  if (!this->_internal_commission_max_rate().empty()) {
    const std::string& _s = this->_internal_commission_max_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.commission_max_rate");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string commission_max_change_rate = 14 [json_name = "commissionMaxChangeRate"];
  if (!this->_internal_commission_max_change_rate().empty()) {
    const std::string& _s = this->_internal_commission_max_change_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.commission_max_change_rate");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string commission_update_time = 15 [json_name = "commissionUpdateTime"];
  if (!this->_internal_commission_update_time().empty()) {
    const std::string& _s = this->_internal_commission_update_time();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.commission_update_time");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // uint64 proposed = 16 [json_name = "proposed"];
  if (this->_internal_proposed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        16, this->_internal_proposed(), target);
  }

  // uint64 signed = 17 [json_name = "signed"];
  if (this->_internal_signed_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        17, this->_internal_signed_(), target);
  }

  // uint64 missed = 18 [json_name = "missed"];
  if (this->_internal_missed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        18, this->_internal_missed(), target);
  }

  // string timestamp = 19 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Validator.timestamp");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // repeated .injective_explorer_rpc.ValidatorUptime uptimes = 20 [json_name = "uptimes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uptimes_size()); i < n; i++) {
    const auto& repfield = this->_internal_uptimes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective_explorer_rpc.SlashingEvent slashing_events = 21 [json_name = "slashingEvents"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slashing_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_slashing_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double uptime_percentage = 22 [json_name = "uptimePercentage"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_uptime_percentage = this->_internal_uptime_percentage();
  ::uint64_t raw_uptime_percentage;
  memcpy(&raw_uptime_percentage, &tmp_uptime_percentage, sizeof(tmp_uptime_percentage));
  if (raw_uptime_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        22, this->_internal_uptime_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Validator)
  return target;
}

::size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Validator)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.ValidatorUptime uptimes = 20 [json_name = "uptimes"];
  total_size += 2UL * this->_internal_uptimes_size();
  for (const auto& msg : this->_internal_uptimes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective_explorer_rpc.SlashingEvent slashing_events = 21 [json_name = "slashingEvents"];
  total_size += 2UL * this->_internal_slashing_events_size();
  for (const auto& msg : this->_internal_slashing_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string moniker = 2 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_moniker());
  }

  // string operator_address = 3 [json_name = "operatorAddress"];
  if (!this->_internal_operator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operator_address());
  }

  // string consensus_address = 4 [json_name = "consensusAddress"];
  if (!this->_internal_consensus_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_consensus_address());
  }

  // string tokens = 7 [json_name = "tokens"];
  if (!this->_internal_tokens().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tokens());
  }

  // string delegator_shares = 8 [json_name = "delegatorShares"];
  if (!this->_internal_delegator_shares().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_shares());
  }

  // string unbonding_time = 11 [json_name = "unbondingTime"];
  if (!this->_internal_unbonding_time().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unbonding_time());
  }

  // string commission_rate = 12 [json_name = "commissionRate"];
  if (!this->_internal_commission_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_commission_rate());
  }

  // string commission_max_rate = 13 [json_name = "commissionMaxRate"];
  if (!this->_internal_commission_max_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_commission_max_rate());
  }

  // string commission_max_change_rate = 14 [json_name = "commissionMaxChangeRate"];
  if (!this->_internal_commission_max_change_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_commission_max_change_rate());
  }

  // string commission_update_time = 15 [json_name = "commissionUpdateTime"];
  if (!this->_internal_commission_update_time().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_commission_update_time());
  }

  // string timestamp = 19 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // .injective_explorer_rpc.ValidatorDescription description = 9 [json_name = "description"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.description_);
  }

  // bool jailed = 5 [json_name = "jailed"];
  if (this->_internal_jailed() != 0) {
    total_size += 2;
  }

  // sint32 status = 6 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_status());
  }

  // sint64 unbonding_height = 10 [json_name = "unbondingHeight"];
  if (this->_internal_unbonding_height() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_unbonding_height());
  }

  // uint64 proposed = 16 [json_name = "proposed"];
  if (this->_internal_proposed() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_proposed());
  }

  // uint64 signed = 17 [json_name = "signed"];
  if (this->_internal_signed_() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_signed_());
  }

  // uint64 missed = 18 [json_name = "missed"];
  if (this->_internal_missed() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_missed());
  }

  // double uptime_percentage = 22 [json_name = "uptimePercentage"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_uptime_percentage = this->_internal_uptime_percentage();
  ::uint64_t raw_uptime_percentage;
  memcpy(&raw_uptime_percentage, &tmp_uptime_percentage, sizeof(tmp_uptime_percentage));
  if (raw_uptime_percentage != 0) {
    total_size += 10;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Validator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Validator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Validator::GetClassData() const { return &_class_data_; }


void Validator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Validator*>(&to_msg);
  auto& from = static_cast<const Validator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Validator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_uptimes()->MergeFrom(from._internal_uptimes());
  _this->_internal_mutable_slashing_events()->MergeFrom(from._internal_slashing_events());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (!from._internal_operator_address().empty()) {
    _this->_internal_set_operator_address(from._internal_operator_address());
  }
  if (!from._internal_consensus_address().empty()) {
    _this->_internal_set_consensus_address(from._internal_consensus_address());
  }
  if (!from._internal_tokens().empty()) {
    _this->_internal_set_tokens(from._internal_tokens());
  }
  if (!from._internal_delegator_shares().empty()) {
    _this->_internal_set_delegator_shares(from._internal_delegator_shares());
  }
  if (!from._internal_unbonding_time().empty()) {
    _this->_internal_set_unbonding_time(from._internal_unbonding_time());
  }
  if (!from._internal_commission_rate().empty()) {
    _this->_internal_set_commission_rate(from._internal_commission_rate());
  }
  if (!from._internal_commission_max_rate().empty()) {
    _this->_internal_set_commission_max_rate(from._internal_commission_max_rate());
  }
  if (!from._internal_commission_max_change_rate().empty()) {
    _this->_internal_set_commission_max_change_rate(from._internal_commission_max_change_rate());
  }
  if (!from._internal_commission_update_time().empty()) {
    _this->_internal_set_commission_update_time(from._internal_commission_update_time());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_description()->::injective_explorer_rpc::ValidatorDescription::MergeFrom(
        from._internal_description());
  }
  if (from._internal_jailed() != 0) {
    _this->_internal_set_jailed(from._internal_jailed());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_unbonding_height() != 0) {
    _this->_internal_set_unbonding_height(from._internal_unbonding_height());
  }
  if (from._internal_proposed() != 0) {
    _this->_internal_set_proposed(from._internal_proposed());
  }
  if (from._internal_signed_() != 0) {
    _this->_internal_set_signed_(from._internal_signed_());
  }
  if (from._internal_missed() != 0) {
    _this->_internal_set_missed(from._internal_missed());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_uptime_percentage = from._internal_uptime_percentage();
  ::uint64_t raw_uptime_percentage;
  memcpy(&raw_uptime_percentage, &tmp_uptime_percentage, sizeof(tmp_uptime_percentage));
  if (raw_uptime_percentage != 0) {
    _this->_internal_set_uptime_percentage(from._internal_uptime_percentage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_uptimes()->InternalSwap(other->_internal_mutable_uptimes());
  _internal_mutable_slashing_events()->InternalSwap(other->_internal_mutable_slashing_events());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, lhs_arena,
                                       &other->_impl_.moniker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operator_address_, lhs_arena,
                                       &other->_impl_.operator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.consensus_address_, lhs_arena,
                                       &other->_impl_.consensus_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tokens_, lhs_arena,
                                       &other->_impl_.tokens_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_shares_, lhs_arena,
                                       &other->_impl_.delegator_shares_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unbonding_time_, lhs_arena,
                                       &other->_impl_.unbonding_time_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commission_rate_, lhs_arena,
                                       &other->_impl_.commission_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commission_max_rate_, lhs_arena,
                                       &other->_impl_.commission_max_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commission_max_change_rate_, lhs_arena,
                                       &other->_impl_.commission_max_change_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commission_update_time_, lhs_arena,
                                       &other->_impl_.commission_update_time_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Validator, _impl_.uptime_percentage_)
      + sizeof(Validator::_impl_.uptime_percentage_)
      - PROTOBUF_FIELD_OFFSET(Validator, _impl_.description_)>(
          reinterpret_cast<char*>(&_impl_.description_),
          reinterpret_cast<char*>(&other->_impl_.description_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[21]);
}
// ===================================================================

class ValidatorDescription::_Internal {
 public:
};

ValidatorDescription::ValidatorDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.ValidatorDescription)
}
ValidatorDescription::ValidatorDescription(const ValidatorDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.moniker_) {}

    , decltype(_impl_.identity_) {}

    , decltype(_impl_.website_) {}

    , decltype(_impl_.security_contact_) {}

    , decltype(_impl_.details_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_moniker().empty()) {
    _this->_impl_.moniker_.Set(from._internal_moniker(), _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), _this->GetArenaForAllocation());
  }
  _impl_.website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.website_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_website().empty()) {
    _this->_impl_.website_.Set(from._internal_website(), _this->GetArenaForAllocation());
  }
  _impl_.security_contact_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.security_contact_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_security_contact().empty()) {
    _this->_impl_.security_contact_.Set(from._internal_security_contact(), _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.ValidatorDescription)
}

inline void ValidatorDescription::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.moniker_) {}

    , decltype(_impl_.identity_) {}

    , decltype(_impl_.website_) {}

    , decltype(_impl_.security_contact_) {}

    , decltype(_impl_.details_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.website_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.security_contact_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.security_contact_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorDescription::~ValidatorDescription() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.ValidatorDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorDescription::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.moniker_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.website_.Destroy();
  _impl_.security_contact_.Destroy();
  _impl_.details_.Destroy();
}

void ValidatorDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.ValidatorDescription)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.moniker_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.website_.ClearToEmpty();
  _impl_.security_contact_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string moniker = 1 [json_name = "moniker"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_moniker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ValidatorDescription.moniker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string identity = 2 [json_name = "identity"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ValidatorDescription.identity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string website = 3 [json_name = "website"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_website();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ValidatorDescription.website"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string security_contact = 4 [json_name = "securityContact"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_security_contact();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ValidatorDescription.security_contact"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string details = 5 [json_name = "details"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ValidatorDescription.details"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorDescription::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.ValidatorDescription)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string moniker = 1 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    const std::string& _s = this->_internal_moniker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ValidatorDescription.moniker");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string identity = 2 [json_name = "identity"];
  if (!this->_internal_identity().empty()) {
    const std::string& _s = this->_internal_identity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ValidatorDescription.identity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string website = 3 [json_name = "website"];
  if (!this->_internal_website().empty()) {
    const std::string& _s = this->_internal_website();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ValidatorDescription.website");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string security_contact = 4 [json_name = "securityContact"];
  if (!this->_internal_security_contact().empty()) {
    const std::string& _s = this->_internal_security_contact();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ValidatorDescription.security_contact");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string details = 5 [json_name = "details"];
  if (!this->_internal_details().empty()) {
    const std::string& _s = this->_internal_details();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ValidatorDescription.details");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.ValidatorDescription)
  return target;
}

::size_t ValidatorDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.ValidatorDescription)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string moniker = 1 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_moniker());
  }

  // string identity = 2 [json_name = "identity"];
  if (!this->_internal_identity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identity());
  }

  // string website = 3 [json_name = "website"];
  if (!this->_internal_website().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_website());
  }

  // string security_contact = 4 [json_name = "securityContact"];
  if (!this->_internal_security_contact().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_security_contact());
  }

  // string details = 5 [json_name = "details"];
  if (!this->_internal_details().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_details());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorDescription::GetClassData() const { return &_class_data_; }


void ValidatorDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorDescription*>(&to_msg);
  auto& from = static_cast<const ValidatorDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.ValidatorDescription)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_website().empty()) {
    _this->_internal_set_website(from._internal_website());
  }
  if (!from._internal_security_contact().empty()) {
    _this->_internal_set_security_contact(from._internal_security_contact());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorDescription::CopyFrom(const ValidatorDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.ValidatorDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorDescription::IsInitialized() const {
  return true;
}

void ValidatorDescription::InternalSwap(ValidatorDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, lhs_arena,
                                       &other->_impl_.moniker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_, lhs_arena,
                                       &other->_impl_.identity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.website_, lhs_arena,
                                       &other->_impl_.website_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.security_contact_, lhs_arena,
                                       &other->_impl_.security_contact_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.details_, lhs_arena,
                                       &other->_impl_.details_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[22]);
}
// ===================================================================

class ValidatorUptime::_Internal {
 public:
};

ValidatorUptime::ValidatorUptime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.ValidatorUptime)
}
ValidatorUptime::ValidatorUptime(const ValidatorUptime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorUptime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) {}

    , decltype(_impl_.block_number_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  _this->_impl_.block_number_ = from._impl_.block_number_;
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.ValidatorUptime)
}

inline void ValidatorUptime::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) {}

    , decltype(_impl_.block_number_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorUptime::~ValidatorUptime() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.ValidatorUptime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorUptime::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
}

void ValidatorUptime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorUptime::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.ValidatorUptime)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _impl_.block_number_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorUptime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_number = 1 [json_name = "blockNumber"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ValidatorUptime.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorUptime::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.ValidatorUptime)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_number = 1 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_block_number(), target);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ValidatorUptime.status");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.ValidatorUptime)
  return target;
}

::size_t ValidatorUptime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.ValidatorUptime)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // uint64 block_number = 1 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_block_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorUptime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorUptime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorUptime::GetClassData() const { return &_class_data_; }


void ValidatorUptime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorUptime*>(&to_msg);
  auto& from = static_cast<const ValidatorUptime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.ValidatorUptime)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorUptime::CopyFrom(const ValidatorUptime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.ValidatorUptime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUptime::IsInitialized() const {
  return true;
}

void ValidatorUptime::InternalSwap(ValidatorUptime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);

  swap(_impl_.block_number_, other->_impl_.block_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorUptime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[23]);
}
// ===================================================================

class SlashingEvent::_Internal {
 public:
};

SlashingEvent::SlashingEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.SlashingEvent)
}
SlashingEvent::SlashingEvent(const SlashingEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SlashingEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.reason_) {}

    , decltype(_impl_.jailed_) {}

    , decltype(_impl_.block_number_) {}

    , decltype(_impl_.power_) {}

    , decltype(_impl_.missed_blocks_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_timestamp().empty()) {
    _this->_impl_.block_timestamp_.Set(from._internal_block_timestamp(), _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), _this->GetArenaForAllocation());
  }
  _impl_.jailed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.jailed_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_jailed().empty()) {
    _this->_impl_.jailed_.Set(from._internal_jailed(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.missed_blocks_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.missed_blocks_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.SlashingEvent)
}

inline void SlashingEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.reason_) {}

    , decltype(_impl_.jailed_) {}

    , decltype(_impl_.block_number_) { ::uint64_t{0u} }

    , decltype(_impl_.power_) { ::uint64_t{0u} }

    , decltype(_impl_.missed_blocks_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.reason_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.jailed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.jailed_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SlashingEvent::~SlashingEvent() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.SlashingEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SlashingEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_timestamp_.Destroy();
  _impl_.address_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.jailed_.Destroy();
}

void SlashingEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SlashingEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.SlashingEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_timestamp_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _impl_.jailed_.ClearToEmpty();
  ::memset(&_impl_.block_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.missed_blocks_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.missed_blocks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlashingEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 block_number = 1 [json_name = "blockNumber"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string block_timestamp = 2 [json_name = "blockTimestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_block_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.SlashingEvent.block_timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 3 [json_name = "address"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.SlashingEvent.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 power = 4 [json_name = "power"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string reason = 5 [json_name = "reason"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.SlashingEvent.reason"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string jailed = 6 [json_name = "jailed"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_jailed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.SlashingEvent.jailed"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 missed_blocks = 7 [json_name = "missedBlocks"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.missed_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SlashingEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.SlashingEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 block_number = 1 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_block_number(), target);
  }

  // string block_timestamp = 2 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    const std::string& _s = this->_internal_block_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.SlashingEvent.block_timestamp");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string address = 3 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.SlashingEvent.address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 power = 4 [json_name = "power"];
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_power(), target);
  }

  // string reason = 5 [json_name = "reason"];
  if (!this->_internal_reason().empty()) {
    const std::string& _s = this->_internal_reason();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.SlashingEvent.reason");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string jailed = 6 [json_name = "jailed"];
  if (!this->_internal_jailed().empty()) {
    const std::string& _s = this->_internal_jailed();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.SlashingEvent.jailed");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint64 missed_blocks = 7 [json_name = "missedBlocks"];
  if (this->_internal_missed_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_missed_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.SlashingEvent)
  return target;
}

::size_t SlashingEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.SlashingEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string block_timestamp = 2 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_timestamp());
  }

  // string address = 3 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string reason = 5 [json_name = "reason"];
  if (!this->_internal_reason().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_reason());
  }

  // string jailed = 6 [json_name = "jailed"];
  if (!this->_internal_jailed().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_jailed());
  }

  // uint64 block_number = 1 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_block_number());
  }

  // uint64 power = 4 [json_name = "power"];
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_power());
  }

  // uint64 missed_blocks = 7 [json_name = "missedBlocks"];
  if (this->_internal_missed_blocks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_missed_blocks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlashingEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SlashingEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlashingEvent::GetClassData() const { return &_class_data_; }


void SlashingEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SlashingEvent*>(&to_msg);
  auto& from = static_cast<const SlashingEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.SlashingEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_timestamp().empty()) {
    _this->_internal_set_block_timestamp(from._internal_block_timestamp());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (!from._internal_jailed().empty()) {
    _this->_internal_set_jailed(from._internal_jailed());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  if (from._internal_missed_blocks() != 0) {
    _this->_internal_set_missed_blocks(from._internal_missed_blocks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlashingEvent::CopyFrom(const SlashingEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.SlashingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlashingEvent::IsInitialized() const {
  return true;
}

void SlashingEvent::InternalSwap(SlashingEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_timestamp_, lhs_arena,
                                       &other->_impl_.block_timestamp_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, lhs_arena,
                                       &other->_impl_.reason_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.jailed_, lhs_arena,
                                       &other->_impl_.jailed_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SlashingEvent, _impl_.missed_blocks_)
      + sizeof(SlashingEvent::_impl_.missed_blocks_)
      - PROTOBUF_FIELD_OFFSET(SlashingEvent, _impl_.block_number_)>(
          reinterpret_cast<char*>(&_impl_.block_number_),
          reinterpret_cast<char*>(&other->_impl_.block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SlashingEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[24]);
}
// ===================================================================

class GetValidatorRequest::_Internal {
 public:
};

GetValidatorRequest::GetValidatorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetValidatorRequest)
}
GetValidatorRequest::GetValidatorRequest(const GetValidatorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetValidatorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetValidatorRequest)
}

inline void GetValidatorRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetValidatorRequest::~GetValidatorRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetValidatorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetValidatorRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void GetValidatorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetValidatorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetValidatorRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetValidatorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetValidatorRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetValidatorRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetValidatorRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetValidatorRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetValidatorRequest)
  return target;
}

::size_t GetValidatorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetValidatorRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetValidatorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetValidatorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetValidatorRequest::GetClassData() const { return &_class_data_; }


void GetValidatorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetValidatorRequest*>(&to_msg);
  auto& from = static_cast<const GetValidatorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetValidatorRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetValidatorRequest::CopyFrom(const GetValidatorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetValidatorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetValidatorRequest::IsInitialized() const {
  return true;
}

void GetValidatorRequest::InternalSwap(GetValidatorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetValidatorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[25]);
}
// ===================================================================

class GetValidatorResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetValidatorResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetValidatorResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Validator& data(const GetValidatorResponse* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Validator&
GetValidatorResponse::_Internal::data(const GetValidatorResponse* msg) {
  return *msg->_impl_.data_;
}
GetValidatorResponse::GetValidatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetValidatorResponse)
}
GetValidatorResponse::GetValidatorResponse(const GetValidatorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetValidatorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    _this->_impl_.s_.Set(from._internal_s(), _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::injective_explorer_rpc::Validator(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetValidatorResponse)
}

inline void GetValidatorResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , decltype(_impl_.data_){nullptr}
  };
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetValidatorResponse::~GetValidatorResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetValidatorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetValidatorResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_.Destroy();
  _impl_.errmsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GetValidatorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetValidatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetValidatorResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetValidatorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1 [json_name = "s"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetValidatorResponse.s"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string errmsg = 2 [json_name = "errmsg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetValidatorResponse.errmsg"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.Validator data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetValidatorResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetValidatorResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    const std::string& _s = this->_internal_s();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetValidatorResponse.s");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    const std::string& _s = this->_internal_errmsg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetValidatorResponse.errmsg");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Validator data = 3 [json_name = "data"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetValidatorResponse)
  return target;
}

::size_t GetValidatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetValidatorResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_s());
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_errmsg());
  }

  // .injective_explorer_rpc.Validator data = 3 [json_name = "data"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetValidatorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetValidatorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetValidatorResponse::GetClassData() const { return &_class_data_; }


void GetValidatorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetValidatorResponse*>(&to_msg);
  auto& from = static_cast<const GetValidatorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetValidatorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s().empty()) {
    _this->_internal_set_s(from._internal_s());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::injective_explorer_rpc::Validator::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetValidatorResponse::CopyFrom(const GetValidatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetValidatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetValidatorResponse::IsInitialized() const {
  return true;
}

void GetValidatorResponse::InternalSwap(GetValidatorResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s_, lhs_arena,
                                       &other->_impl_.s_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.errmsg_, lhs_arena,
                                       &other->_impl_.errmsg_, rhs_arena);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetValidatorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[26]);
}
// ===================================================================

class GetValidatorUptimeRequest::_Internal {
 public:
};

GetValidatorUptimeRequest::GetValidatorUptimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetValidatorUptimeRequest)
}
GetValidatorUptimeRequest::GetValidatorUptimeRequest(const GetValidatorUptimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetValidatorUptimeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetValidatorUptimeRequest)
}

inline void GetValidatorUptimeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetValidatorUptimeRequest::~GetValidatorUptimeRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetValidatorUptimeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetValidatorUptimeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void GetValidatorUptimeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetValidatorUptimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetValidatorUptimeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetValidatorUptimeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetValidatorUptimeRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetValidatorUptimeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetValidatorUptimeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetValidatorUptimeRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetValidatorUptimeRequest)
  return target;
}

::size_t GetValidatorUptimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetValidatorUptimeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetValidatorUptimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetValidatorUptimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetValidatorUptimeRequest::GetClassData() const { return &_class_data_; }


void GetValidatorUptimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetValidatorUptimeRequest*>(&to_msg);
  auto& from = static_cast<const GetValidatorUptimeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetValidatorUptimeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetValidatorUptimeRequest::CopyFrom(const GetValidatorUptimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetValidatorUptimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetValidatorUptimeRequest::IsInitialized() const {
  return true;
}

void GetValidatorUptimeRequest::InternalSwap(GetValidatorUptimeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetValidatorUptimeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[27]);
}
// ===================================================================

class GetValidatorUptimeResponse::_Internal {
 public:
};

GetValidatorUptimeResponse::GetValidatorUptimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetValidatorUptimeResponse)
}
GetValidatorUptimeResponse::GetValidatorUptimeResponse(const GetValidatorUptimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetValidatorUptimeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    _this->_impl_.s_.Set(from._internal_s(), _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetValidatorUptimeResponse)
}

inline void GetValidatorUptimeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetValidatorUptimeResponse::~GetValidatorUptimeResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetValidatorUptimeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetValidatorUptimeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  _impl_.s_.Destroy();
  _impl_.errmsg_.Destroy();
}

void GetValidatorUptimeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetValidatorUptimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetValidatorUptimeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _impl_.s_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetValidatorUptimeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1 [json_name = "s"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetValidatorUptimeResponse.s"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string errmsg = 2 [json_name = "errmsg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetValidatorUptimeResponse.errmsg"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.ValidatorUptime data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetValidatorUptimeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetValidatorUptimeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    const std::string& _s = this->_internal_s();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetValidatorUptimeResponse.s");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    const std::string& _s = this->_internal_errmsg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetValidatorUptimeResponse.errmsg");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .injective_explorer_rpc.ValidatorUptime data = 3 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetValidatorUptimeResponse)
  return target;
}

::size_t GetValidatorUptimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetValidatorUptimeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.ValidatorUptime data = 3 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_s());
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_errmsg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetValidatorUptimeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetValidatorUptimeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetValidatorUptimeResponse::GetClassData() const { return &_class_data_; }


void GetValidatorUptimeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetValidatorUptimeResponse*>(&to_msg);
  auto& from = static_cast<const GetValidatorUptimeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetValidatorUptimeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if (!from._internal_s().empty()) {
    _this->_internal_set_s(from._internal_s());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetValidatorUptimeResponse::CopyFrom(const GetValidatorUptimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetValidatorUptimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetValidatorUptimeResponse::IsInitialized() const {
  return true;
}

void GetValidatorUptimeResponse::InternalSwap(GetValidatorUptimeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s_, lhs_arena,
                                       &other->_impl_.s_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.errmsg_, lhs_arena,
                                       &other->_impl_.errmsg_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetValidatorUptimeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[28]);
}
// ===================================================================

class GetTxsRequest::_Internal {
 public:
};

GetTxsRequest::GetTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetTxsRequest)
}
GetTxsRequest::GetTxsRequest(const GetTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_) {}

    , decltype(_impl_.module_) {}

    , decltype(_impl_.before_) {}

    , decltype(_impl_.after_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.from_number_) {}

    , decltype(_impl_.to_number_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module().empty()) {
    _this->_impl_.module_.Set(from._internal_module(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.before_, &from._impl_.before_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.before_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetTxsRequest)
}

inline void GetTxsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_) {}

    , decltype(_impl_.module_) {}

    , decltype(_impl_.before_) { ::uint64_t{0u} }

    , decltype(_impl_.after_) { ::uint64_t{0u} }

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.from_number_) { ::int64_t{0} }

    , decltype(_impl_.to_number_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.module_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTxsRequest::~GetTxsRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetTxsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.module_.Destroy();
}

void GetTxsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetTxsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.module_.ClearToEmpty();
  ::memset(&_impl_.before_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.before_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 before = 1 [json_name = "before"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 after = 2 [json_name = "after"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 4 [json_name = "skip"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetTxsRequest.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string module = 6 [json_name = "module"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_module();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetTxsRequest.module"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 from_number = 7 [json_name = "fromNumber"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.from_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 to_number = 8 [json_name = "toNumber"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.to_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetTxsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetTxsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 before = 1 [json_name = "before"];
  if (this->_internal_before() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_before(), target);
  }

  // uint64 after = 2 [json_name = "after"];
  if (this->_internal_after() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_after(), target);
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_limit(), target);
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_skip(), target);
  }

  // string type = 5 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetTxsRequest.type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string module = 6 [json_name = "module"];
  if (!this->_internal_module().empty()) {
    const std::string& _s = this->_internal_module();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetTxsRequest.module");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // sint64 from_number = 7 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_from_number(), target);
  }

  // sint64 to_number = 8 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_to_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetTxsRequest)
  return target;
}

::size_t GetTxsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetTxsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 5 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // string module = 6 [json_name = "module"];
  if (!this->_internal_module().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_module());
  }

  // uint64 before = 1 [json_name = "before"];
  if (this->_internal_before() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_before());
  }

  // uint64 after = 2 [json_name = "after"];
  if (this->_internal_after() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_after());
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 from_number = 7 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_from_number());
  }

  // sint64 to_number = 8 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_to_number());
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxsRequest::GetClassData() const { return &_class_data_; }


void GetTxsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxsRequest*>(&to_msg);
  auto& from = static_cast<const GetTxsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetTxsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_module().empty()) {
    _this->_internal_set_module(from._internal_module());
  }
  if (from._internal_before() != 0) {
    _this->_internal_set_before(from._internal_before());
  }
  if (from._internal_after() != 0) {
    _this->_internal_set_after(from._internal_after());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_from_number() != 0) {
    _this->_internal_set_from_number(from._internal_from_number());
  }
  if (from._internal_to_number() != 0) {
    _this->_internal_set_to_number(from._internal_to_number());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxsRequest::CopyFrom(const GetTxsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetTxsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxsRequest::IsInitialized() const {
  return true;
}

void GetTxsRequest::InternalSwap(GetTxsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.module_, lhs_arena,
                                       &other->_impl_.module_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTxsRequest, _impl_.limit_)
      + sizeof(GetTxsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetTxsRequest, _impl_.before_)>(
          reinterpret_cast<char*>(&_impl_.before_),
          reinterpret_cast<char*>(&other->_impl_.before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[29]);
}
// ===================================================================

class GetTxsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTxsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetTxsResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Paging& paging(const GetTxsResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Paging&
GetTxsResponse::_Internal::paging(const GetTxsResponse* msg) {
  return *msg->_impl_.paging_;
}
GetTxsResponse::GetTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetTxsResponse)
}
GetTxsResponse::GetTxsResponse(const GetTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_explorer_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetTxsResponse)
}

inline void GetTxsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

GetTxsResponse::~GetTxsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetTxsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetTxsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetTxsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.TxData data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetTxsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetTxsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  // repeated .injective_explorer_rpc.TxData data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetTxsResponse)
  return target;
}

::size_t GetTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetTxsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.TxData data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxsResponse::GetClassData() const { return &_class_data_; }


void GetTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxsResponse*>(&to_msg);
  auto& from = static_cast<const GetTxsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetTxsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_explorer_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxsResponse::CopyFrom(const GetTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxsResponse::IsInitialized() const {
  return true;
}

void GetTxsResponse::InternalSwap(GetTxsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[30]);
}
// ===================================================================

class GetTxByTxHashRequest::_Internal {
 public:
};

GetTxByTxHashRequest::GetTxByTxHashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetTxByTxHashRequest)
}
GetTxByTxHashRequest::GetTxByTxHashRequest(const GetTxByTxHashRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxByTxHashRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetTxByTxHashRequest)
}

inline void GetTxByTxHashRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTxByTxHashRequest::~GetTxByTxHashRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetTxByTxHashRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxByTxHashRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void GetTxByTxHashRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxByTxHashRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetTxByTxHashRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxByTxHashRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetTxByTxHashRequest.hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetTxByTxHashRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetTxByTxHashRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetTxByTxHashRequest.hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetTxByTxHashRequest)
  return target;
}

::size_t GetTxByTxHashRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetTxByTxHashRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxByTxHashRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxByTxHashRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxByTxHashRequest::GetClassData() const { return &_class_data_; }


void GetTxByTxHashRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxByTxHashRequest*>(&to_msg);
  auto& from = static_cast<const GetTxByTxHashRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetTxByTxHashRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxByTxHashRequest::CopyFrom(const GetTxByTxHashRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetTxByTxHashRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxByTxHashRequest::IsInitialized() const {
  return true;
}

void GetTxByTxHashRequest::InternalSwap(GetTxByTxHashRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxByTxHashRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[31]);
}
// ===================================================================

class GetTxByTxHashResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetTxByTxHashResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetTxByTxHashResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::TxDetailData& data(const GetTxByTxHashResponse* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::TxDetailData&
GetTxByTxHashResponse::_Internal::data(const GetTxByTxHashResponse* msg) {
  return *msg->_impl_.data_;
}
GetTxByTxHashResponse::GetTxByTxHashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetTxByTxHashResponse)
}
GetTxByTxHashResponse::GetTxByTxHashResponse(const GetTxByTxHashResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTxByTxHashResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , decltype(_impl_.data_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_s().empty()) {
    _this->_impl_.s_.Set(from._internal_s(), _this->GetArenaForAllocation());
  }
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errmsg().empty()) {
    _this->_impl_.errmsg_.Set(from._internal_errmsg(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_ = new ::injective_explorer_rpc::TxDetailData(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetTxByTxHashResponse)
}

inline void GetTxByTxHashResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.s_) {}

    , decltype(_impl_.errmsg_) {}

    , decltype(_impl_.data_){nullptr}
  };
  _impl_.s_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.s_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errmsg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.errmsg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTxByTxHashResponse::~GetTxByTxHashResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetTxByTxHashResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTxByTxHashResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.s_.Destroy();
  _impl_.errmsg_.Destroy();
  if (this != internal_default_instance()) delete _impl_.data_;
}

void GetTxByTxHashResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTxByTxHashResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetTxByTxHashResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.s_.ClearToEmpty();
  _impl_.errmsg_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.data_ != nullptr);
    _impl_.data_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTxByTxHashResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string s = 1 [json_name = "s"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_s();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetTxByTxHashResponse.s"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string errmsg = 2 [json_name = "errmsg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetTxByTxHashResponse.errmsg"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.TxDetailData data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetTxByTxHashResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetTxByTxHashResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    const std::string& _s = this->_internal_s();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetTxByTxHashResponse.s");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    const std::string& _s = this->_internal_errmsg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetTxByTxHashResponse.errmsg");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.TxDetailData data = 3 [json_name = "data"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetTxByTxHashResponse)
  return target;
}

::size_t GetTxByTxHashResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetTxByTxHashResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string s = 1 [json_name = "s"];
  if (!this->_internal_s().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_s());
  }

  // string errmsg = 2 [json_name = "errmsg"];
  if (!this->_internal_errmsg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_errmsg());
  }

  // .injective_explorer_rpc.TxDetailData data = 3 [json_name = "data"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTxByTxHashResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTxByTxHashResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTxByTxHashResponse::GetClassData() const { return &_class_data_; }


void GetTxByTxHashResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTxByTxHashResponse*>(&to_msg);
  auto& from = static_cast<const GetTxByTxHashResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetTxByTxHashResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_s().empty()) {
    _this->_internal_set_s(from._internal_s());
  }
  if (!from._internal_errmsg().empty()) {
    _this->_internal_set_errmsg(from._internal_errmsg());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_data()->::injective_explorer_rpc::TxDetailData::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTxByTxHashResponse::CopyFrom(const GetTxByTxHashResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetTxByTxHashResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTxByTxHashResponse::IsInitialized() const {
  return true;
}

void GetTxByTxHashResponse::InternalSwap(GetTxByTxHashResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s_, lhs_arena,
                                       &other->_impl_.s_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.errmsg_, lhs_arena,
                                       &other->_impl_.errmsg_, rhs_arena);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTxByTxHashResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[32]);
}
// ===================================================================

class GetPeggyDepositTxsRequest::_Internal {
 public:
};

GetPeggyDepositTxsRequest::GetPeggyDepositTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetPeggyDepositTxsRequest)
}
GetPeggyDepositTxsRequest::GetPeggyDepositTxsRequest(const GetPeggyDepositTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPeggyDepositTxsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetPeggyDepositTxsRequest)
}

inline void GetPeggyDepositTxsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPeggyDepositTxsRequest::~GetPeggyDepositTxsRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetPeggyDepositTxsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPeggyDepositTxsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
}

void GetPeggyDepositTxsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPeggyDepositTxsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetPeggyDepositTxsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPeggyDepositTxsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetPeggyDepositTxsRequest.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 2 [json_name = "receiver"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetPeggyDepositTxsRequest.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 4 [json_name = "skip"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetPeggyDepositTxsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetPeggyDepositTxsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetPeggyDepositTxsRequest.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetPeggyDepositTxsRequest.receiver");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_limit(), target);
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_skip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetPeggyDepositTxsRequest)
  return target;
}

::size_t GetPeggyDepositTxsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetPeggyDepositTxsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPeggyDepositTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPeggyDepositTxsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPeggyDepositTxsRequest::GetClassData() const { return &_class_data_; }


void GetPeggyDepositTxsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPeggyDepositTxsRequest*>(&to_msg);
  auto& from = static_cast<const GetPeggyDepositTxsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetPeggyDepositTxsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPeggyDepositTxsRequest::CopyFrom(const GetPeggyDepositTxsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetPeggyDepositTxsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeggyDepositTxsRequest::IsInitialized() const {
  return true;
}

void GetPeggyDepositTxsRequest::InternalSwap(GetPeggyDepositTxsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPeggyDepositTxsRequest, _impl_.limit_)
      + sizeof(GetPeggyDepositTxsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetPeggyDepositTxsRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeggyDepositTxsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[33]);
}
// ===================================================================

class GetPeggyDepositTxsResponse::_Internal {
 public:
};

GetPeggyDepositTxsResponse::GetPeggyDepositTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetPeggyDepositTxsResponse)
}
GetPeggyDepositTxsResponse::GetPeggyDepositTxsResponse(const GetPeggyDepositTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPeggyDepositTxsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){from._impl_.field_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetPeggyDepositTxsResponse)
}

inline void GetPeggyDepositTxsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPeggyDepositTxsResponse::~GetPeggyDepositTxsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetPeggyDepositTxsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPeggyDepositTxsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_field()->~RepeatedPtrField();
}

void GetPeggyDepositTxsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPeggyDepositTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetPeggyDepositTxsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_field()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPeggyDepositTxsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_explorer_rpc.PeggyDepositTx field = 1 [json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetPeggyDepositTxsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetPeggyDepositTxsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.PeggyDepositTx field = 1 [json_name = "field"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetPeggyDepositTxsResponse)
  return target;
}

::size_t GetPeggyDepositTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetPeggyDepositTxsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.PeggyDepositTx field = 1 [json_name = "field"];
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->_internal_field()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPeggyDepositTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPeggyDepositTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPeggyDepositTxsResponse::GetClassData() const { return &_class_data_; }


void GetPeggyDepositTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPeggyDepositTxsResponse*>(&to_msg);
  auto& from = static_cast<const GetPeggyDepositTxsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetPeggyDepositTxsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_field()->MergeFrom(from._internal_field());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPeggyDepositTxsResponse::CopyFrom(const GetPeggyDepositTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetPeggyDepositTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeggyDepositTxsResponse::IsInitialized() const {
  return true;
}

void GetPeggyDepositTxsResponse::InternalSwap(GetPeggyDepositTxsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_field()->InternalSwap(other->_internal_mutable_field());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeggyDepositTxsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[34]);
}
// ===================================================================

class PeggyDepositTx::_Internal {
 public:
};

PeggyDepositTx::PeggyDepositTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.PeggyDepositTx)
}
PeggyDepositTx::PeggyDepositTx(const PeggyDepositTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeggyDepositTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hashes_){from._impl_.tx_hashes_}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.event_nonce_) {}

    , decltype(_impl_.event_height_) {}

    , decltype(_impl_.claim_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_at().empty()) {
    _this->_impl_.created_at_.Set(from._internal_created_at(), _this->GetArenaForAllocation());
  }
  _impl_.updated_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.updated_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_at().empty()) {
    _this->_impl_.updated_at_.Set(from._internal_updated_at(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_nonce_, &from._impl_.event_nonce_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.claim_type_) -
    reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.claim_type_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.PeggyDepositTx)
}

inline void PeggyDepositTx::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hashes_){arena}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.event_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.event_height_) { ::uint64_t{0u} }

    , decltype(_impl_.claim_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updated_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.updated_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeggyDepositTx::~PeggyDepositTx() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.PeggyDepositTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeggyDepositTx::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tx_hashes()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
  _impl_.amount_.Destroy();
  _impl_.denom_.Destroy();
  _impl_.orchestrator_address_.Destroy();
  _impl_.state_.Destroy();
  _impl_.created_at_.Destroy();
  _impl_.updated_at_.Destroy();
}

void PeggyDepositTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeggyDepositTx::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.PeggyDepositTx)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tx_hashes()->Clear();
  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _impl_.orchestrator_address_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.created_at_.ClearToEmpty();
  _impl_.updated_at_.ClearToEmpty();
  ::memset(&_impl_.event_nonce_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.claim_type_) -
      reinterpret_cast<char*>(&_impl_.event_nonce_)) + sizeof(_impl_.claim_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeggyDepositTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 2 [json_name = "receiver"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_nonce = 3 [json_name = "eventNonce"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.event_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_height = 4 [json_name = "eventHeight"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.event_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 5 [json_name = "amount"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 6 [json_name = "denom"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 7 [json_name = "orchestratorAddress"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string state = 8 [json_name = "state"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.state"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 claim_type = 9 [json_name = "claimType"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.claim_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string tx_hashes = 10 [json_name = "txHashes"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tx_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.tx_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string created_at = 11 [json_name = "createdAt"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_created_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.created_at"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string updated_at = 12 [json_name = "updatedAt"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyDepositTx.updated_at"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PeggyDepositTx::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.PeggyDepositTx)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.receiver");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 event_nonce = 3 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_event_nonce(), target);
  }

  // uint64 event_height = 4 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_event_height(), target);
  }

  // string amount = 5 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.amount");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string denom = 6 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.denom");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string orchestrator_address = 7 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.orchestrator_address");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string state = 8 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.state");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // sint32 claim_type = 9 [json_name = "claimType"];
  if (this->_internal_claim_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        9, this->_internal_claim_type(), target);
  }

  // repeated string tx_hashes = 10 [json_name = "txHashes"];
  for (int i = 0, n = this->_internal_tx_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_tx_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.tx_hashes");
    target = stream->WriteString(10, s, target);
  }

  // string created_at = 11 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    const std::string& _s = this->_internal_created_at();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.created_at");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string updated_at = 12 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    const std::string& _s = this->_internal_updated_at();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyDepositTx.updated_at");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.PeggyDepositTx)
  return target;
}

::size_t PeggyDepositTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.PeggyDepositTx)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tx_hashes = 10 [json_name = "txHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_tx_hashes().size());
  for (int i = 0, n = _internal_tx_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_tx_hashes().Get(i));
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  // string amount = 5 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // string denom = 6 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string orchestrator_address = 7 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // string state = 8 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  // string created_at = 11 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_created_at());
  }

  // string updated_at = 12 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_updated_at());
  }

  // uint64 event_nonce = 3 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_nonce());
  }

  // uint64 event_height = 4 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_height());
  }

  // sint32 claim_type = 9 [json_name = "claimType"];
  if (this->_internal_claim_type() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_claim_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeggyDepositTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeggyDepositTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeggyDepositTx::GetClassData() const { return &_class_data_; }


void PeggyDepositTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeggyDepositTx*>(&to_msg);
  auto& from = static_cast<const PeggyDepositTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.PeggyDepositTx)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tx_hashes()->MergeFrom(from._internal_tx_hashes());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_created_at().empty()) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_event_nonce() != 0) {
    _this->_internal_set_event_nonce(from._internal_event_nonce());
  }
  if (from._internal_event_height() != 0) {
    _this->_internal_set_event_height(from._internal_event_height());
  }
  if (from._internal_claim_type() != 0) {
    _this->_internal_set_claim_type(from._internal_claim_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeggyDepositTx::CopyFrom(const PeggyDepositTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.PeggyDepositTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeggyDepositTx::IsInitialized() const {
  return true;
}

void PeggyDepositTx::InternalSwap(PeggyDepositTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_tx_hashes()->InternalSwap(
      other->_internal_mutable_tx_hashes());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.created_at_, lhs_arena,
                                       &other->_impl_.created_at_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.updated_at_, lhs_arena,
                                       &other->_impl_.updated_at_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeggyDepositTx, _impl_.claim_type_)
      + sizeof(PeggyDepositTx::_impl_.claim_type_)
      - PROTOBUF_FIELD_OFFSET(PeggyDepositTx, _impl_.event_nonce_)>(
          reinterpret_cast<char*>(&_impl_.event_nonce_),
          reinterpret_cast<char*>(&other->_impl_.event_nonce_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeggyDepositTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[35]);
}
// ===================================================================

class GetPeggyWithdrawalTxsRequest::_Internal {
 public:
};

GetPeggyWithdrawalTxsRequest::GetPeggyWithdrawalTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
}
GetPeggyWithdrawalTxsRequest::GetPeggyWithdrawalTxsRequest(const GetPeggyWithdrawalTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPeggyWithdrawalTxsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
}

inline void GetPeggyWithdrawalTxsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPeggyWithdrawalTxsRequest::~GetPeggyWithdrawalTxsRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPeggyWithdrawalTxsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
}

void GetPeggyWithdrawalTxsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPeggyWithdrawalTxsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPeggyWithdrawalTxsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetPeggyWithdrawalTxsRequest.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 2 [json_name = "receiver"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetPeggyWithdrawalTxsRequest.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 4 [json_name = "skip"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetPeggyWithdrawalTxsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetPeggyWithdrawalTxsRequest.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetPeggyWithdrawalTxsRequest.receiver");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_limit(), target);
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_skip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
  return target;
}

::size_t GetPeggyWithdrawalTxsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPeggyWithdrawalTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPeggyWithdrawalTxsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPeggyWithdrawalTxsRequest::GetClassData() const { return &_class_data_; }


void GetPeggyWithdrawalTxsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPeggyWithdrawalTxsRequest*>(&to_msg);
  auto& from = static_cast<const GetPeggyWithdrawalTxsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPeggyWithdrawalTxsRequest::CopyFrom(const GetPeggyWithdrawalTxsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetPeggyWithdrawalTxsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeggyWithdrawalTxsRequest::IsInitialized() const {
  return true;
}

void GetPeggyWithdrawalTxsRequest::InternalSwap(GetPeggyWithdrawalTxsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPeggyWithdrawalTxsRequest, _impl_.limit_)
      + sizeof(GetPeggyWithdrawalTxsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetPeggyWithdrawalTxsRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeggyWithdrawalTxsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[36]);
}
// ===================================================================

class GetPeggyWithdrawalTxsResponse::_Internal {
 public:
};

GetPeggyWithdrawalTxsResponse::GetPeggyWithdrawalTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
}
GetPeggyWithdrawalTxsResponse::GetPeggyWithdrawalTxsResponse(const GetPeggyWithdrawalTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPeggyWithdrawalTxsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){from._impl_.field_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
}

inline void GetPeggyWithdrawalTxsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPeggyWithdrawalTxsResponse::~GetPeggyWithdrawalTxsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPeggyWithdrawalTxsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_field()->~RepeatedPtrField();
}

void GetPeggyWithdrawalTxsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPeggyWithdrawalTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_field()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPeggyWithdrawalTxsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_explorer_rpc.PeggyWithdrawalTx field = 1 [json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetPeggyWithdrawalTxsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.PeggyWithdrawalTx field = 1 [json_name = "field"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
  return target;
}

::size_t GetPeggyWithdrawalTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.PeggyWithdrawalTx field = 1 [json_name = "field"];
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->_internal_field()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPeggyWithdrawalTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPeggyWithdrawalTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPeggyWithdrawalTxsResponse::GetClassData() const { return &_class_data_; }


void GetPeggyWithdrawalTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPeggyWithdrawalTxsResponse*>(&to_msg);
  auto& from = static_cast<const GetPeggyWithdrawalTxsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_field()->MergeFrom(from._internal_field());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPeggyWithdrawalTxsResponse::CopyFrom(const GetPeggyWithdrawalTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetPeggyWithdrawalTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPeggyWithdrawalTxsResponse::IsInitialized() const {
  return true;
}

void GetPeggyWithdrawalTxsResponse::InternalSwap(GetPeggyWithdrawalTxsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_field()->InternalSwap(other->_internal_mutable_field());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPeggyWithdrawalTxsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[37]);
}
// ===================================================================

class PeggyWithdrawalTx::_Internal {
 public:
};

PeggyWithdrawalTx::PeggyWithdrawalTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.PeggyWithdrawalTx)
}
PeggyWithdrawalTx::PeggyWithdrawalTx(const PeggyWithdrawalTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeggyWithdrawalTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hashes_){from._impl_.tx_hashes_}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.bridge_fee_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.outgoing_tx_id_) {}

    , decltype(_impl_.batch_timeout_) {}

    , decltype(_impl_.batch_nonce_) {}

    , decltype(_impl_.event_nonce_) {}

    , decltype(_impl_.event_height_) {}

    , decltype(_impl_.claim_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.bridge_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bridge_fee().empty()) {
    _this->_impl_.bridge_fee_.Set(from._internal_bridge_fee(), _this->GetArenaForAllocation());
  }
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orchestrator_address().empty()) {
    _this->_impl_.orchestrator_address_.Set(from._internal_orchestrator_address(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_at().empty()) {
    _this->_impl_.created_at_.Set(from._internal_created_at(), _this->GetArenaForAllocation());
  }
  _impl_.updated_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.updated_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_at().empty()) {
    _this->_impl_.updated_at_.Set(from._internal_updated_at(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.outgoing_tx_id_, &from._impl_.outgoing_tx_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.claim_type_) -
    reinterpret_cast<char*>(&_impl_.outgoing_tx_id_)) + sizeof(_impl_.claim_type_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.PeggyWithdrawalTx)
}

inline void PeggyWithdrawalTx::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hashes_){arena}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.bridge_fee_) {}

    , decltype(_impl_.orchestrator_address_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.outgoing_tx_id_) { ::uint64_t{0u} }

    , decltype(_impl_.batch_timeout_) { ::uint64_t{0u} }

    , decltype(_impl_.batch_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.event_nonce_) { ::uint64_t{0u} }

    , decltype(_impl_.event_height_) { ::uint64_t{0u} }

    , decltype(_impl_.claim_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bridge_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bridge_fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orchestrator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orchestrator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updated_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.updated_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PeggyWithdrawalTx::~PeggyWithdrawalTx() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.PeggyWithdrawalTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeggyWithdrawalTx::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tx_hashes()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
  _impl_.amount_.Destroy();
  _impl_.denom_.Destroy();
  _impl_.bridge_fee_.Destroy();
  _impl_.orchestrator_address_.Destroy();
  _impl_.state_.Destroy();
  _impl_.created_at_.Destroy();
  _impl_.updated_at_.Destroy();
}

void PeggyWithdrawalTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeggyWithdrawalTx::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.PeggyWithdrawalTx)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tx_hashes()->Clear();
  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _impl_.bridge_fee_.ClearToEmpty();
  _impl_.orchestrator_address_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.created_at_.ClearToEmpty();
  _impl_.updated_at_.ClearToEmpty();
  ::memset(&_impl_.outgoing_tx_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.claim_type_) -
      reinterpret_cast<char*>(&_impl_.outgoing_tx_id_)) + sizeof(_impl_.claim_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeggyWithdrawalTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 2 [json_name = "receiver"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 4 [json_name = "denom"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string bridge_fee = 5 [json_name = "bridgeFee"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bridge_fee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.bridge_fee"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 outgoing_tx_id = 6 [json_name = "outgoingTxId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.outgoing_tx_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 batch_timeout = 7 [json_name = "batchTimeout"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.batch_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 batch_nonce = 8 [json_name = "batchNonce"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.batch_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string orchestrator_address = 9 [json_name = "orchestratorAddress"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_orchestrator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.orchestrator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_nonce = 10 [json_name = "eventNonce"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.event_nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 event_height = 11 [json_name = "eventHeight"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.event_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string state = 12 [json_name = "state"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.state"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 claim_type = 13 [json_name = "claimType"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.claim_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string tx_hashes = 14 [json_name = "txHashes"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tx_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.tx_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string created_at = 15 [json_name = "createdAt"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_created_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.created_at"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string updated_at = 16 [json_name = "updatedAt"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.PeggyWithdrawalTx.updated_at"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PeggyWithdrawalTx::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.PeggyWithdrawalTx)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.receiver");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string amount = 3 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.amount");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string denom = 4 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.denom");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string bridge_fee = 5 [json_name = "bridgeFee"];
  if (!this->_internal_bridge_fee().empty()) {
    const std::string& _s = this->_internal_bridge_fee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.bridge_fee");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // uint64 outgoing_tx_id = 6 [json_name = "outgoingTxId"];
  if (this->_internal_outgoing_tx_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_outgoing_tx_id(), target);
  }

  // uint64 batch_timeout = 7 [json_name = "batchTimeout"];
  if (this->_internal_batch_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_batch_timeout(), target);
  }

  // uint64 batch_nonce = 8 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_batch_nonce(), target);
  }

  // string orchestrator_address = 9 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    const std::string& _s = this->_internal_orchestrator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.orchestrator_address");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // uint64 event_nonce = 10 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_event_nonce(), target);
  }

  // uint64 event_height = 11 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_event_height(), target);
  }

  // string state = 12 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.state");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // sint32 claim_type = 13 [json_name = "claimType"];
  if (this->_internal_claim_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        13, this->_internal_claim_type(), target);
  }

  // repeated string tx_hashes = 14 [json_name = "txHashes"];
  for (int i = 0, n = this->_internal_tx_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_tx_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.tx_hashes");
    target = stream->WriteString(14, s, target);
  }

  // string created_at = 15 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    const std::string& _s = this->_internal_created_at();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.created_at");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string updated_at = 16 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    const std::string& _s = this->_internal_updated_at();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.PeggyWithdrawalTx.updated_at");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.PeggyWithdrawalTx)
  return target;
}

::size_t PeggyWithdrawalTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.PeggyWithdrawalTx)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tx_hashes = 14 [json_name = "txHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_tx_hashes().size());
  for (int i = 0, n = _internal_tx_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_tx_hashes().Get(i));
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  // string amount = 3 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // string denom = 4 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string bridge_fee = 5 [json_name = "bridgeFee"];
  if (!this->_internal_bridge_fee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bridge_fee());
  }

  // string orchestrator_address = 9 [json_name = "orchestratorAddress"];
  if (!this->_internal_orchestrator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orchestrator_address());
  }

  // string state = 12 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  // string created_at = 15 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_created_at());
  }

  // string updated_at = 16 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_updated_at());
  }

  // uint64 outgoing_tx_id = 6 [json_name = "outgoingTxId"];
  if (this->_internal_outgoing_tx_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_outgoing_tx_id());
  }

  // uint64 batch_timeout = 7 [json_name = "batchTimeout"];
  if (this->_internal_batch_timeout() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_timeout());
  }

  // uint64 batch_nonce = 8 [json_name = "batchNonce"];
  if (this->_internal_batch_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_batch_nonce());
  }

  // uint64 event_nonce = 10 [json_name = "eventNonce"];
  if (this->_internal_event_nonce() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_nonce());
  }

  // uint64 event_height = 11 [json_name = "eventHeight"];
  if (this->_internal_event_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_event_height());
  }

  // sint32 claim_type = 13 [json_name = "claimType"];
  if (this->_internal_claim_type() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_claim_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeggyWithdrawalTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeggyWithdrawalTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeggyWithdrawalTx::GetClassData() const { return &_class_data_; }


void PeggyWithdrawalTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeggyWithdrawalTx*>(&to_msg);
  auto& from = static_cast<const PeggyWithdrawalTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.PeggyWithdrawalTx)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tx_hashes()->MergeFrom(from._internal_tx_hashes());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_bridge_fee().empty()) {
    _this->_internal_set_bridge_fee(from._internal_bridge_fee());
  }
  if (!from._internal_orchestrator_address().empty()) {
    _this->_internal_set_orchestrator_address(from._internal_orchestrator_address());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_created_at().empty()) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_outgoing_tx_id() != 0) {
    _this->_internal_set_outgoing_tx_id(from._internal_outgoing_tx_id());
  }
  if (from._internal_batch_timeout() != 0) {
    _this->_internal_set_batch_timeout(from._internal_batch_timeout());
  }
  if (from._internal_batch_nonce() != 0) {
    _this->_internal_set_batch_nonce(from._internal_batch_nonce());
  }
  if (from._internal_event_nonce() != 0) {
    _this->_internal_set_event_nonce(from._internal_event_nonce());
  }
  if (from._internal_event_height() != 0) {
    _this->_internal_set_event_height(from._internal_event_height());
  }
  if (from._internal_claim_type() != 0) {
    _this->_internal_set_claim_type(from._internal_claim_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeggyWithdrawalTx::CopyFrom(const PeggyWithdrawalTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.PeggyWithdrawalTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeggyWithdrawalTx::IsInitialized() const {
  return true;
}

void PeggyWithdrawalTx::InternalSwap(PeggyWithdrawalTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_tx_hashes()->InternalSwap(
      other->_internal_mutable_tx_hashes());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bridge_fee_, lhs_arena,
                                       &other->_impl_.bridge_fee_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orchestrator_address_, lhs_arena,
                                       &other->_impl_.orchestrator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.created_at_, lhs_arena,
                                       &other->_impl_.created_at_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.updated_at_, lhs_arena,
                                       &other->_impl_.updated_at_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeggyWithdrawalTx, _impl_.claim_type_)
      + sizeof(PeggyWithdrawalTx::_impl_.claim_type_)
      - PROTOBUF_FIELD_OFFSET(PeggyWithdrawalTx, _impl_.outgoing_tx_id_)>(
          reinterpret_cast<char*>(&_impl_.outgoing_tx_id_),
          reinterpret_cast<char*>(&other->_impl_.outgoing_tx_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeggyWithdrawalTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[38]);
}
// ===================================================================

class GetIBCTransferTxsRequest::_Internal {
 public:
};

GetIBCTransferTxsRequest::GetIBCTransferTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetIBCTransferTxsRequest)
}
GetIBCTransferTxsRequest::GetIBCTransferTxsRequest(const GetIBCTransferTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIBCTransferTxsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.src_channel_) {}

    , decltype(_impl_.src_port_) {}

    , decltype(_impl_.dest_channel_) {}

    , decltype(_impl_.dest_port_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  _impl_.src_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_channel().empty()) {
    _this->_impl_.src_channel_.Set(from._internal_src_channel(), _this->GetArenaForAllocation());
  }
  _impl_.src_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_port().empty()) {
    _this->_impl_.src_port_.Set(from._internal_src_port(), _this->GetArenaForAllocation());
  }
  _impl_.dest_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dest_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dest_channel().empty()) {
    _this->_impl_.dest_channel_.Set(from._internal_dest_channel(), _this->GetArenaForAllocation());
  }
  _impl_.dest_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dest_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dest_port().empty()) {
    _this->_impl_.dest_port_.Set(from._internal_dest_port(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetIBCTransferTxsRequest)
}

inline void GetIBCTransferTxsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.src_channel_) {}

    , decltype(_impl_.src_port_) {}

    , decltype(_impl_.dest_channel_) {}

    , decltype(_impl_.dest_port_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.src_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.src_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dest_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dest_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dest_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dest_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetIBCTransferTxsRequest::~GetIBCTransferTxsRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetIBCTransferTxsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIBCTransferTxsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
  _impl_.src_channel_.Destroy();
  _impl_.src_port_.Destroy();
  _impl_.dest_channel_.Destroy();
  _impl_.dest_port_.Destroy();
}

void GetIBCTransferTxsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIBCTransferTxsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetIBCTransferTxsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  _impl_.src_channel_.ClearToEmpty();
  _impl_.src_port_.ClearToEmpty();
  _impl_.dest_channel_.ClearToEmpty();
  _impl_.dest_port_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIBCTransferTxsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetIBCTransferTxsRequest.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 2 [json_name = "receiver"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetIBCTransferTxsRequest.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string src_channel = 3 [json_name = "srcChannel"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_src_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetIBCTransferTxsRequest.src_channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string src_port = 4 [json_name = "srcPort"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_src_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetIBCTransferTxsRequest.src_port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dest_channel = 5 [json_name = "destChannel"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dest_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetIBCTransferTxsRequest.dest_channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dest_port = 6 [json_name = "destPort"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_dest_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetIBCTransferTxsRequest.dest_port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 7 [json_name = "limit"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 8 [json_name = "skip"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetIBCTransferTxsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetIBCTransferTxsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetIBCTransferTxsRequest.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetIBCTransferTxsRequest.receiver");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string src_channel = 3 [json_name = "srcChannel"];
  if (!this->_internal_src_channel().empty()) {
    const std::string& _s = this->_internal_src_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetIBCTransferTxsRequest.src_channel");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string src_port = 4 [json_name = "srcPort"];
  if (!this->_internal_src_port().empty()) {
    const std::string& _s = this->_internal_src_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetIBCTransferTxsRequest.src_port");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string dest_channel = 5 [json_name = "destChannel"];
  if (!this->_internal_dest_channel().empty()) {
    const std::string& _s = this->_internal_dest_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetIBCTransferTxsRequest.dest_channel");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string dest_port = 6 [json_name = "destPort"];
  if (!this->_internal_dest_port().empty()) {
    const std::string& _s = this->_internal_dest_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetIBCTransferTxsRequest.dest_port");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // sint32 limit = 7 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        7, this->_internal_limit(), target);
  }

  // uint64 skip = 8 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_skip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetIBCTransferTxsRequest)
  return target;
}

::size_t GetIBCTransferTxsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetIBCTransferTxsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  // string src_channel = 3 [json_name = "srcChannel"];
  if (!this->_internal_src_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src_channel());
  }

  // string src_port = 4 [json_name = "srcPort"];
  if (!this->_internal_src_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_src_port());
  }

  // string dest_channel = 5 [json_name = "destChannel"];
  if (!this->_internal_dest_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dest_channel());
  }

  // string dest_port = 6 [json_name = "destPort"];
  if (!this->_internal_dest_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dest_port());
  }

  // uint64 skip = 8 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint32 limit = 7 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIBCTransferTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIBCTransferTxsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIBCTransferTxsRequest::GetClassData() const { return &_class_data_; }


void GetIBCTransferTxsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIBCTransferTxsRequest*>(&to_msg);
  auto& from = static_cast<const GetIBCTransferTxsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetIBCTransferTxsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_src_channel().empty()) {
    _this->_internal_set_src_channel(from._internal_src_channel());
  }
  if (!from._internal_src_port().empty()) {
    _this->_internal_set_src_port(from._internal_src_port());
  }
  if (!from._internal_dest_channel().empty()) {
    _this->_internal_set_dest_channel(from._internal_dest_channel());
  }
  if (!from._internal_dest_port().empty()) {
    _this->_internal_set_dest_port(from._internal_dest_port());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIBCTransferTxsRequest::CopyFrom(const GetIBCTransferTxsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetIBCTransferTxsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIBCTransferTxsRequest::IsInitialized() const {
  return true;
}

void GetIBCTransferTxsRequest::InternalSwap(GetIBCTransferTxsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_channel_, lhs_arena,
                                       &other->_impl_.src_channel_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_port_, lhs_arena,
                                       &other->_impl_.src_port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dest_channel_, lhs_arena,
                                       &other->_impl_.dest_channel_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dest_port_, lhs_arena,
                                       &other->_impl_.dest_port_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetIBCTransferTxsRequest, _impl_.limit_)
      + sizeof(GetIBCTransferTxsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetIBCTransferTxsRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIBCTransferTxsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[39]);
}
// ===================================================================

class GetIBCTransferTxsResponse::_Internal {
 public:
};

GetIBCTransferTxsResponse::GetIBCTransferTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetIBCTransferTxsResponse)
}
GetIBCTransferTxsResponse::GetIBCTransferTxsResponse(const GetIBCTransferTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetIBCTransferTxsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){from._impl_.field_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetIBCTransferTxsResponse)
}

inline void GetIBCTransferTxsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetIBCTransferTxsResponse::~GetIBCTransferTxsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetIBCTransferTxsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetIBCTransferTxsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_field()->~RepeatedPtrField();
}

void GetIBCTransferTxsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetIBCTransferTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetIBCTransferTxsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_field()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIBCTransferTxsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_explorer_rpc.IBCTransferTx field = 1 [json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetIBCTransferTxsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetIBCTransferTxsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.IBCTransferTx field = 1 [json_name = "field"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetIBCTransferTxsResponse)
  return target;
}

::size_t GetIBCTransferTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetIBCTransferTxsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.IBCTransferTx field = 1 [json_name = "field"];
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->_internal_field()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetIBCTransferTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetIBCTransferTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetIBCTransferTxsResponse::GetClassData() const { return &_class_data_; }


void GetIBCTransferTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetIBCTransferTxsResponse*>(&to_msg);
  auto& from = static_cast<const GetIBCTransferTxsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetIBCTransferTxsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_field()->MergeFrom(from._internal_field());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetIBCTransferTxsResponse::CopyFrom(const GetIBCTransferTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetIBCTransferTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIBCTransferTxsResponse::IsInitialized() const {
  return true;
}

void GetIBCTransferTxsResponse::InternalSwap(GetIBCTransferTxsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_field()->InternalSwap(other->_internal_mutable_field());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIBCTransferTxsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[40]);
}
// ===================================================================

class IBCTransferTx::_Internal {
 public:
};

IBCTransferTx::IBCTransferTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.IBCTransferTx)
}
IBCTransferTx::IBCTransferTx(const IBCTransferTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IBCTransferTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hashes_){from._impl_.tx_hashes_}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.source_port_) {}

    , decltype(_impl_.source_channel_) {}

    , decltype(_impl_.destination_port_) {}

    , decltype(_impl_.destination_channel_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.timeout_height_) {}

    , decltype(_impl_.data_hex_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.timeout_timestamp_) {}

    , decltype(_impl_.packet_sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  _impl_.source_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_port().empty()) {
    _this->_impl_.source_port_.Set(from._internal_source_port(), _this->GetArenaForAllocation());
  }
  _impl_.source_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_channel().empty()) {
    _this->_impl_.source_channel_.Set(from._internal_source_channel(), _this->GetArenaForAllocation());
  }
  _impl_.destination_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_port().empty()) {
    _this->_impl_.destination_port_.Set(from._internal_destination_port(), _this->GetArenaForAllocation());
  }
  _impl_.destination_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_channel().empty()) {
    _this->_impl_.destination_channel_.Set(from._internal_destination_channel(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.timeout_height_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timeout_height_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timeout_height().empty()) {
    _this->_impl_.timeout_height_.Set(from._internal_timeout_height(), _this->GetArenaForAllocation());
  }
  _impl_.data_hex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_hex_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_hex().empty()) {
    _this->_impl_.data_hex_.Set(from._internal_data_hex(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_created_at().empty()) {
    _this->_impl_.created_at_.Set(from._internal_created_at(), _this->GetArenaForAllocation());
  }
  _impl_.updated_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.updated_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_updated_at().empty()) {
    _this->_impl_.updated_at_.Set(from._internal_updated_at(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timeout_timestamp_, &from._impl_.timeout_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.packet_sequence_) -
    reinterpret_cast<char*>(&_impl_.timeout_timestamp_)) + sizeof(_impl_.packet_sequence_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.IBCTransferTx)
}

inline void IBCTransferTx::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_hashes_){arena}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.source_port_) {}

    , decltype(_impl_.source_channel_) {}

    , decltype(_impl_.destination_port_) {}

    , decltype(_impl_.destination_channel_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.timeout_height_) {}

    , decltype(_impl_.data_hex_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.timeout_timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.packet_sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timeout_height_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timeout_height_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_hex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_hex_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.created_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.updated_at_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.updated_at_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IBCTransferTx::~IBCTransferTx() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.IBCTransferTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IBCTransferTx::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tx_hashes()->~RepeatedPtrField();
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
  _impl_.source_port_.Destroy();
  _impl_.source_channel_.Destroy();
  _impl_.destination_port_.Destroy();
  _impl_.destination_channel_.Destroy();
  _impl_.amount_.Destroy();
  _impl_.denom_.Destroy();
  _impl_.timeout_height_.Destroy();
  _impl_.data_hex_.Destroy();
  _impl_.state_.Destroy();
  _impl_.created_at_.Destroy();
  _impl_.updated_at_.Destroy();
}

void IBCTransferTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IBCTransferTx::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.IBCTransferTx)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tx_hashes()->Clear();
  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  _impl_.source_port_.ClearToEmpty();
  _impl_.source_channel_.ClearToEmpty();
  _impl_.destination_port_.ClearToEmpty();
  _impl_.destination_channel_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _impl_.timeout_height_.ClearToEmpty();
  _impl_.data_hex_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.created_at_.ClearToEmpty();
  _impl_.updated_at_.ClearToEmpty();
  ::memset(&_impl_.timeout_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.packet_sequence_) -
      reinterpret_cast<char*>(&_impl_.timeout_timestamp_)) + sizeof(_impl_.packet_sequence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IBCTransferTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [json_name = "sender"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 2 [json_name = "receiver"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_port = 3 [json_name = "sourcePort"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.source_port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_channel = 4 [json_name = "sourceChannel"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_source_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.source_channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string destination_port = 5 [json_name = "destinationPort"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_destination_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.destination_port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string destination_channel = 6 [json_name = "destinationChannel"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_destination_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.destination_channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 7 [json_name = "amount"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 8 [json_name = "denom"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string timeout_height = 9 [json_name = "timeoutHeight"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_timeout_height();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.timeout_height"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timeout_timestamp = 10 [json_name = "timeoutTimestamp"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.timeout_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 packet_sequence = 11 [json_name = "packetSequence"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.packet_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data_hex = 12 [json_name = "dataHex"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_data_hex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string state = 13 [json_name = "state"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.state"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string tx_hashes = 14 [json_name = "txHashes"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tx_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.tx_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string created_at = 15 [json_name = "createdAt"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_created_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.created_at"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string updated_at = 16 [json_name = "updatedAt"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.IBCTransferTx.updated_at"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IBCTransferTx::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.IBCTransferTx)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.receiver");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string source_port = 3 [json_name = "sourcePort"];
  if (!this->_internal_source_port().empty()) {
    const std::string& _s = this->_internal_source_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.source_port");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string source_channel = 4 [json_name = "sourceChannel"];
  if (!this->_internal_source_channel().empty()) {
    const std::string& _s = this->_internal_source_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.source_channel");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string destination_port = 5 [json_name = "destinationPort"];
  if (!this->_internal_destination_port().empty()) {
    const std::string& _s = this->_internal_destination_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.destination_port");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string destination_channel = 6 [json_name = "destinationChannel"];
  if (!this->_internal_destination_channel().empty()) {
    const std::string& _s = this->_internal_destination_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.destination_channel");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string amount = 7 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.amount");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string denom = 8 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.denom");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string timeout_height = 9 [json_name = "timeoutHeight"];
  if (!this->_internal_timeout_height().empty()) {
    const std::string& _s = this->_internal_timeout_height();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.timeout_height");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // uint64 timeout_timestamp = 10 [json_name = "timeoutTimestamp"];
  if (this->_internal_timeout_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_timeout_timestamp(), target);
  }

  // uint64 packet_sequence = 11 [json_name = "packetSequence"];
  if (this->_internal_packet_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_packet_sequence(), target);
  }

  // bytes data_hex = 12 [json_name = "dataHex"];
  if (!this->_internal_data_hex().empty()) {
    const std::string& _s = this->_internal_data_hex();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // string state = 13 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.state");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // repeated string tx_hashes = 14 [json_name = "txHashes"];
  for (int i = 0, n = this->_internal_tx_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_tx_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.tx_hashes");
    target = stream->WriteString(14, s, target);
  }

  // string created_at = 15 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    const std::string& _s = this->_internal_created_at();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.created_at");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string updated_at = 16 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    const std::string& _s = this->_internal_updated_at();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.IBCTransferTx.updated_at");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.IBCTransferTx)
  return target;
}

::size_t IBCTransferTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.IBCTransferTx)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tx_hashes = 14 [json_name = "txHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_tx_hashes().size());
  for (int i = 0, n = _internal_tx_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_tx_hashes().Get(i));
  }

  // string sender = 1 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 2 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  // string source_port = 3 [json_name = "sourcePort"];
  if (!this->_internal_source_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_port());
  }

  // string source_channel = 4 [json_name = "sourceChannel"];
  if (!this->_internal_source_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_channel());
  }

  // string destination_port = 5 [json_name = "destinationPort"];
  if (!this->_internal_destination_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_port());
  }

  // string destination_channel = 6 [json_name = "destinationChannel"];
  if (!this->_internal_destination_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_channel());
  }

  // string amount = 7 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // string denom = 8 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string timeout_height = 9 [json_name = "timeoutHeight"];
  if (!this->_internal_timeout_height().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timeout_height());
  }

  // bytes data_hex = 12 [json_name = "dataHex"];
  if (!this->_internal_data_hex().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data_hex());
  }

  // string state = 13 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  // string created_at = 15 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_created_at());
  }

  // string updated_at = 16 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_updated_at());
  }

  // uint64 timeout_timestamp = 10 [json_name = "timeoutTimestamp"];
  if (this->_internal_timeout_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timeout_timestamp());
  }

  // uint64 packet_sequence = 11 [json_name = "packetSequence"];
  if (this->_internal_packet_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_packet_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IBCTransferTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IBCTransferTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IBCTransferTx::GetClassData() const { return &_class_data_; }


void IBCTransferTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IBCTransferTx*>(&to_msg);
  auto& from = static_cast<const IBCTransferTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.IBCTransferTx)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tx_hashes()->MergeFrom(from._internal_tx_hashes());
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_source_port().empty()) {
    _this->_internal_set_source_port(from._internal_source_port());
  }
  if (!from._internal_source_channel().empty()) {
    _this->_internal_set_source_channel(from._internal_source_channel());
  }
  if (!from._internal_destination_port().empty()) {
    _this->_internal_set_destination_port(from._internal_destination_port());
  }
  if (!from._internal_destination_channel().empty()) {
    _this->_internal_set_destination_channel(from._internal_destination_channel());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_timeout_height().empty()) {
    _this->_internal_set_timeout_height(from._internal_timeout_height());
  }
  if (!from._internal_data_hex().empty()) {
    _this->_internal_set_data_hex(from._internal_data_hex());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_created_at().empty()) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_timeout_timestamp() != 0) {
    _this->_internal_set_timeout_timestamp(from._internal_timeout_timestamp());
  }
  if (from._internal_packet_sequence() != 0) {
    _this->_internal_set_packet_sequence(from._internal_packet_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IBCTransferTx::CopyFrom(const IBCTransferTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.IBCTransferTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IBCTransferTx::IsInitialized() const {
  return true;
}

void IBCTransferTx::InternalSwap(IBCTransferTx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_tx_hashes()->InternalSwap(
      other->_internal_mutable_tx_hashes());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_port_, lhs_arena,
                                       &other->_impl_.source_port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_channel_, lhs_arena,
                                       &other->_impl_.source_channel_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_port_, lhs_arena,
                                       &other->_impl_.destination_port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_channel_, lhs_arena,
                                       &other->_impl_.destination_channel_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timeout_height_, lhs_arena,
                                       &other->_impl_.timeout_height_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_hex_, lhs_arena,
                                       &other->_impl_.data_hex_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.created_at_, lhs_arena,
                                       &other->_impl_.created_at_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.updated_at_, lhs_arena,
                                       &other->_impl_.updated_at_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IBCTransferTx, _impl_.packet_sequence_)
      + sizeof(IBCTransferTx::_impl_.packet_sequence_)
      - PROTOBUF_FIELD_OFFSET(IBCTransferTx, _impl_.timeout_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timeout_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timeout_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IBCTransferTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[41]);
}
// ===================================================================

class GetWasmCodesRequest::_Internal {
 public:
};

GetWasmCodesRequest::GetWasmCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetWasmCodesRequest)
}
GetWasmCodesRequest::GetWasmCodesRequest(const GetWasmCodesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetWasmCodesRequest)
}

inline void GetWasmCodesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.from_number_) { ::int64_t{0} }

    , decltype(_impl_.to_number_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWasmCodesRequest::~GetWasmCodesRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetWasmCodesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWasmCodesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetWasmCodesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWasmCodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetWasmCodesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.from_number_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWasmCodesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 limit = 1 [json_name = "limit"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 from_number = 2 [json_name = "fromNumber"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.from_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 to_number = 3 [json_name = "toNumber"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.to_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWasmCodesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetWasmCodesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 limit = 1 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        1, this->_internal_limit(), target);
  }

  // sint64 from_number = 2 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        2, this->_internal_from_number(), target);
  }

  // sint64 to_number = 3 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_to_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetWasmCodesRequest)
  return target;
}

::size_t GetWasmCodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetWasmCodesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 from_number = 2 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_from_number());
  }

  // sint64 to_number = 3 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_to_number());
  }

  // sint32 limit = 1 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWasmCodesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWasmCodesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWasmCodesRequest::GetClassData() const { return &_class_data_; }


void GetWasmCodesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWasmCodesRequest*>(&to_msg);
  auto& from = static_cast<const GetWasmCodesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetWasmCodesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from_number() != 0) {
    _this->_internal_set_from_number(from._internal_from_number());
  }
  if (from._internal_to_number() != 0) {
    _this->_internal_set_to_number(from._internal_to_number());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWasmCodesRequest::CopyFrom(const GetWasmCodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetWasmCodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWasmCodesRequest::IsInitialized() const {
  return true;
}

void GetWasmCodesRequest::InternalSwap(GetWasmCodesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWasmCodesRequest, _impl_.limit_)
      + sizeof(GetWasmCodesRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetWasmCodesRequest, _impl_.from_number_)>(
          reinterpret_cast<char*>(&_impl_.from_number_),
          reinterpret_cast<char*>(&other->_impl_.from_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWasmCodesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[42]);
}
// ===================================================================

class GetWasmCodesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWasmCodesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWasmCodesResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Paging& paging(const GetWasmCodesResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Paging&
GetWasmCodesResponse::_Internal::paging(const GetWasmCodesResponse* msg) {
  return *msg->_impl_.paging_;
}
GetWasmCodesResponse::GetWasmCodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetWasmCodesResponse)
}
GetWasmCodesResponse::GetWasmCodesResponse(const GetWasmCodesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWasmCodesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_explorer_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetWasmCodesResponse)
}

inline void GetWasmCodesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

GetWasmCodesResponse::~GetWasmCodesResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetWasmCodesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWasmCodesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetWasmCodesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWasmCodesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetWasmCodesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWasmCodesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.WasmCode data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWasmCodesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetWasmCodesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  // repeated .injective_explorer_rpc.WasmCode data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetWasmCodesResponse)
  return target;
}

::size_t GetWasmCodesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetWasmCodesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.WasmCode data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWasmCodesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWasmCodesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWasmCodesResponse::GetClassData() const { return &_class_data_; }


void GetWasmCodesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWasmCodesResponse*>(&to_msg);
  auto& from = static_cast<const GetWasmCodesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetWasmCodesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_explorer_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWasmCodesResponse::CopyFrom(const GetWasmCodesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetWasmCodesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWasmCodesResponse::IsInitialized() const {
  return true;
}

void GetWasmCodesResponse::InternalSwap(GetWasmCodesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWasmCodesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[43]);
}
// ===================================================================

class WasmCode::_Internal {
 public:
  using HasBits = decltype(std::declval<WasmCode>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WasmCode, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Checksum& checksum(const WasmCode* msg);
  static void set_has_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective_explorer_rpc::ContractPermission& permission(const WasmCode* msg);
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective_explorer_rpc::Checksum&
WasmCode::_Internal::checksum(const WasmCode* msg) {
  return *msg->_impl_.checksum_;
}
const ::injective_explorer_rpc::ContractPermission&
WasmCode::_Internal::permission(const WasmCode* msg) {
  return *msg->_impl_.permission_;
}
WasmCode::WasmCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.WasmCode)
}
WasmCode::WasmCode(const WasmCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WasmCode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.contract_type_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.code_schema_) {}

    , decltype(_impl_.code_view_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.checksum_){nullptr}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.instantiates_) {}

    , decltype(_impl_.code_number_) {}

    , decltype(_impl_.proposal_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), _this->GetArenaForAllocation());
  }
  _impl_.contract_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_type().empty()) {
    _this->_impl_.contract_type_.Set(from._internal_contract_type(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.code_schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_schema_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_schema().empty()) {
    _this->_impl_.code_schema_.Set(from._internal_code_schema(), _this->GetArenaForAllocation());
  }
  _impl_.code_view_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_view_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_view().empty()) {
    _this->_impl_.code_view_.Set(from._internal_code_view(), _this->GetArenaForAllocation());
  }
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.checksum_ = new ::injective_explorer_rpc::Checksum(*from._impl_.checksum_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.permission_ = new ::injective_explorer_rpc::ContractPermission(*from._impl_.permission_);
  }
  ::memcpy(&_impl_.code_id_, &from._impl_.code_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.proposal_id_) -
    reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.proposal_id_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.WasmCode)
}

inline void WasmCode::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.contract_type_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.code_schema_) {}

    , decltype(_impl_.code_view_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.checksum_){nullptr}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.created_at_) { ::uint64_t{0u} }

    , decltype(_impl_.instantiates_) { ::uint64_t{0u} }

    , decltype(_impl_.code_number_) { ::int64_t{0} }

    , decltype(_impl_.proposal_id_) { ::int64_t{0} }

  };
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_schema_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_view_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_view_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WasmCode::~WasmCode() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.WasmCode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WasmCode::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hash_.Destroy();
  _impl_.contract_type_.Destroy();
  _impl_.version_.Destroy();
  _impl_.code_schema_.Destroy();
  _impl_.code_view_.Destroy();
  _impl_.creator_.Destroy();
  if (this != internal_default_instance()) delete _impl_.checksum_;
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void WasmCode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WasmCode::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.WasmCode)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hash_.ClearToEmpty();
  _impl_.contract_type_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.code_schema_.ClearToEmpty();
  _impl_.code_view_.ClearToEmpty();
  _impl_.creator_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.checksum_ != nullptr);
      _impl_.checksum_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.permission_ != nullptr);
      _impl_.permission_->Clear();
    }
  }
  ::memset(&_impl_.code_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.proposal_id_) -
      reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.proposal_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WasmCode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 code_id = 1 [json_name = "codeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string tx_hash = 2 [json_name = "txHash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCode.tx_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.Checksum checksum = 3 [json_name = "checksum"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_checksum(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 created_at = 4 [json_name = "createdAt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract_type = 5 [json_name = "contractType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_contract_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCode.contract_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 6 [json_name = "version"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCode.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.ContractPermission permission = 7 [json_name = "permission"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string code_schema = 8 [json_name = "codeSchema"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_code_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCode.code_schema"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string code_view = 9 [json_name = "codeView"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_code_view();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCode.code_view"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 instantiates = 10 [json_name = "instantiates"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.instantiates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string creator = 11 [json_name = "creator"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCode.creator"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 code_number = 12 [json_name = "codeNumber"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.code_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 proposal_id = 13 [json_name = "proposalId"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WasmCode::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.WasmCode)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code_id = 1 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_code_id(), target);
  }

  // string tx_hash = 2 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    const std::string& _s = this->_internal_tx_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCode.tx_hash");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Checksum checksum = 3 [json_name = "checksum"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::checksum(this),
        _Internal::checksum(this).GetCachedSize(), target, stream);
  }

  // uint64 created_at = 4 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_created_at(), target);
  }

  // string contract_type = 5 [json_name = "contractType"];
  if (!this->_internal_contract_type().empty()) {
    const std::string& _s = this->_internal_contract_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCode.contract_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string version = 6 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCode.version");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .injective_explorer_rpc.ContractPermission permission = 7 [json_name = "permission"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // string code_schema = 8 [json_name = "codeSchema"];
  if (!this->_internal_code_schema().empty()) {
    const std::string& _s = this->_internal_code_schema();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCode.code_schema");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string code_view = 9 [json_name = "codeView"];
  if (!this->_internal_code_view().empty()) {
    const std::string& _s = this->_internal_code_view();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCode.code_view");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // uint64 instantiates = 10 [json_name = "instantiates"];
  if (this->_internal_instantiates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_instantiates(), target);
  }

  // string creator = 11 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    const std::string& _s = this->_internal_creator();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCode.creator");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // sint64 code_number = 12 [json_name = "codeNumber"];
  if (this->_internal_code_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        12, this->_internal_code_number(), target);
  }

  // sint64 proposal_id = 13 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        13, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.WasmCode)
  return target;
}

::size_t WasmCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.WasmCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_hash = 2 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_hash());
  }

  // string contract_type = 5 [json_name = "contractType"];
  if (!this->_internal_contract_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_type());
  }

  // string version = 6 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string code_schema = 8 [json_name = "codeSchema"];
  if (!this->_internal_code_schema().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_code_schema());
  }

  // string code_view = 9 [json_name = "codeView"];
  if (!this->_internal_code_view().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_code_view());
  }

  // string creator = 11 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_creator());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective_explorer_rpc.Checksum checksum = 3 [json_name = "checksum"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.checksum_);
    }

    // .injective_explorer_rpc.ContractPermission permission = 7 [json_name = "permission"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.permission_);
    }

  }
  // uint64 code_id = 1 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // uint64 created_at = 4 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_created_at());
  }

  // uint64 instantiates = 10 [json_name = "instantiates"];
  if (this->_internal_instantiates() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_instantiates());
  }

  // sint64 code_number = 12 [json_name = "codeNumber"];
  if (this->_internal_code_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_code_number());
  }

  // sint64 proposal_id = 13 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WasmCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WasmCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WasmCode::GetClassData() const { return &_class_data_; }


void WasmCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WasmCode*>(&to_msg);
  auto& from = static_cast<const WasmCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.WasmCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_contract_type().empty()) {
    _this->_internal_set_contract_type(from._internal_contract_type());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_code_schema().empty()) {
    _this->_internal_set_code_schema(from._internal_code_schema());
  }
  if (!from._internal_code_view().empty()) {
    _this->_internal_set_code_view(from._internal_code_view());
  }
  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_checksum()->::injective_explorer_rpc::Checksum::MergeFrom(
          from._internal_checksum());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_permission()->::injective_explorer_rpc::ContractPermission::MergeFrom(
          from._internal_permission());
    }
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_instantiates() != 0) {
    _this->_internal_set_instantiates(from._internal_instantiates());
  }
  if (from._internal_code_number() != 0) {
    _this->_internal_set_code_number(from._internal_code_number());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WasmCode::CopyFrom(const WasmCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.WasmCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WasmCode::IsInitialized() const {
  return true;
}

void WasmCode::InternalSwap(WasmCode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_hash_, lhs_arena,
                                       &other->_impl_.tx_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_type_, lhs_arena,
                                       &other->_impl_.contract_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_schema_, lhs_arena,
                                       &other->_impl_.code_schema_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_view_, lhs_arena,
                                       &other->_impl_.code_view_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, lhs_arena,
                                       &other->_impl_.creator_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WasmCode, _impl_.proposal_id_)
      + sizeof(WasmCode::_impl_.proposal_id_)
      - PROTOBUF_FIELD_OFFSET(WasmCode, _impl_.checksum_)>(
          reinterpret_cast<char*>(&_impl_.checksum_),
          reinterpret_cast<char*>(&other->_impl_.checksum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WasmCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[44]);
}
// ===================================================================

class Checksum::_Internal {
 public:
};

Checksum::Checksum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Checksum)
}
Checksum::Checksum(const Checksum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Checksum* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.algorithm_) {}

    , decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.algorithm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_algorithm().empty()) {
    _this->_impl_.algorithm_.Set(from._internal_algorithm(), _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Checksum)
}

inline void Checksum::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.algorithm_) {}

    , decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.algorithm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Checksum::~Checksum() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Checksum)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Checksum::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.algorithm_.Destroy();
  _impl_.hash_.Destroy();
}

void Checksum::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Checksum::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Checksum)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.algorithm_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Checksum::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string algorithm = 1 [json_name = "algorithm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_algorithm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Checksum.algorithm"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string hash = 2 [json_name = "hash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Checksum.hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Checksum::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Checksum)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string algorithm = 1 [json_name = "algorithm"];
  if (!this->_internal_algorithm().empty()) {
    const std::string& _s = this->_internal_algorithm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Checksum.algorithm");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Checksum.hash");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Checksum)
  return target;
}

::size_t Checksum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Checksum)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string algorithm = 1 [json_name = "algorithm"];
  if (!this->_internal_algorithm().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_algorithm());
  }

  // string hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Checksum::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Checksum::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Checksum::GetClassData() const { return &_class_data_; }


void Checksum::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Checksum*>(&to_msg);
  auto& from = static_cast<const Checksum&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Checksum)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_algorithm().empty()) {
    _this->_internal_set_algorithm(from._internal_algorithm());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Checksum::CopyFrom(const Checksum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Checksum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Checksum::IsInitialized() const {
  return true;
}

void Checksum::InternalSwap(Checksum* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.algorithm_, lhs_arena,
                                       &other->_impl_.algorithm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Checksum::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[45]);
}
// ===================================================================

class ContractPermission::_Internal {
 public:
};

ContractPermission::ContractPermission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.ContractPermission)
}
ContractPermission::ContractPermission(const ContractPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractPermission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.access_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.access_type_ = from._impl_.access_type_;
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.ContractPermission)
}

inline void ContractPermission::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.access_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractPermission::~ContractPermission() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.ContractPermission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractPermission::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void ContractPermission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.ContractPermission)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.access_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractPermission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 access_type = 1 [json_name = "accessType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.access_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ContractPermission.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractPermission::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.ContractPermission)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 access_type = 1 [json_name = "accessType"];
  if (this->_internal_access_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        1, this->_internal_access_type(), target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ContractPermission.address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.ContractPermission)
  return target;
}

::size_t ContractPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.ContractPermission)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // sint32 access_type = 1 [json_name = "accessType"];
  if (this->_internal_access_type() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_access_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractPermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractPermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractPermission::GetClassData() const { return &_class_data_; }


void ContractPermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractPermission*>(&to_msg);
  auto& from = static_cast<const ContractPermission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.ContractPermission)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_access_type() != 0) {
    _this->_internal_set_access_type(from._internal_access_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractPermission::CopyFrom(const ContractPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.ContractPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractPermission::IsInitialized() const {
  return true;
}

void ContractPermission::InternalSwap(ContractPermission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);

  swap(_impl_.access_type_, other->_impl_.access_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractPermission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[46]);
}
// ===================================================================

class GetWasmCodeByIDRequest::_Internal {
 public:
};

GetWasmCodeByIDRequest::GetWasmCodeByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetWasmCodeByIDRequest)
}
GetWasmCodeByIDRequest::GetWasmCodeByIDRequest(const GetWasmCodeByIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetWasmCodeByIDRequest)
}

inline void GetWasmCodeByIDRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.code_id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWasmCodeByIDRequest::~GetWasmCodeByIDRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetWasmCodeByIDRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWasmCodeByIDRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetWasmCodeByIDRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWasmCodeByIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetWasmCodeByIDRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWasmCodeByIDRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 code_id = 1 [json_name = "codeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWasmCodeByIDRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetWasmCodeByIDRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 code_id = 1 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        1, this->_internal_code_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetWasmCodeByIDRequest)
  return target;
}

::size_t GetWasmCodeByIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetWasmCodeByIDRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 code_id = 1 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_code_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWasmCodeByIDRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWasmCodeByIDRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWasmCodeByIDRequest::GetClassData() const { return &_class_data_; }


void GetWasmCodeByIDRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWasmCodeByIDRequest*>(&to_msg);
  auto& from = static_cast<const GetWasmCodeByIDRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetWasmCodeByIDRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWasmCodeByIDRequest::CopyFrom(const GetWasmCodeByIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetWasmCodeByIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWasmCodeByIDRequest::IsInitialized() const {
  return true;
}

void GetWasmCodeByIDRequest::InternalSwap(GetWasmCodeByIDRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.code_id_, other->_impl_.code_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWasmCodeByIDRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[47]);
}
// ===================================================================

class GetWasmCodeByIDResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWasmCodeByIDResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWasmCodeByIDResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Checksum& checksum(const GetWasmCodeByIDResponse* msg);
  static void set_has_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective_explorer_rpc::ContractPermission& permission(const GetWasmCodeByIDResponse* msg);
  static void set_has_permission(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective_explorer_rpc::Checksum&
GetWasmCodeByIDResponse::_Internal::checksum(const GetWasmCodeByIDResponse* msg) {
  return *msg->_impl_.checksum_;
}
const ::injective_explorer_rpc::ContractPermission&
GetWasmCodeByIDResponse::_Internal::permission(const GetWasmCodeByIDResponse* msg) {
  return *msg->_impl_.permission_;
}
GetWasmCodeByIDResponse::GetWasmCodeByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetWasmCodeByIDResponse)
}
GetWasmCodeByIDResponse::GetWasmCodeByIDResponse(const GetWasmCodeByIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWasmCodeByIDResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.contract_type_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.code_schema_) {}

    , decltype(_impl_.code_view_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.checksum_){nullptr}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.instantiates_) {}

    , decltype(_impl_.code_number_) {}

    , decltype(_impl_.proposal_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), _this->GetArenaForAllocation());
  }
  _impl_.contract_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_type().empty()) {
    _this->_impl_.contract_type_.Set(from._internal_contract_type(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.code_schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_schema_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_schema().empty()) {
    _this->_impl_.code_schema_.Set(from._internal_code_schema(), _this->GetArenaForAllocation());
  }
  _impl_.code_view_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_view_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code_view().empty()) {
    _this->_impl_.code_view_.Set(from._internal_code_view(), _this->GetArenaForAllocation());
  }
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.checksum_ = new ::injective_explorer_rpc::Checksum(*from._impl_.checksum_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.permission_ = new ::injective_explorer_rpc::ContractPermission(*from._impl_.permission_);
  }
  ::memcpy(&_impl_.code_id_, &from._impl_.code_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.proposal_id_) -
    reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.proposal_id_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetWasmCodeByIDResponse)
}

inline void GetWasmCodeByIDResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.contract_type_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.code_schema_) {}

    , decltype(_impl_.code_view_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.checksum_){nullptr}
    , decltype(_impl_.permission_){nullptr}
    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.created_at_) { ::uint64_t{0u} }

    , decltype(_impl_.instantiates_) { ::uint64_t{0u} }

    , decltype(_impl_.code_number_) { ::int64_t{0} }

    , decltype(_impl_.proposal_id_) { ::int64_t{0} }

  };
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_schema_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_view_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.code_view_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWasmCodeByIDResponse::~GetWasmCodeByIDResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetWasmCodeByIDResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWasmCodeByIDResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_hash_.Destroy();
  _impl_.contract_type_.Destroy();
  _impl_.version_.Destroy();
  _impl_.code_schema_.Destroy();
  _impl_.code_view_.Destroy();
  _impl_.creator_.Destroy();
  if (this != internal_default_instance()) delete _impl_.checksum_;
  if (this != internal_default_instance()) delete _impl_.permission_;
}

void GetWasmCodeByIDResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWasmCodeByIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetWasmCodeByIDResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_hash_.ClearToEmpty();
  _impl_.contract_type_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.code_schema_.ClearToEmpty();
  _impl_.code_view_.ClearToEmpty();
  _impl_.creator_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.checksum_ != nullptr);
      _impl_.checksum_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.permission_ != nullptr);
      _impl_.permission_->Clear();
    }
  }
  ::memset(&_impl_.code_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.proposal_id_) -
      reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.proposal_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWasmCodeByIDResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 code_id = 1 [json_name = "codeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string tx_hash = 2 [json_name = "txHash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmCodeByIDResponse.tx_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.Checksum checksum = 3 [json_name = "checksum"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_checksum(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 created_at = 4 [json_name = "createdAt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract_type = 5 [json_name = "contractType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_contract_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmCodeByIDResponse.contract_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 6 [json_name = "version"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmCodeByIDResponse.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.ContractPermission permission = 7 [json_name = "permission"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string code_schema = 8 [json_name = "codeSchema"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_code_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmCodeByIDResponse.code_schema"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string code_view = 9 [json_name = "codeView"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_code_view();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmCodeByIDResponse.code_view"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 instantiates = 10 [json_name = "instantiates"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.instantiates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string creator = 11 [json_name = "creator"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmCodeByIDResponse.creator"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 code_number = 12 [json_name = "codeNumber"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.code_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 proposal_id = 13 [json_name = "proposalId"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWasmCodeByIDResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetWasmCodeByIDResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 code_id = 1 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_code_id(), target);
  }

  // string tx_hash = 2 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    const std::string& _s = this->_internal_tx_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmCodeByIDResponse.tx_hash");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Checksum checksum = 3 [json_name = "checksum"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::checksum(this),
        _Internal::checksum(this).GetCachedSize(), target, stream);
  }

  // uint64 created_at = 4 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_created_at(), target);
  }

  // string contract_type = 5 [json_name = "contractType"];
  if (!this->_internal_contract_type().empty()) {
    const std::string& _s = this->_internal_contract_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmCodeByIDResponse.contract_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string version = 6 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmCodeByIDResponse.version");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .injective_explorer_rpc.ContractPermission permission = 7 [json_name = "permission"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::permission(this),
        _Internal::permission(this).GetCachedSize(), target, stream);
  }

  // string code_schema = 8 [json_name = "codeSchema"];
  if (!this->_internal_code_schema().empty()) {
    const std::string& _s = this->_internal_code_schema();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmCodeByIDResponse.code_schema");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string code_view = 9 [json_name = "codeView"];
  if (!this->_internal_code_view().empty()) {
    const std::string& _s = this->_internal_code_view();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmCodeByIDResponse.code_view");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // uint64 instantiates = 10 [json_name = "instantiates"];
  if (this->_internal_instantiates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_instantiates(), target);
  }

  // string creator = 11 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    const std::string& _s = this->_internal_creator();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmCodeByIDResponse.creator");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // sint64 code_number = 12 [json_name = "codeNumber"];
  if (this->_internal_code_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        12, this->_internal_code_number(), target);
  }

  // sint64 proposal_id = 13 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        13, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetWasmCodeByIDResponse)
  return target;
}

::size_t GetWasmCodeByIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetWasmCodeByIDResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_hash = 2 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_hash());
  }

  // string contract_type = 5 [json_name = "contractType"];
  if (!this->_internal_contract_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_type());
  }

  // string version = 6 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string code_schema = 8 [json_name = "codeSchema"];
  if (!this->_internal_code_schema().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_code_schema());
  }

  // string code_view = 9 [json_name = "codeView"];
  if (!this->_internal_code_view().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_code_view());
  }

  // string creator = 11 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_creator());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective_explorer_rpc.Checksum checksum = 3 [json_name = "checksum"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.checksum_);
    }

    // .injective_explorer_rpc.ContractPermission permission = 7 [json_name = "permission"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.permission_);
    }

  }
  // uint64 code_id = 1 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // uint64 created_at = 4 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_created_at());
  }

  // uint64 instantiates = 10 [json_name = "instantiates"];
  if (this->_internal_instantiates() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_instantiates());
  }

  // sint64 code_number = 12 [json_name = "codeNumber"];
  if (this->_internal_code_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_code_number());
  }

  // sint64 proposal_id = 13 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWasmCodeByIDResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWasmCodeByIDResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWasmCodeByIDResponse::GetClassData() const { return &_class_data_; }


void GetWasmCodeByIDResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWasmCodeByIDResponse*>(&to_msg);
  auto& from = static_cast<const GetWasmCodeByIDResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetWasmCodeByIDResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_contract_type().empty()) {
    _this->_internal_set_contract_type(from._internal_contract_type());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_code_schema().empty()) {
    _this->_internal_set_code_schema(from._internal_code_schema());
  }
  if (!from._internal_code_view().empty()) {
    _this->_internal_set_code_view(from._internal_code_view());
  }
  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_checksum()->::injective_explorer_rpc::Checksum::MergeFrom(
          from._internal_checksum());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_permission()->::injective_explorer_rpc::ContractPermission::MergeFrom(
          from._internal_permission());
    }
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_instantiates() != 0) {
    _this->_internal_set_instantiates(from._internal_instantiates());
  }
  if (from._internal_code_number() != 0) {
    _this->_internal_set_code_number(from._internal_code_number());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWasmCodeByIDResponse::CopyFrom(const GetWasmCodeByIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetWasmCodeByIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWasmCodeByIDResponse::IsInitialized() const {
  return true;
}

void GetWasmCodeByIDResponse::InternalSwap(GetWasmCodeByIDResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_hash_, lhs_arena,
                                       &other->_impl_.tx_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_type_, lhs_arena,
                                       &other->_impl_.contract_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_schema_, lhs_arena,
                                       &other->_impl_.code_schema_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_view_, lhs_arena,
                                       &other->_impl_.code_view_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, lhs_arena,
                                       &other->_impl_.creator_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWasmCodeByIDResponse, _impl_.proposal_id_)
      + sizeof(GetWasmCodeByIDResponse::_impl_.proposal_id_)
      - PROTOBUF_FIELD_OFFSET(GetWasmCodeByIDResponse, _impl_.checksum_)>(
          reinterpret_cast<char*>(&_impl_.checksum_),
          reinterpret_cast<char*>(&other->_impl_.checksum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWasmCodeByIDResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[48]);
}
// ===================================================================

class GetWasmContractsRequest::_Internal {
 public:
};

GetWasmContractsRequest::GetWasmContractsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetWasmContractsRequest)
}
GetWasmContractsRequest::GetWasmContractsRequest(const GetWasmContractsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetWasmContractsRequest)
}

inline void GetWasmContractsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.code_id_) { ::int64_t{0} }

    , decltype(_impl_.from_number_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , decltype(_impl_.assets_only_) { false }

    , decltype(_impl_.to_number_) { ::int64_t{0} }

    , decltype(_impl_.skip_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetWasmContractsRequest::~GetWasmContractsRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetWasmContractsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWasmContractsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetWasmContractsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWasmContractsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetWasmContractsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.code_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.skip_) -
      reinterpret_cast<char*>(&_impl_.code_id_)) + sizeof(_impl_.skip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWasmContractsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint32 limit = 1 [json_name = "limit"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 code_id = 2 [json_name = "codeId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 from_number = 3 [json_name = "fromNumber"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.from_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 to_number = 4 [json_name = "toNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.to_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool assets_only = 5 [json_name = "assetsOnly"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.assets_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 skip = 6 [json_name = "skip"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWasmContractsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetWasmContractsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 limit = 1 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        1, this->_internal_limit(), target);
  }

  // sint64 code_id = 2 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        2, this->_internal_code_id(), target);
  }

  // sint64 from_number = 3 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_from_number(), target);
  }

  // sint64 to_number = 4 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_to_number(), target);
  }

  // bool assets_only = 5 [json_name = "assetsOnly"];
  if (this->_internal_assets_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_assets_only(), target);
  }

  // sint64 skip = 6 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_skip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetWasmContractsRequest)
  return target;
}

::size_t GetWasmContractsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetWasmContractsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 code_id = 2 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_code_id());
  }

  // sint64 from_number = 3 [json_name = "fromNumber"];
  if (this->_internal_from_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_from_number());
  }

  // sint32 limit = 1 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  // bool assets_only = 5 [json_name = "assetsOnly"];
  if (this->_internal_assets_only() != 0) {
    total_size += 2;
  }

  // sint64 to_number = 4 [json_name = "toNumber"];
  if (this->_internal_to_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_to_number());
  }

  // sint64 skip = 6 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_skip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWasmContractsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWasmContractsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWasmContractsRequest::GetClassData() const { return &_class_data_; }


void GetWasmContractsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWasmContractsRequest*>(&to_msg);
  auto& from = static_cast<const GetWasmContractsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetWasmContractsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_from_number() != 0) {
    _this->_internal_set_from_number(from._internal_from_number());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_assets_only() != 0) {
    _this->_internal_set_assets_only(from._internal_assets_only());
  }
  if (from._internal_to_number() != 0) {
    _this->_internal_set_to_number(from._internal_to_number());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWasmContractsRequest::CopyFrom(const GetWasmContractsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetWasmContractsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWasmContractsRequest::IsInitialized() const {
  return true;
}

void GetWasmContractsRequest::InternalSwap(GetWasmContractsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWasmContractsRequest, _impl_.skip_)
      + sizeof(GetWasmContractsRequest::_impl_.skip_)
      - PROTOBUF_FIELD_OFFSET(GetWasmContractsRequest, _impl_.code_id_)>(
          reinterpret_cast<char*>(&_impl_.code_id_),
          reinterpret_cast<char*>(&other->_impl_.code_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWasmContractsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[49]);
}
// ===================================================================

class GetWasmContractsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWasmContractsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWasmContractsResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Paging& paging(const GetWasmContractsResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Paging&
GetWasmContractsResponse::_Internal::paging(const GetWasmContractsResponse* msg) {
  return *msg->_impl_.paging_;
}
GetWasmContractsResponse::GetWasmContractsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetWasmContractsResponse)
}
GetWasmContractsResponse::GetWasmContractsResponse(const GetWasmContractsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWasmContractsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_explorer_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetWasmContractsResponse)
}

inline void GetWasmContractsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

GetWasmContractsResponse::~GetWasmContractsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetWasmContractsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWasmContractsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void GetWasmContractsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWasmContractsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetWasmContractsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWasmContractsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.WasmContract data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWasmContractsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetWasmContractsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  // repeated .injective_explorer_rpc.WasmContract data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetWasmContractsResponse)
  return target;
}

::size_t GetWasmContractsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetWasmContractsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.WasmContract data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_explorer_rpc.Paging paging = 1 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWasmContractsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWasmContractsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWasmContractsResponse::GetClassData() const { return &_class_data_; }


void GetWasmContractsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWasmContractsResponse*>(&to_msg);
  auto& from = static_cast<const GetWasmContractsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetWasmContractsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_explorer_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWasmContractsResponse::CopyFrom(const GetWasmContractsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetWasmContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWasmContractsResponse::IsInitialized() const {
  return true;
}

void GetWasmContractsResponse::InternalSwap(GetWasmContractsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWasmContractsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[50]);
}
// ===================================================================

class WasmContract::_Internal {
 public:
  using HasBits = decltype(std::declval<WasmContract>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WasmContract, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Cw20Metadata& cw20_metadata(const WasmContract* msg);
  static void set_has_cw20_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Cw20Metadata&
WasmContract::_Internal::cw20_metadata(const WasmContract* msg) {
  return *msg->_impl_.cw20_metadata_;
}
WasmContract::WasmContract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.WasmContract)
}
WasmContract::WasmContract(const WasmContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WasmContract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funds_){from._impl_.funds_}
    , decltype(_impl_.label_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.init_message_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.current_migrate_message_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.cw20_metadata_){nullptr}
    , decltype(_impl_.executes_) {}

    , decltype(_impl_.instantiated_at_) {}

    , decltype(_impl_.last_executed_at_) {}

    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.contract_number_) {}

    , decltype(_impl_.proposal_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), _this->GetArenaForAllocation());
  }
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), _this->GetArenaForAllocation());
  }
  _impl_.init_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.init_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_init_message().empty()) {
    _this->_impl_.init_message_.Set(from._internal_init_message(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.current_migrate_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.current_migrate_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_migrate_message().empty()) {
    _this->_impl_.current_migrate_message_.Set(from._internal_current_migrate_message(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cw20_metadata_ = new ::injective_explorer_rpc::Cw20Metadata(*from._impl_.cw20_metadata_);
  }
  ::memcpy(&_impl_.executes_, &from._impl_.executes_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.proposal_id_) -
    reinterpret_cast<char*>(&_impl_.executes_)) + sizeof(_impl_.proposal_id_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.WasmContract)
}

inline void WasmContract::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funds_){arena}
    , decltype(_impl_.label_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.init_message_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.current_migrate_message_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.cw20_metadata_){nullptr}
    , decltype(_impl_.executes_) { ::uint64_t{0u} }

    , decltype(_impl_.instantiated_at_) { ::uint64_t{0u} }

    , decltype(_impl_.last_executed_at_) { ::uint64_t{0u} }

    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.contract_number_) { ::int64_t{0} }

    , decltype(_impl_.proposal_id_) { ::int64_t{0} }

  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.init_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.init_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_migrate_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.current_migrate_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WasmContract::~WasmContract() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.WasmContract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WasmContract::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funds()->~RepeatedPtrField();
  _impl_.label_.Destroy();
  _impl_.address_.Destroy();
  _impl_.tx_hash_.Destroy();
  _impl_.creator_.Destroy();
  _impl_.init_message_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.current_migrate_message_.Destroy();
  _impl_.version_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cw20_metadata_;
}

void WasmContract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WasmContract::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.WasmContract)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funds()->Clear();
  _impl_.label_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.tx_hash_.ClearToEmpty();
  _impl_.creator_.ClearToEmpty();
  _impl_.init_message_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.current_migrate_message_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.cw20_metadata_ != nullptr);
    _impl_.cw20_metadata_->Clear();
  }
  ::memset(&_impl_.executes_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.proposal_id_) -
      reinterpret_cast<char*>(&_impl_.executes_)) + sizeof(_impl_.proposal_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WasmContract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1 [json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tx_hash = 3 [json_name = "txHash"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.tx_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string creator = 4 [json_name = "creator"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.creator"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 executes = 5 [json_name = "executes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.executes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 instantiated_at = 6 [json_name = "instantiatedAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.instantiated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string init_message = 7 [json_name = "initMessage"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_init_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.init_message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 last_executed_at = 8 [json_name = "lastExecutedAt"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.last_executed_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.ContractFund funds = 9 [json_name = "funds"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 code_id = 10 [json_name = "codeId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 11 [json_name = "admin"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string current_migrate_message = 12 [json_name = "currentMigrateMessage"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_current_migrate_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.current_migrate_message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 contract_number = 13 [json_name = "contractNumber"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.contract_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 14 [json_name = "version"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string type = 15 [json_name = "type"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmContract.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 16 [json_name = "cw20Metadata"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_cw20_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 proposal_id = 17 [json_name = "proposalId"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WasmContract::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.WasmContract)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.label");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string tx_hash = 3 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    const std::string& _s = this->_internal_tx_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.tx_hash");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string creator = 4 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    const std::string& _s = this->_internal_creator();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.creator");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 executes = 5 [json_name = "executes"];
  if (this->_internal_executes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_executes(), target);
  }

  // uint64 instantiated_at = 6 [json_name = "instantiatedAt"];
  if (this->_internal_instantiated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_instantiated_at(), target);
  }

  // string init_message = 7 [json_name = "initMessage"];
  if (!this->_internal_init_message().empty()) {
    const std::string& _s = this->_internal_init_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.init_message");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // uint64 last_executed_at = 8 [json_name = "lastExecutedAt"];
  if (this->_internal_last_executed_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_last_executed_at(), target);
  }

  // repeated .injective_explorer_rpc.ContractFund funds = 9 [json_name = "funds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funds_size()); i < n; i++) {
    const auto& repfield = this->_internal_funds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 code_id = 10 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_code_id(), target);
  }

  // string admin = 11 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.admin");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string current_migrate_message = 12 [json_name = "currentMigrateMessage"];
  if (!this->_internal_current_migrate_message().empty()) {
    const std::string& _s = this->_internal_current_migrate_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.current_migrate_message");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // sint64 contract_number = 13 [json_name = "contractNumber"];
  if (this->_internal_contract_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        13, this->_internal_contract_number(), target);
  }

  // string version = 14 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.version");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string type = 15 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmContract.type");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 16 [json_name = "cw20Metadata"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::cw20_metadata(this),
        _Internal::cw20_metadata(this).GetCachedSize(), target, stream);
  }

  // sint64 proposal_id = 17 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        17, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.WasmContract)
  return target;
}

::size_t WasmContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.WasmContract)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.ContractFund funds = 9 [json_name = "funds"];
  total_size += 1UL * this->_internal_funds_size();
  for (const auto& msg : this->_internal_funds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string label = 1 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string tx_hash = 3 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_hash());
  }

  // string creator = 4 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_creator());
  }

  // string init_message = 7 [json_name = "initMessage"];
  if (!this->_internal_init_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_init_message());
  }

  // string admin = 11 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string current_migrate_message = 12 [json_name = "currentMigrateMessage"];
  if (!this->_internal_current_migrate_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_current_migrate_message());
  }

  // string version = 14 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string type = 15 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 16 [json_name = "cw20Metadata"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cw20_metadata_);
  }

  // uint64 executes = 5 [json_name = "executes"];
  if (this->_internal_executes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_executes());
  }

  // uint64 instantiated_at = 6 [json_name = "instantiatedAt"];
  if (this->_internal_instantiated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_instantiated_at());
  }

  // uint64 last_executed_at = 8 [json_name = "lastExecutedAt"];
  if (this->_internal_last_executed_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_executed_at());
  }

  // uint64 code_id = 10 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // sint64 contract_number = 13 [json_name = "contractNumber"];
  if (this->_internal_contract_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_contract_number());
  }

  // sint64 proposal_id = 17 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::SInt64Size(
                                    this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WasmContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WasmContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WasmContract::GetClassData() const { return &_class_data_; }


void WasmContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WasmContract*>(&to_msg);
  auto& from = static_cast<const WasmContract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.WasmContract)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funds()->MergeFrom(from._internal_funds());
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  if (!from._internal_init_message().empty()) {
    _this->_internal_set_init_message(from._internal_init_message());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_current_migrate_message().empty()) {
    _this->_internal_set_current_migrate_message(from._internal_current_migrate_message());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_cw20_metadata()->::injective_explorer_rpc::Cw20Metadata::MergeFrom(
        from._internal_cw20_metadata());
  }
  if (from._internal_executes() != 0) {
    _this->_internal_set_executes(from._internal_executes());
  }
  if (from._internal_instantiated_at() != 0) {
    _this->_internal_set_instantiated_at(from._internal_instantiated_at());
  }
  if (from._internal_last_executed_at() != 0) {
    _this->_internal_set_last_executed_at(from._internal_last_executed_at());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_contract_number() != 0) {
    _this->_internal_set_contract_number(from._internal_contract_number());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WasmContract::CopyFrom(const WasmContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.WasmContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WasmContract::IsInitialized() const {
  return true;
}

void WasmContract::InternalSwap(WasmContract* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_funds()->InternalSwap(other->_internal_mutable_funds());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_hash_, lhs_arena,
                                       &other->_impl_.tx_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, lhs_arena,
                                       &other->_impl_.creator_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.init_message_, lhs_arena,
                                       &other->_impl_.init_message_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_migrate_message_, lhs_arena,
                                       &other->_impl_.current_migrate_message_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WasmContract, _impl_.proposal_id_)
      + sizeof(WasmContract::_impl_.proposal_id_)
      - PROTOBUF_FIELD_OFFSET(WasmContract, _impl_.cw20_metadata_)>(
          reinterpret_cast<char*>(&_impl_.cw20_metadata_),
          reinterpret_cast<char*>(&other->_impl_.cw20_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WasmContract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[51]);
}
// ===================================================================

class ContractFund::_Internal {
 public:
};

ContractFund::ContractFund(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.ContractFund)
}
ContractFund::ContractFund(const ContractFund& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractFund* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.ContractFund)
}

inline void ContractFund::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContractFund::~ContractFund() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.ContractFund)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContractFund::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  _impl_.amount_.Destroy();
}

void ContractFund::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractFund::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.ContractFund)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractFund::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ContractFund.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.ContractFund.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContractFund::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.ContractFund)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ContractFund.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.ContractFund.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.ContractFund)
  return target;
}

::size_t ContractFund::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.ContractFund)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractFund::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractFund::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractFund::GetClassData() const { return &_class_data_; }


void ContractFund::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractFund*>(&to_msg);
  auto& from = static_cast<const ContractFund&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.ContractFund)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractFund::CopyFrom(const ContractFund& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.ContractFund)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractFund::IsInitialized() const {
  return true;
}

void ContractFund::InternalSwap(ContractFund* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractFund::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[52]);
}
// ===================================================================

class Cw20Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<Cw20Metadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Cw20Metadata, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Cw20TokenInfo& token_info(const Cw20Metadata* msg);
  static void set_has_token_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective_explorer_rpc::Cw20MarketingInfo& marketing_info(const Cw20Metadata* msg);
  static void set_has_marketing_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::injective_explorer_rpc::Cw20TokenInfo&
Cw20Metadata::_Internal::token_info(const Cw20Metadata* msg) {
  return *msg->_impl_.token_info_;
}
const ::injective_explorer_rpc::Cw20MarketingInfo&
Cw20Metadata::_Internal::marketing_info(const Cw20Metadata* msg) {
  return *msg->_impl_.marketing_info_;
}
Cw20Metadata::Cw20Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Cw20Metadata)
}
Cw20Metadata::Cw20Metadata(const Cw20Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cw20Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_info_){nullptr}
    , decltype(_impl_.marketing_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.token_info_ = new ::injective_explorer_rpc::Cw20TokenInfo(*from._impl_.token_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.marketing_info_ = new ::injective_explorer_rpc::Cw20MarketingInfo(*from._impl_.marketing_info_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Cw20Metadata)
}

inline void Cw20Metadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_info_){nullptr}
    , decltype(_impl_.marketing_info_){nullptr}
  };
}

Cw20Metadata::~Cw20Metadata() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Cw20Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cw20Metadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.token_info_;
  if (this != internal_default_instance()) delete _impl_.marketing_info_;
}

void Cw20Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cw20Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Cw20Metadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.token_info_ != nullptr);
      _impl_.token_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.marketing_info_ != nullptr);
      _impl_.marketing_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cw20Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_explorer_rpc.Cw20TokenInfo token_info = 1 [json_name = "tokenInfo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_token_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.Cw20MarketingInfo marketing_info = 2 [json_name = "marketingInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_marketing_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Cw20Metadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Cw20Metadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Cw20TokenInfo token_info = 1 [json_name = "tokenInfo"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::token_info(this),
        _Internal::token_info(this).GetCachedSize(), target, stream);
  }

  // .injective_explorer_rpc.Cw20MarketingInfo marketing_info = 2 [json_name = "marketingInfo"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::marketing_info(this),
        _Internal::marketing_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Cw20Metadata)
  return target;
}

::size_t Cw20Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Cw20Metadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .injective_explorer_rpc.Cw20TokenInfo token_info = 1 [json_name = "tokenInfo"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.token_info_);
    }

    // .injective_explorer_rpc.Cw20MarketingInfo marketing_info = 2 [json_name = "marketingInfo"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.marketing_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cw20Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cw20Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cw20Metadata::GetClassData() const { return &_class_data_; }


void Cw20Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cw20Metadata*>(&to_msg);
  auto& from = static_cast<const Cw20Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Cw20Metadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_token_info()->::injective_explorer_rpc::Cw20TokenInfo::MergeFrom(
          from._internal_token_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_marketing_info()->::injective_explorer_rpc::Cw20MarketingInfo::MergeFrom(
          from._internal_marketing_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cw20Metadata::CopyFrom(const Cw20Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Cw20Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cw20Metadata::IsInitialized() const {
  return true;
}

void Cw20Metadata::InternalSwap(Cw20Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cw20Metadata, _impl_.marketing_info_)
      + sizeof(Cw20Metadata::_impl_.marketing_info_)
      - PROTOBUF_FIELD_OFFSET(Cw20Metadata, _impl_.token_info_)>(
          reinterpret_cast<char*>(&_impl_.token_info_),
          reinterpret_cast<char*>(&other->_impl_.token_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cw20Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[53]);
}
// ===================================================================

class Cw20TokenInfo::_Internal {
 public:
};

Cw20TokenInfo::Cw20TokenInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Cw20TokenInfo)
}
Cw20TokenInfo::Cw20TokenInfo(const Cw20TokenInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cw20TokenInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.total_supply_) {}

    , decltype(_impl_.decimals_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.total_supply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_supply_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_total_supply().empty()) {
    _this->_impl_.total_supply_.Set(from._internal_total_supply(), _this->GetArenaForAllocation());
  }
  _this->_impl_.decimals_ = from._impl_.decimals_;
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Cw20TokenInfo)
}

inline void Cw20TokenInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.total_supply_) {}

    , decltype(_impl_.decimals_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.total_supply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.total_supply_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cw20TokenInfo::~Cw20TokenInfo() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Cw20TokenInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cw20TokenInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.total_supply_.Destroy();
}

void Cw20TokenInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cw20TokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Cw20TokenInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.total_supply_.ClearToEmpty();
  _impl_.decimals_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cw20TokenInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Cw20TokenInfo.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 2 [json_name = "symbol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Cw20TokenInfo.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 decimals = 3 [json_name = "decimals"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string total_supply = 4 [json_name = "totalSupply"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_total_supply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Cw20TokenInfo.total_supply"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Cw20TokenInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Cw20TokenInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Cw20TokenInfo.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Cw20TokenInfo.symbol");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 decimals = 3 [json_name = "decimals"];
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_decimals(), target);
  }

  // string total_supply = 4 [json_name = "totalSupply"];
  if (!this->_internal_total_supply().empty()) {
    const std::string& _s = this->_internal_total_supply();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Cw20TokenInfo.total_supply");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Cw20TokenInfo)
  return target;
}

::size_t Cw20TokenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Cw20TokenInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string symbol = 2 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string total_supply = 4 [json_name = "totalSupply"];
  if (!this->_internal_total_supply().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_total_supply());
  }

  // sint64 decimals = 3 [json_name = "decimals"];
  if (this->_internal_decimals() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_decimals());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cw20TokenInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cw20TokenInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cw20TokenInfo::GetClassData() const { return &_class_data_; }


void Cw20TokenInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cw20TokenInfo*>(&to_msg);
  auto& from = static_cast<const Cw20TokenInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Cw20TokenInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_total_supply().empty()) {
    _this->_internal_set_total_supply(from._internal_total_supply());
  }
  if (from._internal_decimals() != 0) {
    _this->_internal_set_decimals(from._internal_decimals());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cw20TokenInfo::CopyFrom(const Cw20TokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Cw20TokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cw20TokenInfo::IsInitialized() const {
  return true;
}

void Cw20TokenInfo::InternalSwap(Cw20TokenInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.total_supply_, lhs_arena,
                                       &other->_impl_.total_supply_, rhs_arena);

  swap(_impl_.decimals_, other->_impl_.decimals_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cw20TokenInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[54]);
}
// ===================================================================

class Cw20MarketingInfo::_Internal {
 public:
};

Cw20MarketingInfo::Cw20MarketingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Cw20MarketingInfo)
}
Cw20MarketingInfo::Cw20MarketingInfo(const Cw20MarketingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cw20MarketingInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.project_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.logo_) {}

    , decltype(_impl_.marketing_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.project_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.project_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project().empty()) {
    _this->_impl_.project_.Set(from._internal_project(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo().empty()) {
    _this->_impl_.logo_.Set(from._internal_logo(), _this->GetArenaForAllocation());
  }
  _impl_.marketing_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marketing_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_marketing().empty()) {
    _this->_impl_.marketing_.Set(from._internal_marketing(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Cw20MarketingInfo)
}

inline void Cw20MarketingInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.project_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.logo_) {}

    , decltype(_impl_.marketing_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.project_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.project_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marketing_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marketing_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cw20MarketingInfo::~Cw20MarketingInfo() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Cw20MarketingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cw20MarketingInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.project_.Destroy();
  _impl_.description_.Destroy();
  _impl_.logo_.Destroy();
  _impl_.marketing_.Destroy();
}

void Cw20MarketingInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cw20MarketingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Cw20MarketingInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.project_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.logo_.ClearToEmpty();
  _impl_.marketing_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cw20MarketingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project = 1 [json_name = "project"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_project();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Cw20MarketingInfo.project"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Cw20MarketingInfo.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string logo = 3 [json_name = "logo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Cw20MarketingInfo.logo"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes marketing = 4 [json_name = "marketing"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_marketing();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Cw20MarketingInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Cw20MarketingInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1 [json_name = "project"];
  if (!this->_internal_project().empty()) {
    const std::string& _s = this->_internal_project();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Cw20MarketingInfo.project");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Cw20MarketingInfo.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string logo = 3 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    const std::string& _s = this->_internal_logo();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Cw20MarketingInfo.logo");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bytes marketing = 4 [json_name = "marketing"];
  if (!this->_internal_marketing().empty()) {
    const std::string& _s = this->_internal_marketing();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Cw20MarketingInfo)
  return target;
}

::size_t Cw20MarketingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Cw20MarketingInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1 [json_name = "project"];
  if (!this->_internal_project().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_project());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string logo = 3 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_logo());
  }

  // bytes marketing = 4 [json_name = "marketing"];
  if (!this->_internal_marketing().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_marketing());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cw20MarketingInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cw20MarketingInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cw20MarketingInfo::GetClassData() const { return &_class_data_; }


void Cw20MarketingInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cw20MarketingInfo*>(&to_msg);
  auto& from = static_cast<const Cw20MarketingInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Cw20MarketingInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project().empty()) {
    _this->_internal_set_project(from._internal_project());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_logo().empty()) {
    _this->_internal_set_logo(from._internal_logo());
  }
  if (!from._internal_marketing().empty()) {
    _this->_internal_set_marketing(from._internal_marketing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cw20MarketingInfo::CopyFrom(const Cw20MarketingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Cw20MarketingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cw20MarketingInfo::IsInitialized() const {
  return true;
}

void Cw20MarketingInfo::InternalSwap(Cw20MarketingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.project_, lhs_arena,
                                       &other->_impl_.project_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.logo_, lhs_arena,
                                       &other->_impl_.logo_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marketing_, lhs_arena,
                                       &other->_impl_.marketing_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cw20MarketingInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[55]);
}
// ===================================================================

class GetWasmContractByAddressRequest::_Internal {
 public:
};

GetWasmContractByAddressRequest::GetWasmContractByAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetWasmContractByAddressRequest)
}
GetWasmContractByAddressRequest::GetWasmContractByAddressRequest(const GetWasmContractByAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWasmContractByAddressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contract_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_address().empty()) {
    _this->_impl_.contract_address_.Set(from._internal_contract_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetWasmContractByAddressRequest)
}

inline void GetWasmContractByAddressRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contract_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWasmContractByAddressRequest::~GetWasmContractByAddressRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetWasmContractByAddressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWasmContractByAddressRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contract_address_.Destroy();
}

void GetWasmContractByAddressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWasmContractByAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetWasmContractByAddressRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contract_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWasmContractByAddressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract_address = 1 [json_name = "contractAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressRequest.contract_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWasmContractByAddressRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetWasmContractByAddressRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_address = 1 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    const std::string& _s = this->_internal_contract_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressRequest.contract_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetWasmContractByAddressRequest)
  return target;
}

::size_t GetWasmContractByAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetWasmContractByAddressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_address = 1 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWasmContractByAddressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWasmContractByAddressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWasmContractByAddressRequest::GetClassData() const { return &_class_data_; }


void GetWasmContractByAddressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWasmContractByAddressRequest*>(&to_msg);
  auto& from = static_cast<const GetWasmContractByAddressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetWasmContractByAddressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_address().empty()) {
    _this->_internal_set_contract_address(from._internal_contract_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWasmContractByAddressRequest::CopyFrom(const GetWasmContractByAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetWasmContractByAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWasmContractByAddressRequest::IsInitialized() const {
  return true;
}

void GetWasmContractByAddressRequest::InternalSwap(GetWasmContractByAddressRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_address_, lhs_arena,
                                       &other->_impl_.contract_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWasmContractByAddressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[56]);
}
// ===================================================================

class GetWasmContractByAddressResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetWasmContractByAddressResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetWasmContractByAddressResponse, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Cw20Metadata& cw20_metadata(const GetWasmContractByAddressResponse* msg);
  static void set_has_cw20_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Cw20Metadata&
GetWasmContractByAddressResponse::_Internal::cw20_metadata(const GetWasmContractByAddressResponse* msg) {
  return *msg->_impl_.cw20_metadata_;
}
GetWasmContractByAddressResponse::GetWasmContractByAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetWasmContractByAddressResponse)
}
GetWasmContractByAddressResponse::GetWasmContractByAddressResponse(const GetWasmContractByAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetWasmContractByAddressResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funds_){from._impl_.funds_}
    , decltype(_impl_.label_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.init_message_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.current_migrate_message_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.cw20_metadata_){nullptr}
    , decltype(_impl_.executes_) {}

    , decltype(_impl_.instantiated_at_) {}

    , decltype(_impl_.last_executed_at_) {}

    , decltype(_impl_.code_id_) {}

    , decltype(_impl_.contract_number_) {}

    , decltype(_impl_.proposal_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_hash().empty()) {
    _this->_impl_.tx_hash_.Set(from._internal_tx_hash(), _this->GetArenaForAllocation());
  }
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), _this->GetArenaForAllocation());
  }
  _impl_.init_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.init_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_init_message().empty()) {
    _this->_impl_.init_message_.Set(from._internal_init_message(), _this->GetArenaForAllocation());
  }
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_admin().empty()) {
    _this->_impl_.admin_.Set(from._internal_admin(), _this->GetArenaForAllocation());
  }
  _impl_.current_migrate_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.current_migrate_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_current_migrate_message().empty()) {
    _this->_impl_.current_migrate_message_.Set(from._internal_current_migrate_message(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cw20_metadata_ = new ::injective_explorer_rpc::Cw20Metadata(*from._impl_.cw20_metadata_);
  }
  ::memcpy(&_impl_.executes_, &from._impl_.executes_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.proposal_id_) -
    reinterpret_cast<char*>(&_impl_.executes_)) + sizeof(_impl_.proposal_id_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetWasmContractByAddressResponse)
}

inline void GetWasmContractByAddressResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funds_){arena}
    , decltype(_impl_.label_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.tx_hash_) {}

    , decltype(_impl_.creator_) {}

    , decltype(_impl_.init_message_) {}

    , decltype(_impl_.admin_) {}

    , decltype(_impl_.current_migrate_message_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.cw20_metadata_){nullptr}
    , decltype(_impl_.executes_) { ::uint64_t{0u} }

    , decltype(_impl_.instantiated_at_) { ::uint64_t{0u} }

    , decltype(_impl_.last_executed_at_) { ::uint64_t{0u} }

    , decltype(_impl_.code_id_) { ::uint64_t{0u} }

    , decltype(_impl_.contract_number_) { ::int64_t{0} }

    , decltype(_impl_.proposal_id_) { ::int64_t{0} }

  };
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.label_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.creator_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.init_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.init_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.admin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.admin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.current_migrate_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.current_migrate_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetWasmContractByAddressResponse::~GetWasmContractByAddressResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetWasmContractByAddressResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetWasmContractByAddressResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funds()->~RepeatedPtrField();
  _impl_.label_.Destroy();
  _impl_.address_.Destroy();
  _impl_.tx_hash_.Destroy();
  _impl_.creator_.Destroy();
  _impl_.init_message_.Destroy();
  _impl_.admin_.Destroy();
  _impl_.current_migrate_message_.Destroy();
  _impl_.version_.Destroy();
  _impl_.type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cw20_metadata_;
}

void GetWasmContractByAddressResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetWasmContractByAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetWasmContractByAddressResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funds()->Clear();
  _impl_.label_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.tx_hash_.ClearToEmpty();
  _impl_.creator_.ClearToEmpty();
  _impl_.init_message_.ClearToEmpty();
  _impl_.admin_.ClearToEmpty();
  _impl_.current_migrate_message_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.cw20_metadata_ != nullptr);
    _impl_.cw20_metadata_->Clear();
  }
  ::memset(&_impl_.executes_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.proposal_id_) -
      reinterpret_cast<char*>(&_impl_.executes_)) + sizeof(_impl_.proposal_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetWasmContractByAddressResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1 [json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.label"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tx_hash = 3 [json_name = "txHash"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.tx_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string creator = 4 [json_name = "creator"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.creator"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 executes = 5 [json_name = "executes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.executes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 instantiated_at = 6 [json_name = "instantiatedAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.instantiated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string init_message = 7 [json_name = "initMessage"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_init_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.init_message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 last_executed_at = 8 [json_name = "lastExecutedAt"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.last_executed_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.ContractFund funds = 9 [json_name = "funds"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 code_id = 10 [json_name = "codeId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.code_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string admin = 11 [json_name = "admin"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_admin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.admin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string current_migrate_message = 12 [json_name = "currentMigrateMessage"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_current_migrate_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.current_migrate_message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 contract_number = 13 [json_name = "contractNumber"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.contract_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 14 [json_name = "version"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string type = 15 [json_name = "type"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetWasmContractByAddressResponse.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 16 [json_name = "cw20Metadata"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_cw20_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 proposal_id = 17 [json_name = "proposalId"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetWasmContractByAddressResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetWasmContractByAddressResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    const std::string& _s = this->_internal_label();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.label");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string tx_hash = 3 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    const std::string& _s = this->_internal_tx_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.tx_hash");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string creator = 4 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    const std::string& _s = this->_internal_creator();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.creator");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 executes = 5 [json_name = "executes"];
  if (this->_internal_executes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_executes(), target);
  }

  // uint64 instantiated_at = 6 [json_name = "instantiatedAt"];
  if (this->_internal_instantiated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_instantiated_at(), target);
  }

  // string init_message = 7 [json_name = "initMessage"];
  if (!this->_internal_init_message().empty()) {
    const std::string& _s = this->_internal_init_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.init_message");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // uint64 last_executed_at = 8 [json_name = "lastExecutedAt"];
  if (this->_internal_last_executed_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_last_executed_at(), target);
  }

  // repeated .injective_explorer_rpc.ContractFund funds = 9 [json_name = "funds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funds_size()); i < n; i++) {
    const auto& repfield = this->_internal_funds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 code_id = 10 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this->_internal_code_id(), target);
  }

  // string admin = 11 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    const std::string& _s = this->_internal_admin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.admin");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string current_migrate_message = 12 [json_name = "currentMigrateMessage"];
  if (!this->_internal_current_migrate_message().empty()) {
    const std::string& _s = this->_internal_current_migrate_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.current_migrate_message");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // sint64 contract_number = 13 [json_name = "contractNumber"];
  if (this->_internal_contract_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        13, this->_internal_contract_number(), target);
  }

  // string version = 14 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.version");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string type = 15 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetWasmContractByAddressResponse.type");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 16 [json_name = "cw20Metadata"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::cw20_metadata(this),
        _Internal::cw20_metadata(this).GetCachedSize(), target, stream);
  }

  // sint64 proposal_id = 17 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        17, this->_internal_proposal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetWasmContractByAddressResponse)
  return target;
}

::size_t GetWasmContractByAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetWasmContractByAddressResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.ContractFund funds = 9 [json_name = "funds"];
  total_size += 1UL * this->_internal_funds_size();
  for (const auto& msg : this->_internal_funds()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string label = 1 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_label());
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string tx_hash = 3 [json_name = "txHash"];
  if (!this->_internal_tx_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_hash());
  }

  // string creator = 4 [json_name = "creator"];
  if (!this->_internal_creator().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_creator());
  }

  // string init_message = 7 [json_name = "initMessage"];
  if (!this->_internal_init_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_init_message());
  }

  // string admin = 11 [json_name = "admin"];
  if (!this->_internal_admin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_admin());
  }

  // string current_migrate_message = 12 [json_name = "currentMigrateMessage"];
  if (!this->_internal_current_migrate_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_current_migrate_message());
  }

  // string version = 14 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string type = 15 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 16 [json_name = "cw20Metadata"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cw20_metadata_);
  }

  // uint64 executes = 5 [json_name = "executes"];
  if (this->_internal_executes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_executes());
  }

  // uint64 instantiated_at = 6 [json_name = "instantiatedAt"];
  if (this->_internal_instantiated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_instantiated_at());
  }

  // uint64 last_executed_at = 8 [json_name = "lastExecutedAt"];
  if (this->_internal_last_executed_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_executed_at());
  }

  // uint64 code_id = 10 [json_name = "codeId"];
  if (this->_internal_code_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_code_id());
  }

  // sint64 contract_number = 13 [json_name = "contractNumber"];
  if (this->_internal_contract_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_contract_number());
  }

  // sint64 proposal_id = 17 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::SInt64Size(
                                    this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetWasmContractByAddressResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetWasmContractByAddressResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetWasmContractByAddressResponse::GetClassData() const { return &_class_data_; }


void GetWasmContractByAddressResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetWasmContractByAddressResponse*>(&to_msg);
  auto& from = static_cast<const GetWasmContractByAddressResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetWasmContractByAddressResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funds()->MergeFrom(from._internal_funds());
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_tx_hash().empty()) {
    _this->_internal_set_tx_hash(from._internal_tx_hash());
  }
  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  if (!from._internal_init_message().empty()) {
    _this->_internal_set_init_message(from._internal_init_message());
  }
  if (!from._internal_admin().empty()) {
    _this->_internal_set_admin(from._internal_admin());
  }
  if (!from._internal_current_migrate_message().empty()) {
    _this->_internal_set_current_migrate_message(from._internal_current_migrate_message());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_cw20_metadata()->::injective_explorer_rpc::Cw20Metadata::MergeFrom(
        from._internal_cw20_metadata());
  }
  if (from._internal_executes() != 0) {
    _this->_internal_set_executes(from._internal_executes());
  }
  if (from._internal_instantiated_at() != 0) {
    _this->_internal_set_instantiated_at(from._internal_instantiated_at());
  }
  if (from._internal_last_executed_at() != 0) {
    _this->_internal_set_last_executed_at(from._internal_last_executed_at());
  }
  if (from._internal_code_id() != 0) {
    _this->_internal_set_code_id(from._internal_code_id());
  }
  if (from._internal_contract_number() != 0) {
    _this->_internal_set_contract_number(from._internal_contract_number());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetWasmContractByAddressResponse::CopyFrom(const GetWasmContractByAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetWasmContractByAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetWasmContractByAddressResponse::IsInitialized() const {
  return true;
}

void GetWasmContractByAddressResponse::InternalSwap(GetWasmContractByAddressResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_funds()->InternalSwap(other->_internal_mutable_funds());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.label_, lhs_arena,
                                       &other->_impl_.label_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_hash_, lhs_arena,
                                       &other->_impl_.tx_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.creator_, lhs_arena,
                                       &other->_impl_.creator_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.init_message_, lhs_arena,
                                       &other->_impl_.init_message_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.admin_, lhs_arena,
                                       &other->_impl_.admin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_migrate_message_, lhs_arena,
                                       &other->_impl_.current_migrate_message_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetWasmContractByAddressResponse, _impl_.proposal_id_)
      + sizeof(GetWasmContractByAddressResponse::_impl_.proposal_id_)
      - PROTOBUF_FIELD_OFFSET(GetWasmContractByAddressResponse, _impl_.cw20_metadata_)>(
          reinterpret_cast<char*>(&_impl_.cw20_metadata_),
          reinterpret_cast<char*>(&other->_impl_.cw20_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetWasmContractByAddressResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[57]);
}
// ===================================================================

class GetCw20BalanceRequest::_Internal {
 public:
};

GetCw20BalanceRequest::GetCw20BalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetCw20BalanceRequest)
}
GetCw20BalanceRequest::GetCw20BalanceRequest(const GetCw20BalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCw20BalanceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetCw20BalanceRequest)
}

inline void GetCw20BalanceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCw20BalanceRequest::~GetCw20BalanceRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetCw20BalanceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCw20BalanceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void GetCw20BalanceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCw20BalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetCw20BalanceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.limit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCw20BalanceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.GetCw20BalanceRequest.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetCw20BalanceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetCw20BalanceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.GetCw20BalanceRequest.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // sint32 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetCw20BalanceRequest)
  return target;
}

::size_t GetCw20BalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetCw20BalanceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // sint32 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCw20BalanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCw20BalanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCw20BalanceRequest::GetClassData() const { return &_class_data_; }


void GetCw20BalanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCw20BalanceRequest*>(&to_msg);
  auto& from = static_cast<const GetCw20BalanceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetCw20BalanceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCw20BalanceRequest::CopyFrom(const GetCw20BalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetCw20BalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCw20BalanceRequest::IsInitialized() const {
  return true;
}

void GetCw20BalanceRequest::InternalSwap(GetCw20BalanceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);

  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCw20BalanceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[58]);
}
// ===================================================================

class GetCw20BalanceResponse::_Internal {
 public:
};

GetCw20BalanceResponse::GetCw20BalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.GetCw20BalanceResponse)
}
GetCw20BalanceResponse::GetCw20BalanceResponse(const GetCw20BalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCw20BalanceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){from._impl_.field_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.GetCw20BalanceResponse)
}

inline void GetCw20BalanceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCw20BalanceResponse::~GetCw20BalanceResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.GetCw20BalanceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCw20BalanceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_field()->~RepeatedPtrField();
}

void GetCw20BalanceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCw20BalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.GetCw20BalanceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_field()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCw20BalanceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_explorer_rpc.WasmCw20Balance field = 1 [json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetCw20BalanceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.GetCw20BalanceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.WasmCw20Balance field = 1 [json_name = "field"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.GetCw20BalanceResponse)
  return target;
}

::size_t GetCw20BalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.GetCw20BalanceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.WasmCw20Balance field = 1 [json_name = "field"];
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->_internal_field()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCw20BalanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCw20BalanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCw20BalanceResponse::GetClassData() const { return &_class_data_; }


void GetCw20BalanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCw20BalanceResponse*>(&to_msg);
  auto& from = static_cast<const GetCw20BalanceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.GetCw20BalanceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_field()->MergeFrom(from._internal_field());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCw20BalanceResponse::CopyFrom(const GetCw20BalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.GetCw20BalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCw20BalanceResponse::IsInitialized() const {
  return true;
}

void GetCw20BalanceResponse::InternalSwap(GetCw20BalanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_field()->InternalSwap(other->_internal_mutable_field());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCw20BalanceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[59]);
}
// ===================================================================

class WasmCw20Balance::_Internal {
 public:
  using HasBits = decltype(std::declval<WasmCw20Balance>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WasmCw20Balance, _impl_._has_bits_);
  static const ::injective_explorer_rpc::Cw20Metadata& cw20_metadata(const WasmCw20Balance* msg);
  static void set_has_cw20_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_explorer_rpc::Cw20Metadata&
WasmCw20Balance::_Internal::cw20_metadata(const WasmCw20Balance* msg) {
  return *msg->_impl_.cw20_metadata_;
}
WasmCw20Balance::WasmCw20Balance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.WasmCw20Balance)
}
WasmCw20Balance::WasmCw20Balance(const WasmCw20Balance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WasmCw20Balance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_address_) {}

    , decltype(_impl_.account_) {}

    , decltype(_impl_.balance_) {}

    , decltype(_impl_.cw20_metadata_){nullptr}
    , decltype(_impl_.updated_at_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_address().empty()) {
    _this->_impl_.contract_address_.Set(from._internal_contract_address(), _this->GetArenaForAllocation());
  }
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account().empty()) {
    _this->_impl_.account_.Set(from._internal_account(), _this->GetArenaForAllocation());
  }
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cw20_metadata_ = new ::injective_explorer_rpc::Cw20Metadata(*from._impl_.cw20_metadata_);
  }
  _this->_impl_.updated_at_ = from._impl_.updated_at_;
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.WasmCw20Balance)
}

inline void WasmCw20Balance::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_address_) {}

    , decltype(_impl_.account_) {}

    , decltype(_impl_.balance_) {}

    , decltype(_impl_.cw20_metadata_){nullptr}
    , decltype(_impl_.updated_at_) { ::int64_t{0} }

  };
  _impl_.contract_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WasmCw20Balance::~WasmCw20Balance() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.WasmCw20Balance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WasmCw20Balance::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contract_address_.Destroy();
  _impl_.account_.Destroy();
  _impl_.balance_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cw20_metadata_;
}

void WasmCw20Balance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WasmCw20Balance::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.WasmCw20Balance)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contract_address_.ClearToEmpty();
  _impl_.account_.ClearToEmpty();
  _impl_.balance_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.cw20_metadata_ != nullptr);
    _impl_.cw20_metadata_->Clear();
  }
  _impl_.updated_at_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WasmCw20Balance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract_address = 1 [json_name = "contractAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCw20Balance.contract_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account = 2 [json_name = "account"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCw20Balance.account"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string balance = 3 [json_name = "balance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.WasmCw20Balance.balance"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 updated_at = 4 [json_name = "updatedAt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 5 [json_name = "cw20Metadata"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cw20_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WasmCw20Balance::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.WasmCw20Balance)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_address = 1 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    const std::string& _s = this->_internal_contract_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCw20Balance.contract_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account = 2 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    const std::string& _s = this->_internal_account();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCw20Balance.account");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string balance = 3 [json_name = "balance"];
  if (!this->_internal_balance().empty()) {
    const std::string& _s = this->_internal_balance();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.WasmCw20Balance.balance");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // sint64 updated_at = 4 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_updated_at(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 5 [json_name = "cw20Metadata"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cw20_metadata(this),
        _Internal::cw20_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.WasmCw20Balance)
  return target;
}

::size_t WasmCw20Balance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.WasmCw20Balance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract_address = 1 [json_name = "contractAddress"];
  if (!this->_internal_contract_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_address());
  }

  // string account = 2 [json_name = "account"];
  if (!this->_internal_account().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account());
  }

  // string balance = 3 [json_name = "balance"];
  if (!this->_internal_balance().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_balance());
  }

  // .injective_explorer_rpc.Cw20Metadata cw20_metadata = 5 [json_name = "cw20Metadata"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cw20_metadata_);
  }

  // sint64 updated_at = 4 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_updated_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WasmCw20Balance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WasmCw20Balance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WasmCw20Balance::GetClassData() const { return &_class_data_; }


void WasmCw20Balance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WasmCw20Balance*>(&to_msg);
  auto& from = static_cast<const WasmCw20Balance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.WasmCw20Balance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract_address().empty()) {
    _this->_internal_set_contract_address(from._internal_contract_address());
  }
  if (!from._internal_account().empty()) {
    _this->_internal_set_account(from._internal_account());
  }
  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_cw20_metadata()->::injective_explorer_rpc::Cw20Metadata::MergeFrom(
        from._internal_cw20_metadata());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WasmCw20Balance::CopyFrom(const WasmCw20Balance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.WasmCw20Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WasmCw20Balance::IsInitialized() const {
  return true;
}

void WasmCw20Balance::InternalSwap(WasmCw20Balance* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_address_, lhs_arena,
                                       &other->_impl_.contract_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_, lhs_arena,
                                       &other->_impl_.account_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.balance_, lhs_arena,
                                       &other->_impl_.balance_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WasmCw20Balance, _impl_.updated_at_)
      + sizeof(WasmCw20Balance::_impl_.updated_at_)
      - PROTOBUF_FIELD_OFFSET(WasmCw20Balance, _impl_.cw20_metadata_)>(
          reinterpret_cast<char*>(&_impl_.cw20_metadata_),
          reinterpret_cast<char*>(&other->_impl_.cw20_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WasmCw20Balance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[60]);
}
// ===================================================================

class RelayersRequest::_Internal {
 public:
};

RelayersRequest::RelayersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.RelayersRequest)
}
RelayersRequest::RelayersRequest(const RelayersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelayersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_i_ds_){from._impl_.market_i_ds_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.RelayersRequest)
}

inline void RelayersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_i_ds_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelayersRequest::~RelayersRequest() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.RelayersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_i_ds()->~RepeatedPtrField();
}

void RelayersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.RelayersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_i_ds()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelayersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string market_i_ds = 1 [json_name = "marketIDs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_i_ds();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.RelayersRequest.market_i_ds"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RelayersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.RelayersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string market_i_ds = 1 [json_name = "marketIDs"];
  for (int i = 0, n = this->_internal_market_i_ds_size(); i < n; ++i) {
    const auto& s = this->_internal_market_i_ds(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.RelayersRequest.market_i_ds");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.RelayersRequest)
  return target;
}

::size_t RelayersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.RelayersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_i_ds = 1 [json_name = "marketIDs"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_i_ds().size());
  for (int i = 0, n = _internal_market_i_ds().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_i_ds().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelayersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelayersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelayersRequest::GetClassData() const { return &_class_data_; }


void RelayersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelayersRequest*>(&to_msg);
  auto& from = static_cast<const RelayersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.RelayersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_i_ds()->MergeFrom(from._internal_market_i_ds());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelayersRequest::CopyFrom(const RelayersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.RelayersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayersRequest::IsInitialized() const {
  return true;
}

void RelayersRequest::InternalSwap(RelayersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_i_ds()->InternalSwap(
      other->_internal_mutable_market_i_ds());
}

::PROTOBUF_NAMESPACE_ID::Metadata RelayersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[61]);
}
// ===================================================================

class RelayersResponse::_Internal {
 public:
};

RelayersResponse::RelayersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.RelayersResponse)
}
RelayersResponse::RelayersResponse(const RelayersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelayersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){from._impl_.field_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.RelayersResponse)
}

inline void RelayersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.field_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RelayersResponse::~RelayersResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.RelayersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_field()->~RepeatedPtrField();
}

void RelayersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.RelayersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_field()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelayersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_explorer_rpc.RelayerMarkets field = 1 [json_name = "field"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RelayersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.RelayersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.RelayerMarkets field = 1 [json_name = "field"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_size()); i < n; i++) {
    const auto& repfield = this->_internal_field(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.RelayersResponse)
  return target;
}

::size_t RelayersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.RelayersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.RelayerMarkets field = 1 [json_name = "field"];
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->_internal_field()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelayersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelayersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelayersResponse::GetClassData() const { return &_class_data_; }


void RelayersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelayersResponse*>(&to_msg);
  auto& from = static_cast<const RelayersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.RelayersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_field()->MergeFrom(from._internal_field());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelayersResponse::CopyFrom(const RelayersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.RelayersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayersResponse::IsInitialized() const {
  return true;
}

void RelayersResponse::InternalSwap(RelayersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_field()->InternalSwap(other->_internal_mutable_field());
}

::PROTOBUF_NAMESPACE_ID::Metadata RelayersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[62]);
}
// ===================================================================

class RelayerMarkets::_Internal {
 public:
};

RelayerMarkets::RelayerMarkets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.RelayerMarkets)
}
RelayerMarkets::RelayerMarkets(const RelayerMarkets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelayerMarkets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.RelayerMarkets)
}

inline void RelayerMarkets::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.relayers_){arena}
    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RelayerMarkets::~RelayerMarkets() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.RelayerMarkets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelayerMarkets::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.market_id_.Destroy();
}

void RelayerMarkets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelayerMarkets::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.RelayerMarkets)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelayerMarkets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.RelayerMarkets.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.Relayer relayers = 2 [json_name = "relayers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relayers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RelayerMarkets::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.RelayerMarkets)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.RelayerMarkets.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective_explorer_rpc.Relayer relayers = 2 [json_name = "relayers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relayers_size()); i < n; i++) {
    const auto& repfield = this->_internal_relayers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.RelayerMarkets)
  return target;
}

::size_t RelayerMarkets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.RelayerMarkets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.Relayer relayers = 2 [json_name = "relayers"];
  total_size += 1UL * this->_internal_relayers_size();
  for (const auto& msg : this->_internal_relayers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelayerMarkets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelayerMarkets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelayerMarkets::GetClassData() const { return &_class_data_; }


void RelayerMarkets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelayerMarkets*>(&to_msg);
  auto& from = static_cast<const RelayerMarkets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.RelayerMarkets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelayerMarkets::CopyFrom(const RelayerMarkets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.RelayerMarkets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayerMarkets::IsInitialized() const {
  return true;
}

void RelayerMarkets::InternalSwap(RelayerMarkets* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_relayers()->InternalSwap(other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RelayerMarkets::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[63]);
}
// ===================================================================

class Relayer::_Internal {
 public:
};

Relayer::Relayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.Relayer)
}
Relayer::Relayer(const Relayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Relayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.cta_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.cta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cta_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cta().empty()) {
    _this->_impl_.cta_.Set(from._internal_cta(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.Relayer)
}

inline void Relayer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.cta_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cta_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Relayer::~Relayer() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.Relayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Relayer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.cta_.Destroy();
}

void Relayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Relayer::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.Relayer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.cta_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Relayer.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string cta = 2 [json_name = "cta"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.Relayer.cta"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Relayer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.Relayer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Relayer.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string cta = 2 [json_name = "cta"];
  if (!this->_internal_cta().empty()) {
    const std::string& _s = this->_internal_cta();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.Relayer.cta");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.Relayer)
  return target;
}

::size_t Relayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.Relayer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string cta = 2 [json_name = "cta"];
  if (!this->_internal_cta().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_cta());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Relayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Relayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Relayer::GetClassData() const { return &_class_data_; }


void Relayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Relayer*>(&to_msg);
  auto& from = static_cast<const Relayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.Relayer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_cta().empty()) {
    _this->_internal_set_cta(from._internal_cta());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Relayer::CopyFrom(const Relayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.Relayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relayer::IsInitialized() const {
  return true;
}

void Relayer::InternalSwap(Relayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cta_, lhs_arena,
                                       &other->_impl_.cta_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Relayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[64]);
}
// ===================================================================

class StreamTxsRequest::_Internal {
 public:
};

StreamTxsRequest::StreamTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.StreamTxsRequest)
}
StreamTxsRequest::StreamTxsRequest(const StreamTxsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StreamTxsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.StreamTxsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamTxsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamTxsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StreamTxsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[65]);
}
// ===================================================================

class StreamTxsResponse::_Internal {
 public:
};

StreamTxsResponse::StreamTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.StreamTxsResponse)
}
StreamTxsResponse::StreamTxsResponse(const StreamTxsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamTxsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.messages_) {}

    , decltype(_impl_.error_log_) {}

    , decltype(_impl_.block_number_) {}

    , decltype(_impl_.tx_number_) {}

    , decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_timestamp().empty()) {
    _this->_impl_.block_timestamp_.Set(from._internal_block_timestamp(), _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), _this->GetArenaForAllocation());
  }
  _impl_.messages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messages_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messages().empty()) {
    _this->_impl_.messages_.Set(from._internal_messages(), _this->GetArenaForAllocation());
  }
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_log().empty()) {
    _this->_impl_.error_log_.Set(from._internal_error_log(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.block_number_, &from._impl_.block_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.StreamTxsResponse)
}

inline void StreamTxsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.block_timestamp_) {}

    , decltype(_impl_.hash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.messages_) {}

    , decltype(_impl_.error_log_) {}

    , decltype(_impl_.block_number_) { ::uint64_t{0u} }

    , decltype(_impl_.tx_number_) { ::uint64_t{0u} }

    , decltype(_impl_.code_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messages_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messages_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamTxsResponse::~StreamTxsResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.StreamTxsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamTxsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.block_timestamp_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.messages_.Destroy();
  _impl_.error_log_.Destroy();
}

void StreamTxsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamTxsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.StreamTxsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.block_timestamp_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.messages_.ClearToEmpty();
  _impl_.error_log_.ClearToEmpty();
  ::memset(&_impl_.block_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.block_number_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamTxsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamTxsResponse.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 block_number = 2 [json_name = "blockNumber"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.block_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string block_timestamp = 3 [json_name = "blockTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_block_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamTxsResponse.block_timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string hash = 4 [json_name = "hash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamTxsResponse.hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string codespace = 5 [json_name = "codespace"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamTxsResponse.codespace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string messages = 6 [json_name = "messages"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_messages();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamTxsResponse.messages"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 tx_number = 7 [json_name = "txNumber"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.tx_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error_log = 8 [json_name = "errorLog"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_error_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamTxsResponse.error_log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 code = 9 [json_name = "code"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamTxsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.StreamTxsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamTxsResponse.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 block_number = 2 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_block_number(), target);
  }

  // string block_timestamp = 3 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    const std::string& _s = this->_internal_block_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamTxsResponse.block_timestamp");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamTxsResponse.hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string codespace = 5 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    const std::string& _s = this->_internal_codespace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamTxsResponse.codespace");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string messages = 6 [json_name = "messages"];
  if (!this->_internal_messages().empty()) {
    const std::string& _s = this->_internal_messages();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamTxsResponse.messages");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint64 tx_number = 7 [json_name = "txNumber"];
  if (this->_internal_tx_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        7, this->_internal_tx_number(), target);
  }

  // string error_log = 8 [json_name = "errorLog"];
  if (!this->_internal_error_log().empty()) {
    const std::string& _s = this->_internal_error_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamTxsResponse.error_log");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // uint32 code = 9 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.StreamTxsResponse)
  return target;
}

::size_t StreamTxsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.StreamTxsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string block_timestamp = 3 [json_name = "blockTimestamp"];
  if (!this->_internal_block_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_timestamp());
  }

  // string hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hash());
  }

  // string codespace = 5 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_codespace());
  }

  // string messages = 6 [json_name = "messages"];
  if (!this->_internal_messages().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_messages());
  }

  // string error_log = 8 [json_name = "errorLog"];
  if (!this->_internal_error_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error_log());
  }

  // uint64 block_number = 2 [json_name = "blockNumber"];
  if (this->_internal_block_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_block_number());
  }

  // uint64 tx_number = 7 [json_name = "txNumber"];
  if (this->_internal_tx_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_tx_number());
  }

  // uint32 code = 9 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamTxsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamTxsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamTxsResponse::GetClassData() const { return &_class_data_; }


void StreamTxsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamTxsResponse*>(&to_msg);
  auto& from = static_cast<const StreamTxsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.StreamTxsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_block_timestamp().empty()) {
    _this->_internal_set_block_timestamp(from._internal_block_timestamp());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_messages().empty()) {
    _this->_internal_set_messages(from._internal_messages());
  }
  if (!from._internal_error_log().empty()) {
    _this->_internal_set_error_log(from._internal_error_log());
  }
  if (from._internal_block_number() != 0) {
    _this->_internal_set_block_number(from._internal_block_number());
  }
  if (from._internal_tx_number() != 0) {
    _this->_internal_set_tx_number(from._internal_tx_number());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamTxsResponse::CopyFrom(const StreamTxsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.StreamTxsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTxsResponse::IsInitialized() const {
  return true;
}

void StreamTxsResponse::InternalSwap(StreamTxsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_timestamp_, lhs_arena,
                                       &other->_impl_.block_timestamp_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codespace_, lhs_arena,
                                       &other->_impl_.codespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messages_, lhs_arena,
                                       &other->_impl_.messages_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_log_, lhs_arena,
                                       &other->_impl_.error_log_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamTxsResponse, _impl_.code_)
      + sizeof(StreamTxsResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(StreamTxsResponse, _impl_.block_number_)>(
          reinterpret_cast<char*>(&_impl_.block_number_),
          reinterpret_cast<char*>(&other->_impl_.block_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamTxsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[66]);
}
// ===================================================================

class StreamBlocksRequest::_Internal {
 public:
};

StreamBlocksRequest::StreamBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.StreamBlocksRequest)
}
StreamBlocksRequest::StreamBlocksRequest(const StreamBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StreamBlocksRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.StreamBlocksRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamBlocksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamBlocksRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StreamBlocksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[67]);
}
// ===================================================================

class StreamBlocksResponse::_Internal {
 public:
};

StreamBlocksResponse::StreamBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_explorer_rpc.StreamBlocksResponse)
}
StreamBlocksResponse::StreamBlocksResponse(const StreamBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamBlocksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.proposer_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.block_hash_) {}

    , decltype(_impl_.parent_hash_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.num_pre_commits_) {}

    , decltype(_impl_.num_txs_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer().empty()) {
    _this->_impl_.proposer_.Set(from._internal_proposer(), _this->GetArenaForAllocation());
  }
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_moniker().empty()) {
    _this->_impl_.moniker_.Set(from._internal_moniker(), _this->GetArenaForAllocation());
  }
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_hash().empty()) {
    _this->_impl_.block_hash_.Set(from._internal_block_hash(), _this->GetArenaForAllocation());
  }
  _impl_.parent_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent_hash().empty()) {
    _this->_impl_.parent_hash_.Set(from._internal_parent_hash(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_txs_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.num_txs_));
  // @@protoc_insertion_point(copy_constructor:injective_explorer_rpc.StreamBlocksResponse)
}

inline void StreamBlocksResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.proposer_) {}

    , decltype(_impl_.moniker_) {}

    , decltype(_impl_.block_hash_) {}

    , decltype(_impl_.parent_hash_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.num_pre_commits_) { ::int64_t{0} }

    , decltype(_impl_.num_txs_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.block_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parent_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamBlocksResponse::~StreamBlocksResponse() {
  // @@protoc_insertion_point(destructor:injective_explorer_rpc.StreamBlocksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamBlocksResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_txs()->~RepeatedPtrField();
  _impl_.proposer_.Destroy();
  _impl_.moniker_.Destroy();
  _impl_.block_hash_.Destroy();
  _impl_.parent_hash_.Destroy();
  _impl_.timestamp_.Destroy();
}

void StreamBlocksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_explorer_rpc.StreamBlocksResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_txs()->Clear();
  _impl_.proposer_.ClearToEmpty();
  _impl_.moniker_.ClearToEmpty();
  _impl_.block_hash_.ClearToEmpty();
  _impl_.parent_hash_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_txs_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.num_txs_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamBlocksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string proposer = 2 [json_name = "proposer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proposer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamBlocksResponse.proposer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string moniker = 3 [json_name = "moniker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_moniker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamBlocksResponse.moniker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string block_hash = 4 [json_name = "blockHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamBlocksResponse.block_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string parent_hash = 5 [json_name = "parentHash"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_parent_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamBlocksResponse.parent_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.num_pre_commits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 num_txs = 7 [json_name = "numTxs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.num_txs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_explorer_rpc.TxDataRPC txs = 8 [json_name = "txs"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 9 [json_name = "timestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_explorer_rpc.StreamBlocksResponse.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamBlocksResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_explorer_rpc.StreamBlocksResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_height(), target);
  }

  // string proposer = 2 [json_name = "proposer"];
  if (!this->_internal_proposer().empty()) {
    const std::string& _s = this->_internal_proposer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamBlocksResponse.proposer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string moniker = 3 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    const std::string& _s = this->_internal_moniker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamBlocksResponse.moniker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string block_hash = 4 [json_name = "blockHash"];
  if (!this->_internal_block_hash().empty()) {
    const std::string& _s = this->_internal_block_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamBlocksResponse.block_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string parent_hash = 5 [json_name = "parentHash"];
  if (!this->_internal_parent_hash().empty()) {
    const std::string& _s = this->_internal_parent_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamBlocksResponse.parent_hash");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
  if (this->_internal_num_pre_commits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_num_pre_commits(), target);
  }

  // sint64 num_txs = 7 [json_name = "numTxs"];
  if (this->_internal_num_txs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_num_txs(), target);
  }

  // repeated .injective_explorer_rpc.TxDataRPC txs = 8 [json_name = "txs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string timestamp = 9 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_explorer_rpc.StreamBlocksResponse.timestamp");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_explorer_rpc.StreamBlocksResponse)
  return target;
}

::size_t StreamBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_explorer_rpc.StreamBlocksResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_explorer_rpc.TxDataRPC txs = 8 [json_name = "txs"];
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_internal_txs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string proposer = 2 [json_name = "proposer"];
  if (!this->_internal_proposer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_proposer());
  }

  // string moniker = 3 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_moniker());
  }

  // string block_hash = 4 [json_name = "blockHash"];
  if (!this->_internal_block_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_hash());
  }

  // string parent_hash = 5 [json_name = "parentHash"];
  if (!this->_internal_parent_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_parent_hash());
  }

  // string timestamp = 9 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // sint64 num_pre_commits = 6 [json_name = "numPreCommits"];
  if (this->_internal_num_pre_commits() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_num_pre_commits());
  }

  // sint64 num_txs = 7 [json_name = "numTxs"];
  if (this->_internal_num_txs() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_num_txs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamBlocksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamBlocksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamBlocksResponse::GetClassData() const { return &_class_data_; }


void StreamBlocksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamBlocksResponse*>(&to_msg);
  auto& from = static_cast<const StreamBlocksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_explorer_rpc.StreamBlocksResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_txs()->MergeFrom(from._internal_txs());
  if (!from._internal_proposer().empty()) {
    _this->_internal_set_proposer(from._internal_proposer());
  }
  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (!from._internal_block_hash().empty()) {
    _this->_internal_set_block_hash(from._internal_block_hash());
  }
  if (!from._internal_parent_hash().empty()) {
    _this->_internal_set_parent_hash(from._internal_parent_hash());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_num_pre_commits() != 0) {
    _this->_internal_set_num_pre_commits(from._internal_num_pre_commits());
  }
  if (from._internal_num_txs() != 0) {
    _this->_internal_set_num_txs(from._internal_num_txs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamBlocksResponse::CopyFrom(const StreamBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_explorer_rpc.StreamBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamBlocksResponse::IsInitialized() const {
  return true;
}

void StreamBlocksResponse::InternalSwap(StreamBlocksResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_txs()->InternalSwap(other->_internal_mutable_txs());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposer_, lhs_arena,
                                       &other->_impl_.proposer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, lhs_arena,
                                       &other->_impl_.moniker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_hash_, lhs_arena,
                                       &other->_impl_.block_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_hash_, lhs_arena,
                                       &other->_impl_.parent_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamBlocksResponse, _impl_.num_txs_)
      + sizeof(StreamBlocksResponse::_impl_.num_txs_)
      - PROTOBUF_FIELD_OFFSET(StreamBlocksResponse, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamBlocksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fexplorer_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fexplorer_5frpc_2eproto[68]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_explorer_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetAccountTxsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetAccountTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetAccountTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetAccountTxsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetAccountTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetAccountTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Paging*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Paging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Paging >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::TxDetailData*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::TxDetailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::TxDetailData >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GasFee*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GasFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GasFee >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::CosmosCoin*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::CosmosCoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::CosmosCoin >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Event_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Event_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Event_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Event*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Signature*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetContractTxsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetContractTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetContractTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetContractTxsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetContractTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetContractTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetBlocksRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetBlocksResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetBlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::BlockInfo*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::BlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::BlockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::TxDataRPC*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::TxDataRPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::TxDataRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetBlockRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetBlockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetBlockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetBlockResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetBlockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::BlockDetailInfo*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::BlockDetailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::BlockDetailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::TxData*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::TxData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::TxData >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetValidatorsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetValidatorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetValidatorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetValidatorsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetValidatorsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetValidatorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Validator*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::ValidatorDescription*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::ValidatorDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::ValidatorDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::ValidatorUptime*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::ValidatorUptime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::ValidatorUptime >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::SlashingEvent*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::SlashingEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::SlashingEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetValidatorRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetValidatorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetValidatorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetValidatorResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetValidatorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetValidatorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetValidatorUptimeRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetValidatorUptimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetValidatorUptimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetValidatorUptimeResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetValidatorUptimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetValidatorUptimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetTxsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetTxsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetTxByTxHashRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetTxByTxHashRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetTxByTxHashRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetTxByTxHashResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetTxByTxHashResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetTxByTxHashResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetPeggyDepositTxsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetPeggyDepositTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetPeggyDepositTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetPeggyDepositTxsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetPeggyDepositTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetPeggyDepositTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::PeggyDepositTx*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::PeggyDepositTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::PeggyDepositTx >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::PeggyWithdrawalTx*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::PeggyWithdrawalTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::PeggyWithdrawalTx >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetIBCTransferTxsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetIBCTransferTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetIBCTransferTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetIBCTransferTxsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetIBCTransferTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetIBCTransferTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::IBCTransferTx*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::IBCTransferTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::IBCTransferTx >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetWasmCodesRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetWasmCodesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetWasmCodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetWasmCodesResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetWasmCodesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetWasmCodesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::WasmCode*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::WasmCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::WasmCode >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Checksum*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Checksum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Checksum >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::ContractPermission*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::ContractPermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::ContractPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetWasmCodeByIDRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetWasmCodeByIDRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetWasmCodeByIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetWasmCodeByIDResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetWasmCodeByIDResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetWasmCodeByIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetWasmContractsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetWasmContractsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetWasmContractsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetWasmContractsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetWasmContractsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetWasmContractsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::WasmContract*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::WasmContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::WasmContract >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::ContractFund*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::ContractFund >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::ContractFund >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Cw20Metadata*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Cw20Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Cw20Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Cw20TokenInfo*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Cw20TokenInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Cw20TokenInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Cw20MarketingInfo*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Cw20MarketingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Cw20MarketingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetWasmContractByAddressRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetWasmContractByAddressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetWasmContractByAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetWasmContractByAddressResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetWasmContractByAddressResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetWasmContractByAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetCw20BalanceRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetCw20BalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetCw20BalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::GetCw20BalanceResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::GetCw20BalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::GetCw20BalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::WasmCw20Balance*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::WasmCw20Balance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::WasmCw20Balance >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::RelayersRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::RelayersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::RelayersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::RelayersResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::RelayersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::RelayersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::RelayerMarkets*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::RelayerMarkets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::RelayerMarkets >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::Relayer*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::Relayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::Relayer >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::StreamTxsRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::StreamTxsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::StreamTxsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::StreamTxsResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::StreamTxsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::StreamTxsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::StreamBlocksRequest*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::StreamBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::StreamBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_explorer_rpc::StreamBlocksResponse*
Arena::CreateMaybeMessage< ::injective_explorer_rpc::StreamBlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_explorer_rpc::StreamBlocksResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

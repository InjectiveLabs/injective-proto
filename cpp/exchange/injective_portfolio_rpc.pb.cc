// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_portfolio_rpc.proto

#include "exchange/injective_portfolio_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective_portfolio_rpc {
template <typename>
PROTOBUF_CONSTEXPR AccountPortfolioRequest::AccountPortfolioRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccountPortfolioRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountPortfolioRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountPortfolioRequestDefaultTypeInternal() {}
  union {
    AccountPortfolioRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountPortfolioRequestDefaultTypeInternal _AccountPortfolioRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AccountPortfolioResponse::AccountPortfolioResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.portfolio_)*/nullptr} {}
struct AccountPortfolioResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountPortfolioResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountPortfolioResponseDefaultTypeInternal() {}
  union {
    AccountPortfolioResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountPortfolioResponseDefaultTypeInternal _AccountPortfolioResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Portfolio::Portfolio(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bank_balances_)*/{}
  , /*decltype(_impl_.subaccount_balances_)*/{}
  , /*decltype(_impl_.account_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PortfolioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortfolioDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortfolioDefaultTypeInternal() {}
  union {
    Portfolio _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortfolioDefaultTypeInternal _Portfolio_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Coin::Coin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoinDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoinDefaultTypeInternal() {}
  union {
    Coin _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoinDefaultTypeInternal _Coin_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SubaccountBalanceV2::SubaccountBalanceV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.available_balances_)*/{}
  , /*decltype(_impl_.margin_hold_)*/{}
  , /*decltype(_impl_.unrealized_pnl_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubaccountBalanceV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountBalanceV2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountBalanceV2DefaultTypeInternal() {}
  union {
    SubaccountBalanceV2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountBalanceV2DefaultTypeInternal _SubaccountBalanceV2_default_instance_;
}  // namespace injective_portfolio_rpc
static ::_pb::Metadata file_level_metadata_exchange_2finjective_5fportfolio_5frpc_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_exchange_2finjective_5fportfolio_5frpc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_exchange_2finjective_5fportfolio_5frpc_2eproto = nullptr;
const ::uint32_t TableStruct_exchange_2finjective_5fportfolio_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::AccountPortfolioRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::AccountPortfolioRequest, _impl_.account_address_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::AccountPortfolioResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::AccountPortfolioResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::AccountPortfolioResponse, _impl_.portfolio_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::Portfolio, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::Portfolio, _impl_.account_address_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::Portfolio, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::Portfolio, _impl_.bank_balances_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::Portfolio, _impl_.subaccount_balances_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::Coin, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::Coin, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::Coin, _impl_.amount_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::SubaccountBalanceV2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::SubaccountBalanceV2, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::SubaccountBalanceV2, _impl_.available_balances_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::SubaccountBalanceV2, _impl_.margin_hold_),
    PROTOBUF_FIELD_OFFSET(::injective_portfolio_rpc::SubaccountBalanceV2, _impl_.unrealized_pnl_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective_portfolio_rpc::AccountPortfolioRequest)},
        { 9, 18, -1, sizeof(::injective_portfolio_rpc::AccountPortfolioResponse)},
        { 19, -1, -1, sizeof(::injective_portfolio_rpc::Portfolio)},
        { 31, -1, -1, sizeof(::injective_portfolio_rpc::Coin)},
        { 41, -1, -1, sizeof(::injective_portfolio_rpc::SubaccountBalanceV2)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective_portfolio_rpc::_AccountPortfolioRequest_default_instance_._instance,
    &::injective_portfolio_rpc::_AccountPortfolioResponse_default_instance_._instance,
    &::injective_portfolio_rpc::_Portfolio_default_instance_._instance,
    &::injective_portfolio_rpc::_Coin_default_instance_._instance,
    &::injective_portfolio_rpc::_SubaccountBalanceV2_default_instance_._instance,
};
const char descriptor_table_protodef_exchange_2finjective_5fportfolio_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&exchange/injective_portfolio_rpc.proto"
    "\022\027injective_portfolio_rpc\"B\n\027AccountPort"
    "folioRequest\022\'\n\017account_address\030\001 \001(\tR\016a"
    "ccountAddress\"\\\n\030AccountPortfolioRespons"
    "e\022@\n\tportfolio\030\001 \001(\0132\".injective_portfol"
    "io_rpc.PortfolioR\tportfolio\"\355\001\n\tPortfoli"
    "o\022\'\n\017account_address\030\001 \001(\tR\016accountAddre"
    "ss\022\024\n\005denom\030\002 \001(\tR\005denom\022B\n\rbank_balance"
    "s\030\003 \003(\0132\035.injective_portfolio_rpc.CoinR\014"
    "bankBalances\022]\n\023subaccount_balances\030\004 \003("
    "\0132,.injective_portfolio_rpc.SubaccountBa"
    "lanceV2R\022subaccountBalances\"4\n\004Coin\022\024\n\005d"
    "enom\030\001 \001(\tR\005denom\022\026\n\006amount\030\002 \001(\tR\006amoun"
    "t\"\216\002\n\023SubaccountBalanceV2\022#\n\rsubaccount_"
    "id\030\001 \001(\tR\014subaccountId\022L\n\022available_bala"
    "nces\030\002 \003(\0132\035.injective_portfolio_rpc.Coi"
    "nR\021availableBalances\022>\n\013margin_hold\030\003 \003("
    "\0132\035.injective_portfolio_rpc.CoinR\nmargin"
    "Hold\022D\n\016unrealized_pnl\030\004 \003(\0132\035.injective"
    "_portfolio_rpc.CoinR\runrealizedPnl2\220\001\n\025I"
    "njectivePortfolioRPC\022w\n\020AccountPortfolio"
    "\0220.injective_portfolio_rpc.AccountPortfo"
    "lioRequest\0321.injective_portfolio_rpc.Acc"
    "ountPortfolioResponseB\311\001\n\033com.injective_"
    "portfolio_rpcB\032InjectivePortfolioRpcProt"
    "oP\001Z\032/injective_portfolio_rpcpb\242\002\003IXX\252\002\025"
    "InjectivePortfolioRpc\312\002\025InjectivePortfol"
    "ioRpc\342\002!InjectivePortfolioRpc\\GPBMetadat"
    "a\352\002\025InjectivePortfolioRpcb\006proto3"
};
static ::absl::once_flag descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto = {
    false,
    false,
    1153,
    descriptor_table_protodef_exchange_2finjective_5fportfolio_5frpc_2eproto,
    "exchange/injective_portfolio_rpc.proto",
    &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_exchange_2finjective_5fportfolio_5frpc_2eproto::offsets,
    file_level_metadata_exchange_2finjective_5fportfolio_5frpc_2eproto,
    file_level_enum_descriptors_exchange_2finjective_5fportfolio_5frpc_2eproto,
    file_level_service_descriptors_exchange_2finjective_5fportfolio_5frpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_getter() {
  return &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_2finjective_5fportfolio_5frpc_2eproto(&descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto);
namespace injective_portfolio_rpc {
// ===================================================================

class AccountPortfolioRequest::_Internal {
 public:
};

AccountPortfolioRequest::AccountPortfolioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_portfolio_rpc.AccountPortfolioRequest)
}
AccountPortfolioRequest::AccountPortfolioRequest(const AccountPortfolioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountPortfolioRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_address().empty()) {
    _this->_impl_.account_address_.Set(from._internal_account_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_portfolio_rpc.AccountPortfolioRequest)
}

inline void AccountPortfolioRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountPortfolioRequest::~AccountPortfolioRequest() {
  // @@protoc_insertion_point(destructor:injective_portfolio_rpc.AccountPortfolioRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountPortfolioRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_address_.Destroy();
}

void AccountPortfolioRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountPortfolioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_portfolio_rpc.AccountPortfolioRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountPortfolioRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_address = 1 [json_name = "accountAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_portfolio_rpc.AccountPortfolioRequest.account_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AccountPortfolioRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_portfolio_rpc.AccountPortfolioRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_address = 1 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    const std::string& _s = this->_internal_account_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_portfolio_rpc.AccountPortfolioRequest.account_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_portfolio_rpc.AccountPortfolioRequest)
  return target;
}

::size_t AccountPortfolioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_portfolio_rpc.AccountPortfolioRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_address = 1 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountPortfolioRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountPortfolioRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountPortfolioRequest::GetClassData() const { return &_class_data_; }


void AccountPortfolioRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountPortfolioRequest*>(&to_msg);
  auto& from = static_cast<const AccountPortfolioRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_portfolio_rpc.AccountPortfolioRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_address().empty()) {
    _this->_internal_set_account_address(from._internal_account_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountPortfolioRequest::CopyFrom(const AccountPortfolioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_portfolio_rpc.AccountPortfolioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountPortfolioRequest::IsInitialized() const {
  return true;
}

void AccountPortfolioRequest::InternalSwap(AccountPortfolioRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_address_, lhs_arena,
                                       &other->_impl_.account_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountPortfolioRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fportfolio_5frpc_2eproto[0]);
}
// ===================================================================

class AccountPortfolioResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountPortfolioResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AccountPortfolioResponse, _impl_._has_bits_);
  static const ::injective_portfolio_rpc::Portfolio& portfolio(const AccountPortfolioResponse* msg);
  static void set_has_portfolio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_portfolio_rpc::Portfolio&
AccountPortfolioResponse::_Internal::portfolio(const AccountPortfolioResponse* msg) {
  return *msg->_impl_.portfolio_;
}
AccountPortfolioResponse::AccountPortfolioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_portfolio_rpc.AccountPortfolioResponse)
}
AccountPortfolioResponse::AccountPortfolioResponse(const AccountPortfolioResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountPortfolioResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.portfolio_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.portfolio_ = new ::injective_portfolio_rpc::Portfolio(*from._impl_.portfolio_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_portfolio_rpc.AccountPortfolioResponse)
}

inline void AccountPortfolioResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.portfolio_){nullptr}
  };
}

AccountPortfolioResponse::~AccountPortfolioResponse() {
  // @@protoc_insertion_point(destructor:injective_portfolio_rpc.AccountPortfolioResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountPortfolioResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.portfolio_;
}

void AccountPortfolioResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountPortfolioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_portfolio_rpc.AccountPortfolioResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.portfolio_ != nullptr);
    _impl_.portfolio_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountPortfolioResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_portfolio_rpc.Portfolio portfolio = 1 [json_name = "portfolio"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_portfolio(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AccountPortfolioResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_portfolio_rpc.AccountPortfolioResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_portfolio_rpc.Portfolio portfolio = 1 [json_name = "portfolio"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::portfolio(this),
        _Internal::portfolio(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_portfolio_rpc.AccountPortfolioResponse)
  return target;
}

::size_t AccountPortfolioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_portfolio_rpc.AccountPortfolioResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective_portfolio_rpc.Portfolio portfolio = 1 [json_name = "portfolio"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.portfolio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountPortfolioResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountPortfolioResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountPortfolioResponse::GetClassData() const { return &_class_data_; }


void AccountPortfolioResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountPortfolioResponse*>(&to_msg);
  auto& from = static_cast<const AccountPortfolioResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_portfolio_rpc.AccountPortfolioResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_portfolio()->::injective_portfolio_rpc::Portfolio::MergeFrom(
        from._internal_portfolio());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountPortfolioResponse::CopyFrom(const AccountPortfolioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_portfolio_rpc.AccountPortfolioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountPortfolioResponse::IsInitialized() const {
  return true;
}

void AccountPortfolioResponse::InternalSwap(AccountPortfolioResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.portfolio_, other->_impl_.portfolio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountPortfolioResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fportfolio_5frpc_2eproto[1]);
}
// ===================================================================

class Portfolio::_Internal {
 public:
};

Portfolio::Portfolio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_portfolio_rpc.Portfolio)
}
Portfolio::Portfolio(const Portfolio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Portfolio* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bank_balances_){from._impl_.bank_balances_}
    , decltype(_impl_.subaccount_balances_){from._impl_.subaccount_balances_}
    , decltype(_impl_.account_address_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_address().empty()) {
    _this->_impl_.account_address_.Set(from._internal_account_address(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_portfolio_rpc.Portfolio)
}

inline void Portfolio::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bank_balances_){arena}
    , decltype(_impl_.subaccount_balances_){arena}
    , decltype(_impl_.account_address_) {}

    , decltype(_impl_.denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Portfolio::~Portfolio() {
  // @@protoc_insertion_point(destructor:injective_portfolio_rpc.Portfolio)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Portfolio::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_bank_balances()->~RepeatedPtrField();
  _internal_mutable_subaccount_balances()->~RepeatedPtrField();
  _impl_.account_address_.Destroy();
  _impl_.denom_.Destroy();
}

void Portfolio::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Portfolio::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_portfolio_rpc.Portfolio)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_bank_balances()->Clear();
  _internal_mutable_subaccount_balances()->Clear();
  _impl_.account_address_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Portfolio::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_address = 1 [json_name = "accountAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_portfolio_rpc.Portfolio.account_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 2 [json_name = "denom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_portfolio_rpc.Portfolio.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_portfolio_rpc.Coin bank_balances = 3 [json_name = "bankBalances"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bank_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_portfolio_rpc.SubaccountBalanceV2 subaccount_balances = 4 [json_name = "subaccountBalances"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subaccount_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Portfolio::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_portfolio_rpc.Portfolio)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_address = 1 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    const std::string& _s = this->_internal_account_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_portfolio_rpc.Portfolio.account_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_portfolio_rpc.Portfolio.denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .injective_portfolio_rpc.Coin bank_balances = 3 [json_name = "bankBalances"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bank_balances_size()); i < n; i++) {
    const auto& repfield = this->_internal_bank_balances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective_portfolio_rpc.SubaccountBalanceV2 subaccount_balances = 4 [json_name = "subaccountBalances"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subaccount_balances_size()); i < n; i++) {
    const auto& repfield = this->_internal_subaccount_balances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_portfolio_rpc.Portfolio)
  return target;
}

::size_t Portfolio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_portfolio_rpc.Portfolio)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_portfolio_rpc.Coin bank_balances = 3 [json_name = "bankBalances"];
  total_size += 1UL * this->_internal_bank_balances_size();
  for (const auto& msg : this->_internal_bank_balances()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective_portfolio_rpc.SubaccountBalanceV2 subaccount_balances = 4 [json_name = "subaccountBalances"];
  total_size += 1UL * this->_internal_subaccount_balances_size();
  for (const auto& msg : this->_internal_subaccount_balances()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string account_address = 1 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_address());
  }

  // string denom = 2 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Portfolio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Portfolio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Portfolio::GetClassData() const { return &_class_data_; }


void Portfolio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Portfolio*>(&to_msg);
  auto& from = static_cast<const Portfolio&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_portfolio_rpc.Portfolio)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bank_balances()->MergeFrom(from._internal_bank_balances());
  _this->_internal_mutable_subaccount_balances()->MergeFrom(from._internal_subaccount_balances());
  if (!from._internal_account_address().empty()) {
    _this->_internal_set_account_address(from._internal_account_address());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Portfolio::CopyFrom(const Portfolio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_portfolio_rpc.Portfolio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Portfolio::IsInitialized() const {
  return true;
}

void Portfolio::InternalSwap(Portfolio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_bank_balances()->InternalSwap(other->_internal_mutable_bank_balances());
  _internal_mutable_subaccount_balances()->InternalSwap(other->_internal_mutable_subaccount_balances());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_address_, lhs_arena,
                                       &other->_impl_.account_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Portfolio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fportfolio_5frpc_2eproto[2]);
}
// ===================================================================

class Coin::_Internal {
 public:
};

Coin::Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_portfolio_rpc.Coin)
}
Coin::Coin(const Coin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Coin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_portfolio_rpc.Coin)
}

inline void Coin::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Coin::~Coin() {
  // @@protoc_insertion_point(destructor:injective_portfolio_rpc.Coin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Coin::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  _impl_.amount_.Destroy();
}

void Coin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Coin::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_portfolio_rpc.Coin)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_portfolio_rpc.Coin.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_portfolio_rpc.Coin.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Coin::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_portfolio_rpc.Coin)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_portfolio_rpc.Coin.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_portfolio_rpc.Coin.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_portfolio_rpc.Coin)
  return target;
}

::size_t Coin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_portfolio_rpc.Coin)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Coin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coin::GetClassData() const { return &_class_data_; }


void Coin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Coin*>(&to_msg);
  auto& from = static_cast<const Coin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_portfolio_rpc.Coin)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coin::CopyFrom(const Coin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_portfolio_rpc.Coin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coin::IsInitialized() const {
  return true;
}

void Coin::InternalSwap(Coin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Coin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fportfolio_5frpc_2eproto[3]);
}
// ===================================================================

class SubaccountBalanceV2::_Internal {
 public:
};

SubaccountBalanceV2::SubaccountBalanceV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_portfolio_rpc.SubaccountBalanceV2)
}
SubaccountBalanceV2::SubaccountBalanceV2(const SubaccountBalanceV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubaccountBalanceV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.available_balances_){from._impl_.available_balances_}
    , decltype(_impl_.margin_hold_){from._impl_.margin_hold_}
    , decltype(_impl_.unrealized_pnl_){from._impl_.unrealized_pnl_}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_portfolio_rpc.SubaccountBalanceV2)
}

inline void SubaccountBalanceV2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.available_balances_){arena}
    , decltype(_impl_.margin_hold_){arena}
    , decltype(_impl_.unrealized_pnl_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubaccountBalanceV2::~SubaccountBalanceV2() {
  // @@protoc_insertion_point(destructor:injective_portfolio_rpc.SubaccountBalanceV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountBalanceV2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_available_balances()->~RepeatedPtrField();
  _internal_mutable_margin_hold()->~RepeatedPtrField();
  _internal_mutable_unrealized_pnl()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
}

void SubaccountBalanceV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountBalanceV2::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_portfolio_rpc.SubaccountBalanceV2)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_available_balances()->Clear();
  _internal_mutable_margin_hold()->Clear();
  _internal_mutable_unrealized_pnl()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountBalanceV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_portfolio_rpc.SubaccountBalanceV2.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_portfolio_rpc.Coin available_balances = 2 [json_name = "availableBalances"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_available_balances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_portfolio_rpc.Coin margin_hold = 3 [json_name = "marginHold"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_margin_hold(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_portfolio_rpc.Coin unrealized_pnl = 4 [json_name = "unrealizedPnl"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unrealized_pnl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubaccountBalanceV2::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_portfolio_rpc.SubaccountBalanceV2)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_portfolio_rpc.SubaccountBalanceV2.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .injective_portfolio_rpc.Coin available_balances = 2 [json_name = "availableBalances"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_available_balances_size()); i < n; i++) {
    const auto& repfield = this->_internal_available_balances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective_portfolio_rpc.Coin margin_hold = 3 [json_name = "marginHold"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_margin_hold_size()); i < n; i++) {
    const auto& repfield = this->_internal_margin_hold(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective_portfolio_rpc.Coin unrealized_pnl = 4 [json_name = "unrealizedPnl"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unrealized_pnl_size()); i < n; i++) {
    const auto& repfield = this->_internal_unrealized_pnl(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_portfolio_rpc.SubaccountBalanceV2)
  return target;
}

::size_t SubaccountBalanceV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_portfolio_rpc.SubaccountBalanceV2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_portfolio_rpc.Coin available_balances = 2 [json_name = "availableBalances"];
  total_size += 1UL * this->_internal_available_balances_size();
  for (const auto& msg : this->_internal_available_balances()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective_portfolio_rpc.Coin margin_hold = 3 [json_name = "marginHold"];
  total_size += 1UL * this->_internal_margin_hold_size();
  for (const auto& msg : this->_internal_margin_hold()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective_portfolio_rpc.Coin unrealized_pnl = 4 [json_name = "unrealizedPnl"];
  total_size += 1UL * this->_internal_unrealized_pnl_size();
  for (const auto& msg : this->_internal_unrealized_pnl()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountBalanceV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountBalanceV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountBalanceV2::GetClassData() const { return &_class_data_; }


void SubaccountBalanceV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountBalanceV2*>(&to_msg);
  auto& from = static_cast<const SubaccountBalanceV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_portfolio_rpc.SubaccountBalanceV2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_available_balances()->MergeFrom(from._internal_available_balances());
  _this->_internal_mutable_margin_hold()->MergeFrom(from._internal_margin_hold());
  _this->_internal_mutable_unrealized_pnl()->MergeFrom(from._internal_unrealized_pnl());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountBalanceV2::CopyFrom(const SubaccountBalanceV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_portfolio_rpc.SubaccountBalanceV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountBalanceV2::IsInitialized() const {
  return true;
}

void SubaccountBalanceV2::InternalSwap(SubaccountBalanceV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_available_balances()->InternalSwap(other->_internal_mutable_available_balances());
  _internal_mutable_margin_hold()->InternalSwap(other->_internal_mutable_margin_hold());
  _internal_mutable_unrealized_pnl()->InternalSwap(other->_internal_mutable_unrealized_pnl());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountBalanceV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fportfolio_5frpc_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_portfolio_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective_portfolio_rpc::AccountPortfolioRequest*
Arena::CreateMaybeMessage< ::injective_portfolio_rpc::AccountPortfolioRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_portfolio_rpc::AccountPortfolioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_portfolio_rpc::AccountPortfolioResponse*
Arena::CreateMaybeMessage< ::injective_portfolio_rpc::AccountPortfolioResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_portfolio_rpc::AccountPortfolioResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_portfolio_rpc::Portfolio*
Arena::CreateMaybeMessage< ::injective_portfolio_rpc::Portfolio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_portfolio_rpc::Portfolio >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_portfolio_rpc::Coin*
Arena::CreateMaybeMessage< ::injective_portfolio_rpc::Coin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_portfolio_rpc::Coin >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_portfolio_rpc::SubaccountBalanceV2*
Arena::CreateMaybeMessage< ::injective_portfolio_rpc::SubaccountBalanceV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_portfolio_rpc::SubaccountBalanceV2 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_explorer_rpc.proto
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveExplorerRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#ifndef GRPC_exchange_2finjective_5fexplorer_5frpc_2eproto__INCLUDED
#define GRPC_exchange_2finjective_5fexplorer_5frpc_2eproto__INCLUDED

#include "exchange/injective_explorer_rpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective_explorer_rpc {

// ExplorerAPI implements explorer data API for e.g. Blockchain Explorer
class InjectiveExplorerRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "injective_explorer_rpc.InjectiveExplorerRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetAccountTxs returns tranctions involving in an account based upon params.
    virtual ::grpc::Status GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::injective_explorer_rpc::GetAccountTxsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetAccountTxsResponse>> AsyncGetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetAccountTxsResponse>>(AsyncGetAccountTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetAccountTxsResponse>> PrepareAsyncGetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetAccountTxsResponse>>(PrepareAsyncGetAccountTxsRaw(context, request, cq));
    }
    // GetContractTxs returns contract-related transactions
    virtual ::grpc::Status GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::injective_explorer_rpc::GetContractTxsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetContractTxsResponse>> AsyncGetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetContractTxsResponse>>(AsyncGetContractTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetContractTxsResponse>> PrepareAsyncGetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetContractTxsResponse>>(PrepareAsyncGetContractTxsRaw(context, request, cq));
    }
    // GetBlocks returns blocks based upon the request params
    virtual ::grpc::Status GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::injective_explorer_rpc::GetBlocksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlocksResponse>> AsyncGetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlocksResponse>>(AsyncGetBlocksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlocksResponse>> PrepareAsyncGetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlocksResponse>>(PrepareAsyncGetBlocksRaw(context, request, cq));
    }
    // GetBlock returns block based upon the height or hash
    virtual ::grpc::Status GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::injective_explorer_rpc::GetBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlockResponse>> AsyncGetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlockResponse>>(AsyncGetBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlockResponse>> PrepareAsyncGetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlockResponse>>(PrepareAsyncGetBlockRaw(context, request, cq));
    }
    // GetValidators returns validators on the active chain
    virtual ::grpc::Status GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::injective_explorer_rpc::GetValidatorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorsResponse>> AsyncGetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorsResponse>>(AsyncGetValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorsResponse>> PrepareAsyncGetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorsResponse>>(PrepareAsyncGetValidatorsRaw(context, request, cq));
    }
    // GetValidator returns validator information on the active chain
    virtual ::grpc::Status GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::injective_explorer_rpc::GetValidatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorResponse>> AsyncGetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorResponse>>(AsyncGetValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorResponse>> PrepareAsyncGetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorResponse>>(PrepareAsyncGetValidatorRaw(context, request, cq));
    }
    // GetValidatorUptime returns validator uptime information on the active chain
    virtual ::grpc::Status GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorUptimeResponse>> AsyncGetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorUptimeResponse>>(AsyncGetValidatorUptimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorUptimeResponse>> PrepareAsyncGetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorUptimeResponse>>(PrepareAsyncGetValidatorUptimeRaw(context, request, cq));
    }
    // GetTxs returns transactions based upon the request params
    virtual ::grpc::Status GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::injective_explorer_rpc::GetTxsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxsResponse>> AsyncGetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxsResponse>>(AsyncGetTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxsResponse>> PrepareAsyncGetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxsResponse>>(PrepareAsyncGetTxsRaw(context, request, cq));
    }
    // GetTxByTxHash returns certain transaction information by its tx hash.
    virtual ::grpc::Status GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::injective_explorer_rpc::GetTxByTxHashResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxByTxHashResponse>> AsyncGetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxByTxHashResponse>>(AsyncGetTxByTxHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxByTxHashResponse>> PrepareAsyncGetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxByTxHashResponse>>(PrepareAsyncGetTxByTxHashRaw(context, request, cq));
    }
    // GetPeggyDepositTxs returns the peggy deposit transactions based upon the
    // request params
    virtual ::grpc::Status GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>> AsyncGetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>>(AsyncGetPeggyDepositTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>> PrepareAsyncGetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>>(PrepareAsyncGetPeggyDepositTxsRaw(context, request, cq));
    }
    // GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
    // the request params
    virtual ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>> AsyncGetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>>(AsyncGetPeggyWithdrawalTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>> PrepareAsyncGetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>>(PrepareAsyncGetPeggyWithdrawalTxsRaw(context, request, cq));
    }
    // GetIBCTransferTxs returns the ibc transfer transactions based upon the
    // request params
    virtual ::grpc::Status GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetIBCTransferTxsResponse>> AsyncGetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetIBCTransferTxsResponse>>(AsyncGetIBCTransferTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetIBCTransferTxsResponse>> PrepareAsyncGetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetIBCTransferTxsResponse>>(PrepareAsyncGetIBCTransferTxsRaw(context, request, cq));
    }
    // GetWasmCodes lists all stored code
    virtual ::grpc::Status GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::injective_explorer_rpc::GetWasmCodesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodesResponse>> AsyncGetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodesResponse>>(AsyncGetWasmCodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodesResponse>> PrepareAsyncGetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodesResponse>>(PrepareAsyncGetWasmCodesRaw(context, request, cq));
    }
    // GetWasmCodeById list cosmwasm code infor by ID
    virtual ::grpc::Status GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodeByIDResponse>> AsyncGetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodeByIDResponse>>(AsyncGetWasmCodeByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodeByIDResponse>> PrepareAsyncGetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodeByIDResponse>>(PrepareAsyncGetWasmCodeByIDRaw(context, request, cq));
    }
    // GetWasmContracts lists all contracts
    virtual ::grpc::Status GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::injective_explorer_rpc::GetWasmContractsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractsResponse>> AsyncGetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractsResponse>>(AsyncGetWasmContractsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractsResponse>> PrepareAsyncGetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractsResponse>>(PrepareAsyncGetWasmContractsRaw(context, request, cq));
    }
    // GetWasmContractByAddress list cosmwasm contract info by its address
    virtual ::grpc::Status GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractByAddressResponse>> AsyncGetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractByAddressResponse>>(AsyncGetWasmContractByAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractByAddressResponse>> PrepareAsyncGetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractByAddressResponse>>(PrepareAsyncGetWasmContractByAddressRaw(context, request, cq));
    }
    // GetCw20Balance lists all cw20 balances of an injective account
    virtual ::grpc::Status GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::injective_explorer_rpc::GetCw20BalanceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetCw20BalanceResponse>> AsyncGetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetCw20BalanceResponse>>(AsyncGetCw20BalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetCw20BalanceResponse>> PrepareAsyncGetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetCw20BalanceResponse>>(PrepareAsyncGetCw20BalanceRaw(context, request, cq));
    }
    // Request relayers infos by marketIDs. If no ids are provided, all market with
    // associated relayers are returned
    virtual ::grpc::Status Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::injective_explorer_rpc::RelayersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::RelayersResponse>> AsyncRelayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::RelayersResponse>>(AsyncRelayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::RelayersResponse>> PrepareAsyncRelayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::RelayersResponse>>(PrepareAsyncRelayersRaw(context, request, cq));
    }
    // StreamTxs returns transactions based upon the request params
    std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>> StreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>>(StreamTxsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>> AsyncStreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>>(AsyncStreamTxsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>> PrepareAsyncStreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>>(PrepareAsyncStreamTxsRaw(context, request, cq));
    }
    // StreamBlocks returns the latest blocks
    std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>> StreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>>(StreamBlocksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>> AsyncStreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>>(AsyncStreamBlocksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>> PrepareAsyncStreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>>(PrepareAsyncStreamBlocksRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // GetAccountTxs returns tranctions involving in an account based upon params.
      virtual void GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetContractTxs returns contract-related transactions
      virtual void GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetBlocks returns blocks based upon the request params
      virtual void GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetBlock returns block based upon the height or hash
      virtual void GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetValidators returns validators on the active chain
      virtual void GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetValidator returns validator information on the active chain
      virtual void GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetValidatorUptime returns validator uptime information on the active chain
      virtual void GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetTxs returns transactions based upon the request params
      virtual void GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetTxByTxHash returns certain transaction information by its tx hash.
      virtual void GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetPeggyDepositTxs returns the peggy deposit transactions based upon the
      // request params
      virtual void GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
      // the request params
      virtual void GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetIBCTransferTxs returns the ibc transfer transactions based upon the
      // request params
      virtual void GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetWasmCodes lists all stored code
      virtual void GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetWasmCodeById list cosmwasm code infor by ID
      virtual void GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetWasmContracts lists all contracts
      virtual void GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetWasmContractByAddress list cosmwasm contract info by its address
      virtual void GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetCw20Balance lists all cw20 balances of an injective account
      virtual void GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Request relayers infos by marketIDs. If no ids are provided, all market with
      // associated relayers are returned
      virtual void Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // StreamTxs returns transactions based upon the request params
      virtual void StreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest* request, ::grpc::ClientReadReactor< ::injective_explorer_rpc::StreamTxsResponse>* reactor) = 0;
      // StreamBlocks returns the latest blocks
      virtual void StreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest* request, ::grpc::ClientReadReactor< ::injective_explorer_rpc::StreamBlocksResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetAccountTxsResponse>* AsyncGetAccountTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetAccountTxsResponse>* PrepareAsyncGetAccountTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetContractTxsResponse>* AsyncGetContractTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetContractTxsResponse>* PrepareAsyncGetContractTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlocksResponse>* AsyncGetBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlocksResponse>* PrepareAsyncGetBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlockResponse>* AsyncGetBlockRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetBlockResponse>* PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorsResponse>* AsyncGetValidatorsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorsResponse>* PrepareAsyncGetValidatorsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorResponse>* AsyncGetValidatorRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorResponse>* PrepareAsyncGetValidatorRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorUptimeResponse>* AsyncGetValidatorUptimeRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetValidatorUptimeResponse>* PrepareAsyncGetValidatorUptimeRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxsResponse>* AsyncGetTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxsResponse>* PrepareAsyncGetTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxByTxHashResponse>* AsyncGetTxByTxHashRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetTxByTxHashResponse>* PrepareAsyncGetTxByTxHashRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* AsyncGetPeggyDepositTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* PrepareAsyncGetPeggyDepositTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* AsyncGetPeggyWithdrawalTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* PrepareAsyncGetPeggyWithdrawalTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetIBCTransferTxsResponse>* AsyncGetIBCTransferTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetIBCTransferTxsResponse>* PrepareAsyncGetIBCTransferTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodesResponse>* AsyncGetWasmCodesRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodesResponse>* PrepareAsyncGetWasmCodesRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodeByIDResponse>* AsyncGetWasmCodeByIDRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmCodeByIDResponse>* PrepareAsyncGetWasmCodeByIDRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractsResponse>* AsyncGetWasmContractsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractsResponse>* PrepareAsyncGetWasmContractsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractByAddressResponse>* AsyncGetWasmContractByAddressRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetWasmContractByAddressResponse>* PrepareAsyncGetWasmContractByAddressRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetCw20BalanceResponse>* AsyncGetCw20BalanceRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::GetCw20BalanceResponse>* PrepareAsyncGetCw20BalanceRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::RelayersResponse>* AsyncRelayersRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_explorer_rpc::RelayersResponse>* PrepareAsyncRelayersRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>* StreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>* AsyncStreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamTxsResponse>* PrepareAsyncStreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>* StreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>* AsyncStreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_explorer_rpc::StreamBlocksResponse>* PrepareAsyncStreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::injective_explorer_rpc::GetAccountTxsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetAccountTxsResponse>> AsyncGetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetAccountTxsResponse>>(AsyncGetAccountTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetAccountTxsResponse>> PrepareAsyncGetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetAccountTxsResponse>>(PrepareAsyncGetAccountTxsRaw(context, request, cq));
    }
    ::grpc::Status GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::injective_explorer_rpc::GetContractTxsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetContractTxsResponse>> AsyncGetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetContractTxsResponse>>(AsyncGetContractTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetContractTxsResponse>> PrepareAsyncGetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetContractTxsResponse>>(PrepareAsyncGetContractTxsRaw(context, request, cq));
    }
    ::grpc::Status GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::injective_explorer_rpc::GetBlocksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlocksResponse>> AsyncGetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlocksResponse>>(AsyncGetBlocksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlocksResponse>> PrepareAsyncGetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlocksResponse>>(PrepareAsyncGetBlocksRaw(context, request, cq));
    }
    ::grpc::Status GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::injective_explorer_rpc::GetBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlockResponse>> AsyncGetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlockResponse>>(AsyncGetBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlockResponse>> PrepareAsyncGetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlockResponse>>(PrepareAsyncGetBlockRaw(context, request, cq));
    }
    ::grpc::Status GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::injective_explorer_rpc::GetValidatorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorsResponse>> AsyncGetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorsResponse>>(AsyncGetValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorsResponse>> PrepareAsyncGetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorsResponse>>(PrepareAsyncGetValidatorsRaw(context, request, cq));
    }
    ::grpc::Status GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::injective_explorer_rpc::GetValidatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorResponse>> AsyncGetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorResponse>>(AsyncGetValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorResponse>> PrepareAsyncGetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorResponse>>(PrepareAsyncGetValidatorRaw(context, request, cq));
    }
    ::grpc::Status GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorUptimeResponse>> AsyncGetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorUptimeResponse>>(AsyncGetValidatorUptimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorUptimeResponse>> PrepareAsyncGetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorUptimeResponse>>(PrepareAsyncGetValidatorUptimeRaw(context, request, cq));
    }
    ::grpc::Status GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::injective_explorer_rpc::GetTxsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxsResponse>> AsyncGetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxsResponse>>(AsyncGetTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxsResponse>> PrepareAsyncGetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxsResponse>>(PrepareAsyncGetTxsRaw(context, request, cq));
    }
    ::grpc::Status GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::injective_explorer_rpc::GetTxByTxHashResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxByTxHashResponse>> AsyncGetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxByTxHashResponse>>(AsyncGetTxByTxHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxByTxHashResponse>> PrepareAsyncGetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxByTxHashResponse>>(PrepareAsyncGetTxByTxHashRaw(context, request, cq));
    }
    ::grpc::Status GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>> AsyncGetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>>(AsyncGetPeggyDepositTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>> PrepareAsyncGetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>>(PrepareAsyncGetPeggyDepositTxsRaw(context, request, cq));
    }
    ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>> AsyncGetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>>(AsyncGetPeggyWithdrawalTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>> PrepareAsyncGetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>>(PrepareAsyncGetPeggyWithdrawalTxsRaw(context, request, cq));
    }
    ::grpc::Status GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetIBCTransferTxsResponse>> AsyncGetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetIBCTransferTxsResponse>>(AsyncGetIBCTransferTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetIBCTransferTxsResponse>> PrepareAsyncGetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetIBCTransferTxsResponse>>(PrepareAsyncGetIBCTransferTxsRaw(context, request, cq));
    }
    ::grpc::Status GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::injective_explorer_rpc::GetWasmCodesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodesResponse>> AsyncGetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodesResponse>>(AsyncGetWasmCodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodesResponse>> PrepareAsyncGetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodesResponse>>(PrepareAsyncGetWasmCodesRaw(context, request, cq));
    }
    ::grpc::Status GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodeByIDResponse>> AsyncGetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodeByIDResponse>>(AsyncGetWasmCodeByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodeByIDResponse>> PrepareAsyncGetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodeByIDResponse>>(PrepareAsyncGetWasmCodeByIDRaw(context, request, cq));
    }
    ::grpc::Status GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::injective_explorer_rpc::GetWasmContractsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractsResponse>> AsyncGetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractsResponse>>(AsyncGetWasmContractsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractsResponse>> PrepareAsyncGetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractsResponse>>(PrepareAsyncGetWasmContractsRaw(context, request, cq));
    }
    ::grpc::Status GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractByAddressResponse>> AsyncGetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractByAddressResponse>>(AsyncGetWasmContractByAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractByAddressResponse>> PrepareAsyncGetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractByAddressResponse>>(PrepareAsyncGetWasmContractByAddressRaw(context, request, cq));
    }
    ::grpc::Status GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::injective_explorer_rpc::GetCw20BalanceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetCw20BalanceResponse>> AsyncGetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetCw20BalanceResponse>>(AsyncGetCw20BalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetCw20BalanceResponse>> PrepareAsyncGetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetCw20BalanceResponse>>(PrepareAsyncGetCw20BalanceRaw(context, request, cq));
    }
    ::grpc::Status Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::injective_explorer_rpc::RelayersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::RelayersResponse>> AsyncRelayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::RelayersResponse>>(AsyncRelayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::RelayersResponse>> PrepareAsyncRelayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::RelayersResponse>>(PrepareAsyncRelayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::injective_explorer_rpc::StreamTxsResponse>> StreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::injective_explorer_rpc::StreamTxsResponse>>(StreamTxsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamTxsResponse>> AsyncStreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamTxsResponse>>(AsyncStreamTxsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamTxsResponse>> PrepareAsyncStreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamTxsResponse>>(PrepareAsyncStreamTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::injective_explorer_rpc::StreamBlocksResponse>> StreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::injective_explorer_rpc::StreamBlocksResponse>>(StreamBlocksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamBlocksResponse>> AsyncStreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamBlocksResponse>>(AsyncStreamBlocksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamBlocksResponse>> PrepareAsyncStreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamBlocksResponse>>(PrepareAsyncStreamBlocksRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAccountTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetContractTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlock(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetValidators(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetValidator(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetValidatorUptime(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTxByTxHash(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPeggyDepositTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPeggyWithdrawalTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetIBCTransferTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWasmCodes(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWasmCodeByID(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWasmContracts(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWasmContractByAddress(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCw20Balance(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response, std::function<void(::grpc::Status)>) override;
      void Relayers(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamTxs(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest* request, ::grpc::ClientReadReactor< ::injective_explorer_rpc::StreamTxsResponse>* reactor) override;
      void StreamBlocks(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest* request, ::grpc::ClientReadReactor< ::injective_explorer_rpc::StreamBlocksResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetAccountTxsResponse>* AsyncGetAccountTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetAccountTxsResponse>* PrepareAsyncGetAccountTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetContractTxsResponse>* AsyncGetContractTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetContractTxsResponse>* PrepareAsyncGetContractTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetContractTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlocksResponse>* AsyncGetBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlocksResponse>* PrepareAsyncGetBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlockResponse>* AsyncGetBlockRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetBlockResponse>* PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorsResponse>* AsyncGetValidatorsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorsResponse>* PrepareAsyncGetValidatorsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorResponse>* AsyncGetValidatorRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorResponse>* PrepareAsyncGetValidatorRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorUptimeResponse>* AsyncGetValidatorUptimeRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetValidatorUptimeResponse>* PrepareAsyncGetValidatorUptimeRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxsResponse>* AsyncGetTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxsResponse>* PrepareAsyncGetTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxByTxHashResponse>* AsyncGetTxByTxHashRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetTxByTxHashResponse>* PrepareAsyncGetTxByTxHashRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* AsyncGetPeggyDepositTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* PrepareAsyncGetPeggyDepositTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* AsyncGetPeggyWithdrawalTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* PrepareAsyncGetPeggyWithdrawalTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetIBCTransferTxsResponse>* AsyncGetIBCTransferTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetIBCTransferTxsResponse>* PrepareAsyncGetIBCTransferTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodesResponse>* AsyncGetWasmCodesRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodesResponse>* PrepareAsyncGetWasmCodesRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodeByIDResponse>* AsyncGetWasmCodeByIDRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmCodeByIDResponse>* PrepareAsyncGetWasmCodeByIDRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractsResponse>* AsyncGetWasmContractsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractsResponse>* PrepareAsyncGetWasmContractsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractByAddressResponse>* AsyncGetWasmContractByAddressRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetWasmContractByAddressResponse>* PrepareAsyncGetWasmContractByAddressRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetCw20BalanceResponse>* AsyncGetCw20BalanceRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::GetCw20BalanceResponse>* PrepareAsyncGetCw20BalanceRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::RelayersResponse>* AsyncRelayersRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_explorer_rpc::RelayersResponse>* PrepareAsyncRelayersRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::RelayersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::injective_explorer_rpc::StreamTxsResponse>* StreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request) override;
    ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamTxsResponse>* AsyncStreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamTxsResponse>* PrepareAsyncStreamTxsRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::injective_explorer_rpc::StreamBlocksResponse>* StreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request) override;
    ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamBlocksResponse>* AsyncStreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::injective_explorer_rpc::StreamBlocksResponse>* PrepareAsyncStreamBlocksRaw(::grpc::ClientContext* context, const ::injective_explorer_rpc::StreamBlocksRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccountTxs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetContractTxs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlocks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetValidators_;
    const ::grpc::internal::RpcMethod rpcmethod_GetValidator_;
    const ::grpc::internal::RpcMethod rpcmethod_GetValidatorUptime_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxByTxHash_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeggyDepositTxs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPeggyWithdrawalTxs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetIBCTransferTxs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWasmCodes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWasmCodeByID_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWasmContracts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWasmContractByAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCw20Balance_;
    const ::grpc::internal::RpcMethod rpcmethod_Relayers_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamTxs_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamBlocks_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetAccountTxs returns tranctions involving in an account based upon params.
    virtual ::grpc::Status GetAccountTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response);
    // GetContractTxs returns contract-related transactions
    virtual ::grpc::Status GetContractTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response);
    // GetBlocks returns blocks based upon the request params
    virtual ::grpc::Status GetBlocks(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response);
    // GetBlock returns block based upon the height or hash
    virtual ::grpc::Status GetBlock(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response);
    // GetValidators returns validators on the active chain
    virtual ::grpc::Status GetValidators(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response);
    // GetValidator returns validator information on the active chain
    virtual ::grpc::Status GetValidator(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response);
    // GetValidatorUptime returns validator uptime information on the active chain
    virtual ::grpc::Status GetValidatorUptime(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response);
    // GetTxs returns transactions based upon the request params
    virtual ::grpc::Status GetTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response);
    // GetTxByTxHash returns certain transaction information by its tx hash.
    virtual ::grpc::Status GetTxByTxHash(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response);
    // GetPeggyDepositTxs returns the peggy deposit transactions based upon the
    // request params
    virtual ::grpc::Status GetPeggyDepositTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response);
    // GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
    // the request params
    virtual ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response);
    // GetIBCTransferTxs returns the ibc transfer transactions based upon the
    // request params
    virtual ::grpc::Status GetIBCTransferTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response);
    // GetWasmCodes lists all stored code
    virtual ::grpc::Status GetWasmCodes(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response);
    // GetWasmCodeById list cosmwasm code infor by ID
    virtual ::grpc::Status GetWasmCodeByID(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response);
    // GetWasmContracts lists all contracts
    virtual ::grpc::Status GetWasmContracts(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response);
    // GetWasmContractByAddress list cosmwasm contract info by its address
    virtual ::grpc::Status GetWasmContractByAddress(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response);
    // GetCw20Balance lists all cw20 balances of an injective account
    virtual ::grpc::Status GetCw20Balance(::grpc::ServerContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response);
    // Request relayers infos by marketIDs. If no ids are provided, all market with
    // associated relayers are returned
    virtual ::grpc::Status Relayers(::grpc::ServerContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response);
    // StreamTxs returns transactions based upon the request params
    virtual ::grpc::Status StreamTxs(::grpc::ServerContext* context, const ::injective_explorer_rpc::StreamTxsRequest* request, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamTxsResponse>* writer);
    // StreamBlocks returns the latest blocks
    virtual ::grpc::Status StreamBlocks(::grpc::ServerContext* context, const ::injective_explorer_rpc::StreamBlocksRequest* request, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamBlocksResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccountTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccountTxs() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAccountTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetAccountTxsRequest* /*request*/, ::injective_explorer_rpc::GetAccountTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountTxs(::grpc::ServerContext* context, ::injective_explorer_rpc::GetAccountTxsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetAccountTxsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetContractTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetContractTxs() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetContractTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetContractTxsRequest* /*request*/, ::injective_explorer_rpc::GetContractTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContractTxs(::grpc::ServerContext* context, ::injective_explorer_rpc::GetContractTxsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetContractTxsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlocks() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlocksRequest* /*request*/, ::injective_explorer_rpc::GetBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlocks(::grpc::ServerContext* context, ::injective_explorer_rpc::GetBlocksRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetBlocksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlock() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlockRequest* /*request*/, ::injective_explorer_rpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlock(::grpc::ServerContext* context, ::injective_explorer_rpc::GetBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetValidators() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidators(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorsRequest* /*request*/, ::injective_explorer_rpc::GetValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValidators(::grpc::ServerContext* context, ::injective_explorer_rpc::GetValidatorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetValidatorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetValidator() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidator(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorRequest* /*request*/, ::injective_explorer_rpc::GetValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValidator(::grpc::ServerContext* context, ::injective_explorer_rpc::GetValidatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetValidatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetValidatorUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetValidatorUptime() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetValidatorUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidatorUptime(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorUptimeRequest* /*request*/, ::injective_explorer_rpc::GetValidatorUptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValidatorUptime(::grpc::ServerContext* context, ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetValidatorUptimeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTxs() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxsRequest* /*request*/, ::injective_explorer_rpc::GetTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxs(::grpc::ServerContext* context, ::injective_explorer_rpc::GetTxsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetTxsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxByTxHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTxByTxHash() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetTxByTxHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxByTxHash(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxByTxHashRequest* /*request*/, ::injective_explorer_rpc::GetTxByTxHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxByTxHash(::grpc::ServerContext* context, ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetTxByTxHashResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeggyDepositTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPeggyDepositTxs() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetPeggyDepositTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyDepositTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeggyDepositTxs(::grpc::ServerContext* context, ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPeggyWithdrawalTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPeggyWithdrawalTxs() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetPeggyWithdrawalTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeggyWithdrawalTxs(::grpc::ServerContext* context, ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetIBCTransferTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetIBCTransferTxs() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetIBCTransferTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIBCTransferTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* /*request*/, ::injective_explorer_rpc::GetIBCTransferTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIBCTransferTxs(::grpc::ServerContext* context, ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetIBCTransferTxsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWasmCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWasmCodes() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetWasmCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodes(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodesRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWasmCodes(::grpc::ServerContext* context, ::injective_explorer_rpc::GetWasmCodesRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetWasmCodesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWasmCodeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWasmCodeByID() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetWasmCodeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodeByID(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodeByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWasmCodeByID(::grpc::ServerContext* context, ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetWasmCodeByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWasmContracts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWasmContracts() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetWasmContracts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContracts(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractsRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWasmContracts(::grpc::ServerContext* context, ::injective_explorer_rpc::GetWasmContractsRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetWasmContractsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWasmContractByAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWasmContractByAddress() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetWasmContractByAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContractByAddress(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractByAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWasmContractByAddress(::grpc::ServerContext* context, ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetWasmContractByAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCw20Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCw20Balance() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetCw20Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCw20Balance(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetCw20BalanceRequest* /*request*/, ::injective_explorer_rpc::GetCw20BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCw20Balance(::grpc::ServerContext* context, ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::GetCw20BalanceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Relayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Relayers() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_Relayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relayers(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::RelayersRequest* /*request*/, ::injective_explorer_rpc::RelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayers(::grpc::ServerContext* context, ::injective_explorer_rpc::RelayersRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_explorer_rpc::RelayersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamTxs() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_StreamTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamTxsRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamTxsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamTxs(::grpc::ServerContext* context, ::injective_explorer_rpc::StreamTxsRequest* request, ::grpc::ServerAsyncWriter< ::injective_explorer_rpc::StreamTxsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(18, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamBlocks() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_StreamBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamBlocksRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamBlocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamBlocks(::grpc::ServerContext* context, ::injective_explorer_rpc::StreamBlocksRequest* request, ::grpc::ServerAsyncWriter< ::injective_explorer_rpc::StreamBlocksResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(19, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAccountTxs<WithAsyncMethod_GetContractTxs<WithAsyncMethod_GetBlocks<WithAsyncMethod_GetBlock<WithAsyncMethod_GetValidators<WithAsyncMethod_GetValidator<WithAsyncMethod_GetValidatorUptime<WithAsyncMethod_GetTxs<WithAsyncMethod_GetTxByTxHash<WithAsyncMethod_GetPeggyDepositTxs<WithAsyncMethod_GetPeggyWithdrawalTxs<WithAsyncMethod_GetIBCTransferTxs<WithAsyncMethod_GetWasmCodes<WithAsyncMethod_GetWasmCodeByID<WithAsyncMethod_GetWasmContracts<WithAsyncMethod_GetWasmContractByAddress<WithAsyncMethod_GetCw20Balance<WithAsyncMethod_Relayers<WithAsyncMethod_StreamTxs<WithAsyncMethod_StreamBlocks<Service > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAccountTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccountTxs() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetAccountTxsRequest, ::injective_explorer_rpc::GetAccountTxsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetAccountTxsRequest* request, ::injective_explorer_rpc::GetAccountTxsResponse* response) { return this->GetAccountTxs(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccountTxs(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetAccountTxsRequest, ::injective_explorer_rpc::GetAccountTxsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetAccountTxsRequest, ::injective_explorer_rpc::GetAccountTxsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccountTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetAccountTxsRequest* /*request*/, ::injective_explorer_rpc::GetAccountTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetAccountTxsRequest* /*request*/, ::injective_explorer_rpc::GetAccountTxsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetContractTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetContractTxs() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetContractTxsRequest, ::injective_explorer_rpc::GetContractTxsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetContractTxsRequest* request, ::injective_explorer_rpc::GetContractTxsResponse* response) { return this->GetContractTxs(context, request, response); }));}
    void SetMessageAllocatorFor_GetContractTxs(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetContractTxsRequest, ::injective_explorer_rpc::GetContractTxsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetContractTxsRequest, ::injective_explorer_rpc::GetContractTxsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetContractTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetContractTxsRequest* /*request*/, ::injective_explorer_rpc::GetContractTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContractTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetContractTxsRequest* /*request*/, ::injective_explorer_rpc::GetContractTxsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlocks() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetBlocksRequest, ::injective_explorer_rpc::GetBlocksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetBlocksRequest* request, ::injective_explorer_rpc::GetBlocksResponse* response) { return this->GetBlocks(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlocks(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetBlocksRequest, ::injective_explorer_rpc::GetBlocksResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetBlocksRequest, ::injective_explorer_rpc::GetBlocksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlocksRequest* /*request*/, ::injective_explorer_rpc::GetBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetBlocksRequest* /*request*/, ::injective_explorer_rpc::GetBlocksResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlock() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetBlockRequest, ::injective_explorer_rpc::GetBlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetBlockRequest* request, ::injective_explorer_rpc::GetBlockResponse* response) { return this->GetBlock(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlock(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetBlockRequest, ::injective_explorer_rpc::GetBlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetBlockRequest, ::injective_explorer_rpc::GetBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlockRequest* /*request*/, ::injective_explorer_rpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetBlockRequest* /*request*/, ::injective_explorer_rpc::GetBlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetValidators() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetValidatorsRequest, ::injective_explorer_rpc::GetValidatorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetValidatorsRequest* request, ::injective_explorer_rpc::GetValidatorsResponse* response) { return this->GetValidators(context, request, response); }));}
    void SetMessageAllocatorFor_GetValidators(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetValidatorsRequest, ::injective_explorer_rpc::GetValidatorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetValidatorsRequest, ::injective_explorer_rpc::GetValidatorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidators(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorsRequest* /*request*/, ::injective_explorer_rpc::GetValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValidators(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorsRequest* /*request*/, ::injective_explorer_rpc::GetValidatorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetValidator() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetValidatorRequest, ::injective_explorer_rpc::GetValidatorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetValidatorRequest* request, ::injective_explorer_rpc::GetValidatorResponse* response) { return this->GetValidator(context, request, response); }));}
    void SetMessageAllocatorFor_GetValidator(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetValidatorRequest, ::injective_explorer_rpc::GetValidatorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetValidatorRequest, ::injective_explorer_rpc::GetValidatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidator(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorRequest* /*request*/, ::injective_explorer_rpc::GetValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorRequest* /*request*/, ::injective_explorer_rpc::GetValidatorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetValidatorUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetValidatorUptime() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetValidatorUptimeRequest, ::injective_explorer_rpc::GetValidatorUptimeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetValidatorUptimeRequest* request, ::injective_explorer_rpc::GetValidatorUptimeResponse* response) { return this->GetValidatorUptime(context, request, response); }));}
    void SetMessageAllocatorFor_GetValidatorUptime(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetValidatorUptimeRequest, ::injective_explorer_rpc::GetValidatorUptimeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetValidatorUptimeRequest, ::injective_explorer_rpc::GetValidatorUptimeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetValidatorUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidatorUptime(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorUptimeRequest* /*request*/, ::injective_explorer_rpc::GetValidatorUptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValidatorUptime(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorUptimeRequest* /*request*/, ::injective_explorer_rpc::GetValidatorUptimeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTxs() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetTxsRequest, ::injective_explorer_rpc::GetTxsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetTxsRequest* request, ::injective_explorer_rpc::GetTxsResponse* response) { return this->GetTxs(context, request, response); }));}
    void SetMessageAllocatorFor_GetTxs(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetTxsRequest, ::injective_explorer_rpc::GetTxsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetTxsRequest, ::injective_explorer_rpc::GetTxsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxsRequest* /*request*/, ::injective_explorer_rpc::GetTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetTxsRequest* /*request*/, ::injective_explorer_rpc::GetTxsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTxByTxHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTxByTxHash() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetTxByTxHashRequest, ::injective_explorer_rpc::GetTxByTxHashResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetTxByTxHashRequest* request, ::injective_explorer_rpc::GetTxByTxHashResponse* response) { return this->GetTxByTxHash(context, request, response); }));}
    void SetMessageAllocatorFor_GetTxByTxHash(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetTxByTxHashRequest, ::injective_explorer_rpc::GetTxByTxHashResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetTxByTxHashRequest, ::injective_explorer_rpc::GetTxByTxHashResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTxByTxHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxByTxHash(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxByTxHashRequest* /*request*/, ::injective_explorer_rpc::GetTxByTxHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTxByTxHash(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetTxByTxHashRequest* /*request*/, ::injective_explorer_rpc::GetTxByTxHashResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPeggyDepositTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPeggyDepositTxs() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::injective_explorer_rpc::GetPeggyDepositTxsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* request, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* response) { return this->GetPeggyDepositTxs(context, request, response); }));}
    void SetMessageAllocatorFor_GetPeggyDepositTxs(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::injective_explorer_rpc::GetPeggyDepositTxsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPeggyDepositTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyDepositTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPeggyDepositTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPeggyWithdrawalTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPeggyWithdrawalTxs() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* request, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* response) { return this->GetPeggyWithdrawalTxs(context, request, response); }));}
    void SetMessageAllocatorFor_GetPeggyWithdrawalTxs(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPeggyWithdrawalTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPeggyWithdrawalTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetIBCTransferTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetIBCTransferTxs() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::injective_explorer_rpc::GetIBCTransferTxsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* request, ::injective_explorer_rpc::GetIBCTransferTxsResponse* response) { return this->GetIBCTransferTxs(context, request, response); }));}
    void SetMessageAllocatorFor_GetIBCTransferTxs(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::injective_explorer_rpc::GetIBCTransferTxsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::injective_explorer_rpc::GetIBCTransferTxsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetIBCTransferTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIBCTransferTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* /*request*/, ::injective_explorer_rpc::GetIBCTransferTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIBCTransferTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* /*request*/, ::injective_explorer_rpc::GetIBCTransferTxsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWasmCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWasmCodes() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetWasmCodesRequest, ::injective_explorer_rpc::GetWasmCodesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetWasmCodesRequest* request, ::injective_explorer_rpc::GetWasmCodesResponse* response) { return this->GetWasmCodes(context, request, response); }));}
    void SetMessageAllocatorFor_GetWasmCodes(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetWasmCodesRequest, ::injective_explorer_rpc::GetWasmCodesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetWasmCodesRequest, ::injective_explorer_rpc::GetWasmCodesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWasmCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodes(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodesRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWasmCodes(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodesRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWasmCodeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWasmCodeByID() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::injective_explorer_rpc::GetWasmCodeByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* request, ::injective_explorer_rpc::GetWasmCodeByIDResponse* response) { return this->GetWasmCodeByID(context, request, response); }));}
    void SetMessageAllocatorFor_GetWasmCodeByID(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::injective_explorer_rpc::GetWasmCodeByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::injective_explorer_rpc::GetWasmCodeByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWasmCodeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodeByID(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodeByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWasmCodeByID(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodeByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWasmContracts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWasmContracts() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetWasmContractsRequest, ::injective_explorer_rpc::GetWasmContractsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetWasmContractsRequest* request, ::injective_explorer_rpc::GetWasmContractsResponse* response) { return this->GetWasmContracts(context, request, response); }));}
    void SetMessageAllocatorFor_GetWasmContracts(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetWasmContractsRequest, ::injective_explorer_rpc::GetWasmContractsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetWasmContractsRequest, ::injective_explorer_rpc::GetWasmContractsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWasmContracts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContracts(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractsRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWasmContracts(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractsRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWasmContractByAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWasmContractByAddress() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::injective_explorer_rpc::GetWasmContractByAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* request, ::injective_explorer_rpc::GetWasmContractByAddressResponse* response) { return this->GetWasmContractByAddress(context, request, response); }));}
    void SetMessageAllocatorFor_GetWasmContractByAddress(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::injective_explorer_rpc::GetWasmContractByAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::injective_explorer_rpc::GetWasmContractByAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWasmContractByAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContractByAddress(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractByAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWasmContractByAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractByAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCw20Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCw20Balance() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetCw20BalanceRequest, ::injective_explorer_rpc::GetCw20BalanceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::GetCw20BalanceRequest* request, ::injective_explorer_rpc::GetCw20BalanceResponse* response) { return this->GetCw20Balance(context, request, response); }));}
    void SetMessageAllocatorFor_GetCw20Balance(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::GetCw20BalanceRequest, ::injective_explorer_rpc::GetCw20BalanceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::GetCw20BalanceRequest, ::injective_explorer_rpc::GetCw20BalanceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCw20Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCw20Balance(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetCw20BalanceRequest* /*request*/, ::injective_explorer_rpc::GetCw20BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCw20Balance(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::GetCw20BalanceRequest* /*request*/, ::injective_explorer_rpc::GetCw20BalanceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Relayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Relayers() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::RelayersRequest, ::injective_explorer_rpc::RelayersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::RelayersRequest* request, ::injective_explorer_rpc::RelayersResponse* response) { return this->Relayers(context, request, response); }));}
    void SetMessageAllocatorFor_Relayers(
        ::grpc::MessageAllocator< ::injective_explorer_rpc::RelayersRequest, ::injective_explorer_rpc::RelayersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_explorer_rpc::RelayersRequest, ::injective_explorer_rpc::RelayersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Relayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relayers(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::RelayersRequest* /*request*/, ::injective_explorer_rpc::RelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Relayers(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::RelayersRequest* /*request*/, ::injective_explorer_rpc::RelayersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamTxs() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackServerStreamingHandler< ::injective_explorer_rpc::StreamTxsRequest, ::injective_explorer_rpc::StreamTxsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::StreamTxsRequest* request) { return this->StreamTxs(context, request); }));
    }
    ~WithCallbackMethod_StreamTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamTxsRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamTxsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::injective_explorer_rpc::StreamTxsResponse>* StreamTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::StreamTxsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamBlocks() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackServerStreamingHandler< ::injective_explorer_rpc::StreamBlocksRequest, ::injective_explorer_rpc::StreamBlocksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_explorer_rpc::StreamBlocksRequest* request) { return this->StreamBlocks(context, request); }));
    }
    ~WithCallbackMethod_StreamBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamBlocksRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamBlocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::injective_explorer_rpc::StreamBlocksResponse>* StreamBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_explorer_rpc::StreamBlocksRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAccountTxs<WithCallbackMethod_GetContractTxs<WithCallbackMethod_GetBlocks<WithCallbackMethod_GetBlock<WithCallbackMethod_GetValidators<WithCallbackMethod_GetValidator<WithCallbackMethod_GetValidatorUptime<WithCallbackMethod_GetTxs<WithCallbackMethod_GetTxByTxHash<WithCallbackMethod_GetPeggyDepositTxs<WithCallbackMethod_GetPeggyWithdrawalTxs<WithCallbackMethod_GetIBCTransferTxs<WithCallbackMethod_GetWasmCodes<WithCallbackMethod_GetWasmCodeByID<WithCallbackMethod_GetWasmContracts<WithCallbackMethod_GetWasmContractByAddress<WithCallbackMethod_GetCw20Balance<WithCallbackMethod_Relayers<WithCallbackMethod_StreamTxs<WithCallbackMethod_StreamBlocks<Service > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAccountTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccountTxs() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAccountTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetAccountTxsRequest* /*request*/, ::injective_explorer_rpc::GetAccountTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetContractTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetContractTxs() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetContractTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetContractTxsRequest* /*request*/, ::injective_explorer_rpc::GetContractTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlocks() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlocksRequest* /*request*/, ::injective_explorer_rpc::GetBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlock() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlockRequest* /*request*/, ::injective_explorer_rpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetValidators() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidators(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorsRequest* /*request*/, ::injective_explorer_rpc::GetValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetValidator() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidator(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorRequest* /*request*/, ::injective_explorer_rpc::GetValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetValidatorUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetValidatorUptime() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetValidatorUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidatorUptime(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorUptimeRequest* /*request*/, ::injective_explorer_rpc::GetValidatorUptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTxs() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxsRequest* /*request*/, ::injective_explorer_rpc::GetTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxByTxHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTxByTxHash() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetTxByTxHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxByTxHash(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxByTxHashRequest* /*request*/, ::injective_explorer_rpc::GetTxByTxHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeggyDepositTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPeggyDepositTxs() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetPeggyDepositTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyDepositTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPeggyWithdrawalTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPeggyWithdrawalTxs() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetPeggyWithdrawalTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetIBCTransferTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetIBCTransferTxs() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetIBCTransferTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIBCTransferTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* /*request*/, ::injective_explorer_rpc::GetIBCTransferTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWasmCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWasmCodes() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetWasmCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodes(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodesRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWasmCodeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWasmCodeByID() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetWasmCodeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodeByID(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodeByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWasmContracts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWasmContracts() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetWasmContracts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContracts(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractsRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWasmContractByAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWasmContractByAddress() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetWasmContractByAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContractByAddress(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractByAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCw20Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCw20Balance() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetCw20Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCw20Balance(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetCw20BalanceRequest* /*request*/, ::injective_explorer_rpc::GetCw20BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Relayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Relayers() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_Relayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relayers(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::RelayersRequest* /*request*/, ::injective_explorer_rpc::RelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamTxs() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_StreamTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamTxsRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamTxsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamBlocks() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_StreamBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamBlocksRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamBlocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccountTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccountTxs() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAccountTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetAccountTxsRequest* /*request*/, ::injective_explorer_rpc::GetAccountTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccountTxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetContractTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetContractTxs() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetContractTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetContractTxsRequest* /*request*/, ::injective_explorer_rpc::GetContractTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetContractTxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlocks() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlocksRequest* /*request*/, ::injective_explorer_rpc::GetBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlocks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlock() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlockRequest* /*request*/, ::injective_explorer_rpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetValidators() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidators(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorsRequest* /*request*/, ::injective_explorer_rpc::GetValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValidators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetValidator() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidator(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorRequest* /*request*/, ::injective_explorer_rpc::GetValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValidator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetValidatorUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetValidatorUptime() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetValidatorUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidatorUptime(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorUptimeRequest* /*request*/, ::injective_explorer_rpc::GetValidatorUptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetValidatorUptime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTxs() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxsRequest* /*request*/, ::injective_explorer_rpc::GetTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxByTxHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTxByTxHash() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetTxByTxHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxByTxHash(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxByTxHashRequest* /*request*/, ::injective_explorer_rpc::GetTxByTxHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxByTxHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeggyDepositTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPeggyDepositTxs() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetPeggyDepositTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyDepositTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeggyDepositTxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPeggyWithdrawalTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPeggyWithdrawalTxs() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetPeggyWithdrawalTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPeggyWithdrawalTxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetIBCTransferTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetIBCTransferTxs() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetIBCTransferTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIBCTransferTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* /*request*/, ::injective_explorer_rpc::GetIBCTransferTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetIBCTransferTxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWasmCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWasmCodes() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetWasmCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodes(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodesRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWasmCodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWasmCodeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWasmCodeByID() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetWasmCodeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodeByID(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodeByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWasmCodeByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWasmContracts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWasmContracts() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetWasmContracts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContracts(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractsRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWasmContracts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWasmContractByAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWasmContractByAddress() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetWasmContractByAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContractByAddress(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractByAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWasmContractByAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCw20Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCw20Balance() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetCw20Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCw20Balance(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetCw20BalanceRequest* /*request*/, ::injective_explorer_rpc::GetCw20BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCw20Balance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Relayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Relayers() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_Relayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relayers(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::RelayersRequest* /*request*/, ::injective_explorer_rpc::RelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRelayers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamTxs() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_StreamTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamTxsRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamTxsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamTxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(18, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamBlocks() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_StreamBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamBlocksRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamBlocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamBlocks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(19, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccountTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccountTxs() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccountTxs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccountTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccountTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetAccountTxsRequest* /*request*/, ::injective_explorer_rpc::GetAccountTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccountTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetContractTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetContractTxs() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetContractTxs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetContractTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetContractTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetContractTxsRequest* /*request*/, ::injective_explorer_rpc::GetContractTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetContractTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlocks() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlocks(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlocksRequest* /*request*/, ::injective_explorer_rpc::GetBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlock() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlockRequest* /*request*/, ::injective_explorer_rpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetValidators() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetValidators(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidators(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorsRequest* /*request*/, ::injective_explorer_rpc::GetValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValidators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetValidator() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetValidator(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidator(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorRequest* /*request*/, ::injective_explorer_rpc::GetValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetValidatorUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetValidatorUptime() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetValidatorUptime(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetValidatorUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetValidatorUptime(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorUptimeRequest* /*request*/, ::injective_explorer_rpc::GetValidatorUptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetValidatorUptime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTxs() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTxs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxsRequest* /*request*/, ::injective_explorer_rpc::GetTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTxByTxHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTxByTxHash() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTxByTxHash(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTxByTxHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxByTxHash(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxByTxHashRequest* /*request*/, ::injective_explorer_rpc::GetTxByTxHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTxByTxHash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPeggyDepositTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPeggyDepositTxs() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPeggyDepositTxs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPeggyDepositTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyDepositTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPeggyDepositTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPeggyWithdrawalTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPeggyWithdrawalTxs() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPeggyWithdrawalTxs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPeggyWithdrawalTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPeggyWithdrawalTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetIBCTransferTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetIBCTransferTxs() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetIBCTransferTxs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetIBCTransferTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetIBCTransferTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* /*request*/, ::injective_explorer_rpc::GetIBCTransferTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetIBCTransferTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWasmCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWasmCodes() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWasmCodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWasmCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodes(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodesRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWasmCodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWasmCodeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWasmCodeByID() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWasmCodeByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWasmCodeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmCodeByID(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodeByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWasmCodeByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWasmContracts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWasmContracts() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWasmContracts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWasmContracts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContracts(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractsRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWasmContracts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWasmContractByAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWasmContractByAddress() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWasmContractByAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWasmContractByAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWasmContractByAddress(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractByAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWasmContractByAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCw20Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCw20Balance() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCw20Balance(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCw20Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCw20Balance(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetCw20BalanceRequest* /*request*/, ::injective_explorer_rpc::GetCw20BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCw20Balance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Relayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Relayers() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Relayers(context, request, response); }));
    }
    ~WithRawCallbackMethod_Relayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Relayers(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::RelayersRequest* /*request*/, ::injective_explorer_rpc::RelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Relayers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamTxs() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamTxs(context, request); }));
    }
    ~WithRawCallbackMethod_StreamTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamTxsRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamTxsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamBlocks() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamBlocks(context, request); }));
    }
    ~WithRawCallbackMethod_StreamBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamBlocksRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamBlocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccountTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccountTxs() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetAccountTxsRequest, ::injective_explorer_rpc::GetAccountTxsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetAccountTxsRequest, ::injective_explorer_rpc::GetAccountTxsResponse>* streamer) {
                       return this->StreamedGetAccountTxs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccountTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccountTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetAccountTxsRequest* /*request*/, ::injective_explorer_rpc::GetAccountTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccountTxs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetAccountTxsRequest,::injective_explorer_rpc::GetAccountTxsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetContractTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetContractTxs() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetContractTxsRequest, ::injective_explorer_rpc::GetContractTxsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetContractTxsRequest, ::injective_explorer_rpc::GetContractTxsResponse>* streamer) {
                       return this->StreamedGetContractTxs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetContractTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetContractTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetContractTxsRequest* /*request*/, ::injective_explorer_rpc::GetContractTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetContractTxs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetContractTxsRequest,::injective_explorer_rpc::GetContractTxsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlocks() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetBlocksRequest, ::injective_explorer_rpc::GetBlocksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetBlocksRequest, ::injective_explorer_rpc::GetBlocksResponse>* streamer) {
                       return this->StreamedGetBlocks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlocksRequest* /*request*/, ::injective_explorer_rpc::GetBlocksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlocks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetBlocksRequest,::injective_explorer_rpc::GetBlocksResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlock() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetBlockRequest, ::injective_explorer_rpc::GetBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetBlockRequest, ::injective_explorer_rpc::GetBlockResponse>* streamer) {
                       return this->StreamedGetBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetBlockRequest* /*request*/, ::injective_explorer_rpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetBlockRequest,::injective_explorer_rpc::GetBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetValidators() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetValidatorsRequest, ::injective_explorer_rpc::GetValidatorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetValidatorsRequest, ::injective_explorer_rpc::GetValidatorsResponse>* streamer) {
                       return this->StreamedGetValidators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetValidators(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorsRequest* /*request*/, ::injective_explorer_rpc::GetValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetValidators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetValidatorsRequest,::injective_explorer_rpc::GetValidatorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetValidator() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetValidatorRequest, ::injective_explorer_rpc::GetValidatorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetValidatorRequest, ::injective_explorer_rpc::GetValidatorResponse>* streamer) {
                       return this->StreamedGetValidator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetValidator(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorRequest* /*request*/, ::injective_explorer_rpc::GetValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetValidator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetValidatorRequest,::injective_explorer_rpc::GetValidatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetValidatorUptime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetValidatorUptime() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetValidatorUptimeRequest, ::injective_explorer_rpc::GetValidatorUptimeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetValidatorUptimeRequest, ::injective_explorer_rpc::GetValidatorUptimeResponse>* streamer) {
                       return this->StreamedGetValidatorUptime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetValidatorUptime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetValidatorUptime(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetValidatorUptimeRequest* /*request*/, ::injective_explorer_rpc::GetValidatorUptimeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetValidatorUptime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetValidatorUptimeRequest,::injective_explorer_rpc::GetValidatorUptimeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTxs() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetTxsRequest, ::injective_explorer_rpc::GetTxsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetTxsRequest, ::injective_explorer_rpc::GetTxsResponse>* streamer) {
                       return this->StreamedGetTxs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxsRequest* /*request*/, ::injective_explorer_rpc::GetTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetTxsRequest,::injective_explorer_rpc::GetTxsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxByTxHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTxByTxHash() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetTxByTxHashRequest, ::injective_explorer_rpc::GetTxByTxHashResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetTxByTxHashRequest, ::injective_explorer_rpc::GetTxByTxHashResponse>* streamer) {
                       return this->StreamedGetTxByTxHash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTxByTxHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxByTxHash(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetTxByTxHashRequest* /*request*/, ::injective_explorer_rpc::GetTxByTxHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxByTxHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetTxByTxHashRequest,::injective_explorer_rpc::GetTxByTxHashResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeggyDepositTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPeggyDepositTxs() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::injective_explorer_rpc::GetPeggyDepositTxsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetPeggyDepositTxsRequest, ::injective_explorer_rpc::GetPeggyDepositTxsResponse>* streamer) {
                       return this->StreamedGetPeggyDepositTxs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPeggyDepositTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeggyDepositTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyDepositTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyDepositTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeggyDepositTxs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetPeggyDepositTxsRequest,::injective_explorer_rpc::GetPeggyDepositTxsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPeggyWithdrawalTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPeggyWithdrawalTxs() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* streamer) {
                       return this->StreamedGetPeggyWithdrawalTxs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPeggyWithdrawalTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPeggyWithdrawalTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest* /*request*/, ::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPeggyWithdrawalTxs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetPeggyWithdrawalTxsRequest,::injective_explorer_rpc::GetPeggyWithdrawalTxsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetIBCTransferTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetIBCTransferTxs() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::injective_explorer_rpc::GetIBCTransferTxsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetIBCTransferTxsRequest, ::injective_explorer_rpc::GetIBCTransferTxsResponse>* streamer) {
                       return this->StreamedGetIBCTransferTxs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetIBCTransferTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetIBCTransferTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetIBCTransferTxsRequest* /*request*/, ::injective_explorer_rpc::GetIBCTransferTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetIBCTransferTxs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetIBCTransferTxsRequest,::injective_explorer_rpc::GetIBCTransferTxsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWasmCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWasmCodes() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetWasmCodesRequest, ::injective_explorer_rpc::GetWasmCodesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetWasmCodesRequest, ::injective_explorer_rpc::GetWasmCodesResponse>* streamer) {
                       return this->StreamedGetWasmCodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWasmCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWasmCodes(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodesRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWasmCodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetWasmCodesRequest,::injective_explorer_rpc::GetWasmCodesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWasmCodeByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWasmCodeByID() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::injective_explorer_rpc::GetWasmCodeByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetWasmCodeByIDRequest, ::injective_explorer_rpc::GetWasmCodeByIDResponse>* streamer) {
                       return this->StreamedGetWasmCodeByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWasmCodeByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWasmCodeByID(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmCodeByIDRequest* /*request*/, ::injective_explorer_rpc::GetWasmCodeByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWasmCodeByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetWasmCodeByIDRequest,::injective_explorer_rpc::GetWasmCodeByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWasmContracts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWasmContracts() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetWasmContractsRequest, ::injective_explorer_rpc::GetWasmContractsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetWasmContractsRequest, ::injective_explorer_rpc::GetWasmContractsResponse>* streamer) {
                       return this->StreamedGetWasmContracts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWasmContracts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWasmContracts(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractsRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWasmContracts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetWasmContractsRequest,::injective_explorer_rpc::GetWasmContractsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWasmContractByAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWasmContractByAddress() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::injective_explorer_rpc::GetWasmContractByAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetWasmContractByAddressRequest, ::injective_explorer_rpc::GetWasmContractByAddressResponse>* streamer) {
                       return this->StreamedGetWasmContractByAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWasmContractByAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWasmContractByAddress(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetWasmContractByAddressRequest* /*request*/, ::injective_explorer_rpc::GetWasmContractByAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWasmContractByAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetWasmContractByAddressRequest,::injective_explorer_rpc::GetWasmContractByAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCw20Balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCw20Balance() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::GetCw20BalanceRequest, ::injective_explorer_rpc::GetCw20BalanceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::GetCw20BalanceRequest, ::injective_explorer_rpc::GetCw20BalanceResponse>* streamer) {
                       return this->StreamedGetCw20Balance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCw20Balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCw20Balance(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::GetCw20BalanceRequest* /*request*/, ::injective_explorer_rpc::GetCw20BalanceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCw20Balance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::GetCw20BalanceRequest,::injective_explorer_rpc::GetCw20BalanceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Relayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Relayers() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_explorer_rpc::RelayersRequest, ::injective_explorer_rpc::RelayersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_explorer_rpc::RelayersRequest, ::injective_explorer_rpc::RelayersResponse>* streamer) {
                       return this->StreamedRelayers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Relayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Relayers(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::RelayersRequest* /*request*/, ::injective_explorer_rpc::RelayersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRelayers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_explorer_rpc::RelayersRequest,::injective_explorer_rpc::RelayersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAccountTxs<WithStreamedUnaryMethod_GetContractTxs<WithStreamedUnaryMethod_GetBlocks<WithStreamedUnaryMethod_GetBlock<WithStreamedUnaryMethod_GetValidators<WithStreamedUnaryMethod_GetValidator<WithStreamedUnaryMethod_GetValidatorUptime<WithStreamedUnaryMethod_GetTxs<WithStreamedUnaryMethod_GetTxByTxHash<WithStreamedUnaryMethod_GetPeggyDepositTxs<WithStreamedUnaryMethod_GetPeggyWithdrawalTxs<WithStreamedUnaryMethod_GetIBCTransferTxs<WithStreamedUnaryMethod_GetWasmCodes<WithStreamedUnaryMethod_GetWasmCodeByID<WithStreamedUnaryMethod_GetWasmContracts<WithStreamedUnaryMethod_GetWasmContractByAddress<WithStreamedUnaryMethod_GetCw20Balance<WithStreamedUnaryMethod_Relayers<Service > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamTxs() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::injective_explorer_rpc::StreamTxsRequest, ::injective_explorer_rpc::StreamTxsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::injective_explorer_rpc::StreamTxsRequest, ::injective_explorer_rpc::StreamTxsResponse>* streamer) {
                       return this->StreamedStreamTxs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamTxs(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamTxsRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamTxsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamTxs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::injective_explorer_rpc::StreamTxsRequest,::injective_explorer_rpc::StreamTxsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamBlocks() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::injective_explorer_rpc::StreamBlocksRequest, ::injective_explorer_rpc::StreamBlocksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::injective_explorer_rpc::StreamBlocksRequest, ::injective_explorer_rpc::StreamBlocksResponse>* streamer) {
                       return this->StreamedStreamBlocks(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamBlocks(::grpc::ServerContext* /*context*/, const ::injective_explorer_rpc::StreamBlocksRequest* /*request*/, ::grpc::ServerWriter< ::injective_explorer_rpc::StreamBlocksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamBlocks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::injective_explorer_rpc::StreamBlocksRequest,::injective_explorer_rpc::StreamBlocksResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamTxs<WithSplitStreamingMethod_StreamBlocks<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAccountTxs<WithStreamedUnaryMethod_GetContractTxs<WithStreamedUnaryMethod_GetBlocks<WithStreamedUnaryMethod_GetBlock<WithStreamedUnaryMethod_GetValidators<WithStreamedUnaryMethod_GetValidator<WithStreamedUnaryMethod_GetValidatorUptime<WithStreamedUnaryMethod_GetTxs<WithStreamedUnaryMethod_GetTxByTxHash<WithStreamedUnaryMethod_GetPeggyDepositTxs<WithStreamedUnaryMethod_GetPeggyWithdrawalTxs<WithStreamedUnaryMethod_GetIBCTransferTxs<WithStreamedUnaryMethod_GetWasmCodes<WithStreamedUnaryMethod_GetWasmCodeByID<WithStreamedUnaryMethod_GetWasmContracts<WithStreamedUnaryMethod_GetWasmContractByAddress<WithStreamedUnaryMethod_GetCw20Balance<WithStreamedUnaryMethod_Relayers<WithSplitStreamingMethod_StreamTxs<WithSplitStreamingMethod_StreamBlocks<Service > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace injective_explorer_rpc


#endif  // GRPC_exchange_2finjective_5fexplorer_5frpc_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_portfolio_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_exchange_2finjective_5fportfolio_5frpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_exchange_2finjective_5fportfolio_5frpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_exchange_2finjective_5fportfolio_5frpc_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_exchange_2finjective_5fportfolio_5frpc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_exchange_2finjective_5fportfolio_5frpc_2eproto;
namespace injective_portfolio_rpc {
class AccountPortfolioRequest;
struct AccountPortfolioRequestDefaultTypeInternal;
extern AccountPortfolioRequestDefaultTypeInternal _AccountPortfolioRequest_default_instance_;
class AccountPortfolioResponse;
struct AccountPortfolioResponseDefaultTypeInternal;
extern AccountPortfolioResponseDefaultTypeInternal _AccountPortfolioResponse_default_instance_;
class Coin;
struct CoinDefaultTypeInternal;
extern CoinDefaultTypeInternal _Coin_default_instance_;
class Portfolio;
struct PortfolioDefaultTypeInternal;
extern PortfolioDefaultTypeInternal _Portfolio_default_instance_;
class SubaccountBalanceV2;
struct SubaccountBalanceV2DefaultTypeInternal;
extern SubaccountBalanceV2DefaultTypeInternal _SubaccountBalanceV2_default_instance_;
}  // namespace injective_portfolio_rpc
PROTOBUF_NAMESPACE_OPEN
template <>
::injective_portfolio_rpc::AccountPortfolioRequest* Arena::CreateMaybeMessage<::injective_portfolio_rpc::AccountPortfolioRequest>(Arena*);
template <>
::injective_portfolio_rpc::AccountPortfolioResponse* Arena::CreateMaybeMessage<::injective_portfolio_rpc::AccountPortfolioResponse>(Arena*);
template <>
::injective_portfolio_rpc::Coin* Arena::CreateMaybeMessage<::injective_portfolio_rpc::Coin>(Arena*);
template <>
::injective_portfolio_rpc::Portfolio* Arena::CreateMaybeMessage<::injective_portfolio_rpc::Portfolio>(Arena*);
template <>
::injective_portfolio_rpc::SubaccountBalanceV2* Arena::CreateMaybeMessage<::injective_portfolio_rpc::SubaccountBalanceV2>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace injective_portfolio_rpc {

// ===================================================================


// -------------------------------------------------------------------

class AccountPortfolioRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_portfolio_rpc.AccountPortfolioRequest) */ {
 public:
  inline AccountPortfolioRequest() : AccountPortfolioRequest(nullptr) {}
  ~AccountPortfolioRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccountPortfolioRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountPortfolioRequest(const AccountPortfolioRequest& from);
  AccountPortfolioRequest(AccountPortfolioRequest&& from) noexcept
    : AccountPortfolioRequest() {
    *this = ::std::move(from);
  }

  inline AccountPortfolioRequest& operator=(const AccountPortfolioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountPortfolioRequest& operator=(AccountPortfolioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountPortfolioRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountPortfolioRequest* internal_default_instance() {
    return reinterpret_cast<const AccountPortfolioRequest*>(
               &_AccountPortfolioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountPortfolioRequest& a, AccountPortfolioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountPortfolioRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountPortfolioRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountPortfolioRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountPortfolioRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountPortfolioRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountPortfolioRequest& from) {
    AccountPortfolioRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountPortfolioRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_portfolio_rpc.AccountPortfolioRequest";
  }
  protected:
  explicit AccountPortfolioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountAddressFieldNumber = 1,
  };
  // string account_address = 1 [json_name = "accountAddress"];
  void clear_account_address() ;
  const std::string& account_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_address(Arg_&& arg, Args_... args);
  std::string* mutable_account_address();
  PROTOBUF_NODISCARD std::string* release_account_address();
  void set_allocated_account_address(std::string* ptr);

  private:
  const std::string& _internal_account_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_address(
      const std::string& value);
  std::string* _internal_mutable_account_address();

  public:
  // @@protoc_insertion_point(class_scope:injective_portfolio_rpc.AccountPortfolioRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5fportfolio_5frpc_2eproto;
};// -------------------------------------------------------------------

class AccountPortfolioResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_portfolio_rpc.AccountPortfolioResponse) */ {
 public:
  inline AccountPortfolioResponse() : AccountPortfolioResponse(nullptr) {}
  ~AccountPortfolioResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AccountPortfolioResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountPortfolioResponse(const AccountPortfolioResponse& from);
  AccountPortfolioResponse(AccountPortfolioResponse&& from) noexcept
    : AccountPortfolioResponse() {
    *this = ::std::move(from);
  }

  inline AccountPortfolioResponse& operator=(const AccountPortfolioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountPortfolioResponse& operator=(AccountPortfolioResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountPortfolioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountPortfolioResponse* internal_default_instance() {
    return reinterpret_cast<const AccountPortfolioResponse*>(
               &_AccountPortfolioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountPortfolioResponse& a, AccountPortfolioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountPortfolioResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountPortfolioResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountPortfolioResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountPortfolioResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountPortfolioResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountPortfolioResponse& from) {
    AccountPortfolioResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountPortfolioResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_portfolio_rpc.AccountPortfolioResponse";
  }
  protected:
  explicit AccountPortfolioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortfolioFieldNumber = 1,
  };
  // .injective_portfolio_rpc.Portfolio portfolio = 1 [json_name = "portfolio"];
  bool has_portfolio() const;
  void clear_portfolio() ;
  const ::injective_portfolio_rpc::Portfolio& portfolio() const;
  PROTOBUF_NODISCARD ::injective_portfolio_rpc::Portfolio* release_portfolio();
  ::injective_portfolio_rpc::Portfolio* mutable_portfolio();
  void set_allocated_portfolio(::injective_portfolio_rpc::Portfolio* portfolio);
  private:
  const ::injective_portfolio_rpc::Portfolio& _internal_portfolio() const;
  ::injective_portfolio_rpc::Portfolio* _internal_mutable_portfolio();
  public:
  void unsafe_arena_set_allocated_portfolio(
      ::injective_portfolio_rpc::Portfolio* portfolio);
  ::injective_portfolio_rpc::Portfolio* unsafe_arena_release_portfolio();
  // @@protoc_insertion_point(class_scope:injective_portfolio_rpc.AccountPortfolioResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::injective_portfolio_rpc::Portfolio* portfolio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5fportfolio_5frpc_2eproto;
};// -------------------------------------------------------------------

class Portfolio final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_portfolio_rpc.Portfolio) */ {
 public:
  inline Portfolio() : Portfolio(nullptr) {}
  ~Portfolio() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Portfolio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Portfolio(const Portfolio& from);
  Portfolio(Portfolio&& from) noexcept
    : Portfolio() {
    *this = ::std::move(from);
  }

  inline Portfolio& operator=(const Portfolio& from) {
    CopyFrom(from);
    return *this;
  }
  inline Portfolio& operator=(Portfolio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Portfolio& default_instance() {
    return *internal_default_instance();
  }
  static inline const Portfolio* internal_default_instance() {
    return reinterpret_cast<const Portfolio*>(
               &_Portfolio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Portfolio& a, Portfolio& b) {
    a.Swap(&b);
  }
  inline void Swap(Portfolio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Portfolio* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Portfolio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Portfolio>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Portfolio& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Portfolio& from) {
    Portfolio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Portfolio* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_portfolio_rpc.Portfolio";
  }
  protected:
  explicit Portfolio(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBankBalancesFieldNumber = 3,
    kSubaccountBalancesFieldNumber = 4,
    kAccountAddressFieldNumber = 1,
    kDenomFieldNumber = 2,
  };
  // repeated .injective_portfolio_rpc.Coin bank_balances = 3 [json_name = "bankBalances"];
  int bank_balances_size() const;
  private:
  int _internal_bank_balances_size() const;

  public:
  void clear_bank_balances() ;
  ::injective_portfolio_rpc::Coin* mutable_bank_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >*
      mutable_bank_balances();
  private:
  const ::injective_portfolio_rpc::Coin& _internal_bank_balances(int index) const;
  ::injective_portfolio_rpc::Coin* _internal_add_bank_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>& _internal_bank_balances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>* _internal_mutable_bank_balances();
  public:
  const ::injective_portfolio_rpc::Coin& bank_balances(int index) const;
  ::injective_portfolio_rpc::Coin* add_bank_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >&
      bank_balances() const;
  // repeated .injective_portfolio_rpc.SubaccountBalanceV2 subaccount_balances = 4 [json_name = "subaccountBalances"];
  int subaccount_balances_size() const;
  private:
  int _internal_subaccount_balances_size() const;

  public:
  void clear_subaccount_balances() ;
  ::injective_portfolio_rpc::SubaccountBalanceV2* mutable_subaccount_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::SubaccountBalanceV2 >*
      mutable_subaccount_balances();
  private:
  const ::injective_portfolio_rpc::SubaccountBalanceV2& _internal_subaccount_balances(int index) const;
  ::injective_portfolio_rpc::SubaccountBalanceV2* _internal_add_subaccount_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::SubaccountBalanceV2>& _internal_subaccount_balances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::SubaccountBalanceV2>* _internal_mutable_subaccount_balances();
  public:
  const ::injective_portfolio_rpc::SubaccountBalanceV2& subaccount_balances(int index) const;
  ::injective_portfolio_rpc::SubaccountBalanceV2* add_subaccount_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::SubaccountBalanceV2 >&
      subaccount_balances() const;
  // string account_address = 1 [json_name = "accountAddress"];
  void clear_account_address() ;
  const std::string& account_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_address(Arg_&& arg, Args_... args);
  std::string* mutable_account_address();
  PROTOBUF_NODISCARD std::string* release_account_address();
  void set_allocated_account_address(std::string* ptr);

  private:
  const std::string& _internal_account_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_address(
      const std::string& value);
  std::string* _internal_mutable_account_address();

  public:
  // string denom = 2 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:injective_portfolio_rpc.Portfolio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin > bank_balances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::SubaccountBalanceV2 > subaccount_balances_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5fportfolio_5frpc_2eproto;
};// -------------------------------------------------------------------

class Coin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_portfolio_rpc.Coin) */ {
 public:
  inline Coin() : Coin(nullptr) {}
  ~Coin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Coin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coin(const Coin& from);
  Coin(Coin&& from) noexcept
    : Coin() {
    *this = ::std::move(from);
  }

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coin& operator=(Coin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coin* internal_default_instance() {
    return reinterpret_cast<const Coin*>(
               &_Coin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Coin& a, Coin& b) {
    a.Swap(&b);
  }
  inline void Swap(Coin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coin& from) {
    Coin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_portfolio_rpc.Coin";
  }
  protected:
  explicit Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // string amount = 2 [json_name = "amount"];
  void clear_amount() ;
  const std::string& amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* ptr);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // @@protoc_insertion_point(class_scope:injective_portfolio_rpc.Coin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5fportfolio_5frpc_2eproto;
};// -------------------------------------------------------------------

class SubaccountBalanceV2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:injective_portfolio_rpc.SubaccountBalanceV2) */ {
 public:
  inline SubaccountBalanceV2() : SubaccountBalanceV2(nullptr) {}
  ~SubaccountBalanceV2() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubaccountBalanceV2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubaccountBalanceV2(const SubaccountBalanceV2& from);
  SubaccountBalanceV2(SubaccountBalanceV2&& from) noexcept
    : SubaccountBalanceV2() {
    *this = ::std::move(from);
  }

  inline SubaccountBalanceV2& operator=(const SubaccountBalanceV2& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubaccountBalanceV2& operator=(SubaccountBalanceV2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubaccountBalanceV2& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubaccountBalanceV2* internal_default_instance() {
    return reinterpret_cast<const SubaccountBalanceV2*>(
               &_SubaccountBalanceV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubaccountBalanceV2& a, SubaccountBalanceV2& b) {
    a.Swap(&b);
  }
  inline void Swap(SubaccountBalanceV2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubaccountBalanceV2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubaccountBalanceV2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubaccountBalanceV2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubaccountBalanceV2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubaccountBalanceV2& from) {
    SubaccountBalanceV2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubaccountBalanceV2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "injective_portfolio_rpc.SubaccountBalanceV2";
  }
  protected:
  explicit SubaccountBalanceV2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvailableBalancesFieldNumber = 2,
    kMarginHoldFieldNumber = 3,
    kUnrealizedPnlFieldNumber = 4,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated .injective_portfolio_rpc.Coin available_balances = 2 [json_name = "availableBalances"];
  int available_balances_size() const;
  private:
  int _internal_available_balances_size() const;

  public:
  void clear_available_balances() ;
  ::injective_portfolio_rpc::Coin* mutable_available_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >*
      mutable_available_balances();
  private:
  const ::injective_portfolio_rpc::Coin& _internal_available_balances(int index) const;
  ::injective_portfolio_rpc::Coin* _internal_add_available_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>& _internal_available_balances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>* _internal_mutable_available_balances();
  public:
  const ::injective_portfolio_rpc::Coin& available_balances(int index) const;
  ::injective_portfolio_rpc::Coin* add_available_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >&
      available_balances() const;
  // repeated .injective_portfolio_rpc.Coin margin_hold = 3 [json_name = "marginHold"];
  int margin_hold_size() const;
  private:
  int _internal_margin_hold_size() const;

  public:
  void clear_margin_hold() ;
  ::injective_portfolio_rpc::Coin* mutable_margin_hold(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >*
      mutable_margin_hold();
  private:
  const ::injective_portfolio_rpc::Coin& _internal_margin_hold(int index) const;
  ::injective_portfolio_rpc::Coin* _internal_add_margin_hold();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>& _internal_margin_hold() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>* _internal_mutable_margin_hold();
  public:
  const ::injective_portfolio_rpc::Coin& margin_hold(int index) const;
  ::injective_portfolio_rpc::Coin* add_margin_hold();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >&
      margin_hold() const;
  // repeated .injective_portfolio_rpc.Coin unrealized_pnl = 4 [json_name = "unrealizedPnl"];
  int unrealized_pnl_size() const;
  private:
  int _internal_unrealized_pnl_size() const;

  public:
  void clear_unrealized_pnl() ;
  ::injective_portfolio_rpc::Coin* mutable_unrealized_pnl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >*
      mutable_unrealized_pnl();
  private:
  const ::injective_portfolio_rpc::Coin& _internal_unrealized_pnl(int index) const;
  ::injective_portfolio_rpc::Coin* _internal_add_unrealized_pnl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>& _internal_unrealized_pnl() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>* _internal_mutable_unrealized_pnl();
  public:
  const ::injective_portfolio_rpc::Coin& unrealized_pnl(int index) const;
  ::injective_portfolio_rpc::Coin* add_unrealized_pnl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >&
      unrealized_pnl() const;
  // string subaccount_id = 1 [json_name = "subaccountId"];
  void clear_subaccount_id() ;
  const std::string& subaccount_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subaccount_id(Arg_&& arg, Args_... args);
  std::string* mutable_subaccount_id();
  PROTOBUF_NODISCARD std::string* release_subaccount_id();
  void set_allocated_subaccount_id(std::string* ptr);

  private:
  const std::string& _internal_subaccount_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subaccount_id(
      const std::string& value);
  std::string* _internal_mutable_subaccount_id();

  public:
  // @@protoc_insertion_point(class_scope:injective_portfolio_rpc.SubaccountBalanceV2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin > available_balances_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin > margin_hold_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin > unrealized_pnl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subaccount_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2finjective_5fportfolio_5frpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AccountPortfolioRequest

// string account_address = 1 [json_name = "accountAddress"];
inline void AccountPortfolioRequest::clear_account_address() {
  _impl_.account_address_.ClearToEmpty();
}
inline const std::string& AccountPortfolioRequest::account_address() const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.AccountPortfolioRequest.account_address)
  return _internal_account_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPortfolioRequest::set_account_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_portfolio_rpc.AccountPortfolioRequest.account_address)
}
inline std::string* AccountPortfolioRequest::mutable_account_address() {
  std::string* _s = _internal_mutable_account_address();
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.AccountPortfolioRequest.account_address)
  return _s;
}
inline const std::string& AccountPortfolioRequest::_internal_account_address() const {
  return _impl_.account_address_.Get();
}
inline void AccountPortfolioRequest::_internal_set_account_address(const std::string& value) {
  ;


  _impl_.account_address_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPortfolioRequest::_internal_mutable_account_address() {
  ;
  return _impl_.account_address_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPortfolioRequest::release_account_address() {
  // @@protoc_insertion_point(field_release:injective_portfolio_rpc.AccountPortfolioRequest.account_address)
  return _impl_.account_address_.Release();
}
inline void AccountPortfolioRequest::set_allocated_account_address(std::string* value) {
  _impl_.account_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_address_.IsDefault()) {
          _impl_.account_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_portfolio_rpc.AccountPortfolioRequest.account_address)
}

// -------------------------------------------------------------------

// AccountPortfolioResponse

// .injective_portfolio_rpc.Portfolio portfolio = 1 [json_name = "portfolio"];
inline bool AccountPortfolioResponse::has_portfolio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.portfolio_ != nullptr);
  return value;
}
inline void AccountPortfolioResponse::clear_portfolio() {
  if (_impl_.portfolio_ != nullptr) _impl_.portfolio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::injective_portfolio_rpc::Portfolio& AccountPortfolioResponse::_internal_portfolio() const {
  const ::injective_portfolio_rpc::Portfolio* p = _impl_.portfolio_;
  return p != nullptr ? *p : reinterpret_cast<const ::injective_portfolio_rpc::Portfolio&>(
      ::injective_portfolio_rpc::_Portfolio_default_instance_);
}
inline const ::injective_portfolio_rpc::Portfolio& AccountPortfolioResponse::portfolio() const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.AccountPortfolioResponse.portfolio)
  return _internal_portfolio();
}
inline void AccountPortfolioResponse::unsafe_arena_set_allocated_portfolio(
    ::injective_portfolio_rpc::Portfolio* portfolio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.portfolio_);
  }
  _impl_.portfolio_ = portfolio;
  if (portfolio) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:injective_portfolio_rpc.AccountPortfolioResponse.portfolio)
}
inline ::injective_portfolio_rpc::Portfolio* AccountPortfolioResponse::release_portfolio() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective_portfolio_rpc::Portfolio* temp = _impl_.portfolio_;
  _impl_.portfolio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::injective_portfolio_rpc::Portfolio* AccountPortfolioResponse::unsafe_arena_release_portfolio() {
  // @@protoc_insertion_point(field_release:injective_portfolio_rpc.AccountPortfolioResponse.portfolio)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::injective_portfolio_rpc::Portfolio* temp = _impl_.portfolio_;
  _impl_.portfolio_ = nullptr;
  return temp;
}
inline ::injective_portfolio_rpc::Portfolio* AccountPortfolioResponse::_internal_mutable_portfolio() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.portfolio_ == nullptr) {
    auto* p = CreateMaybeMessage<::injective_portfolio_rpc::Portfolio>(GetArenaForAllocation());
    _impl_.portfolio_ = p;
  }
  return _impl_.portfolio_;
}
inline ::injective_portfolio_rpc::Portfolio* AccountPortfolioResponse::mutable_portfolio() {
  ::injective_portfolio_rpc::Portfolio* _msg = _internal_mutable_portfolio();
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.AccountPortfolioResponse.portfolio)
  return _msg;
}
inline void AccountPortfolioResponse::set_allocated_portfolio(::injective_portfolio_rpc::Portfolio* portfolio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.portfolio_;
  }
  if (portfolio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(portfolio);
    if (message_arena != submessage_arena) {
      portfolio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, portfolio, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.portfolio_ = portfolio;
  // @@protoc_insertion_point(field_set_allocated:injective_portfolio_rpc.AccountPortfolioResponse.portfolio)
}

// -------------------------------------------------------------------

// Portfolio

// string account_address = 1 [json_name = "accountAddress"];
inline void Portfolio::clear_account_address() {
  _impl_.account_address_.ClearToEmpty();
}
inline const std::string& Portfolio::account_address() const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.Portfolio.account_address)
  return _internal_account_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Portfolio::set_account_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_portfolio_rpc.Portfolio.account_address)
}
inline std::string* Portfolio::mutable_account_address() {
  std::string* _s = _internal_mutable_account_address();
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.Portfolio.account_address)
  return _s;
}
inline const std::string& Portfolio::_internal_account_address() const {
  return _impl_.account_address_.Get();
}
inline void Portfolio::_internal_set_account_address(const std::string& value) {
  ;


  _impl_.account_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Portfolio::_internal_mutable_account_address() {
  ;
  return _impl_.account_address_.Mutable( GetArenaForAllocation());
}
inline std::string* Portfolio::release_account_address() {
  // @@protoc_insertion_point(field_release:injective_portfolio_rpc.Portfolio.account_address)
  return _impl_.account_address_.Release();
}
inline void Portfolio::set_allocated_account_address(std::string* value) {
  _impl_.account_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_address_.IsDefault()) {
          _impl_.account_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_portfolio_rpc.Portfolio.account_address)
}

// string denom = 2 [json_name = "denom"];
inline void Portfolio::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& Portfolio::denom() const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.Portfolio.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Portfolio::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_portfolio_rpc.Portfolio.denom)
}
inline std::string* Portfolio::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.Portfolio.denom)
  return _s;
}
inline const std::string& Portfolio::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void Portfolio::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* Portfolio::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* Portfolio::release_denom() {
  // @@protoc_insertion_point(field_release:injective_portfolio_rpc.Portfolio.denom)
  return _impl_.denom_.Release();
}
inline void Portfolio::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_portfolio_rpc.Portfolio.denom)
}

// repeated .injective_portfolio_rpc.Coin bank_balances = 3 [json_name = "bankBalances"];
inline int Portfolio::_internal_bank_balances_size() const {
  return _impl_.bank_balances_.size();
}
inline int Portfolio::bank_balances_size() const {
  return _internal_bank_balances_size();
}
inline void Portfolio::clear_bank_balances() {
  _internal_mutable_bank_balances()->Clear();
}
inline ::injective_portfolio_rpc::Coin* Portfolio::mutable_bank_balances(int index) {
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.Portfolio.bank_balances)
  return _internal_mutable_bank_balances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >*
Portfolio::mutable_bank_balances() {
  // @@protoc_insertion_point(field_mutable_list:injective_portfolio_rpc.Portfolio.bank_balances)
  return _internal_mutable_bank_balances();
}
inline const ::injective_portfolio_rpc::Coin& Portfolio::_internal_bank_balances(int index) const {
  return _internal_bank_balances().Get(index);
}
inline const ::injective_portfolio_rpc::Coin& Portfolio::bank_balances(int index) const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.Portfolio.bank_balances)
  return _internal_bank_balances(index);
}
inline ::injective_portfolio_rpc::Coin* Portfolio::_internal_add_bank_balances() {
  return _internal_mutable_bank_balances()->Add();
}
inline ::injective_portfolio_rpc::Coin* Portfolio::add_bank_balances() {
  ::injective_portfolio_rpc::Coin* _add = _internal_add_bank_balances();
  // @@protoc_insertion_point(field_add:injective_portfolio_rpc.Portfolio.bank_balances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >&
Portfolio::bank_balances() const {
  // @@protoc_insertion_point(field_list:injective_portfolio_rpc.Portfolio.bank_balances)
  return _internal_bank_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>&
Portfolio::_internal_bank_balances() const {
  return _impl_.bank_balances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>*
Portfolio::_internal_mutable_bank_balances() {
  return &_impl_.bank_balances_;
}

// repeated .injective_portfolio_rpc.SubaccountBalanceV2 subaccount_balances = 4 [json_name = "subaccountBalances"];
inline int Portfolio::_internal_subaccount_balances_size() const {
  return _impl_.subaccount_balances_.size();
}
inline int Portfolio::subaccount_balances_size() const {
  return _internal_subaccount_balances_size();
}
inline void Portfolio::clear_subaccount_balances() {
  _internal_mutable_subaccount_balances()->Clear();
}
inline ::injective_portfolio_rpc::SubaccountBalanceV2* Portfolio::mutable_subaccount_balances(int index) {
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.Portfolio.subaccount_balances)
  return _internal_mutable_subaccount_balances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::SubaccountBalanceV2 >*
Portfolio::mutable_subaccount_balances() {
  // @@protoc_insertion_point(field_mutable_list:injective_portfolio_rpc.Portfolio.subaccount_balances)
  return _internal_mutable_subaccount_balances();
}
inline const ::injective_portfolio_rpc::SubaccountBalanceV2& Portfolio::_internal_subaccount_balances(int index) const {
  return _internal_subaccount_balances().Get(index);
}
inline const ::injective_portfolio_rpc::SubaccountBalanceV2& Portfolio::subaccount_balances(int index) const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.Portfolio.subaccount_balances)
  return _internal_subaccount_balances(index);
}
inline ::injective_portfolio_rpc::SubaccountBalanceV2* Portfolio::_internal_add_subaccount_balances() {
  return _internal_mutable_subaccount_balances()->Add();
}
inline ::injective_portfolio_rpc::SubaccountBalanceV2* Portfolio::add_subaccount_balances() {
  ::injective_portfolio_rpc::SubaccountBalanceV2* _add = _internal_add_subaccount_balances();
  // @@protoc_insertion_point(field_add:injective_portfolio_rpc.Portfolio.subaccount_balances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::SubaccountBalanceV2 >&
Portfolio::subaccount_balances() const {
  // @@protoc_insertion_point(field_list:injective_portfolio_rpc.Portfolio.subaccount_balances)
  return _internal_subaccount_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::SubaccountBalanceV2>&
Portfolio::_internal_subaccount_balances() const {
  return _impl_.subaccount_balances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::SubaccountBalanceV2>*
Portfolio::_internal_mutable_subaccount_balances() {
  return &_impl_.subaccount_balances_;
}

// -------------------------------------------------------------------

// Coin

// string denom = 1 [json_name = "denom"];
inline void Coin::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& Coin::denom() const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.Coin.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Coin::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_portfolio_rpc.Coin.denom)
}
inline std::string* Coin::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.Coin.denom)
  return _s;
}
inline const std::string& Coin::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void Coin::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* Coin::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* Coin::release_denom() {
  // @@protoc_insertion_point(field_release:injective_portfolio_rpc.Coin.denom)
  return _impl_.denom_.Release();
}
inline void Coin::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_portfolio_rpc.Coin.denom)
}

// string amount = 2 [json_name = "amount"];
inline void Coin::clear_amount() {
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& Coin::amount() const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.Coin.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Coin::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_portfolio_rpc.Coin.amount)
}
inline std::string* Coin::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.Coin.amount)
  return _s;
}
inline const std::string& Coin::_internal_amount() const {
  return _impl_.amount_.Get();
}
inline void Coin::_internal_set_amount(const std::string& value) {
  ;


  _impl_.amount_.Set(value, GetArenaForAllocation());
}
inline std::string* Coin::_internal_mutable_amount() {
  ;
  return _impl_.amount_.Mutable( GetArenaForAllocation());
}
inline std::string* Coin::release_amount() {
  // @@protoc_insertion_point(field_release:injective_portfolio_rpc.Coin.amount)
  return _impl_.amount_.Release();
}
inline void Coin::set_allocated_amount(std::string* value) {
  _impl_.amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amount_.IsDefault()) {
          _impl_.amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_portfolio_rpc.Coin.amount)
}

// -------------------------------------------------------------------

// SubaccountBalanceV2

// string subaccount_id = 1 [json_name = "subaccountId"];
inline void SubaccountBalanceV2::clear_subaccount_id() {
  _impl_.subaccount_id_.ClearToEmpty();
}
inline const std::string& SubaccountBalanceV2::subaccount_id() const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.SubaccountBalanceV2.subaccount_id)
  return _internal_subaccount_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubaccountBalanceV2::set_subaccount_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subaccount_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:injective_portfolio_rpc.SubaccountBalanceV2.subaccount_id)
}
inline std::string* SubaccountBalanceV2::mutable_subaccount_id() {
  std::string* _s = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.SubaccountBalanceV2.subaccount_id)
  return _s;
}
inline const std::string& SubaccountBalanceV2::_internal_subaccount_id() const {
  return _impl_.subaccount_id_.Get();
}
inline void SubaccountBalanceV2::_internal_set_subaccount_id(const std::string& value) {
  ;


  _impl_.subaccount_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SubaccountBalanceV2::_internal_mutable_subaccount_id() {
  ;
  return _impl_.subaccount_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SubaccountBalanceV2::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:injective_portfolio_rpc.SubaccountBalanceV2.subaccount_id)
  return _impl_.subaccount_id_.Release();
}
inline void SubaccountBalanceV2::set_allocated_subaccount_id(std::string* value) {
  _impl_.subaccount_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subaccount_id_.IsDefault()) {
          _impl_.subaccount_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:injective_portfolio_rpc.SubaccountBalanceV2.subaccount_id)
}

// repeated .injective_portfolio_rpc.Coin available_balances = 2 [json_name = "availableBalances"];
inline int SubaccountBalanceV2::_internal_available_balances_size() const {
  return _impl_.available_balances_.size();
}
inline int SubaccountBalanceV2::available_balances_size() const {
  return _internal_available_balances_size();
}
inline void SubaccountBalanceV2::clear_available_balances() {
  _internal_mutable_available_balances()->Clear();
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::mutable_available_balances(int index) {
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.SubaccountBalanceV2.available_balances)
  return _internal_mutable_available_balances()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >*
SubaccountBalanceV2::mutable_available_balances() {
  // @@protoc_insertion_point(field_mutable_list:injective_portfolio_rpc.SubaccountBalanceV2.available_balances)
  return _internal_mutable_available_balances();
}
inline const ::injective_portfolio_rpc::Coin& SubaccountBalanceV2::_internal_available_balances(int index) const {
  return _internal_available_balances().Get(index);
}
inline const ::injective_portfolio_rpc::Coin& SubaccountBalanceV2::available_balances(int index) const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.SubaccountBalanceV2.available_balances)
  return _internal_available_balances(index);
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::_internal_add_available_balances() {
  return _internal_mutable_available_balances()->Add();
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::add_available_balances() {
  ::injective_portfolio_rpc::Coin* _add = _internal_add_available_balances();
  // @@protoc_insertion_point(field_add:injective_portfolio_rpc.SubaccountBalanceV2.available_balances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >&
SubaccountBalanceV2::available_balances() const {
  // @@protoc_insertion_point(field_list:injective_portfolio_rpc.SubaccountBalanceV2.available_balances)
  return _internal_available_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>&
SubaccountBalanceV2::_internal_available_balances() const {
  return _impl_.available_balances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>*
SubaccountBalanceV2::_internal_mutable_available_balances() {
  return &_impl_.available_balances_;
}

// repeated .injective_portfolio_rpc.Coin margin_hold = 3 [json_name = "marginHold"];
inline int SubaccountBalanceV2::_internal_margin_hold_size() const {
  return _impl_.margin_hold_.size();
}
inline int SubaccountBalanceV2::margin_hold_size() const {
  return _internal_margin_hold_size();
}
inline void SubaccountBalanceV2::clear_margin_hold() {
  _internal_mutable_margin_hold()->Clear();
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::mutable_margin_hold(int index) {
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.SubaccountBalanceV2.margin_hold)
  return _internal_mutable_margin_hold()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >*
SubaccountBalanceV2::mutable_margin_hold() {
  // @@protoc_insertion_point(field_mutable_list:injective_portfolio_rpc.SubaccountBalanceV2.margin_hold)
  return _internal_mutable_margin_hold();
}
inline const ::injective_portfolio_rpc::Coin& SubaccountBalanceV2::_internal_margin_hold(int index) const {
  return _internal_margin_hold().Get(index);
}
inline const ::injective_portfolio_rpc::Coin& SubaccountBalanceV2::margin_hold(int index) const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.SubaccountBalanceV2.margin_hold)
  return _internal_margin_hold(index);
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::_internal_add_margin_hold() {
  return _internal_mutable_margin_hold()->Add();
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::add_margin_hold() {
  ::injective_portfolio_rpc::Coin* _add = _internal_add_margin_hold();
  // @@protoc_insertion_point(field_add:injective_portfolio_rpc.SubaccountBalanceV2.margin_hold)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >&
SubaccountBalanceV2::margin_hold() const {
  // @@protoc_insertion_point(field_list:injective_portfolio_rpc.SubaccountBalanceV2.margin_hold)
  return _internal_margin_hold();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>&
SubaccountBalanceV2::_internal_margin_hold() const {
  return _impl_.margin_hold_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>*
SubaccountBalanceV2::_internal_mutable_margin_hold() {
  return &_impl_.margin_hold_;
}

// repeated .injective_portfolio_rpc.Coin unrealized_pnl = 4 [json_name = "unrealizedPnl"];
inline int SubaccountBalanceV2::_internal_unrealized_pnl_size() const {
  return _impl_.unrealized_pnl_.size();
}
inline int SubaccountBalanceV2::unrealized_pnl_size() const {
  return _internal_unrealized_pnl_size();
}
inline void SubaccountBalanceV2::clear_unrealized_pnl() {
  _internal_mutable_unrealized_pnl()->Clear();
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::mutable_unrealized_pnl(int index) {
  // @@protoc_insertion_point(field_mutable:injective_portfolio_rpc.SubaccountBalanceV2.unrealized_pnl)
  return _internal_mutable_unrealized_pnl()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >*
SubaccountBalanceV2::mutable_unrealized_pnl() {
  // @@protoc_insertion_point(field_mutable_list:injective_portfolio_rpc.SubaccountBalanceV2.unrealized_pnl)
  return _internal_mutable_unrealized_pnl();
}
inline const ::injective_portfolio_rpc::Coin& SubaccountBalanceV2::_internal_unrealized_pnl(int index) const {
  return _internal_unrealized_pnl().Get(index);
}
inline const ::injective_portfolio_rpc::Coin& SubaccountBalanceV2::unrealized_pnl(int index) const {
  // @@protoc_insertion_point(field_get:injective_portfolio_rpc.SubaccountBalanceV2.unrealized_pnl)
  return _internal_unrealized_pnl(index);
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::_internal_add_unrealized_pnl() {
  return _internal_mutable_unrealized_pnl()->Add();
}
inline ::injective_portfolio_rpc::Coin* SubaccountBalanceV2::add_unrealized_pnl() {
  ::injective_portfolio_rpc::Coin* _add = _internal_add_unrealized_pnl();
  // @@protoc_insertion_point(field_add:injective_portfolio_rpc.SubaccountBalanceV2.unrealized_pnl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::injective_portfolio_rpc::Coin >&
SubaccountBalanceV2::unrealized_pnl() const {
  // @@protoc_insertion_point(field_list:injective_portfolio_rpc.SubaccountBalanceV2.unrealized_pnl)
  return _internal_unrealized_pnl();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>&
SubaccountBalanceV2::_internal_unrealized_pnl() const {
  return _impl_.unrealized_pnl_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::injective_portfolio_rpc::Coin>*
SubaccountBalanceV2::_internal_mutable_unrealized_pnl() {
  return &_impl_.unrealized_pnl_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_portfolio_rpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_exchange_2finjective_5fportfolio_5frpc_2eproto_2epb_2eh

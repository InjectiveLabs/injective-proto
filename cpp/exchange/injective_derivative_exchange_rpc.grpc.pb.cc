// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_derivative_exchange_rpc.proto

#include "exchange/injective_derivative_exchange_rpc.pb.h"
#include "exchange/injective_derivative_exchange_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective_derivative_exchange_rpc {

static const char* InjectiveDerivativeExchangeRPC_method_names[] = {
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/Markets",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/Market",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/StreamMarket",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/BinaryOptionsMarkets",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/BinaryOptionsMarket",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/Orderbook",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/OrderbookV2",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/Orderbooks",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/OrderbooksV2",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/StreamOrderbook",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/StreamOrderbookV2",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/StreamOrderbookUpdate",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/Orders",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/Positions",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/LiquidablePositions",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/FundingPayments",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/FundingRates",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/StreamPositions",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/StreamOrders",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/Trades",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/StreamTrades",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/SubaccountOrdersList",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/SubaccountTradesList",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/OrdersHistory",
  "/injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC/StreamOrdersHistory",
};

std::unique_ptr< InjectiveDerivativeExchangeRPC::Stub> InjectiveDerivativeExchangeRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InjectiveDerivativeExchangeRPC::Stub> stub(new InjectiveDerivativeExchangeRPC::Stub(channel, options));
  return stub;
}

InjectiveDerivativeExchangeRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Markets_(InjectiveDerivativeExchangeRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Market_(InjectiveDerivativeExchangeRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamMarket_(InjectiveDerivativeExchangeRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BinaryOptionsMarkets_(InjectiveDerivativeExchangeRPC_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BinaryOptionsMarket_(InjectiveDerivativeExchangeRPC_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Orderbook_(InjectiveDerivativeExchangeRPC_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderbookV2_(InjectiveDerivativeExchangeRPC_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Orderbooks_(InjectiveDerivativeExchangeRPC_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrderbooksV2_(InjectiveDerivativeExchangeRPC_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamOrderbook_(InjectiveDerivativeExchangeRPC_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamOrderbookV2_(InjectiveDerivativeExchangeRPC_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamOrderbookUpdate_(InjectiveDerivativeExchangeRPC_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Orders_(InjectiveDerivativeExchangeRPC_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Positions_(InjectiveDerivativeExchangeRPC_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LiquidablePositions_(InjectiveDerivativeExchangeRPC_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FundingPayments_(InjectiveDerivativeExchangeRPC_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FundingRates_(InjectiveDerivativeExchangeRPC_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamPositions_(InjectiveDerivativeExchangeRPC_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamOrders_(InjectiveDerivativeExchangeRPC_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Trades_(InjectiveDerivativeExchangeRPC_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamTrades_(InjectiveDerivativeExchangeRPC_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubaccountOrdersList_(InjectiveDerivativeExchangeRPC_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubaccountTradesList_(InjectiveDerivativeExchangeRPC_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OrdersHistory_(InjectiveDerivativeExchangeRPC_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamOrdersHistory_(InjectiveDerivativeExchangeRPC_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::Markets(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketsRequest& request, ::injective_derivative_exchange_rpc::MarketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::MarketsRequest, ::injective_derivative_exchange_rpc::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Markets_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::Markets(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketsRequest* request, ::injective_derivative_exchange_rpc::MarketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::MarketsRequest, ::injective_derivative_exchange_rpc::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Markets_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::Markets(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketsRequest* request, ::injective_derivative_exchange_rpc::MarketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Markets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::MarketsResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncMarketsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::MarketsResponse, ::injective_derivative_exchange_rpc::MarketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Markets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::MarketsResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncMarketsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::Market(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketRequest& request, ::injective_derivative_exchange_rpc::MarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::MarketRequest, ::injective_derivative_exchange_rpc::MarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Market_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::Market(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketRequest* request, ::injective_derivative_exchange_rpc::MarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::MarketRequest, ::injective_derivative_exchange_rpc::MarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Market_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::Market(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketRequest* request, ::injective_derivative_exchange_rpc::MarketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Market_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::MarketResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncMarketRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::MarketResponse, ::injective_derivative_exchange_rpc::MarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Market_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::MarketResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncMarketRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::MarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_derivative_exchange_rpc::StreamMarketResponse>* InjectiveDerivativeExchangeRPC::Stub::StreamMarketRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamMarketRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_derivative_exchange_rpc::StreamMarketResponse>::Create(channel_.get(), rpcmethod_StreamMarket_, context, request);
}

void InjectiveDerivativeExchangeRPC::Stub::async::StreamMarket(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamMarketRequest* request, ::grpc::ClientReadReactor< ::injective_derivative_exchange_rpc::StreamMarketResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_derivative_exchange_rpc::StreamMarketResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamMarket_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamMarketResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncStreamMarketRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamMarketRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamMarketResponse>::Create(channel_.get(), cq, rpcmethod_StreamMarket_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamMarketResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncStreamMarketRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamMarketResponse>::Create(channel_.get(), cq, rpcmethod_StreamMarket_, context, request, false, nullptr);
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::BinaryOptionsMarkets(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest& request, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BinaryOptionsMarkets_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::BinaryOptionsMarkets(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest* request, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryOptionsMarkets_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::BinaryOptionsMarkets(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest* request, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryOptionsMarkets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncBinaryOptionsMarketsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BinaryOptionsMarkets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncBinaryOptionsMarketsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBinaryOptionsMarketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::BinaryOptionsMarket(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest& request, ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest, ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BinaryOptionsMarket_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::BinaryOptionsMarket(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest* request, ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest, ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryOptionsMarket_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::BinaryOptionsMarket(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest* request, ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BinaryOptionsMarket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncBinaryOptionsMarketRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse, ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BinaryOptionsMarket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncBinaryOptionsMarketRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBinaryOptionsMarketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::Orderbook(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookRequest& request, ::injective_derivative_exchange_rpc::OrderbookResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::OrderbookRequest, ::injective_derivative_exchange_rpc::OrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Orderbook_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::Orderbook(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookRequest* request, ::injective_derivative_exchange_rpc::OrderbookResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::OrderbookRequest, ::injective_derivative_exchange_rpc::OrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Orderbook_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::Orderbook(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookRequest* request, ::injective_derivative_exchange_rpc::OrderbookResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Orderbook_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrderbookResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncOrderbookRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::OrderbookResponse, ::injective_derivative_exchange_rpc::OrderbookRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Orderbook_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrderbookResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncOrderbookRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderbookRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::OrderbookV2(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookV2Request& request, ::injective_derivative_exchange_rpc::OrderbookV2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::OrderbookV2Request, ::injective_derivative_exchange_rpc::OrderbookV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderbookV2_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::OrderbookV2(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookV2Request* request, ::injective_derivative_exchange_rpc::OrderbookV2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::OrderbookV2Request, ::injective_derivative_exchange_rpc::OrderbookV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderbookV2_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::OrderbookV2(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookV2Request* request, ::injective_derivative_exchange_rpc::OrderbookV2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderbookV2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrderbookV2Response>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncOrderbookV2Raw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookV2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::OrderbookV2Response, ::injective_derivative_exchange_rpc::OrderbookV2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderbookV2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrderbookV2Response>* InjectiveDerivativeExchangeRPC::Stub::AsyncOrderbookV2Raw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbookV2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderbookV2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::Orderbooks(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksRequest& request, ::injective_derivative_exchange_rpc::OrderbooksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::OrderbooksRequest, ::injective_derivative_exchange_rpc::OrderbooksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Orderbooks_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::Orderbooks(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksRequest* request, ::injective_derivative_exchange_rpc::OrderbooksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::OrderbooksRequest, ::injective_derivative_exchange_rpc::OrderbooksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Orderbooks_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::Orderbooks(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksRequest* request, ::injective_derivative_exchange_rpc::OrderbooksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Orderbooks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrderbooksResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncOrderbooksRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::OrderbooksResponse, ::injective_derivative_exchange_rpc::OrderbooksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Orderbooks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrderbooksResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncOrderbooksRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderbooksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::OrderbooksV2(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksV2Request& request, ::injective_derivative_exchange_rpc::OrderbooksV2Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::OrderbooksV2Request, ::injective_derivative_exchange_rpc::OrderbooksV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrderbooksV2_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::OrderbooksV2(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksV2Request* request, ::injective_derivative_exchange_rpc::OrderbooksV2Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::OrderbooksV2Request, ::injective_derivative_exchange_rpc::OrderbooksV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderbooksV2_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::OrderbooksV2(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksV2Request* request, ::injective_derivative_exchange_rpc::OrderbooksV2Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrderbooksV2_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrderbooksV2Response>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncOrderbooksV2Raw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksV2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::OrderbooksV2Response, ::injective_derivative_exchange_rpc::OrderbooksV2Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrderbooksV2_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrderbooksV2Response>* InjectiveDerivativeExchangeRPC::Stub::AsyncOrderbooksV2Raw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrderbooksV2Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrderbooksV2Raw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>* InjectiveDerivativeExchangeRPC::Stub::StreamOrderbookRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>::Create(channel_.get(), rpcmethod_StreamOrderbook_, context, request);
}

void InjectiveDerivativeExchangeRPC::Stub::async::StreamOrderbook(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookRequest* request, ::grpc::ClientReadReactor< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamOrderbook_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncStreamOrderbookRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrderbook_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncStreamOrderbookRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrderbook_, context, request, false, nullptr);
}

::grpc::ClientReader< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>* InjectiveDerivativeExchangeRPC::Stub::StreamOrderbookV2Raw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookV2Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>::Create(channel_.get(), rpcmethod_StreamOrderbookV2_, context, request);
}

void InjectiveDerivativeExchangeRPC::Stub::async::StreamOrderbookV2(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookV2Request* request, ::grpc::ClientReadReactor< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamOrderbookV2_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>* InjectiveDerivativeExchangeRPC::Stub::AsyncStreamOrderbookV2Raw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookV2Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>::Create(channel_.get(), cq, rpcmethod_StreamOrderbookV2_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncStreamOrderbookV2Raw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookV2Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>::Create(channel_.get(), cq, rpcmethod_StreamOrderbookV2_, context, request, false, nullptr);
}

::grpc::ClientReader< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>* InjectiveDerivativeExchangeRPC::Stub::StreamOrderbookUpdateRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>::Create(channel_.get(), rpcmethod_StreamOrderbookUpdate_, context, request);
}

void InjectiveDerivativeExchangeRPC::Stub::async::StreamOrderbookUpdate(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest* request, ::grpc::ClientReadReactor< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamOrderbookUpdate_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncStreamOrderbookUpdateRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrderbookUpdate_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncStreamOrderbookUpdateRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrderbookUpdate_, context, request, false, nullptr);
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::Orders(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersRequest& request, ::injective_derivative_exchange_rpc::OrdersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::OrdersRequest, ::injective_derivative_exchange_rpc::OrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Orders_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::Orders(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersRequest* request, ::injective_derivative_exchange_rpc::OrdersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::OrdersRequest, ::injective_derivative_exchange_rpc::OrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Orders_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::Orders(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersRequest* request, ::injective_derivative_exchange_rpc::OrdersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Orders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrdersResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncOrdersRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::OrdersResponse, ::injective_derivative_exchange_rpc::OrdersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Orders_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrdersResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncOrdersRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrdersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::Positions(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::PositionsRequest& request, ::injective_derivative_exchange_rpc::PositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::PositionsRequest, ::injective_derivative_exchange_rpc::PositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Positions_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::Positions(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::PositionsRequest* request, ::injective_derivative_exchange_rpc::PositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::PositionsRequest, ::injective_derivative_exchange_rpc::PositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Positions_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::Positions(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::PositionsRequest* request, ::injective_derivative_exchange_rpc::PositionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Positions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::PositionsResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncPositionsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::PositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::PositionsResponse, ::injective_derivative_exchange_rpc::PositionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Positions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::PositionsResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncPositionsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::PositionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPositionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::LiquidablePositions(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::LiquidablePositionsRequest& request, ::injective_derivative_exchange_rpc::LiquidablePositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::LiquidablePositionsRequest, ::injective_derivative_exchange_rpc::LiquidablePositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LiquidablePositions_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::LiquidablePositions(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::LiquidablePositionsRequest* request, ::injective_derivative_exchange_rpc::LiquidablePositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::LiquidablePositionsRequest, ::injective_derivative_exchange_rpc::LiquidablePositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LiquidablePositions_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::LiquidablePositions(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::LiquidablePositionsRequest* request, ::injective_derivative_exchange_rpc::LiquidablePositionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LiquidablePositions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::LiquidablePositionsResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncLiquidablePositionsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::LiquidablePositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::LiquidablePositionsResponse, ::injective_derivative_exchange_rpc::LiquidablePositionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LiquidablePositions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::LiquidablePositionsResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncLiquidablePositionsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::LiquidablePositionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLiquidablePositionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::FundingPayments(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingPaymentsRequest& request, ::injective_derivative_exchange_rpc::FundingPaymentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::FundingPaymentsRequest, ::injective_derivative_exchange_rpc::FundingPaymentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FundingPayments_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::FundingPayments(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingPaymentsRequest* request, ::injective_derivative_exchange_rpc::FundingPaymentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::FundingPaymentsRequest, ::injective_derivative_exchange_rpc::FundingPaymentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FundingPayments_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::FundingPayments(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingPaymentsRequest* request, ::injective_derivative_exchange_rpc::FundingPaymentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FundingPayments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::FundingPaymentsResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncFundingPaymentsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::FundingPaymentsResponse, ::injective_derivative_exchange_rpc::FundingPaymentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FundingPayments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::FundingPaymentsResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncFundingPaymentsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFundingPaymentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::FundingRates(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingRatesRequest& request, ::injective_derivative_exchange_rpc::FundingRatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::FundingRatesRequest, ::injective_derivative_exchange_rpc::FundingRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FundingRates_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::FundingRates(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingRatesRequest* request, ::injective_derivative_exchange_rpc::FundingRatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::FundingRatesRequest, ::injective_derivative_exchange_rpc::FundingRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FundingRates_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::FundingRates(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingRatesRequest* request, ::injective_derivative_exchange_rpc::FundingRatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FundingRates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::FundingRatesResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncFundingRatesRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingRatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::FundingRatesResponse, ::injective_derivative_exchange_rpc::FundingRatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FundingRates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::FundingRatesResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncFundingRatesRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::FundingRatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFundingRatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_derivative_exchange_rpc::StreamPositionsResponse>* InjectiveDerivativeExchangeRPC::Stub::StreamPositionsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamPositionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_derivative_exchange_rpc::StreamPositionsResponse>::Create(channel_.get(), rpcmethod_StreamPositions_, context, request);
}

void InjectiveDerivativeExchangeRPC::Stub::async::StreamPositions(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamPositionsRequest* request, ::grpc::ClientReadReactor< ::injective_derivative_exchange_rpc::StreamPositionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_derivative_exchange_rpc::StreamPositionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamPositions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamPositionsResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncStreamPositionsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamPositionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamPositionsResponse>::Create(channel_.get(), cq, rpcmethod_StreamPositions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamPositionsResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncStreamPositionsRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamPositionsResponse>::Create(channel_.get(), cq, rpcmethod_StreamPositions_, context, request, false, nullptr);
}

::grpc::ClientReader< ::injective_derivative_exchange_rpc::StreamOrdersResponse>* InjectiveDerivativeExchangeRPC::Stub::StreamOrdersRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_derivative_exchange_rpc::StreamOrdersResponse>::Create(channel_.get(), rpcmethod_StreamOrders_, context, request);
}

void InjectiveDerivativeExchangeRPC::Stub::async::StreamOrders(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersRequest* request, ::grpc::ClientReadReactor< ::injective_derivative_exchange_rpc::StreamOrdersResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_derivative_exchange_rpc::StreamOrdersResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamOrders_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrdersResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncStreamOrdersRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrdersResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrders_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrdersResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncStreamOrdersRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrdersResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrders_, context, request, false, nullptr);
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::Trades(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::TradesRequest& request, ::injective_derivative_exchange_rpc::TradesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::TradesRequest, ::injective_derivative_exchange_rpc::TradesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Trades_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::Trades(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::TradesRequest* request, ::injective_derivative_exchange_rpc::TradesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::TradesRequest, ::injective_derivative_exchange_rpc::TradesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Trades_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::Trades(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::TradesRequest* request, ::injective_derivative_exchange_rpc::TradesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Trades_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::TradesResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncTradesRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::TradesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::TradesResponse, ::injective_derivative_exchange_rpc::TradesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Trades_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::TradesResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncTradesRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::TradesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTradesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_derivative_exchange_rpc::StreamTradesResponse>* InjectiveDerivativeExchangeRPC::Stub::StreamTradesRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamTradesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_derivative_exchange_rpc::StreamTradesResponse>::Create(channel_.get(), rpcmethod_StreamTrades_, context, request);
}

void InjectiveDerivativeExchangeRPC::Stub::async::StreamTrades(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamTradesRequest* request, ::grpc::ClientReadReactor< ::injective_derivative_exchange_rpc::StreamTradesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_derivative_exchange_rpc::StreamTradesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamTrades_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamTradesResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncStreamTradesRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamTradesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamTradesResponse>::Create(channel_.get(), cq, rpcmethod_StreamTrades_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamTradesResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncStreamTradesRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamTradesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamTradesResponse>::Create(channel_.get(), cq, rpcmethod_StreamTrades_, context, request, false, nullptr);
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::SubaccountOrdersList(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest& request, ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountOrdersList_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::SubaccountOrdersList(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest* request, ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountOrdersList_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::SubaccountOrdersList(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest* request, ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountOrdersList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncSubaccountOrdersListRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse, ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountOrdersList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncSubaccountOrdersListRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountOrdersListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::SubaccountTradesList(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountTradesListRequest& request, ::injective_derivative_exchange_rpc::SubaccountTradesListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::SubaccountTradesListRequest, ::injective_derivative_exchange_rpc::SubaccountTradesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubaccountTradesList_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::SubaccountTradesList(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountTradesListRequest* request, ::injective_derivative_exchange_rpc::SubaccountTradesListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::SubaccountTradesListRequest, ::injective_derivative_exchange_rpc::SubaccountTradesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountTradesList_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::SubaccountTradesList(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountTradesListRequest* request, ::injective_derivative_exchange_rpc::SubaccountTradesListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubaccountTradesList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::SubaccountTradesListResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncSubaccountTradesListRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountTradesListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::SubaccountTradesListResponse, ::injective_derivative_exchange_rpc::SubaccountTradesListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubaccountTradesList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::SubaccountTradesListResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncSubaccountTradesListRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::SubaccountTradesListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubaccountTradesListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveDerivativeExchangeRPC::Stub::OrdersHistory(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersHistoryRequest& request, ::injective_derivative_exchange_rpc::OrdersHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_derivative_exchange_rpc::OrdersHistoryRequest, ::injective_derivative_exchange_rpc::OrdersHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OrdersHistory_, context, request, response);
}

void InjectiveDerivativeExchangeRPC::Stub::async::OrdersHistory(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersHistoryRequest* request, ::injective_derivative_exchange_rpc::OrdersHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_derivative_exchange_rpc::OrdersHistoryRequest, ::injective_derivative_exchange_rpc::OrdersHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersHistory_, context, request, response, std::move(f));
}

void InjectiveDerivativeExchangeRPC::Stub::async::OrdersHistory(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersHistoryRequest* request, ::injective_derivative_exchange_rpc::OrdersHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OrdersHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrdersHistoryResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncOrdersHistoryRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_derivative_exchange_rpc::OrdersHistoryResponse, ::injective_derivative_exchange_rpc::OrdersHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OrdersHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_derivative_exchange_rpc::OrdersHistoryResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncOrdersHistoryRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::OrdersHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOrdersHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>* InjectiveDerivativeExchangeRPC::Stub::StreamOrdersHistoryRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>::Create(channel_.get(), rpcmethod_StreamOrdersHistory_, context, request);
}

void InjectiveDerivativeExchangeRPC::Stub::async::StreamOrdersHistory(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest* request, ::grpc::ClientReadReactor< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamOrdersHistory_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>* InjectiveDerivativeExchangeRPC::Stub::AsyncStreamOrdersHistoryRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrdersHistory_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>* InjectiveDerivativeExchangeRPC::Stub::PrepareAsyncStreamOrdersHistoryRaw(::grpc::ClientContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>::Create(channel_.get(), cq, rpcmethod_StreamOrdersHistory_, context, request, false, nullptr);
}

InjectiveDerivativeExchangeRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::MarketsRequest, ::injective_derivative_exchange_rpc::MarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::MarketsRequest* req,
             ::injective_derivative_exchange_rpc::MarketsResponse* resp) {
               return service->Markets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::MarketRequest, ::injective_derivative_exchange_rpc::MarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::MarketRequest* req,
             ::injective_derivative_exchange_rpc::MarketResponse* resp) {
               return service->Market(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::StreamMarketRequest, ::injective_derivative_exchange_rpc::StreamMarketResponse>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::StreamMarketRequest* req,
             ::grpc::ServerWriter<::injective_derivative_exchange_rpc::StreamMarketResponse>* writer) {
               return service->StreamMarket(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest* req,
             ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse* resp) {
               return service->BinaryOptionsMarkets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest, ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest* req,
             ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse* resp) {
               return service->BinaryOptionsMarket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::OrderbookRequest, ::injective_derivative_exchange_rpc::OrderbookResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::OrderbookRequest* req,
             ::injective_derivative_exchange_rpc::OrderbookResponse* resp) {
               return service->Orderbook(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::OrderbookV2Request, ::injective_derivative_exchange_rpc::OrderbookV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::OrderbookV2Request* req,
             ::injective_derivative_exchange_rpc::OrderbookV2Response* resp) {
               return service->OrderbookV2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::OrderbooksRequest, ::injective_derivative_exchange_rpc::OrderbooksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::OrderbooksRequest* req,
             ::injective_derivative_exchange_rpc::OrderbooksResponse* resp) {
               return service->Orderbooks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::OrderbooksV2Request, ::injective_derivative_exchange_rpc::OrderbooksV2Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::OrderbooksV2Request* req,
             ::injective_derivative_exchange_rpc::OrderbooksV2Response* resp) {
               return service->OrderbooksV2(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::StreamOrderbookRequest, ::injective_derivative_exchange_rpc::StreamOrderbookResponse>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::StreamOrderbookRequest* req,
             ::grpc::ServerWriter<::injective_derivative_exchange_rpc::StreamOrderbookResponse>* writer) {
               return service->StreamOrderbook(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::StreamOrderbookV2Request, ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::StreamOrderbookV2Request* req,
             ::grpc::ServerWriter<::injective_derivative_exchange_rpc::StreamOrderbookV2Response>* writer) {
               return service->StreamOrderbookV2(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest, ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest* req,
             ::grpc::ServerWriter<::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>* writer) {
               return service->StreamOrderbookUpdate(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::OrdersRequest, ::injective_derivative_exchange_rpc::OrdersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::OrdersRequest* req,
             ::injective_derivative_exchange_rpc::OrdersResponse* resp) {
               return service->Orders(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::PositionsRequest, ::injective_derivative_exchange_rpc::PositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::PositionsRequest* req,
             ::injective_derivative_exchange_rpc::PositionsResponse* resp) {
               return service->Positions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::LiquidablePositionsRequest, ::injective_derivative_exchange_rpc::LiquidablePositionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::LiquidablePositionsRequest* req,
             ::injective_derivative_exchange_rpc::LiquidablePositionsResponse* resp) {
               return service->LiquidablePositions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::FundingPaymentsRequest, ::injective_derivative_exchange_rpc::FundingPaymentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::FundingPaymentsRequest* req,
             ::injective_derivative_exchange_rpc::FundingPaymentsResponse* resp) {
               return service->FundingPayments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::FundingRatesRequest, ::injective_derivative_exchange_rpc::FundingRatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::FundingRatesRequest* req,
             ::injective_derivative_exchange_rpc::FundingRatesResponse* resp) {
               return service->FundingRates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[17],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::StreamPositionsRequest, ::injective_derivative_exchange_rpc::StreamPositionsResponse>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::StreamPositionsRequest* req,
             ::grpc::ServerWriter<::injective_derivative_exchange_rpc::StreamPositionsResponse>* writer) {
               return service->StreamPositions(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[18],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::StreamOrdersRequest, ::injective_derivative_exchange_rpc::StreamOrdersResponse>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::StreamOrdersRequest* req,
             ::grpc::ServerWriter<::injective_derivative_exchange_rpc::StreamOrdersResponse>* writer) {
               return service->StreamOrders(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::TradesRequest, ::injective_derivative_exchange_rpc::TradesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::TradesRequest* req,
             ::injective_derivative_exchange_rpc::TradesResponse* resp) {
               return service->Trades(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[20],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::StreamTradesRequest, ::injective_derivative_exchange_rpc::StreamTradesResponse>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::StreamTradesRequest* req,
             ::grpc::ServerWriter<::injective_derivative_exchange_rpc::StreamTradesResponse>* writer) {
               return service->StreamTrades(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest* req,
             ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse* resp) {
               return service->SubaccountOrdersList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::SubaccountTradesListRequest, ::injective_derivative_exchange_rpc::SubaccountTradesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::SubaccountTradesListRequest* req,
             ::injective_derivative_exchange_rpc::SubaccountTradesListResponse* resp) {
               return service->SubaccountTradesList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::OrdersHistoryRequest, ::injective_derivative_exchange_rpc::OrdersHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::OrdersHistoryRequest* req,
             ::injective_derivative_exchange_rpc::OrdersHistoryResponse* resp) {
               return service->OrdersHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveDerivativeExchangeRPC_method_names[24],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveDerivativeExchangeRPC::Service, ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest, ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>(
          [](InjectiveDerivativeExchangeRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest* req,
             ::grpc::ServerWriter<::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>* writer) {
               return service->StreamOrdersHistory(ctx, req, writer);
             }, this)));
}

InjectiveDerivativeExchangeRPC::Service::~Service() {
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::Markets(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::MarketsRequest* request, ::injective_derivative_exchange_rpc::MarketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::Market(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::MarketRequest* request, ::injective_derivative_exchange_rpc::MarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::StreamMarket(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::StreamMarketRequest* request, ::grpc::ServerWriter< ::injective_derivative_exchange_rpc::StreamMarketResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::BinaryOptionsMarkets(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest* request, ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::BinaryOptionsMarket(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest* request, ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::Orderbook(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::OrderbookRequest* request, ::injective_derivative_exchange_rpc::OrderbookResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::OrderbookV2(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::OrderbookV2Request* request, ::injective_derivative_exchange_rpc::OrderbookV2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::Orderbooks(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::OrderbooksRequest* request, ::injective_derivative_exchange_rpc::OrderbooksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::OrderbooksV2(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::OrderbooksV2Request* request, ::injective_derivative_exchange_rpc::OrderbooksV2Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::StreamOrderbook(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookRequest* request, ::grpc::ServerWriter< ::injective_derivative_exchange_rpc::StreamOrderbookResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::StreamOrderbookV2(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookV2Request* request, ::grpc::ServerWriter< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::StreamOrderbookUpdate(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest* request, ::grpc::ServerWriter< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::Orders(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::OrdersRequest* request, ::injective_derivative_exchange_rpc::OrdersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::Positions(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::PositionsRequest* request, ::injective_derivative_exchange_rpc::PositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::LiquidablePositions(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::LiquidablePositionsRequest* request, ::injective_derivative_exchange_rpc::LiquidablePositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::FundingPayments(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::FundingPaymentsRequest* request, ::injective_derivative_exchange_rpc::FundingPaymentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::FundingRates(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::FundingRatesRequest* request, ::injective_derivative_exchange_rpc::FundingRatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::StreamPositions(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::StreamPositionsRequest* request, ::grpc::ServerWriter< ::injective_derivative_exchange_rpc::StreamPositionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::StreamOrders(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersRequest* request, ::grpc::ServerWriter< ::injective_derivative_exchange_rpc::StreamOrdersResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::Trades(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::TradesRequest* request, ::injective_derivative_exchange_rpc::TradesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::StreamTrades(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::StreamTradesRequest* request, ::grpc::ServerWriter< ::injective_derivative_exchange_rpc::StreamTradesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::SubaccountOrdersList(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest* request, ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::SubaccountTradesList(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::SubaccountTradesListRequest* request, ::injective_derivative_exchange_rpc::SubaccountTradesListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::OrdersHistory(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::OrdersHistoryRequest* request, ::injective_derivative_exchange_rpc::OrdersHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveDerivativeExchangeRPC::Service::StreamOrdersHistory(::grpc::ServerContext* context, const ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest* request, ::grpc::ServerWriter< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective_derivative_exchange_rpc


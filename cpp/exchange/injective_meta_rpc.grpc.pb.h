// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_meta_rpc.proto
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveMetaRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#ifndef GRPC_exchange_2finjective_5fmeta_5frpc_2eproto__INCLUDED
#define GRPC_exchange_2finjective_5fmeta_5frpc_2eproto__INCLUDED

#include "exchange/injective_meta_rpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective_meta_rpc {

// InjectiveMetaRPC is a special API subset to get info about server.
class InjectiveMetaRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "injective_meta_rpc.InjectiveMetaRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Endpoint for checking server health.
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::injective_meta_rpc::PingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    // Returns injective-exchange version.
    virtual ::grpc::Status Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::injective_meta_rpc::VersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::VersionResponse>> AsyncVersion(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::VersionResponse>>(AsyncVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::VersionResponse>> PrepareAsyncVersion(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::VersionResponse>>(PrepareAsyncVersionRaw(context, request, cq));
    }
    // Gets connection info
    virtual ::grpc::Status Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::injective_meta_rpc::InfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::InfoResponse>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    // Stream keepalive, if server exits, a shutdown event will be sent over this
    // channel.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>> StreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>>(StreamKeepaliveRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>> AsyncStreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>>(AsyncStreamKeepaliveRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>> PrepareAsyncStreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>>(PrepareAsyncStreamKeepaliveRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Endpoint for checking server health.
      virtual void Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns injective-exchange version.
      virtual void Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets connection info
      virtual void Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stream keepalive, if server exits, a shutdown event will be sent over this
      // channel.
      virtual void StreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest* request, ::grpc::ClientReadReactor< ::injective_meta_rpc::StreamKeepaliveResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::VersionResponse>* AsyncVersionRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::VersionResponse>* PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_meta_rpc::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>* StreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>* AsyncStreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::injective_meta_rpc::StreamKeepaliveResponse>* PrepareAsyncStreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::injective_meta_rpc::PingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::injective_meta_rpc::VersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::VersionResponse>> AsyncVersion(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::VersionResponse>>(AsyncVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::VersionResponse>> PrepareAsyncVersion(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::VersionResponse>>(PrepareAsyncVersionRaw(context, request, cq));
    }
    ::grpc::Status Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::injective_meta_rpc::InfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::InfoResponse>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::injective_meta_rpc::StreamKeepaliveResponse>> StreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::injective_meta_rpc::StreamKeepaliveResponse>>(StreamKeepaliveRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_meta_rpc::StreamKeepaliveResponse>> AsyncStreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_meta_rpc::StreamKeepaliveResponse>>(AsyncStreamKeepaliveRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_meta_rpc::StreamKeepaliveResponse>> PrepareAsyncStreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::injective_meta_rpc::StreamKeepaliveResponse>>(PrepareAsyncStreamKeepaliveRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response, std::function<void(::grpc::Status)>) override;
      void Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response, std::function<void(::grpc::Status)>) override;
      void Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest* request, ::grpc::ClientReadReactor< ::injective_meta_rpc::StreamKeepaliveResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::VersionResponse>* AsyncVersionRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::VersionResponse>* PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::injective_meta_rpc::StreamKeepaliveResponse>* StreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request) override;
    ::grpc::ClientAsyncReader< ::injective_meta_rpc::StreamKeepaliveResponse>* AsyncStreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::injective_meta_rpc::StreamKeepaliveResponse>* PrepareAsyncStreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_Version_;
    const ::grpc::internal::RpcMethod rpcmethod_Info_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamKeepalive_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Endpoint for checking server health.
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response);
    // Returns injective-exchange version.
    virtual ::grpc::Status Version(::grpc::ServerContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response);
    // Gets connection info
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response);
    // Stream keepalive, if server exits, a shutdown event will be sent over this
    // channel.
    virtual ::grpc::Status StreamKeepalive(::grpc::ServerContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest* request, ::grpc::ServerWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::PingRequest* /*request*/, ::injective_meta_rpc::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::injective_meta_rpc::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_meta_rpc::PingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Version() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::VersionRequest* /*request*/, ::injective_meta_rpc::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVersion(::grpc::ServerContext* context, ::injective_meta_rpc::VersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_meta_rpc::VersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::InfoRequest* /*request*/, ::injective_meta_rpc::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::injective_meta_rpc::InfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_meta_rpc::InfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamKeepalive() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StreamKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamKeepalive(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::StreamKeepaliveRequest* /*request*/, ::grpc::ServerWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamKeepalive(::grpc::ServerContext* context, ::injective_meta_rpc::StreamKeepaliveRequest* request, ::grpc::ServerAsyncWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_Version<WithAsyncMethod_Info<WithAsyncMethod_StreamKeepalive<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_meta_rpc::PingRequest, ::injective_meta_rpc::PingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::injective_meta_rpc::PingRequest, ::injective_meta_rpc::PingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_meta_rpc::PingRequest, ::injective_meta_rpc::PingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::PingRequest* /*request*/, ::injective_meta_rpc::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_meta_rpc::PingRequest* /*request*/, ::injective_meta_rpc::PingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Version() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_meta_rpc::VersionRequest, ::injective_meta_rpc::VersionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response) { return this->Version(context, request, response); }));}
    void SetMessageAllocatorFor_Version(
        ::grpc::MessageAllocator< ::injective_meta_rpc::VersionRequest, ::injective_meta_rpc::VersionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_meta_rpc::VersionRequest, ::injective_meta_rpc::VersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::VersionRequest* /*request*/, ::injective_meta_rpc::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Version(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_meta_rpc::VersionRequest* /*request*/, ::injective_meta_rpc::VersionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Info() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_meta_rpc::InfoRequest, ::injective_meta_rpc::InfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response) { return this->Info(context, request, response); }));}
    void SetMessageAllocatorFor_Info(
        ::grpc::MessageAllocator< ::injective_meta_rpc::InfoRequest, ::injective_meta_rpc::InfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_meta_rpc::InfoRequest, ::injective_meta_rpc::InfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::InfoRequest* /*request*/, ::injective_meta_rpc::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Info(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_meta_rpc::InfoRequest* /*request*/, ::injective_meta_rpc::InfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamKeepalive() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::injective_meta_rpc::StreamKeepaliveRequest, ::injective_meta_rpc::StreamKeepaliveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest* request) { return this->StreamKeepalive(context, request); }));
    }
    ~WithCallbackMethod_StreamKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamKeepalive(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::StreamKeepaliveRequest* /*request*/, ::grpc::ServerWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::injective_meta_rpc::StreamKeepaliveResponse>* StreamKeepalive(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_meta_rpc::StreamKeepaliveRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Ping<WithCallbackMethod_Version<WithCallbackMethod_Info<WithCallbackMethod_StreamKeepalive<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::PingRequest* /*request*/, ::injective_meta_rpc::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Version() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::VersionRequest* /*request*/, ::injective_meta_rpc::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::InfoRequest* /*request*/, ::injective_meta_rpc::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamKeepalive() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StreamKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamKeepalive(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::StreamKeepaliveRequest* /*request*/, ::grpc::ServerWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::PingRequest* /*request*/, ::injective_meta_rpc::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Version() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::VersionRequest* /*request*/, ::injective_meta_rpc::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Info() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::InfoRequest* /*request*/, ::injective_meta_rpc::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamKeepalive() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StreamKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamKeepalive(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::StreamKeepaliveRequest* /*request*/, ::grpc::ServerWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamKeepalive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::PingRequest* /*request*/, ::injective_meta_rpc::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Version() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Version(context, request, response); }));
    }
    ~WithRawCallbackMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::VersionRequest* /*request*/, ::injective_meta_rpc::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Version(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Info() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Info(context, request, response); }));
    }
    ~WithRawCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::InfoRequest* /*request*/, ::injective_meta_rpc::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamKeepalive() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamKeepalive(context, request); }));
    }
    ~WithRawCallbackMethod_StreamKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamKeepalive(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::StreamKeepaliveRequest* /*request*/, ::grpc::ServerWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamKeepalive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_meta_rpc::PingRequest, ::injective_meta_rpc::PingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_meta_rpc::PingRequest, ::injective_meta_rpc::PingResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::PingRequest* /*request*/, ::injective_meta_rpc::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_meta_rpc::PingRequest,::injective_meta_rpc::PingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Version : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Version() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_meta_rpc::VersionRequest, ::injective_meta_rpc::VersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_meta_rpc::VersionRequest, ::injective_meta_rpc::VersionResponse>* streamer) {
                       return this->StreamedVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Version() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Version(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::VersionRequest* /*request*/, ::injective_meta_rpc::VersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_meta_rpc::VersionRequest,::injective_meta_rpc::VersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_meta_rpc::InfoRequest, ::injective_meta_rpc::InfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_meta_rpc::InfoRequest, ::injective_meta_rpc::InfoResponse>* streamer) {
                       return this->StreamedInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::InfoRequest* /*request*/, ::injective_meta_rpc::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_meta_rpc::InfoRequest,::injective_meta_rpc::InfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Version<WithStreamedUnaryMethod_Info<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamKeepalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamKeepalive() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::injective_meta_rpc::StreamKeepaliveRequest, ::injective_meta_rpc::StreamKeepaliveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::injective_meta_rpc::StreamKeepaliveRequest, ::injective_meta_rpc::StreamKeepaliveResponse>* streamer) {
                       return this->StreamedStreamKeepalive(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamKeepalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamKeepalive(::grpc::ServerContext* /*context*/, const ::injective_meta_rpc::StreamKeepaliveRequest* /*request*/, ::grpc::ServerWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamKeepalive(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::injective_meta_rpc::StreamKeepaliveRequest,::injective_meta_rpc::StreamKeepaliveResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamKeepalive<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_Version<WithStreamedUnaryMethod_Info<WithSplitStreamingMethod_StreamKeepalive<Service > > > > StreamedService;
};

}  // namespace injective_meta_rpc


#endif  // GRPC_exchange_2finjective_5fmeta_5frpc_2eproto__INCLUDED

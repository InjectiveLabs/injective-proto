// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_exchange_rpc.proto
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveExchangeRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#ifndef GRPC_exchange_2finjective_5fexchange_5frpc_2eproto__INCLUDED
#define GRPC_exchange_2finjective_5fexchange_5frpc_2eproto__INCLUDED

#include "exchange/injective_exchange_rpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace injective_exchange_rpc {

// InjectiveExchangeRPC defines gRPC API of an Injective Exchange service.
class InjectiveExchangeRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "injective_exchange_rpc.InjectiveExchangeRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetTx gets transaction details by hash.
    virtual ::grpc::Status GetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::injective_exchange_rpc::GetTxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetTxResponse>> AsyncGetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetTxResponse>>(AsyncGetTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetTxResponse>> PrepareAsyncGetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetTxResponse>>(PrepareAsyncGetTxRaw(context, request, cq));
    }
    // PrepareTx generates a Web3-signable body for a Cosmos transaction
    virtual ::grpc::Status PrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::injective_exchange_rpc::PrepareTxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareTxResponse>> AsyncPrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareTxResponse>>(AsyncPrepareTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareTxResponse>> PrepareAsyncPrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareTxResponse>>(PrepareAsyncPrepareTxRaw(context, request, cq));
    }
    // BroadcastTx broadcasts a signed Web3 transaction
    virtual ::grpc::Status BroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::injective_exchange_rpc::BroadcastTxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastTxResponse>> AsyncBroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastTxResponse>>(AsyncBroadcastTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastTxResponse>> PrepareAsyncBroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastTxResponse>>(PrepareAsyncBroadcastTxRaw(context, request, cq));
    }
    // PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
    virtual ::grpc::Status PrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::injective_exchange_rpc::PrepareCosmosTxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareCosmosTxResponse>> AsyncPrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareCosmosTxResponse>>(AsyncPrepareCosmosTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareCosmosTxResponse>> PrepareAsyncPrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareCosmosTxResponse>>(PrepareAsyncPrepareCosmosTxRaw(context, request, cq));
    }
    // BroadcastCosmosTx broadcasts a signed Web3 transaction
    virtual ::grpc::Status BroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::injective_exchange_rpc::BroadcastCosmosTxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastCosmosTxResponse>> AsyncBroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastCosmosTxResponse>>(AsyncBroadcastCosmosTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastCosmosTxResponse>> PrepareAsyncBroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastCosmosTxResponse>>(PrepareAsyncBroadcastCosmosTxRaw(context, request, cq));
    }
    // Return fee payer information's
    virtual ::grpc::Status GetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::injective_exchange_rpc::GetFeePayerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetFeePayerResponse>> AsyncGetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetFeePayerResponse>>(AsyncGetFeePayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetFeePayerResponse>> PrepareAsyncGetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetFeePayerResponse>>(PrepareAsyncGetFeePayerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // GetTx gets transaction details by hash.
      virtual void GetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest* request, ::injective_exchange_rpc::GetTxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest* request, ::injective_exchange_rpc::GetTxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PrepareTx generates a Web3-signable body for a Cosmos transaction
      virtual void PrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest* request, ::injective_exchange_rpc::PrepareTxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest* request, ::injective_exchange_rpc::PrepareTxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BroadcastTx broadcasts a signed Web3 transaction
      virtual void BroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest* request, ::injective_exchange_rpc::BroadcastTxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest* request, ::injective_exchange_rpc::BroadcastTxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
      virtual void PrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest* request, ::injective_exchange_rpc::PrepareCosmosTxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest* request, ::injective_exchange_rpc::PrepareCosmosTxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BroadcastCosmosTx broadcasts a signed Web3 transaction
      virtual void BroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* request, ::injective_exchange_rpc::BroadcastCosmosTxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* request, ::injective_exchange_rpc::BroadcastCosmosTxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Return fee payer information's
      virtual void GetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest* request, ::injective_exchange_rpc::GetFeePayerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest* request, ::injective_exchange_rpc::GetFeePayerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetTxResponse>* AsyncGetTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetTxResponse>* PrepareAsyncGetTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareTxResponse>* AsyncPrepareTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareTxResponse>* PrepareAsyncPrepareTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastTxResponse>* AsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastTxResponse>* PrepareAsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareCosmosTxResponse>* AsyncPrepareCosmosTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::PrepareCosmosTxResponse>* PrepareAsyncPrepareCosmosTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastCosmosTxResponse>* AsyncBroadcastCosmosTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::BroadcastCosmosTxResponse>* PrepareAsyncBroadcastCosmosTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetFeePayerResponse>* AsyncGetFeePayerRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::injective_exchange_rpc::GetFeePayerResponse>* PrepareAsyncGetFeePayerRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::injective_exchange_rpc::GetTxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetTxResponse>> AsyncGetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetTxResponse>>(AsyncGetTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetTxResponse>> PrepareAsyncGetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetTxResponse>>(PrepareAsyncGetTxRaw(context, request, cq));
    }
    ::grpc::Status PrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::injective_exchange_rpc::PrepareTxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareTxResponse>> AsyncPrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareTxResponse>>(AsyncPrepareTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareTxResponse>> PrepareAsyncPrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareTxResponse>>(PrepareAsyncPrepareTxRaw(context, request, cq));
    }
    ::grpc::Status BroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::injective_exchange_rpc::BroadcastTxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastTxResponse>> AsyncBroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastTxResponse>>(AsyncBroadcastTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastTxResponse>> PrepareAsyncBroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastTxResponse>>(PrepareAsyncBroadcastTxRaw(context, request, cq));
    }
    ::grpc::Status PrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::injective_exchange_rpc::PrepareCosmosTxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareCosmosTxResponse>> AsyncPrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareCosmosTxResponse>>(AsyncPrepareCosmosTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareCosmosTxResponse>> PrepareAsyncPrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareCosmosTxResponse>>(PrepareAsyncPrepareCosmosTxRaw(context, request, cq));
    }
    ::grpc::Status BroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::injective_exchange_rpc::BroadcastCosmosTxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastCosmosTxResponse>> AsyncBroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastCosmosTxResponse>>(AsyncBroadcastCosmosTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastCosmosTxResponse>> PrepareAsyncBroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastCosmosTxResponse>>(PrepareAsyncBroadcastCosmosTxRaw(context, request, cq));
    }
    ::grpc::Status GetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::injective_exchange_rpc::GetFeePayerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetFeePayerResponse>> AsyncGetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetFeePayerResponse>>(AsyncGetFeePayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetFeePayerResponse>> PrepareAsyncGetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetFeePayerResponse>>(PrepareAsyncGetFeePayerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest* request, ::injective_exchange_rpc::GetTxResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest* request, ::injective_exchange_rpc::GetTxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest* request, ::injective_exchange_rpc::PrepareTxResponse* response, std::function<void(::grpc::Status)>) override;
      void PrepareTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest* request, ::injective_exchange_rpc::PrepareTxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest* request, ::injective_exchange_rpc::BroadcastTxResponse* response, std::function<void(::grpc::Status)>) override;
      void BroadcastTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest* request, ::injective_exchange_rpc::BroadcastTxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest* request, ::injective_exchange_rpc::PrepareCosmosTxResponse* response, std::function<void(::grpc::Status)>) override;
      void PrepareCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest* request, ::injective_exchange_rpc::PrepareCosmosTxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* request, ::injective_exchange_rpc::BroadcastCosmosTxResponse* response, std::function<void(::grpc::Status)>) override;
      void BroadcastCosmosTx(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* request, ::injective_exchange_rpc::BroadcastCosmosTxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest* request, ::injective_exchange_rpc::GetFeePayerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFeePayer(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest* request, ::injective_exchange_rpc::GetFeePayerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetTxResponse>* AsyncGetTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetTxResponse>* PrepareAsyncGetTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareTxResponse>* AsyncPrepareTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareTxResponse>* PrepareAsyncPrepareTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastTxResponse>* AsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastTxResponse>* PrepareAsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareCosmosTxResponse>* AsyncPrepareCosmosTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::PrepareCosmosTxResponse>* PrepareAsyncPrepareCosmosTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastCosmosTxResponse>* AsyncBroadcastCosmosTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::BroadcastCosmosTxResponse>* PrepareAsyncBroadcastCosmosTxRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetFeePayerResponse>* AsyncGetFeePayerRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::injective_exchange_rpc::GetFeePayerResponse>* PrepareAsyncGetFeePayerRaw(::grpc::ClientContext* context, const ::injective_exchange_rpc::GetFeePayerRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTx_;
    const ::grpc::internal::RpcMethod rpcmethod_PrepareTx_;
    const ::grpc::internal::RpcMethod rpcmethod_BroadcastTx_;
    const ::grpc::internal::RpcMethod rpcmethod_PrepareCosmosTx_;
    const ::grpc::internal::RpcMethod rpcmethod_BroadcastCosmosTx_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFeePayer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetTx gets transaction details by hash.
    virtual ::grpc::Status GetTx(::grpc::ServerContext* context, const ::injective_exchange_rpc::GetTxRequest* request, ::injective_exchange_rpc::GetTxResponse* response);
    // PrepareTx generates a Web3-signable body for a Cosmos transaction
    virtual ::grpc::Status PrepareTx(::grpc::ServerContext* context, const ::injective_exchange_rpc::PrepareTxRequest* request, ::injective_exchange_rpc::PrepareTxResponse* response);
    // BroadcastTx broadcasts a signed Web3 transaction
    virtual ::grpc::Status BroadcastTx(::grpc::ServerContext* context, const ::injective_exchange_rpc::BroadcastTxRequest* request, ::injective_exchange_rpc::BroadcastTxResponse* response);
    // PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
    virtual ::grpc::Status PrepareCosmosTx(::grpc::ServerContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest* request, ::injective_exchange_rpc::PrepareCosmosTxResponse* response);
    // BroadcastCosmosTx broadcasts a signed Web3 transaction
    virtual ::grpc::Status BroadcastCosmosTx(::grpc::ServerContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* request, ::injective_exchange_rpc::BroadcastCosmosTxResponse* response);
    // Return fee payer information's
    virtual ::grpc::Status GetFeePayer(::grpc::ServerContext* context, const ::injective_exchange_rpc::GetFeePayerRequest* request, ::injective_exchange_rpc::GetFeePayerResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTx() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetTxRequest* /*request*/, ::injective_exchange_rpc::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTx(::grpc::ServerContext* context, ::injective_exchange_rpc::GetTxRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_exchange_rpc::GetTxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrepareTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PrepareTx() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PrepareTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareTxRequest* /*request*/, ::injective_exchange_rpc::PrepareTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareTx(::grpc::ServerContext* context, ::injective_exchange_rpc::PrepareTxRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_exchange_rpc::PrepareTxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastTx(::grpc::ServerContext* context, ::injective_exchange_rpc::BroadcastTxRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_exchange_rpc::BroadcastTxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrepareCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PrepareCosmosTx() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PrepareCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareCosmosTxRequest* /*request*/, ::injective_exchange_rpc::PrepareCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareCosmosTx(::grpc::ServerContext* context, ::injective_exchange_rpc::PrepareCosmosTxRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_exchange_rpc::PrepareCosmosTxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BroadcastCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BroadcastCosmosTx() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_BroadcastCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastCosmosTx(::grpc::ServerContext* context, ::injective_exchange_rpc::BroadcastCosmosTxRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_exchange_rpc::BroadcastCosmosTxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFeePayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFeePayer() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetFeePayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeePayer(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetFeePayerRequest* /*request*/, ::injective_exchange_rpc::GetFeePayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFeePayer(::grpc::ServerContext* context, ::injective_exchange_rpc::GetFeePayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::injective_exchange_rpc::GetFeePayerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTx<WithAsyncMethod_PrepareTx<WithAsyncMethod_BroadcastTx<WithAsyncMethod_PrepareCosmosTx<WithAsyncMethod_BroadcastCosmosTx<WithAsyncMethod_GetFeePayer<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTx() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::GetTxRequest, ::injective_exchange_rpc::GetTxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_exchange_rpc::GetTxRequest* request, ::injective_exchange_rpc::GetTxResponse* response) { return this->GetTx(context, request, response); }));}
    void SetMessageAllocatorFor_GetTx(
        ::grpc::MessageAllocator< ::injective_exchange_rpc::GetTxRequest, ::injective_exchange_rpc::GetTxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::GetTxRequest, ::injective_exchange_rpc::GetTxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetTxRequest* /*request*/, ::injective_exchange_rpc::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTx(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_exchange_rpc::GetTxRequest* /*request*/, ::injective_exchange_rpc::GetTxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PrepareTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PrepareTx() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::PrepareTxRequest, ::injective_exchange_rpc::PrepareTxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_exchange_rpc::PrepareTxRequest* request, ::injective_exchange_rpc::PrepareTxResponse* response) { return this->PrepareTx(context, request, response); }));}
    void SetMessageAllocatorFor_PrepareTx(
        ::grpc::MessageAllocator< ::injective_exchange_rpc::PrepareTxRequest, ::injective_exchange_rpc::PrepareTxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::PrepareTxRequest, ::injective_exchange_rpc::PrepareTxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PrepareTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareTxRequest* /*request*/, ::injective_exchange_rpc::PrepareTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrepareTx(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_exchange_rpc::PrepareTxRequest* /*request*/, ::injective_exchange_rpc::PrepareTxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::BroadcastTxRequest, ::injective_exchange_rpc::BroadcastTxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_exchange_rpc::BroadcastTxRequest* request, ::injective_exchange_rpc::BroadcastTxResponse* response) { return this->BroadcastTx(context, request, response); }));}
    void SetMessageAllocatorFor_BroadcastTx(
        ::grpc::MessageAllocator< ::injective_exchange_rpc::BroadcastTxRequest, ::injective_exchange_rpc::BroadcastTxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::BroadcastTxRequest, ::injective_exchange_rpc::BroadcastTxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastTx(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastTxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PrepareCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PrepareCosmosTx() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::PrepareCosmosTxRequest, ::injective_exchange_rpc::PrepareCosmosTxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_exchange_rpc::PrepareCosmosTxRequest* request, ::injective_exchange_rpc::PrepareCosmosTxResponse* response) { return this->PrepareCosmosTx(context, request, response); }));}
    void SetMessageAllocatorFor_PrepareCosmosTx(
        ::grpc::MessageAllocator< ::injective_exchange_rpc::PrepareCosmosTxRequest, ::injective_exchange_rpc::PrepareCosmosTxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::PrepareCosmosTxRequest, ::injective_exchange_rpc::PrepareCosmosTxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PrepareCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareCosmosTxRequest* /*request*/, ::injective_exchange_rpc::PrepareCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrepareCosmosTx(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_exchange_rpc::PrepareCosmosTxRequest* /*request*/, ::injective_exchange_rpc::PrepareCosmosTxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BroadcastCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BroadcastCosmosTx() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::BroadcastCosmosTxRequest, ::injective_exchange_rpc::BroadcastCosmosTxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* request, ::injective_exchange_rpc::BroadcastCosmosTxResponse* response) { return this->BroadcastCosmosTx(context, request, response); }));}
    void SetMessageAllocatorFor_BroadcastCosmosTx(
        ::grpc::MessageAllocator< ::injective_exchange_rpc::BroadcastCosmosTxRequest, ::injective_exchange_rpc::BroadcastCosmosTxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::BroadcastCosmosTxRequest, ::injective_exchange_rpc::BroadcastCosmosTxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BroadcastCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastCosmosTx(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastCosmosTxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFeePayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFeePayer() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::GetFeePayerRequest, ::injective_exchange_rpc::GetFeePayerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::injective_exchange_rpc::GetFeePayerRequest* request, ::injective_exchange_rpc::GetFeePayerResponse* response) { return this->GetFeePayer(context, request, response); }));}
    void SetMessageAllocatorFor_GetFeePayer(
        ::grpc::MessageAllocator< ::injective_exchange_rpc::GetFeePayerRequest, ::injective_exchange_rpc::GetFeePayerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::injective_exchange_rpc::GetFeePayerRequest, ::injective_exchange_rpc::GetFeePayerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFeePayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeePayer(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetFeePayerRequest* /*request*/, ::injective_exchange_rpc::GetFeePayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFeePayer(
      ::grpc::CallbackServerContext* /*context*/, const ::injective_exchange_rpc::GetFeePayerRequest* /*request*/, ::injective_exchange_rpc::GetFeePayerResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetTx<WithCallbackMethod_PrepareTx<WithCallbackMethod_BroadcastTx<WithCallbackMethod_PrepareCosmosTx<WithCallbackMethod_BroadcastCosmosTx<WithCallbackMethod_GetFeePayer<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTx() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetTxRequest* /*request*/, ::injective_exchange_rpc::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrepareTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PrepareTx() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PrepareTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareTxRequest* /*request*/, ::injective_exchange_rpc::PrepareTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrepareCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PrepareCosmosTx() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PrepareCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareCosmosTxRequest* /*request*/, ::injective_exchange_rpc::PrepareCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BroadcastCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BroadcastCosmosTx() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_BroadcastCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFeePayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFeePayer() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetFeePayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeePayer(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetFeePayerRequest* /*request*/, ::injective_exchange_rpc::GetFeePayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTx() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetTxRequest* /*request*/, ::injective_exchange_rpc::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrepareTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PrepareTx() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PrepareTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareTxRequest* /*request*/, ::injective_exchange_rpc::PrepareTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrepareCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PrepareCosmosTx() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PrepareCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareCosmosTxRequest* /*request*/, ::injective_exchange_rpc::PrepareCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareCosmosTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BroadcastCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BroadcastCosmosTx() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_BroadcastCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastCosmosTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFeePayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFeePayer() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetFeePayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeePayer(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetFeePayerRequest* /*request*/, ::injective_exchange_rpc::GetFeePayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFeePayer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTx() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetTxRequest* /*request*/, ::injective_exchange_rpc::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PrepareTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PrepareTx() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PrepareTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_PrepareTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareTxRequest* /*request*/, ::injective_exchange_rpc::PrepareTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrepareTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BroadcastTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PrepareCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PrepareCosmosTx() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PrepareCosmosTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_PrepareCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareCosmosTxRequest* /*request*/, ::injective_exchange_rpc::PrepareCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrepareCosmosTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BroadcastCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BroadcastCosmosTx() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BroadcastCosmosTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_BroadcastCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastCosmosTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFeePayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFeePayer() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFeePayer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFeePayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFeePayer(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetFeePayerRequest* /*request*/, ::injective_exchange_rpc::GetFeePayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFeePayer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTx() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_exchange_rpc::GetTxRequest, ::injective_exchange_rpc::GetTxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_exchange_rpc::GetTxRequest, ::injective_exchange_rpc::GetTxResponse>* streamer) {
                       return this->StreamedGetTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetTxRequest* /*request*/, ::injective_exchange_rpc::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_exchange_rpc::GetTxRequest,::injective_exchange_rpc::GetTxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrepareTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PrepareTx() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_exchange_rpc::PrepareTxRequest, ::injective_exchange_rpc::PrepareTxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_exchange_rpc::PrepareTxRequest, ::injective_exchange_rpc::PrepareTxResponse>* streamer) {
                       return this->StreamedPrepareTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PrepareTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrepareTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareTxRequest* /*request*/, ::injective_exchange_rpc::PrepareTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepareTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_exchange_rpc::PrepareTxRequest,::injective_exchange_rpc::PrepareTxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_exchange_rpc::BroadcastTxRequest, ::injective_exchange_rpc::BroadcastTxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_exchange_rpc::BroadcastTxRequest, ::injective_exchange_rpc::BroadcastTxResponse>* streamer) {
                       return this->StreamedBroadcastTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcastTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_exchange_rpc::BroadcastTxRequest,::injective_exchange_rpc::BroadcastTxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrepareCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PrepareCosmosTx() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_exchange_rpc::PrepareCosmosTxRequest, ::injective_exchange_rpc::PrepareCosmosTxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_exchange_rpc::PrepareCosmosTxRequest, ::injective_exchange_rpc::PrepareCosmosTxResponse>* streamer) {
                       return this->StreamedPrepareCosmosTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PrepareCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrepareCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::PrepareCosmosTxRequest* /*request*/, ::injective_exchange_rpc::PrepareCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepareCosmosTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_exchange_rpc::PrepareCosmosTxRequest,::injective_exchange_rpc::PrepareCosmosTxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BroadcastCosmosTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BroadcastCosmosTx() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_exchange_rpc::BroadcastCosmosTxRequest, ::injective_exchange_rpc::BroadcastCosmosTxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_exchange_rpc::BroadcastCosmosTxRequest, ::injective_exchange_rpc::BroadcastCosmosTxResponse>* streamer) {
                       return this->StreamedBroadcastCosmosTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BroadcastCosmosTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BroadcastCosmosTx(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::BroadcastCosmosTxRequest* /*request*/, ::injective_exchange_rpc::BroadcastCosmosTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcastCosmosTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_exchange_rpc::BroadcastCosmosTxRequest,::injective_exchange_rpc::BroadcastCosmosTxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFeePayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFeePayer() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::injective_exchange_rpc::GetFeePayerRequest, ::injective_exchange_rpc::GetFeePayerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::injective_exchange_rpc::GetFeePayerRequest, ::injective_exchange_rpc::GetFeePayerResponse>* streamer) {
                       return this->StreamedGetFeePayer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFeePayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFeePayer(::grpc::ServerContext* /*context*/, const ::injective_exchange_rpc::GetFeePayerRequest* /*request*/, ::injective_exchange_rpc::GetFeePayerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFeePayer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::injective_exchange_rpc::GetFeePayerRequest,::injective_exchange_rpc::GetFeePayerResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTx<WithStreamedUnaryMethod_PrepareTx<WithStreamedUnaryMethod_BroadcastTx<WithStreamedUnaryMethod_PrepareCosmosTx<WithStreamedUnaryMethod_BroadcastCosmosTx<WithStreamedUnaryMethod_GetFeePayer<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTx<WithStreamedUnaryMethod_PrepareTx<WithStreamedUnaryMethod_BroadcastTx<WithStreamedUnaryMethod_PrepareCosmosTx<WithStreamedUnaryMethod_BroadcastCosmosTx<WithStreamedUnaryMethod_GetFeePayer<Service > > > > > > StreamedService;
};

}  // namespace injective_exchange_rpc


#endif  // GRPC_exchange_2finjective_5fexchange_5frpc_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: exchange/injective_meta_rpc.proto

#include "exchange/injective_meta_rpc.pb.h"
#include "exchange/injective_meta_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace injective_meta_rpc {

static const char* InjectiveMetaRPC_method_names[] = {
  "/injective_meta_rpc.InjectiveMetaRPC/Ping",
  "/injective_meta_rpc.InjectiveMetaRPC/Version",
  "/injective_meta_rpc.InjectiveMetaRPC/Info",
  "/injective_meta_rpc.InjectiveMetaRPC/StreamKeepalive",
};

std::unique_ptr< InjectiveMetaRPC::Stub> InjectiveMetaRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InjectiveMetaRPC::Stub> stub(new InjectiveMetaRPC::Stub(channel, options));
  return stub;
}

InjectiveMetaRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(InjectiveMetaRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Version_(InjectiveMetaRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Info_(InjectiveMetaRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamKeepalive_(InjectiveMetaRPC_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status InjectiveMetaRPC::Stub::Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::injective_meta_rpc::PingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_meta_rpc::PingRequest, ::injective_meta_rpc::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void InjectiveMetaRPC::Stub::async::Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_meta_rpc::PingRequest, ::injective_meta_rpc::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void InjectiveMetaRPC::Stub::async::Ping(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::PingResponse>* InjectiveMetaRPC::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_meta_rpc::PingResponse, ::injective_meta_rpc::PingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::PingResponse>* InjectiveMetaRPC::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::PingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveMetaRPC::Stub::Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::injective_meta_rpc::VersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_meta_rpc::VersionRequest, ::injective_meta_rpc::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Version_, context, request, response);
}

void InjectiveMetaRPC::Stub::async::Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_meta_rpc::VersionRequest, ::injective_meta_rpc::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, std::move(f));
}

void InjectiveMetaRPC::Stub::async::Version(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::VersionResponse>* InjectiveMetaRPC::Stub::PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_meta_rpc::VersionResponse, ::injective_meta_rpc::VersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Version_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::VersionResponse>* InjectiveMetaRPC::Stub::AsyncVersionRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InjectiveMetaRPC::Stub::Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::injective_meta_rpc::InfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::injective_meta_rpc::InfoRequest, ::injective_meta_rpc::InfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Info_, context, request, response);
}

void InjectiveMetaRPC::Stub::async::Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::injective_meta_rpc::InfoRequest, ::injective_meta_rpc::InfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, std::move(f));
}

void InjectiveMetaRPC::Stub::async::Info(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::InfoResponse>* InjectiveMetaRPC::Stub::PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::injective_meta_rpc::InfoResponse, ::injective_meta_rpc::InfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::injective_meta_rpc::InfoResponse>* InjectiveMetaRPC::Stub::AsyncInfoRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::InfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::injective_meta_rpc::StreamKeepaliveResponse>* InjectiveMetaRPC::Stub::StreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::injective_meta_rpc::StreamKeepaliveResponse>::Create(channel_.get(), rpcmethod_StreamKeepalive_, context, request);
}

void InjectiveMetaRPC::Stub::async::StreamKeepalive(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest* request, ::grpc::ClientReadReactor< ::injective_meta_rpc::StreamKeepaliveResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::injective_meta_rpc::StreamKeepaliveResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamKeepalive_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::injective_meta_rpc::StreamKeepaliveResponse>* InjectiveMetaRPC::Stub::AsyncStreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_meta_rpc::StreamKeepaliveResponse>::Create(channel_.get(), cq, rpcmethod_StreamKeepalive_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::injective_meta_rpc::StreamKeepaliveResponse>* InjectiveMetaRPC::Stub::PrepareAsyncStreamKeepaliveRaw(::grpc::ClientContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::injective_meta_rpc::StreamKeepaliveResponse>::Create(channel_.get(), cq, rpcmethod_StreamKeepalive_, context, request, false, nullptr);
}

InjectiveMetaRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveMetaRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveMetaRPC::Service, ::injective_meta_rpc::PingRequest, ::injective_meta_rpc::PingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveMetaRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_meta_rpc::PingRequest* req,
             ::injective_meta_rpc::PingResponse* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveMetaRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveMetaRPC::Service, ::injective_meta_rpc::VersionRequest, ::injective_meta_rpc::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveMetaRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_meta_rpc::VersionRequest* req,
             ::injective_meta_rpc::VersionResponse* resp) {
               return service->Version(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveMetaRPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InjectiveMetaRPC::Service, ::injective_meta_rpc::InfoRequest, ::injective_meta_rpc::InfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InjectiveMetaRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_meta_rpc::InfoRequest* req,
             ::injective_meta_rpc::InfoResponse* resp) {
               return service->Info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InjectiveMetaRPC_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< InjectiveMetaRPC::Service, ::injective_meta_rpc::StreamKeepaliveRequest, ::injective_meta_rpc::StreamKeepaliveResponse>(
          [](InjectiveMetaRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::injective_meta_rpc::StreamKeepaliveRequest* req,
             ::grpc::ServerWriter<::injective_meta_rpc::StreamKeepaliveResponse>* writer) {
               return service->StreamKeepalive(ctx, req, writer);
             }, this)));
}

InjectiveMetaRPC::Service::~Service() {
}

::grpc::Status InjectiveMetaRPC::Service::Ping(::grpc::ServerContext* context, const ::injective_meta_rpc::PingRequest* request, ::injective_meta_rpc::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveMetaRPC::Service::Version(::grpc::ServerContext* context, const ::injective_meta_rpc::VersionRequest* request, ::injective_meta_rpc::VersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveMetaRPC::Service::Info(::grpc::ServerContext* context, const ::injective_meta_rpc::InfoRequest* request, ::injective_meta_rpc::InfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InjectiveMetaRPC::Service::StreamKeepalive(::grpc::ServerContext* context, const ::injective_meta_rpc::StreamKeepaliveRequest* request, ::grpc::ServerWriter< ::injective_meta_rpc::StreamKeepaliveResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace injective_meta_rpc


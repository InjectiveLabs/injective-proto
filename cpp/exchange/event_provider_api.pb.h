// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/event_provider_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_exchange_2fevent_5fprovider_5fapi_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_exchange_2fevent_5fprovider_5fapi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_exchange_2fevent_5fprovider_5fapi_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_exchange_2fevent_5fprovider_5fapi_2eproto;
namespace event_provider_api {
class BlockEventsRPC;
struct BlockEventsRPCDefaultTypeInternal;
extern BlockEventsRPCDefaultTypeInternal _BlockEventsRPC_default_instance_;
class GetBlockEventsRPCRequest;
struct GetBlockEventsRPCRequestDefaultTypeInternal;
extern GetBlockEventsRPCRequestDefaultTypeInternal _GetBlockEventsRPCRequest_default_instance_;
class GetBlockEventsRPCResponse;
struct GetBlockEventsRPCResponseDefaultTypeInternal;
extern GetBlockEventsRPCResponseDefaultTypeInternal _GetBlockEventsRPCResponse_default_instance_;
class GetCustomEventsRPCRequest;
struct GetCustomEventsRPCRequestDefaultTypeInternal;
extern GetCustomEventsRPCRequestDefaultTypeInternal _GetCustomEventsRPCRequest_default_instance_;
class GetCustomEventsRPCResponse;
struct GetCustomEventsRPCResponseDefaultTypeInternal;
extern GetCustomEventsRPCResponseDefaultTypeInternal _GetCustomEventsRPCResponse_default_instance_;
class GetLatestHeightRequest;
struct GetLatestHeightRequestDefaultTypeInternal;
extern GetLatestHeightRequestDefaultTypeInternal _GetLatestHeightRequest_default_instance_;
class GetLatestHeightResponse;
struct GetLatestHeightResponseDefaultTypeInternal;
extern GetLatestHeightResponseDefaultTypeInternal _GetLatestHeightResponse_default_instance_;
class LatestBlockHeight;
struct LatestBlockHeightDefaultTypeInternal;
extern LatestBlockHeightDefaultTypeInternal _LatestBlockHeight_default_instance_;
}  // namespace event_provider_api
PROTOBUF_NAMESPACE_OPEN
template <>
::event_provider_api::BlockEventsRPC* Arena::CreateMaybeMessage<::event_provider_api::BlockEventsRPC>(Arena*);
template <>
::event_provider_api::GetBlockEventsRPCRequest* Arena::CreateMaybeMessage<::event_provider_api::GetBlockEventsRPCRequest>(Arena*);
template <>
::event_provider_api::GetBlockEventsRPCResponse* Arena::CreateMaybeMessage<::event_provider_api::GetBlockEventsRPCResponse>(Arena*);
template <>
::event_provider_api::GetCustomEventsRPCRequest* Arena::CreateMaybeMessage<::event_provider_api::GetCustomEventsRPCRequest>(Arena*);
template <>
::event_provider_api::GetCustomEventsRPCResponse* Arena::CreateMaybeMessage<::event_provider_api::GetCustomEventsRPCResponse>(Arena*);
template <>
::event_provider_api::GetLatestHeightRequest* Arena::CreateMaybeMessage<::event_provider_api::GetLatestHeightRequest>(Arena*);
template <>
::event_provider_api::GetLatestHeightResponse* Arena::CreateMaybeMessage<::event_provider_api::GetLatestHeightResponse>(Arena*);
template <>
::event_provider_api::LatestBlockHeight* Arena::CreateMaybeMessage<::event_provider_api::LatestBlockHeight>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace event_provider_api {

// ===================================================================


// -------------------------------------------------------------------

class GetLatestHeightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:event_provider_api.GetLatestHeightRequest) */ {
 public:
  inline GetLatestHeightRequest() : GetLatestHeightRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetLatestHeightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLatestHeightRequest(const GetLatestHeightRequest& from);
  GetLatestHeightRequest(GetLatestHeightRequest&& from) noexcept
    : GetLatestHeightRequest() {
    *this = ::std::move(from);
  }

  inline GetLatestHeightRequest& operator=(const GetLatestHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestHeightRequest& operator=(GetLatestHeightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLatestHeightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLatestHeightRequest* internal_default_instance() {
    return reinterpret_cast<const GetLatestHeightRequest*>(
               &_GetLatestHeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetLatestHeightRequest& a, GetLatestHeightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestHeightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestHeightRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLatestHeightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLatestHeightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetLatestHeightRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetLatestHeightRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "event_provider_api.GetLatestHeightRequest";
  }
  protected:
  explicit GetLatestHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:event_provider_api.GetLatestHeightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto;
};// -------------------------------------------------------------------

class GetLatestHeightResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_provider_api.GetLatestHeightResponse) */ {
 public:
  inline GetLatestHeightResponse() : GetLatestHeightResponse(nullptr) {}
  ~GetLatestHeightResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetLatestHeightResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLatestHeightResponse(const GetLatestHeightResponse& from);
  GetLatestHeightResponse(GetLatestHeightResponse&& from) noexcept
    : GetLatestHeightResponse() {
    *this = ::std::move(from);
  }

  inline GetLatestHeightResponse& operator=(const GetLatestHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestHeightResponse& operator=(GetLatestHeightResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLatestHeightResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLatestHeightResponse* internal_default_instance() {
    return reinterpret_cast<const GetLatestHeightResponse*>(
               &_GetLatestHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetLatestHeightResponse& a, GetLatestHeightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestHeightResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestHeightResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLatestHeightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLatestHeightResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLatestHeightResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLatestHeightResponse& from) {
    GetLatestHeightResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestHeightResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "event_provider_api.GetLatestHeightResponse";
  }
  protected:
  explicit GetLatestHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kErrmsgFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string s = 1 [json_name = "s"];
  void clear_s() ;
  const std::string& s() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* ptr);

  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(
      const std::string& value);
  std::string* _internal_mutable_s();

  public:
  // string errmsg = 2 [json_name = "errmsg"];
  void clear_errmsg() ;
  const std::string& errmsg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* ptr);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // .event_provider_api.LatestBlockHeight data = 3 [json_name = "data"];
  bool has_data() const;
  void clear_data() ;
  const ::event_provider_api::LatestBlockHeight& data() const;
  PROTOBUF_NODISCARD ::event_provider_api::LatestBlockHeight* release_data();
  ::event_provider_api::LatestBlockHeight* mutable_data();
  void set_allocated_data(::event_provider_api::LatestBlockHeight* data);
  private:
  const ::event_provider_api::LatestBlockHeight& _internal_data() const;
  ::event_provider_api::LatestBlockHeight* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::event_provider_api::LatestBlockHeight* data);
  ::event_provider_api::LatestBlockHeight* unsafe_arena_release_data();
  // @@protoc_insertion_point(class_scope:event_provider_api.GetLatestHeightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::event_provider_api::LatestBlockHeight* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto;
};// -------------------------------------------------------------------

class LatestBlockHeight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_provider_api.LatestBlockHeight) */ {
 public:
  inline LatestBlockHeight() : LatestBlockHeight(nullptr) {}
  ~LatestBlockHeight() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LatestBlockHeight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatestBlockHeight(const LatestBlockHeight& from);
  LatestBlockHeight(LatestBlockHeight&& from) noexcept
    : LatestBlockHeight() {
    *this = ::std::move(from);
  }

  inline LatestBlockHeight& operator=(const LatestBlockHeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatestBlockHeight& operator=(LatestBlockHeight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatestBlockHeight& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatestBlockHeight* internal_default_instance() {
    return reinterpret_cast<const LatestBlockHeight*>(
               &_LatestBlockHeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LatestBlockHeight& a, LatestBlockHeight& b) {
    a.Swap(&b);
  }
  inline void Swap(LatestBlockHeight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatestBlockHeight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatestBlockHeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatestBlockHeight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatestBlockHeight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LatestBlockHeight& from) {
    LatestBlockHeight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatestBlockHeight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "event_provider_api.LatestBlockHeight";
  }
  protected:
  explicit LatestBlockHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // uint64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::uint64_t height() const;
  void set_height(::uint64_t value);

  private:
  ::uint64_t _internal_height() const;
  void _internal_set_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:event_provider_api.LatestBlockHeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto;
};// -------------------------------------------------------------------

class GetBlockEventsRPCRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_provider_api.GetBlockEventsRPCRequest) */ {
 public:
  inline GetBlockEventsRPCRequest() : GetBlockEventsRPCRequest(nullptr) {}
  ~GetBlockEventsRPCRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBlockEventsRPCRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockEventsRPCRequest(const GetBlockEventsRPCRequest& from);
  GetBlockEventsRPCRequest(GetBlockEventsRPCRequest&& from) noexcept
    : GetBlockEventsRPCRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockEventsRPCRequest& operator=(const GetBlockEventsRPCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockEventsRPCRequest& operator=(GetBlockEventsRPCRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockEventsRPCRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockEventsRPCRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockEventsRPCRequest*>(
               &_GetBlockEventsRPCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetBlockEventsRPCRequest& a, GetBlockEventsRPCRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockEventsRPCRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockEventsRPCRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockEventsRPCRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockEventsRPCRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockEventsRPCRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockEventsRPCRequest& from) {
    GetBlockEventsRPCRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockEventsRPCRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "event_provider_api.GetBlockEventsRPCRequest";
  }
  protected:
  explicit GetBlockEventsRPCRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackendFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // string backend = 1 [json_name = "backend"];
  void clear_backend() ;
  const std::string& backend() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_backend(Arg_&& arg, Args_... args);
  std::string* mutable_backend();
  PROTOBUF_NODISCARD std::string* release_backend();
  void set_allocated_backend(std::string* ptr);

  private:
  const std::string& _internal_backend() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backend(
      const std::string& value);
  std::string* _internal_mutable_backend();

  public:
  // sint32 height = 2 [json_name = "height"];
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:event_provider_api.GetBlockEventsRPCRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backend_;
    ::int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto;
};// -------------------------------------------------------------------

class GetBlockEventsRPCResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_provider_api.GetBlockEventsRPCResponse) */ {
 public:
  inline GetBlockEventsRPCResponse() : GetBlockEventsRPCResponse(nullptr) {}
  ~GetBlockEventsRPCResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBlockEventsRPCResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockEventsRPCResponse(const GetBlockEventsRPCResponse& from);
  GetBlockEventsRPCResponse(GetBlockEventsRPCResponse&& from) noexcept
    : GetBlockEventsRPCResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockEventsRPCResponse& operator=(const GetBlockEventsRPCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockEventsRPCResponse& operator=(GetBlockEventsRPCResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockEventsRPCResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockEventsRPCResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockEventsRPCResponse*>(
               &_GetBlockEventsRPCResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBlockEventsRPCResponse& a, GetBlockEventsRPCResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockEventsRPCResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockEventsRPCResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockEventsRPCResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockEventsRPCResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockEventsRPCResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockEventsRPCResponse& from) {
    GetBlockEventsRPCResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockEventsRPCResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "event_provider_api.GetBlockEventsRPCResponse";
  }
  protected:
  explicit GetBlockEventsRPCResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kErrmsgFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string s = 1 [json_name = "s"];
  void clear_s() ;
  const std::string& s() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* ptr);

  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(
      const std::string& value);
  std::string* _internal_mutable_s();

  public:
  // string errmsg = 2 [json_name = "errmsg"];
  void clear_errmsg() ;
  const std::string& errmsg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* ptr);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // .event_provider_api.BlockEventsRPC data = 3 [json_name = "data"];
  bool has_data() const;
  void clear_data() ;
  const ::event_provider_api::BlockEventsRPC& data() const;
  PROTOBUF_NODISCARD ::event_provider_api::BlockEventsRPC* release_data();
  ::event_provider_api::BlockEventsRPC* mutable_data();
  void set_allocated_data(::event_provider_api::BlockEventsRPC* data);
  private:
  const ::event_provider_api::BlockEventsRPC& _internal_data() const;
  ::event_provider_api::BlockEventsRPC* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::event_provider_api::BlockEventsRPC* data);
  ::event_provider_api::BlockEventsRPC* unsafe_arena_release_data();
  // @@protoc_insertion_point(class_scope:event_provider_api.GetBlockEventsRPCResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::event_provider_api::BlockEventsRPC* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto;
};// -------------------------------------------------------------------

class BlockEventsRPC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_provider_api.BlockEventsRPC) */ {
 public:
  inline BlockEventsRPC() : BlockEventsRPC(nullptr) {}
  ~BlockEventsRPC() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockEventsRPC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockEventsRPC(const BlockEventsRPC& from);
  BlockEventsRPC(BlockEventsRPC&& from) noexcept
    : BlockEventsRPC() {
    *this = ::std::move(from);
  }

  inline BlockEventsRPC& operator=(const BlockEventsRPC& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockEventsRPC& operator=(BlockEventsRPC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockEventsRPC& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockEventsRPC* internal_default_instance() {
    return reinterpret_cast<const BlockEventsRPC*>(
               &_BlockEventsRPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BlockEventsRPC& a, BlockEventsRPC& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockEventsRPC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockEventsRPC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockEventsRPC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockEventsRPC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockEventsRPC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockEventsRPC& from) {
    BlockEventsRPC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockEventsRPC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "event_provider_api.BlockEventsRPC";
  }
  protected:
  explicit BlockEventsRPC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 1,
    kEventsFieldNumber = 2,
  };
  // repeated string types = 1 [json_name = "types"];
  int types_size() const;
  private:
  int _internal_types_size() const;

  public:
  void clear_types() ;
  const std::string& types(int index) const;
  std::string* mutable_types(int index);
  void set_types(int index, const std::string& value);
  void set_types(int index, std::string&& value);
  void set_types(int index, const char* value);
  void set_types(int index, const char* value, std::size_t size);
  void set_types(int index, absl::string_view value);
  std::string* add_types();
  void add_types(const std::string& value);
  void add_types(std::string&& value);
  void add_types(const char* value);
  void add_types(const char* value, std::size_t size);
  void add_types(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_types();

  private:
  const std::string& _internal_types(int index) const;
  std::string* _internal_add_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_types();

  public:
  // repeated bytes events = 2 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  const std::string& events(int index) const;
  std::string* mutable_events(int index);
  void set_events(int index, const std::string& value);
  void set_events(int index, std::string&& value);
  void set_events(int index, const char* value);
  void set_events(int index, const void* value, std::size_t size);
  void set_events(int index, absl::string_view value);
  std::string* add_events();
  void add_events(const std::string& value);
  void add_events(std::string&& value);
  void add_events(const char* value);
  void add_events(const void* value, std::size_t size);
  void add_events(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_events();

  private:
  const std::string& _internal_events(int index) const;
  std::string* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_events();

  public:
  // @@protoc_insertion_point(class_scope:event_provider_api.BlockEventsRPC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> types_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto;
};// -------------------------------------------------------------------

class GetCustomEventsRPCRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_provider_api.GetCustomEventsRPCRequest) */ {
 public:
  inline GetCustomEventsRPCRequest() : GetCustomEventsRPCRequest(nullptr) {}
  ~GetCustomEventsRPCRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCustomEventsRPCRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCustomEventsRPCRequest(const GetCustomEventsRPCRequest& from);
  GetCustomEventsRPCRequest(GetCustomEventsRPCRequest&& from) noexcept
    : GetCustomEventsRPCRequest() {
    *this = ::std::move(from);
  }

  inline GetCustomEventsRPCRequest& operator=(const GetCustomEventsRPCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomEventsRPCRequest& operator=(GetCustomEventsRPCRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCustomEventsRPCRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCustomEventsRPCRequest* internal_default_instance() {
    return reinterpret_cast<const GetCustomEventsRPCRequest*>(
               &_GetCustomEventsRPCRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetCustomEventsRPCRequest& a, GetCustomEventsRPCRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomEventsRPCRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomEventsRPCRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCustomEventsRPCRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCustomEventsRPCRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCustomEventsRPCRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCustomEventsRPCRequest& from) {
    GetCustomEventsRPCRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomEventsRPCRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "event_provider_api.GetCustomEventsRPCRequest";
  }
  protected:
  explicit GetCustomEventsRPCRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackendFieldNumber = 1,
    kEventsFieldNumber = 3,
    kHeightFieldNumber = 2,
  };
  // string backend = 1 [json_name = "backend"];
  void clear_backend() ;
  const std::string& backend() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_backend(Arg_&& arg, Args_... args);
  std::string* mutable_backend();
  PROTOBUF_NODISCARD std::string* release_backend();
  void set_allocated_backend(std::string* ptr);

  private:
  const std::string& _internal_backend() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backend(
      const std::string& value);
  std::string* _internal_mutable_backend();

  public:
  // string events = 3 [json_name = "events"];
  void clear_events() ;
  const std::string& events() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_events(Arg_&& arg, Args_... args);
  std::string* mutable_events();
  PROTOBUF_NODISCARD std::string* release_events();
  void set_allocated_events(std::string* ptr);

  private:
  const std::string& _internal_events() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_events(
      const std::string& value);
  std::string* _internal_mutable_events();

  public:
  // sint32 height = 2 [json_name = "height"];
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:event_provider_api.GetCustomEventsRPCRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backend_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr events_;
    ::int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto;
};// -------------------------------------------------------------------

class GetCustomEventsRPCResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:event_provider_api.GetCustomEventsRPCResponse) */ {
 public:
  inline GetCustomEventsRPCResponse() : GetCustomEventsRPCResponse(nullptr) {}
  ~GetCustomEventsRPCResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCustomEventsRPCResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCustomEventsRPCResponse(const GetCustomEventsRPCResponse& from);
  GetCustomEventsRPCResponse(GetCustomEventsRPCResponse&& from) noexcept
    : GetCustomEventsRPCResponse() {
    *this = ::std::move(from);
  }

  inline GetCustomEventsRPCResponse& operator=(const GetCustomEventsRPCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomEventsRPCResponse& operator=(GetCustomEventsRPCResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCustomEventsRPCResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCustomEventsRPCResponse* internal_default_instance() {
    return reinterpret_cast<const GetCustomEventsRPCResponse*>(
               &_GetCustomEventsRPCResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetCustomEventsRPCResponse& a, GetCustomEventsRPCResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomEventsRPCResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomEventsRPCResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCustomEventsRPCResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCustomEventsRPCResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCustomEventsRPCResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCustomEventsRPCResponse& from) {
    GetCustomEventsRPCResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomEventsRPCResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "event_provider_api.GetCustomEventsRPCResponse";
  }
  protected:
  explicit GetCustomEventsRPCResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kErrmsgFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string s = 1 [json_name = "s"];
  void clear_s() ;
  const std::string& s() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_s(Arg_&& arg, Args_... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* ptr);

  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(
      const std::string& value);
  std::string* _internal_mutable_s();

  public:
  // string errmsg = 2 [json_name = "errmsg"];
  void clear_errmsg() ;
  const std::string& errmsg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_errmsg(Arg_&& arg, Args_... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* ptr);

  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(
      const std::string& value);
  std::string* _internal_mutable_errmsg();

  public:
  // .event_provider_api.BlockEventsRPC data = 3 [json_name = "data"];
  bool has_data() const;
  void clear_data() ;
  const ::event_provider_api::BlockEventsRPC& data() const;
  PROTOBUF_NODISCARD ::event_provider_api::BlockEventsRPC* release_data();
  ::event_provider_api::BlockEventsRPC* mutable_data();
  void set_allocated_data(::event_provider_api::BlockEventsRPC* data);
  private:
  const ::event_provider_api::BlockEventsRPC& _internal_data() const;
  ::event_provider_api::BlockEventsRPC* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::event_provider_api::BlockEventsRPC* data);
  ::event_provider_api::BlockEventsRPC* unsafe_arena_release_data();
  // @@protoc_insertion_point(class_scope:event_provider_api.GetCustomEventsRPCResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::event_provider_api::BlockEventsRPC* data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2fevent_5fprovider_5fapi_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetLatestHeightRequest

// -------------------------------------------------------------------

// GetLatestHeightResponse

// string s = 1 [json_name = "s"];
inline void GetLatestHeightResponse::clear_s() {
  _impl_.s_.ClearToEmpty();
}
inline const std::string& GetLatestHeightResponse::s() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetLatestHeightResponse.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetLatestHeightResponse::set_s(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.s_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetLatestHeightResponse.s)
}
inline std::string* GetLatestHeightResponse::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetLatestHeightResponse.s)
  return _s;
}
inline const std::string& GetLatestHeightResponse::_internal_s() const {
  return _impl_.s_.Get();
}
inline void GetLatestHeightResponse::_internal_set_s(const std::string& value) {
  ;


  _impl_.s_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLatestHeightResponse::_internal_mutable_s() {
  ;
  return _impl_.s_.Mutable( GetArenaForAllocation());
}
inline std::string* GetLatestHeightResponse::release_s() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetLatestHeightResponse.s)
  return _impl_.s_.Release();
}
inline void GetLatestHeightResponse::set_allocated_s(std::string* value) {
  _impl_.s_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.s_.IsDefault()) {
          _impl_.s_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetLatestHeightResponse.s)
}

// string errmsg = 2 [json_name = "errmsg"];
inline void GetLatestHeightResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& GetLatestHeightResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetLatestHeightResponse.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetLatestHeightResponse::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetLatestHeightResponse.errmsg)
}
inline std::string* GetLatestHeightResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetLatestHeightResponse.errmsg)
  return _s;
}
inline const std::string& GetLatestHeightResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void GetLatestHeightResponse::_internal_set_errmsg(const std::string& value) {
  ;


  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLatestHeightResponse::_internal_mutable_errmsg() {
  ;
  return _impl_.errmsg_.Mutable( GetArenaForAllocation());
}
inline std::string* GetLatestHeightResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetLatestHeightResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void GetLatestHeightResponse::set_allocated_errmsg(std::string* value) {
  _impl_.errmsg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetLatestHeightResponse.errmsg)
}

// .event_provider_api.LatestBlockHeight data = 3 [json_name = "data"];
inline bool GetLatestHeightResponse::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void GetLatestHeightResponse::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::event_provider_api::LatestBlockHeight& GetLatestHeightResponse::_internal_data() const {
  const ::event_provider_api::LatestBlockHeight* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::event_provider_api::LatestBlockHeight&>(
      ::event_provider_api::_LatestBlockHeight_default_instance_);
}
inline const ::event_provider_api::LatestBlockHeight& GetLatestHeightResponse::data() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetLatestHeightResponse.data)
  return _internal_data();
}
inline void GetLatestHeightResponse::unsafe_arena_set_allocated_data(
    ::event_provider_api::LatestBlockHeight* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_provider_api.GetLatestHeightResponse.data)
}
inline ::event_provider_api::LatestBlockHeight* GetLatestHeightResponse::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_provider_api::LatestBlockHeight* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::event_provider_api::LatestBlockHeight* GetLatestHeightResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetLatestHeightResponse.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_provider_api::LatestBlockHeight* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::event_provider_api::LatestBlockHeight* GetLatestHeightResponse::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_provider_api::LatestBlockHeight>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::event_provider_api::LatestBlockHeight* GetLatestHeightResponse::mutable_data() {
  ::event_provider_api::LatestBlockHeight* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetLatestHeightResponse.data)
  return _msg;
}
inline void GetLatestHeightResponse::set_allocated_data(::event_provider_api::LatestBlockHeight* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetLatestHeightResponse.data)
}

// -------------------------------------------------------------------

// LatestBlockHeight

// uint64 height = 1 [json_name = "height"];
inline void LatestBlockHeight::clear_height() {
  _impl_.height_ = ::uint64_t{0u};
}
inline ::uint64_t LatestBlockHeight::height() const {
  // @@protoc_insertion_point(field_get:event_provider_api.LatestBlockHeight.height)
  return _internal_height();
}
inline void LatestBlockHeight::set_height(::uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:event_provider_api.LatestBlockHeight.height)
}
inline ::uint64_t LatestBlockHeight::_internal_height() const {
  return _impl_.height_;
}
inline void LatestBlockHeight::_internal_set_height(::uint64_t value) {
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// GetBlockEventsRPCRequest

// string backend = 1 [json_name = "backend"];
inline void GetBlockEventsRPCRequest::clear_backend() {
  _impl_.backend_.ClearToEmpty();
}
inline const std::string& GetBlockEventsRPCRequest::backend() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetBlockEventsRPCRequest.backend)
  return _internal_backend();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBlockEventsRPCRequest::set_backend(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.backend_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetBlockEventsRPCRequest.backend)
}
inline std::string* GetBlockEventsRPCRequest::mutable_backend() {
  std::string* _s = _internal_mutable_backend();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetBlockEventsRPCRequest.backend)
  return _s;
}
inline const std::string& GetBlockEventsRPCRequest::_internal_backend() const {
  return _impl_.backend_.Get();
}
inline void GetBlockEventsRPCRequest::_internal_set_backend(const std::string& value) {
  ;


  _impl_.backend_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockEventsRPCRequest::_internal_mutable_backend() {
  ;
  return _impl_.backend_.Mutable( GetArenaForAllocation());
}
inline std::string* GetBlockEventsRPCRequest::release_backend() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetBlockEventsRPCRequest.backend)
  return _impl_.backend_.Release();
}
inline void GetBlockEventsRPCRequest::set_allocated_backend(std::string* value) {
  _impl_.backend_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.backend_.IsDefault()) {
          _impl_.backend_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetBlockEventsRPCRequest.backend)
}

// sint32 height = 2 [json_name = "height"];
inline void GetBlockEventsRPCRequest::clear_height() {
  _impl_.height_ = 0;
}
inline ::int32_t GetBlockEventsRPCRequest::height() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetBlockEventsRPCRequest.height)
  return _internal_height();
}
inline void GetBlockEventsRPCRequest::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:event_provider_api.GetBlockEventsRPCRequest.height)
}
inline ::int32_t GetBlockEventsRPCRequest::_internal_height() const {
  return _impl_.height_;
}
inline void GetBlockEventsRPCRequest::_internal_set_height(::int32_t value) {
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// GetBlockEventsRPCResponse

// string s = 1 [json_name = "s"];
inline void GetBlockEventsRPCResponse::clear_s() {
  _impl_.s_.ClearToEmpty();
}
inline const std::string& GetBlockEventsRPCResponse::s() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetBlockEventsRPCResponse.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBlockEventsRPCResponse::set_s(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.s_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetBlockEventsRPCResponse.s)
}
inline std::string* GetBlockEventsRPCResponse::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetBlockEventsRPCResponse.s)
  return _s;
}
inline const std::string& GetBlockEventsRPCResponse::_internal_s() const {
  return _impl_.s_.Get();
}
inline void GetBlockEventsRPCResponse::_internal_set_s(const std::string& value) {
  ;


  _impl_.s_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockEventsRPCResponse::_internal_mutable_s() {
  ;
  return _impl_.s_.Mutable( GetArenaForAllocation());
}
inline std::string* GetBlockEventsRPCResponse::release_s() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetBlockEventsRPCResponse.s)
  return _impl_.s_.Release();
}
inline void GetBlockEventsRPCResponse::set_allocated_s(std::string* value) {
  _impl_.s_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.s_.IsDefault()) {
          _impl_.s_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetBlockEventsRPCResponse.s)
}

// string errmsg = 2 [json_name = "errmsg"];
inline void GetBlockEventsRPCResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& GetBlockEventsRPCResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetBlockEventsRPCResponse.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetBlockEventsRPCResponse::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetBlockEventsRPCResponse.errmsg)
}
inline std::string* GetBlockEventsRPCResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetBlockEventsRPCResponse.errmsg)
  return _s;
}
inline const std::string& GetBlockEventsRPCResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void GetBlockEventsRPCResponse::_internal_set_errmsg(const std::string& value) {
  ;


  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetBlockEventsRPCResponse::_internal_mutable_errmsg() {
  ;
  return _impl_.errmsg_.Mutable( GetArenaForAllocation());
}
inline std::string* GetBlockEventsRPCResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetBlockEventsRPCResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void GetBlockEventsRPCResponse::set_allocated_errmsg(std::string* value) {
  _impl_.errmsg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetBlockEventsRPCResponse.errmsg)
}

// .event_provider_api.BlockEventsRPC data = 3 [json_name = "data"];
inline bool GetBlockEventsRPCResponse::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void GetBlockEventsRPCResponse::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::event_provider_api::BlockEventsRPC& GetBlockEventsRPCResponse::_internal_data() const {
  const ::event_provider_api::BlockEventsRPC* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::event_provider_api::BlockEventsRPC&>(
      ::event_provider_api::_BlockEventsRPC_default_instance_);
}
inline const ::event_provider_api::BlockEventsRPC& GetBlockEventsRPCResponse::data() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetBlockEventsRPCResponse.data)
  return _internal_data();
}
inline void GetBlockEventsRPCResponse::unsafe_arena_set_allocated_data(
    ::event_provider_api::BlockEventsRPC* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_provider_api.GetBlockEventsRPCResponse.data)
}
inline ::event_provider_api::BlockEventsRPC* GetBlockEventsRPCResponse::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_provider_api::BlockEventsRPC* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::event_provider_api::BlockEventsRPC* GetBlockEventsRPCResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetBlockEventsRPCResponse.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_provider_api::BlockEventsRPC* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::event_provider_api::BlockEventsRPC* GetBlockEventsRPCResponse::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_provider_api::BlockEventsRPC>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::event_provider_api::BlockEventsRPC* GetBlockEventsRPCResponse::mutable_data() {
  ::event_provider_api::BlockEventsRPC* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetBlockEventsRPCResponse.data)
  return _msg;
}
inline void GetBlockEventsRPCResponse::set_allocated_data(::event_provider_api::BlockEventsRPC* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetBlockEventsRPCResponse.data)
}

// -------------------------------------------------------------------

// BlockEventsRPC

// repeated string types = 1 [json_name = "types"];
inline int BlockEventsRPC::_internal_types_size() const {
  return _impl_.types_.size();
}
inline int BlockEventsRPC::types_size() const {
  return _internal_types_size();
}
inline void BlockEventsRPC::clear_types() {
  _internal_mutable_types()->Clear();
}
inline std::string* BlockEventsRPC::add_types() {
  std::string* _s = _internal_add_types();
  // @@protoc_insertion_point(field_add_mutable:event_provider_api.BlockEventsRPC.types)
  return _s;
}
inline const std::string& BlockEventsRPC::types(int index) const {
  // @@protoc_insertion_point(field_get:event_provider_api.BlockEventsRPC.types)
  return _internal_types(index);
}
inline std::string* BlockEventsRPC::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:event_provider_api.BlockEventsRPC.types)
  return _internal_mutable_types()->Mutable(index);
}
inline void BlockEventsRPC::set_types(int index, const std::string& value) {
  _internal_mutable_types()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::set_types(int index, std::string&& value) {
  _internal_mutable_types()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::set_types(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_types()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::set_types(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_types()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::set_types(int index, absl::string_view value) {
  _internal_mutable_types()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::add_types(const std::string& value) {
  _internal_mutable_types()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::add_types(std::string&& value) {
  _internal_mutable_types()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::add_types(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_types()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::add_types(const char* value, std::size_t size) {
  _internal_mutable_types()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_provider_api.BlockEventsRPC.types)
}
inline void BlockEventsRPC::add_types(absl::string_view value) {
  _internal_mutable_types()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:event_provider_api.BlockEventsRPC.types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockEventsRPC::types() const {
  // @@protoc_insertion_point(field_list:event_provider_api.BlockEventsRPC.types)
  return _internal_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BlockEventsRPC::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:event_provider_api.BlockEventsRPC.types)
  return _internal_mutable_types();
}
inline const std::string& BlockEventsRPC::_internal_types(int index) const {
  return _internal_types().Get(index);
}
inline std::string* BlockEventsRPC::_internal_add_types() {
  return _internal_mutable_types()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockEventsRPC::_internal_types() const {
  return _impl_.types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockEventsRPC::_internal_mutable_types() {
  return &_impl_.types_;
}

// repeated bytes events = 2 [json_name = "events"];
inline int BlockEventsRPC::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int BlockEventsRPC::events_size() const {
  return _internal_events_size();
}
inline void BlockEventsRPC::clear_events() {
  _internal_mutable_events()->Clear();
}
inline std::string* BlockEventsRPC::add_events() {
  std::string* _s = _internal_add_events();
  // @@protoc_insertion_point(field_add_mutable:event_provider_api.BlockEventsRPC.events)
  return _s;
}
inline const std::string& BlockEventsRPC::events(int index) const {
  // @@protoc_insertion_point(field_get:event_provider_api.BlockEventsRPC.events)
  return _internal_events(index);
}
inline std::string* BlockEventsRPC::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:event_provider_api.BlockEventsRPC.events)
  return _internal_mutable_events()->Mutable(index);
}
inline void BlockEventsRPC::set_events(int index, const std::string& value) {
  _internal_mutable_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::set_events(int index, std::string&& value) {
  _internal_mutable_events()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::set_events(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::set_events(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_events()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::set_events(int index, absl::string_view value) {
  _internal_mutable_events()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::add_events(const std::string& value) {
  _internal_mutable_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::add_events(std::string&& value) {
  _internal_mutable_events()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::add_events(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::add_events(const void* value, std::size_t size) {
  _internal_mutable_events()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:event_provider_api.BlockEventsRPC.events)
}
inline void BlockEventsRPC::add_events(absl::string_view value) {
  _internal_mutable_events()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:event_provider_api.BlockEventsRPC.events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockEventsRPC::events() const {
  // @@protoc_insertion_point(field_list:event_provider_api.BlockEventsRPC.events)
  return _internal_events();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* BlockEventsRPC::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:event_provider_api.BlockEventsRPC.events)
  return _internal_mutable_events();
}
inline const std::string& BlockEventsRPC::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline std::string* BlockEventsRPC::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockEventsRPC::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockEventsRPC::_internal_mutable_events() {
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// GetCustomEventsRPCRequest

// string backend = 1 [json_name = "backend"];
inline void GetCustomEventsRPCRequest::clear_backend() {
  _impl_.backend_.ClearToEmpty();
}
inline const std::string& GetCustomEventsRPCRequest::backend() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetCustomEventsRPCRequest.backend)
  return _internal_backend();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCustomEventsRPCRequest::set_backend(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.backend_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetCustomEventsRPCRequest.backend)
}
inline std::string* GetCustomEventsRPCRequest::mutable_backend() {
  std::string* _s = _internal_mutable_backend();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetCustomEventsRPCRequest.backend)
  return _s;
}
inline const std::string& GetCustomEventsRPCRequest::_internal_backend() const {
  return _impl_.backend_.Get();
}
inline void GetCustomEventsRPCRequest::_internal_set_backend(const std::string& value) {
  ;


  _impl_.backend_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCustomEventsRPCRequest::_internal_mutable_backend() {
  ;
  return _impl_.backend_.Mutable( GetArenaForAllocation());
}
inline std::string* GetCustomEventsRPCRequest::release_backend() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetCustomEventsRPCRequest.backend)
  return _impl_.backend_.Release();
}
inline void GetCustomEventsRPCRequest::set_allocated_backend(std::string* value) {
  _impl_.backend_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.backend_.IsDefault()) {
          _impl_.backend_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetCustomEventsRPCRequest.backend)
}

// sint32 height = 2 [json_name = "height"];
inline void GetCustomEventsRPCRequest::clear_height() {
  _impl_.height_ = 0;
}
inline ::int32_t GetCustomEventsRPCRequest::height() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetCustomEventsRPCRequest.height)
  return _internal_height();
}
inline void GetCustomEventsRPCRequest::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:event_provider_api.GetCustomEventsRPCRequest.height)
}
inline ::int32_t GetCustomEventsRPCRequest::_internal_height() const {
  return _impl_.height_;
}
inline void GetCustomEventsRPCRequest::_internal_set_height(::int32_t value) {
  ;
  _impl_.height_ = value;
}

// string events = 3 [json_name = "events"];
inline void GetCustomEventsRPCRequest::clear_events() {
  _impl_.events_.ClearToEmpty();
}
inline const std::string& GetCustomEventsRPCRequest::events() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetCustomEventsRPCRequest.events)
  return _internal_events();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCustomEventsRPCRequest::set_events(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.events_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetCustomEventsRPCRequest.events)
}
inline std::string* GetCustomEventsRPCRequest::mutable_events() {
  std::string* _s = _internal_mutable_events();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetCustomEventsRPCRequest.events)
  return _s;
}
inline const std::string& GetCustomEventsRPCRequest::_internal_events() const {
  return _impl_.events_.Get();
}
inline void GetCustomEventsRPCRequest::_internal_set_events(const std::string& value) {
  ;


  _impl_.events_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCustomEventsRPCRequest::_internal_mutable_events() {
  ;
  return _impl_.events_.Mutable( GetArenaForAllocation());
}
inline std::string* GetCustomEventsRPCRequest::release_events() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetCustomEventsRPCRequest.events)
  return _impl_.events_.Release();
}
inline void GetCustomEventsRPCRequest::set_allocated_events(std::string* value) {
  _impl_.events_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.events_.IsDefault()) {
          _impl_.events_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetCustomEventsRPCRequest.events)
}

// -------------------------------------------------------------------

// GetCustomEventsRPCResponse

// string s = 1 [json_name = "s"];
inline void GetCustomEventsRPCResponse::clear_s() {
  _impl_.s_.ClearToEmpty();
}
inline const std::string& GetCustomEventsRPCResponse::s() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetCustomEventsRPCResponse.s)
  return _internal_s();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCustomEventsRPCResponse::set_s(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.s_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetCustomEventsRPCResponse.s)
}
inline std::string* GetCustomEventsRPCResponse::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetCustomEventsRPCResponse.s)
  return _s;
}
inline const std::string& GetCustomEventsRPCResponse::_internal_s() const {
  return _impl_.s_.Get();
}
inline void GetCustomEventsRPCResponse::_internal_set_s(const std::string& value) {
  ;


  _impl_.s_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCustomEventsRPCResponse::_internal_mutable_s() {
  ;
  return _impl_.s_.Mutable( GetArenaForAllocation());
}
inline std::string* GetCustomEventsRPCResponse::release_s() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetCustomEventsRPCResponse.s)
  return _impl_.s_.Release();
}
inline void GetCustomEventsRPCResponse::set_allocated_s(std::string* value) {
  _impl_.s_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.s_.IsDefault()) {
          _impl_.s_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetCustomEventsRPCResponse.s)
}

// string errmsg = 2 [json_name = "errmsg"];
inline void GetCustomEventsRPCResponse::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& GetCustomEventsRPCResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetCustomEventsRPCResponse.errmsg)
  return _internal_errmsg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCustomEventsRPCResponse::set_errmsg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.errmsg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:event_provider_api.GetCustomEventsRPCResponse.errmsg)
}
inline std::string* GetCustomEventsRPCResponse::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetCustomEventsRPCResponse.errmsg)
  return _s;
}
inline const std::string& GetCustomEventsRPCResponse::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void GetCustomEventsRPCResponse::_internal_set_errmsg(const std::string& value) {
  ;


  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCustomEventsRPCResponse::_internal_mutable_errmsg() {
  ;
  return _impl_.errmsg_.Mutable( GetArenaForAllocation());
}
inline std::string* GetCustomEventsRPCResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetCustomEventsRPCResponse.errmsg)
  return _impl_.errmsg_.Release();
}
inline void GetCustomEventsRPCResponse::set_allocated_errmsg(std::string* value) {
  _impl_.errmsg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.errmsg_.IsDefault()) {
          _impl_.errmsg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetCustomEventsRPCResponse.errmsg)
}

// .event_provider_api.BlockEventsRPC data = 3 [json_name = "data"];
inline bool GetCustomEventsRPCResponse::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void GetCustomEventsRPCResponse::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::event_provider_api::BlockEventsRPC& GetCustomEventsRPCResponse::_internal_data() const {
  const ::event_provider_api::BlockEventsRPC* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::event_provider_api::BlockEventsRPC&>(
      ::event_provider_api::_BlockEventsRPC_default_instance_);
}
inline const ::event_provider_api::BlockEventsRPC& GetCustomEventsRPCResponse::data() const {
  // @@protoc_insertion_point(field_get:event_provider_api.GetCustomEventsRPCResponse.data)
  return _internal_data();
}
inline void GetCustomEventsRPCResponse::unsafe_arena_set_allocated_data(
    ::event_provider_api::BlockEventsRPC* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:event_provider_api.GetCustomEventsRPCResponse.data)
}
inline ::event_provider_api::BlockEventsRPC* GetCustomEventsRPCResponse::release_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_provider_api::BlockEventsRPC* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::event_provider_api::BlockEventsRPC* GetCustomEventsRPCResponse::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:event_provider_api.GetCustomEventsRPCResponse.data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::event_provider_api::BlockEventsRPC* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::event_provider_api::BlockEventsRPC* GetCustomEventsRPCResponse::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::event_provider_api::BlockEventsRPC>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::event_provider_api::BlockEventsRPC* GetCustomEventsRPCResponse::mutable_data() {
  ::event_provider_api::BlockEventsRPC* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:event_provider_api.GetCustomEventsRPCResponse.data)
  return _msg;
}
inline void GetCustomEventsRPCResponse::set_allocated_data(::event_provider_api::BlockEventsRPC* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:event_provider_api.GetCustomEventsRPCResponse.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace event_provider_api


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_exchange_2fevent_5fprovider_5fapi_2eproto_2epb_2eh

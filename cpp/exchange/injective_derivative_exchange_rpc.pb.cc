// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange/injective_derivative_exchange_rpc.proto

#include "exchange/injective_derivative_exchange_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace injective_derivative_exchange_rpc {
template <typename>
PROTOBUF_CONSTEXPR MarketsRequest::MarketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketsRequestDefaultTypeInternal() {}
  union {
    MarketsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketsRequestDefaultTypeInternal _MarketsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MarketsResponse::MarketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.markets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketsResponseDefaultTypeInternal() {}
  union {
    MarketsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketsResponseDefaultTypeInternal _MarketsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativeMarketInfo::DerivativeMarketInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_base_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_quote_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initial_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maintenance_margin_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.service_provider_fee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_token_meta_)*/nullptr
  , /*decltype(_impl_.perpetual_market_info_)*/nullptr
  , /*decltype(_impl_.perpetual_market_funding_)*/nullptr
  , /*decltype(_impl_.expiry_futures_market_info_)*/nullptr
  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u

  , /*decltype(_impl_.is_perpetual_)*/ false
} {}
struct DerivativeMarketInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativeMarketInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativeMarketInfoDefaultTypeInternal() {}
  union {
    DerivativeMarketInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativeMarketInfoDefaultTypeInternal _DerivativeMarketInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TokenMeta::TokenMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.logo_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.decimals_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TokenMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenMetaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenMetaDefaultTypeInternal() {}
  union {
    TokenMeta _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenMetaDefaultTypeInternal _TokenMeta_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerpetualMarketInfo::PerpetualMarketInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hourly_funding_rate_cap_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.hourly_interest_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.next_funding_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.funding_interval_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerpetualMarketInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualMarketInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualMarketInfoDefaultTypeInternal() {}
  union {
    PerpetualMarketInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualMarketInfoDefaultTypeInternal _PerpetualMarketInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerpetualMarketFunding::PerpetualMarketFunding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cumulative_funding_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.cumulative_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.last_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerpetualMarketFundingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualMarketFundingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualMarketFundingDefaultTypeInternal() {}
  union {
    PerpetualMarketFunding _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualMarketFundingDefaultTypeInternal _PerpetualMarketFunding_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExpiryFuturesMarketInfo::ExpiryFuturesMarketInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.settlement_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.expiration_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExpiryFuturesMarketInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpiryFuturesMarketInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpiryFuturesMarketInfoDefaultTypeInternal() {}
  union {
    ExpiryFuturesMarketInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpiryFuturesMarketInfoDefaultTypeInternal _ExpiryFuturesMarketInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MarketRequest::MarketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketRequestDefaultTypeInternal() {}
  union {
    MarketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketRequestDefaultTypeInternal _MarketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MarketResponse::MarketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_)*/nullptr} {}
struct MarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketResponseDefaultTypeInternal() {}
  union {
    MarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketResponseDefaultTypeInternal _MarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamMarketRequest::StreamMarketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamMarketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamMarketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamMarketRequestDefaultTypeInternal() {}
  union {
    StreamMarketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamMarketRequestDefaultTypeInternal _StreamMarketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamMarketResponse::StreamMarketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct StreamMarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamMarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamMarketResponseDefaultTypeInternal() {}
  union {
    StreamMarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamMarketResponseDefaultTypeInternal _StreamMarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinaryOptionsMarketsRequest::BinaryOptionsMarketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryOptionsMarketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryOptionsMarketsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryOptionsMarketsRequestDefaultTypeInternal() {}
  union {
    BinaryOptionsMarketsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryOptionsMarketsRequestDefaultTypeInternal _BinaryOptionsMarketsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinaryOptionsMarketsResponse::BinaryOptionsMarketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.markets_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct BinaryOptionsMarketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryOptionsMarketsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryOptionsMarketsResponseDefaultTypeInternal() {}
  union {
    BinaryOptionsMarketsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryOptionsMarketsResponseDefaultTypeInternal _BinaryOptionsMarketsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinaryOptionsMarketInfo::BinaryOptionsMarketInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_provider_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.oracle_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.taker_fee_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.service_provider_fee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_price_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_quantity_tick_size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.settlement_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quote_token_meta_)*/nullptr
  , /*decltype(_impl_.expiration_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.settlement_timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.oracle_scale_factor_)*/ 0u
} {}
struct BinaryOptionsMarketInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryOptionsMarketInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryOptionsMarketInfoDefaultTypeInternal() {}
  union {
    BinaryOptionsMarketInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryOptionsMarketInfoDefaultTypeInternal _BinaryOptionsMarketInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Paging::Paging(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_)*/ ::int64_t{0}

  , /*decltype(_impl_.from_)*/ 0

  , /*decltype(_impl_.to_)*/ 0

  , /*decltype(_impl_.count_by_subaccount_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PagingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PagingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PagingDefaultTypeInternal() {}
  union {
    Paging _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PagingDefaultTypeInternal _Paging_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinaryOptionsMarketRequest::BinaryOptionsMarketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryOptionsMarketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryOptionsMarketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryOptionsMarketRequestDefaultTypeInternal() {}
  union {
    BinaryOptionsMarketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryOptionsMarketRequestDefaultTypeInternal _BinaryOptionsMarketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BinaryOptionsMarketResponse::BinaryOptionsMarketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_)*/nullptr} {}
struct BinaryOptionsMarketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryOptionsMarketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryOptionsMarketResponseDefaultTypeInternal() {}
  union {
    BinaryOptionsMarketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryOptionsMarketResponseDefaultTypeInternal _BinaryOptionsMarketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbookRequest::OrderbookRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderbookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbookRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbookRequestDefaultTypeInternal() {}
  union {
    OrderbookRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbookRequestDefaultTypeInternal _OrderbookRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbookResponse::OrderbookResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orderbook_)*/nullptr} {}
struct OrderbookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbookResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbookResponseDefaultTypeInternal() {}
  union {
    OrderbookResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbookResponseDefaultTypeInternal _OrderbookResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativeLimitOrderbook::DerivativeLimitOrderbook(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buys_)*/{}
  , /*decltype(_impl_.sells_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DerivativeLimitOrderbookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativeLimitOrderbookDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativeLimitOrderbookDefaultTypeInternal() {}
  union {
    DerivativeLimitOrderbook _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativeLimitOrderbookDefaultTypeInternal _DerivativeLimitOrderbook_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PriceLevel::PriceLevel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PriceLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceLevelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceLevelDefaultTypeInternal() {}
  union {
    PriceLevel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbookV2Request::OrderbookV2Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderbookV2RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbookV2RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbookV2RequestDefaultTypeInternal() {}
  union {
    OrderbookV2Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbookV2RequestDefaultTypeInternal _OrderbookV2Request_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbookV2Response::OrderbookV2Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orderbook_)*/nullptr} {}
struct OrderbookV2ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbookV2ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbookV2ResponseDefaultTypeInternal() {}
  union {
    OrderbookV2Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbookV2ResponseDefaultTypeInternal _OrderbookV2Response_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativeLimitOrderbookV2::DerivativeLimitOrderbookV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buys_)*/{}
  , /*decltype(_impl_.sells_)*/{}
  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DerivativeLimitOrderbookV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativeLimitOrderbookV2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativeLimitOrderbookV2DefaultTypeInternal() {}
  union {
    DerivativeLimitOrderbookV2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativeLimitOrderbookV2DefaultTypeInternal _DerivativeLimitOrderbookV2_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbooksRequest::OrderbooksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderbooksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbooksRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbooksRequestDefaultTypeInternal() {}
  union {
    OrderbooksRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbooksRequestDefaultTypeInternal _OrderbooksRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbooksResponse::OrderbooksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orderbooks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderbooksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbooksResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbooksResponseDefaultTypeInternal() {}
  union {
    OrderbooksResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbooksResponseDefaultTypeInternal _OrderbooksResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SingleDerivativeLimitOrderbook::SingleDerivativeLimitOrderbook(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orderbook_)*/nullptr} {}
struct SingleDerivativeLimitOrderbookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleDerivativeLimitOrderbookDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleDerivativeLimitOrderbookDefaultTypeInternal() {}
  union {
    SingleDerivativeLimitOrderbook _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleDerivativeLimitOrderbookDefaultTypeInternal _SingleDerivativeLimitOrderbook_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbooksV2Request::OrderbooksV2Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderbooksV2RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbooksV2RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbooksV2RequestDefaultTypeInternal() {}
  union {
    OrderbooksV2Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbooksV2RequestDefaultTypeInternal _OrderbooksV2Request_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbooksV2Response::OrderbooksV2Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orderbooks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderbooksV2ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbooksV2ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbooksV2ResponseDefaultTypeInternal() {}
  union {
    OrderbooksV2Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbooksV2ResponseDefaultTypeInternal _OrderbooksV2Response_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SingleDerivativeLimitOrderbookV2::SingleDerivativeLimitOrderbookV2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orderbook_)*/nullptr} {}
struct SingleDerivativeLimitOrderbookV2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR SingleDerivativeLimitOrderbookV2DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SingleDerivativeLimitOrderbookV2DefaultTypeInternal() {}
  union {
    SingleDerivativeLimitOrderbookV2 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SingleDerivativeLimitOrderbookV2DefaultTypeInternal _SingleDerivativeLimitOrderbookV2_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrderbookRequest::StreamOrderbookRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOrderbookRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrderbookRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrderbookRequestDefaultTypeInternal() {}
  union {
    StreamOrderbookRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrderbookRequestDefaultTypeInternal _StreamOrderbookRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrderbookResponse::StreamOrderbookResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orderbook_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct StreamOrderbookResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrderbookResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrderbookResponseDefaultTypeInternal() {}
  union {
    StreamOrderbookResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrderbookResponseDefaultTypeInternal _StreamOrderbookResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrderbookV2Request::StreamOrderbookV2Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOrderbookV2RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrderbookV2RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrderbookV2RequestDefaultTypeInternal() {}
  union {
    StreamOrderbookV2Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrderbookV2RequestDefaultTypeInternal _StreamOrderbookV2Request_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrderbookV2Response::StreamOrderbookV2Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orderbook_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct StreamOrderbookV2ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrderbookV2ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrderbookV2ResponseDefaultTypeInternal() {}
  union {
    StreamOrderbookV2Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrderbookV2ResponseDefaultTypeInternal _StreamOrderbookV2Response_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrderbookUpdateRequest::StreamOrderbookUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOrderbookUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrderbookUpdateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrderbookUpdateRequestDefaultTypeInternal() {}
  union {
    StreamOrderbookUpdateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrderbookUpdateRequestDefaultTypeInternal _StreamOrderbookUpdateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrderbookUpdateResponse::StreamOrderbookUpdateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orderbook_level_updates_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct StreamOrderbookUpdateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrderbookUpdateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrderbookUpdateResponseDefaultTypeInternal() {}
  union {
    StreamOrderbookUpdateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrderbookUpdateResponseDefaultTypeInternal _StreamOrderbookUpdateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderbookLevelUpdates::OrderbookLevelUpdates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buys_)*/{}
  , /*decltype(_impl_.sells_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderbookLevelUpdatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbookLevelUpdatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbookLevelUpdatesDefaultTypeInternal() {}
  union {
    OrderbookLevelUpdates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbookLevelUpdatesDefaultTypeInternal _OrderbookLevelUpdates_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PriceLevelUpdate::PriceLevelUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.is_active_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PriceLevelUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceLevelUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceLevelUpdateDefaultTypeInternal() {}
  union {
    PriceLevelUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceLevelUpdateDefaultTypeInternal _PriceLevelUpdate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrdersRequest::OrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_side_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.is_conditional_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_.include_inactive_)*/ false

  , /*decltype(_impl_.subaccount_total_orders_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrdersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrdersRequestDefaultTypeInternal() {}
  union {
    OrdersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrdersRequestDefaultTypeInternal _OrdersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrdersResponse::OrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct OrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrdersResponseDefaultTypeInternal() {}
  union {
    OrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrdersResponseDefaultTypeInternal _OrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativeLimitOrder::DerivativeLimitOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_side_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.margin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.unfilled_quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trigger_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_recipient_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.placed_order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.created_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.order_number_)*/ ::int64_t{0}

  , /*decltype(_impl_.trigger_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.is_reduce_only_)*/ false

  , /*decltype(_impl_.is_conditional_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DerivativeLimitOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativeLimitOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativeLimitOrderDefaultTypeInternal() {}
  union {
    DerivativeLimitOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativeLimitOrderDefaultTypeInternal _DerivativeLimitOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PositionsRequest::PositionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_.subaccount_total_positions_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsRequestDefaultTypeInternal() {}
  union {
    PositionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsRequestDefaultTypeInternal _PositionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PositionsResponse::PositionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.positions_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct PositionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionsResponseDefaultTypeInternal() {}
  union {
    PositionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionsResponseDefaultTypeInternal _PositionsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativePosition::DerivativePosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.entry_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.margin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.liquidation_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mark_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.aggregate_reduce_only_quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.created_at_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DerivativePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativePositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativePositionDefaultTypeInternal() {}
  union {
    DerivativePosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativePositionDefaultTypeInternal _DerivativePosition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LiquidablePositionsRequest::LiquidablePositionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LiquidablePositionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiquidablePositionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiquidablePositionsRequestDefaultTypeInternal() {}
  union {
    LiquidablePositionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiquidablePositionsRequestDefaultTypeInternal _LiquidablePositionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LiquidablePositionsResponse::LiquidablePositionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.positions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LiquidablePositionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiquidablePositionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiquidablePositionsResponseDefaultTypeInternal() {}
  union {
    LiquidablePositionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiquidablePositionsResponseDefaultTypeInternal _LiquidablePositionsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FundingPaymentsRequest::FundingPaymentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FundingPaymentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundingPaymentsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundingPaymentsRequestDefaultTypeInternal() {}
  union {
    FundingPaymentsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundingPaymentsRequestDefaultTypeInternal _FundingPaymentsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FundingPaymentsResponse::FundingPaymentsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.payments_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct FundingPaymentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundingPaymentsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundingPaymentsResponseDefaultTypeInternal() {}
  union {
    FundingPaymentsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundingPaymentsResponseDefaultTypeInternal _FundingPaymentsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FundingPayment::FundingPayment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FundingPaymentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundingPaymentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundingPaymentDefaultTypeInternal() {}
  union {
    FundingPayment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundingPaymentDefaultTypeInternal _FundingPayment_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FundingRatesRequest::FundingRatesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FundingRatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundingRatesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundingRatesRequestDefaultTypeInternal() {}
  union {
    FundingRatesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundingRatesRequestDefaultTypeInternal _FundingRatesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FundingRatesResponse::FundingRatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.funding_rates_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct FundingRatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundingRatesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundingRatesResponseDefaultTypeInternal() {}
  union {
    FundingRatesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundingRatesResponseDefaultTypeInternal _FundingRatesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FundingRate::FundingRate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FundingRateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FundingRateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FundingRateDefaultTypeInternal() {}
  union {
    FundingRate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FundingRateDefaultTypeInternal _FundingRate_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamPositionsRequest::StreamPositionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_ids_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamPositionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamPositionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamPositionsRequestDefaultTypeInternal() {}
  union {
    StreamPositionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamPositionsRequestDefaultTypeInternal _StreamPositionsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamPositionsResponse::StreamPositionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct StreamPositionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamPositionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamPositionsResponseDefaultTypeInternal() {}
  union {
    StreamPositionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamPositionsResponseDefaultTypeInternal _StreamPositionsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrdersRequest::StreamOrdersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_side_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.is_conditional_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_.include_inactive_)*/ false

  , /*decltype(_impl_.subaccount_total_orders_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOrdersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrdersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrdersRequestDefaultTypeInternal() {}
  union {
    StreamOrdersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrdersRequestDefaultTypeInternal _StreamOrdersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrdersResponse::StreamOrdersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct StreamOrdersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrdersResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrdersResponseDefaultTypeInternal() {}
  union {
    StreamOrdersResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrdersResponseDefaultTypeInternal _StreamOrdersResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TradesRequest::TradesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_ids_)*/{}
  , /*decltype(_impl_.execution_types_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_side_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradesRequestDefaultTypeInternal() {}
  union {
    TradesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradesRequestDefaultTypeInternal _TradesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TradesResponse::TradesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.trades_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct TradesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradesResponseDefaultTypeInternal() {}
  union {
    TradesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradesResponseDefaultTypeInternal _TradesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativeTrade::DerivativeTrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trade_execution_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payout_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_recipient_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trade_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_side_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.position_delta_)*/nullptr
  , /*decltype(_impl_.executed_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.is_liquidation_)*/ false
} {}
struct DerivativeTradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativeTradeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativeTradeDefaultTypeInternal() {}
  union {
    DerivativeTrade _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativeTradeDefaultTypeInternal _DerivativeTrade_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PositionDelta::PositionDelta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trade_direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_margin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDeltaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDeltaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDeltaDefaultTypeInternal() {}
  union {
    PositionDelta _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDeltaDefaultTypeInternal _PositionDelta_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamTradesRequest::StreamTradesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_ids_)*/{}
  , /*decltype(_impl_.subaccount_ids_)*/{}
  , /*decltype(_impl_.execution_types_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_side_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamTradesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamTradesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamTradesRequestDefaultTypeInternal() {}
  union {
    StreamTradesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamTradesRequestDefaultTypeInternal _StreamTradesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamTradesResponse::StreamTradesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trade_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct StreamTradesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamTradesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamTradesResponseDefaultTypeInternal() {}
  union {
    StreamTradesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamTradesResponseDefaultTypeInternal _StreamTradesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SubaccountOrdersListRequest::SubaccountOrdersListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubaccountOrdersListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountOrdersListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountOrdersListRequestDefaultTypeInternal() {}
  union {
    SubaccountOrdersListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountOrdersListRequestDefaultTypeInternal _SubaccountOrdersListRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SubaccountOrdersListResponse::SubaccountOrdersListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct SubaccountOrdersListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountOrdersListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountOrdersListResponseDefaultTypeInternal() {}
  union {
    SubaccountOrdersListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountOrdersListResponseDefaultTypeInternal _SubaccountOrdersListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SubaccountTradesListRequest::SubaccountTradesListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubaccountTradesListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountTradesListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountTradesListRequestDefaultTypeInternal() {}
  union {
    SubaccountTradesListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountTradesListRequestDefaultTypeInternal _SubaccountTradesListRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SubaccountTradesListResponse::SubaccountTradesListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trades_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubaccountTradesListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountTradesListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountTradesListResponseDefaultTypeInternal() {}
  union {
    SubaccountTradesListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountTradesListResponseDefaultTypeInternal _SubaccountTradesListResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrdersHistoryRequest::OrdersHistoryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_types_)*/{}
  , /*decltype(_impl_.execution_types_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.is_conditional_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.skip_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.limit_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrdersHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrdersHistoryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrdersHistoryRequestDefaultTypeInternal() {}
  union {
    OrdersHistoryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrdersHistoryRequestDefaultTypeInternal _OrdersHistoryRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrdersHistoryResponse::OrdersHistoryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_.paging_)*/nullptr} {}
struct OrdersHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrdersHistoryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrdersHistoryResponseDefaultTypeInternal() {}
  union {
    OrdersHistoryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrdersHistoryResponseDefaultTypeInternal _OrdersHistoryResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DerivativeOrderHistory::DerivativeOrderHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execution_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trigger_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.filled_quantity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.placed_order_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.margin_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.created_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.trigger_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.is_active_)*/ false

  , /*decltype(_impl_.is_reduce_only_)*/ false

  , /*decltype(_impl_.is_conditional_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DerivativeOrderHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DerivativeOrderHistoryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DerivativeOrderHistoryDefaultTypeInternal() {}
  union {
    DerivativeOrderHistory _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DerivativeOrderHistoryDefaultTypeInternal _DerivativeOrderHistory_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrdersHistoryRequest::StreamOrdersHistoryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_types_)*/{}
  , /*decltype(_impl_.execution_types_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.direction_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.state_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamOrdersHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrdersHistoryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrdersHistoryRequestDefaultTypeInternal() {}
  union {
    StreamOrdersHistoryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrdersHistoryRequestDefaultTypeInternal _StreamOrdersHistoryRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StreamOrdersHistoryResponse::StreamOrdersHistoryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operation_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}
} {}
struct StreamOrdersHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamOrdersHistoryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamOrdersHistoryResponseDefaultTypeInternal() {}
  union {
    StreamOrdersHistoryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamOrdersHistoryResponseDefaultTypeInternal _StreamOrdersHistoryResponse_default_instance_;
}  // namespace injective_derivative_exchange_rpc
static ::_pb::Metadata file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[71];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto = nullptr;
const ::uint32_t TableStruct_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketsRequest, _impl_.market_status_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketsRequest, _impl_.quote_denom_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketsResponse, _impl_.markets_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.market_status_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.oracle_base_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.oracle_quote_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.initial_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.maintenance_margin_ratio_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.quote_token_meta_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.service_provider_fee_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.is_perpetual_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.min_quantity_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.perpetual_market_info_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.perpetual_market_funding_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeMarketInfo, _impl_.expiry_futures_market_info_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    2,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TokenMeta, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TokenMeta, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TokenMeta, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TokenMeta, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TokenMeta, _impl_.logo_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TokenMeta, _impl_.decimals_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TokenMeta, _impl_.updated_at_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketInfo, _impl_.hourly_funding_rate_cap_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketInfo, _impl_.hourly_interest_rate_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketInfo, _impl_.next_funding_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketInfo, _impl_.funding_interval_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketFunding, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketFunding, _impl_.cumulative_funding_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketFunding, _impl_.cumulative_price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PerpetualMarketFunding, _impl_.last_timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo, _impl_.expiration_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo, _impl_.settlement_price_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::MarketResponse, _impl_.market_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamMarketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamMarketRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamMarketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamMarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamMarketResponse, _impl_.market_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamMarketResponse, _impl_.operation_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamMarketResponse, _impl_.timestamp_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, _impl_.market_status_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse, _impl_.markets_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse, _impl_.paging_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.market_status_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.oracle_symbol_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.oracle_provider_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.oracle_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.oracle_scale_factor_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.expiration_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.settlement_timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.quote_denom_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.quote_token_meta_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.maker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.taker_fee_rate_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.service_provider_fee_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.min_price_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.min_quantity_tick_size_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo, _impl_.settlement_price_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::Paging, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::Paging, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::Paging, _impl_.from_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::Paging, _impl_.to_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::Paging, _impl_.count_by_subaccount_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse, _impl_.market_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookResponse, _impl_.orderbook_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrderbook, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrderbook, _impl_.buys_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrderbook, _impl_.sells_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevel, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevel, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevel, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookV2Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookV2Request, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookV2Response, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookV2Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookV2Response, _impl_.orderbook_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2, _impl_.buys_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2, _impl_.sells_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2, _impl_.sequence_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbooksRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbooksRequest, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbooksResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbooksResponse, _impl_.orderbooks_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbook, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbook, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbook, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbook, _impl_.orderbook_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbooksV2Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbooksV2Request, _impl_.market_ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbooksV2Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbooksV2Response, _impl_.orderbooks_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbookV2, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbookV2, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbookV2, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbookV2, _impl_.orderbook_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookResponse, _impl_.orderbook_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookResponse, _impl_.operation_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookResponse, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookResponse, _impl_.market_id_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookV2Request, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookV2Request, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookV2Response, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookV2Response, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookV2Response, _impl_.orderbook_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookV2Response, _impl_.operation_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookV2Response, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookV2Response, _impl_.market_id_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse, _impl_.orderbook_level_updates_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse, _impl_.operation_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse, _impl_.market_id_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookLevelUpdates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookLevelUpdates, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookLevelUpdates, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookLevelUpdates, _impl_.buys_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookLevelUpdates, _impl_.sells_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrderbookLevelUpdates, _impl_.updated_at_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevelUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevelUpdate, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevelUpdate, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevelUpdate, _impl_.is_active_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PriceLevelUpdate, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.order_side_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.is_conditional_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.order_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.include_inactive_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersRequest, _impl_.subaccount_total_orders_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersResponse, _impl_.orders_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersResponse, _impl_.paging_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.order_side_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.is_reduce_only_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.margin_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.unfilled_quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.trigger_price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.fee_recipient_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.updated_at_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.order_number_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.order_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.is_conditional_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.trigger_at_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.placed_order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeLimitOrder, _impl_.execution_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsRequest, _impl_.subaccount_total_positions_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsResponse, _impl_.positions_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionsResponse, _impl_.paging_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.entry_price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.margin_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.liquidation_price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.mark_price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.aggregate_reduce_only_quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.updated_at_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativePosition, _impl_.created_at_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::LiquidablePositionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::LiquidablePositionsRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::LiquidablePositionsRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::LiquidablePositionsRequest, _impl_.limit_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::LiquidablePositionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::LiquidablePositionsResponse, _impl_.positions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsRequest, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsResponse, _impl_.payments_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPaymentsResponse, _impl_.paging_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPayment, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPayment, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPayment, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPayment, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingPayment, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesRequest, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesResponse, _impl_.funding_rates_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRatesResponse, _impl_.paging_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRate, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRate, _impl_.rate_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::FundingRate, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsRequest, _impl_.subaccount_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsResponse, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamPositionsResponse, _impl_.timestamp_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.order_side_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.is_conditional_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.order_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.include_inactive_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersRequest, _impl_.subaccount_total_orders_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersResponse, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersResponse, _impl_.operation_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersResponse, _impl_.timestamp_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.execution_side_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.subaccount_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesRequest, _impl_.execution_types_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesResponse, _impl_.trades_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::TradesResponse, _impl_.paging_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.trade_execution_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.is_liquidation_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.position_delta_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.payout_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.fee_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.executed_at_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.fee_recipient_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.trade_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeTrade, _impl_.execution_side_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionDelta, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionDelta, _impl_.trade_direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionDelta, _impl_.execution_price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionDelta, _impl_.execution_quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::PositionDelta, _impl_.execution_margin_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.execution_side_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.market_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.subaccount_ids_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesRequest, _impl_.execution_types_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesResponse, _impl_.trade_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesResponse, _impl_.operation_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamTradesResponse, _impl_.timestamp_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListResponse, _impl_.orders_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountOrdersListResponse, _impl_.paging_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListRequest, _impl_.execution_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListRequest, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListRequest, _impl_.limit_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::SubaccountTradesListResponse, _impl_.trades_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.skip_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.order_types_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.end_time_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.is_conditional_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.order_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryRequest, _impl_.execution_types_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryResponse, _impl_.orders_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::OrdersHistoryResponse, _impl_.paging_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.is_active_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.execution_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.order_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.trigger_price_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.filled_quantity_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.updated_at_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.is_reduce_only_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.is_conditional_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.trigger_at_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.placed_order_hash_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::DerivativeOrderHistory, _impl_.margin_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest, _impl_.order_types_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest, _impl_.execution_types_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse, _impl_.operation_type_),
    PROTOBUF_FIELD_OFFSET(::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse, _impl_.timestamp_),
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::injective_derivative_exchange_rpc::MarketsRequest)},
        { 10, -1, -1, sizeof(::injective_derivative_exchange_rpc::MarketsResponse)},
        { 19, 47, -1, sizeof(::injective_derivative_exchange_rpc::DerivativeMarketInfo)},
        { 67, -1, -1, sizeof(::injective_derivative_exchange_rpc::TokenMeta)},
        { 81, -1, -1, sizeof(::injective_derivative_exchange_rpc::PerpetualMarketInfo)},
        { 93, -1, -1, sizeof(::injective_derivative_exchange_rpc::PerpetualMarketFunding)},
        { 104, -1, -1, sizeof(::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo)},
        { 114, -1, -1, sizeof(::injective_derivative_exchange_rpc::MarketRequest)},
        { 123, 132, -1, sizeof(::injective_derivative_exchange_rpc::MarketResponse)},
        { 133, -1, -1, sizeof(::injective_derivative_exchange_rpc::StreamMarketRequest)},
        { 142, 153, -1, sizeof(::injective_derivative_exchange_rpc::StreamMarketResponse)},
        { 156, -1, -1, sizeof(::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest)},
        { 168, 178, -1, sizeof(::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse)},
        { 180, 205, -1, sizeof(::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo)},
        { 222, -1, -1, sizeof(::injective_derivative_exchange_rpc::Paging)},
        { 234, -1, -1, sizeof(::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest)},
        { 243, 252, -1, sizeof(::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse)},
        { 253, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrderbookRequest)},
        { 262, 271, -1, sizeof(::injective_derivative_exchange_rpc::OrderbookResponse)},
        { 272, -1, -1, sizeof(::injective_derivative_exchange_rpc::DerivativeLimitOrderbook)},
        { 282, -1, -1, sizeof(::injective_derivative_exchange_rpc::PriceLevel)},
        { 293, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrderbookV2Request)},
        { 302, 311, -1, sizeof(::injective_derivative_exchange_rpc::OrderbookV2Response)},
        { 312, -1, -1, sizeof(::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2)},
        { 323, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrderbooksRequest)},
        { 332, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrderbooksResponse)},
        { 341, 351, -1, sizeof(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbook)},
        { 353, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrderbooksV2Request)},
        { 362, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrderbooksV2Response)},
        { 371, 381, -1, sizeof(::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbookV2)},
        { 383, -1, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrderbookRequest)},
        { 392, 404, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrderbookResponse)},
        { 408, -1, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrderbookV2Request)},
        { 417, 429, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrderbookV2Response)},
        { 433, -1, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest)},
        { 442, 454, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse)},
        { 458, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrderbookLevelUpdates)},
        { 471, -1, -1, sizeof(::injective_derivative_exchange_rpc::PriceLevelUpdate)},
        { 483, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrdersRequest)},
        { 503, 513, -1, sizeof(::injective_derivative_exchange_rpc::OrdersResponse)},
        { 515, -1, -1, sizeof(::injective_derivative_exchange_rpc::DerivativeLimitOrder)},
        { 543, -1, -1, sizeof(::injective_derivative_exchange_rpc::PositionsRequest)},
        { 560, 570, -1, sizeof(::injective_derivative_exchange_rpc::PositionsResponse)},
        { 572, -1, -1, sizeof(::injective_derivative_exchange_rpc::DerivativePosition)},
        { 592, -1, -1, sizeof(::injective_derivative_exchange_rpc::LiquidablePositionsRequest)},
        { 603, -1, -1, sizeof(::injective_derivative_exchange_rpc::LiquidablePositionsResponse)},
        { 612, -1, -1, sizeof(::injective_derivative_exchange_rpc::FundingPaymentsRequest)},
        { 626, 636, -1, sizeof(::injective_derivative_exchange_rpc::FundingPaymentsResponse)},
        { 638, -1, -1, sizeof(::injective_derivative_exchange_rpc::FundingPayment)},
        { 650, -1, -1, sizeof(::injective_derivative_exchange_rpc::FundingRatesRequest)},
        { 662, 672, -1, sizeof(::injective_derivative_exchange_rpc::FundingRatesResponse)},
        { 674, -1, -1, sizeof(::injective_derivative_exchange_rpc::FundingRate)},
        { 685, -1, -1, sizeof(::injective_derivative_exchange_rpc::StreamPositionsRequest)},
        { 697, 707, -1, sizeof(::injective_derivative_exchange_rpc::StreamPositionsResponse)},
        { 709, -1, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrdersRequest)},
        { 729, 740, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrdersResponse)},
        { 743, -1, -1, sizeof(::injective_derivative_exchange_rpc::TradesRequest)},
        { 762, 772, -1, sizeof(::injective_derivative_exchange_rpc::TradesResponse)},
        { 774, 794, -1, sizeof(::injective_derivative_exchange_rpc::DerivativeTrade)},
        { 806, -1, -1, sizeof(::injective_derivative_exchange_rpc::PositionDelta)},
        { 818, -1, -1, sizeof(::injective_derivative_exchange_rpc::StreamTradesRequest)},
        { 837, 848, -1, sizeof(::injective_derivative_exchange_rpc::StreamTradesResponse)},
        { 851, -1, -1, sizeof(::injective_derivative_exchange_rpc::SubaccountOrdersListRequest)},
        { 863, 873, -1, sizeof(::injective_derivative_exchange_rpc::SubaccountOrdersListResponse)},
        { 875, -1, -1, sizeof(::injective_derivative_exchange_rpc::SubaccountTradesListRequest)},
        { 889, -1, -1, sizeof(::injective_derivative_exchange_rpc::SubaccountTradesListResponse)},
        { 898, -1, -1, sizeof(::injective_derivative_exchange_rpc::OrdersHistoryRequest)},
        { 918, 928, -1, sizeof(::injective_derivative_exchange_rpc::OrdersHistoryResponse)},
        { 930, -1, -1, sizeof(::injective_derivative_exchange_rpc::DerivativeOrderHistory)},
        { 957, -1, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest)},
        { 971, 982, -1, sizeof(::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::injective_derivative_exchange_rpc::_MarketsRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_MarketsResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_DerivativeMarketInfo_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_TokenMeta_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_PerpetualMarketInfo_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_PerpetualMarketFunding_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_ExpiryFuturesMarketInfo_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_MarketRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_MarketResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamMarketRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamMarketResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_BinaryOptionsMarketsRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_BinaryOptionsMarketsResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_BinaryOptionsMarketInfo_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_Paging_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_BinaryOptionsMarketRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_BinaryOptionsMarketResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbookRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbookResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_DerivativeLimitOrderbook_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_PriceLevel_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbookV2Request_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbookV2Response_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_DerivativeLimitOrderbookV2_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbooksRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbooksResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_SingleDerivativeLimitOrderbook_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbooksV2Request_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbooksV2Response_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_SingleDerivativeLimitOrderbookV2_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrderbookRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrderbookResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrderbookV2Request_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrderbookV2Response_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrderbookUpdateRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrderbookUpdateResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrderbookLevelUpdates_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_PriceLevelUpdate_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrdersRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrdersResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_DerivativeLimitOrder_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_PositionsRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_PositionsResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_DerivativePosition_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_LiquidablePositionsRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_LiquidablePositionsResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_FundingPaymentsRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_FundingPaymentsResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_FundingPayment_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_FundingRatesRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_FundingRatesResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_FundingRate_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamPositionsRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamPositionsResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrdersRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrdersResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_TradesRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_TradesResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_DerivativeTrade_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_PositionDelta_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamTradesRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamTradesResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_SubaccountOrdersListRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_SubaccountOrdersListResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_SubaccountTradesListRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_SubaccountTradesListResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrdersHistoryRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_OrdersHistoryResponse_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_DerivativeOrderHistory_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrdersHistoryRequest_default_instance_._instance,
    &::injective_derivative_exchange_rpc::_StreamOrdersHistoryResponse_default_instance_._instance,
};
const char descriptor_table_protodef_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n0exchange/injective_derivative_exchange"
    "_rpc.proto\022!injective_derivative_exchang"
    "e_rpc\"V\n\016MarketsRequest\022#\n\rmarket_status"
    "\030\001 \001(\tR\014marketStatus\022\037\n\013quote_denom\030\002 \001("
    "\tR\nquoteDenom\"d\n\017MarketsResponse\022Q\n\007mark"
    "ets\030\001 \003(\01327.injective_derivative_exchang"
    "e_rpc.DerivativeMarketInfoR\007markets\"\311\010\n\024"
    "DerivativeMarketInfo\022\033\n\tmarket_id\030\001 \001(\tR"
    "\010marketId\022#\n\rmarket_status\030\002 \001(\tR\014market"
    "Status\022\026\n\006ticker\030\003 \001(\tR\006ticker\022\037\n\013oracle"
    "_base\030\004 \001(\tR\noracleBase\022!\n\014oracle_quote\030"
    "\005 \001(\tR\013oracleQuote\022\037\n\013oracle_type\030\006 \001(\tR"
    "\noracleType\022.\n\023oracle_scale_factor\030\007 \001(\r"
    "R\021oracleScaleFactor\0220\n\024initial_margin_ra"
    "tio\030\010 \001(\tR\022initialMarginRatio\0228\n\030mainten"
    "ance_margin_ratio\030\t \001(\tR\026maintenanceMarg"
    "inRatio\022\037\n\013quote_denom\030\n \001(\tR\nquoteDenom"
    "\022V\n\020quote_token_meta\030\013 \001(\0132,.injective_d"
    "erivative_exchange_rpc.TokenMetaR\016quoteT"
    "okenMeta\022$\n\016maker_fee_rate\030\014 \001(\tR\014makerF"
    "eeRate\022$\n\016taker_fee_rate\030\r \001(\tR\014takerFee"
    "Rate\0220\n\024service_provider_fee\030\016 \001(\tR\022serv"
    "iceProviderFee\022!\n\014is_perpetual\030\017 \001(\010R\013is"
    "Perpetual\022-\n\023min_price_tick_size\030\020 \001(\tR\020"
    "minPriceTickSize\0223\n\026min_quantity_tick_si"
    "ze\030\021 \001(\tR\023minQuantityTickSize\022j\n\025perpetu"
    "al_market_info\030\022 \001(\01326.injective_derivat"
    "ive_exchange_rpc.PerpetualMarketInfoR\023pe"
    "rpetualMarketInfo\022s\n\030perpetual_market_fu"
    "nding\030\023 \001(\01329.injective_derivative_excha"
    "nge_rpc.PerpetualMarketFundingR\026perpetua"
    "lMarketFunding\022w\n\032expiry_futures_market_"
    "info\030\024 \001(\0132:.injective_derivative_exchan"
    "ge_rpc.ExpiryFuturesMarketInfoR\027expiryFu"
    "turesMarketInfo\"\240\001\n\tTokenMeta\022\022\n\004name\030\001 "
    "\001(\tR\004name\022\030\n\007address\030\002 \001(\tR\007address\022\026\n\006s"
    "ymbol\030\003 \001(\tR\006symbol\022\022\n\004logo\030\004 \001(\tR\004logo\022"
    "\032\n\010decimals\030\005 \001(\021R\010decimals\022\035\n\nupdated_a"
    "t\030\006 \001(\022R\tupdatedAt\"\337\001\n\023PerpetualMarketIn"
    "fo\0225\n\027hourly_funding_rate_cap\030\001 \001(\tR\024hou"
    "rlyFundingRateCap\0220\n\024hourly_interest_rat"
    "e\030\002 \001(\tR\022hourlyInterestRate\0224\n\026next_fund"
    "ing_timestamp\030\003 \001(\022R\024nextFundingTimestam"
    "p\022)\n\020funding_interval\030\004 \001(\022R\017fundingInte"
    "rval\"\231\001\n\026PerpetualMarketFunding\022-\n\022cumul"
    "ative_funding\030\001 \001(\tR\021cumulativeFunding\022)"
    "\n\020cumulative_price\030\002 \001(\tR\017cumulativePric"
    "e\022%\n\016last_timestamp\030\003 \001(\022R\rlastTimestamp"
    "\"w\n\027ExpiryFuturesMarketInfo\0221\n\024expiratio"
    "n_timestamp\030\001 \001(\022R\023expirationTimestamp\022)"
    "\n\020settlement_price\030\002 \001(\tR\017settlementPric"
    "e\",\n\rMarketRequest\022\033\n\tmarket_id\030\001 \001(\tR\010m"
    "arketId\"a\n\016MarketResponse\022O\n\006market\030\001 \001("
    "\01327.injective_derivative_exchange_rpc.De"
    "rivativeMarketInfoR\006market\"4\n\023StreamMark"
    "etRequest\022\035\n\nmarket_ids\030\001 \003(\tR\tmarketIds"
    "\"\254\001\n\024StreamMarketResponse\022O\n\006market\030\001 \001("
    "\01327.injective_derivative_exchange_rpc.De"
    "rivativeMarketInfoR\006market\022%\n\016operation_"
    "type\030\002 \001(\tR\roperationType\022\034\n\ttimestamp\030\003"
    " \001(\022R\ttimestamp\"\215\001\n\033BinaryOptionsMarkets"
    "Request\022#\n\rmarket_status\030\001 \001(\tR\014marketSt"
    "atus\022\037\n\013quote_denom\030\002 \001(\tR\nquoteDenom\022\022\n"
    "\004skip\030\003 \001(\004R\004skip\022\024\n\005limit\030\004 \001(\021R\005limit\""
    "\267\001\n\034BinaryOptionsMarketsResponse\022T\n\007mark"
    "ets\030\001 \003(\0132:.injective_derivative_exchang"
    "e_rpc.BinaryOptionsMarketInfoR\007markets\022A"
    "\n\006paging\030\002 \001(\0132).injective_derivative_ex"
    "change_rpc.PagingR\006paging\"\376\005\n\027BinaryOpti"
    "onsMarketInfo\022\033\n\tmarket_id\030\001 \001(\tR\010market"
    "Id\022#\n\rmarket_status\030\002 \001(\tR\014marketStatus\022"
    "\026\n\006ticker\030\003 \001(\tR\006ticker\022#\n\roracle_symbol"
    "\030\004 \001(\tR\014oracleSymbol\022\'\n\017oracle_provider\030"
    "\005 \001(\tR\016oracleProvider\022\037\n\013oracle_type\030\006 \001"
    "(\tR\noracleType\022.\n\023oracle_scale_factor\030\007 "
    "\001(\rR\021oracleScaleFactor\0221\n\024expiration_tim"
    "estamp\030\010 \001(\022R\023expirationTimestamp\0221\n\024set"
    "tlement_timestamp\030\t \001(\022R\023settlementTimes"
    "tamp\022\037\n\013quote_denom\030\n \001(\tR\nquoteDenom\022V\n"
    "\020quote_token_meta\030\013 \001(\0132,.injective_deri"
    "vative_exchange_rpc.TokenMetaR\016quoteToke"
    "nMeta\022$\n\016maker_fee_rate\030\014 \001(\tR\014makerFeeR"
    "ate\022$\n\016taker_fee_rate\030\r \001(\tR\014takerFeeRat"
    "e\0220\n\024service_provider_fee\030\016 \001(\tR\022service"
    "ProviderFee\022-\n\023min_price_tick_size\030\017 \001(\t"
    "R\020minPriceTickSize\0223\n\026min_quantity_tick_"
    "size\030\020 \001(\tR\023minQuantityTickSize\022)\n\020settl"
    "ement_price\030\021 \001(\tR\017settlementPrice\"r\n\006Pa"
    "ging\022\024\n\005total\030\001 \001(\022R\005total\022\022\n\004from\030\002 \001(\021"
    "R\004from\022\016\n\002to\030\003 \001(\021R\002to\022.\n\023count_by_subac"
    "count\030\004 \001(\022R\021countBySubaccount\"9\n\032Binary"
    "OptionsMarketRequest\022\033\n\tmarket_id\030\001 \001(\tR"
    "\010marketId\"q\n\033BinaryOptionsMarketResponse"
    "\022R\n\006market\030\001 \001(\0132:.injective_derivative_"
    "exchange_rpc.BinaryOptionsMarketInfoR\006ma"
    "rket\"/\n\020OrderbookRequest\022\033\n\tmarket_id\030\001 "
    "\001(\tR\010marketId\"n\n\021OrderbookResponse\022Y\n\tor"
    "derbook\030\001 \001(\0132;.injective_derivative_exc"
    "hange_rpc.DerivativeLimitOrderbookR\torde"
    "rbook\"\242\001\n\030DerivativeLimitOrderbook\022A\n\004bu"
    "ys\030\001 \003(\0132-.injective_derivative_exchange"
    "_rpc.PriceLevelR\004buys\022C\n\005sells\030\002 \003(\0132-.i"
    "njective_derivative_exchange_rpc.PriceLe"
    "velR\005sells\"\\\n\nPriceLevel\022\024\n\005price\030\001 \001(\tR"
    "\005price\022\032\n\010quantity\030\002 \001(\tR\010quantity\022\034\n\tti"
    "mestamp\030\003 \001(\022R\ttimestamp\"1\n\022OrderbookV2R"
    "equest\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\"r\n\023O"
    "rderbookV2Response\022[\n\torderbook\030\001 \001(\0132=."
    "injective_derivative_exchange_rpc.Deriva"
    "tiveLimitOrderbookV2R\torderbook\"\300\001\n\032Deri"
    "vativeLimitOrderbookV2\022A\n\004buys\030\001 \003(\0132-.i"
    "njective_derivative_exchange_rpc.PriceLe"
    "velR\004buys\022C\n\005sells\030\002 \003(\0132-.injective_der"
    "ivative_exchange_rpc.PriceLevelR\005sells\022\032"
    "\n\010sequence\030\003 \001(\004R\010sequence\"2\n\021Orderbooks"
    "Request\022\035\n\nmarket_ids\030\001 \003(\tR\tmarketIds\"w"
    "\n\022OrderbooksResponse\022a\n\norderbooks\030\001 \003(\013"
    "2A.injective_derivative_exchange_rpc.Sin"
    "gleDerivativeLimitOrderbookR\norderbooks\""
    "\230\001\n\036SingleDerivativeLimitOrderbook\022\033\n\tma"
    "rket_id\030\001 \001(\tR\010marketId\022Y\n\torderbook\030\002 \001"
    "(\0132;.injective_derivative_exchange_rpc.D"
    "erivativeLimitOrderbookR\torderbook\"4\n\023Or"
    "derbooksV2Request\022\035\n\nmarket_ids\030\001 \003(\tR\tm"
    "arketIds\"{\n\024OrderbooksV2Response\022c\n\norde"
    "rbooks\030\001 \003(\0132C.injective_derivative_exch"
    "ange_rpc.SingleDerivativeLimitOrderbookV"
    "2R\norderbooks\"\234\001\n SingleDerivativeLimitO"
    "rderbookV2\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022"
    "[\n\torderbook\030\002 \001(\0132=.injective_derivativ"
    "e_exchange_rpc.DerivativeLimitOrderbookV"
    "2R\torderbook\"7\n\026StreamOrderbookRequest\022\035"
    "\n\nmarket_ids\030\001 \003(\tR\tmarketIds\"\326\001\n\027Stream"
    "OrderbookResponse\022Y\n\torderbook\030\001 \001(\0132;.i"
    "njective_derivative_exchange_rpc.Derivat"
    "iveLimitOrderbookR\torderbook\022%\n\016operatio"
    "n_type\030\002 \001(\tR\roperationType\022\034\n\ttimestamp"
    "\030\003 \001(\022R\ttimestamp\022\033\n\tmarket_id\030\004 \001(\tR\010ma"
    "rketId\"9\n\030StreamOrderbookV2Request\022\035\n\nma"
    "rket_ids\030\001 \003(\tR\tmarketIds\"\332\001\n\031StreamOrde"
    "rbookV2Response\022[\n\torderbook\030\001 \001(\0132=.inj"
    "ective_derivative_exchange_rpc.Derivativ"
    "eLimitOrderbookV2R\torderbook\022%\n\016operatio"
    "n_type\030\002 \001(\tR\roperationType\022\034\n\ttimestamp"
    "\030\003 \001(\022R\ttimestamp\022\033\n\tmarket_id\030\004 \001(\tR\010ma"
    "rketId\"=\n\034StreamOrderbookUpdateRequest\022\035"
    "\n\nmarket_ids\030\001 \003(\tR\tmarketIds\"\363\001\n\035Stream"
    "OrderbookUpdateResponse\022p\n\027orderbook_lev"
    "el_updates\030\001 \001(\01328.injective_derivative_"
    "exchange_rpc.OrderbookLevelUpdatesR\025orde"
    "rbookLevelUpdates\022%\n\016operation_type\030\002 \001("
    "\tR\roperationType\022\034\n\ttimestamp\030\003 \001(\022R\ttim"
    "estamp\022\033\n\tmarket_id\030\004 \001(\tR\010marketId\"\203\002\n\025"
    "OrderbookLevelUpdates\022\033\n\tmarket_id\030\001 \001(\t"
    "R\010marketId\022\032\n\010sequence\030\002 \001(\004R\010sequence\022G"
    "\n\004buys\030\003 \003(\01323.injective_derivative_exch"
    "ange_rpc.PriceLevelUpdateR\004buys\022I\n\005sells"
    "\030\004 \003(\01323.injective_derivative_exchange_r"
    "pc.PriceLevelUpdateR\005sells\022\035\n\nupdated_at"
    "\030\005 \001(\022R\tupdatedAt\"\177\n\020PriceLevelUpdate\022\024\n"
    "\005price\030\001 \001(\tR\005price\022\032\n\010quantity\030\002 \001(\tR\010q"
    "uantity\022\033\n\tis_active\030\003 \001(\010R\010isActive\022\034\n\t"
    "timestamp\030\004 \001(\022R\ttimestamp\"\234\003\n\rOrdersReq"
    "uest\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022\035\n\nord"
    "er_side\030\002 \001(\tR\torderSide\022#\n\rsubaccount_i"
    "d\030\003 \001(\tR\014subaccountId\022\022\n\004skip\030\004 \001(\004R\004ski"
    "p\022\024\n\005limit\030\005 \001(\021R\005limit\022\035\n\nstart_time\030\006 "
    "\001(\022R\tstartTime\022\031\n\010end_time\030\007 \001(\022R\007endTim"
    "e\022\035\n\nmarket_ids\030\010 \003(\tR\tmarketIds\022%\n\016is_c"
    "onditional\030\t \001(\tR\risConditional\022\035\n\norder"
    "_type\030\n \001(\tR\torderType\022)\n\020include_inacti"
    "ve\030\013 \001(\010R\017includeInactive\0226\n\027subaccount_"
    "total_orders\030\014 \001(\010R\025subaccountTotalOrder"
    "s\"\244\001\n\016OrdersResponse\022O\n\006orders\030\001 \003(\01327.i"
    "njective_derivative_exchange_rpc.Derivat"
    "iveLimitOrderR\006orders\022A\n\006paging\030\002 \001(\0132)."
    "injective_derivative_exchange_rpc.Paging"
    "R\006paging\"\254\005\n\024DerivativeLimitOrder\022\035\n\nord"
    "er_hash\030\001 \001(\tR\torderHash\022\035\n\norder_side\030\002"
    " \001(\tR\torderSide\022\033\n\tmarket_id\030\003 \001(\tR\010mark"
    "etId\022#\n\rsubaccount_id\030\004 \001(\tR\014subaccountI"
    "d\022$\n\016is_reduce_only\030\005 \001(\010R\014isReduceOnly\022"
    "\026\n\006margin\030\006 \001(\tR\006margin\022\024\n\005price\030\007 \001(\tR\005"
    "price\022\032\n\010quantity\030\010 \001(\tR\010quantity\022+\n\021unf"
    "illed_quantity\030\t \001(\tR\020unfilledQuantity\022#"
    "\n\rtrigger_price\030\n \001(\tR\014triggerPrice\022#\n\rf"
    "ee_recipient\030\013 \001(\tR\014feeRecipient\022\024\n\005stat"
    "e\030\014 \001(\tR\005state\022\035\n\ncreated_at\030\r \001(\022R\tcrea"
    "tedAt\022\035\n\nupdated_at\030\016 \001(\022R\tupdatedAt\022!\n\014"
    "order_number\030\017 \001(\022R\013orderNumber\022\035\n\norder"
    "_type\030\020 \001(\tR\torderType\022%\n\016is_conditional"
    "\030\021 \001(\010R\risConditional\022\035\n\ntrigger_at\030\022 \001("
    "\004R\ttriggerAt\022*\n\021placed_order_hash\030\023 \001(\tR"
    "\017placedOrderHash\022%\n\016execution_type\030\024 \001(\t"
    "R\rexecutionType\"\263\002\n\020PositionsRequest\022#\n\r"
    "subaccount_id\030\001 \001(\tR\014subaccountId\022\033\n\tmar"
    "ket_id\030\002 \001(\tR\010marketId\022\022\n\004skip\030\003 \001(\004R\004sk"
    "ip\022\024\n\005limit\030\004 \001(\021R\005limit\022\035\n\nstart_time\030\005"
    " \001(\022R\tstartTime\022\031\n\010end_time\030\006 \001(\022R\007endTi"
    "me\022\035\n\nmarket_ids\030\007 \003(\tR\tmarketIds\022\034\n\tdir"
    "ection\030\010 \001(\tR\tdirection\022<\n\032subaccount_to"
    "tal_positions\030\t \001(\010R\030subaccountTotalPosi"
    "tions\"\253\001\n\021PositionsResponse\022S\n\tpositions"
    "\030\001 \003(\01325.injective_derivative_exchange_r"
    "pc.DerivativePositionR\tpositions\022A\n\006pagi"
    "ng\030\002 \001(\0132).injective_derivative_exchange"
    "_rpc.PagingR\006paging\"\260\003\n\022DerivativePositi"
    "on\022\026\n\006ticker\030\001 \001(\tR\006ticker\022\033\n\tmarket_id\030"
    "\002 \001(\tR\010marketId\022#\n\rsubaccount_id\030\003 \001(\tR\014"
    "subaccountId\022\034\n\tdirection\030\004 \001(\tR\tdirecti"
    "on\022\032\n\010quantity\030\005 \001(\tR\010quantity\022\037\n\013entry_"
    "price\030\006 \001(\tR\nentryPrice\022\026\n\006margin\030\007 \001(\tR"
    "\006margin\022+\n\021liquidation_price\030\010 \001(\tR\020liqu"
    "idationPrice\022\035\n\nmark_price\030\t \001(\tR\tmarkPr"
    "ice\022C\n\036aggregate_reduce_only_quantity\030\013 "
    "\001(\tR\033aggregateReduceOnlyQuantity\022\035\n\nupda"
    "ted_at\030\014 \001(\022R\tupdatedAt\022\035\n\ncreated_at\030\r "
    "\001(\022R\tcreatedAt\"c\n\032LiquidablePositionsReq"
    "uest\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022\022\n\004ski"
    "p\030\002 \001(\004R\004skip\022\024\n\005limit\030\003 \001(\021R\005limit\"r\n\033L"
    "iquidablePositionsResponse\022S\n\tpositions\030"
    "\001 \003(\01325.injective_derivative_exchange_rp"
    "c.DerivativePositionR\tpositions\"\276\001\n\026Fund"
    "ingPaymentsRequest\022#\n\rsubaccount_id\030\001 \001("
    "\tR\014subaccountId\022\033\n\tmarket_id\030\002 \001(\tR\010mark"
    "etId\022\022\n\004skip\030\003 \001(\004R\004skip\022\024\n\005limit\030\004 \001(\021R"
    "\005limit\022\031\n\010end_time\030\005 \001(\022R\007endTime\022\035\n\nmar"
    "ket_ids\030\006 \003(\tR\tmarketIds\"\253\001\n\027FundingPaym"
    "entsResponse\022M\n\010payments\030\001 \003(\01321.injecti"
    "ve_derivative_exchange_rpc.FundingPaymen"
    "tR\010payments\022A\n\006paging\030\002 \001(\0132).injective_"
    "derivative_exchange_rpc.PagingR\006paging\"\210"
    "\001\n\016FundingPayment\022\033\n\tmarket_id\030\001 \001(\tR\010ma"
    "rketId\022#\n\rsubaccount_id\030\002 \001(\tR\014subaccoun"
    "tId\022\026\n\006amount\030\003 \001(\tR\006amount\022\034\n\ttimestamp"
    "\030\004 \001(\022R\ttimestamp\"w\n\023FundingRatesRequest"
    "\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022\022\n\004skip\030\002 "
    "\001(\004R\004skip\022\024\n\005limit\030\003 \001(\021R\005limit\022\031\n\010end_t"
    "ime\030\004 \001(\022R\007endTime\"\256\001\n\024FundingRatesRespo"
    "nse\022S\n\rfunding_rates\030\001 \003(\0132..injective_d"
    "erivative_exchange_rpc.FundingRateR\014fund"
    "ingRates\022A\n\006paging\030\002 \001(\0132).injective_der"
    "ivative_exchange_rpc.PagingR\006paging\"\\\n\013F"
    "undingRate\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022"
    "\022\n\004rate\030\002 \001(\tR\004rate\022\034\n\ttimestamp\030\003 \001(\022R\t"
    "timestamp\"\240\001\n\026StreamPositionsRequest\022#\n\r"
    "subaccount_id\030\001 \001(\tR\014subaccountId\022\033\n\tmar"
    "ket_id\030\002 \001(\tR\010marketId\022\035\n\nmarket_ids\030\003 \003"
    "(\tR\tmarketIds\022%\n\016subaccount_ids\030\004 \003(\tR\rs"
    "ubaccountIds\"\212\001\n\027StreamPositionsResponse"
    "\022Q\n\010position\030\001 \001(\01325.injective_derivativ"
    "e_exchange_rpc.DerivativePositionR\010posit"
    "ion\022\034\n\ttimestamp\030\002 \001(\022R\ttimestamp\"\242\003\n\023St"
    "reamOrdersRequest\022\033\n\tmarket_id\030\001 \001(\tR\010ma"
    "rketId\022\035\n\norder_side\030\002 \001(\tR\torderSide\022#\n"
    "\rsubaccount_id\030\003 \001(\tR\014subaccountId\022\022\n\004sk"
    "ip\030\004 \001(\004R\004skip\022\024\n\005limit\030\005 \001(\021R\005limit\022\035\n\n"
    "start_time\030\006 \001(\022R\tstartTime\022\031\n\010end_time\030"
    "\007 \001(\022R\007endTime\022\035\n\nmarket_ids\030\010 \003(\tR\tmark"
    "etIds\022%\n\016is_conditional\030\t \001(\tR\risConditi"
    "onal\022\035\n\norder_type\030\n \001(\tR\torderType\022)\n\020i"
    "nclude_inactive\030\013 \001(\010R\017includeInactive\0226"
    "\n\027subaccount_total_orders\030\014 \001(\010R\025subacco"
    "untTotalOrders\"\252\001\n\024StreamOrdersResponse\022"
    "M\n\005order\030\001 \001(\01327.injective_derivative_ex"
    "change_rpc.DerivativeLimitOrderR\005order\022%"
    "\n\016operation_type\030\002 \001(\tR\roperationType\022\034\n"
    "\ttimestamp\030\003 \001(\022R\ttimestamp\"\351\002\n\rTradesRe"
    "quest\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022%\n\016ex"
    "ecution_side\030\002 \001(\tR\rexecutionSide\022\034\n\tdir"
    "ection\030\003 \001(\tR\tdirection\022#\n\rsubaccount_id"
    "\030\004 \001(\tR\014subaccountId\022\022\n\004skip\030\005 \001(\004R\004skip"
    "\022\024\n\005limit\030\006 \001(\021R\005limit\022\035\n\nstart_time\030\007 \001"
    "(\022R\tstartTime\022\031\n\010end_time\030\010 \001(\022R\007endTime"
    "\022\035\n\nmarket_ids\030\t \003(\tR\tmarketIds\022%\n\016subac"
    "count_ids\030\n \003(\tR\rsubaccountIds\022\'\n\017execut"
    "ion_types\030\013 \003(\tR\016executionTypes\"\237\001\n\016Trad"
    "esResponse\022J\n\006trades\030\001 \003(\01322.injective_d"
    "erivative_exchange_rpc.DerivativeTradeR\006"
    "trades\022A\n\006paging\030\002 \001(\0132).injective_deriv"
    "ative_exchange_rpc.PagingR\006paging\"\326\003\n\017De"
    "rivativeTrade\022\035\n\norder_hash\030\001 \001(\tR\torder"
    "Hash\022#\n\rsubaccount_id\030\002 \001(\tR\014subaccountI"
    "d\022\033\n\tmarket_id\030\003 \001(\tR\010marketId\0220\n\024trade_"
    "execution_type\030\004 \001(\tR\022tradeExecutionType"
    "\022%\n\016is_liquidation\030\005 \001(\010R\risLiquidation\022"
    "W\n\016position_delta\030\006 \001(\01320.injective_deri"
    "vative_exchange_rpc.PositionDeltaR\rposit"
    "ionDelta\022\026\n\006payout\030\007 \001(\tR\006payout\022\020\n\003fee\030"
    "\010 \001(\tR\003fee\022\037\n\013executed_at\030\t \001(\022R\nexecute"
    "dAt\022#\n\rfee_recipient\030\n \001(\tR\014feeRecipient"
    "\022\031\n\010trade_id\030\013 \001(\tR\007tradeId\022%\n\016execution"
    "_side\030\014 \001(\tR\rexecutionSide\"\273\001\n\rPositionD"
    "elta\022\'\n\017trade_direction\030\001 \001(\tR\016tradeDire"
    "ction\022\'\n\017execution_price\030\002 \001(\tR\016executio"
    "nPrice\022-\n\022execution_quantity\030\003 \001(\tR\021exec"
    "utionQuantity\022)\n\020execution_margin\030\004 \001(\tR"
    "\017executionMargin\"\357\002\n\023StreamTradesRequest"
    "\022\033\n\tmarket_id\030\001 \001(\tR\010marketId\022%\n\016executi"
    "on_side\030\002 \001(\tR\rexecutionSide\022\034\n\tdirectio"
    "n\030\003 \001(\tR\tdirection\022#\n\rsubaccount_id\030\004 \001("
    "\tR\014subaccountId\022\022\n\004skip\030\005 \001(\004R\004skip\022\024\n\005l"
    "imit\030\006 \001(\021R\005limit\022\035\n\nstart_time\030\007 \001(\022R\ts"
    "tartTime\022\031\n\010end_time\030\010 \001(\022R\007endTime\022\035\n\nm"
    "arket_ids\030\t \003(\tR\tmarketIds\022%\n\016subaccount"
    "_ids\030\n \003(\tR\rsubaccountIds\022\'\n\017execution_t"
    "ypes\030\013 \003(\tR\016executionTypes\"\245\001\n\024StreamTra"
    "desResponse\022H\n\005trade\030\001 \001(\01322.injective_d"
    "erivative_exchange_rpc.DerivativeTradeR\005"
    "trade\022%\n\016operation_type\030\002 \001(\tR\roperation"
    "Type\022\034\n\ttimestamp\030\003 \001(\022R\ttimestamp\"\211\001\n\033S"
    "ubaccountOrdersListRequest\022#\n\rsubaccount"
    "_id\030\001 \001(\tR\014subaccountId\022\033\n\tmarket_id\030\002 \001"
    "(\tR\010marketId\022\022\n\004skip\030\003 \001(\004R\004skip\022\024\n\005limi"
    "t\030\004 \001(\021R\005limit\"\262\001\n\034SubaccountOrdersListR"
    "esponse\022O\n\006orders\030\001 \003(\01327.injective_deri"
    "vative_exchange_rpc.DerivativeLimitOrder"
    "R\006orders\022A\n\006paging\030\002 \001(\0132).injective_der"
    "ivative_exchange_rpc.PagingR\006paging\"\316\001\n\033"
    "SubaccountTradesListRequest\022#\n\rsubaccoun"
    "t_id\030\001 \001(\tR\014subaccountId\022\033\n\tmarket_id\030\002 "
    "\001(\tR\010marketId\022%\n\016execution_type\030\003 \001(\tR\re"
    "xecutionType\022\034\n\tdirection\030\004 \001(\tR\tdirecti"
    "on\022\022\n\004skip\030\005 \001(\004R\004skip\022\024\n\005limit\030\006 \001(\021R\005l"
    "imit\"j\n\034SubaccountTradesListResponse\022J\n\006"
    "trades\030\001 \003(\01322.injective_derivative_exch"
    "ange_rpc.DerivativeTradeR\006trades\"\200\003\n\024Ord"
    "ersHistoryRequest\022#\n\rsubaccount_id\030\001 \001(\t"
    "R\014subaccountId\022\033\n\tmarket_id\030\002 \001(\tR\010marke"
    "tId\022\022\n\004skip\030\003 \001(\004R\004skip\022\024\n\005limit\030\004 \001(\021R\005"
    "limit\022\037\n\013order_types\030\005 \003(\tR\norderTypes\022\034"
    "\n\tdirection\030\006 \001(\tR\tdirection\022\035\n\nstart_ti"
    "me\030\007 \001(\022R\tstartTime\022\031\n\010end_time\030\010 \001(\022R\007e"
    "ndTime\022%\n\016is_conditional\030\t \001(\tR\risCondit"
    "ional\022\035\n\norder_type\030\n \001(\tR\torderType\022\024\n\005"
    "state\030\013 \001(\tR\005state\022\'\n\017execution_types\030\014 "
    "\003(\tR\016executionTypes\"\255\001\n\025OrdersHistoryRes"
    "ponse\022Q\n\006orders\030\001 \003(\01329.injective_deriva"
    "tive_exchange_rpc.DerivativeOrderHistory"
    "R\006orders\022A\n\006paging\030\002 \001(\0132).injective_der"
    "ivative_exchange_rpc.PagingR\006paging\"\376\004\n\026"
    "DerivativeOrderHistory\022\035\n\norder_hash\030\001 \001"
    "(\tR\torderHash\022\033\n\tmarket_id\030\002 \001(\tR\010market"
    "Id\022\033\n\tis_active\030\003 \001(\010R\010isActive\022#\n\rsubac"
    "count_id\030\004 \001(\tR\014subaccountId\022%\n\016executio"
    "n_type\030\005 \001(\tR\rexecutionType\022\035\n\norder_typ"
    "e\030\006 \001(\tR\torderType\022\024\n\005price\030\007 \001(\tR\005price"
    "\022#\n\rtrigger_price\030\010 \001(\tR\014triggerPrice\022\032\n"
    "\010quantity\030\t \001(\tR\010quantity\022\'\n\017filled_quan"
    "tity\030\n \001(\tR\016filledQuantity\022\024\n\005state\030\013 \001("
    "\tR\005state\022\035\n\ncreated_at\030\014 \001(\022R\tcreatedAt\022"
    "\035\n\nupdated_at\030\r \001(\022R\tupdatedAt\022$\n\016is_red"
    "uce_only\030\016 \001(\010R\014isReduceOnly\022\034\n\tdirectio"
    "n\030\017 \001(\tR\tdirection\022%\n\016is_conditional\030\020 \001"
    "(\010R\risConditional\022\035\n\ntrigger_at\030\021 \001(\004R\tt"
    "riggerAt\022*\n\021placed_order_hash\030\022 \001(\tR\017pla"
    "cedOrderHash\022\026\n\006margin\030\023 \001(\tR\006margin\"\334\001\n"
    "\032StreamOrdersHistoryRequest\022#\n\rsubaccoun"
    "t_id\030\001 \001(\tR\014subaccountId\022\033\n\tmarket_id\030\002 "
    "\001(\tR\010marketId\022\037\n\013order_types\030\003 \003(\tR\norde"
    "rTypes\022\034\n\tdirection\030\004 \001(\tR\tdirection\022\024\n\005"
    "state\030\005 \001(\tR\005state\022\'\n\017execution_types\030\006 "
    "\003(\tR\016executionTypes\"\263\001\n\033StreamOrdersHist"
    "oryResponse\022O\n\005order\030\001 \001(\01329.injective_d"
    "erivative_exchange_rpc.DerivativeOrderHi"
    "storyR\005order\022%\n\016operation_type\030\002 \001(\tR\rop"
    "erationType\022\034\n\ttimestamp\030\003 \001(\022R\ttimestam"
    "p2\307\032\n\036InjectiveDerivativeExchangeRPC\022p\n\007"
    "Markets\0221.injective_derivative_exchange_"
    "rpc.MarketsRequest\0322.injective_derivativ"
    "e_exchange_rpc.MarketsResponse\022m\n\006Market"
    "\0220.injective_derivative_exchange_rpc.Mar"
    "ketRequest\0321.injective_derivative_exchan"
    "ge_rpc.MarketResponse\022\201\001\n\014StreamMarket\0226"
    ".injective_derivative_exchange_rpc.Strea"
    "mMarketRequest\0327.injective_derivative_ex"
    "change_rpc.StreamMarketResponse0\001\022\227\001\n\024Bi"
    "naryOptionsMarkets\022>.injective_derivativ"
    "e_exchange_rpc.BinaryOptionsMarketsReque"
    "st\032\?.injective_derivative_exchange_rpc.B"
    "inaryOptionsMarketsResponse\022\224\001\n\023BinaryOp"
    "tionsMarket\022=.injective_derivative_excha"
    "nge_rpc.BinaryOptionsMarketRequest\032>.inj"
    "ective_derivative_exchange_rpc.BinaryOpt"
    "ionsMarketResponse\022v\n\tOrderbook\0223.inject"
    "ive_derivative_exchange_rpc.OrderbookReq"
    "uest\0324.injective_derivative_exchange_rpc"
    ".OrderbookResponse\022|\n\013OrderbookV2\0225.inje"
    "ctive_derivative_exchange_rpc.OrderbookV"
    "2Request\0326.injective_derivative_exchange"
    "_rpc.OrderbookV2Response\022y\n\nOrderbooks\0224"
    ".injective_derivative_exchange_rpc.Order"
    "booksRequest\0325.injective_derivative_exch"
    "ange_rpc.OrderbooksResponse\022\177\n\014Orderbook"
    "sV2\0226.injective_derivative_exchange_rpc."
    "OrderbooksV2Request\0327.injective_derivati"
    "ve_exchange_rpc.OrderbooksV2Response\022\212\001\n"
    "\017StreamOrderbook\0229.injective_derivative_"
    "exchange_rpc.StreamOrderbookRequest\032:.in"
    "jective_derivative_exchange_rpc.StreamOr"
    "derbookResponse0\001\022\220\001\n\021StreamOrderbookV2\022"
    ";.injective_derivative_exchange_rpc.Stre"
    "amOrderbookV2Request\032<.injective_derivat"
    "ive_exchange_rpc.StreamOrderbookV2Respon"
    "se0\001\022\234\001\n\025StreamOrderbookUpdate\022\?.injecti"
    "ve_derivative_exchange_rpc.StreamOrderbo"
    "okUpdateRequest\032@.injective_derivative_e"
    "xchange_rpc.StreamOrderbookUpdateRespons"
    "e0\001\022m\n\006Orders\0220.injective_derivative_exc"
    "hange_rpc.OrdersRequest\0321.injective_deri"
    "vative_exchange_rpc.OrdersResponse\022v\n\tPo"
    "sitions\0223.injective_derivative_exchange_"
    "rpc.PositionsRequest\0324.injective_derivat"
    "ive_exchange_rpc.PositionsResponse\022\224\001\n\023L"
    "iquidablePositions\022=.injective_derivativ"
    "e_exchange_rpc.LiquidablePositionsReques"
    "t\032>.injective_derivative_exchange_rpc.Li"
    "quidablePositionsResponse\022\210\001\n\017FundingPay"
    "ments\0229.injective_derivative_exchange_rp"
    "c.FundingPaymentsRequest\032:.injective_der"
    "ivative_exchange_rpc.FundingPaymentsResp"
    "onse\022\177\n\014FundingRates\0226.injective_derivat"
    "ive_exchange_rpc.FundingRatesRequest\0327.i"
    "njective_derivative_exchange_rpc.Funding"
    "RatesResponse\022\212\001\n\017StreamPositions\0229.inje"
    "ctive_derivative_exchange_rpc.StreamPosi"
    "tionsRequest\032:.injective_derivative_exch"
    "ange_rpc.StreamPositionsResponse0\001\022\201\001\n\014S"
    "treamOrders\0226.injective_derivative_excha"
    "nge_rpc.StreamOrdersRequest\0327.injective_"
    "derivative_exchange_rpc.StreamOrdersResp"
    "onse0\001\022m\n\006Trades\0220.injective_derivative_"
    "exchange_rpc.TradesRequest\0321.injective_d"
    "erivative_exchange_rpc.TradesResponse\022\201\001"
    "\n\014StreamTrades\0226.injective_derivative_ex"
    "change_rpc.StreamTradesRequest\0327.injecti"
    "ve_derivative_exchange_rpc.StreamTradesR"
    "esponse0\001\022\227\001\n\024SubaccountOrdersList\022>.inj"
    "ective_derivative_exchange_rpc.Subaccoun"
    "tOrdersListRequest\032\?.injective_derivativ"
    "e_exchange_rpc.SubaccountOrdersListRespo"
    "nse\022\227\001\n\024SubaccountTradesList\022>.injective"
    "_derivative_exchange_rpc.SubaccountTrade"
    "sListRequest\032\?.injective_derivative_exch"
    "ange_rpc.SubaccountTradesListResponse\022\202\001"
    "\n\rOrdersHistory\0227.injective_derivative_e"
    "xchange_rpc.OrdersHistoryRequest\0328.injec"
    "tive_derivative_exchange_rpc.OrdersHisto"
    "ryResponse\022\226\001\n\023StreamOrdersHistory\022=.inj"
    "ective_derivative_exchange_rpc.StreamOrd"
    "ersHistoryRequest\032>.injective_derivative"
    "_exchange_rpc.StreamOrdersHistoryRespons"
    "e0\001B\212\002\n%com.injective_derivative_exchang"
    "e_rpcB#InjectiveDerivativeExchangeRpcPro"
    "toP\001Z$/injective_derivative_exchange_rpc"
    "pb\242\002\003IXX\252\002\036InjectiveDerivativeExchangeRp"
    "c\312\002\036InjectiveDerivativeExchangeRpc\342\002*Inj"
    "ectiveDerivativeExchangeRpc\\GPBMetadata\352"
    "\002\036InjectiveDerivativeExchangeRpcb\006proto3"
};
static ::absl::once_flag descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto = {
    false,
    false,
    18360,
    descriptor_table_protodef_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto,
    "exchange/injective_derivative_exchange_rpc.proto",
    &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
    nullptr,
    0,
    71,
    schemas,
    file_default_instances,
    TableStruct_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto::offsets,
    file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto,
    file_level_enum_descriptors_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto,
    file_level_service_descriptors_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter() {
  return &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto(&descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto);
namespace injective_derivative_exchange_rpc {
// ===================================================================

class MarketsRequest::_Internal {
 public:
};

MarketsRequest::MarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.MarketsRequest)
}
MarketsRequest::MarketsRequest(const MarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_status_) {}

    , decltype(_impl_.quote_denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_status().empty()) {
    _this->_impl_.market_status_.Set(from._internal_market_status(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.MarketsRequest)
}

inline void MarketsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_status_) {}

    , decltype(_impl_.quote_denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketsRequest::~MarketsRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.MarketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_status_.Destroy();
  _impl_.quote_denom_.Destroy();
}

void MarketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.MarketsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_status_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_status = 1 [json_name = "marketStatus"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.MarketsRequest.market_status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 2 [json_name = "quoteDenom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.MarketsRequest.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.MarketsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_status = 1 [json_name = "marketStatus"];
  if (!this->_internal_market_status().empty()) {
    const std::string& _s = this->_internal_market_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.MarketsRequest.market_status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quote_denom = 2 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.MarketsRequest.quote_denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.MarketsRequest)
  return target;
}

::size_t MarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.MarketsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_status = 1 [json_name = "marketStatus"];
  if (!this->_internal_market_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_status());
  }

  // string quote_denom = 2 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketsRequest::GetClassData() const { return &_class_data_; }


void MarketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketsRequest*>(&to_msg);
  auto& from = static_cast<const MarketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.MarketsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_status().empty()) {
    _this->_internal_set_market_status(from._internal_market_status());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketsRequest::CopyFrom(const MarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.MarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsRequest::IsInitialized() const {
  return true;
}

void MarketsRequest::InternalSwap(MarketsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_status_, lhs_arena,
                                       &other->_impl_.market_status_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[0]);
}
// ===================================================================

class MarketsResponse::_Internal {
 public:
};

MarketsResponse::MarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.MarketsResponse)
}
MarketsResponse::MarketsResponse(const MarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){from._impl_.markets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.MarketsResponse)
}

inline void MarketsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.markets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketsResponse::~MarketsResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.MarketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_markets()->~RepeatedPtrField();
}

void MarketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.MarketsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_markets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.DerivativeMarketInfo markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.MarketsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeMarketInfo markets = 1 [json_name = "markets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_markets_size()); i < n; i++) {
    const auto& repfield = this->_internal_markets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.MarketsResponse)
  return target;
}

::size_t MarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.MarketsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeMarketInfo markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->_internal_markets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketsResponse::GetClassData() const { return &_class_data_; }


void MarketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketsResponse*>(&to_msg);
  auto& from = static_cast<const MarketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.MarketsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_markets()->MergeFrom(from._internal_markets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketsResponse::CopyFrom(const MarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.MarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketsResponse::IsInitialized() const {
  return true;
}

void MarketsResponse::InternalSwap(MarketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_markets()->InternalSwap(other->_internal_mutable_markets());
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[1]);
}
// ===================================================================

class DerivativeMarketInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DerivativeMarketInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DerivativeMarketInfo, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::TokenMeta& quote_token_meta(const DerivativeMarketInfo* msg);
  static void set_has_quote_token_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::injective_derivative_exchange_rpc::PerpetualMarketInfo& perpetual_market_info(const DerivativeMarketInfo* msg);
  static void set_has_perpetual_market_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::injective_derivative_exchange_rpc::PerpetualMarketFunding& perpetual_market_funding(const DerivativeMarketInfo* msg);
  static void set_has_perpetual_market_funding(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo& expiry_futures_market_info(const DerivativeMarketInfo* msg);
  static void set_has_expiry_futures_market_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::injective_derivative_exchange_rpc::TokenMeta&
DerivativeMarketInfo::_Internal::quote_token_meta(const DerivativeMarketInfo* msg) {
  return *msg->_impl_.quote_token_meta_;
}
const ::injective_derivative_exchange_rpc::PerpetualMarketInfo&
DerivativeMarketInfo::_Internal::perpetual_market_info(const DerivativeMarketInfo* msg) {
  return *msg->_impl_.perpetual_market_info_;
}
const ::injective_derivative_exchange_rpc::PerpetualMarketFunding&
DerivativeMarketInfo::_Internal::perpetual_market_funding(const DerivativeMarketInfo* msg) {
  return *msg->_impl_.perpetual_market_funding_;
}
const ::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo&
DerivativeMarketInfo::_Internal::expiry_futures_market_info(const DerivativeMarketInfo* msg) {
  return *msg->_impl_.expiry_futures_market_info_;
}
DerivativeMarketInfo::DerivativeMarketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.DerivativeMarketInfo)
}
DerivativeMarketInfo::DerivativeMarketInfo(const DerivativeMarketInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativeMarketInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.market_status_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.service_provider_fee_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.quote_token_meta_){nullptr}
    , decltype(_impl_.perpetual_market_info_){nullptr}
    , decltype(_impl_.perpetual_market_funding_){nullptr}
    , decltype(_impl_.expiry_futures_market_info_){nullptr}
    , decltype(_impl_.oracle_scale_factor_) {}

    , decltype(_impl_.is_perpetual_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_status().empty()) {
    _this->_impl_.market_status_.Set(from._internal_market_status(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_base().empty()) {
    _this->_impl_.oracle_base_.Set(from._internal_oracle_base(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_quote().empty()) {
    _this->_impl_.oracle_quote_.Set(from._internal_oracle_quote(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_type().empty()) {
    _this->_impl_.oracle_type_.Set(from._internal_oracle_type(), _this->GetArenaForAllocation());
  }
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_impl_.initial_margin_ratio_.Set(from._internal_initial_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_impl_.maintenance_margin_ratio_.Set(from._internal_maintenance_margin_ratio(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.service_provider_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_provider_fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_provider_fee().empty()) {
    _this->_impl_.service_provider_fee_.Set(from._internal_service_provider_fee(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.quote_token_meta_ = new ::injective_derivative_exchange_rpc::TokenMeta(*from._impl_.quote_token_meta_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.perpetual_market_info_ = new ::injective_derivative_exchange_rpc::PerpetualMarketInfo(*from._impl_.perpetual_market_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.perpetual_market_funding_ = new ::injective_derivative_exchange_rpc::PerpetualMarketFunding(*from._impl_.perpetual_market_funding_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.expiry_futures_market_info_ = new ::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo(*from._impl_.expiry_futures_market_info_);
  }
  ::memcpy(&_impl_.oracle_scale_factor_, &from._impl_.oracle_scale_factor_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_perpetual_) -
    reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.is_perpetual_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.DerivativeMarketInfo)
}

inline void DerivativeMarketInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.market_status_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.oracle_base_) {}

    , decltype(_impl_.oracle_quote_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.initial_margin_ratio_) {}

    , decltype(_impl_.maintenance_margin_ratio_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.service_provider_fee_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.quote_token_meta_){nullptr}
    , decltype(_impl_.perpetual_market_info_){nullptr}
    , decltype(_impl_.perpetual_market_funding_){nullptr}
    , decltype(_impl_.expiry_futures_market_info_){nullptr}
    , decltype(_impl_.oracle_scale_factor_) { 0u }

    , decltype(_impl_.is_perpetual_) { false }

  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_base_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_base_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_quote_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_quote_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initial_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maintenance_margin_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maintenance_margin_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_provider_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_provider_fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DerivativeMarketInfo::~DerivativeMarketInfo() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.DerivativeMarketInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativeMarketInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.market_status_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.oracle_base_.Destroy();
  _impl_.oracle_quote_.Destroy();
  _impl_.oracle_type_.Destroy();
  _impl_.initial_margin_ratio_.Destroy();
  _impl_.maintenance_margin_ratio_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.service_provider_fee_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quote_token_meta_;
  if (this != internal_default_instance()) delete _impl_.perpetual_market_info_;
  if (this != internal_default_instance()) delete _impl_.perpetual_market_funding_;
  if (this != internal_default_instance()) delete _impl_.expiry_futures_market_info_;
}

void DerivativeMarketInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativeMarketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.DerivativeMarketInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.market_status_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.oracle_base_.ClearToEmpty();
  _impl_.oracle_quote_.ClearToEmpty();
  _impl_.oracle_type_.ClearToEmpty();
  _impl_.initial_margin_ratio_.ClearToEmpty();
  _impl_.maintenance_margin_ratio_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.service_provider_fee_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.quote_token_meta_ != nullptr);
      _impl_.quote_token_meta_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.perpetual_market_info_ != nullptr);
      _impl_.perpetual_market_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.perpetual_market_funding_ != nullptr);
      _impl_.perpetual_market_funding_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.expiry_futures_market_info_ != nullptr);
      _impl_.expiry_futures_market_info_->Clear();
    }
  }
  ::memset(&_impl_.oracle_scale_factor_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_perpetual_) -
      reinterpret_cast<char*>(&_impl_.oracle_scale_factor_)) + sizeof(_impl_.is_perpetual_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativeMarketInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_status = 2 [json_name = "marketStatus"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.market_status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 3 [json_name = "ticker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_base = 4 [json_name = "oracleBase"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oracle_base();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.oracle_base"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_quote = 5 [json_name = "oracleQuote"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oracle_quote();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.oracle_quote"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_type = 6 [json_name = "oracleType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_oracle_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.oracle_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string initial_margin_ratio = 8 [json_name = "initialMarginRatio"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_initial_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.initial_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maintenance_margin_ratio = 9 [json_name = "maintenanceMarginRatio"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_maintenance_margin_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.maintenance_margin_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 10 [json_name = "quoteDenom"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.TokenMeta quote_token_meta = 11 [json_name = "quoteTokenMeta"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_quote_token_meta(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 12 [json_name = "makerFeeRate"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 13 [json_name = "takerFeeRate"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string service_provider_fee = 14 [json_name = "serviceProviderFee"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_service_provider_fee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.service_provider_fee"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_perpetual = 15 [json_name = "isPerpetual"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _impl_.is_perpetual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 16 [json_name = "minPriceTickSize"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 17 [json_name = "minQuantityTickSize"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeMarketInfo.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.PerpetualMarketInfo perpetual_market_info = 18 [json_name = "perpetualMarketInfo"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_perpetual_market_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.PerpetualMarketFunding perpetual_market_funding = 19 [json_name = "perpetualMarketFunding"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_perpetual_market_funding(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo expiry_futures_market_info = 20 [json_name = "expiryFuturesMarketInfo"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry_futures_market_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativeMarketInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.DerivativeMarketInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_status = 2 [json_name = "marketStatus"];
  if (!this->_internal_market_status().empty()) {
    const std::string& _s = this->_internal_market_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.market_status");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string oracle_base = 4 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    const std::string& _s = this->_internal_oracle_base();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.oracle_base");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string oracle_quote = 5 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    const std::string& _s = this->_internal_oracle_quote();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.oracle_quote");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string oracle_type = 6 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    const std::string& _s = this->_internal_oracle_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.oracle_type");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_oracle_scale_factor(), target);
  }

  // string initial_margin_ratio = 8 [json_name = "initialMarginRatio"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    const std::string& _s = this->_internal_initial_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.initial_margin_ratio");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string maintenance_margin_ratio = 9 [json_name = "maintenanceMarginRatio"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    const std::string& _s = this->_internal_maintenance_margin_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.maintenance_margin_ratio");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string quote_denom = 10 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.quote_denom");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.TokenMeta quote_token_meta = 11 [json_name = "quoteTokenMeta"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::quote_token_meta(this),
        _Internal::quote_token_meta(this).GetCachedSize(), target, stream);
  }

  // string maker_fee_rate = 12 [json_name = "makerFeeRate"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string taker_fee_rate = 13 [json_name = "takerFeeRate"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string service_provider_fee = 14 [json_name = "serviceProviderFee"];
  if (!this->_internal_service_provider_fee().empty()) {
    const std::string& _s = this->_internal_service_provider_fee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.service_provider_fee");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // bool is_perpetual = 15 [json_name = "isPerpetual"];
  if (this->_internal_is_perpetual() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_is_perpetual(), target);
  }

  // string min_price_tick_size = 16 [json_name = "minPriceTickSize"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // string min_quantity_tick_size = 17 [json_name = "minQuantityTickSize"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeMarketInfo.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // .injective_derivative_exchange_rpc.PerpetualMarketInfo perpetual_market_info = 18 [json_name = "perpetualMarketInfo"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::perpetual_market_info(this),
        _Internal::perpetual_market_info(this).GetCachedSize(), target, stream);
  }

  // .injective_derivative_exchange_rpc.PerpetualMarketFunding perpetual_market_funding = 19 [json_name = "perpetualMarketFunding"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::perpetual_market_funding(this),
        _Internal::perpetual_market_funding(this).GetCachedSize(), target, stream);
  }

  // .injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo expiry_futures_market_info = 20 [json_name = "expiryFuturesMarketInfo"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::expiry_futures_market_info(this),
        _Internal::expiry_futures_market_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.DerivativeMarketInfo)
  return target;
}

::size_t DerivativeMarketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.DerivativeMarketInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string market_status = 2 [json_name = "marketStatus"];
  if (!this->_internal_market_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_status());
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string oracle_base = 4 [json_name = "oracleBase"];
  if (!this->_internal_oracle_base().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_base());
  }

  // string oracle_quote = 5 [json_name = "oracleQuote"];
  if (!this->_internal_oracle_quote().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_quote());
  }

  // string oracle_type = 6 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_type());
  }

  // string initial_margin_ratio = 8 [json_name = "initialMarginRatio"];
  if (!this->_internal_initial_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initial_margin_ratio());
  }

  // string maintenance_margin_ratio = 9 [json_name = "maintenanceMarginRatio"];
  if (!this->_internal_maintenance_margin_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maintenance_margin_ratio());
  }

  // string quote_denom = 10 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string maker_fee_rate = 12 [json_name = "makerFeeRate"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 13 [json_name = "takerFeeRate"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string service_provider_fee = 14 [json_name = "serviceProviderFee"];
  if (!this->_internal_service_provider_fee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_service_provider_fee());
  }

  // string min_price_tick_size = 16 [json_name = "minPriceTickSize"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 17 [json_name = "minQuantityTickSize"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .injective_derivative_exchange_rpc.TokenMeta quote_token_meta = 11 [json_name = "quoteTokenMeta"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.quote_token_meta_);
    }

    // .injective_derivative_exchange_rpc.PerpetualMarketInfo perpetual_market_info = 18 [json_name = "perpetualMarketInfo"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.perpetual_market_info_);
    }

    // .injective_derivative_exchange_rpc.PerpetualMarketFunding perpetual_market_funding = 19 [json_name = "perpetualMarketFunding"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.perpetual_market_funding_);
    }

    // .injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo expiry_futures_market_info = 20 [json_name = "expiryFuturesMarketInfo"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.expiry_futures_market_info_);
    }

  }
  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  // bool is_perpetual = 15 [json_name = "isPerpetual"];
  if (this->_internal_is_perpetual() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativeMarketInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativeMarketInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativeMarketInfo::GetClassData() const { return &_class_data_; }


void DerivativeMarketInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativeMarketInfo*>(&to_msg);
  auto& from = static_cast<const DerivativeMarketInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.DerivativeMarketInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_market_status().empty()) {
    _this->_internal_set_market_status(from._internal_market_status());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_oracle_base().empty()) {
    _this->_internal_set_oracle_base(from._internal_oracle_base());
  }
  if (!from._internal_oracle_quote().empty()) {
    _this->_internal_set_oracle_quote(from._internal_oracle_quote());
  }
  if (!from._internal_oracle_type().empty()) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if (!from._internal_initial_margin_ratio().empty()) {
    _this->_internal_set_initial_margin_ratio(from._internal_initial_margin_ratio());
  }
  if (!from._internal_maintenance_margin_ratio().empty()) {
    _this->_internal_set_maintenance_margin_ratio(from._internal_maintenance_margin_ratio());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_service_provider_fee().empty()) {
    _this->_internal_set_service_provider_fee(from._internal_service_provider_fee());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_quote_token_meta()->::injective_derivative_exchange_rpc::TokenMeta::MergeFrom(
          from._internal_quote_token_meta());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_perpetual_market_info()->::injective_derivative_exchange_rpc::PerpetualMarketInfo::MergeFrom(
          from._internal_perpetual_market_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_perpetual_market_funding()->::injective_derivative_exchange_rpc::PerpetualMarketFunding::MergeFrom(
          from._internal_perpetual_market_funding());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_expiry_futures_market_info()->::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo::MergeFrom(
          from._internal_expiry_futures_market_info());
    }
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  if (from._internal_is_perpetual() != 0) {
    _this->_internal_set_is_perpetual(from._internal_is_perpetual());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativeMarketInfo::CopyFrom(const DerivativeMarketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.DerivativeMarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativeMarketInfo::IsInitialized() const {
  return true;
}

void DerivativeMarketInfo::InternalSwap(DerivativeMarketInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_status_, lhs_arena,
                                       &other->_impl_.market_status_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_base_, lhs_arena,
                                       &other->_impl_.oracle_base_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_quote_, lhs_arena,
                                       &other->_impl_.oracle_quote_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_type_, lhs_arena,
                                       &other->_impl_.oracle_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initial_margin_ratio_, lhs_arena,
                                       &other->_impl_.initial_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maintenance_margin_ratio_, lhs_arena,
                                       &other->_impl_.maintenance_margin_ratio_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_provider_fee_, lhs_arena,
                                       &other->_impl_.service_provider_fee_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DerivativeMarketInfo, _impl_.is_perpetual_)
      + sizeof(DerivativeMarketInfo::_impl_.is_perpetual_)
      - PROTOBUF_FIELD_OFFSET(DerivativeMarketInfo, _impl_.quote_token_meta_)>(
          reinterpret_cast<char*>(&_impl_.quote_token_meta_),
          reinterpret_cast<char*>(&other->_impl_.quote_token_meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativeMarketInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[2]);
}
// ===================================================================

class TokenMeta::_Internal {
 public:
};

TokenMeta::TokenMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.TokenMeta)
}
TokenMeta::TokenMeta(const TokenMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.logo_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.decimals_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo().empty()) {
    _this->_impl_.logo_.Set(from._internal_logo(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.updated_at_, &from._impl_.updated_at_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.decimals_) -
    reinterpret_cast<char*>(&_impl_.updated_at_)) + sizeof(_impl_.decimals_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.TokenMeta)
}

inline void TokenMeta::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.symbol_) {}

    , decltype(_impl_.logo_) {}

    , decltype(_impl_.updated_at_) { ::int64_t{0} }

    , decltype(_impl_.decimals_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TokenMeta::~TokenMeta() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.TokenMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenMeta::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.address_.Destroy();
  _impl_.symbol_.Destroy();
  _impl_.logo_.Destroy();
}

void TokenMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.TokenMeta)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.logo_.ClearToEmpty();
  ::memset(&_impl_.updated_at_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.decimals_) -
      reinterpret_cast<char*>(&_impl_.updated_at_)) + sizeof(_impl_.decimals_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TokenMeta.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TokenMeta.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 3 [json_name = "symbol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TokenMeta.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string logo = 4 [json_name = "logo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_logo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TokenMeta.logo"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 decimals = 5 [json_name = "decimals"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 updated_at = 6 [json_name = "updatedAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TokenMeta::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.TokenMeta)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TokenMeta.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TokenMeta.address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string symbol = 3 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TokenMeta.symbol");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string logo = 4 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    const std::string& _s = this->_internal_logo();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TokenMeta.logo");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // sint32 decimals = 5 [json_name = "decimals"];
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        5, this->_internal_decimals(), target);
  }

  // sint64 updated_at = 6 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.TokenMeta)
  return target;
}

::size_t TokenMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.TokenMeta)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string symbol = 3 [json_name = "symbol"];
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string logo = 4 [json_name = "logo"];
  if (!this->_internal_logo().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_logo());
  }

  // sint64 updated_at = 6 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_updated_at());
  }

  // sint32 decimals = 5 [json_name = "decimals"];
  if (this->_internal_decimals() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_decimals());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenMeta::GetClassData() const { return &_class_data_; }


void TokenMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenMeta*>(&to_msg);
  auto& from = static_cast<const TokenMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.TokenMeta)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_logo().empty()) {
    _this->_internal_set_logo(from._internal_logo());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_decimals() != 0) {
    _this->_internal_set_decimals(from._internal_decimals());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenMeta::CopyFrom(const TokenMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.TokenMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenMeta::IsInitialized() const {
  return true;
}

void TokenMeta::InternalSwap(TokenMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.logo_, lhs_arena,
                                       &other->_impl_.logo_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenMeta, _impl_.decimals_)
      + sizeof(TokenMeta::_impl_.decimals_)
      - PROTOBUF_FIELD_OFFSET(TokenMeta, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[3]);
}
// ===================================================================

class PerpetualMarketInfo::_Internal {
 public:
};

PerpetualMarketInfo::PerpetualMarketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.PerpetualMarketInfo)
}
PerpetualMarketInfo::PerpetualMarketInfo(const PerpetualMarketInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerpetualMarketInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hourly_funding_rate_cap_) {}

    , decltype(_impl_.hourly_interest_rate_) {}

    , decltype(_impl_.next_funding_timestamp_) {}

    , decltype(_impl_.funding_interval_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hourly_funding_rate_cap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hourly_funding_rate_cap_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hourly_funding_rate_cap().empty()) {
    _this->_impl_.hourly_funding_rate_cap_.Set(from._internal_hourly_funding_rate_cap(), _this->GetArenaForAllocation());
  }
  _impl_.hourly_interest_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hourly_interest_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hourly_interest_rate().empty()) {
    _this->_impl_.hourly_interest_rate_.Set(from._internal_hourly_interest_rate(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.next_funding_timestamp_, &from._impl_.next_funding_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.funding_interval_) -
    reinterpret_cast<char*>(&_impl_.next_funding_timestamp_)) + sizeof(_impl_.funding_interval_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.PerpetualMarketInfo)
}

inline void PerpetualMarketInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hourly_funding_rate_cap_) {}

    , decltype(_impl_.hourly_interest_rate_) {}

    , decltype(_impl_.next_funding_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.funding_interval_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hourly_funding_rate_cap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hourly_funding_rate_cap_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hourly_interest_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hourly_interest_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerpetualMarketInfo::~PerpetualMarketInfo() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.PerpetualMarketInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerpetualMarketInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hourly_funding_rate_cap_.Destroy();
  _impl_.hourly_interest_rate_.Destroy();
}

void PerpetualMarketInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerpetualMarketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.PerpetualMarketInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hourly_funding_rate_cap_.ClearToEmpty();
  _impl_.hourly_interest_rate_.ClearToEmpty();
  ::memset(&_impl_.next_funding_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.funding_interval_) -
      reinterpret_cast<char*>(&_impl_.next_funding_timestamp_)) + sizeof(_impl_.funding_interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerpetualMarketInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hourly_funding_rate_cap = 1 [json_name = "hourlyFundingRateCap"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hourly_funding_rate_cap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PerpetualMarketInfo.hourly_funding_rate_cap"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string hourly_interest_rate = 2 [json_name = "hourlyInterestRate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hourly_interest_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PerpetualMarketInfo.hourly_interest_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 next_funding_timestamp = 3 [json_name = "nextFundingTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.next_funding_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 funding_interval = 4 [json_name = "fundingInterval"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.funding_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerpetualMarketInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.PerpetualMarketInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hourly_funding_rate_cap = 1 [json_name = "hourlyFundingRateCap"];
  if (!this->_internal_hourly_funding_rate_cap().empty()) {
    const std::string& _s = this->_internal_hourly_funding_rate_cap();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PerpetualMarketInfo.hourly_funding_rate_cap");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string hourly_interest_rate = 2 [json_name = "hourlyInterestRate"];
  if (!this->_internal_hourly_interest_rate().empty()) {
    const std::string& _s = this->_internal_hourly_interest_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PerpetualMarketInfo.hourly_interest_rate");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 next_funding_timestamp = 3 [json_name = "nextFundingTimestamp"];
  if (this->_internal_next_funding_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_next_funding_timestamp(), target);
  }

  // sint64 funding_interval = 4 [json_name = "fundingInterval"];
  if (this->_internal_funding_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_funding_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.PerpetualMarketInfo)
  return target;
}

::size_t PerpetualMarketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.PerpetualMarketInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hourly_funding_rate_cap = 1 [json_name = "hourlyFundingRateCap"];
  if (!this->_internal_hourly_funding_rate_cap().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hourly_funding_rate_cap());
  }

  // string hourly_interest_rate = 2 [json_name = "hourlyInterestRate"];
  if (!this->_internal_hourly_interest_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hourly_interest_rate());
  }

  // sint64 next_funding_timestamp = 3 [json_name = "nextFundingTimestamp"];
  if (this->_internal_next_funding_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_next_funding_timestamp());
  }

  // sint64 funding_interval = 4 [json_name = "fundingInterval"];
  if (this->_internal_funding_interval() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_funding_interval());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerpetualMarketInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerpetualMarketInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerpetualMarketInfo::GetClassData() const { return &_class_data_; }


void PerpetualMarketInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerpetualMarketInfo*>(&to_msg);
  auto& from = static_cast<const PerpetualMarketInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.PerpetualMarketInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hourly_funding_rate_cap().empty()) {
    _this->_internal_set_hourly_funding_rate_cap(from._internal_hourly_funding_rate_cap());
  }
  if (!from._internal_hourly_interest_rate().empty()) {
    _this->_internal_set_hourly_interest_rate(from._internal_hourly_interest_rate());
  }
  if (from._internal_next_funding_timestamp() != 0) {
    _this->_internal_set_next_funding_timestamp(from._internal_next_funding_timestamp());
  }
  if (from._internal_funding_interval() != 0) {
    _this->_internal_set_funding_interval(from._internal_funding_interval());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerpetualMarketInfo::CopyFrom(const PerpetualMarketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.PerpetualMarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerpetualMarketInfo::IsInitialized() const {
  return true;
}

void PerpetualMarketInfo::InternalSwap(PerpetualMarketInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hourly_funding_rate_cap_, lhs_arena,
                                       &other->_impl_.hourly_funding_rate_cap_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hourly_interest_rate_, lhs_arena,
                                       &other->_impl_.hourly_interest_rate_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerpetualMarketInfo, _impl_.funding_interval_)
      + sizeof(PerpetualMarketInfo::_impl_.funding_interval_)
      - PROTOBUF_FIELD_OFFSET(PerpetualMarketInfo, _impl_.next_funding_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.next_funding_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.next_funding_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerpetualMarketInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[4]);
}
// ===================================================================

class PerpetualMarketFunding::_Internal {
 public:
};

PerpetualMarketFunding::PerpetualMarketFunding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.PerpetualMarketFunding)
}
PerpetualMarketFunding::PerpetualMarketFunding(const PerpetualMarketFunding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerpetualMarketFunding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cumulative_funding_) {}

    , decltype(_impl_.cumulative_price_) {}

    , decltype(_impl_.last_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cumulative_funding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cumulative_funding_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cumulative_funding().empty()) {
    _this->_impl_.cumulative_funding_.Set(from._internal_cumulative_funding(), _this->GetArenaForAllocation());
  }
  _impl_.cumulative_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cumulative_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cumulative_price().empty()) {
    _this->_impl_.cumulative_price_.Set(from._internal_cumulative_price(), _this->GetArenaForAllocation());
  }
  _this->_impl_.last_timestamp_ = from._impl_.last_timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.PerpetualMarketFunding)
}

inline void PerpetualMarketFunding::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.cumulative_funding_) {}

    , decltype(_impl_.cumulative_price_) {}

    , decltype(_impl_.last_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cumulative_funding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cumulative_funding_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cumulative_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cumulative_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerpetualMarketFunding::~PerpetualMarketFunding() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.PerpetualMarketFunding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerpetualMarketFunding::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cumulative_funding_.Destroy();
  _impl_.cumulative_price_.Destroy();
}

void PerpetualMarketFunding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerpetualMarketFunding::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.PerpetualMarketFunding)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cumulative_funding_.ClearToEmpty();
  _impl_.cumulative_price_.ClearToEmpty();
  _impl_.last_timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerpetualMarketFunding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cumulative_funding = 1 [json_name = "cumulativeFunding"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cumulative_funding();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PerpetualMarketFunding.cumulative_funding"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string cumulative_price = 2 [json_name = "cumulativePrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cumulative_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PerpetualMarketFunding.cumulative_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 last_timestamp = 3 [json_name = "lastTimestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.last_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerpetualMarketFunding::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.PerpetualMarketFunding)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cumulative_funding = 1 [json_name = "cumulativeFunding"];
  if (!this->_internal_cumulative_funding().empty()) {
    const std::string& _s = this->_internal_cumulative_funding();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PerpetualMarketFunding.cumulative_funding");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string cumulative_price = 2 [json_name = "cumulativePrice"];
  if (!this->_internal_cumulative_price().empty()) {
    const std::string& _s = this->_internal_cumulative_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PerpetualMarketFunding.cumulative_price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 last_timestamp = 3 [json_name = "lastTimestamp"];
  if (this->_internal_last_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_last_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.PerpetualMarketFunding)
  return target;
}

::size_t PerpetualMarketFunding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.PerpetualMarketFunding)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cumulative_funding = 1 [json_name = "cumulativeFunding"];
  if (!this->_internal_cumulative_funding().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_cumulative_funding());
  }

  // string cumulative_price = 2 [json_name = "cumulativePrice"];
  if (!this->_internal_cumulative_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_cumulative_price());
  }

  // sint64 last_timestamp = 3 [json_name = "lastTimestamp"];
  if (this->_internal_last_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_last_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerpetualMarketFunding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerpetualMarketFunding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerpetualMarketFunding::GetClassData() const { return &_class_data_; }


void PerpetualMarketFunding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerpetualMarketFunding*>(&to_msg);
  auto& from = static_cast<const PerpetualMarketFunding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.PerpetualMarketFunding)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cumulative_funding().empty()) {
    _this->_internal_set_cumulative_funding(from._internal_cumulative_funding());
  }
  if (!from._internal_cumulative_price().empty()) {
    _this->_internal_set_cumulative_price(from._internal_cumulative_price());
  }
  if (from._internal_last_timestamp() != 0) {
    _this->_internal_set_last_timestamp(from._internal_last_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerpetualMarketFunding::CopyFrom(const PerpetualMarketFunding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.PerpetualMarketFunding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerpetualMarketFunding::IsInitialized() const {
  return true;
}

void PerpetualMarketFunding::InternalSwap(PerpetualMarketFunding* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cumulative_funding_, lhs_arena,
                                       &other->_impl_.cumulative_funding_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cumulative_price_, lhs_arena,
                                       &other->_impl_.cumulative_price_, rhs_arena);

  swap(_impl_.last_timestamp_, other->_impl_.last_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerpetualMarketFunding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[5]);
}
// ===================================================================

class ExpiryFuturesMarketInfo::_Internal {
 public:
};

ExpiryFuturesMarketInfo::ExpiryFuturesMarketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
}
ExpiryFuturesMarketInfo::ExpiryFuturesMarketInfo(const ExpiryFuturesMarketInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpiryFuturesMarketInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.settlement_price_) {}

    , decltype(_impl_.expiration_timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlement_price().empty()) {
    _this->_impl_.settlement_price_.Set(from._internal_settlement_price(), _this->GetArenaForAllocation());
  }
  _this->_impl_.expiration_timestamp_ = from._impl_.expiration_timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
}

inline void ExpiryFuturesMarketInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.settlement_price_) {}

    , decltype(_impl_.expiration_timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExpiryFuturesMarketInfo::~ExpiryFuturesMarketInfo() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpiryFuturesMarketInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.settlement_price_.Destroy();
}

void ExpiryFuturesMarketInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpiryFuturesMarketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.settlement_price_.ClearToEmpty();
  _impl_.expiration_timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpiryFuturesMarketInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 expiration_timestamp = 1 [json_name = "expirationTimestamp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.expiration_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string settlement_price = 2 [json_name = "settlementPrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_settlement_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.settlement_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExpiryFuturesMarketInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 expiration_timestamp = 1 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        1, this->_internal_expiration_timestamp(), target);
  }

  // string settlement_price = 2 [json_name = "settlementPrice"];
  if (!this->_internal_settlement_price().empty()) {
    const std::string& _s = this->_internal_settlement_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo.settlement_price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
  return target;
}

::size_t ExpiryFuturesMarketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string settlement_price = 2 [json_name = "settlementPrice"];
  if (!this->_internal_settlement_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_settlement_price());
  }

  // sint64 expiration_timestamp = 1 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_expiration_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpiryFuturesMarketInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpiryFuturesMarketInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpiryFuturesMarketInfo::GetClassData() const { return &_class_data_; }


void ExpiryFuturesMarketInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpiryFuturesMarketInfo*>(&to_msg);
  auto& from = static_cast<const ExpiryFuturesMarketInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_settlement_price().empty()) {
    _this->_internal_set_settlement_price(from._internal_settlement_price());
  }
  if (from._internal_expiration_timestamp() != 0) {
    _this->_internal_set_expiration_timestamp(from._internal_expiration_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpiryFuturesMarketInfo::CopyFrom(const ExpiryFuturesMarketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.ExpiryFuturesMarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpiryFuturesMarketInfo::IsInitialized() const {
  return true;
}

void ExpiryFuturesMarketInfo::InternalSwap(ExpiryFuturesMarketInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_price_, lhs_arena,
                                       &other->_impl_.settlement_price_, rhs_arena);

  swap(_impl_.expiration_timestamp_, other->_impl_.expiration_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpiryFuturesMarketInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[6]);
}
// ===================================================================

class MarketRequest::_Internal {
 public:
};

MarketRequest::MarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.MarketRequest)
}
MarketRequest::MarketRequest(const MarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.MarketRequest)
}

inline void MarketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketRequest::~MarketRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.MarketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void MarketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.MarketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.MarketRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.MarketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.MarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.MarketRequest)
  return target;
}

::size_t MarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.MarketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketRequest::GetClassData() const { return &_class_data_; }


void MarketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketRequest*>(&to_msg);
  auto& from = static_cast<const MarketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.MarketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketRequest::CopyFrom(const MarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.MarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketRequest::IsInitialized() const {
  return true;
}

void MarketRequest::InternalSwap(MarketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[7]);
}
// ===================================================================

class MarketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MarketResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeMarketInfo& market(const MarketResponse* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeMarketInfo&
MarketResponse::_Internal::market(const MarketResponse* msg) {
  return *msg->_impl_.market_;
}
MarketResponse::MarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.MarketResponse)
}
MarketResponse::MarketResponse(const MarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_ = new ::injective_derivative_exchange_rpc::DerivativeMarketInfo(*from._impl_.market_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.MarketResponse)
}

inline void MarketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}
  };
}

MarketResponse::~MarketResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.MarketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.market_;
}

void MarketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.MarketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.market_ != nullptr);
    _impl_.market_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeMarketInfo market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.MarketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeMarketInfo market = 1 [json_name = "market"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market(this),
        _Internal::market(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.MarketResponse)
  return target;
}

::size_t MarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.MarketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective_derivative_exchange_rpc.DerivativeMarketInfo market = 1 [json_name = "market"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.market_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketResponse::GetClassData() const { return &_class_data_; }


void MarketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketResponse*>(&to_msg);
  auto& from = static_cast<const MarketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.MarketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_market()->::injective_derivative_exchange_rpc::DerivativeMarketInfo::MergeFrom(
        from._internal_market());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketResponse::CopyFrom(const MarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.MarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketResponse::IsInitialized() const {
  return true;
}

void MarketResponse::InternalSwap(MarketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.market_, other->_impl_.market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[8]);
}
// ===================================================================

class StreamMarketRequest::_Internal {
 public:
};

StreamMarketRequest::StreamMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamMarketRequest)
}
StreamMarketRequest::StreamMarketRequest(const StreamMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamMarketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamMarketRequest)
}

inline void StreamMarketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamMarketRequest::~StreamMarketRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamMarketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamMarketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
}

void StreamMarketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamMarketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMarketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string market_ids = 1 [json_name = "marketIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamMarketRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamMarketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamMarketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamMarketRequest.market_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamMarketRequest)
  return target;
}

::size_t StreamMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamMarketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMarketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamMarketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMarketRequest::GetClassData() const { return &_class_data_; }


void StreamMarketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamMarketRequest*>(&to_msg);
  auto& from = static_cast<const StreamMarketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamMarketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMarketRequest::CopyFrom(const StreamMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMarketRequest::IsInitialized() const {
  return true;
}

void StreamMarketRequest::InternalSwap(StreamMarketRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMarketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[9]);
}
// ===================================================================

class StreamMarketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamMarketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamMarketResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeMarketInfo& market(const StreamMarketResponse* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeMarketInfo&
StreamMarketResponse::_Internal::market(const StreamMarketResponse* msg) {
  return *msg->_impl_.market_;
}
StreamMarketResponse::StreamMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamMarketResponse)
}
StreamMarketResponse::StreamMarketResponse(const StreamMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamMarketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.market_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_type().empty()) {
    _this->_impl_.operation_type_.Set(from._internal_operation_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_ = new ::injective_derivative_exchange_rpc::DerivativeMarketInfo(*from._impl_.market_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamMarketResponse)
}

inline void StreamMarketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.market_){nullptr}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamMarketResponse::~StreamMarketResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamMarketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamMarketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.market_;
}

void StreamMarketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamMarketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.market_ != nullptr);
    _impl_.market_->Clear();
  }
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamMarketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeMarketInfo market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string operation_type = 2 [json_name = "operationType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamMarketResponse.operation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamMarketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamMarketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeMarketInfo market = 1 [json_name = "market"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market(this),
        _Internal::market(this).GetCachedSize(), target, stream);
  }

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    const std::string& _s = this->_internal_operation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamMarketResponse.operation_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamMarketResponse)
  return target;
}

::size_t StreamMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamMarketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation_type());
  }

  // .injective_derivative_exchange_rpc.DerivativeMarketInfo market = 1 [json_name = "market"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.market_);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamMarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamMarketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamMarketResponse::GetClassData() const { return &_class_data_; }


void StreamMarketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamMarketResponse*>(&to_msg);
  auto& from = static_cast<const StreamMarketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamMarketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_market()->::injective_derivative_exchange_rpc::DerivativeMarketInfo::MergeFrom(
        from._internal_market());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamMarketResponse::CopyFrom(const StreamMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamMarketResponse::IsInitialized() const {
  return true;
}

void StreamMarketResponse::InternalSwap(StreamMarketResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, lhs_arena,
                                       &other->_impl_.operation_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamMarketResponse, _impl_.timestamp_)
      + sizeof(StreamMarketResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamMarketResponse, _impl_.market_)>(
          reinterpret_cast<char*>(&_impl_.market_),
          reinterpret_cast<char*>(&other->_impl_.market_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamMarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[10]);
}
// ===================================================================

class BinaryOptionsMarketsRequest::_Internal {
 public:
};

BinaryOptionsMarketsRequest::BinaryOptionsMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
}
BinaryOptionsMarketsRequest::BinaryOptionsMarketsRequest(const BinaryOptionsMarketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryOptionsMarketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_status_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_status().empty()) {
    _this->_impl_.market_status_.Set(from._internal_market_status(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
}

inline void BinaryOptionsMarketsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_status_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinaryOptionsMarketsRequest::~BinaryOptionsMarketsRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryOptionsMarketsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_status_.Destroy();
  _impl_.quote_denom_.Destroy();
}

void BinaryOptionsMarketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryOptionsMarketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_status_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryOptionsMarketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_status = 1 [json_name = "marketStatus"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest.market_status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 2 [json_name = "quoteDenom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 3 [json_name = "skip"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 4 [json_name = "limit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinaryOptionsMarketsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_status = 1 [json_name = "marketStatus"];
  if (!this->_internal_market_status().empty()) {
    const std::string& _s = this->_internal_market_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest.market_status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quote_denom = 2 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest.quote_denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_skip(), target);
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
  return target;
}

::size_t BinaryOptionsMarketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_status = 1 [json_name = "marketStatus"];
  if (!this->_internal_market_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_status());
  }

  // string quote_denom = 2 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryOptionsMarketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryOptionsMarketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryOptionsMarketsRequest::GetClassData() const { return &_class_data_; }


void BinaryOptionsMarketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryOptionsMarketsRequest*>(&to_msg);
  auto& from = static_cast<const BinaryOptionsMarketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_status().empty()) {
    _this->_internal_set_market_status(from._internal_market_status());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryOptionsMarketsRequest::CopyFrom(const BinaryOptionsMarketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryOptionsMarketsRequest::IsInitialized() const {
  return true;
}

void BinaryOptionsMarketsRequest::InternalSwap(BinaryOptionsMarketsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_status_, lhs_arena,
                                       &other->_impl_.market_status_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketsRequest, _impl_.limit_)
      + sizeof(BinaryOptionsMarketsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketsRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryOptionsMarketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[11]);
}
// ===================================================================

class BinaryOptionsMarketsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryOptionsMarketsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketsResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::Paging& paging(const BinaryOptionsMarketsResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::Paging&
BinaryOptionsMarketsResponse::_Internal::paging(const BinaryOptionsMarketsResponse* msg) {
  return *msg->_impl_.paging_;
}
BinaryOptionsMarketsResponse::BinaryOptionsMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
}
BinaryOptionsMarketsResponse::BinaryOptionsMarketsResponse(const BinaryOptionsMarketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryOptionsMarketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.markets_){from._impl_.markets_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_derivative_exchange_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
}

inline void BinaryOptionsMarketsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.markets_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

BinaryOptionsMarketsResponse::~BinaryOptionsMarketsResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryOptionsMarketsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_markets()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void BinaryOptionsMarketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryOptionsMarketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_markets()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryOptionsMarketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.BinaryOptionsMarketInfo markets = 1 [json_name = "markets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinaryOptionsMarketsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.BinaryOptionsMarketInfo markets = 1 [json_name = "markets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_markets_size()); i < n; i++) {
    const auto& repfield = this->_internal_markets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
  return target;
}

::size_t BinaryOptionsMarketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.BinaryOptionsMarketInfo markets = 1 [json_name = "markets"];
  total_size += 1UL * this->_internal_markets_size();
  for (const auto& msg : this->_internal_markets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryOptionsMarketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryOptionsMarketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryOptionsMarketsResponse::GetClassData() const { return &_class_data_; }


void BinaryOptionsMarketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryOptionsMarketsResponse*>(&to_msg);
  auto& from = static_cast<const BinaryOptionsMarketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_markets()->MergeFrom(from._internal_markets());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_derivative_exchange_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryOptionsMarketsResponse::CopyFrom(const BinaryOptionsMarketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryOptionsMarketsResponse::IsInitialized() const {
  return true;
}

void BinaryOptionsMarketsResponse::InternalSwap(BinaryOptionsMarketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_markets()->InternalSwap(other->_internal_mutable_markets());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryOptionsMarketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[12]);
}
// ===================================================================

class BinaryOptionsMarketInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryOptionsMarketInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketInfo, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::TokenMeta& quote_token_meta(const BinaryOptionsMarketInfo* msg);
  static void set_has_quote_token_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::TokenMeta&
BinaryOptionsMarketInfo::_Internal::quote_token_meta(const BinaryOptionsMarketInfo* msg) {
  return *msg->_impl_.quote_token_meta_;
}
BinaryOptionsMarketInfo::BinaryOptionsMarketInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
}
BinaryOptionsMarketInfo::BinaryOptionsMarketInfo(const BinaryOptionsMarketInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryOptionsMarketInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.market_status_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.oracle_symbol_) {}

    , decltype(_impl_.oracle_provider_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.service_provider_fee_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.settlement_price_) {}

    , decltype(_impl_.quote_token_meta_){nullptr}
    , decltype(_impl_.expiration_timestamp_) {}

    , decltype(_impl_.settlement_timestamp_) {}

    , decltype(_impl_.oracle_scale_factor_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_status().empty()) {
    _this->_impl_.market_status_.Set(from._internal_market_status(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_symbol().empty()) {
    _this->_impl_.oracle_symbol_.Set(from._internal_oracle_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_provider().empty()) {
    _this->_impl_.oracle_provider_.Set(from._internal_oracle_provider(), _this->GetArenaForAllocation());
  }
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oracle_type().empty()) {
    _this->_impl_.oracle_type_.Set(from._internal_oracle_type(), _this->GetArenaForAllocation());
  }
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quote_denom().empty()) {
    _this->_impl_.quote_denom_.Set(from._internal_quote_denom(), _this->GetArenaForAllocation());
  }
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_impl_.maker_fee_rate_.Set(from._internal_maker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_impl_.taker_fee_rate_.Set(from._internal_taker_fee_rate(), _this->GetArenaForAllocation());
  }
  _impl_.service_provider_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_provider_fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_provider_fee().empty()) {
    _this->_impl_.service_provider_fee_.Set(from._internal_service_provider_fee(), _this->GetArenaForAllocation());
  }
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_impl_.min_price_tick_size_.Set(from._internal_min_price_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_impl_.min_quantity_tick_size_.Set(from._internal_min_quantity_tick_size(), _this->GetArenaForAllocation());
  }
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlement_price().empty()) {
    _this->_impl_.settlement_price_.Set(from._internal_settlement_price(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.quote_token_meta_ = new ::injective_derivative_exchange_rpc::TokenMeta(*from._impl_.quote_token_meta_);
  }
  ::memcpy(&_impl_.expiration_timestamp_, &from._impl_.expiration_timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.oracle_scale_factor_) -
    reinterpret_cast<char*>(&_impl_.expiration_timestamp_)) + sizeof(_impl_.oracle_scale_factor_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
}

inline void BinaryOptionsMarketInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.market_status_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.oracle_symbol_) {}

    , decltype(_impl_.oracle_provider_) {}

    , decltype(_impl_.oracle_type_) {}

    , decltype(_impl_.quote_denom_) {}

    , decltype(_impl_.maker_fee_rate_) {}

    , decltype(_impl_.taker_fee_rate_) {}

    , decltype(_impl_.service_provider_fee_) {}

    , decltype(_impl_.min_price_tick_size_) {}

    , decltype(_impl_.min_quantity_tick_size_) {}

    , decltype(_impl_.settlement_price_) {}

    , decltype(_impl_.quote_token_meta_){nullptr}
    , decltype(_impl_.expiration_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.settlement_timestamp_) { ::int64_t{0} }

    , decltype(_impl_.oracle_scale_factor_) { 0u }

  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_provider_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_provider_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oracle_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.oracle_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quote_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quote_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.taker_fee_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_fee_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_provider_fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_provider_fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_price_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_price_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_quantity_tick_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_quantity_tick_size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.settlement_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinaryOptionsMarketInfo::~BinaryOptionsMarketInfo() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryOptionsMarketInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.market_status_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.oracle_symbol_.Destroy();
  _impl_.oracle_provider_.Destroy();
  _impl_.oracle_type_.Destroy();
  _impl_.quote_denom_.Destroy();
  _impl_.maker_fee_rate_.Destroy();
  _impl_.taker_fee_rate_.Destroy();
  _impl_.service_provider_fee_.Destroy();
  _impl_.min_price_tick_size_.Destroy();
  _impl_.min_quantity_tick_size_.Destroy();
  _impl_.settlement_price_.Destroy();
  if (this != internal_default_instance()) delete _impl_.quote_token_meta_;
}

void BinaryOptionsMarketInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryOptionsMarketInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.market_status_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.oracle_symbol_.ClearToEmpty();
  _impl_.oracle_provider_.ClearToEmpty();
  _impl_.oracle_type_.ClearToEmpty();
  _impl_.quote_denom_.ClearToEmpty();
  _impl_.maker_fee_rate_.ClearToEmpty();
  _impl_.taker_fee_rate_.ClearToEmpty();
  _impl_.service_provider_fee_.ClearToEmpty();
  _impl_.min_price_tick_size_.ClearToEmpty();
  _impl_.min_quantity_tick_size_.ClearToEmpty();
  _impl_.settlement_price_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.quote_token_meta_ != nullptr);
    _impl_.quote_token_meta_->Clear();
  }
  ::memset(&_impl_.expiration_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.oracle_scale_factor_) -
      reinterpret_cast<char*>(&_impl_.expiration_timestamp_)) + sizeof(_impl_.oracle_scale_factor_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryOptionsMarketInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_status = 2 [json_name = "marketStatus"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.market_status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 3 [json_name = "ticker"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_symbol = 4 [json_name = "oracleSymbol"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_oracle_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.oracle_symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_provider = 5 [json_name = "oracleProvider"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_oracle_provider();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.oracle_provider"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string oracle_type = 6 [json_name = "oracleType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_oracle_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.oracle_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.oracle_scale_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 expiration_timestamp = 8 [json_name = "expirationTimestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.expiration_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 settlement_timestamp = 9 [json_name = "settlementTimestamp"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.settlement_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string quote_denom = 10 [json_name = "quoteDenom"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_quote_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.quote_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.TokenMeta quote_token_meta = 11 [json_name = "quoteTokenMeta"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_quote_token_meta(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker_fee_rate = 12 [json_name = "makerFeeRate"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_maker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.maker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string taker_fee_rate = 13 [json_name = "takerFeeRate"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_taker_fee_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.taker_fee_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string service_provider_fee = 14 [json_name = "serviceProviderFee"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_service_provider_fee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.service_provider_fee"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_price_tick_size = 15 [json_name = "minPriceTickSize"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_min_price_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.min_price_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_quantity_tick_size = 16 [json_name = "minQuantityTickSize"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_min_quantity_tick_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.min_quantity_tick_size"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string settlement_price = 17 [json_name = "settlementPrice"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_settlement_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.settlement_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinaryOptionsMarketInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_status = 2 [json_name = "marketStatus"];
  if (!this->_internal_market_status().empty()) {
    const std::string& _s = this->_internal_market_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.market_status");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string oracle_symbol = 4 [json_name = "oracleSymbol"];
  if (!this->_internal_oracle_symbol().empty()) {
    const std::string& _s = this->_internal_oracle_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.oracle_symbol");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string oracle_provider = 5 [json_name = "oracleProvider"];
  if (!this->_internal_oracle_provider().empty()) {
    const std::string& _s = this->_internal_oracle_provider();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.oracle_provider");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string oracle_type = 6 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    const std::string& _s = this->_internal_oracle_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.oracle_type");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_oracle_scale_factor(), target);
  }

  // sint64 expiration_timestamp = 8 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_expiration_timestamp(), target);
  }

  // sint64 settlement_timestamp = 9 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        9, this->_internal_settlement_timestamp(), target);
  }

  // string quote_denom = 10 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    const std::string& _s = this->_internal_quote_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.quote_denom");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.TokenMeta quote_token_meta = 11 [json_name = "quoteTokenMeta"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::quote_token_meta(this),
        _Internal::quote_token_meta(this).GetCachedSize(), target, stream);
  }

  // string maker_fee_rate = 12 [json_name = "makerFeeRate"];
  if (!this->_internal_maker_fee_rate().empty()) {
    const std::string& _s = this->_internal_maker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.maker_fee_rate");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string taker_fee_rate = 13 [json_name = "takerFeeRate"];
  if (!this->_internal_taker_fee_rate().empty()) {
    const std::string& _s = this->_internal_taker_fee_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.taker_fee_rate");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string service_provider_fee = 14 [json_name = "serviceProviderFee"];
  if (!this->_internal_service_provider_fee().empty()) {
    const std::string& _s = this->_internal_service_provider_fee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.service_provider_fee");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string min_price_tick_size = 15 [json_name = "minPriceTickSize"];
  if (!this->_internal_min_price_tick_size().empty()) {
    const std::string& _s = this->_internal_min_price_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.min_price_tick_size");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string min_quantity_tick_size = 16 [json_name = "minQuantityTickSize"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    const std::string& _s = this->_internal_min_quantity_tick_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.min_quantity_tick_size");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // string settlement_price = 17 [json_name = "settlementPrice"];
  if (!this->_internal_settlement_price().empty()) {
    const std::string& _s = this->_internal_settlement_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketInfo.settlement_price");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
  return target;
}

::size_t BinaryOptionsMarketInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string market_status = 2 [json_name = "marketStatus"];
  if (!this->_internal_market_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_status());
  }

  // string ticker = 3 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string oracle_symbol = 4 [json_name = "oracleSymbol"];
  if (!this->_internal_oracle_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_symbol());
  }

  // string oracle_provider = 5 [json_name = "oracleProvider"];
  if (!this->_internal_oracle_provider().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_provider());
  }

  // string oracle_type = 6 [json_name = "oracleType"];
  if (!this->_internal_oracle_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_oracle_type());
  }

  // string quote_denom = 10 [json_name = "quoteDenom"];
  if (!this->_internal_quote_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quote_denom());
  }

  // string maker_fee_rate = 12 [json_name = "makerFeeRate"];
  if (!this->_internal_maker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker_fee_rate());
  }

  // string taker_fee_rate = 13 [json_name = "takerFeeRate"];
  if (!this->_internal_taker_fee_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker_fee_rate());
  }

  // string service_provider_fee = 14 [json_name = "serviceProviderFee"];
  if (!this->_internal_service_provider_fee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_service_provider_fee());
  }

  // string min_price_tick_size = 15 [json_name = "minPriceTickSize"];
  if (!this->_internal_min_price_tick_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_price_tick_size());
  }

  // string min_quantity_tick_size = 16 [json_name = "minQuantityTickSize"];
  if (!this->_internal_min_quantity_tick_size().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_quantity_tick_size());
  }

  // string settlement_price = 17 [json_name = "settlementPrice"];
  if (!this->_internal_settlement_price().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_settlement_price());
  }

  // .injective_derivative_exchange_rpc.TokenMeta quote_token_meta = 11 [json_name = "quoteTokenMeta"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quote_token_meta_);
  }

  // sint64 expiration_timestamp = 8 [json_name = "expirationTimestamp"];
  if (this->_internal_expiration_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_expiration_timestamp());
  }

  // sint64 settlement_timestamp = 9 [json_name = "settlementTimestamp"];
  if (this->_internal_settlement_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_settlement_timestamp());
  }

  // uint32 oracle_scale_factor = 7 [json_name = "oracleScaleFactor"];
  if (this->_internal_oracle_scale_factor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_oracle_scale_factor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryOptionsMarketInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryOptionsMarketInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryOptionsMarketInfo::GetClassData() const { return &_class_data_; }


void BinaryOptionsMarketInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryOptionsMarketInfo*>(&to_msg);
  auto& from = static_cast<const BinaryOptionsMarketInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_market_status().empty()) {
    _this->_internal_set_market_status(from._internal_market_status());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_oracle_symbol().empty()) {
    _this->_internal_set_oracle_symbol(from._internal_oracle_symbol());
  }
  if (!from._internal_oracle_provider().empty()) {
    _this->_internal_set_oracle_provider(from._internal_oracle_provider());
  }
  if (!from._internal_oracle_type().empty()) {
    _this->_internal_set_oracle_type(from._internal_oracle_type());
  }
  if (!from._internal_quote_denom().empty()) {
    _this->_internal_set_quote_denom(from._internal_quote_denom());
  }
  if (!from._internal_maker_fee_rate().empty()) {
    _this->_internal_set_maker_fee_rate(from._internal_maker_fee_rate());
  }
  if (!from._internal_taker_fee_rate().empty()) {
    _this->_internal_set_taker_fee_rate(from._internal_taker_fee_rate());
  }
  if (!from._internal_service_provider_fee().empty()) {
    _this->_internal_set_service_provider_fee(from._internal_service_provider_fee());
  }
  if (!from._internal_min_price_tick_size().empty()) {
    _this->_internal_set_min_price_tick_size(from._internal_min_price_tick_size());
  }
  if (!from._internal_min_quantity_tick_size().empty()) {
    _this->_internal_set_min_quantity_tick_size(from._internal_min_quantity_tick_size());
  }
  if (!from._internal_settlement_price().empty()) {
    _this->_internal_set_settlement_price(from._internal_settlement_price());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_quote_token_meta()->::injective_derivative_exchange_rpc::TokenMeta::MergeFrom(
        from._internal_quote_token_meta());
  }
  if (from._internal_expiration_timestamp() != 0) {
    _this->_internal_set_expiration_timestamp(from._internal_expiration_timestamp());
  }
  if (from._internal_settlement_timestamp() != 0) {
    _this->_internal_set_settlement_timestamp(from._internal_settlement_timestamp());
  }
  if (from._internal_oracle_scale_factor() != 0) {
    _this->_internal_set_oracle_scale_factor(from._internal_oracle_scale_factor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryOptionsMarketInfo::CopyFrom(const BinaryOptionsMarketInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryOptionsMarketInfo::IsInitialized() const {
  return true;
}

void BinaryOptionsMarketInfo::InternalSwap(BinaryOptionsMarketInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_status_, lhs_arena,
                                       &other->_impl_.market_status_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_symbol_, lhs_arena,
                                       &other->_impl_.oracle_symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_provider_, lhs_arena,
                                       &other->_impl_.oracle_provider_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.oracle_type_, lhs_arena,
                                       &other->_impl_.oracle_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quote_denom_, lhs_arena,
                                       &other->_impl_.quote_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_fee_rate_, lhs_arena,
                                       &other->_impl_.maker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_fee_rate_, lhs_arena,
                                       &other->_impl_.taker_fee_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_provider_fee_, lhs_arena,
                                       &other->_impl_.service_provider_fee_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_price_tick_size_, lhs_arena,
                                       &other->_impl_.min_price_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_quantity_tick_size_, lhs_arena,
                                       &other->_impl_.min_quantity_tick_size_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_price_, lhs_arena,
                                       &other->_impl_.settlement_price_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketInfo, _impl_.oracle_scale_factor_)
      + sizeof(BinaryOptionsMarketInfo::_impl_.oracle_scale_factor_)
      - PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketInfo, _impl_.quote_token_meta_)>(
          reinterpret_cast<char*>(&_impl_.quote_token_meta_),
          reinterpret_cast<char*>(&other->_impl_.quote_token_meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryOptionsMarketInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[13]);
}
// ===================================================================

class Paging::_Internal {
 public:
};

Paging::Paging(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.Paging)
}
Paging::Paging(const Paging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.Paging)
}

inline void Paging::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.total_) { ::int64_t{0} }

    , decltype(_impl_.from_) { 0 }

    , decltype(_impl_.to_) { 0 }

    , decltype(_impl_.count_by_subaccount_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Paging::~Paging() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.Paging)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Paging::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Paging::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Paging::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.Paging)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_by_subaccount_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.count_by_subaccount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Paging::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // sint64 total = 1 [json_name = "total"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 from = 2 [json_name = "from"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 to = 3 [json_name = "to"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 count_by_subaccount = 4 [json_name = "countBySubaccount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.count_by_subaccount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Paging::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.Paging)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // sint64 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        1, this->_internal_total(), target);
  }

  // sint32 from = 2 [json_name = "from"];
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        2, this->_internal_from(), target);
  }

  // sint32 to = 3 [json_name = "to"];
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_to(), target);
  }

  // sint64 count_by_subaccount = 4 [json_name = "countBySubaccount"];
  if (this->_internal_count_by_subaccount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_count_by_subaccount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.Paging)
  return target;
}

::size_t Paging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.Paging)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint64 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_total());
  }

  // sint32 from = 2 [json_name = "from"];
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_from());
  }

  // sint32 to = 3 [json_name = "to"];
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_to());
  }

  // sint64 count_by_subaccount = 4 [json_name = "countBySubaccount"];
  if (this->_internal_count_by_subaccount() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_count_by_subaccount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Paging::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Paging::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Paging::GetClassData() const { return &_class_data_; }


void Paging::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Paging*>(&to_msg);
  auto& from = static_cast<const Paging&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.Paging)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  if (from._internal_count_by_subaccount() != 0) {
    _this->_internal_set_count_by_subaccount(from._internal_count_by_subaccount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Paging::CopyFrom(const Paging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.Paging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Paging::IsInitialized() const {
  return true;
}

void Paging::InternalSwap(Paging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Paging, _impl_.count_by_subaccount_)
      + sizeof(Paging::_impl_.count_by_subaccount_)
      - PROTOBUF_FIELD_OFFSET(Paging, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Paging::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[14]);
}
// ===================================================================

class BinaryOptionsMarketRequest::_Internal {
 public:
};

BinaryOptionsMarketRequest::BinaryOptionsMarketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
}
BinaryOptionsMarketRequest::BinaryOptionsMarketRequest(const BinaryOptionsMarketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryOptionsMarketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
}

inline void BinaryOptionsMarketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinaryOptionsMarketRequest::~BinaryOptionsMarketRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryOptionsMarketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void BinaryOptionsMarketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryOptionsMarketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryOptionsMarketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.BinaryOptionsMarketRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinaryOptionsMarketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.BinaryOptionsMarketRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
  return target;
}

::size_t BinaryOptionsMarketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryOptionsMarketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryOptionsMarketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryOptionsMarketRequest::GetClassData() const { return &_class_data_; }


void BinaryOptionsMarketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryOptionsMarketRequest*>(&to_msg);
  auto& from = static_cast<const BinaryOptionsMarketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryOptionsMarketRequest::CopyFrom(const BinaryOptionsMarketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryOptionsMarketRequest::IsInitialized() const {
  return true;
}

void BinaryOptionsMarketRequest::InternalSwap(BinaryOptionsMarketRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryOptionsMarketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[15]);
}
// ===================================================================

class BinaryOptionsMarketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryOptionsMarketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BinaryOptionsMarketResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo& market(const BinaryOptionsMarketResponse* msg);
  static void set_has_market(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo&
BinaryOptionsMarketResponse::_Internal::market(const BinaryOptionsMarketResponse* msg) {
  return *msg->_impl_.market_;
}
BinaryOptionsMarketResponse::BinaryOptionsMarketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
}
BinaryOptionsMarketResponse::BinaryOptionsMarketResponse(const BinaryOptionsMarketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryOptionsMarketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.market_ = new ::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo(*from._impl_.market_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
}

inline void BinaryOptionsMarketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_){nullptr}
  };
}

BinaryOptionsMarketResponse::~BinaryOptionsMarketResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryOptionsMarketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.market_;
}

void BinaryOptionsMarketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryOptionsMarketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.market_ != nullptr);
    _impl_.market_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryOptionsMarketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.BinaryOptionsMarketInfo market = 1 [json_name = "market"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_market(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BinaryOptionsMarketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.BinaryOptionsMarketInfo market = 1 [json_name = "market"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::market(this),
        _Internal::market(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
  return target;
}

::size_t BinaryOptionsMarketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective_derivative_exchange_rpc.BinaryOptionsMarketInfo market = 1 [json_name = "market"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.market_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryOptionsMarketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryOptionsMarketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryOptionsMarketResponse::GetClassData() const { return &_class_data_; }


void BinaryOptionsMarketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryOptionsMarketResponse*>(&to_msg);
  auto& from = static_cast<const BinaryOptionsMarketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_market()->::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo::MergeFrom(
        from._internal_market());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryOptionsMarketResponse::CopyFrom(const BinaryOptionsMarketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.BinaryOptionsMarketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryOptionsMarketResponse::IsInitialized() const {
  return true;
}

void BinaryOptionsMarketResponse::InternalSwap(BinaryOptionsMarketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.market_, other->_impl_.market_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryOptionsMarketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[16]);
}
// ===================================================================

class OrderbookRequest::_Internal {
 public:
};

OrderbookRequest::OrderbookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbookRequest)
}
OrderbookRequest::OrderbookRequest(const OrderbookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbookRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbookRequest)
}

inline void OrderbookRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderbookRequest::~OrderbookRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbookRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbookRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void OrderbookRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbookRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbookRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrderbookRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbookRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbookRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrderbookRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbookRequest)
  return target;
}

::size_t OrderbookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbookRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbookRequest::GetClassData() const { return &_class_data_; }


void OrderbookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbookRequest*>(&to_msg);
  auto& from = static_cast<const OrderbookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbookRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbookRequest::CopyFrom(const OrderbookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbookRequest::IsInitialized() const {
  return true;
}

void OrderbookRequest::InternalSwap(OrderbookRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[17]);
}
// ===================================================================

class OrderbookResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderbookResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderbookResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook& orderbook(const OrderbookResponse* msg);
  static void set_has_orderbook(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook&
OrderbookResponse::_Internal::orderbook(const OrderbookResponse* msg) {
  return *msg->_impl_.orderbook_;
}
OrderbookResponse::OrderbookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbookResponse)
}
OrderbookResponse::OrderbookResponse(const OrderbookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbookResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orderbook_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.orderbook_ = new ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook(*from._impl_.orderbook_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbookResponse)
}

inline void OrderbookResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orderbook_){nullptr}
  };
}

OrderbookResponse::~OrderbookResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbookResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbookResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.orderbook_;
}

void OrderbookResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbookResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbook_ != nullptr);
    _impl_.orderbook_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbookResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 1 [json_name = "orderbook"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbookResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbookResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 1 [json_name = "orderbook"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::orderbook(this),
        _Internal::orderbook(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbookResponse)
  return target;
}

::size_t OrderbookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbookResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 1 [json_name = "orderbook"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbook_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbookResponse::GetClassData() const { return &_class_data_; }


void OrderbookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbookResponse*>(&to_msg);
  auto& from = static_cast<const OrderbookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbookResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_orderbook()->::injective_derivative_exchange_rpc::DerivativeLimitOrderbook::MergeFrom(
        from._internal_orderbook());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbookResponse::CopyFrom(const OrderbookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbookResponse::IsInitialized() const {
  return true;
}

void OrderbookResponse::InternalSwap(OrderbookResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.orderbook_, other->_impl_.orderbook_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[18]);
}
// ===================================================================

class DerivativeLimitOrderbook::_Internal {
 public:
};

DerivativeLimitOrderbook::DerivativeLimitOrderbook(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
}
DerivativeLimitOrderbook::DerivativeLimitOrderbook(const DerivativeLimitOrderbook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativeLimitOrderbook* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_){from._impl_.buys_}
    , decltype(_impl_.sells_){from._impl_.sells_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
}

inline void DerivativeLimitOrderbook::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_){arena}
    , decltype(_impl_.sells_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DerivativeLimitOrderbook::~DerivativeLimitOrderbook() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativeLimitOrderbook::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buys()->~RepeatedPtrField();
  _internal_mutable_sells()->~RepeatedPtrField();
}

void DerivativeLimitOrderbook::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativeLimitOrderbook::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buys()->Clear();
  _internal_mutable_sells()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativeLimitOrderbook::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.PriceLevel buys = 1 [json_name = "buys"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_derivative_exchange_rpc.PriceLevel sells = 2 [json_name = "sells"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativeLimitOrderbook::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.PriceLevel buys = 1 [json_name = "buys"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buys_size()); i < n; i++) {
    const auto& repfield = this->_internal_buys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective_derivative_exchange_rpc.PriceLevel sells = 2 [json_name = "sells"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sells_size()); i < n; i++) {
    const auto& repfield = this->_internal_sells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
  return target;
}

::size_t DerivativeLimitOrderbook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.PriceLevel buys = 1 [json_name = "buys"];
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->_internal_buys()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective_derivative_exchange_rpc.PriceLevel sells = 2 [json_name = "sells"];
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->_internal_sells()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativeLimitOrderbook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativeLimitOrderbook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativeLimitOrderbook::GetClassData() const { return &_class_data_; }


void DerivativeLimitOrderbook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativeLimitOrderbook*>(&to_msg);
  auto& from = static_cast<const DerivativeLimitOrderbook&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buys()->MergeFrom(from._internal_buys());
  _this->_internal_mutable_sells()->MergeFrom(from._internal_sells());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativeLimitOrderbook::CopyFrom(const DerivativeLimitOrderbook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativeLimitOrderbook::IsInitialized() const {
  return true;
}

void DerivativeLimitOrderbook::InternalSwap(DerivativeLimitOrderbook* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_buys()->InternalSwap(other->_internal_mutable_buys());
  _internal_mutable_sells()->InternalSwap(other->_internal_mutable_sells());
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativeLimitOrderbook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[19]);
}
// ===================================================================

class PriceLevel::_Internal {
 public:
};

PriceLevel::PriceLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.PriceLevel)
}
PriceLevel::PriceLevel(const PriceLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PriceLevel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.PriceLevel)
}

inline void PriceLevel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PriceLevel::~PriceLevel() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.PriceLevel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PriceLevel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_.Destroy();
  _impl_.quantity_.Destroy();
}

void PriceLevel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PriceLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.PriceLevel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  _impl_.timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceLevel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1 [json_name = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PriceLevel.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 2 [json_name = "quantity"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PriceLevel.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PriceLevel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.PriceLevel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PriceLevel.price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quantity = 2 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PriceLevel.quantity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.PriceLevel)
  return target;
}

::size_t PriceLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.PriceLevel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string quantity = 2 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceLevel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PriceLevel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceLevel::GetClassData() const { return &_class_data_; }


void PriceLevel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PriceLevel*>(&to_msg);
  auto& from = static_cast<const PriceLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.PriceLevel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceLevel::CopyFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceLevel::IsInitialized() const {
  return true;
}

void PriceLevel::InternalSwap(PriceLevel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceLevel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[20]);
}
// ===================================================================

class OrderbookV2Request::_Internal {
 public:
};

OrderbookV2Request::OrderbookV2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbookV2Request)
}
OrderbookV2Request::OrderbookV2Request(const OrderbookV2Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbookV2Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbookV2Request)
}

inline void OrderbookV2Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderbookV2Request::~OrderbookV2Request() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbookV2Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbookV2Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void OrderbookV2Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbookV2Request::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbookV2Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbookV2Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrderbookV2Request.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbookV2Request::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbookV2Request)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrderbookV2Request.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbookV2Request)
  return target;
}

::size_t OrderbookV2Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbookV2Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbookV2Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbookV2Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbookV2Request::GetClassData() const { return &_class_data_; }


void OrderbookV2Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbookV2Request*>(&to_msg);
  auto& from = static_cast<const OrderbookV2Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbookV2Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbookV2Request::CopyFrom(const OrderbookV2Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbookV2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbookV2Request::IsInitialized() const {
  return true;
}

void OrderbookV2Request::InternalSwap(OrderbookV2Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbookV2Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[21]);
}
// ===================================================================

class OrderbookV2Response::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderbookV2Response>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderbookV2Response, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2& orderbook(const OrderbookV2Response* msg);
  static void set_has_orderbook(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2&
OrderbookV2Response::_Internal::orderbook(const OrderbookV2Response* msg) {
  return *msg->_impl_.orderbook_;
}
OrderbookV2Response::OrderbookV2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbookV2Response)
}
OrderbookV2Response::OrderbookV2Response(const OrderbookV2Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbookV2Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orderbook_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.orderbook_ = new ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2(*from._impl_.orderbook_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbookV2Response)
}

inline void OrderbookV2Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orderbook_){nullptr}
  };
}

OrderbookV2Response::~OrderbookV2Response() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbookV2Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbookV2Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.orderbook_;
}

void OrderbookV2Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbookV2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbookV2Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbook_ != nullptr);
    _impl_.orderbook_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbookV2Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 1 [json_name = "orderbook"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbookV2Response::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbookV2Response)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 1 [json_name = "orderbook"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::orderbook(this),
        _Internal::orderbook(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbookV2Response)
  return target;
}

::size_t OrderbookV2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbookV2Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 1 [json_name = "orderbook"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbook_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbookV2Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbookV2Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbookV2Response::GetClassData() const { return &_class_data_; }


void OrderbookV2Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbookV2Response*>(&to_msg);
  auto& from = static_cast<const OrderbookV2Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbookV2Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_orderbook()->::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2::MergeFrom(
        from._internal_orderbook());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbookV2Response::CopyFrom(const OrderbookV2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbookV2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbookV2Response::IsInitialized() const {
  return true;
}

void OrderbookV2Response::InternalSwap(OrderbookV2Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.orderbook_, other->_impl_.orderbook_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbookV2Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[22]);
}
// ===================================================================

class DerivativeLimitOrderbookV2::_Internal {
 public:
};

DerivativeLimitOrderbookV2::DerivativeLimitOrderbookV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
}
DerivativeLimitOrderbookV2::DerivativeLimitOrderbookV2(const DerivativeLimitOrderbookV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativeLimitOrderbookV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_){from._impl_.buys_}
    , decltype(_impl_.sells_){from._impl_.sells_}
    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
}

inline void DerivativeLimitOrderbookV2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_){arena}
    , decltype(_impl_.sells_){arena}
    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DerivativeLimitOrderbookV2::~DerivativeLimitOrderbookV2() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativeLimitOrderbookV2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buys()->~RepeatedPtrField();
  _internal_mutable_sells()->~RepeatedPtrField();
}

void DerivativeLimitOrderbookV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativeLimitOrderbookV2::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buys()->Clear();
  _internal_mutable_sells()->Clear();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativeLimitOrderbookV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.PriceLevel buys = 1 [json_name = "buys"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_derivative_exchange_rpc.PriceLevel sells = 2 [json_name = "sells"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativeLimitOrderbookV2::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.PriceLevel buys = 1 [json_name = "buys"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buys_size()); i < n; i++) {
    const auto& repfield = this->_internal_buys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective_derivative_exchange_rpc.PriceLevel sells = 2 [json_name = "sells"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sells_size()); i < n; i++) {
    const auto& repfield = this->_internal_sells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
  return target;
}

::size_t DerivativeLimitOrderbookV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.PriceLevel buys = 1 [json_name = "buys"];
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->_internal_buys()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective_derivative_exchange_rpc.PriceLevel sells = 2 [json_name = "sells"];
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->_internal_sells()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativeLimitOrderbookV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativeLimitOrderbookV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativeLimitOrderbookV2::GetClassData() const { return &_class_data_; }


void DerivativeLimitOrderbookV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativeLimitOrderbookV2*>(&to_msg);
  auto& from = static_cast<const DerivativeLimitOrderbookV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buys()->MergeFrom(from._internal_buys());
  _this->_internal_mutable_sells()->MergeFrom(from._internal_sells());
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativeLimitOrderbookV2::CopyFrom(const DerivativeLimitOrderbookV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativeLimitOrderbookV2::IsInitialized() const {
  return true;
}

void DerivativeLimitOrderbookV2::InternalSwap(DerivativeLimitOrderbookV2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_buys()->InternalSwap(other->_internal_mutable_buys());
  _internal_mutable_sells()->InternalSwap(other->_internal_mutable_sells());

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativeLimitOrderbookV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[23]);
}
// ===================================================================

class OrderbooksRequest::_Internal {
 public:
};

OrderbooksRequest::OrderbooksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbooksRequest)
}
OrderbooksRequest::OrderbooksRequest(const OrderbooksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbooksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbooksRequest)
}

inline void OrderbooksRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderbooksRequest::~OrderbooksRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbooksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbooksRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
}

void OrderbooksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbooksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbooksRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbooksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string market_ids = 1 [json_name = "marketIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrderbooksRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbooksRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbooksRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrderbooksRequest.market_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbooksRequest)
  return target;
}

::size_t OrderbooksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbooksRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbooksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbooksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbooksRequest::GetClassData() const { return &_class_data_; }


void OrderbooksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbooksRequest*>(&to_msg);
  auto& from = static_cast<const OrderbooksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbooksRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbooksRequest::CopyFrom(const OrderbooksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbooksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbooksRequest::IsInitialized() const {
  return true;
}

void OrderbooksRequest::InternalSwap(OrderbooksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbooksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[24]);
}
// ===================================================================

class OrderbooksResponse::_Internal {
 public:
};

OrderbooksResponse::OrderbooksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbooksResponse)
}
OrderbooksResponse::OrderbooksResponse(const OrderbooksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbooksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orderbooks_){from._impl_.orderbooks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbooksResponse)
}

inline void OrderbooksResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orderbooks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderbooksResponse::~OrderbooksResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbooksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbooksResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orderbooks()->~RepeatedPtrField();
}

void OrderbooksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbooksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbooksResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orderbooks()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbooksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook orderbooks = 1 [json_name = "orderbooks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orderbooks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbooksResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbooksResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook orderbooks = 1 [json_name = "orderbooks"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orderbooks_size()); i < n; i++) {
    const auto& repfield = this->_internal_orderbooks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbooksResponse)
  return target;
}

::size_t OrderbooksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbooksResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook orderbooks = 1 [json_name = "orderbooks"];
  total_size += 1UL * this->_internal_orderbooks_size();
  for (const auto& msg : this->_internal_orderbooks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbooksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbooksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbooksResponse::GetClassData() const { return &_class_data_; }


void OrderbooksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbooksResponse*>(&to_msg);
  auto& from = static_cast<const OrderbooksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbooksResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orderbooks()->MergeFrom(from._internal_orderbooks());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbooksResponse::CopyFrom(const OrderbooksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbooksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbooksResponse::IsInitialized() const {
  return true;
}

void OrderbooksResponse::InternalSwap(OrderbooksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orderbooks()->InternalSwap(other->_internal_mutable_orderbooks());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbooksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[25]);
}
// ===================================================================

class SingleDerivativeLimitOrderbook::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleDerivativeLimitOrderbook>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SingleDerivativeLimitOrderbook, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook& orderbook(const SingleDerivativeLimitOrderbook* msg);
  static void set_has_orderbook(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook&
SingleDerivativeLimitOrderbook::_Internal::orderbook(const SingleDerivativeLimitOrderbook* msg) {
  return *msg->_impl_.orderbook_;
}
SingleDerivativeLimitOrderbook::SingleDerivativeLimitOrderbook(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
}
SingleDerivativeLimitOrderbook::SingleDerivativeLimitOrderbook(const SingleDerivativeLimitOrderbook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleDerivativeLimitOrderbook* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.orderbook_ = new ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook(*from._impl_.orderbook_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
}

inline void SingleDerivativeLimitOrderbook::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_){nullptr}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleDerivativeLimitOrderbook::~SingleDerivativeLimitOrderbook() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleDerivativeLimitOrderbook::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.orderbook_;
}

void SingleDerivativeLimitOrderbook::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleDerivativeLimitOrderbook::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbook_ != nullptr);
    _impl_.orderbook_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDerivativeLimitOrderbook::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 2 [json_name = "orderbook"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SingleDerivativeLimitOrderbook::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 2 [json_name = "orderbook"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orderbook(this),
        _Internal::orderbook(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
  return target;
}

::size_t SingleDerivativeLimitOrderbook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 2 [json_name = "orderbook"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbook_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDerivativeLimitOrderbook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleDerivativeLimitOrderbook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDerivativeLimitOrderbook::GetClassData() const { return &_class_data_; }


void SingleDerivativeLimitOrderbook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleDerivativeLimitOrderbook*>(&to_msg);
  auto& from = static_cast<const SingleDerivativeLimitOrderbook&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_orderbook()->::injective_derivative_exchange_rpc::DerivativeLimitOrderbook::MergeFrom(
        from._internal_orderbook());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDerivativeLimitOrderbook::CopyFrom(const SingleDerivativeLimitOrderbook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDerivativeLimitOrderbook::IsInitialized() const {
  return true;
}

void SingleDerivativeLimitOrderbook::InternalSwap(SingleDerivativeLimitOrderbook* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  swap(_impl_.orderbook_, other->_impl_.orderbook_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDerivativeLimitOrderbook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[26]);
}
// ===================================================================

class OrderbooksV2Request::_Internal {
 public:
};

OrderbooksV2Request::OrderbooksV2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbooksV2Request)
}
OrderbooksV2Request::OrderbooksV2Request(const OrderbooksV2Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbooksV2Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbooksV2Request)
}

inline void OrderbooksV2Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderbooksV2Request::~OrderbooksV2Request() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbooksV2Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbooksV2Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
}

void OrderbooksV2Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbooksV2Request::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbooksV2Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbooksV2Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string market_ids = 1 [json_name = "marketIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrderbooksV2Request.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbooksV2Request::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbooksV2Request)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrderbooksV2Request.market_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbooksV2Request)
  return target;
}

::size_t OrderbooksV2Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbooksV2Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbooksV2Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbooksV2Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbooksV2Request::GetClassData() const { return &_class_data_; }


void OrderbooksV2Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbooksV2Request*>(&to_msg);
  auto& from = static_cast<const OrderbooksV2Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbooksV2Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbooksV2Request::CopyFrom(const OrderbooksV2Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbooksV2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbooksV2Request::IsInitialized() const {
  return true;
}

void OrderbooksV2Request::InternalSwap(OrderbooksV2Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbooksV2Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[27]);
}
// ===================================================================

class OrderbooksV2Response::_Internal {
 public:
};

OrderbooksV2Response::OrderbooksV2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbooksV2Response)
}
OrderbooksV2Response::OrderbooksV2Response(const OrderbooksV2Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbooksV2Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orderbooks_){from._impl_.orderbooks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbooksV2Response)
}

inline void OrderbooksV2Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orderbooks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderbooksV2Response::~OrderbooksV2Response() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbooksV2Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbooksV2Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orderbooks()->~RepeatedPtrField();
}

void OrderbooksV2Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbooksV2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbooksV2Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orderbooks()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbooksV2Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2 orderbooks = 1 [json_name = "orderbooks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orderbooks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbooksV2Response::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbooksV2Response)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2 orderbooks = 1 [json_name = "orderbooks"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orderbooks_size()); i < n; i++) {
    const auto& repfield = this->_internal_orderbooks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbooksV2Response)
  return target;
}

::size_t OrderbooksV2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbooksV2Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2 orderbooks = 1 [json_name = "orderbooks"];
  total_size += 1UL * this->_internal_orderbooks_size();
  for (const auto& msg : this->_internal_orderbooks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbooksV2Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbooksV2Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbooksV2Response::GetClassData() const { return &_class_data_; }


void OrderbooksV2Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbooksV2Response*>(&to_msg);
  auto& from = static_cast<const OrderbooksV2Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbooksV2Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orderbooks()->MergeFrom(from._internal_orderbooks());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbooksV2Response::CopyFrom(const OrderbooksV2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbooksV2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbooksV2Response::IsInitialized() const {
  return true;
}

void OrderbooksV2Response::InternalSwap(OrderbooksV2Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_orderbooks()->InternalSwap(other->_internal_mutable_orderbooks());
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbooksV2Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[28]);
}
// ===================================================================

class SingleDerivativeLimitOrderbookV2::_Internal {
 public:
  using HasBits = decltype(std::declval<SingleDerivativeLimitOrderbookV2>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SingleDerivativeLimitOrderbookV2, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2& orderbook(const SingleDerivativeLimitOrderbookV2* msg);
  static void set_has_orderbook(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2&
SingleDerivativeLimitOrderbookV2::_Internal::orderbook(const SingleDerivativeLimitOrderbookV2* msg) {
  return *msg->_impl_.orderbook_;
}
SingleDerivativeLimitOrderbookV2::SingleDerivativeLimitOrderbookV2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
}
SingleDerivativeLimitOrderbookV2::SingleDerivativeLimitOrderbookV2(const SingleDerivativeLimitOrderbookV2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SingleDerivativeLimitOrderbookV2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.orderbook_ = new ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2(*from._impl_.orderbook_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
}

inline void SingleDerivativeLimitOrderbookV2::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_){nullptr}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SingleDerivativeLimitOrderbookV2::~SingleDerivativeLimitOrderbookV2() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SingleDerivativeLimitOrderbookV2::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.orderbook_;
}

void SingleDerivativeLimitOrderbookV2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SingleDerivativeLimitOrderbookV2::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbook_ != nullptr);
    _impl_.orderbook_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleDerivativeLimitOrderbookV2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 2 [json_name = "orderbook"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SingleDerivativeLimitOrderbookV2::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 2 [json_name = "orderbook"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orderbook(this),
        _Internal::orderbook(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
  return target;
}

::size_t SingleDerivativeLimitOrderbookV2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 2 [json_name = "orderbook"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbook_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SingleDerivativeLimitOrderbookV2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SingleDerivativeLimitOrderbookV2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SingleDerivativeLimitOrderbookV2::GetClassData() const { return &_class_data_; }


void SingleDerivativeLimitOrderbookV2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SingleDerivativeLimitOrderbookV2*>(&to_msg);
  auto& from = static_cast<const SingleDerivativeLimitOrderbookV2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_orderbook()->::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2::MergeFrom(
        from._internal_orderbook());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SingleDerivativeLimitOrderbookV2::CopyFrom(const SingleDerivativeLimitOrderbookV2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.SingleDerivativeLimitOrderbookV2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDerivativeLimitOrderbookV2::IsInitialized() const {
  return true;
}

void SingleDerivativeLimitOrderbookV2::InternalSwap(SingleDerivativeLimitOrderbookV2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  swap(_impl_.orderbook_, other->_impl_.orderbook_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleDerivativeLimitOrderbookV2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[29]);
}
// ===================================================================

class StreamOrderbookRequest::_Internal {
 public:
};

StreamOrderbookRequest::StreamOrderbookRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrderbookRequest)
}
StreamOrderbookRequest::StreamOrderbookRequest(const StreamOrderbookRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrderbookRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrderbookRequest)
}

inline void StreamOrderbookRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamOrderbookRequest::~StreamOrderbookRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrderbookRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrderbookRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
}

void StreamOrderbookRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrderbookRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrderbookRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrderbookRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string market_ids = 1 [json_name = "marketIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrderbookRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrderbookRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookRequest.market_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrderbookRequest)
  return target;
}

::size_t StreamOrderbookRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrderbookRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrderbookRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrderbookRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrderbookRequest::GetClassData() const { return &_class_data_; }


void StreamOrderbookRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrderbookRequest*>(&to_msg);
  auto& from = static_cast<const StreamOrderbookRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrderbookRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrderbookRequest::CopyFrom(const StreamOrderbookRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrderbookRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrderbookRequest::IsInitialized() const {
  return true;
}

void StreamOrderbookRequest::InternalSwap(StreamOrderbookRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrderbookRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[30]);
}
// ===================================================================

class StreamOrderbookResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamOrderbookResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamOrderbookResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook& orderbook(const StreamOrderbookResponse* msg);
  static void set_has_orderbook(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook&
StreamOrderbookResponse::_Internal::orderbook(const StreamOrderbookResponse* msg) {
  return *msg->_impl_.orderbook_;
}
StreamOrderbookResponse::StreamOrderbookResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrderbookResponse)
}
StreamOrderbookResponse::StreamOrderbookResponse(const StreamOrderbookResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrderbookResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_type().empty()) {
    _this->_impl_.operation_type_.Set(from._internal_operation_type(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.orderbook_ = new ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook(*from._impl_.orderbook_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrderbookResponse)
}

inline void StreamOrderbookResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_){nullptr}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOrderbookResponse::~StreamOrderbookResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrderbookResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrderbookResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_type_.Destroy();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.orderbook_;
}

void StreamOrderbookResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrderbookResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrderbookResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_type_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbook_ != nullptr);
    _impl_.orderbook_->Clear();
  }
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrderbookResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 1 [json_name = "orderbook"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string operation_type = 2 [json_name = "operationType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookResponse.operation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 4 [json_name = "marketId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookResponse.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrderbookResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrderbookResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 1 [json_name = "orderbook"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::orderbook(this),
        _Internal::orderbook(this).GetCachedSize(), target, stream);
  }

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    const std::string& _s = this->_internal_operation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookResponse.operation_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  // string market_id = 4 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookResponse.market_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrderbookResponse)
  return target;
}

::size_t StreamOrderbookResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrderbookResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation_type());
  }

  // string market_id = 4 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbook orderbook = 1 [json_name = "orderbook"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbook_);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrderbookResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrderbookResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrderbookResponse::GetClassData() const { return &_class_data_; }


void StreamOrderbookResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrderbookResponse*>(&to_msg);
  auto& from = static_cast<const StreamOrderbookResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrderbookResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_orderbook()->::injective_derivative_exchange_rpc::DerivativeLimitOrderbook::MergeFrom(
        from._internal_orderbook());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrderbookResponse::CopyFrom(const StreamOrderbookResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrderbookResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrderbookResponse::IsInitialized() const {
  return true;
}

void StreamOrderbookResponse::InternalSwap(StreamOrderbookResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, lhs_arena,
                                       &other->_impl_.operation_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOrderbookResponse, _impl_.timestamp_)
      + sizeof(StreamOrderbookResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamOrderbookResponse, _impl_.orderbook_)>(
          reinterpret_cast<char*>(&_impl_.orderbook_),
          reinterpret_cast<char*>(&other->_impl_.orderbook_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrderbookResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[31]);
}
// ===================================================================

class StreamOrderbookV2Request::_Internal {
 public:
};

StreamOrderbookV2Request::StreamOrderbookV2Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
}
StreamOrderbookV2Request::StreamOrderbookV2Request(const StreamOrderbookV2Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrderbookV2Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
}

inline void StreamOrderbookV2Request::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamOrderbookV2Request::~StreamOrderbookV2Request() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrderbookV2Request::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
}

void StreamOrderbookV2Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrderbookV2Request::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrderbookV2Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string market_ids = 1 [json_name = "marketIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookV2Request.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrderbookV2Request::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookV2Request.market_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
  return target;
}

::size_t StreamOrderbookV2Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrderbookV2Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrderbookV2Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrderbookV2Request::GetClassData() const { return &_class_data_; }


void StreamOrderbookV2Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrderbookV2Request*>(&to_msg);
  auto& from = static_cast<const StreamOrderbookV2Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrderbookV2Request::CopyFrom(const StreamOrderbookV2Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrderbookV2Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrderbookV2Request::IsInitialized() const {
  return true;
}

void StreamOrderbookV2Request::InternalSwap(StreamOrderbookV2Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrderbookV2Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[32]);
}
// ===================================================================

class StreamOrderbookV2Response::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamOrderbookV2Response>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamOrderbookV2Response, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2& orderbook(const StreamOrderbookV2Response* msg);
  static void set_has_orderbook(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2&
StreamOrderbookV2Response::_Internal::orderbook(const StreamOrderbookV2Response* msg) {
  return *msg->_impl_.orderbook_;
}
StreamOrderbookV2Response::StreamOrderbookV2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
}
StreamOrderbookV2Response::StreamOrderbookV2Response(const StreamOrderbookV2Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrderbookV2Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_type().empty()) {
    _this->_impl_.operation_type_.Set(from._internal_operation_type(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.orderbook_ = new ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2(*from._impl_.orderbook_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
}

inline void StreamOrderbookV2Response::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_){nullptr}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOrderbookV2Response::~StreamOrderbookV2Response() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrderbookV2Response::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_type_.Destroy();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.orderbook_;
}

void StreamOrderbookV2Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrderbookV2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_type_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbook_ != nullptr);
    _impl_.orderbook_->Clear();
  }
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrderbookV2Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 1 [json_name = "orderbook"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string operation_type = 2 [json_name = "operationType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookV2Response.operation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 4 [json_name = "marketId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookV2Response.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrderbookV2Response::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 1 [json_name = "orderbook"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::orderbook(this),
        _Internal::orderbook(this).GetCachedSize(), target, stream);
  }

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    const std::string& _s = this->_internal_operation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookV2Response.operation_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  // string market_id = 4 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookV2Response.market_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
  return target;
}

::size_t StreamOrderbookV2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation_type());
  }

  // string market_id = 4 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .injective_derivative_exchange_rpc.DerivativeLimitOrderbookV2 orderbook = 1 [json_name = "orderbook"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbook_);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrderbookV2Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrderbookV2Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrderbookV2Response::GetClassData() const { return &_class_data_; }


void StreamOrderbookV2Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrderbookV2Response*>(&to_msg);
  auto& from = static_cast<const StreamOrderbookV2Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_orderbook()->::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2::MergeFrom(
        from._internal_orderbook());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrderbookV2Response::CopyFrom(const StreamOrderbookV2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrderbookV2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrderbookV2Response::IsInitialized() const {
  return true;
}

void StreamOrderbookV2Response::InternalSwap(StreamOrderbookV2Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, lhs_arena,
                                       &other->_impl_.operation_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOrderbookV2Response, _impl_.timestamp_)
      + sizeof(StreamOrderbookV2Response::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamOrderbookV2Response, _impl_.orderbook_)>(
          reinterpret_cast<char*>(&_impl_.orderbook_),
          reinterpret_cast<char*>(&other->_impl_.orderbook_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrderbookV2Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[33]);
}
// ===================================================================

class StreamOrderbookUpdateRequest::_Internal {
 public:
};

StreamOrderbookUpdateRequest::StreamOrderbookUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
}
StreamOrderbookUpdateRequest::StreamOrderbookUpdateRequest(const StreamOrderbookUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrderbookUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
}

inline void StreamOrderbookUpdateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StreamOrderbookUpdateRequest::~StreamOrderbookUpdateRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrderbookUpdateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
}

void StreamOrderbookUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrderbookUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrderbookUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string market_ids = 1 [json_name = "marketIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrderbookUpdateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest.market_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
  return target;
}

::size_t StreamOrderbookUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 1 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrderbookUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrderbookUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrderbookUpdateRequest::GetClassData() const { return &_class_data_; }


void StreamOrderbookUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrderbookUpdateRequest*>(&to_msg);
  auto& from = static_cast<const StreamOrderbookUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrderbookUpdateRequest::CopyFrom(const StreamOrderbookUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrderbookUpdateRequest::IsInitialized() const {
  return true;
}

void StreamOrderbookUpdateRequest::InternalSwap(StreamOrderbookUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrderbookUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[34]);
}
// ===================================================================

class StreamOrderbookUpdateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamOrderbookUpdateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamOrderbookUpdateResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::OrderbookLevelUpdates& orderbook_level_updates(const StreamOrderbookUpdateResponse* msg);
  static void set_has_orderbook_level_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::OrderbookLevelUpdates&
StreamOrderbookUpdateResponse::_Internal::orderbook_level_updates(const StreamOrderbookUpdateResponse* msg) {
  return *msg->_impl_.orderbook_level_updates_;
}
StreamOrderbookUpdateResponse::StreamOrderbookUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
}
StreamOrderbookUpdateResponse::StreamOrderbookUpdateResponse(const StreamOrderbookUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrderbookUpdateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_level_updates_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_type().empty()) {
    _this->_impl_.operation_type_.Set(from._internal_operation_type(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.orderbook_level_updates_ = new ::injective_derivative_exchange_rpc::OrderbookLevelUpdates(*from._impl_.orderbook_level_updates_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
}

inline void StreamOrderbookUpdateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.orderbook_level_updates_){nullptr}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOrderbookUpdateResponse::~StreamOrderbookUpdateResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrderbookUpdateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_type_.Destroy();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.orderbook_level_updates_;
}

void StreamOrderbookUpdateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrderbookUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_type_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.orderbook_level_updates_ != nullptr);
    _impl_.orderbook_level_updates_->Clear();
  }
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrderbookUpdateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.OrderbookLevelUpdates orderbook_level_updates = 1 [json_name = "orderbookLevelUpdates"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderbook_level_updates(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string operation_type = 2 [json_name = "operationType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse.operation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 4 [json_name = "marketId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrderbookUpdateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.OrderbookLevelUpdates orderbook_level_updates = 1 [json_name = "orderbookLevelUpdates"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::orderbook_level_updates(this),
        _Internal::orderbook_level_updates(this).GetCachedSize(), target, stream);
  }

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    const std::string& _s = this->_internal_operation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse.operation_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  // string market_id = 4 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse.market_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
  return target;
}

::size_t StreamOrderbookUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation_type());
  }

  // string market_id = 4 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .injective_derivative_exchange_rpc.OrderbookLevelUpdates orderbook_level_updates = 1 [json_name = "orderbookLevelUpdates"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.orderbook_level_updates_);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrderbookUpdateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrderbookUpdateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrderbookUpdateResponse::GetClassData() const { return &_class_data_; }


void StreamOrderbookUpdateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrderbookUpdateResponse*>(&to_msg);
  auto& from = static_cast<const StreamOrderbookUpdateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_orderbook_level_updates()->::injective_derivative_exchange_rpc::OrderbookLevelUpdates::MergeFrom(
        from._internal_orderbook_level_updates());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrderbookUpdateResponse::CopyFrom(const StreamOrderbookUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrderbookUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrderbookUpdateResponse::IsInitialized() const {
  return true;
}

void StreamOrderbookUpdateResponse::InternalSwap(StreamOrderbookUpdateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, lhs_arena,
                                       &other->_impl_.operation_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOrderbookUpdateResponse, _impl_.timestamp_)
      + sizeof(StreamOrderbookUpdateResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamOrderbookUpdateResponse, _impl_.orderbook_level_updates_)>(
          reinterpret_cast<char*>(&_impl_.orderbook_level_updates_),
          reinterpret_cast<char*>(&other->_impl_.orderbook_level_updates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrderbookUpdateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[35]);
}
// ===================================================================

class OrderbookLevelUpdates::_Internal {
 public:
};

OrderbookLevelUpdates::OrderbookLevelUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
}
OrderbookLevelUpdates::OrderbookLevelUpdates(const OrderbookLevelUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbookLevelUpdates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_){from._impl_.buys_}
    , decltype(_impl_.sells_){from._impl_.sells_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.sequence_) {}

    , decltype(_impl_.updated_at_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.updated_at_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.updated_at_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
}

inline void OrderbookLevelUpdates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.buys_){arena}
    , decltype(_impl_.sells_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , decltype(_impl_.updated_at_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderbookLevelUpdates::~OrderbookLevelUpdates() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbookLevelUpdates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_buys()->~RepeatedPtrField();
  _internal_mutable_sells()->~RepeatedPtrField();
  _impl_.market_id_.Destroy();
}

void OrderbookLevelUpdates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbookLevelUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_buys()->Clear();
  _internal_mutable_sells()->Clear();
  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.updated_at_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.updated_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbookLevelUpdates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrderbookLevelUpdates.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 2 [json_name = "sequence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_derivative_exchange_rpc.PriceLevelUpdate buys = 3 [json_name = "buys"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .injective_derivative_exchange_rpc.PriceLevelUpdate sells = 4 [json_name = "sells"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 updated_at = 5 [json_name = "updatedAt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbookLevelUpdates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrderbookLevelUpdates.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 sequence = 2 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sequence(), target);
  }

  // repeated .injective_derivative_exchange_rpc.PriceLevelUpdate buys = 3 [json_name = "buys"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buys_size()); i < n; i++) {
    const auto& repfield = this->_internal_buys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .injective_derivative_exchange_rpc.PriceLevelUpdate sells = 4 [json_name = "sells"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sells_size()); i < n; i++) {
    const auto& repfield = this->_internal_sells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // sint64 updated_at = 5 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        5, this->_internal_updated_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
  return target;
}

::size_t OrderbookLevelUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.PriceLevelUpdate buys = 3 [json_name = "buys"];
  total_size += 1UL * this->_internal_buys_size();
  for (const auto& msg : this->_internal_buys()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .injective_derivative_exchange_rpc.PriceLevelUpdate sells = 4 [json_name = "sells"];
  total_size += 1UL * this->_internal_sells_size();
  for (const auto& msg : this->_internal_sells()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // uint64 sequence = 2 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  // sint64 updated_at = 5 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_updated_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbookLevelUpdates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbookLevelUpdates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbookLevelUpdates::GetClassData() const { return &_class_data_; }


void OrderbookLevelUpdates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbookLevelUpdates*>(&to_msg);
  auto& from = static_cast<const OrderbookLevelUpdates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_buys()->MergeFrom(from._internal_buys());
  _this->_internal_mutable_sells()->MergeFrom(from._internal_sells());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbookLevelUpdates::CopyFrom(const OrderbookLevelUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrderbookLevelUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbookLevelUpdates::IsInitialized() const {
  return true;
}

void OrderbookLevelUpdates::InternalSwap(OrderbookLevelUpdates* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_buys()->InternalSwap(other->_internal_mutable_buys());
  _internal_mutable_sells()->InternalSwap(other->_internal_mutable_sells());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderbookLevelUpdates, _impl_.updated_at_)
      + sizeof(OrderbookLevelUpdates::_impl_.updated_at_)
      - PROTOBUF_FIELD_OFFSET(OrderbookLevelUpdates, _impl_.sequence_)>(
          reinterpret_cast<char*>(&_impl_.sequence_),
          reinterpret_cast<char*>(&other->_impl_.sequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbookLevelUpdates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[36]);
}
// ===================================================================

class PriceLevelUpdate::_Internal {
 public:
};

PriceLevelUpdate::PriceLevelUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.PriceLevelUpdate)
}
PriceLevelUpdate::PriceLevelUpdate(const PriceLevelUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PriceLevelUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.is_active_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_active_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_active_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.PriceLevelUpdate)
}

inline void PriceLevelUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.is_active_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PriceLevelUpdate::~PriceLevelUpdate() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.PriceLevelUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PriceLevelUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.price_.Destroy();
  _impl_.quantity_.Destroy();
}

void PriceLevelUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PriceLevelUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.PriceLevelUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.price_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_active_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceLevelUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string price = 1 [json_name = "price"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PriceLevelUpdate.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 2 [json_name = "quantity"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PriceLevelUpdate.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_active = 3 [json_name = "isActive"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 4 [json_name = "timestamp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PriceLevelUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.PriceLevelUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string price = 1 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PriceLevelUpdate.price");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string quantity = 2 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PriceLevelUpdate.quantity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool is_active = 3 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_active(), target);
  }

  // sint64 timestamp = 4 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.PriceLevelUpdate)
  return target;
}

::size_t PriceLevelUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.PriceLevelUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string price = 1 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string quantity = 2 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // sint64 timestamp = 4 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  // bool is_active = 3 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PriceLevelUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PriceLevelUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PriceLevelUpdate::GetClassData() const { return &_class_data_; }


void PriceLevelUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PriceLevelUpdate*>(&to_msg);
  auto& from = static_cast<const PriceLevelUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.PriceLevelUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_is_active() != 0) {
    _this->_internal_set_is_active(from._internal_is_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PriceLevelUpdate::CopyFrom(const PriceLevelUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.PriceLevelUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceLevelUpdate::IsInitialized() const {
  return true;
}

void PriceLevelUpdate::InternalSwap(PriceLevelUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceLevelUpdate, _impl_.is_active_)
      + sizeof(PriceLevelUpdate::_impl_.is_active_)
      - PROTOBUF_FIELD_OFFSET(PriceLevelUpdate, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceLevelUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[37]);
}
// ===================================================================

class OrdersRequest::_Internal {
 public:
};

OrdersRequest::OrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrdersRequest)
}
OrdersRequest::OrdersRequest(const OrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.order_side_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.is_conditional_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.start_time_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.limit_) {}

    , decltype(_impl_.include_inactive_) {}

    , decltype(_impl_.subaccount_total_orders_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.order_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_side().empty()) {
    _this->_impl_.order_side_.Set(from._internal_order_side(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.is_conditional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.is_conditional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_is_conditional().empty()) {
    _this->_impl_.is_conditional_.Set(from._internal_is_conditional(), _this->GetArenaForAllocation());
  }
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_type().empty()) {
    _this->_impl_.order_type_.Set(from._internal_order_type(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.subaccount_total_orders_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.subaccount_total_orders_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrdersRequest)
}

inline void OrdersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.order_side_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.is_conditional_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.start_time_) { ::int64_t{0} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , decltype(_impl_.include_inactive_) { false }

    , decltype(_impl_.subaccount_total_orders_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.is_conditional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.is_conditional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrdersRequest::~OrdersRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrdersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  _impl_.order_side_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.is_conditional_.Destroy();
  _impl_.order_type_.Destroy();
}

void OrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrdersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.order_side_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.is_conditional_.ClearToEmpty();
  _impl_.order_type_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.subaccount_total_orders_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.subaccount_total_orders_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_side = 2 [json_name = "orderSide"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_side();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersRequest.order_side"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 3 [json_name = "subaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 4 [json_name = "skip"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 5 [json_name = "limit"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 start_time = 6 [json_name = "startTime"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_time = 7 [json_name = "endTime"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 8 [json_name = "marketIds"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string is_conditional = 9 [json_name = "isConditional"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_is_conditional();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersRequest.is_conditional"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_type = 10 [json_name = "orderType"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_order_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersRequest.order_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool include_inactive = 11 [json_name = "includeInactive"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.include_inactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool subaccount_total_orders = 12 [json_name = "subaccountTotalOrders"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.subaccount_total_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrdersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrdersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string order_side = 2 [json_name = "orderSide"];
  if (!this->_internal_order_side().empty()) {
    const std::string& _s = this->_internal_order_side();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersRequest.order_side");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_skip(), target);
  }

  // sint32 limit = 5 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        5, this->_internal_limit(), target);
  }

  // sint64 start_time = 6 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_start_time(), target);
  }

  // sint64 end_time = 7 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_end_time(), target);
  }

  // repeated string market_ids = 8 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersRequest.market_ids");
    target = stream->WriteString(8, s, target);
  }

  // string is_conditional = 9 [json_name = "isConditional"];
  if (!this->_internal_is_conditional().empty()) {
    const std::string& _s = this->_internal_is_conditional();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersRequest.is_conditional");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string order_type = 10 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    const std::string& _s = this->_internal_order_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersRequest.order_type");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // bool include_inactive = 11 [json_name = "includeInactive"];
  if (this->_internal_include_inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_include_inactive(), target);
  }

  // bool subaccount_total_orders = 12 [json_name = "subaccountTotalOrders"];
  if (this->_internal_subaccount_total_orders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_subaccount_total_orders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrdersRequest)
  return target;
}

::size_t OrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrdersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 8 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string order_side = 2 [json_name = "orderSide"];
  if (!this->_internal_order_side().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_side());
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string is_conditional = 9 [json_name = "isConditional"];
  if (!this->_internal_is_conditional().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_is_conditional());
  }

  // string order_type = 10 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_type());
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 start_time = 6 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_start_time());
  }

  // sint64 end_time = 7 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_time());
  }

  // sint32 limit = 5 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  // bool include_inactive = 11 [json_name = "includeInactive"];
  if (this->_internal_include_inactive() != 0) {
    total_size += 2;
  }

  // bool subaccount_total_orders = 12 [json_name = "subaccountTotalOrders"];
  if (this->_internal_subaccount_total_orders() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrdersRequest::GetClassData() const { return &_class_data_; }


void OrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrdersRequest*>(&to_msg);
  auto& from = static_cast<const OrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrdersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_order_side().empty()) {
    _this->_internal_set_order_side(from._internal_order_side());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_is_conditional().empty()) {
    _this->_internal_set_is_conditional(from._internal_is_conditional());
  }
  if (!from._internal_order_type().empty()) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_include_inactive() != 0) {
    _this->_internal_set_include_inactive(from._internal_include_inactive());
  }
  if (from._internal_subaccount_total_orders() != 0) {
    _this->_internal_set_subaccount_total_orders(from._internal_subaccount_total_orders());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrdersRequest::CopyFrom(const OrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersRequest::IsInitialized() const {
  return true;
}

void OrdersRequest::InternalSwap(OrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_side_, lhs_arena,
                                       &other->_impl_.order_side_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.is_conditional_, lhs_arena,
                                       &other->_impl_.is_conditional_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_type_, lhs_arena,
                                       &other->_impl_.order_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrdersRequest, _impl_.subaccount_total_orders_)
      + sizeof(OrdersRequest::_impl_.subaccount_total_orders_)
      - PROTOBUF_FIELD_OFFSET(OrdersRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[38]);
}
// ===================================================================

class OrdersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<OrdersResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrdersResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::Paging& paging(const OrdersResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::Paging&
OrdersResponse::_Internal::paging(const OrdersResponse* msg) {
  return *msg->_impl_.paging_;
}
OrdersResponse::OrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrdersResponse)
}
OrdersResponse::OrdersResponse(const OrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orders_){from._impl_.orders_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_derivative_exchange_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrdersResponse)
}

inline void OrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orders_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

OrdersResponse::~OrdersResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void OrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.DerivativeLimitOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeLimitOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrdersResponse)
  return target;
}

::size_t OrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeLimitOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrdersResponse::GetClassData() const { return &_class_data_; }


void OrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrdersResponse*>(&to_msg);
  auto& from = static_cast<const OrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_derivative_exchange_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrdersResponse::CopyFrom(const OrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersResponse::IsInitialized() const {
  return true;
}

void OrdersResponse::InternalSwap(OrdersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[39]);
}
// ===================================================================

class DerivativeLimitOrder::_Internal {
 public:
};

DerivativeLimitOrder::DerivativeLimitOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.DerivativeLimitOrder)
}
DerivativeLimitOrder::DerivativeLimitOrder(const DerivativeLimitOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativeLimitOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , decltype(_impl_.order_side_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.unfilled_quantity_) {}

    , decltype(_impl_.trigger_price_) {}

    , decltype(_impl_.fee_recipient_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.placed_order_hash_) {}

    , decltype(_impl_.execution_type_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.order_number_) {}

    , decltype(_impl_.trigger_at_) {}

    , decltype(_impl_.is_reduce_only_) {}

    , decltype(_impl_.is_conditional_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  _impl_.order_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_side().empty()) {
    _this->_impl_.order_side_.Set(from._internal_order_side(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_margin().empty()) {
    _this->_impl_.margin_.Set(from._internal_margin(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.unfilled_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unfilled_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unfilled_quantity().empty()) {
    _this->_impl_.unfilled_quantity_.Set(from._internal_unfilled_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.trigger_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trigger_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trigger_price().empty()) {
    _this->_impl_.trigger_price_.Set(from._internal_trigger_price(), _this->GetArenaForAllocation());
  }
  _impl_.fee_recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_recipient().empty()) {
    _this->_impl_.fee_recipient_.Set(from._internal_fee_recipient(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_type().empty()) {
    _this->_impl_.order_type_.Set(from._internal_order_type(), _this->GetArenaForAllocation());
  }
  _impl_.placed_order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.placed_order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_placed_order_hash().empty()) {
    _this->_impl_.placed_order_hash_.Set(from._internal_placed_order_hash(), _this->GetArenaForAllocation());
  }
  _impl_.execution_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_type().empty()) {
    _this->_impl_.execution_type_.Set(from._internal_execution_type(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_conditional_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.is_conditional_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.DerivativeLimitOrder)
}

inline void DerivativeLimitOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , decltype(_impl_.order_side_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.unfilled_quantity_) {}

    , decltype(_impl_.trigger_price_) {}

    , decltype(_impl_.fee_recipient_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.placed_order_hash_) {}

    , decltype(_impl_.execution_type_) {}

    , decltype(_impl_.created_at_) { ::int64_t{0} }

    , decltype(_impl_.updated_at_) { ::int64_t{0} }

    , decltype(_impl_.order_number_) { ::int64_t{0} }

    , decltype(_impl_.trigger_at_) { ::uint64_t{0u} }

    , decltype(_impl_.is_reduce_only_) { false }

    , decltype(_impl_.is_conditional_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.unfilled_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unfilled_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trigger_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trigger_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.placed_order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.placed_order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DerivativeLimitOrder::~DerivativeLimitOrder() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.DerivativeLimitOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativeLimitOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
  _impl_.order_side_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.margin_.Destroy();
  _impl_.price_.Destroy();
  _impl_.quantity_.Destroy();
  _impl_.unfilled_quantity_.Destroy();
  _impl_.trigger_price_.Destroy();
  _impl_.fee_recipient_.Destroy();
  _impl_.state_.Destroy();
  _impl_.order_type_.Destroy();
  _impl_.placed_order_hash_.Destroy();
  _impl_.execution_type_.Destroy();
}

void DerivativeLimitOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativeLimitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.DerivativeLimitOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  _impl_.order_side_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.margin_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  _impl_.unfilled_quantity_.ClearToEmpty();
  _impl_.trigger_price_.ClearToEmpty();
  _impl_.fee_recipient_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.order_type_.ClearToEmpty();
  _impl_.placed_order_hash_.ClearToEmpty();
  _impl_.execution_type_.ClearToEmpty();
  ::memset(&_impl_.created_at_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_conditional_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.is_conditional_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativeLimitOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_side = 2 [json_name = "orderSide"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_side();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.order_side"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3 [json_name = "marketId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 4 [json_name = "subaccountId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_reduce_only = 5 [json_name = "isReduceOnly"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.is_reduce_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string margin = 6 [json_name = "margin"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_margin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.margin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 7 [json_name = "price"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 8 [json_name = "quantity"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string unfilled_quantity = 9 [json_name = "unfilledQuantity"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_unfilled_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.unfilled_quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string trigger_price = 10 [json_name = "triggerPrice"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_trigger_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.trigger_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee_recipient = 11 [json_name = "feeRecipient"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_fee_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.fee_recipient"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string state = 12 [json_name = "state"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.state"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 created_at = 13 [json_name = "createdAt"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 updated_at = 14 [json_name = "updatedAt"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 order_number = 15 [json_name = "orderNumber"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _impl_.order_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_type = 16 [json_name = "orderType"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_order_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.order_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_conditional = 17 [json_name = "isConditional"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _impl_.is_conditional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 trigger_at = 18 [json_name = "triggerAt"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _impl_.trigger_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string placed_order_hash = 19 [json_name = "placedOrderHash"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_placed_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.placed_order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_type = 20 [json_name = "executionType"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_execution_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeLimitOrder.execution_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativeLimitOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.DerivativeLimitOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string order_side = 2 [json_name = "orderSide"];
  if (!this->_internal_order_side().empty()) {
    const std::string& _s = this->_internal_order_side();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.order_side");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string subaccount_id = 4 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.subaccount_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool is_reduce_only = 5 [json_name = "isReduceOnly"];
  if (this->_internal_is_reduce_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_reduce_only(), target);
  }

  // string margin = 6 [json_name = "margin"];
  if (!this->_internal_margin().empty()) {
    const std::string& _s = this->_internal_margin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.margin");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string price = 7 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.price");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string quantity = 8 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.quantity");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string unfilled_quantity = 9 [json_name = "unfilledQuantity"];
  if (!this->_internal_unfilled_quantity().empty()) {
    const std::string& _s = this->_internal_unfilled_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.unfilled_quantity");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string trigger_price = 10 [json_name = "triggerPrice"];
  if (!this->_internal_trigger_price().empty()) {
    const std::string& _s = this->_internal_trigger_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.trigger_price");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string fee_recipient = 11 [json_name = "feeRecipient"];
  if (!this->_internal_fee_recipient().empty()) {
    const std::string& _s = this->_internal_fee_recipient();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.fee_recipient");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string state = 12 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.state");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // sint64 created_at = 13 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        13, this->_internal_created_at(), target);
  }

  // sint64 updated_at = 14 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        14, this->_internal_updated_at(), target);
  }

  // sint64 order_number = 15 [json_name = "orderNumber"];
  if (this->_internal_order_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        15, this->_internal_order_number(), target);
  }

  // string order_type = 16 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    const std::string& _s = this->_internal_order_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.order_type");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // bool is_conditional = 17 [json_name = "isConditional"];
  if (this->_internal_is_conditional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this->_internal_is_conditional(), target);
  }

  // uint64 trigger_at = 18 [json_name = "triggerAt"];
  if (this->_internal_trigger_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        18, this->_internal_trigger_at(), target);
  }

  // string placed_order_hash = 19 [json_name = "placedOrderHash"];
  if (!this->_internal_placed_order_hash().empty()) {
    const std::string& _s = this->_internal_placed_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.placed_order_hash");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // string execution_type = 20 [json_name = "executionType"];
  if (!this->_internal_execution_type().empty()) {
    const std::string& _s = this->_internal_execution_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeLimitOrder.execution_type");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.DerivativeLimitOrder)
  return target;
}

::size_t DerivativeLimitOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.DerivativeLimitOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // string order_side = 2 [json_name = "orderSide"];
  if (!this->_internal_order_side().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_side());
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 4 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string margin = 6 [json_name = "margin"];
  if (!this->_internal_margin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_margin());
  }

  // string price = 7 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string quantity = 8 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string unfilled_quantity = 9 [json_name = "unfilledQuantity"];
  if (!this->_internal_unfilled_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unfilled_quantity());
  }

  // string trigger_price = 10 [json_name = "triggerPrice"];
  if (!this->_internal_trigger_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trigger_price());
  }

  // string fee_recipient = 11 [json_name = "feeRecipient"];
  if (!this->_internal_fee_recipient().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_recipient());
  }

  // string state = 12 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  // string order_type = 16 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_type());
  }

  // string placed_order_hash = 19 [json_name = "placedOrderHash"];
  if (!this->_internal_placed_order_hash().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_placed_order_hash());
  }

  // string execution_type = 20 [json_name = "executionType"];
  if (!this->_internal_execution_type().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_type());
  }

  // sint64 created_at = 13 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_created_at());
  }

  // sint64 updated_at = 14 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_updated_at());
  }

  // sint64 order_number = 15 [json_name = "orderNumber"];
  if (this->_internal_order_number() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_order_number());
  }

  // uint64 trigger_at = 18 [json_name = "triggerAt"];
  if (this->_internal_trigger_at() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_trigger_at());
  }

  // bool is_reduce_only = 5 [json_name = "isReduceOnly"];
  if (this->_internal_is_reduce_only() != 0) {
    total_size += 2;
  }

  // bool is_conditional = 17 [json_name = "isConditional"];
  if (this->_internal_is_conditional() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativeLimitOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativeLimitOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativeLimitOrder::GetClassData() const { return &_class_data_; }


void DerivativeLimitOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativeLimitOrder*>(&to_msg);
  auto& from = static_cast<const DerivativeLimitOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.DerivativeLimitOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (!from._internal_order_side().empty()) {
    _this->_internal_set_order_side(from._internal_order_side());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_margin().empty()) {
    _this->_internal_set_margin(from._internal_margin());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_unfilled_quantity().empty()) {
    _this->_internal_set_unfilled_quantity(from._internal_unfilled_quantity());
  }
  if (!from._internal_trigger_price().empty()) {
    _this->_internal_set_trigger_price(from._internal_trigger_price());
  }
  if (!from._internal_fee_recipient().empty()) {
    _this->_internal_set_fee_recipient(from._internal_fee_recipient());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_order_type().empty()) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  if (!from._internal_placed_order_hash().empty()) {
    _this->_internal_set_placed_order_hash(from._internal_placed_order_hash());
  }
  if (!from._internal_execution_type().empty()) {
    _this->_internal_set_execution_type(from._internal_execution_type());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_order_number() != 0) {
    _this->_internal_set_order_number(from._internal_order_number());
  }
  if (from._internal_trigger_at() != 0) {
    _this->_internal_set_trigger_at(from._internal_trigger_at());
  }
  if (from._internal_is_reduce_only() != 0) {
    _this->_internal_set_is_reduce_only(from._internal_is_reduce_only());
  }
  if (from._internal_is_conditional() != 0) {
    _this->_internal_set_is_conditional(from._internal_is_conditional());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativeLimitOrder::CopyFrom(const DerivativeLimitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.DerivativeLimitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativeLimitOrder::IsInitialized() const {
  return true;
}

void DerivativeLimitOrder::InternalSwap(DerivativeLimitOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_side_, lhs_arena,
                                       &other->_impl_.order_side_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.margin_, lhs_arena,
                                       &other->_impl_.margin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unfilled_quantity_, lhs_arena,
                                       &other->_impl_.unfilled_quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trigger_price_, lhs_arena,
                                       &other->_impl_.trigger_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_recipient_, lhs_arena,
                                       &other->_impl_.fee_recipient_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_type_, lhs_arena,
                                       &other->_impl_.order_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.placed_order_hash_, lhs_arena,
                                       &other->_impl_.placed_order_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_type_, lhs_arena,
                                       &other->_impl_.execution_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DerivativeLimitOrder, _impl_.is_conditional_)
      + sizeof(DerivativeLimitOrder::_impl_.is_conditional_)
      - PROTOBUF_FIELD_OFFSET(DerivativeLimitOrder, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativeLimitOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[40]);
}
// ===================================================================

class PositionsRequest::_Internal {
 public:
};

PositionsRequest::PositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.PositionsRequest)
}
PositionsRequest::PositionsRequest(const PositionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.start_time_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.limit_) {}

    , decltype(_impl_.subaccount_total_positions_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.subaccount_total_positions_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.subaccount_total_positions_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.PositionsRequest)
}

inline void PositionsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.start_time_) { ::int64_t{0} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , decltype(_impl_.subaccount_total_positions_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionsRequest::~PositionsRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.PositionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.direction_.Destroy();
}

void PositionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.PositionsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.subaccount_total_positions_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.subaccount_total_positions_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PositionsRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PositionsRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 3 [json_name = "skip"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 4 [json_name = "limit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 start_time = 5 [json_name = "startTime"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_time = 6 [json_name = "endTime"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 7 [json_name = "marketIds"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PositionsRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string direction = 8 [json_name = "direction"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PositionsRequest.direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool subaccount_total_positions = 9 [json_name = "subaccountTotalPositions"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.subaccount_total_positions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PositionsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.PositionsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PositionsRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PositionsRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_skip(), target);
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_limit(), target);
  }

  // sint64 start_time = 5 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        5, this->_internal_start_time(), target);
  }

  // sint64 end_time = 6 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_end_time(), target);
  }

  // repeated string market_ids = 7 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PositionsRequest.market_ids");
    target = stream->WriteString(7, s, target);
  }

  // string direction = 8 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    const std::string& _s = this->_internal_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PositionsRequest.direction");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // bool subaccount_total_positions = 9 [json_name = "subaccountTotalPositions"];
  if (this->_internal_subaccount_total_positions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_subaccount_total_positions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.PositionsRequest)
  return target;
}

::size_t PositionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.PositionsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 7 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string direction = 8 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_direction());
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 start_time = 5 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_start_time());
  }

  // sint64 end_time = 6 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_time());
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  // bool subaccount_total_positions = 9 [json_name = "subaccountTotalPositions"];
  if (this->_internal_subaccount_total_positions() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsRequest::GetClassData() const { return &_class_data_; }


void PositionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsRequest*>(&to_msg);
  auto& from = static_cast<const PositionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.PositionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_subaccount_total_positions() != 0) {
    _this->_internal_set_subaccount_total_positions(from._internal_subaccount_total_positions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsRequest::CopyFrom(const PositionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.PositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsRequest::IsInitialized() const {
  return true;
}

void PositionsRequest::InternalSwap(PositionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, lhs_arena,
                                       &other->_impl_.direction_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionsRequest, _impl_.subaccount_total_positions_)
      + sizeof(PositionsRequest::_impl_.subaccount_total_positions_)
      - PROTOBUF_FIELD_OFFSET(PositionsRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[41]);
}
// ===================================================================

class PositionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PositionsResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::Paging& paging(const PositionsResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::Paging&
PositionsResponse::_Internal::paging(const PositionsResponse* msg) {
  return *msg->_impl_.paging_;
}
PositionsResponse::PositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.PositionsResponse)
}
PositionsResponse::PositionsResponse(const PositionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.positions_){from._impl_.positions_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_derivative_exchange_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.PositionsResponse)
}

inline void PositionsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.positions_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

PositionsResponse::~PositionsResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.PositionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_positions()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void PositionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.PositionsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_positions()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.DerivativePosition positions = 1 [json_name = "positions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PositionsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.PositionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativePosition positions = 1 [json_name = "positions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.PositionsResponse)
  return target;
}

::size_t PositionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.PositionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativePosition positions = 1 [json_name = "positions"];
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->_internal_positions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionsResponse::GetClassData() const { return &_class_data_; }


void PositionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionsResponse*>(&to_msg);
  auto& from = static_cast<const PositionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.PositionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_positions()->MergeFrom(from._internal_positions());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_derivative_exchange_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionsResponse::CopyFrom(const PositionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.PositionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionsResponse::IsInitialized() const {
  return true;
}

void PositionsResponse::InternalSwap(PositionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_positions()->InternalSwap(other->_internal_mutable_positions());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[42]);
}
// ===================================================================

class DerivativePosition::_Internal {
 public:
};

DerivativePosition::DerivativePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.DerivativePosition)
}
DerivativePosition::DerivativePosition(const DerivativePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativePosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ticker_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.entry_price_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.liquidation_price_) {}

    , decltype(_impl_.mark_price_) {}

    , decltype(_impl_.aggregate_reduce_only_quantity_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.created_at_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.entry_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.entry_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entry_price().empty()) {
    _this->_impl_.entry_price_.Set(from._internal_entry_price(), _this->GetArenaForAllocation());
  }
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_margin().empty()) {
    _this->_impl_.margin_.Set(from._internal_margin(), _this->GetArenaForAllocation());
  }
  _impl_.liquidation_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.liquidation_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_liquidation_price().empty()) {
    _this->_impl_.liquidation_price_.Set(from._internal_liquidation_price(), _this->GetArenaForAllocation());
  }
  _impl_.mark_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mark_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mark_price().empty()) {
    _this->_impl_.mark_price_.Set(from._internal_mark_price(), _this->GetArenaForAllocation());
  }
  _impl_.aggregate_reduce_only_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.aggregate_reduce_only_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_aggregate_reduce_only_quantity().empty()) {
    _this->_impl_.aggregate_reduce_only_quantity_.Set(from._internal_aggregate_reduce_only_quantity(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.updated_at_, &from._impl_.updated_at_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.created_at_) -
    reinterpret_cast<char*>(&_impl_.updated_at_)) + sizeof(_impl_.created_at_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.DerivativePosition)
}

inline void DerivativePosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ticker_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.entry_price_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.liquidation_price_) {}

    , decltype(_impl_.mark_price_) {}

    , decltype(_impl_.aggregate_reduce_only_quantity_) {}

    , decltype(_impl_.updated_at_) { ::int64_t{0} }

    , decltype(_impl_.created_at_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.entry_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.entry_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.liquidation_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.liquidation_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mark_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.mark_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.aggregate_reduce_only_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.aggregate_reduce_only_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DerivativePosition::~DerivativePosition() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.DerivativePosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativePosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ticker_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.direction_.Destroy();
  _impl_.quantity_.Destroy();
  _impl_.entry_price_.Destroy();
  _impl_.margin_.Destroy();
  _impl_.liquidation_price_.Destroy();
  _impl_.mark_price_.Destroy();
  _impl_.aggregate_reduce_only_quantity_.Destroy();
}

void DerivativePosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.DerivativePosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ticker_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  _impl_.entry_price_.ClearToEmpty();
  _impl_.margin_.ClearToEmpty();
  _impl_.liquidation_price_.ClearToEmpty();
  _impl_.mark_price_.ClearToEmpty();
  _impl_.aggregate_reduce_only_quantity_.ClearToEmpty();
  ::memset(&_impl_.updated_at_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.created_at_) -
      reinterpret_cast<char*>(&_impl_.updated_at_)) + sizeof(_impl_.created_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativePosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ticker = 1 [json_name = "ticker"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 3 [json_name = "subaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string direction = 4 [json_name = "direction"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 5 [json_name = "quantity"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string entry_price = 6 [json_name = "entryPrice"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_entry_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.entry_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string margin = 7 [json_name = "margin"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_margin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.margin"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string liquidation_price = 8 [json_name = "liquidationPrice"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_liquidation_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.liquidation_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string mark_price = 9 [json_name = "markPrice"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_mark_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.mark_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string aggregate_reduce_only_quantity = 11 [json_name = "aggregateReduceOnlyQuantity"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_aggregate_reduce_only_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativePosition.aggregate_reduce_only_quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 updated_at = 12 [json_name = "updatedAt"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 created_at = 13 [json_name = "createdAt"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativePosition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.DerivativePosition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticker = 1 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.ticker");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string direction = 4 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    const std::string& _s = this->_internal_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.direction");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string quantity = 5 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.quantity");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string entry_price = 6 [json_name = "entryPrice"];
  if (!this->_internal_entry_price().empty()) {
    const std::string& _s = this->_internal_entry_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.entry_price");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string margin = 7 [json_name = "margin"];
  if (!this->_internal_margin().empty()) {
    const std::string& _s = this->_internal_margin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.margin");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string liquidation_price = 8 [json_name = "liquidationPrice"];
  if (!this->_internal_liquidation_price().empty()) {
    const std::string& _s = this->_internal_liquidation_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.liquidation_price");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string mark_price = 9 [json_name = "markPrice"];
  if (!this->_internal_mark_price().empty()) {
    const std::string& _s = this->_internal_mark_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.mark_price");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string aggregate_reduce_only_quantity = 11 [json_name = "aggregateReduceOnlyQuantity"];
  if (!this->_internal_aggregate_reduce_only_quantity().empty()) {
    const std::string& _s = this->_internal_aggregate_reduce_only_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativePosition.aggregate_reduce_only_quantity");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // sint64 updated_at = 12 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        12, this->_internal_updated_at(), target);
  }

  // sint64 created_at = 13 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        13, this->_internal_created_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.DerivativePosition)
  return target;
}

::size_t DerivativePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.DerivativePosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ticker = 1 [json_name = "ticker"];
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string direction = 4 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_direction());
  }

  // string quantity = 5 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string entry_price = 6 [json_name = "entryPrice"];
  if (!this->_internal_entry_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_entry_price());
  }

  // string margin = 7 [json_name = "margin"];
  if (!this->_internal_margin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_margin());
  }

  // string liquidation_price = 8 [json_name = "liquidationPrice"];
  if (!this->_internal_liquidation_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_liquidation_price());
  }

  // string mark_price = 9 [json_name = "markPrice"];
  if (!this->_internal_mark_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_mark_price());
  }

  // string aggregate_reduce_only_quantity = 11 [json_name = "aggregateReduceOnlyQuantity"];
  if (!this->_internal_aggregate_reduce_only_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_aggregate_reduce_only_quantity());
  }

  // sint64 updated_at = 12 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_updated_at());
  }

  // sint64 created_at = 13 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_created_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativePosition::GetClassData() const { return &_class_data_; }


void DerivativePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativePosition*>(&to_msg);
  auto& from = static_cast<const DerivativePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.DerivativePosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_entry_price().empty()) {
    _this->_internal_set_entry_price(from._internal_entry_price());
  }
  if (!from._internal_margin().empty()) {
    _this->_internal_set_margin(from._internal_margin());
  }
  if (!from._internal_liquidation_price().empty()) {
    _this->_internal_set_liquidation_price(from._internal_liquidation_price());
  }
  if (!from._internal_mark_price().empty()) {
    _this->_internal_set_mark_price(from._internal_mark_price());
  }
  if (!from._internal_aggregate_reduce_only_quantity().empty()) {
    _this->_internal_set_aggregate_reduce_only_quantity(from._internal_aggregate_reduce_only_quantity());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativePosition::CopyFrom(const DerivativePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.DerivativePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativePosition::IsInitialized() const {
  return true;
}

void DerivativePosition::InternalSwap(DerivativePosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, lhs_arena,
                                       &other->_impl_.direction_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entry_price_, lhs_arena,
                                       &other->_impl_.entry_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.margin_, lhs_arena,
                                       &other->_impl_.margin_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.liquidation_price_, lhs_arena,
                                       &other->_impl_.liquidation_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mark_price_, lhs_arena,
                                       &other->_impl_.mark_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.aggregate_reduce_only_quantity_, lhs_arena,
                                       &other->_impl_.aggregate_reduce_only_quantity_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DerivativePosition, _impl_.created_at_)
      + sizeof(DerivativePosition::_impl_.created_at_)
      - PROTOBUF_FIELD_OFFSET(DerivativePosition, _impl_.updated_at_)>(
          reinterpret_cast<char*>(&_impl_.updated_at_),
          reinterpret_cast<char*>(&other->_impl_.updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[43]);
}
// ===================================================================

class LiquidablePositionsRequest::_Internal {
 public:
};

LiquidablePositionsRequest::LiquidablePositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
}
LiquidablePositionsRequest::LiquidablePositionsRequest(const LiquidablePositionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiquidablePositionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
}

inline void LiquidablePositionsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LiquidablePositionsRequest::~LiquidablePositionsRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiquidablePositionsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void LiquidablePositionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiquidablePositionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidablePositionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.LiquidablePositionsRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 2 [json_name = "skip"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LiquidablePositionsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.LiquidablePositionsRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 skip = 2 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_skip(), target);
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
  return target;
}

::size_t LiquidablePositionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // uint64 skip = 2 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiquidablePositionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiquidablePositionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiquidablePositionsRequest::GetClassData() const { return &_class_data_; }


void LiquidablePositionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiquidablePositionsRequest*>(&to_msg);
  auto& from = static_cast<const LiquidablePositionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiquidablePositionsRequest::CopyFrom(const LiquidablePositionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.LiquidablePositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidablePositionsRequest::IsInitialized() const {
  return true;
}

void LiquidablePositionsRequest::InternalSwap(LiquidablePositionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidablePositionsRequest, _impl_.limit_)
      + sizeof(LiquidablePositionsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(LiquidablePositionsRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidablePositionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[44]);
}
// ===================================================================

class LiquidablePositionsResponse::_Internal {
 public:
};

LiquidablePositionsResponse::LiquidablePositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
}
LiquidablePositionsResponse::LiquidablePositionsResponse(const LiquidablePositionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiquidablePositionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.positions_){from._impl_.positions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
}

inline void LiquidablePositionsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.positions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LiquidablePositionsResponse::~LiquidablePositionsResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiquidablePositionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_positions()->~RepeatedPtrField();
}

void LiquidablePositionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiquidablePositionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_positions()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidablePositionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.DerivativePosition positions = 1 [json_name = "positions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LiquidablePositionsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativePosition positions = 1 [json_name = "positions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
  return target;
}

::size_t LiquidablePositionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativePosition positions = 1 [json_name = "positions"];
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->_internal_positions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiquidablePositionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiquidablePositionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiquidablePositionsResponse::GetClassData() const { return &_class_data_; }


void LiquidablePositionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiquidablePositionsResponse*>(&to_msg);
  auto& from = static_cast<const LiquidablePositionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_positions()->MergeFrom(from._internal_positions());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiquidablePositionsResponse::CopyFrom(const LiquidablePositionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.LiquidablePositionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidablePositionsResponse::IsInitialized() const {
  return true;
}

void LiquidablePositionsResponse::InternalSwap(LiquidablePositionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_positions()->InternalSwap(other->_internal_mutable_positions());
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidablePositionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[45]);
}
// ===================================================================

class FundingPaymentsRequest::_Internal {
 public:
};

FundingPaymentsRequest::FundingPaymentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.FundingPaymentsRequest)
}
FundingPaymentsRequest::FundingPaymentsRequest(const FundingPaymentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundingPaymentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.FundingPaymentsRequest)
}

inline void FundingPaymentsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FundingPaymentsRequest::~FundingPaymentsRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.FundingPaymentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundingPaymentsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void FundingPaymentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundingPaymentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.FundingPaymentsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundingPaymentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingPaymentsRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingPaymentsRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 3 [json_name = "skip"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 4 [json_name = "limit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_time = 5 [json_name = "endTime"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 6 [json_name = "marketIds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingPaymentsRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FundingPaymentsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.FundingPaymentsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingPaymentsRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingPaymentsRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_skip(), target);
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_limit(), target);
  }

  // sint64 end_time = 5 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        5, this->_internal_end_time(), target);
  }

  // repeated string market_ids = 6 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingPaymentsRequest.market_ids");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.FundingPaymentsRequest)
  return target;
}

::size_t FundingPaymentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.FundingPaymentsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 6 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 end_time = 5 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_time());
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundingPaymentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundingPaymentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundingPaymentsRequest::GetClassData() const { return &_class_data_; }


void FundingPaymentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundingPaymentsRequest*>(&to_msg);
  auto& from = static_cast<const FundingPaymentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.FundingPaymentsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundingPaymentsRequest::CopyFrom(const FundingPaymentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.FundingPaymentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingPaymentsRequest::IsInitialized() const {
  return true;
}

void FundingPaymentsRequest::InternalSwap(FundingPaymentsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FundingPaymentsRequest, _impl_.limit_)
      + sizeof(FundingPaymentsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(FundingPaymentsRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingPaymentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[46]);
}
// ===================================================================

class FundingPaymentsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FundingPaymentsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FundingPaymentsResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::Paging& paging(const FundingPaymentsResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::Paging&
FundingPaymentsResponse::_Internal::paging(const FundingPaymentsResponse* msg) {
  return *msg->_impl_.paging_;
}
FundingPaymentsResponse::FundingPaymentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.FundingPaymentsResponse)
}
FundingPaymentsResponse::FundingPaymentsResponse(const FundingPaymentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundingPaymentsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payments_){from._impl_.payments_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_derivative_exchange_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.FundingPaymentsResponse)
}

inline void FundingPaymentsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.payments_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

FundingPaymentsResponse::~FundingPaymentsResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.FundingPaymentsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundingPaymentsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_payments()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void FundingPaymentsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundingPaymentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.FundingPaymentsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_payments()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundingPaymentsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.FundingPayment payments = 1 [json_name = "payments"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FundingPaymentsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.FundingPaymentsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.FundingPayment payments = 1 [json_name = "payments"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_payments_size()); i < n; i++) {
    const auto& repfield = this->_internal_payments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.FundingPaymentsResponse)
  return target;
}

::size_t FundingPaymentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.FundingPaymentsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.FundingPayment payments = 1 [json_name = "payments"];
  total_size += 1UL * this->_internal_payments_size();
  for (const auto& msg : this->_internal_payments()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundingPaymentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundingPaymentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundingPaymentsResponse::GetClassData() const { return &_class_data_; }


void FundingPaymentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundingPaymentsResponse*>(&to_msg);
  auto& from = static_cast<const FundingPaymentsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.FundingPaymentsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_payments()->MergeFrom(from._internal_payments());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_derivative_exchange_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundingPaymentsResponse::CopyFrom(const FundingPaymentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.FundingPaymentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingPaymentsResponse::IsInitialized() const {
  return true;
}

void FundingPaymentsResponse::InternalSwap(FundingPaymentsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_payments()->InternalSwap(other->_internal_mutable_payments());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingPaymentsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[47]);
}
// ===================================================================

class FundingPayment::_Internal {
 public:
};

FundingPayment::FundingPayment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.FundingPayment)
}
FundingPayment::FundingPayment(const FundingPayment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundingPayment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.FundingPayment)
}

inline void FundingPayment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FundingPayment::~FundingPayment() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.FundingPayment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundingPayment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.amount_.Destroy();
}

void FundingPayment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundingPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.FundingPayment)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundingPayment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingPayment.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingPayment.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 3 [json_name = "amount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingPayment.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 4 [json_name = "timestamp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FundingPayment::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.FundingPayment)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingPayment.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingPayment.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string amount = 3 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingPayment.amount");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // sint64 timestamp = 4 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.FundingPayment)
  return target;
}

::size_t FundingPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.FundingPayment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string amount = 3 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // sint64 timestamp = 4 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundingPayment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundingPayment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundingPayment::GetClassData() const { return &_class_data_; }


void FundingPayment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundingPayment*>(&to_msg);
  auto& from = static_cast<const FundingPayment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.FundingPayment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundingPayment::CopyFrom(const FundingPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.FundingPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingPayment::IsInitialized() const {
  return true;
}

void FundingPayment::InternalSwap(FundingPayment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingPayment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[48]);
}
// ===================================================================

class FundingRatesRequest::_Internal {
 public:
};

FundingRatesRequest::FundingRatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.FundingRatesRequest)
}
FundingRatesRequest::FundingRatesRequest(const FundingRatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundingRatesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.FundingRatesRequest)
}

inline void FundingRatesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FundingRatesRequest::~FundingRatesRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.FundingRatesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundingRatesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
}

void FundingRatesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundingRatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.FundingRatesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundingRatesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingRatesRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 2 [json_name = "skip"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_time = 4 [json_name = "endTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FundingRatesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.FundingRatesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingRatesRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 skip = 2 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_skip(), target);
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        3, this->_internal_limit(), target);
  }

  // sint64 end_time = 4 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        4, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.FundingRatesRequest)
  return target;
}

::size_t FundingRatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.FundingRatesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // uint64 skip = 2 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 end_time = 4 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_time());
  }

  // sint32 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundingRatesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundingRatesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundingRatesRequest::GetClassData() const { return &_class_data_; }


void FundingRatesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundingRatesRequest*>(&to_msg);
  auto& from = static_cast<const FundingRatesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.FundingRatesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundingRatesRequest::CopyFrom(const FundingRatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.FundingRatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingRatesRequest::IsInitialized() const {
  return true;
}

void FundingRatesRequest::InternalSwap(FundingRatesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FundingRatesRequest, _impl_.limit_)
      + sizeof(FundingRatesRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(FundingRatesRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingRatesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[49]);
}
// ===================================================================

class FundingRatesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FundingRatesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(FundingRatesResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::Paging& paging(const FundingRatesResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::Paging&
FundingRatesResponse::_Internal::paging(const FundingRatesResponse* msg) {
  return *msg->_impl_.paging_;
}
FundingRatesResponse::FundingRatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.FundingRatesResponse)
}
FundingRatesResponse::FundingRatesResponse(const FundingRatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundingRatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funding_rates_){from._impl_.funding_rates_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_derivative_exchange_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.FundingRatesResponse)
}

inline void FundingRatesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funding_rates_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

FundingRatesResponse::~FundingRatesResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.FundingRatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundingRatesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_funding_rates()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void FundingRatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundingRatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.FundingRatesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_funding_rates()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundingRatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.FundingRate funding_rates = 1 [json_name = "fundingRates"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_funding_rates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FundingRatesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.FundingRatesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.FundingRate funding_rates = 1 [json_name = "fundingRates"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_funding_rates_size()); i < n; i++) {
    const auto& repfield = this->_internal_funding_rates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.FundingRatesResponse)
  return target;
}

::size_t FundingRatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.FundingRatesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.FundingRate funding_rates = 1 [json_name = "fundingRates"];
  total_size += 1UL * this->_internal_funding_rates_size();
  for (const auto& msg : this->_internal_funding_rates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundingRatesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundingRatesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundingRatesResponse::GetClassData() const { return &_class_data_; }


void FundingRatesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundingRatesResponse*>(&to_msg);
  auto& from = static_cast<const FundingRatesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.FundingRatesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_funding_rates()->MergeFrom(from._internal_funding_rates());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_derivative_exchange_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundingRatesResponse::CopyFrom(const FundingRatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.FundingRatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingRatesResponse::IsInitialized() const {
  return true;
}

void FundingRatesResponse::InternalSwap(FundingRatesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_funding_rates()->InternalSwap(other->_internal_mutable_funding_rates());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingRatesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[50]);
}
// ===================================================================

class FundingRate::_Internal {
 public:
};

FundingRate::FundingRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.FundingRate)
}
FundingRate::FundingRate(const FundingRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FundingRate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.rate_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rate().empty()) {
    _this->_impl_.rate_.Set(from._internal_rate(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.FundingRate)
}

inline void FundingRate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.rate_) {}

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FundingRate::~FundingRate() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.FundingRate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FundingRate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.rate_.Destroy();
}

void FundingRate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FundingRate::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.FundingRate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.rate_.ClearToEmpty();
  _impl_.timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FundingRate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingRate.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string rate = 2 [json_name = "rate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.FundingRate.rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FundingRate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.FundingRate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingRate.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string rate = 2 [json_name = "rate"];
  if (!this->_internal_rate().empty()) {
    const std::string& _s = this->_internal_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.FundingRate.rate");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.FundingRate)
  return target;
}

::size_t FundingRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.FundingRate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string rate = 2 [json_name = "rate"];
  if (!this->_internal_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_rate());
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FundingRate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FundingRate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FundingRate::GetClassData() const { return &_class_data_; }


void FundingRate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FundingRate*>(&to_msg);
  auto& from = static_cast<const FundingRate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.FundingRate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_rate().empty()) {
    _this->_internal_set_rate(from._internal_rate());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FundingRate::CopyFrom(const FundingRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.FundingRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingRate::IsInitialized() const {
  return true;
}

void FundingRate::InternalSwap(FundingRate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rate_, lhs_arena,
                                       &other->_impl_.rate_, rhs_arena);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingRate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[51]);
}
// ===================================================================

class StreamPositionsRequest::_Internal {
 public:
};

StreamPositionsRequest::StreamPositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamPositionsRequest)
}
StreamPositionsRequest::StreamPositionsRequest(const StreamPositionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamPositionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_ids_){from._impl_.subaccount_ids_}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamPositionsRequest)
}

inline void StreamPositionsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_ids_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamPositionsRequest::~StreamPositionsRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamPositionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamPositionsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _internal_mutable_subaccount_ids()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void StreamPositionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamPositionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamPositionsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_mutable_subaccount_ids()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPositionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamPositionsRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamPositionsRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 3 [json_name = "marketIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamPositionsRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string subaccount_ids = 4 [json_name = "subaccountIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subaccount_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamPositionsRequest.subaccount_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamPositionsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamPositionsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamPositionsRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamPositionsRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string market_ids = 3 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamPositionsRequest.market_ids");
    target = stream->WriteString(3, s, target);
  }

  // repeated string subaccount_ids = 4 [json_name = "subaccountIds"];
  for (int i = 0, n = this->_internal_subaccount_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_subaccount_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamPositionsRequest.subaccount_ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamPositionsRequest)
  return target;
}

::size_t StreamPositionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamPositionsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 3 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // repeated string subaccount_ids = 4 [json_name = "subaccountIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_subaccount_ids().size());
  for (int i = 0, n = _internal_subaccount_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_subaccount_ids().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamPositionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamPositionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamPositionsRequest::GetClassData() const { return &_class_data_; }


void StreamPositionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamPositionsRequest*>(&to_msg);
  auto& from = static_cast<const StreamPositionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamPositionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_mutable_subaccount_ids()->MergeFrom(from._internal_subaccount_ids());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamPositionsRequest::CopyFrom(const StreamPositionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamPositionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPositionsRequest::IsInitialized() const {
  return true;
}

void StreamPositionsRequest::InternalSwap(StreamPositionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  _internal_mutable_subaccount_ids()->InternalSwap(
      other->_internal_mutable_subaccount_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPositionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[52]);
}
// ===================================================================

class StreamPositionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamPositionsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamPositionsResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativePosition& position(const StreamPositionsResponse* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativePosition&
StreamPositionsResponse::_Internal::position(const StreamPositionsResponse* msg) {
  return *msg->_impl_.position_;
}
StreamPositionsResponse::StreamPositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamPositionsResponse)
}
StreamPositionsResponse::StreamPositionsResponse(const StreamPositionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamPositionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::injective_derivative_exchange_rpc::DerivativePosition(*from._impl_.position_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamPositionsResponse)
}

inline void StreamPositionsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
}

StreamPositionsResponse::~StreamPositionsResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamPositionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamPositionsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void StreamPositionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamPositionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamPositionsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPositionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativePosition position = 1 [json_name = "position"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamPositionsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamPositionsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativePosition position = 1 [json_name = "position"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // sint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamPositionsResponse)
  return target;
}

::size_t StreamPositionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamPositionsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .injective_derivative_exchange_rpc.DerivativePosition position = 1 [json_name = "position"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // sint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamPositionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamPositionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamPositionsResponse::GetClassData() const { return &_class_data_; }


void StreamPositionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamPositionsResponse*>(&to_msg);
  auto& from = static_cast<const StreamPositionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamPositionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position()->::injective_derivative_exchange_rpc::DerivativePosition::MergeFrom(
        from._internal_position());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamPositionsResponse::CopyFrom(const StreamPositionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamPositionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPositionsResponse::IsInitialized() const {
  return true;
}

void StreamPositionsResponse::InternalSwap(StreamPositionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamPositionsResponse, _impl_.timestamp_)
      + sizeof(StreamPositionsResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamPositionsResponse, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPositionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[53]);
}
// ===================================================================

class StreamOrdersRequest::_Internal {
 public:
};

StreamOrdersRequest::StreamOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrdersRequest)
}
StreamOrdersRequest::StreamOrdersRequest(const StreamOrdersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrdersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.order_side_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.is_conditional_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.start_time_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.limit_) {}

    , decltype(_impl_.include_inactive_) {}

    , decltype(_impl_.subaccount_total_orders_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.order_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_side().empty()) {
    _this->_impl_.order_side_.Set(from._internal_order_side(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.is_conditional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.is_conditional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_is_conditional().empty()) {
    _this->_impl_.is_conditional_.Set(from._internal_is_conditional(), _this->GetArenaForAllocation());
  }
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_type().empty()) {
    _this->_impl_.order_type_.Set(from._internal_order_type(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.subaccount_total_orders_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.subaccount_total_orders_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrdersRequest)
}

inline void StreamOrdersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.order_side_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.is_conditional_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.start_time_) { ::int64_t{0} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , decltype(_impl_.include_inactive_) { false }

    , decltype(_impl_.subaccount_total_orders_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.is_conditional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.is_conditional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOrdersRequest::~StreamOrdersRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrdersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrdersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  _impl_.order_side_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.is_conditional_.Destroy();
  _impl_.order_type_.Destroy();
}

void StreamOrdersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrdersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.order_side_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.is_conditional_.ClearToEmpty();
  _impl_.order_type_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.subaccount_total_orders_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.subaccount_total_orders_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrdersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_side = 2 [json_name = "orderSide"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_order_side();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersRequest.order_side"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 3 [json_name = "subaccountId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 4 [json_name = "skip"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 5 [json_name = "limit"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 start_time = 6 [json_name = "startTime"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_time = 7 [json_name = "endTime"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 8 [json_name = "marketIds"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string is_conditional = 9 [json_name = "isConditional"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_is_conditional();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersRequest.is_conditional"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_type = 10 [json_name = "orderType"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_order_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersRequest.order_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool include_inactive = 11 [json_name = "includeInactive"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.include_inactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool subaccount_total_orders = 12 [json_name = "subaccountTotalOrders"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.subaccount_total_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrdersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrdersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string order_side = 2 [json_name = "orderSide"];
  if (!this->_internal_order_side().empty()) {
    const std::string& _s = this->_internal_order_side();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersRequest.order_side");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_skip(), target);
  }

  // sint32 limit = 5 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        5, this->_internal_limit(), target);
  }

  // sint64 start_time = 6 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        6, this->_internal_start_time(), target);
  }

  // sint64 end_time = 7 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_end_time(), target);
  }

  // repeated string market_ids = 8 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersRequest.market_ids");
    target = stream->WriteString(8, s, target);
  }

  // string is_conditional = 9 [json_name = "isConditional"];
  if (!this->_internal_is_conditional().empty()) {
    const std::string& _s = this->_internal_is_conditional();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersRequest.is_conditional");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string order_type = 10 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    const std::string& _s = this->_internal_order_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersRequest.order_type");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // bool include_inactive = 11 [json_name = "includeInactive"];
  if (this->_internal_include_inactive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_include_inactive(), target);
  }

  // bool subaccount_total_orders = 12 [json_name = "subaccountTotalOrders"];
  if (this->_internal_subaccount_total_orders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_subaccount_total_orders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrdersRequest)
  return target;
}

::size_t StreamOrdersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrdersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 8 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string order_side = 2 [json_name = "orderSide"];
  if (!this->_internal_order_side().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_side());
  }

  // string subaccount_id = 3 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string is_conditional = 9 [json_name = "isConditional"];
  if (!this->_internal_is_conditional().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_is_conditional());
  }

  // string order_type = 10 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_type());
  }

  // uint64 skip = 4 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 start_time = 6 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_start_time());
  }

  // sint64 end_time = 7 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_time());
  }

  // sint32 limit = 5 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  // bool include_inactive = 11 [json_name = "includeInactive"];
  if (this->_internal_include_inactive() != 0) {
    total_size += 2;
  }

  // bool subaccount_total_orders = 12 [json_name = "subaccountTotalOrders"];
  if (this->_internal_subaccount_total_orders() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrdersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrdersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrdersRequest::GetClassData() const { return &_class_data_; }


void StreamOrdersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrdersRequest*>(&to_msg);
  auto& from = static_cast<const StreamOrdersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrdersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_order_side().empty()) {
    _this->_internal_set_order_side(from._internal_order_side());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_is_conditional().empty()) {
    _this->_internal_set_is_conditional(from._internal_is_conditional());
  }
  if (!from._internal_order_type().empty()) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_include_inactive() != 0) {
    _this->_internal_set_include_inactive(from._internal_include_inactive());
  }
  if (from._internal_subaccount_total_orders() != 0) {
    _this->_internal_set_subaccount_total_orders(from._internal_subaccount_total_orders());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrdersRequest::CopyFrom(const StreamOrdersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrdersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrdersRequest::IsInitialized() const {
  return true;
}

void StreamOrdersRequest::InternalSwap(StreamOrdersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_side_, lhs_arena,
                                       &other->_impl_.order_side_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.is_conditional_, lhs_arena,
                                       &other->_impl_.is_conditional_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_type_, lhs_arena,
                                       &other->_impl_.order_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOrdersRequest, _impl_.subaccount_total_orders_)
      + sizeof(StreamOrdersRequest::_impl_.subaccount_total_orders_)
      - PROTOBUF_FIELD_OFFSET(StreamOrdersRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrdersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[54]);
}
// ===================================================================

class StreamOrdersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamOrdersResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamOrdersResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeLimitOrder& order(const StreamOrdersResponse* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeLimitOrder&
StreamOrdersResponse::_Internal::order(const StreamOrdersResponse* msg) {
  return *msg->_impl_.order_;
}
StreamOrdersResponse::StreamOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrdersResponse)
}
StreamOrdersResponse::StreamOrdersResponse(const StreamOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrdersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_type().empty()) {
    _this->_impl_.operation_type_.Set(from._internal_operation_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective_derivative_exchange_rpc::DerivativeLimitOrder(*from._impl_.order_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrdersResponse)
}

inline void StreamOrdersResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOrdersResponse::~StreamOrdersResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrdersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrdersResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void StreamOrdersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrdersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeLimitOrder order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string operation_type = 2 [json_name = "operationType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersResponse.operation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrdersResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrdersResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeLimitOrder order = 1 [json_name = "order"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    const std::string& _s = this->_internal_operation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersResponse.operation_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrdersResponse)
  return target;
}

::size_t StreamOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrdersResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation_type());
  }

  // .injective_derivative_exchange_rpc.DerivativeLimitOrder order = 1 [json_name = "order"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrdersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrdersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrdersResponse::GetClassData() const { return &_class_data_; }


void StreamOrdersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrdersResponse*>(&to_msg);
  auto& from = static_cast<const StreamOrdersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrdersResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective_derivative_exchange_rpc::DerivativeLimitOrder::MergeFrom(
        from._internal_order());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrdersResponse::CopyFrom(const StreamOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrdersResponse::IsInitialized() const {
  return true;
}

void StreamOrdersResponse::InternalSwap(StreamOrdersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, lhs_arena,
                                       &other->_impl_.operation_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOrdersResponse, _impl_.timestamp_)
      + sizeof(StreamOrdersResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamOrdersResponse, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrdersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[55]);
}
// ===================================================================

class TradesRequest::_Internal {
 public:
};

TradesRequest::TradesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.TradesRequest)
}
TradesRequest::TradesRequest(const TradesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_ids_){from._impl_.subaccount_ids_}
    , decltype(_impl_.execution_types_){from._impl_.execution_types_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.execution_side_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.start_time_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.execution_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_side().empty()) {
    _this->_impl_.execution_side_.Set(from._internal_execution_side(), _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.TradesRequest)
}

inline void TradesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_ids_){arena}
    , decltype(_impl_.execution_types_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.execution_side_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.start_time_) { ::int64_t{0} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradesRequest::~TradesRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.TradesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _internal_mutable_subaccount_ids()->~RepeatedPtrField();
  _internal_mutable_execution_types()->~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  _impl_.execution_side_.Destroy();
  _impl_.direction_.Destroy();
  _impl_.subaccount_id_.Destroy();
}

void TradesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.TradesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_mutable_subaccount_ids()->Clear();
  _internal_mutable_execution_types()->Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.execution_side_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TradesRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_side = 2 [json_name = "executionSide"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_execution_side();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TradesRequest.execution_side"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string direction = 3 [json_name = "direction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TradesRequest.direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 4 [json_name = "subaccountId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TradesRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 5 [json_name = "skip"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 6 [json_name = "limit"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 start_time = 7 [json_name = "startTime"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_time = 8 [json_name = "endTime"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 9 [json_name = "marketIds"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TradesRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string subaccount_ids = 10 [json_name = "subaccountIds"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subaccount_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TradesRequest.subaccount_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string execution_types = 11 [json_name = "executionTypes"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_execution_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.TradesRequest.execution_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TradesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.TradesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TradesRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string execution_side = 2 [json_name = "executionSide"];
  if (!this->_internal_execution_side().empty()) {
    const std::string& _s = this->_internal_execution_side();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TradesRequest.execution_side");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string direction = 3 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    const std::string& _s = this->_internal_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TradesRequest.direction");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string subaccount_id = 4 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TradesRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 skip = 5 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_skip(), target);
  }

  // sint32 limit = 6 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        6, this->_internal_limit(), target);
  }

  // sint64 start_time = 7 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_start_time(), target);
  }

  // sint64 end_time = 8 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_end_time(), target);
  }

  // repeated string market_ids = 9 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TradesRequest.market_ids");
    target = stream->WriteString(9, s, target);
  }

  // repeated string subaccount_ids = 10 [json_name = "subaccountIds"];
  for (int i = 0, n = this->_internal_subaccount_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_subaccount_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TradesRequest.subaccount_ids");
    target = stream->WriteString(10, s, target);
  }

  // repeated string execution_types = 11 [json_name = "executionTypes"];
  for (int i = 0, n = this->_internal_execution_types_size(); i < n; ++i) {
    const auto& s = this->_internal_execution_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.TradesRequest.execution_types");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.TradesRequest)
  return target;
}

::size_t TradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.TradesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 9 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // repeated string subaccount_ids = 10 [json_name = "subaccountIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_subaccount_ids().size());
  for (int i = 0, n = _internal_subaccount_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_subaccount_ids().Get(i));
  }

  // repeated string execution_types = 11 [json_name = "executionTypes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_execution_types().size());
  for (int i = 0, n = _internal_execution_types().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_execution_types().Get(i));
  }

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string execution_side = 2 [json_name = "executionSide"];
  if (!this->_internal_execution_side().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_side());
  }

  // string direction = 3 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_direction());
  }

  // string subaccount_id = 4 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // uint64 skip = 5 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 start_time = 7 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_start_time());
  }

  // sint64 end_time = 8 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_time());
  }

  // sint32 limit = 6 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradesRequest::GetClassData() const { return &_class_data_; }


void TradesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradesRequest*>(&to_msg);
  auto& from = static_cast<const TradesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.TradesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_mutable_subaccount_ids()->MergeFrom(from._internal_subaccount_ids());
  _this->_internal_mutable_execution_types()->MergeFrom(from._internal_execution_types());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_execution_side().empty()) {
    _this->_internal_set_execution_side(from._internal_execution_side());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradesRequest::CopyFrom(const TradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.TradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesRequest::IsInitialized() const {
  return true;
}

void TradesRequest::InternalSwap(TradesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  _internal_mutable_subaccount_ids()->InternalSwap(
      other->_internal_mutable_subaccount_ids());
  _internal_mutable_execution_types()->InternalSwap(
      other->_internal_mutable_execution_types());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_side_, lhs_arena,
                                       &other->_impl_.execution_side_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, lhs_arena,
                                       &other->_impl_.direction_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradesRequest, _impl_.limit_)
      + sizeof(TradesRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(TradesRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[56]);
}
// ===================================================================

class TradesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TradesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TradesResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::Paging& paging(const TradesResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::Paging&
TradesResponse::_Internal::paging(const TradesResponse* msg) {
  return *msg->_impl_.paging_;
}
TradesResponse::TradesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.TradesResponse)
}
TradesResponse::TradesResponse(const TradesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trades_){from._impl_.trades_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_derivative_exchange_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.TradesResponse)
}

inline void TradesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.trades_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

TradesResponse::~TradesResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.TradesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_trades()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void TradesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.TradesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_trades()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.DerivativeTrade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TradesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.TradesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeTrade trades = 1 [json_name = "trades"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trades_size()); i < n; i++) {
    const auto& repfield = this->_internal_trades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.TradesResponse)
  return target;
}

::size_t TradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.TradesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeTrade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->_internal_trades()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradesResponse::GetClassData() const { return &_class_data_; }


void TradesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradesResponse*>(&to_msg);
  auto& from = static_cast<const TradesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.TradesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trades()->MergeFrom(from._internal_trades());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_derivative_exchange_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradesResponse::CopyFrom(const TradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.TradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradesResponse::IsInitialized() const {
  return true;
}

void TradesResponse::InternalSwap(TradesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_trades()->InternalSwap(other->_internal_mutable_trades());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[57]);
}
// ===================================================================

class DerivativeTrade::_Internal {
 public:
  using HasBits = decltype(std::declval<DerivativeTrade>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DerivativeTrade, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::PositionDelta& position_delta(const DerivativeTrade* msg);
  static void set_has_position_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::PositionDelta&
DerivativeTrade::_Internal::position_delta(const DerivativeTrade* msg) {
  return *msg->_impl_.position_delta_;
}
DerivativeTrade::DerivativeTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.DerivativeTrade)
}
DerivativeTrade::DerivativeTrade(const DerivativeTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativeTrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.trade_execution_type_) {}

    , decltype(_impl_.payout_) {}

    , decltype(_impl_.fee_) {}

    , decltype(_impl_.fee_recipient_) {}

    , decltype(_impl_.trade_id_) {}

    , decltype(_impl_.execution_side_) {}

    , decltype(_impl_.position_delta_){nullptr}
    , decltype(_impl_.executed_at_) {}

    , decltype(_impl_.is_liquidation_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.trade_execution_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trade_execution_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_execution_type().empty()) {
    _this->_impl_.trade_execution_type_.Set(from._internal_trade_execution_type(), _this->GetArenaForAllocation());
  }
  _impl_.payout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payout_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payout().empty()) {
    _this->_impl_.payout_.Set(from._internal_payout(), _this->GetArenaForAllocation());
  }
  _impl_.fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee().empty()) {
    _this->_impl_.fee_.Set(from._internal_fee(), _this->GetArenaForAllocation());
  }
  _impl_.fee_recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fee_recipient().empty()) {
    _this->_impl_.fee_recipient_.Set(from._internal_fee_recipient(), _this->GetArenaForAllocation());
  }
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_id().empty()) {
    _this->_impl_.trade_id_.Set(from._internal_trade_id(), _this->GetArenaForAllocation());
  }
  _impl_.execution_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_side().empty()) {
    _this->_impl_.execution_side_.Set(from._internal_execution_side(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_delta_ = new ::injective_derivative_exchange_rpc::PositionDelta(*from._impl_.position_delta_);
  }
  ::memcpy(&_impl_.executed_at_, &from._impl_.executed_at_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_liquidation_) -
    reinterpret_cast<char*>(&_impl_.executed_at_)) + sizeof(_impl_.is_liquidation_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.DerivativeTrade)
}

inline void DerivativeTrade::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_hash_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.trade_execution_type_) {}

    , decltype(_impl_.payout_) {}

    , decltype(_impl_.fee_) {}

    , decltype(_impl_.fee_recipient_) {}

    , decltype(_impl_.trade_id_) {}

    , decltype(_impl_.execution_side_) {}

    , decltype(_impl_.position_delta_){nullptr}
    , decltype(_impl_.executed_at_) { ::int64_t{0} }

    , decltype(_impl_.is_liquidation_) { false }

  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trade_execution_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trade_execution_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payout_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fee_recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fee_recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DerivativeTrade::~DerivativeTrade() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.DerivativeTrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativeTrade::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.trade_execution_type_.Destroy();
  _impl_.payout_.Destroy();
  _impl_.fee_.Destroy();
  _impl_.fee_recipient_.Destroy();
  _impl_.trade_id_.Destroy();
  _impl_.execution_side_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_delta_;
}

void DerivativeTrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativeTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.DerivativeTrade)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.trade_execution_type_.ClearToEmpty();
  _impl_.payout_.ClearToEmpty();
  _impl_.fee_.ClearToEmpty();
  _impl_.fee_recipient_.ClearToEmpty();
  _impl_.trade_id_.ClearToEmpty();
  _impl_.execution_side_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_delta_ != nullptr);
    _impl_.position_delta_->Clear();
  }
  ::memset(&_impl_.executed_at_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_liquidation_) -
      reinterpret_cast<char*>(&_impl_.executed_at_)) + sizeof(_impl_.is_liquidation_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativeTrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 2 [json_name = "subaccountId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3 [json_name = "marketId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string trade_execution_type = 4 [json_name = "tradeExecutionType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_trade_execution_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.trade_execution_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_liquidation = 5 [json_name = "isLiquidation"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.is_liquidation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.PositionDelta position_delta = 6 [json_name = "positionDelta"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_delta(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string payout = 7 [json_name = "payout"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_payout();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.payout"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee = 8 [json_name = "fee"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_fee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.fee"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 executed_at = 9 [json_name = "executedAt"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.executed_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string fee_recipient = 10 [json_name = "feeRecipient"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_fee_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.fee_recipient"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string trade_id = 11 [json_name = "tradeId"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.trade_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_side = 12 [json_name = "executionSide"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_execution_side();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeTrade.execution_side"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativeTrade::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.DerivativeTrade)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.subaccount_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string trade_execution_type = 4 [json_name = "tradeExecutionType"];
  if (!this->_internal_trade_execution_type().empty()) {
    const std::string& _s = this->_internal_trade_execution_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.trade_execution_type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool is_liquidation = 5 [json_name = "isLiquidation"];
  if (this->_internal_is_liquidation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_liquidation(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.PositionDelta position_delta = 6 [json_name = "positionDelta"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::position_delta(this),
        _Internal::position_delta(this).GetCachedSize(), target, stream);
  }

  // string payout = 7 [json_name = "payout"];
  if (!this->_internal_payout().empty()) {
    const std::string& _s = this->_internal_payout();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.payout");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string fee = 8 [json_name = "fee"];
  if (!this->_internal_fee().empty()) {
    const std::string& _s = this->_internal_fee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.fee");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // sint64 executed_at = 9 [json_name = "executedAt"];
  if (this->_internal_executed_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        9, this->_internal_executed_at(), target);
  }

  // string fee_recipient = 10 [json_name = "feeRecipient"];
  if (!this->_internal_fee_recipient().empty()) {
    const std::string& _s = this->_internal_fee_recipient();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.fee_recipient");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string trade_id = 11 [json_name = "tradeId"];
  if (!this->_internal_trade_id().empty()) {
    const std::string& _s = this->_internal_trade_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.trade_id");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string execution_side = 12 [json_name = "executionSide"];
  if (!this->_internal_execution_side().empty()) {
    const std::string& _s = this->_internal_execution_side();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeTrade.execution_side");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.DerivativeTrade)
  return target;
}

::size_t DerivativeTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.DerivativeTrade)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // string subaccount_id = 2 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 3 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string trade_execution_type = 4 [json_name = "tradeExecutionType"];
  if (!this->_internal_trade_execution_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trade_execution_type());
  }

  // string payout = 7 [json_name = "payout"];
  if (!this->_internal_payout().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_payout());
  }

  // string fee = 8 [json_name = "fee"];
  if (!this->_internal_fee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee());
  }

  // string fee_recipient = 10 [json_name = "feeRecipient"];
  if (!this->_internal_fee_recipient().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_fee_recipient());
  }

  // string trade_id = 11 [json_name = "tradeId"];
  if (!this->_internal_trade_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trade_id());
  }

  // string execution_side = 12 [json_name = "executionSide"];
  if (!this->_internal_execution_side().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_side());
  }

  // .injective_derivative_exchange_rpc.PositionDelta position_delta = 6 [json_name = "positionDelta"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_delta_);
  }

  // sint64 executed_at = 9 [json_name = "executedAt"];
  if (this->_internal_executed_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_executed_at());
  }

  // bool is_liquidation = 5 [json_name = "isLiquidation"];
  if (this->_internal_is_liquidation() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativeTrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativeTrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativeTrade::GetClassData() const { return &_class_data_; }


void DerivativeTrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativeTrade*>(&to_msg);
  auto& from = static_cast<const DerivativeTrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.DerivativeTrade)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_trade_execution_type().empty()) {
    _this->_internal_set_trade_execution_type(from._internal_trade_execution_type());
  }
  if (!from._internal_payout().empty()) {
    _this->_internal_set_payout(from._internal_payout());
  }
  if (!from._internal_fee().empty()) {
    _this->_internal_set_fee(from._internal_fee());
  }
  if (!from._internal_fee_recipient().empty()) {
    _this->_internal_set_fee_recipient(from._internal_fee_recipient());
  }
  if (!from._internal_trade_id().empty()) {
    _this->_internal_set_trade_id(from._internal_trade_id());
  }
  if (!from._internal_execution_side().empty()) {
    _this->_internal_set_execution_side(from._internal_execution_side());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position_delta()->::injective_derivative_exchange_rpc::PositionDelta::MergeFrom(
        from._internal_position_delta());
  }
  if (from._internal_executed_at() != 0) {
    _this->_internal_set_executed_at(from._internal_executed_at());
  }
  if (from._internal_is_liquidation() != 0) {
    _this->_internal_set_is_liquidation(from._internal_is_liquidation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativeTrade::CopyFrom(const DerivativeTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.DerivativeTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativeTrade::IsInitialized() const {
  return true;
}

void DerivativeTrade::InternalSwap(DerivativeTrade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trade_execution_type_, lhs_arena,
                                       &other->_impl_.trade_execution_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payout_, lhs_arena,
                                       &other->_impl_.payout_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_, lhs_arena,
                                       &other->_impl_.fee_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fee_recipient_, lhs_arena,
                                       &other->_impl_.fee_recipient_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trade_id_, lhs_arena,
                                       &other->_impl_.trade_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_side_, lhs_arena,
                                       &other->_impl_.execution_side_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DerivativeTrade, _impl_.is_liquidation_)
      + sizeof(DerivativeTrade::_impl_.is_liquidation_)
      - PROTOBUF_FIELD_OFFSET(DerivativeTrade, _impl_.position_delta_)>(
          reinterpret_cast<char*>(&_impl_.position_delta_),
          reinterpret_cast<char*>(&other->_impl_.position_delta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativeTrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[58]);
}
// ===================================================================

class PositionDelta::_Internal {
 public:
};

PositionDelta::PositionDelta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.PositionDelta)
}
PositionDelta::PositionDelta(const PositionDelta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PositionDelta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_direction_) {}

    , decltype(_impl_.execution_price_) {}

    , decltype(_impl_.execution_quantity_) {}

    , decltype(_impl_.execution_margin_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trade_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trade_direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trade_direction().empty()) {
    _this->_impl_.trade_direction_.Set(from._internal_trade_direction(), _this->GetArenaForAllocation());
  }
  _impl_.execution_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_price().empty()) {
    _this->_impl_.execution_price_.Set(from._internal_execution_price(), _this->GetArenaForAllocation());
  }
  _impl_.execution_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_quantity().empty()) {
    _this->_impl_.execution_quantity_.Set(from._internal_execution_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.execution_margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_margin().empty()) {
    _this->_impl_.execution_margin_.Set(from._internal_execution_margin(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.PositionDelta)
}

inline void PositionDelta::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.trade_direction_) {}

    , decltype(_impl_.execution_price_) {}

    , decltype(_impl_.execution_quantity_) {}

    , decltype(_impl_.execution_margin_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trade_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trade_direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PositionDelta::~PositionDelta() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.PositionDelta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionDelta::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trade_direction_.Destroy();
  _impl_.execution_price_.Destroy();
  _impl_.execution_quantity_.Destroy();
  _impl_.execution_margin_.Destroy();
}

void PositionDelta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionDelta::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.PositionDelta)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trade_direction_.ClearToEmpty();
  _impl_.execution_price_.ClearToEmpty();
  _impl_.execution_quantity_.ClearToEmpty();
  _impl_.execution_margin_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionDelta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trade_direction = 1 [json_name = "tradeDirection"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trade_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PositionDelta.trade_direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_price = 2 [json_name = "executionPrice"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_execution_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PositionDelta.execution_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_quantity = 3 [json_name = "executionQuantity"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_execution_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PositionDelta.execution_quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_margin = 4 [json_name = "executionMargin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_execution_margin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.PositionDelta.execution_margin"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PositionDelta::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.PositionDelta)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trade_direction = 1 [json_name = "tradeDirection"];
  if (!this->_internal_trade_direction().empty()) {
    const std::string& _s = this->_internal_trade_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PositionDelta.trade_direction");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string execution_price = 2 [json_name = "executionPrice"];
  if (!this->_internal_execution_price().empty()) {
    const std::string& _s = this->_internal_execution_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PositionDelta.execution_price");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string execution_quantity = 3 [json_name = "executionQuantity"];
  if (!this->_internal_execution_quantity().empty()) {
    const std::string& _s = this->_internal_execution_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PositionDelta.execution_quantity");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string execution_margin = 4 [json_name = "executionMargin"];
  if (!this->_internal_execution_margin().empty()) {
    const std::string& _s = this->_internal_execution_margin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.PositionDelta.execution_margin");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.PositionDelta)
  return target;
}

::size_t PositionDelta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.PositionDelta)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trade_direction = 1 [json_name = "tradeDirection"];
  if (!this->_internal_trade_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trade_direction());
  }

  // string execution_price = 2 [json_name = "executionPrice"];
  if (!this->_internal_execution_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_price());
  }

  // string execution_quantity = 3 [json_name = "executionQuantity"];
  if (!this->_internal_execution_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_quantity());
  }

  // string execution_margin = 4 [json_name = "executionMargin"];
  if (!this->_internal_execution_margin().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_margin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionDelta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionDelta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionDelta::GetClassData() const { return &_class_data_; }


void PositionDelta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionDelta*>(&to_msg);
  auto& from = static_cast<const PositionDelta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.PositionDelta)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trade_direction().empty()) {
    _this->_internal_set_trade_direction(from._internal_trade_direction());
  }
  if (!from._internal_execution_price().empty()) {
    _this->_internal_set_execution_price(from._internal_execution_price());
  }
  if (!from._internal_execution_quantity().empty()) {
    _this->_internal_set_execution_quantity(from._internal_execution_quantity());
  }
  if (!from._internal_execution_margin().empty()) {
    _this->_internal_set_execution_margin(from._internal_execution_margin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionDelta::CopyFrom(const PositionDelta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.PositionDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionDelta::IsInitialized() const {
  return true;
}

void PositionDelta::InternalSwap(PositionDelta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trade_direction_, lhs_arena,
                                       &other->_impl_.trade_direction_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_price_, lhs_arena,
                                       &other->_impl_.execution_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_quantity_, lhs_arena,
                                       &other->_impl_.execution_quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_margin_, lhs_arena,
                                       &other->_impl_.execution_margin_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionDelta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[59]);
}
// ===================================================================

class StreamTradesRequest::_Internal {
 public:
};

StreamTradesRequest::StreamTradesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamTradesRequest)
}
StreamTradesRequest::StreamTradesRequest(const StreamTradesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamTradesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){from._impl_.market_ids_}
    , decltype(_impl_.subaccount_ids_){from._impl_.subaccount_ids_}
    , decltype(_impl_.execution_types_){from._impl_.execution_types_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.execution_side_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.start_time_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.execution_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_side().empty()) {
    _this->_impl_.execution_side_.Set(from._internal_execution_side(), _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamTradesRequest)
}

inline void StreamTradesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_ids_){arena}
    , decltype(_impl_.subaccount_ids_){arena}
    , decltype(_impl_.execution_types_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.execution_side_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.start_time_) { ::int64_t{0} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_side_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_side_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamTradesRequest::~StreamTradesRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamTradesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamTradesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_ids()->~RepeatedPtrField();
  _internal_mutable_subaccount_ids()->~RepeatedPtrField();
  _internal_mutable_execution_types()->~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  _impl_.execution_side_.Destroy();
  _impl_.direction_.Destroy();
  _impl_.subaccount_id_.Destroy();
}

void StreamTradesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamTradesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_ids()->Clear();
  _internal_mutable_subaccount_ids()->Clear();
  _internal_mutable_execution_types()->Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.execution_side_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamTradesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1 [json_name = "marketId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamTradesRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_side = 2 [json_name = "executionSide"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_execution_side();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamTradesRequest.execution_side"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string direction = 3 [json_name = "direction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamTradesRequest.direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 4 [json_name = "subaccountId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamTradesRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 5 [json_name = "skip"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 6 [json_name = "limit"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 start_time = 7 [json_name = "startTime"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_time = 8 [json_name = "endTime"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string market_ids = 9 [json_name = "marketIds"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_market_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamTradesRequest.market_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string subaccount_ids = 10 [json_name = "subaccountIds"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subaccount_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamTradesRequest.subaccount_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string execution_types = 11 [json_name = "executionTypes"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_execution_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamTradesRequest.execution_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamTradesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamTradesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamTradesRequest.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string execution_side = 2 [json_name = "executionSide"];
  if (!this->_internal_execution_side().empty()) {
    const std::string& _s = this->_internal_execution_side();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamTradesRequest.execution_side");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string direction = 3 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    const std::string& _s = this->_internal_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamTradesRequest.direction");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string subaccount_id = 4 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamTradesRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 skip = 5 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_skip(), target);
  }

  // sint32 limit = 6 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        6, this->_internal_limit(), target);
  }

  // sint64 start_time = 7 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_start_time(), target);
  }

  // sint64 end_time = 8 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_end_time(), target);
  }

  // repeated string market_ids = 9 [json_name = "marketIds"];
  for (int i = 0, n = this->_internal_market_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_market_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamTradesRequest.market_ids");
    target = stream->WriteString(9, s, target);
  }

  // repeated string subaccount_ids = 10 [json_name = "subaccountIds"];
  for (int i = 0, n = this->_internal_subaccount_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_subaccount_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamTradesRequest.subaccount_ids");
    target = stream->WriteString(10, s, target);
  }

  // repeated string execution_types = 11 [json_name = "executionTypes"];
  for (int i = 0, n = this->_internal_execution_types_size(); i < n; ++i) {
    const auto& s = this->_internal_execution_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamTradesRequest.execution_types");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamTradesRequest)
  return target;
}

::size_t StreamTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamTradesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string market_ids = 9 [json_name = "marketIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_market_ids().size());
  for (int i = 0, n = _internal_market_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_market_ids().Get(i));
  }

  // repeated string subaccount_ids = 10 [json_name = "subaccountIds"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_subaccount_ids().size());
  for (int i = 0, n = _internal_subaccount_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_subaccount_ids().Get(i));
  }

  // repeated string execution_types = 11 [json_name = "executionTypes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_execution_types().size());
  for (int i = 0, n = _internal_execution_types().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_execution_types().Get(i));
  }

  // string market_id = 1 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string execution_side = 2 [json_name = "executionSide"];
  if (!this->_internal_execution_side().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_side());
  }

  // string direction = 3 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_direction());
  }

  // string subaccount_id = 4 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // uint64 skip = 5 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 start_time = 7 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_start_time());
  }

  // sint64 end_time = 8 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_time());
  }

  // sint32 limit = 6 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamTradesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamTradesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamTradesRequest::GetClassData() const { return &_class_data_; }


void StreamTradesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamTradesRequest*>(&to_msg);
  auto& from = static_cast<const StreamTradesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamTradesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_ids()->MergeFrom(from._internal_market_ids());
  _this->_internal_mutable_subaccount_ids()->MergeFrom(from._internal_subaccount_ids());
  _this->_internal_mutable_execution_types()->MergeFrom(from._internal_execution_types());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_execution_side().empty()) {
    _this->_internal_set_execution_side(from._internal_execution_side());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamTradesRequest::CopyFrom(const StreamTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTradesRequest::IsInitialized() const {
  return true;
}

void StreamTradesRequest::InternalSwap(StreamTradesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_ids()->InternalSwap(
      other->_internal_mutable_market_ids());
  _internal_mutable_subaccount_ids()->InternalSwap(
      other->_internal_mutable_subaccount_ids());
  _internal_mutable_execution_types()->InternalSwap(
      other->_internal_mutable_execution_types());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_side_, lhs_arena,
                                       &other->_impl_.execution_side_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, lhs_arena,
                                       &other->_impl_.direction_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamTradesRequest, _impl_.limit_)
      + sizeof(StreamTradesRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(StreamTradesRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamTradesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[60]);
}
// ===================================================================

class StreamTradesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamTradesResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamTradesResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeTrade& trade(const StreamTradesResponse* msg);
  static void set_has_trade(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeTrade&
StreamTradesResponse::_Internal::trade(const StreamTradesResponse* msg) {
  return *msg->_impl_.trade_;
}
StreamTradesResponse::StreamTradesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamTradesResponse)
}
StreamTradesResponse::StreamTradesResponse(const StreamTradesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamTradesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.trade_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_type().empty()) {
    _this->_impl_.operation_type_.Set(from._internal_operation_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.trade_ = new ::injective_derivative_exchange_rpc::DerivativeTrade(*from._impl_.trade_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamTradesResponse)
}

inline void StreamTradesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.trade_){nullptr}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamTradesResponse::~StreamTradesResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamTradesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamTradesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trade_;
}

void StreamTradesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamTradesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.trade_ != nullptr);
    _impl_.trade_->Clear();
  }
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamTradesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeTrade trade = 1 [json_name = "trade"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string operation_type = 2 [json_name = "operationType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamTradesResponse.operation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamTradesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamTradesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeTrade trade = 1 [json_name = "trade"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trade(this),
        _Internal::trade(this).GetCachedSize(), target, stream);
  }

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    const std::string& _s = this->_internal_operation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamTradesResponse.operation_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamTradesResponse)
  return target;
}

::size_t StreamTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamTradesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation_type());
  }

  // .injective_derivative_exchange_rpc.DerivativeTrade trade = 1 [json_name = "trade"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trade_);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamTradesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamTradesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamTradesResponse::GetClassData() const { return &_class_data_; }


void StreamTradesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamTradesResponse*>(&to_msg);
  auto& from = static_cast<const StreamTradesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamTradesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_trade()->::injective_derivative_exchange_rpc::DerivativeTrade::MergeFrom(
        from._internal_trade());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamTradesResponse::CopyFrom(const StreamTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTradesResponse::IsInitialized() const {
  return true;
}

void StreamTradesResponse::InternalSwap(StreamTradesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, lhs_arena,
                                       &other->_impl_.operation_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamTradesResponse, _impl_.timestamp_)
      + sizeof(StreamTradesResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamTradesResponse, _impl_.trade_)>(
          reinterpret_cast<char*>(&_impl_.trade_),
          reinterpret_cast<char*>(&other->_impl_.trade_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamTradesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[61]);
}
// ===================================================================

class SubaccountOrdersListRequest::_Internal {
 public:
};

SubaccountOrdersListRequest::SubaccountOrdersListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
}
SubaccountOrdersListRequest::SubaccountOrdersListRequest(const SubaccountOrdersListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubaccountOrdersListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
}

inline void SubaccountOrdersListRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubaccountOrdersListRequest::~SubaccountOrdersListRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountOrdersListRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void SubaccountOrdersListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountOrdersListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountOrdersListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.SubaccountOrdersListRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.SubaccountOrdersListRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 3 [json_name = "skip"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 4 [json_name = "limit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubaccountOrdersListRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.SubaccountOrdersListRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.SubaccountOrdersListRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_skip(), target);
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
  return target;
}

::size_t SubaccountOrdersListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountOrdersListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountOrdersListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountOrdersListRequest::GetClassData() const { return &_class_data_; }


void SubaccountOrdersListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountOrdersListRequest*>(&to_msg);
  auto& from = static_cast<const SubaccountOrdersListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountOrdersListRequest::CopyFrom(const SubaccountOrdersListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.SubaccountOrdersListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountOrdersListRequest::IsInitialized() const {
  return true;
}

void SubaccountOrdersListRequest::InternalSwap(SubaccountOrdersListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubaccountOrdersListRequest, _impl_.limit_)
      + sizeof(SubaccountOrdersListRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(SubaccountOrdersListRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountOrdersListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[62]);
}
// ===================================================================

class SubaccountOrdersListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SubaccountOrdersListResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SubaccountOrdersListResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::Paging& paging(const SubaccountOrdersListResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::Paging&
SubaccountOrdersListResponse::_Internal::paging(const SubaccountOrdersListResponse* msg) {
  return *msg->_impl_.paging_;
}
SubaccountOrdersListResponse::SubaccountOrdersListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
}
SubaccountOrdersListResponse::SubaccountOrdersListResponse(const SubaccountOrdersListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubaccountOrdersListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orders_){from._impl_.orders_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_derivative_exchange_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
}

inline void SubaccountOrdersListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orders_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

SubaccountOrdersListResponse::~SubaccountOrdersListResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountOrdersListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void SubaccountOrdersListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountOrdersListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountOrdersListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.DerivativeLimitOrder orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubaccountOrdersListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeLimitOrder orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
  return target;
}

::size_t SubaccountOrdersListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeLimitOrder orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountOrdersListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountOrdersListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountOrdersListResponse::GetClassData() const { return &_class_data_; }


void SubaccountOrdersListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountOrdersListResponse*>(&to_msg);
  auto& from = static_cast<const SubaccountOrdersListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_derivative_exchange_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountOrdersListResponse::CopyFrom(const SubaccountOrdersListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.SubaccountOrdersListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountOrdersListResponse::IsInitialized() const {
  return true;
}

void SubaccountOrdersListResponse::InternalSwap(SubaccountOrdersListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountOrdersListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[63]);
}
// ===================================================================

class SubaccountTradesListRequest::_Internal {
 public:
};

SubaccountTradesListRequest::SubaccountTradesListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
}
SubaccountTradesListRequest::SubaccountTradesListRequest(const SubaccountTradesListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubaccountTradesListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.execution_type_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.execution_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_type().empty()) {
    _this->_impl_.execution_type_.Set(from._internal_execution_type(), _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
}

inline void SubaccountTradesListRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.execution_type_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubaccountTradesListRequest::~SubaccountTradesListRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountTradesListRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.execution_type_.Destroy();
  _impl_.direction_.Destroy();
}

void SubaccountTradesListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountTradesListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.execution_type_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountTradesListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.SubaccountTradesListRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.SubaccountTradesListRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_type = 3 [json_name = "executionType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_execution_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.SubaccountTradesListRequest.execution_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string direction = 4 [json_name = "direction"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.SubaccountTradesListRequest.direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 5 [json_name = "skip"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 6 [json_name = "limit"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubaccountTradesListRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.SubaccountTradesListRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.SubaccountTradesListRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string execution_type = 3 [json_name = "executionType"];
  if (!this->_internal_execution_type().empty()) {
    const std::string& _s = this->_internal_execution_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.SubaccountTradesListRequest.execution_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string direction = 4 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    const std::string& _s = this->_internal_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.SubaccountTradesListRequest.direction");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 skip = 5 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_skip(), target);
  }

  // sint32 limit = 6 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        6, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
  return target;
}

::size_t SubaccountTradesListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string execution_type = 3 [json_name = "executionType"];
  if (!this->_internal_execution_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_type());
  }

  // string direction = 4 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_direction());
  }

  // uint64 skip = 5 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint32 limit = 6 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountTradesListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountTradesListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountTradesListRequest::GetClassData() const { return &_class_data_; }


void SubaccountTradesListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountTradesListRequest*>(&to_msg);
  auto& from = static_cast<const SubaccountTradesListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_execution_type().empty()) {
    _this->_internal_set_execution_type(from._internal_execution_type());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountTradesListRequest::CopyFrom(const SubaccountTradesListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.SubaccountTradesListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountTradesListRequest::IsInitialized() const {
  return true;
}

void SubaccountTradesListRequest::InternalSwap(SubaccountTradesListRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_type_, lhs_arena,
                                       &other->_impl_.execution_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, lhs_arena,
                                       &other->_impl_.direction_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubaccountTradesListRequest, _impl_.limit_)
      + sizeof(SubaccountTradesListRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(SubaccountTradesListRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountTradesListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[64]);
}
// ===================================================================

class SubaccountTradesListResponse::_Internal {
 public:
};

SubaccountTradesListResponse::SubaccountTradesListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
}
SubaccountTradesListResponse::SubaccountTradesListResponse(const SubaccountTradesListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubaccountTradesListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){from._impl_.trades_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
}

inline void SubaccountTradesListResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.trades_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubaccountTradesListResponse::~SubaccountTradesListResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountTradesListResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_trades()->~RepeatedPtrField();
}

void SubaccountTradesListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountTradesListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_trades()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountTradesListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.DerivativeTrade trades = 1 [json_name = "trades"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubaccountTradesListResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeTrade trades = 1 [json_name = "trades"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trades_size()); i < n; i++) {
    const auto& repfield = this->_internal_trades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
  return target;
}

::size_t SubaccountTradesListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeTrade trades = 1 [json_name = "trades"];
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->_internal_trades()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountTradesListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountTradesListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountTradesListResponse::GetClassData() const { return &_class_data_; }


void SubaccountTradesListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountTradesListResponse*>(&to_msg);
  auto& from = static_cast<const SubaccountTradesListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trades()->MergeFrom(from._internal_trades());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountTradesListResponse::CopyFrom(const SubaccountTradesListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.SubaccountTradesListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountTradesListResponse::IsInitialized() const {
  return true;
}

void SubaccountTradesListResponse::InternalSwap(SubaccountTradesListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_trades()->InternalSwap(other->_internal_mutable_trades());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountTradesListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[65]);
}
// ===================================================================

class OrdersHistoryRequest::_Internal {
 public:
};

OrdersHistoryRequest::OrdersHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrdersHistoryRequest)
}
OrdersHistoryRequest::OrdersHistoryRequest(const OrdersHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrdersHistoryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_types_){from._impl_.order_types_}
    , decltype(_impl_.execution_types_){from._impl_.execution_types_}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.is_conditional_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.skip_) {}

    , decltype(_impl_.start_time_) {}

    , decltype(_impl_.end_time_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), _this->GetArenaForAllocation());
  }
  _impl_.is_conditional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.is_conditional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_is_conditional().empty()) {
    _this->_impl_.is_conditional_.Set(from._internal_is_conditional(), _this->GetArenaForAllocation());
  }
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_type().empty()) {
    _this->_impl_.order_type_.Set(from._internal_order_type(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.skip_, &from._impl_.skip_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrdersHistoryRequest)
}

inline void OrdersHistoryRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_types_){arena}
    , decltype(_impl_.execution_types_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.is_conditional_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.skip_) { ::uint64_t{0u} }

    , decltype(_impl_.start_time_) { ::int64_t{0} }

    , decltype(_impl_.end_time_) { ::int64_t{0} }

    , decltype(_impl_.limit_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.is_conditional_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.is_conditional_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrdersHistoryRequest::~OrdersHistoryRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrdersHistoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrdersHistoryRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_order_types()->~RepeatedPtrField();
  _internal_mutable_execution_types()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.direction_.Destroy();
  _impl_.is_conditional_.Destroy();
  _impl_.order_type_.Destroy();
  _impl_.state_.Destroy();
}

void OrdersHistoryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrdersHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrdersHistoryRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_order_types()->Clear();
  _internal_mutable_execution_types()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  _impl_.is_conditional_.ClearToEmpty();
  _impl_.order_type_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  ::memset(&_impl_.skip_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.skip_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersHistoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersHistoryRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersHistoryRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 skip = 3 [json_name = "skip"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.skip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 limit = 4 [json_name = "limit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string order_types = 5 [json_name = "orderTypes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_order_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersHistoryRequest.order_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string direction = 6 [json_name = "direction"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersHistoryRequest.direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 start_time = 7 [json_name = "startTime"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 end_time = 8 [json_name = "endTime"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string is_conditional = 9 [json_name = "isConditional"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_is_conditional();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersHistoryRequest.is_conditional"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_type = 10 [json_name = "orderType"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_order_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersHistoryRequest.order_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string state = 11 [json_name = "state"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersHistoryRequest.state"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string execution_types = 12 [json_name = "executionTypes"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_execution_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.OrdersHistoryRequest.execution_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrdersHistoryRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrdersHistoryRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersHistoryRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersHistoryRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_skip(), target);
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_limit(), target);
  }

  // repeated string order_types = 5 [json_name = "orderTypes"];
  for (int i = 0, n = this->_internal_order_types_size(); i < n; ++i) {
    const auto& s = this->_internal_order_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersHistoryRequest.order_types");
    target = stream->WriteString(5, s, target);
  }

  // string direction = 6 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    const std::string& _s = this->_internal_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersHistoryRequest.direction");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // sint64 start_time = 7 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        7, this->_internal_start_time(), target);
  }

  // sint64 end_time = 8 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        8, this->_internal_end_time(), target);
  }

  // string is_conditional = 9 [json_name = "isConditional"];
  if (!this->_internal_is_conditional().empty()) {
    const std::string& _s = this->_internal_is_conditional();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersHistoryRequest.is_conditional");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string order_type = 10 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    const std::string& _s = this->_internal_order_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersHistoryRequest.order_type");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string state = 11 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersHistoryRequest.state");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // repeated string execution_types = 12 [json_name = "executionTypes"];
  for (int i = 0, n = this->_internal_execution_types_size(); i < n; ++i) {
    const auto& s = this->_internal_execution_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.OrdersHistoryRequest.execution_types");
    target = stream->WriteString(12, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrdersHistoryRequest)
  return target;
}

::size_t OrdersHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrdersHistoryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string order_types = 5 [json_name = "orderTypes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_order_types().size());
  for (int i = 0, n = _internal_order_types().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_order_types().Get(i));
  }

  // repeated string execution_types = 12 [json_name = "executionTypes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_execution_types().size());
  for (int i = 0, n = _internal_execution_types().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_execution_types().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string direction = 6 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_direction());
  }

  // string is_conditional = 9 [json_name = "isConditional"];
  if (!this->_internal_is_conditional().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_is_conditional());
  }

  // string order_type = 10 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_type());
  }

  // string state = 11 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  // uint64 skip = 3 [json_name = "skip"];
  if (this->_internal_skip() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_skip());
  }

  // sint64 start_time = 7 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_start_time());
  }

  // sint64 end_time = 8 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_end_time());
  }

  // sint32 limit = 4 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrdersHistoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrdersHistoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrdersHistoryRequest::GetClassData() const { return &_class_data_; }


void OrdersHistoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrdersHistoryRequest*>(&to_msg);
  auto& from = static_cast<const OrdersHistoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrdersHistoryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_order_types()->MergeFrom(from._internal_order_types());
  _this->_internal_mutable_execution_types()->MergeFrom(from._internal_execution_types());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (!from._internal_is_conditional().empty()) {
    _this->_internal_set_is_conditional(from._internal_is_conditional());
  }
  if (!from._internal_order_type().empty()) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_skip() != 0) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrdersHistoryRequest::CopyFrom(const OrdersHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrdersHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersHistoryRequest::IsInitialized() const {
  return true;
}

void OrdersHistoryRequest::InternalSwap(OrdersHistoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_order_types()->InternalSwap(
      other->_internal_mutable_order_types());
  _internal_mutable_execution_types()->InternalSwap(
      other->_internal_mutable_execution_types());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, lhs_arena,
                                       &other->_impl_.direction_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.is_conditional_, lhs_arena,
                                       &other->_impl_.is_conditional_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_type_, lhs_arena,
                                       &other->_impl_.order_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrdersHistoryRequest, _impl_.limit_)
      + sizeof(OrdersHistoryRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(OrdersHistoryRequest, _impl_.skip_)>(
          reinterpret_cast<char*>(&_impl_.skip_),
          reinterpret_cast<char*>(&other->_impl_.skip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersHistoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[66]);
}
// ===================================================================

class OrdersHistoryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<OrdersHistoryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrdersHistoryResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::Paging& paging(const OrdersHistoryResponse* msg);
  static void set_has_paging(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::Paging&
OrdersHistoryResponse::_Internal::paging(const OrdersHistoryResponse* msg) {
  return *msg->_impl_.paging_;
}
OrdersHistoryResponse::OrdersHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.OrdersHistoryResponse)
}
OrdersHistoryResponse::OrdersHistoryResponse(const OrdersHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrdersHistoryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orders_){from._impl_.orders_}
    , decltype(_impl_.paging_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.paging_ = new ::injective_derivative_exchange_rpc::Paging(*from._impl_.paging_);
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.OrdersHistoryResponse)
}

inline void OrdersHistoryResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orders_){arena}
    , decltype(_impl_.paging_){nullptr}
  };
}

OrdersHistoryResponse::~OrdersHistoryResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.OrdersHistoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrdersHistoryResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_orders()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.paging_;
}

void OrdersHistoryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrdersHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.OrdersHistoryResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_orders()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrdersHistoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .injective_derivative_exchange_rpc.DerivativeOrderHistory orders = 1 [json_name = "orders"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_paging(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrdersHistoryResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.OrdersHistoryResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeOrderHistory orders = 1 [json_name = "orders"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::paging(this),
        _Internal::paging(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.OrdersHistoryResponse)
  return target;
}

::size_t OrdersHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.OrdersHistoryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .injective_derivative_exchange_rpc.DerivativeOrderHistory orders = 1 [json_name = "orders"];
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_internal_orders()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .injective_derivative_exchange_rpc.Paging paging = 2 [json_name = "paging"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.paging_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrdersHistoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrdersHistoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrdersHistoryResponse::GetClassData() const { return &_class_data_; }


void OrdersHistoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrdersHistoryResponse*>(&to_msg);
  auto& from = static_cast<const OrdersHistoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.OrdersHistoryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(from._internal_orders());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_paging()->::injective_derivative_exchange_rpc::Paging::MergeFrom(
        from._internal_paging());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrdersHistoryResponse::CopyFrom(const OrdersHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.OrdersHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersHistoryResponse::IsInitialized() const {
  return true;
}

void OrdersHistoryResponse::InternalSwap(OrdersHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_orders()->InternalSwap(other->_internal_mutable_orders());
  swap(_impl_.paging_, other->_impl_.paging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersHistoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[67]);
}
// ===================================================================

class DerivativeOrderHistory::_Internal {
 public:
};

DerivativeOrderHistory::DerivativeOrderHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.DerivativeOrderHistory)
}
DerivativeOrderHistory::DerivativeOrderHistory(const DerivativeOrderHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DerivativeOrderHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.execution_type_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.trigger_price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.filled_quantity_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.placed_order_hash_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.trigger_at_) {}

    , decltype(_impl_.is_active_) {}

    , decltype(_impl_.is_reduce_only_) {}

    , decltype(_impl_.is_conditional_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_hash().empty()) {
    _this->_impl_.order_hash_.Set(from._internal_order_hash(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.execution_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_type().empty()) {
    _this->_impl_.execution_type_.Set(from._internal_execution_type(), _this->GetArenaForAllocation());
  }
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_type().empty()) {
    _this->_impl_.order_type_.Set(from._internal_order_type(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.trigger_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trigger_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trigger_price().empty()) {
    _this->_impl_.trigger_price_.Set(from._internal_trigger_price(), _this->GetArenaForAllocation());
  }
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantity().empty()) {
    _this->_impl_.quantity_.Set(from._internal_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.filled_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filled_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filled_quantity().empty()) {
    _this->_impl_.filled_quantity_.Set(from._internal_filled_quantity(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), _this->GetArenaForAllocation());
  }
  _impl_.placed_order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.placed_order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_placed_order_hash().empty()) {
    _this->_impl_.placed_order_hash_.Set(from._internal_placed_order_hash(), _this->GetArenaForAllocation());
  }
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_margin().empty()) {
    _this->_impl_.margin_.Set(from._internal_margin(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_conditional_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.is_conditional_));
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.DerivativeOrderHistory)
}

inline void DerivativeOrderHistory::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_hash_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.execution_type_) {}

    , decltype(_impl_.order_type_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.trigger_price_) {}

    , decltype(_impl_.quantity_) {}

    , decltype(_impl_.filled_quantity_) {}

    , decltype(_impl_.state_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.placed_order_hash_) {}

    , decltype(_impl_.margin_) {}

    , decltype(_impl_.created_at_) { ::int64_t{0} }

    , decltype(_impl_.updated_at_) { ::int64_t{0} }

    , decltype(_impl_.trigger_at_) { ::uint64_t{0u} }

    , decltype(_impl_.is_active_) { false }

    , decltype(_impl_.is_reduce_only_) { false }

    , decltype(_impl_.is_conditional_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.execution_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.execution_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.order_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.order_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trigger_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trigger_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.filled_quantity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.filled_quantity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.placed_order_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.placed_order_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.margin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.margin_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DerivativeOrderHistory::~DerivativeOrderHistory() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.DerivativeOrderHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DerivativeOrderHistory::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_hash_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.subaccount_id_.Destroy();
  _impl_.execution_type_.Destroy();
  _impl_.order_type_.Destroy();
  _impl_.price_.Destroy();
  _impl_.trigger_price_.Destroy();
  _impl_.quantity_.Destroy();
  _impl_.filled_quantity_.Destroy();
  _impl_.state_.Destroy();
  _impl_.direction_.Destroy();
  _impl_.placed_order_hash_.Destroy();
  _impl_.margin_.Destroy();
}

void DerivativeOrderHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DerivativeOrderHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.DerivativeOrderHistory)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_hash_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.execution_type_.ClearToEmpty();
  _impl_.order_type_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _impl_.trigger_price_.ClearToEmpty();
  _impl_.quantity_.ClearToEmpty();
  _impl_.filled_quantity_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  _impl_.placed_order_hash_.ClearToEmpty();
  _impl_.margin_.ClearToEmpty();
  ::memset(&_impl_.created_at_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_conditional_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.is_conditional_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DerivativeOrderHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string order_hash = 1 [json_name = "orderHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_active = 3 [json_name = "isActive"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.is_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string subaccount_id = 4 [json_name = "subaccountId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string execution_type = 5 [json_name = "executionType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_execution_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.execution_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string order_type = 6 [json_name = "orderType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_order_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.order_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 7 [json_name = "price"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string trigger_price = 8 [json_name = "triggerPrice"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_trigger_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.trigger_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string quantity = 9 [json_name = "quantity"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string filled_quantity = 10 [json_name = "filledQuantity"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_filled_quantity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.filled_quantity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string state = 11 [json_name = "state"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.state"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 created_at = 12 [json_name = "createdAt"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 updated_at = 13 [json_name = "updatedAt"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_reduce_only = 14 [json_name = "isReduceOnly"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _impl_.is_reduce_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string direction = 15 [json_name = "direction"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_conditional = 16 [json_name = "isConditional"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _impl_.is_conditional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 trigger_at = 17 [json_name = "triggerAt"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _impl_.trigger_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string placed_order_hash = 18 [json_name = "placedOrderHash"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_placed_order_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.placed_order_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string margin = 19 [json_name = "margin"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_margin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.DerivativeOrderHistory.margin"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DerivativeOrderHistory::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.DerivativeOrderHistory)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    const std::string& _s = this->_internal_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.order_hash");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool is_active = 3 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_active(), target);
  }

  // string subaccount_id = 4 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.subaccount_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string execution_type = 5 [json_name = "executionType"];
  if (!this->_internal_execution_type().empty()) {
    const std::string& _s = this->_internal_execution_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.execution_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string order_type = 6 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    const std::string& _s = this->_internal_order_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.order_type");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string price = 7 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.price");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string trigger_price = 8 [json_name = "triggerPrice"];
  if (!this->_internal_trigger_price().empty()) {
    const std::string& _s = this->_internal_trigger_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.trigger_price");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string quantity = 9 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    const std::string& _s = this->_internal_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.quantity");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // string filled_quantity = 10 [json_name = "filledQuantity"];
  if (!this->_internal_filled_quantity().empty()) {
    const std::string& _s = this->_internal_filled_quantity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.filled_quantity");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string state = 11 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.state");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // sint64 created_at = 12 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        12, this->_internal_created_at(), target);
  }

  // sint64 updated_at = 13 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        13, this->_internal_updated_at(), target);
  }

  // bool is_reduce_only = 14 [json_name = "isReduceOnly"];
  if (this->_internal_is_reduce_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_is_reduce_only(), target);
  }

  // string direction = 15 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    const std::string& _s = this->_internal_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.direction");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // bool is_conditional = 16 [json_name = "isConditional"];
  if (this->_internal_is_conditional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this->_internal_is_conditional(), target);
  }

  // uint64 trigger_at = 17 [json_name = "triggerAt"];
  if (this->_internal_trigger_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        17, this->_internal_trigger_at(), target);
  }

  // string placed_order_hash = 18 [json_name = "placedOrderHash"];
  if (!this->_internal_placed_order_hash().empty()) {
    const std::string& _s = this->_internal_placed_order_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.placed_order_hash");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // string margin = 19 [json_name = "margin"];
  if (!this->_internal_margin().empty()) {
    const std::string& _s = this->_internal_margin();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.DerivativeOrderHistory.margin");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.DerivativeOrderHistory)
  return target;
}

::size_t DerivativeOrderHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.DerivativeOrderHistory)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string order_hash = 1 [json_name = "orderHash"];
  if (!this->_internal_order_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_hash());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string subaccount_id = 4 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string execution_type = 5 [json_name = "executionType"];
  if (!this->_internal_execution_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_execution_type());
  }

  // string order_type = 6 [json_name = "orderType"];
  if (!this->_internal_order_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_order_type());
  }

  // string price = 7 [json_name = "price"];
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string trigger_price = 8 [json_name = "triggerPrice"];
  if (!this->_internal_trigger_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trigger_price());
  }

  // string quantity = 9 [json_name = "quantity"];
  if (!this->_internal_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quantity());
  }

  // string filled_quantity = 10 [json_name = "filledQuantity"];
  if (!this->_internal_filled_quantity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_filled_quantity());
  }

  // string state = 11 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  // string direction = 15 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_direction());
  }

  // string placed_order_hash = 18 [json_name = "placedOrderHash"];
  if (!this->_internal_placed_order_hash().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_placed_order_hash());
  }

  // string margin = 19 [json_name = "margin"];
  if (!this->_internal_margin().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_margin());
  }

  // sint64 created_at = 12 [json_name = "createdAt"];
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_created_at());
  }

  // sint64 updated_at = 13 [json_name = "updatedAt"];
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_updated_at());
  }

  // uint64 trigger_at = 17 [json_name = "triggerAt"];
  if (this->_internal_trigger_at() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                    this->_internal_trigger_at());
  }

  // bool is_active = 3 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 2;
  }

  // bool is_reduce_only = 14 [json_name = "isReduceOnly"];
  if (this->_internal_is_reduce_only() != 0) {
    total_size += 2;
  }

  // bool is_conditional = 16 [json_name = "isConditional"];
  if (this->_internal_is_conditional() != 0) {
    total_size += 3;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DerivativeOrderHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DerivativeOrderHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DerivativeOrderHistory::GetClassData() const { return &_class_data_; }


void DerivativeOrderHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DerivativeOrderHistory*>(&to_msg);
  auto& from = static_cast<const DerivativeOrderHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.DerivativeOrderHistory)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_hash().empty()) {
    _this->_internal_set_order_hash(from._internal_order_hash());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_execution_type().empty()) {
    _this->_internal_set_execution_type(from._internal_execution_type());
  }
  if (!from._internal_order_type().empty()) {
    _this->_internal_set_order_type(from._internal_order_type());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_trigger_price().empty()) {
    _this->_internal_set_trigger_price(from._internal_trigger_price());
  }
  if (!from._internal_quantity().empty()) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  if (!from._internal_filled_quantity().empty()) {
    _this->_internal_set_filled_quantity(from._internal_filled_quantity());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (!from._internal_placed_order_hash().empty()) {
    _this->_internal_set_placed_order_hash(from._internal_placed_order_hash());
  }
  if (!from._internal_margin().empty()) {
    _this->_internal_set_margin(from._internal_margin());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_trigger_at() != 0) {
    _this->_internal_set_trigger_at(from._internal_trigger_at());
  }
  if (from._internal_is_active() != 0) {
    _this->_internal_set_is_active(from._internal_is_active());
  }
  if (from._internal_is_reduce_only() != 0) {
    _this->_internal_set_is_reduce_only(from._internal_is_reduce_only());
  }
  if (from._internal_is_conditional() != 0) {
    _this->_internal_set_is_conditional(from._internal_is_conditional());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DerivativeOrderHistory::CopyFrom(const DerivativeOrderHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.DerivativeOrderHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DerivativeOrderHistory::IsInitialized() const {
  return true;
}

void DerivativeOrderHistory::InternalSwap(DerivativeOrderHistory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_hash_, lhs_arena,
                                       &other->_impl_.order_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_type_, lhs_arena,
                                       &other->_impl_.execution_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_type_, lhs_arena,
                                       &other->_impl_.order_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trigger_price_, lhs_arena,
                                       &other->_impl_.trigger_price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantity_, lhs_arena,
                                       &other->_impl_.quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.filled_quantity_, lhs_arena,
                                       &other->_impl_.filled_quantity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, lhs_arena,
                                       &other->_impl_.direction_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.placed_order_hash_, lhs_arena,
                                       &other->_impl_.placed_order_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.margin_, lhs_arena,
                                       &other->_impl_.margin_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DerivativeOrderHistory, _impl_.is_conditional_)
      + sizeof(DerivativeOrderHistory::_impl_.is_conditional_)
      - PROTOBUF_FIELD_OFFSET(DerivativeOrderHistory, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DerivativeOrderHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[68]);
}
// ===================================================================

class StreamOrdersHistoryRequest::_Internal {
 public:
};

StreamOrdersHistoryRequest::StreamOrdersHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
}
StreamOrdersHistoryRequest::StreamOrdersHistoryRequest(const StreamOrdersHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrdersHistoryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_types_){from._impl_.order_types_}
    , decltype(_impl_.execution_types_){from._impl_.execution_types_}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.state_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subaccount_id().empty()) {
    _this->_impl_.subaccount_id_.Set(from._internal_subaccount_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_direction().empty()) {
    _this->_impl_.direction_.Set(from._internal_direction(), _this->GetArenaForAllocation());
  }
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    _this->_impl_.state_.Set(from._internal_state(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
}

inline void StreamOrdersHistoryRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_types_){arena}
    , decltype(_impl_.execution_types_){arena}
    , decltype(_impl_.subaccount_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.direction_) {}

    , decltype(_impl_.state_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subaccount_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subaccount_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.direction_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.state_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOrdersHistoryRequest::~StreamOrdersHistoryRequest() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrdersHistoryRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_order_types()->~RepeatedPtrField();
  _internal_mutable_execution_types()->~RepeatedPtrField();
  _impl_.subaccount_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.direction_.Destroy();
  _impl_.state_.Destroy();
}

void StreamOrdersHistoryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrdersHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_order_types()->Clear();
  _internal_mutable_execution_types()->Clear();
  _impl_.subaccount_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  _impl_.state_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrdersHistoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subaccount_id = 1 [json_name = "subaccountId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subaccount_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.subaccount_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2 [json_name = "marketId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string order_types = 3 [json_name = "orderTypes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_order_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.order_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string direction = 4 [json_name = "direction"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.direction"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string state = 5 [json_name = "state"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.state"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string execution_types = 6 [json_name = "executionTypes"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_execution_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.execution_types"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrdersHistoryRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    const std::string& _s = this->_internal_subaccount_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.subaccount_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string order_types = 3 [json_name = "orderTypes"];
  for (int i = 0, n = this->_internal_order_types_size(); i < n; ++i) {
    const auto& s = this->_internal_order_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.order_types");
    target = stream->WriteString(3, s, target);
  }

  // string direction = 4 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    const std::string& _s = this->_internal_direction();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.direction");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string state = 5 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.state");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // repeated string execution_types = 6 [json_name = "executionTypes"];
  for (int i = 0, n = this->_internal_execution_types_size(); i < n; ++i) {
    const auto& s = this->_internal_execution_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersHistoryRequest.execution_types");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
  return target;
}

::size_t StreamOrdersHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string order_types = 3 [json_name = "orderTypes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_order_types().size());
  for (int i = 0, n = _internal_order_types().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_order_types().Get(i));
  }

  // repeated string execution_types = 6 [json_name = "executionTypes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_execution_types().size());
  for (int i = 0, n = _internal_execution_types().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_execution_types().Get(i));
  }

  // string subaccount_id = 1 [json_name = "subaccountId"];
  if (!this->_internal_subaccount_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subaccount_id());
  }

  // string market_id = 2 [json_name = "marketId"];
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string direction = 4 [json_name = "direction"];
  if (!this->_internal_direction().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_direction());
  }

  // string state = 5 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrdersHistoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrdersHistoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrdersHistoryRequest::GetClassData() const { return &_class_data_; }


void StreamOrdersHistoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrdersHistoryRequest*>(&to_msg);
  auto& from = static_cast<const StreamOrdersHistoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_order_types()->MergeFrom(from._internal_order_types());
  _this->_internal_mutable_execution_types()->MergeFrom(from._internal_execution_types());
  if (!from._internal_subaccount_id().empty()) {
    _this->_internal_set_subaccount_id(from._internal_subaccount_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrdersHistoryRequest::CopyFrom(const StreamOrdersHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrdersHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrdersHistoryRequest::IsInitialized() const {
  return true;
}

void StreamOrdersHistoryRequest::InternalSwap(StreamOrdersHistoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_order_types()->InternalSwap(
      other->_internal_mutable_order_types());
  _internal_mutable_execution_types()->InternalSwap(
      other->_internal_mutable_execution_types());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subaccount_id_, lhs_arena,
                                       &other->_impl_.subaccount_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, lhs_arena,
                                       &other->_impl_.direction_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, lhs_arena,
                                       &other->_impl_.state_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrdersHistoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[69]);
}
// ===================================================================

class StreamOrdersHistoryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamOrdersHistoryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamOrdersHistoryResponse, _impl_._has_bits_);
  static const ::injective_derivative_exchange_rpc::DerivativeOrderHistory& order(const StreamOrdersHistoryResponse* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::injective_derivative_exchange_rpc::DerivativeOrderHistory&
StreamOrdersHistoryResponse::_Internal::order(const StreamOrdersHistoryResponse* msg) {
  return *msg->_impl_.order_;
}
StreamOrdersHistoryResponse::StreamOrdersHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
}
StreamOrdersHistoryResponse::StreamOrdersHistoryResponse(const StreamOrdersHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StreamOrdersHistoryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation_type().empty()) {
    _this->_impl_.operation_type_.Set(from._internal_operation_type(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::injective_derivative_exchange_rpc::DerivativeOrderHistory(*from._impl_.order_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
}

inline void StreamOrdersHistoryResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operation_type_) {}

    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.timestamp_) { ::int64_t{0} }

  };
  _impl_.operation_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operation_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StreamOrdersHistoryResponse::~StreamOrdersHistoryResponse() {
  // @@protoc_insertion_point(destructor:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamOrdersHistoryResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.operation_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void StreamOrdersHistoryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StreamOrdersHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.operation_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamOrdersHistoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .injective_derivative_exchange_rpc.DerivativeOrderHistory order = 1 [json_name = "order"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string operation_type = 2 [json_name = "operationType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "injective_derivative_exchange_rpc.StreamOrdersHistoryResponse.operation_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StreamOrdersHistoryResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .injective_derivative_exchange_rpc.DerivativeOrderHistory order = 1 [json_name = "order"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    const std::string& _s = this->_internal_operation_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "injective_derivative_exchange_rpc.StreamOrdersHistoryResponse.operation_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
  return target;
}

::size_t StreamOrdersHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_type = 2 [json_name = "operationType"];
  if (!this->_internal_operation_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operation_type());
  }

  // .injective_derivative_exchange_rpc.DerivativeOrderHistory order = 1 [json_name = "order"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  // sint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamOrdersHistoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StreamOrdersHistoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamOrdersHistoryResponse::GetClassData() const { return &_class_data_; }


void StreamOrdersHistoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StreamOrdersHistoryResponse*>(&to_msg);
  auto& from = static_cast<const StreamOrdersHistoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::injective_derivative_exchange_rpc::DerivativeOrderHistory::MergeFrom(
        from._internal_order());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamOrdersHistoryResponse::CopyFrom(const StreamOrdersHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:injective_derivative_exchange_rpc.StreamOrdersHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamOrdersHistoryResponse::IsInitialized() const {
  return true;
}

void StreamOrdersHistoryResponse::InternalSwap(StreamOrdersHistoryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, lhs_arena,
                                       &other->_impl_.operation_type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamOrdersHistoryResponse, _impl_.timestamp_)
      + sizeof(StreamOrdersHistoryResponse::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(StreamOrdersHistoryResponse, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamOrdersHistoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_getter, &descriptor_table_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto_once,
      file_level_metadata_exchange_2finjective_5fderivative_5fexchange_5frpc_2eproto[70]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace injective_derivative_exchange_rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::MarketsRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::MarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::MarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::MarketsResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::MarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::MarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::DerivativeMarketInfo*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::DerivativeMarketInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::DerivativeMarketInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::TokenMeta*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::TokenMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::TokenMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::PerpetualMarketInfo*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::PerpetualMarketInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::PerpetualMarketInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::PerpetualMarketFunding*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::PerpetualMarketFunding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::PerpetualMarketFunding >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::ExpiryFuturesMarketInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::MarketRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::MarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::MarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::MarketResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::MarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::MarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamMarketRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamMarketResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::BinaryOptionsMarketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::BinaryOptionsMarketInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::Paging*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::Paging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::Paging >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::BinaryOptionsMarketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::BinaryOptionsMarketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbookRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbookResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::DerivativeLimitOrderbook >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::PriceLevel*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::PriceLevel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::PriceLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbookV2Request*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbookV2Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbookV2Request >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbookV2Response*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbookV2Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbookV2Response >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::DerivativeLimitOrderbookV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbooksRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbooksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbooksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbooksResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbooksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbooksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbook*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbook >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbooksV2Request*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbooksV2Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbooksV2Request >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbooksV2Response*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbooksV2Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbooksV2Response >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbookV2*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbookV2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::SingleDerivativeLimitOrderbookV2 >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrderbookRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrderbookRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrderbookRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrderbookResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrderbookResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrderbookResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrderbookV2Request*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrderbookV2Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrderbookV2Request >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrderbookV2Response*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrderbookV2Response >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrderbookUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrderbookLevelUpdates*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrderbookLevelUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrderbookLevelUpdates >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::PriceLevelUpdate*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::PriceLevelUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::PriceLevelUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrdersRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrdersResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::DerivativeLimitOrder*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::DerivativeLimitOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::DerivativeLimitOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::PositionsRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::PositionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::PositionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::PositionsResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::PositionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::PositionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::DerivativePosition*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::DerivativePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::DerivativePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::LiquidablePositionsRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::LiquidablePositionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::LiquidablePositionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::LiquidablePositionsResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::LiquidablePositionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::LiquidablePositionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::FundingPaymentsRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::FundingPaymentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::FundingPaymentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::FundingPaymentsResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::FundingPaymentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::FundingPaymentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::FundingPayment*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::FundingPayment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::FundingPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::FundingRatesRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::FundingRatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::FundingRatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::FundingRatesResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::FundingRatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::FundingRatesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::FundingRate*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::FundingRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::FundingRate >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamPositionsRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamPositionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamPositionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamPositionsResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamPositionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamPositionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrdersRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrdersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrdersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrdersResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrdersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::TradesRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::TradesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::TradesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::TradesResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::TradesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::TradesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::DerivativeTrade*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::DerivativeTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::DerivativeTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::PositionDelta*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::PositionDelta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::PositionDelta >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamTradesRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamTradesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamTradesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamTradesResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamTradesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamTradesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::SubaccountOrdersListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::SubaccountOrdersListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::SubaccountTradesListRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::SubaccountTradesListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::SubaccountTradesListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::SubaccountTradesListResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::SubaccountTradesListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::SubaccountTradesListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrdersHistoryRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrdersHistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrdersHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::OrdersHistoryResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::OrdersHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::OrdersHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::DerivativeOrderHistory*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::DerivativeOrderHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::DerivativeOrderHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrdersHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse*
Arena::CreateMaybeMessage< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::injective_derivative_exchange_rpc::StreamOrdersHistoryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

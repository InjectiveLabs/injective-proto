// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/vesting/v1beta1/vesting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "amino/amino.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/auth/v1beta1/auth.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
namespace cosmos {
namespace vesting {
namespace v1beta1 {
class BaseVestingAccount;
struct BaseVestingAccountDefaultTypeInternal;
extern BaseVestingAccountDefaultTypeInternal _BaseVestingAccount_default_instance_;
class ContinuousVestingAccount;
struct ContinuousVestingAccountDefaultTypeInternal;
extern ContinuousVestingAccountDefaultTypeInternal _ContinuousVestingAccount_default_instance_;
class DelayedVestingAccount;
struct DelayedVestingAccountDefaultTypeInternal;
extern DelayedVestingAccountDefaultTypeInternal _DelayedVestingAccount_default_instance_;
class Period;
struct PeriodDefaultTypeInternal;
extern PeriodDefaultTypeInternal _Period_default_instance_;
class PeriodicVestingAccount;
struct PeriodicVestingAccountDefaultTypeInternal;
extern PeriodicVestingAccountDefaultTypeInternal _PeriodicVestingAccount_default_instance_;
class PermanentLockedAccount;
struct PermanentLockedAccountDefaultTypeInternal;
extern PermanentLockedAccountDefaultTypeInternal _PermanentLockedAccount_default_instance_;
}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::vesting::v1beta1::BaseVestingAccount* Arena::CreateMaybeMessage<::cosmos::vesting::v1beta1::BaseVestingAccount>(Arena*);
template <>
::cosmos::vesting::v1beta1::ContinuousVestingAccount* Arena::CreateMaybeMessage<::cosmos::vesting::v1beta1::ContinuousVestingAccount>(Arena*);
template <>
::cosmos::vesting::v1beta1::DelayedVestingAccount* Arena::CreateMaybeMessage<::cosmos::vesting::v1beta1::DelayedVestingAccount>(Arena*);
template <>
::cosmos::vesting::v1beta1::Period* Arena::CreateMaybeMessage<::cosmos::vesting::v1beta1::Period>(Arena*);
template <>
::cosmos::vesting::v1beta1::PeriodicVestingAccount* Arena::CreateMaybeMessage<::cosmos::vesting::v1beta1::PeriodicVestingAccount>(Arena*);
template <>
::cosmos::vesting::v1beta1::PermanentLockedAccount* Arena::CreateMaybeMessage<::cosmos::vesting::v1beta1::PermanentLockedAccount>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace vesting {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class BaseVestingAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.BaseVestingAccount) */ {
 public:
  inline BaseVestingAccount() : BaseVestingAccount(nullptr) {}
  ~BaseVestingAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BaseVestingAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseVestingAccount(const BaseVestingAccount& from);
  BaseVestingAccount(BaseVestingAccount&& from) noexcept
    : BaseVestingAccount() {
    *this = ::std::move(from);
  }

  inline BaseVestingAccount& operator=(const BaseVestingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseVestingAccount& operator=(BaseVestingAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseVestingAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseVestingAccount* internal_default_instance() {
    return reinterpret_cast<const BaseVestingAccount*>(
               &_BaseVestingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseVestingAccount& a, BaseVestingAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseVestingAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseVestingAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseVestingAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseVestingAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseVestingAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseVestingAccount& from) {
    BaseVestingAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseVestingAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.vesting.v1beta1.BaseVestingAccount";
  }
  protected:
  explicit BaseVestingAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalVestingFieldNumber = 2,
    kDelegatedFreeFieldNumber = 3,
    kDelegatedVestingFieldNumber = 4,
    kBaseAccountFieldNumber = 1,
    kEndTimeFieldNumber = 5,
  };
  // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int original_vesting_size() const;
  private:
  int _internal_original_vesting_size() const;

  public:
  void clear_original_vesting() ;
  ::cosmos::base::v1beta1::Coin* mutable_original_vesting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_original_vesting();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_original_vesting(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_original_vesting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_original_vesting() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_original_vesting();
  public:
  const ::cosmos::base::v1beta1::Coin& original_vesting(int index) const;
  ::cosmos::base::v1beta1::Coin* add_original_vesting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      original_vesting() const;
  // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int delegated_free_size() const;
  private:
  int _internal_delegated_free_size() const;

  public:
  void clear_delegated_free() ;
  ::cosmos::base::v1beta1::Coin* mutable_delegated_free(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_delegated_free();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_delegated_free(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_delegated_free();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_delegated_free() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_delegated_free();
  public:
  const ::cosmos::base::v1beta1::Coin& delegated_free(int index) const;
  ::cosmos::base::v1beta1::Coin* add_delegated_free();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      delegated_free() const;
  // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int delegated_vesting_size() const;
  private:
  int _internal_delegated_vesting_size() const;

  public:
  void clear_delegated_vesting() ;
  ::cosmos::base::v1beta1::Coin* mutable_delegated_vesting(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_delegated_vesting();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_delegated_vesting(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_delegated_vesting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_delegated_vesting() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_delegated_vesting();
  public:
  const ::cosmos::base::v1beta1::Coin& delegated_vesting(int index) const;
  ::cosmos::base::v1beta1::Coin* add_delegated_vesting();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      delegated_vesting() const;
  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  bool has_base_account() const;
  void clear_base_account() ;
  const ::cosmos::auth::v1beta1::BaseAccount& base_account() const;
  PROTOBUF_NODISCARD ::cosmos::auth::v1beta1::BaseAccount* release_base_account();
  ::cosmos::auth::v1beta1::BaseAccount* mutable_base_account();
  void set_allocated_base_account(::cosmos::auth::v1beta1::BaseAccount* base_account);
  private:
  const ::cosmos::auth::v1beta1::BaseAccount& _internal_base_account() const;
  ::cosmos::auth::v1beta1::BaseAccount* _internal_mutable_base_account();
  public:
  void unsafe_arena_set_allocated_base_account(
      ::cosmos::auth::v1beta1::BaseAccount* base_account);
  ::cosmos::auth::v1beta1::BaseAccount* unsafe_arena_release_base_account();
  // int64 end_time = 5 [json_name = "endTime"];
  void clear_end_time() ;
  ::int64_t end_time() const;
  void set_end_time(::int64_t value);

  private:
  ::int64_t _internal_end_time() const;
  void _internal_set_end_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.BaseVestingAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > original_vesting_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > delegated_free_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > delegated_vesting_;
    ::cosmos::auth::v1beta1::BaseAccount* base_account_;
    ::int64_t end_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};// -------------------------------------------------------------------

class ContinuousVestingAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.ContinuousVestingAccount) */ {
 public:
  inline ContinuousVestingAccount() : ContinuousVestingAccount(nullptr) {}
  ~ContinuousVestingAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ContinuousVestingAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContinuousVestingAccount(const ContinuousVestingAccount& from);
  ContinuousVestingAccount(ContinuousVestingAccount&& from) noexcept
    : ContinuousVestingAccount() {
    *this = ::std::move(from);
  }

  inline ContinuousVestingAccount& operator=(const ContinuousVestingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContinuousVestingAccount& operator=(ContinuousVestingAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContinuousVestingAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContinuousVestingAccount* internal_default_instance() {
    return reinterpret_cast<const ContinuousVestingAccount*>(
               &_ContinuousVestingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContinuousVestingAccount& a, ContinuousVestingAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(ContinuousVestingAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContinuousVestingAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContinuousVestingAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContinuousVestingAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContinuousVestingAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContinuousVestingAccount& from) {
    ContinuousVestingAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinuousVestingAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.vesting.v1beta1.ContinuousVestingAccount";
  }
  protected:
  explicit ContinuousVestingAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseVestingAccountFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  bool has_base_vesting_account() const;
  void clear_base_vesting_account() ;
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account() const;
  PROTOBUF_NODISCARD ::cosmos::vesting::v1beta1::BaseVestingAccount* release_base_vesting_account();
  ::cosmos::vesting::v1beta1::BaseVestingAccount* mutable_base_vesting_account();
  void set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account);
  private:
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& _internal_base_vesting_account() const;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _internal_mutable_base_vesting_account();
  public:
  void unsafe_arena_set_allocated_base_vesting_account(
      ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account);
  ::cosmos::vesting::v1beta1::BaseVestingAccount* unsafe_arena_release_base_vesting_account();
  // int64 start_time = 2 [json_name = "startTime"];
  void clear_start_time() ;
  ::int64_t start_time() const;
  void set_start_time(::int64_t value);

  private:
  ::int64_t _internal_start_time() const;
  void _internal_set_start_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.ContinuousVestingAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account_;
    ::int64_t start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};// -------------------------------------------------------------------

class DelayedVestingAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.DelayedVestingAccount) */ {
 public:
  inline DelayedVestingAccount() : DelayedVestingAccount(nullptr) {}
  ~DelayedVestingAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DelayedVestingAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelayedVestingAccount(const DelayedVestingAccount& from);
  DelayedVestingAccount(DelayedVestingAccount&& from) noexcept
    : DelayedVestingAccount() {
    *this = ::std::move(from);
  }

  inline DelayedVestingAccount& operator=(const DelayedVestingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelayedVestingAccount& operator=(DelayedVestingAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelayedVestingAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelayedVestingAccount* internal_default_instance() {
    return reinterpret_cast<const DelayedVestingAccount*>(
               &_DelayedVestingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DelayedVestingAccount& a, DelayedVestingAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(DelayedVestingAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelayedVestingAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelayedVestingAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelayedVestingAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelayedVestingAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelayedVestingAccount& from) {
    DelayedVestingAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelayedVestingAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.vesting.v1beta1.DelayedVestingAccount";
  }
  protected:
  explicit DelayedVestingAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseVestingAccountFieldNumber = 1,
  };
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  bool has_base_vesting_account() const;
  void clear_base_vesting_account() ;
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account() const;
  PROTOBUF_NODISCARD ::cosmos::vesting::v1beta1::BaseVestingAccount* release_base_vesting_account();
  ::cosmos::vesting::v1beta1::BaseVestingAccount* mutable_base_vesting_account();
  void set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account);
  private:
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& _internal_base_vesting_account() const;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _internal_mutable_base_vesting_account();
  public:
  void unsafe_arena_set_allocated_base_vesting_account(
      ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account);
  ::cosmos::vesting::v1beta1::BaseVestingAccount* unsafe_arena_release_base_vesting_account();
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.DelayedVestingAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};// -------------------------------------------------------------------

class Period final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.Period) */ {
 public:
  inline Period() : Period(nullptr) {}
  ~Period() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Period(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Period(const Period& from);
  Period(Period&& from) noexcept
    : Period() {
    *this = ::std::move(from);
  }

  inline Period& operator=(const Period& from) {
    CopyFrom(from);
    return *this;
  }
  inline Period& operator=(Period&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Period& default_instance() {
    return *internal_default_instance();
  }
  static inline const Period* internal_default_instance() {
    return reinterpret_cast<const Period*>(
               &_Period_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Period& a, Period& b) {
    a.Swap(&b);
  }
  inline void Swap(Period* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Period* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Period* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Period>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Period& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Period& from) {
    Period::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Period* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.vesting.v1beta1.Period";
  }
  protected:
  explicit Period(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kLengthFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_amount();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      amount() const;
  // int64 length = 1 [json_name = "length"];
  void clear_length() ;
  ::int64_t length() const;
  void set_length(::int64_t value);

  private:
  ::int64_t _internal_length() const;
  void _internal_set_length(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.Period)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::int64_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};// -------------------------------------------------------------------

class PeriodicVestingAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.PeriodicVestingAccount) */ {
 public:
  inline PeriodicVestingAccount() : PeriodicVestingAccount(nullptr) {}
  ~PeriodicVestingAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PeriodicVestingAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeriodicVestingAccount(const PeriodicVestingAccount& from);
  PeriodicVestingAccount(PeriodicVestingAccount&& from) noexcept
    : PeriodicVestingAccount() {
    *this = ::std::move(from);
  }

  inline PeriodicVestingAccount& operator=(const PeriodicVestingAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodicVestingAccount& operator=(PeriodicVestingAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeriodicVestingAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeriodicVestingAccount* internal_default_instance() {
    return reinterpret_cast<const PeriodicVestingAccount*>(
               &_PeriodicVestingAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PeriodicVestingAccount& a, PeriodicVestingAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(PeriodicVestingAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeriodicVestingAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeriodicVestingAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeriodicVestingAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeriodicVestingAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PeriodicVestingAccount& from) {
    PeriodicVestingAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeriodicVestingAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.vesting.v1beta1.PeriodicVestingAccount";
  }
  protected:
  explicit PeriodicVestingAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVestingPeriodsFieldNumber = 3,
    kBaseVestingAccountFieldNumber = 1,
    kStartTimeFieldNumber = 2,
  };
  // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int vesting_periods_size() const;
  private:
  int _internal_vesting_periods_size() const;

  public:
  void clear_vesting_periods() ;
  ::cosmos::vesting::v1beta1::Period* mutable_vesting_periods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::vesting::v1beta1::Period >*
      mutable_vesting_periods();
  private:
  const ::cosmos::vesting::v1beta1::Period& _internal_vesting_periods(int index) const;
  ::cosmos::vesting::v1beta1::Period* _internal_add_vesting_periods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>& _internal_vesting_periods() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>* _internal_mutable_vesting_periods();
  public:
  const ::cosmos::vesting::v1beta1::Period& vesting_periods(int index) const;
  ::cosmos::vesting::v1beta1::Period* add_vesting_periods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::vesting::v1beta1::Period >&
      vesting_periods() const;
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  bool has_base_vesting_account() const;
  void clear_base_vesting_account() ;
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account() const;
  PROTOBUF_NODISCARD ::cosmos::vesting::v1beta1::BaseVestingAccount* release_base_vesting_account();
  ::cosmos::vesting::v1beta1::BaseVestingAccount* mutable_base_vesting_account();
  void set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account);
  private:
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& _internal_base_vesting_account() const;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _internal_mutable_base_vesting_account();
  public:
  void unsafe_arena_set_allocated_base_vesting_account(
      ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account);
  ::cosmos::vesting::v1beta1::BaseVestingAccount* unsafe_arena_release_base_vesting_account();
  // int64 start_time = 2 [json_name = "startTime"];
  void clear_start_time() ;
  ::int64_t start_time() const;
  void set_start_time(::int64_t value);

  private:
  ::int64_t _internal_start_time() const;
  void _internal_set_start_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.PeriodicVestingAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::vesting::v1beta1::Period > vesting_periods_;
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account_;
    ::int64_t start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};// -------------------------------------------------------------------

class PermanentLockedAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.vesting.v1beta1.PermanentLockedAccount) */ {
 public:
  inline PermanentLockedAccount() : PermanentLockedAccount(nullptr) {}
  ~PermanentLockedAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PermanentLockedAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermanentLockedAccount(const PermanentLockedAccount& from);
  PermanentLockedAccount(PermanentLockedAccount&& from) noexcept
    : PermanentLockedAccount() {
    *this = ::std::move(from);
  }

  inline PermanentLockedAccount& operator=(const PermanentLockedAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermanentLockedAccount& operator=(PermanentLockedAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermanentLockedAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermanentLockedAccount* internal_default_instance() {
    return reinterpret_cast<const PermanentLockedAccount*>(
               &_PermanentLockedAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PermanentLockedAccount& a, PermanentLockedAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(PermanentLockedAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermanentLockedAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PermanentLockedAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PermanentLockedAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermanentLockedAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PermanentLockedAccount& from) {
    PermanentLockedAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermanentLockedAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.vesting.v1beta1.PermanentLockedAccount";
  }
  protected:
  explicit PermanentLockedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseVestingAccountFieldNumber = 1,
  };
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  bool has_base_vesting_account() const;
  void clear_base_vesting_account() ;
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account() const;
  PROTOBUF_NODISCARD ::cosmos::vesting::v1beta1::BaseVestingAccount* release_base_vesting_account();
  ::cosmos::vesting::v1beta1::BaseVestingAccount* mutable_base_vesting_account();
  void set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account);
  private:
  const ::cosmos::vesting::v1beta1::BaseVestingAccount& _internal_base_vesting_account() const;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _internal_mutable_base_vesting_account();
  public:
  void unsafe_arena_set_allocated_base_vesting_account(
      ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account);
  ::cosmos::vesting::v1beta1::BaseVestingAccount* unsafe_arena_release_base_vesting_account();
  // @@protoc_insertion_point(class_scope:cosmos.vesting.v1beta1.PermanentLockedAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BaseVestingAccount

// .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
inline bool BaseVestingAccount::has_base_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_account_ != nullptr);
  return value;
}
inline const ::cosmos::auth::v1beta1::BaseAccount& BaseVestingAccount::_internal_base_account() const {
  const ::cosmos::auth::v1beta1::BaseAccount* p = _impl_.base_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::auth::v1beta1::BaseAccount&>(
      ::cosmos::auth::v1beta1::_BaseAccount_default_instance_);
}
inline const ::cosmos::auth::v1beta1::BaseAccount& BaseVestingAccount::base_account() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
  return _internal_base_account();
}
inline void BaseVestingAccount::unsafe_arena_set_allocated_base_account(
    ::cosmos::auth::v1beta1::BaseAccount* base_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_account_);
  }
  _impl_.base_account_ = base_account;
  if (base_account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
}
inline ::cosmos::auth::v1beta1::BaseAccount* BaseVestingAccount::release_base_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* temp = _impl_.base_account_;
  _impl_.base_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::auth::v1beta1::BaseAccount* BaseVestingAccount::unsafe_arena_release_base_account() {
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* temp = _impl_.base_account_;
  _impl_.base_account_ = nullptr;
  return temp;
}
inline ::cosmos::auth::v1beta1::BaseAccount* BaseVestingAccount::_internal_mutable_base_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::auth::v1beta1::BaseAccount>(GetArenaForAllocation());
    _impl_.base_account_ = p;
  }
  return _impl_.base_account_;
}
inline ::cosmos::auth::v1beta1::BaseAccount* BaseVestingAccount::mutable_base_account() {
  ::cosmos::auth::v1beta1::BaseAccount* _msg = _internal_mutable_base_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
  return _msg;
}
inline void BaseVestingAccount::set_allocated_base_account(::cosmos::auth::v1beta1::BaseAccount* base_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_account_);
  }
  if (base_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_account));
    if (message_arena != submessage_arena) {
      base_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_account_ = base_account;
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.BaseVestingAccount.base_account)
}

// repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int BaseVestingAccount::_internal_original_vesting_size() const {
  return _impl_.original_vesting_.size();
}
inline int BaseVestingAccount::original_vesting_size() const {
  return _internal_original_vesting_size();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::mutable_original_vesting(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _internal_mutable_original_vesting()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
BaseVestingAccount::mutable_original_vesting() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _internal_mutable_original_vesting();
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::_internal_original_vesting(int index) const {
  return _internal_original_vesting().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::original_vesting(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _internal_original_vesting(index);
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::_internal_add_original_vesting() {
  return _internal_mutable_original_vesting()->Add();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::add_original_vesting() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_original_vesting();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
BaseVestingAccount::original_vesting() const {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.BaseVestingAccount.original_vesting)
  return _internal_original_vesting();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
BaseVestingAccount::_internal_original_vesting() const {
  return _impl_.original_vesting_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
BaseVestingAccount::_internal_mutable_original_vesting() {
  return &_impl_.original_vesting_;
}

// repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int BaseVestingAccount::_internal_delegated_free_size() const {
  return _impl_.delegated_free_.size();
}
inline int BaseVestingAccount::delegated_free_size() const {
  return _internal_delegated_free_size();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::mutable_delegated_free(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _internal_mutable_delegated_free()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
BaseVestingAccount::mutable_delegated_free() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _internal_mutable_delegated_free();
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::_internal_delegated_free(int index) const {
  return _internal_delegated_free().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::delegated_free(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _internal_delegated_free(index);
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::_internal_add_delegated_free() {
  return _internal_mutable_delegated_free()->Add();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::add_delegated_free() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_delegated_free();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
BaseVestingAccount::delegated_free() const {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_free)
  return _internal_delegated_free();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
BaseVestingAccount::_internal_delegated_free() const {
  return _impl_.delegated_free_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
BaseVestingAccount::_internal_mutable_delegated_free() {
  return &_impl_.delegated_free_;
}

// repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int BaseVestingAccount::_internal_delegated_vesting_size() const {
  return _impl_.delegated_vesting_.size();
}
inline int BaseVestingAccount::delegated_vesting_size() const {
  return _internal_delegated_vesting_size();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::mutable_delegated_vesting(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _internal_mutable_delegated_vesting()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
BaseVestingAccount::mutable_delegated_vesting() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _internal_mutable_delegated_vesting();
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::_internal_delegated_vesting(int index) const {
  return _internal_delegated_vesting().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& BaseVestingAccount::delegated_vesting(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _internal_delegated_vesting(index);
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::_internal_add_delegated_vesting() {
  return _internal_mutable_delegated_vesting()->Add();
}
inline ::cosmos::base::v1beta1::Coin* BaseVestingAccount::add_delegated_vesting() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_delegated_vesting();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
BaseVestingAccount::delegated_vesting() const {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.BaseVestingAccount.delegated_vesting)
  return _internal_delegated_vesting();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
BaseVestingAccount::_internal_delegated_vesting() const {
  return _impl_.delegated_vesting_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
BaseVestingAccount::_internal_mutable_delegated_vesting() {
  return &_impl_.delegated_vesting_;
}

// int64 end_time = 5 [json_name = "endTime"];
inline void BaseVestingAccount::clear_end_time() {
  _impl_.end_time_ = ::int64_t{0};
}
inline ::int64_t BaseVestingAccount::end_time() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.BaseVestingAccount.end_time)
  return _internal_end_time();
}
inline void BaseVestingAccount::set_end_time(::int64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:cosmos.vesting.v1beta1.BaseVestingAccount.end_time)
}
inline ::int64_t BaseVestingAccount::_internal_end_time() const {
  return _impl_.end_time_;
}
inline void BaseVestingAccount::_internal_set_end_time(::int64_t value) {
  ;
  _impl_.end_time_ = value;
}

// -------------------------------------------------------------------

// ContinuousVestingAccount

// .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
inline bool ContinuousVestingAccount::has_base_vesting_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_vesting_account_ != nullptr);
  return value;
}
inline void ContinuousVestingAccount::clear_base_vesting_account() {
  if (_impl_.base_vesting_account_ != nullptr) _impl_.base_vesting_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& ContinuousVestingAccount::_internal_base_vesting_account() const {
  const ::cosmos::vesting::v1beta1::BaseVestingAccount* p = _impl_.base_vesting_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::vesting::v1beta1::BaseVestingAccount&>(
      ::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_);
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& ContinuousVestingAccount::base_vesting_account() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
  return _internal_base_vesting_account();
}
inline void ContinuousVestingAccount::unsafe_arena_set_allocated_base_vesting_account(
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_vesting_account_);
  }
  _impl_.base_vesting_account_ = base_vesting_account;
  if (base_vesting_account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* ContinuousVestingAccount::release_base_vesting_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* ContinuousVestingAccount::unsafe_arena_release_base_vesting_account() {
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* ContinuousVestingAccount::_internal_mutable_base_vesting_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_vesting_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::vesting::v1beta1::BaseVestingAccount>(GetArenaForAllocation());
    _impl_.base_vesting_account_ = p;
  }
  return _impl_.base_vesting_account_;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* ContinuousVestingAccount::mutable_base_vesting_account() {
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _msg = _internal_mutable_base_vesting_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
  return _msg;
}
inline void ContinuousVestingAccount::set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_vesting_account_;
  }
  if (base_vesting_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_vesting_account);
    if (message_arena != submessage_arena) {
      base_vesting_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_vesting_account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_vesting_account_ = base_vesting_account;
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.ContinuousVestingAccount.base_vesting_account)
}

// int64 start_time = 2 [json_name = "startTime"];
inline void ContinuousVestingAccount::clear_start_time() {
  _impl_.start_time_ = ::int64_t{0};
}
inline ::int64_t ContinuousVestingAccount::start_time() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.ContinuousVestingAccount.start_time)
  return _internal_start_time();
}
inline void ContinuousVestingAccount::set_start_time(::int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:cosmos.vesting.v1beta1.ContinuousVestingAccount.start_time)
}
inline ::int64_t ContinuousVestingAccount::_internal_start_time() const {
  return _impl_.start_time_;
}
inline void ContinuousVestingAccount::_internal_set_start_time(::int64_t value) {
  ;
  _impl_.start_time_ = value;
}

// -------------------------------------------------------------------

// DelayedVestingAccount

// .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
inline bool DelayedVestingAccount::has_base_vesting_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_vesting_account_ != nullptr);
  return value;
}
inline void DelayedVestingAccount::clear_base_vesting_account() {
  if (_impl_.base_vesting_account_ != nullptr) _impl_.base_vesting_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& DelayedVestingAccount::_internal_base_vesting_account() const {
  const ::cosmos::vesting::v1beta1::BaseVestingAccount* p = _impl_.base_vesting_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::vesting::v1beta1::BaseVestingAccount&>(
      ::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_);
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& DelayedVestingAccount::base_vesting_account() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
  return _internal_base_vesting_account();
}
inline void DelayedVestingAccount::unsafe_arena_set_allocated_base_vesting_account(
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_vesting_account_);
  }
  _impl_.base_vesting_account_ = base_vesting_account;
  if (base_vesting_account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* DelayedVestingAccount::release_base_vesting_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* DelayedVestingAccount::unsafe_arena_release_base_vesting_account() {
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* DelayedVestingAccount::_internal_mutable_base_vesting_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_vesting_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::vesting::v1beta1::BaseVestingAccount>(GetArenaForAllocation());
    _impl_.base_vesting_account_ = p;
  }
  return _impl_.base_vesting_account_;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* DelayedVestingAccount::mutable_base_vesting_account() {
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _msg = _internal_mutable_base_vesting_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
  return _msg;
}
inline void DelayedVestingAccount::set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_vesting_account_;
  }
  if (base_vesting_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_vesting_account);
    if (message_arena != submessage_arena) {
      base_vesting_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_vesting_account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_vesting_account_ = base_vesting_account;
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.DelayedVestingAccount.base_vesting_account)
}

// -------------------------------------------------------------------

// Period

// int64 length = 1 [json_name = "length"];
inline void Period::clear_length() {
  _impl_.length_ = ::int64_t{0};
}
inline ::int64_t Period::length() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.Period.length)
  return _internal_length();
}
inline void Period::set_length(::int64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:cosmos.vesting.v1beta1.Period.length)
}
inline ::int64_t Period::_internal_length() const {
  return _impl_.length_;
}
inline void Period::_internal_set_length(::int64_t value) {
  ;
  _impl_.length_ = value;
}

// repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
inline int Period::_internal_amount_size() const {
  return _impl_.amount_.size();
}
inline int Period::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* Period::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.Period.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Period::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.Period.amount)
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& Period::_internal_amount(int index) const {
  return _internal_amount().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Period::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.Period.amount)
  return _internal_amount(index);
}
inline ::cosmos::base::v1beta1::Coin* Period::_internal_add_amount() {
  return _internal_mutable_amount()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Period::add_amount() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_amount();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.Period.amount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Period::amount() const {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.Period.amount)
  return _internal_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Period::_internal_amount() const {
  return _impl_.amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Period::_internal_mutable_amount() {
  return &_impl_.amount_;
}

// -------------------------------------------------------------------

// PeriodicVestingAccount

// .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
inline bool PeriodicVestingAccount::has_base_vesting_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_vesting_account_ != nullptr);
  return value;
}
inline void PeriodicVestingAccount::clear_base_vesting_account() {
  if (_impl_.base_vesting_account_ != nullptr) _impl_.base_vesting_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& PeriodicVestingAccount::_internal_base_vesting_account() const {
  const ::cosmos::vesting::v1beta1::BaseVestingAccount* p = _impl_.base_vesting_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::vesting::v1beta1::BaseVestingAccount&>(
      ::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_);
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& PeriodicVestingAccount::base_vesting_account() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
  return _internal_base_vesting_account();
}
inline void PeriodicVestingAccount::unsafe_arena_set_allocated_base_vesting_account(
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_vesting_account_);
  }
  _impl_.base_vesting_account_ = base_vesting_account;
  if (base_vesting_account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PeriodicVestingAccount::release_base_vesting_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PeriodicVestingAccount::unsafe_arena_release_base_vesting_account() {
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PeriodicVestingAccount::_internal_mutable_base_vesting_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_vesting_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::vesting::v1beta1::BaseVestingAccount>(GetArenaForAllocation());
    _impl_.base_vesting_account_ = p;
  }
  return _impl_.base_vesting_account_;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PeriodicVestingAccount::mutable_base_vesting_account() {
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _msg = _internal_mutable_base_vesting_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
  return _msg;
}
inline void PeriodicVestingAccount::set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_vesting_account_;
  }
  if (base_vesting_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_vesting_account);
    if (message_arena != submessage_arena) {
      base_vesting_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_vesting_account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_vesting_account_ = base_vesting_account;
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.PeriodicVestingAccount.base_vesting_account)
}

// int64 start_time = 2 [json_name = "startTime"];
inline void PeriodicVestingAccount::clear_start_time() {
  _impl_.start_time_ = ::int64_t{0};
}
inline ::int64_t PeriodicVestingAccount::start_time() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.PeriodicVestingAccount.start_time)
  return _internal_start_time();
}
inline void PeriodicVestingAccount::set_start_time(::int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:cosmos.vesting.v1beta1.PeriodicVestingAccount.start_time)
}
inline ::int64_t PeriodicVestingAccount::_internal_start_time() const {
  return _impl_.start_time_;
}
inline void PeriodicVestingAccount::_internal_set_start_time(::int64_t value) {
  ;
  _impl_.start_time_ = value;
}

// repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int PeriodicVestingAccount::_internal_vesting_periods_size() const {
  return _impl_.vesting_periods_.size();
}
inline int PeriodicVestingAccount::vesting_periods_size() const {
  return _internal_vesting_periods_size();
}
inline void PeriodicVestingAccount::clear_vesting_periods() {
  _internal_mutable_vesting_periods()->Clear();
}
inline ::cosmos::vesting::v1beta1::Period* PeriodicVestingAccount::mutable_vesting_periods(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _internal_mutable_vesting_periods()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::vesting::v1beta1::Period >*
PeriodicVestingAccount::mutable_vesting_periods() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _internal_mutable_vesting_periods();
}
inline const ::cosmos::vesting::v1beta1::Period& PeriodicVestingAccount::_internal_vesting_periods(int index) const {
  return _internal_vesting_periods().Get(index);
}
inline const ::cosmos::vesting::v1beta1::Period& PeriodicVestingAccount::vesting_periods(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _internal_vesting_periods(index);
}
inline ::cosmos::vesting::v1beta1::Period* PeriodicVestingAccount::_internal_add_vesting_periods() {
  return _internal_mutable_vesting_periods()->Add();
}
inline ::cosmos::vesting::v1beta1::Period* PeriodicVestingAccount::add_vesting_periods() {
  ::cosmos::vesting::v1beta1::Period* _add = _internal_add_vesting_periods();
  // @@protoc_insertion_point(field_add:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::vesting::v1beta1::Period >&
PeriodicVestingAccount::vesting_periods() const {
  // @@protoc_insertion_point(field_list:cosmos.vesting.v1beta1.PeriodicVestingAccount.vesting_periods)
  return _internal_vesting_periods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>&
PeriodicVestingAccount::_internal_vesting_periods() const {
  return _impl_.vesting_periods_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::vesting::v1beta1::Period>*
PeriodicVestingAccount::_internal_mutable_vesting_periods() {
  return &_impl_.vesting_periods_;
}

// -------------------------------------------------------------------

// PermanentLockedAccount

// .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
inline bool PermanentLockedAccount::has_base_vesting_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_vesting_account_ != nullptr);
  return value;
}
inline void PermanentLockedAccount::clear_base_vesting_account() {
  if (_impl_.base_vesting_account_ != nullptr) _impl_.base_vesting_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& PermanentLockedAccount::_internal_base_vesting_account() const {
  const ::cosmos::vesting::v1beta1::BaseVestingAccount* p = _impl_.base_vesting_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::vesting::v1beta1::BaseVestingAccount&>(
      ::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_);
}
inline const ::cosmos::vesting::v1beta1::BaseVestingAccount& PermanentLockedAccount::base_vesting_account() const {
  // @@protoc_insertion_point(field_get:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
  return _internal_base_vesting_account();
}
inline void PermanentLockedAccount::unsafe_arena_set_allocated_base_vesting_account(
    ::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_vesting_account_);
  }
  _impl_.base_vesting_account_ = base_vesting_account;
  if (base_vesting_account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PermanentLockedAccount::release_base_vesting_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PermanentLockedAccount::unsafe_arena_release_base_vesting_account() {
  // @@protoc_insertion_point(field_release:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::vesting::v1beta1::BaseVestingAccount* temp = _impl_.base_vesting_account_;
  _impl_.base_vesting_account_ = nullptr;
  return temp;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PermanentLockedAccount::_internal_mutable_base_vesting_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_vesting_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::vesting::v1beta1::BaseVestingAccount>(GetArenaForAllocation());
    _impl_.base_vesting_account_ = p;
  }
  return _impl_.base_vesting_account_;
}
inline ::cosmos::vesting::v1beta1::BaseVestingAccount* PermanentLockedAccount::mutable_base_vesting_account() {
  ::cosmos::vesting::v1beta1::BaseVestingAccount* _msg = _internal_mutable_base_vesting_account();
  // @@protoc_insertion_point(field_mutable:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
  return _msg;
}
inline void PermanentLockedAccount::set_allocated_base_vesting_account(::cosmos::vesting::v1beta1::BaseVestingAccount* base_vesting_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_vesting_account_;
  }
  if (base_vesting_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_vesting_account);
    if (message_arena != submessage_arena) {
      base_vesting_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_vesting_account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_vesting_account_ = base_vesting_account;
  // @@protoc_insertion_point(field_set_allocated:cosmos.vesting.v1beta1.PermanentLockedAccount.base_vesting_account)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_2epb_2eh

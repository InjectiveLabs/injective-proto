// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/vesting/v1beta1/tx.proto

#include "cosmos/vesting/v1beta1/tx.pb.h"
#include "cosmos/vesting/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace vesting {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/cosmos.vesting.v1beta1.Msg/CreateVestingAccount",
  "/cosmos.vesting.v1beta1.Msg/CreatePermanentLockedAccount",
  "/cosmos.vesting.v1beta1.Msg/CreatePeriodicVestingAccount",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateVestingAccount_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePermanentLockedAccount_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreatePeriodicVestingAccount_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateVestingAccount_, context, request, response);
}

void Msg::Stub::async::CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVestingAccount_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateVestingAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* Msg::Stub::PrepareAsyncCreateVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse, ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateVestingAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* Msg::Stub::AsyncCreateVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateVestingAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePermanentLockedAccount_, context, request, response);
}

void Msg::Stub::async::CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePermanentLockedAccount_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePermanentLockedAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* Msg::Stub::PrepareAsyncCreatePermanentLockedAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePermanentLockedAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* Msg::Stub::AsyncCreatePermanentLockedAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePermanentLockedAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreatePeriodicVestingAccount_, context, request, response);
}

void Msg::Stub::async::CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePeriodicVestingAccount_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreatePeriodicVestingAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* Msg::Stub::PrepareAsyncCreatePeriodicVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreatePeriodicVestingAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* Msg::Stub::AsyncCreatePeriodicVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreatePeriodicVestingAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* req,
             ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* resp) {
               return service->CreateVestingAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* req,
             ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* resp) {
               return service->CreatePermanentLockedAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* req,
             ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* resp) {
               return service->CreatePeriodicVestingAccount(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::CreateVestingAccount(::grpc::ServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreatePermanentLockedAccount(::grpc::ServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CreatePeriodicVestingAccount(::grpc::ServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace vesting
}  // namespace v1beta1


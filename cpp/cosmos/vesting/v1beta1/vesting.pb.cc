// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/vesting/v1beta1/vesting.proto

#include "cosmos/vesting/v1beta1/vesting.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace vesting {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR BaseVestingAccount::BaseVestingAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.original_vesting_)*/{}
  , /*decltype(_impl_.delegated_free_)*/{}
  , /*decltype(_impl_.delegated_vesting_)*/{}
  , /*decltype(_impl_.base_account_)*/nullptr
  , /*decltype(_impl_.end_time_)*/ ::int64_t{0}
} {}
struct BaseVestingAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseVestingAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseVestingAccountDefaultTypeInternal() {}
  union {
    BaseVestingAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseVestingAccountDefaultTypeInternal _BaseVestingAccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContinuousVestingAccount::ContinuousVestingAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_vesting_account_)*/nullptr
  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}
} {}
struct ContinuousVestingAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContinuousVestingAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContinuousVestingAccountDefaultTypeInternal() {}
  union {
    ContinuousVestingAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContinuousVestingAccountDefaultTypeInternal _ContinuousVestingAccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DelayedVestingAccount::DelayedVestingAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_vesting_account_)*/nullptr} {}
struct DelayedVestingAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelayedVestingAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelayedVestingAccountDefaultTypeInternal() {}
  union {
    DelayedVestingAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelayedVestingAccountDefaultTypeInternal _DelayedVestingAccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Period::Period(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/{}
  , /*decltype(_impl_.length_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PeriodDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeriodDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeriodDefaultTypeInternal() {}
  union {
    Period _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeriodDefaultTypeInternal _Period_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PeriodicVestingAccount::PeriodicVestingAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vesting_periods_)*/{}
  , /*decltype(_impl_.base_vesting_account_)*/nullptr
  , /*decltype(_impl_.start_time_)*/ ::int64_t{0}
} {}
struct PeriodicVestingAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeriodicVestingAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeriodicVestingAccountDefaultTypeInternal() {}
  union {
    PeriodicVestingAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeriodicVestingAccountDefaultTypeInternal _PeriodicVestingAccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PermanentLockedAccount::PermanentLockedAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_vesting_account_)*/nullptr} {}
struct PermanentLockedAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PermanentLockedAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PermanentLockedAccountDefaultTypeInternal() {}
  union {
    PermanentLockedAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PermanentLockedAccountDefaultTypeInternal _PermanentLockedAccount_default_instance_;
}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.base_account_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.original_vesting_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.delegated_free_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.delegated_vesting_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::BaseVestingAccount, _impl_.end_time_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::ContinuousVestingAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::ContinuousVestingAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::ContinuousVestingAccount, _impl_.base_vesting_account_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::ContinuousVestingAccount, _impl_.start_time_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::DelayedVestingAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::DelayedVestingAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::DelayedVestingAccount, _impl_.base_vesting_account_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::Period, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::Period, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::Period, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _impl_.base_vesting_account_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _impl_.start_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PeriodicVestingAccount, _impl_.vesting_periods_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PermanentLockedAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PermanentLockedAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::vesting::v1beta1::PermanentLockedAccount, _impl_.base_vesting_account_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::cosmos::vesting::v1beta1::BaseVestingAccount)},
        { 18, 28, -1, sizeof(::cosmos::vesting::v1beta1::ContinuousVestingAccount)},
        { 30, 39, -1, sizeof(::cosmos::vesting::v1beta1::DelayedVestingAccount)},
        { 40, -1, -1, sizeof(::cosmos::vesting::v1beta1::Period)},
        { 50, 61, -1, sizeof(::cosmos::vesting::v1beta1::PeriodicVestingAccount)},
        { 64, 73, -1, sizeof(::cosmos::vesting::v1beta1::PermanentLockedAccount)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::vesting::v1beta1::_BaseVestingAccount_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_ContinuousVestingAccount_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_DelayedVestingAccount_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_Period_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_PeriodicVestingAccount_default_instance_._instance,
    &::cosmos::vesting::v1beta1::_PermanentLockedAccount_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$cosmos/vesting/v1beta1/vesting.proto\022\026"
    "cosmos.vesting.v1beta1\032\021amino/amino.prot"
    "o\032\024gogoproto/gogo.proto\032\036cosmos/base/v1b"
    "eta1/coin.proto\032\036cosmos/auth/v1beta1/aut"
    "h.proto\"\233\004\n\022BaseVestingAccount\022I\n\014base_a"
    "ccount\030\001 \001(\0132 .cosmos.auth.v1beta1.BaseA"
    "ccountB\004\320\336\037\001R\013baseAccount\022{\n\020original_ve"
    "sting\030\002 \003(\0132\031.cosmos.base.v1beta1.CoinB5"
    "\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/typ"
    "es.Coins\250\347\260*\001R\017originalVesting\022w\n\016delega"
    "ted_free\030\003 \003(\0132\031.cosmos.base.v1beta1.Coi"
    "nB5\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/"
    "types.Coins\250\347\260*\001R\rdelegatedFree\022}\n\021deleg"
    "ated_vesting\030\004 \003(\0132\031.cosmos.base.v1beta1"
    ".CoinB5\310\336\037\000\252\337\037(github.com/cosmos/cosmos-"
    "sdk/types.Coins\250\347\260*\001R\020delegatedVesting\022\031"
    "\n\010end_time\030\005 \001(\003R\007endTime:*\210\240\037\000\230\240\037\000\212\347\260*\035"
    "cosmos-sdk/BaseVestingAccount\"\317\001\n\030Contin"
    "uousVestingAccount\022b\n\024base_vesting_accou"
    "nt\030\001 \001(\0132*.cosmos.vesting.v1beta1.BaseVe"
    "stingAccountB\004\320\336\037\001R\022baseVestingAccount\022\035"
    "\n\nstart_time\030\002 \001(\003R\tstartTime:0\210\240\037\000\230\240\037\000\212"
    "\347\260*#cosmos-sdk/ContinuousVestingAccount\""
    "\252\001\n\025DelayedVestingAccount\022b\n\024base_vestin"
    "g_account\030\001 \001(\0132*.cosmos.vesting.v1beta1"
    ".BaseVestingAccountB\004\320\336\037\001R\022baseVestingAc"
    "count:-\210\240\037\000\230\240\037\000\212\347\260* cosmos-sdk/DelayedVe"
    "stingAccount\"\220\001\n\006Period\022\026\n\006length\030\001 \001(\003R"
    "\006length\022h\n\006amount\030\002 \003(\0132\031.cosmos.base.v1"
    "beta1.CoinB5\310\336\037\000\252\337\037(github.com/cosmos/co"
    "smos-sdk/types.Coins\250\347\260*\001R\006amount:\004\230\240\037\000\""
    "\237\002\n\026PeriodicVestingAccount\022b\n\024base_vesti"
    "ng_account\030\001 \001(\0132*.cosmos.vesting.v1beta"
    "1.BaseVestingAccountB\004\320\336\037\001R\022baseVestingA"
    "ccount\022\035\n\nstart_time\030\002 \001(\003R\tstartTime\022R\n"
    "\017vesting_periods\030\003 \003(\0132\036.cosmos.vesting."
    "v1beta1.PeriodB\t\310\336\037\000\250\347\260*\001R\016vestingPeriod"
    "s:.\210\240\037\000\230\240\037\000\212\347\260*!cosmos-sdk/PeriodicVesti"
    "ngAccount\"\254\001\n\026PermanentLockedAccount\022b\n\024"
    "base_vesting_account\030\001 \001(\0132*.cosmos.vest"
    "ing.v1beta1.BaseVestingAccountB\004\320\336\037\001R\022ba"
    "seVestingAccount:.\210\240\037\000\230\240\037\000\212\347\260*!cosmos-sd"
    "k/PermanentLockedAccountB\327\001\n\032com.cosmos."
    "vesting.v1beta1B\014VestingProtoP\001Z1github."
    "com/cosmos/cosmos-sdk/x/auth/vesting/typ"
    "es\242\002\003CVX\252\002\026Cosmos.Vesting.V1beta1\312\002\026Cosm"
    "os\\Vesting\\V1beta1\342\002\"Cosmos\\Vesting\\V1be"
    "ta1\\GPBMetadata\352\002\030Cosmos::Vesting::V1bet"
    "a1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto = {
    false,
    false,
    1930,
    descriptor_table_protodef_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    "cosmos/vesting/v1beta1/vesting.proto",
    &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once,
    descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_deps,
    4,
    6,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto::offsets,
    file_level_metadata_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    file_level_enum_descriptors_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
    file_level_service_descriptors_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_getter() {
  return &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto(&descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto);
namespace cosmos {
namespace vesting {
namespace v1beta1 {
// ===================================================================

class BaseVestingAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseVestingAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_._has_bits_);
  static const ::cosmos::auth::v1beta1::BaseAccount& base_account(const BaseVestingAccount* msg);
  static void set_has_base_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::auth::v1beta1::BaseAccount&
BaseVestingAccount::_Internal::base_account(const BaseVestingAccount* msg) {
  return *msg->_impl_.base_account_;
}
void BaseVestingAccount::clear_base_account() {
  if (_impl_.base_account_ != nullptr) _impl_.base_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void BaseVestingAccount::clear_original_vesting() {
  _internal_mutable_original_vesting()->Clear();
}
void BaseVestingAccount::clear_delegated_free() {
  _internal_mutable_delegated_free()->Clear();
}
void BaseVestingAccount::clear_delegated_vesting() {
  _internal_mutable_delegated_vesting()->Clear();
}
BaseVestingAccount::BaseVestingAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.BaseVestingAccount)
}
BaseVestingAccount::BaseVestingAccount(const BaseVestingAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseVestingAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.original_vesting_){from._impl_.original_vesting_}
    , decltype(_impl_.delegated_free_){from._impl_.delegated_free_}
    , decltype(_impl_.delegated_vesting_){from._impl_.delegated_vesting_}
    , decltype(_impl_.base_account_){nullptr}
    , decltype(_impl_.end_time_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_account_ = new ::cosmos::auth::v1beta1::BaseAccount(*from._impl_.base_account_);
  }
  _this->_impl_.end_time_ = from._impl_.end_time_;
  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.BaseVestingAccount)
}

inline void BaseVestingAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.original_vesting_){arena}
    , decltype(_impl_.delegated_free_){arena}
    , decltype(_impl_.delegated_vesting_){arena}
    , decltype(_impl_.base_account_){nullptr}
    , decltype(_impl_.end_time_) { ::int64_t{0} }

  };
}

BaseVestingAccount::~BaseVestingAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.BaseVestingAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseVestingAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_original_vesting()->~RepeatedPtrField();
  _internal_mutable_delegated_free()->~RepeatedPtrField();
  _internal_mutable_delegated_vesting()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_account_;
}

void BaseVestingAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseVestingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.BaseVestingAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_original_vesting()->Clear();
  _internal_mutable_delegated_free()->Clear();
  _internal_mutable_delegated_vesting()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_account_ != nullptr);
    _impl_.base_account_->Clear();
  }
  _impl_.end_time_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseVestingAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_account(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_original_vesting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegated_free(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegated_vesting(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 end_time = 5 [json_name = "endTime"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BaseVestingAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.BaseVestingAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_account(this),
        _Internal::base_account(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_original_vesting_size()); i < n; i++) {
    const auto& repfield = this->_internal_original_vesting(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delegated_free_size()); i < n; i++) {
    const auto& repfield = this->_internal_delegated_free(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delegated_vesting_size()); i < n; i++) {
    const auto& repfield = this->_internal_delegated_vesting(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 end_time = 5 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.BaseVestingAccount)
  return target;
}

::size_t BaseVestingAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.BaseVestingAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin original_vesting = 2 [json_name = "originalVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_original_vesting_size();
  for (const auto& msg : this->_internal_original_vesting()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.base.v1beta1.Coin delegated_free = 3 [json_name = "delegatedFree", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_delegated_free_size();
  for (const auto& msg : this->_internal_delegated_free()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4 [json_name = "delegatedVesting", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_delegated_vesting_size();
  for (const auto& msg : this->_internal_delegated_vesting()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_account_);
  }

  // int64 end_time = 5 [json_name = "endTime"];
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseVestingAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseVestingAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseVestingAccount::GetClassData() const { return &_class_data_; }


void BaseVestingAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseVestingAccount*>(&to_msg);
  auto& from = static_cast<const BaseVestingAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.BaseVestingAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_original_vesting()->MergeFrom(from._internal_original_vesting());
  _this->_internal_mutable_delegated_free()->MergeFrom(from._internal_delegated_free());
  _this->_internal_mutable_delegated_vesting()->MergeFrom(from._internal_delegated_vesting());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_base_account()->::cosmos::auth::v1beta1::BaseAccount::MergeFrom(
        from._internal_base_account());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseVestingAccount::CopyFrom(const BaseVestingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.BaseVestingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseVestingAccount::IsInitialized() const {
  return true;
}

void BaseVestingAccount::InternalSwap(BaseVestingAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_original_vesting()->InternalSwap(other->_internal_mutable_original_vesting());
  _internal_mutable_delegated_free()->InternalSwap(other->_internal_mutable_delegated_free());
  _internal_mutable_delegated_vesting()->InternalSwap(other->_internal_mutable_delegated_vesting());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.end_time_)
      + sizeof(BaseVestingAccount::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(BaseVestingAccount, _impl_.base_account_)>(
          reinterpret_cast<char*>(&_impl_.base_account_),
          reinterpret_cast<char*>(&other->_impl_.base_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseVestingAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_getter, &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once,
      file_level_metadata_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[0]);
}
// ===================================================================

class ContinuousVestingAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<ContinuousVestingAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_._has_bits_);
  static const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account(const ContinuousVestingAccount* msg);
  static void set_has_base_vesting_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::vesting::v1beta1::BaseVestingAccount&
ContinuousVestingAccount::_Internal::base_vesting_account(const ContinuousVestingAccount* msg) {
  return *msg->_impl_.base_vesting_account_;
}
ContinuousVestingAccount::ContinuousVestingAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.ContinuousVestingAccount)
}
ContinuousVestingAccount::ContinuousVestingAccount(const ContinuousVestingAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContinuousVestingAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_vesting_account_){nullptr}
    , decltype(_impl_.start_time_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_vesting_account_ = new ::cosmos::vesting::v1beta1::BaseVestingAccount(*from._impl_.base_vesting_account_);
  }
  _this->_impl_.start_time_ = from._impl_.start_time_;
  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.ContinuousVestingAccount)
}

inline void ContinuousVestingAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_vesting_account_){nullptr}
    , decltype(_impl_.start_time_) { ::int64_t{0} }

  };
}

ContinuousVestingAccount::~ContinuousVestingAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContinuousVestingAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_vesting_account_;
}

void ContinuousVestingAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContinuousVestingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_vesting_account_ != nullptr);
    _impl_.base_vesting_account_->Clear();
  }
  _impl_.start_time_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContinuousVestingAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_vesting_account(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 start_time = 2 [json_name = "startTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContinuousVestingAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_vesting_account(this),
        _Internal::base_vesting_account(this).GetCachedSize(), target, stream);
  }

  // int64 start_time = 2 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  return target;
}

::size_t ContinuousVestingAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_vesting_account_);
  }

  // int64 start_time = 2 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContinuousVestingAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContinuousVestingAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContinuousVestingAccount::GetClassData() const { return &_class_data_; }


void ContinuousVestingAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContinuousVestingAccount*>(&to_msg);
  auto& from = static_cast<const ContinuousVestingAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_base_vesting_account()->::cosmos::vesting::v1beta1::BaseVestingAccount::MergeFrom(
        from._internal_base_vesting_account());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContinuousVestingAccount::CopyFrom(const ContinuousVestingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.ContinuousVestingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContinuousVestingAccount::IsInitialized() const {
  return true;
}

void ContinuousVestingAccount::InternalSwap(ContinuousVestingAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_.start_time_)
      + sizeof(ContinuousVestingAccount::_impl_.start_time_)
      - PROTOBUF_FIELD_OFFSET(ContinuousVestingAccount, _impl_.base_vesting_account_)>(
          reinterpret_cast<char*>(&_impl_.base_vesting_account_),
          reinterpret_cast<char*>(&other->_impl_.base_vesting_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContinuousVestingAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_getter, &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once,
      file_level_metadata_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[1]);
}
// ===================================================================

class DelayedVestingAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<DelayedVestingAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DelayedVestingAccount, _impl_._has_bits_);
  static const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account(const DelayedVestingAccount* msg);
  static void set_has_base_vesting_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::vesting::v1beta1::BaseVestingAccount&
DelayedVestingAccount::_Internal::base_vesting_account(const DelayedVestingAccount* msg) {
  return *msg->_impl_.base_vesting_account_;
}
DelayedVestingAccount::DelayedVestingAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.DelayedVestingAccount)
}
DelayedVestingAccount::DelayedVestingAccount(const DelayedVestingAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelayedVestingAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_vesting_account_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_vesting_account_ = new ::cosmos::vesting::v1beta1::BaseVestingAccount(*from._impl_.base_vesting_account_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.DelayedVestingAccount)
}

inline void DelayedVestingAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_vesting_account_){nullptr}
  };
}

DelayedVestingAccount::~DelayedVestingAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.DelayedVestingAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelayedVestingAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_vesting_account_;
}

void DelayedVestingAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelayedVestingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_vesting_account_ != nullptr);
    _impl_.base_vesting_account_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelayedVestingAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_vesting_account(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DelayedVestingAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_vesting_account(this),
        _Internal::base_vesting_account(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.DelayedVestingAccount)
  return target;
}

::size_t DelayedVestingAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_vesting_account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelayedVestingAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelayedVestingAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelayedVestingAccount::GetClassData() const { return &_class_data_; }


void DelayedVestingAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelayedVestingAccount*>(&to_msg);
  auto& from = static_cast<const DelayedVestingAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_base_vesting_account()->::cosmos::vesting::v1beta1::BaseVestingAccount::MergeFrom(
        from._internal_base_vesting_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelayedVestingAccount::CopyFrom(const DelayedVestingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.DelayedVestingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelayedVestingAccount::IsInitialized() const {
  return true;
}

void DelayedVestingAccount::InternalSwap(DelayedVestingAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.base_vesting_account_, other->_impl_.base_vesting_account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelayedVestingAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_getter, &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once,
      file_level_metadata_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[2]);
}
// ===================================================================

class Period::_Internal {
 public:
};

void Period::clear_amount() {
  _internal_mutable_amount()->Clear();
}
Period::Period(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.Period)
}
Period::Period(const Period& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Period* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){from._impl_.amount_}
    , decltype(_impl_.length_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.length_ = from._impl_.length_;
  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.Period)
}

inline void Period::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){arena}
    , decltype(_impl_.length_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Period::~Period() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.Period)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Period::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_amount()->~RepeatedPtrField();
}

void Period::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Period::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.Period)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_amount()->Clear();
  _impl_.length_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Period::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 length = 1 [json_name = "length"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Period::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.Period)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 length = 1 [json_name = "length"];
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_length(), target);
  }

  // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_amount_size()); i < n; i++) {
    const auto& repfield = this->_internal_amount(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.Period)
  return target;
}

::size_t Period::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.Period)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->_internal_amount()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 length = 1 [json_name = "length"];
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Period::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Period::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Period::GetClassData() const { return &_class_data_; }


void Period::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Period*>(&to_msg);
  auto& from = static_cast<const Period&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.Period)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amount()->MergeFrom(from._internal_amount());
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Period::CopyFrom(const Period& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.Period)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Period::IsInitialized() const {
  return true;
}

void Period::InternalSwap(Period* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_amount()->InternalSwap(other->_internal_mutable_amount());

  swap(_impl_.length_, other->_impl_.length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Period::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_getter, &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once,
      file_level_metadata_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[3]);
}
// ===================================================================

class PeriodicVestingAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodicVestingAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_._has_bits_);
  static const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account(const PeriodicVestingAccount* msg);
  static void set_has_base_vesting_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::vesting::v1beta1::BaseVestingAccount&
PeriodicVestingAccount::_Internal::base_vesting_account(const PeriodicVestingAccount* msg) {
  return *msg->_impl_.base_vesting_account_;
}
PeriodicVestingAccount::PeriodicVestingAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.PeriodicVestingAccount)
}
PeriodicVestingAccount::PeriodicVestingAccount(const PeriodicVestingAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PeriodicVestingAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vesting_periods_){from._impl_.vesting_periods_}
    , decltype(_impl_.base_vesting_account_){nullptr}
    , decltype(_impl_.start_time_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_vesting_account_ = new ::cosmos::vesting::v1beta1::BaseVestingAccount(*from._impl_.base_vesting_account_);
  }
  _this->_impl_.start_time_ = from._impl_.start_time_;
  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.PeriodicVestingAccount)
}

inline void PeriodicVestingAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vesting_periods_){arena}
    , decltype(_impl_.base_vesting_account_){nullptr}
    , decltype(_impl_.start_time_) { ::int64_t{0} }

  };
}

PeriodicVestingAccount::~PeriodicVestingAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeriodicVestingAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_vesting_periods()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_vesting_account_;
}

void PeriodicVestingAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PeriodicVestingAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vesting_periods()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_vesting_account_ != nullptr);
    _impl_.base_vesting_account_->Clear();
  }
  _impl_.start_time_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PeriodicVestingAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_vesting_account(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 start_time = 2 [json_name = "startTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vesting_periods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PeriodicVestingAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_vesting_account(this),
        _Internal::base_vesting_account(this).GetCachedSize(), target, stream);
  }

  // int64 start_time = 2 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_start_time(), target);
  }

  // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vesting_periods_size()); i < n; i++) {
    const auto& repfield = this->_internal_vesting_periods(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  return target;
}

::size_t PeriodicVestingAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3 [json_name = "vestingPeriods", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_vesting_periods_size();
  for (const auto& msg : this->_internal_vesting_periods()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_vesting_account_);
  }

  // int64 start_time = 2 [json_name = "startTime"];
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PeriodicVestingAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PeriodicVestingAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PeriodicVestingAccount::GetClassData() const { return &_class_data_; }


void PeriodicVestingAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PeriodicVestingAccount*>(&to_msg);
  auto& from = static_cast<const PeriodicVestingAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_vesting_periods()->MergeFrom(from._internal_vesting_periods());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_base_vesting_account()->::cosmos::vesting::v1beta1::BaseVestingAccount::MergeFrom(
        from._internal_base_vesting_account());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PeriodicVestingAccount::CopyFrom(const PeriodicVestingAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.PeriodicVestingAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodicVestingAccount::IsInitialized() const {
  return true;
}

void PeriodicVestingAccount::InternalSwap(PeriodicVestingAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_vesting_periods()->InternalSwap(other->_internal_mutable_vesting_periods());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.start_time_)
      + sizeof(PeriodicVestingAccount::_impl_.start_time_)
      - PROTOBUF_FIELD_OFFSET(PeriodicVestingAccount, _impl_.base_vesting_account_)>(
          reinterpret_cast<char*>(&_impl_.base_vesting_account_),
          reinterpret_cast<char*>(&other->_impl_.base_vesting_account_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PeriodicVestingAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_getter, &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once,
      file_level_metadata_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[4]);
}
// ===================================================================

class PermanentLockedAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<PermanentLockedAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PermanentLockedAccount, _impl_._has_bits_);
  static const ::cosmos::vesting::v1beta1::BaseVestingAccount& base_vesting_account(const PermanentLockedAccount* msg);
  static void set_has_base_vesting_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::vesting::v1beta1::BaseVestingAccount&
PermanentLockedAccount::_Internal::base_vesting_account(const PermanentLockedAccount* msg) {
  return *msg->_impl_.base_vesting_account_;
}
PermanentLockedAccount::PermanentLockedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.vesting.v1beta1.PermanentLockedAccount)
}
PermanentLockedAccount::PermanentLockedAccount(const PermanentLockedAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PermanentLockedAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_vesting_account_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_vesting_account_ = new ::cosmos::vesting::v1beta1::BaseVestingAccount(*from._impl_.base_vesting_account_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.vesting.v1beta1.PermanentLockedAccount)
}

inline void PermanentLockedAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_vesting_account_){nullptr}
  };
}

PermanentLockedAccount::~PermanentLockedAccount() {
  // @@protoc_insertion_point(destructor:cosmos.vesting.v1beta1.PermanentLockedAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PermanentLockedAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_vesting_account_;
}

void PermanentLockedAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PermanentLockedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_vesting_account_ != nullptr);
    _impl_.base_vesting_account_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermanentLockedAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_vesting_account(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PermanentLockedAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_vesting_account(this),
        _Internal::base_vesting_account(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.vesting.v1beta1.PermanentLockedAccount)
  return target;
}

::size_t PermanentLockedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1 [json_name = "baseVestingAccount", (.gogoproto.embed) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_vesting_account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermanentLockedAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PermanentLockedAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermanentLockedAccount::GetClassData() const { return &_class_data_; }


void PermanentLockedAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PermanentLockedAccount*>(&to_msg);
  auto& from = static_cast<const PermanentLockedAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_base_vesting_account()->::cosmos::vesting::v1beta1::BaseVestingAccount::MergeFrom(
        from._internal_base_vesting_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermanentLockedAccount::CopyFrom(const PermanentLockedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.vesting.v1beta1.PermanentLockedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermanentLockedAccount::IsInitialized() const {
  return true;
}

void PermanentLockedAccount::InternalSwap(PermanentLockedAccount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.base_vesting_account_, other->_impl_.base_vesting_account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermanentLockedAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_getter, &descriptor_table_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto_once,
      file_level_metadata_cosmos_2fvesting_2fv1beta1_2fvesting_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::vesting::v1beta1::BaseVestingAccount*
Arena::CreateMaybeMessage< ::cosmos::vesting::v1beta1::BaseVestingAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::vesting::v1beta1::BaseVestingAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::vesting::v1beta1::ContinuousVestingAccount*
Arena::CreateMaybeMessage< ::cosmos::vesting::v1beta1::ContinuousVestingAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::vesting::v1beta1::ContinuousVestingAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::vesting::v1beta1::DelayedVestingAccount*
Arena::CreateMaybeMessage< ::cosmos::vesting::v1beta1::DelayedVestingAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::vesting::v1beta1::DelayedVestingAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::vesting::v1beta1::Period*
Arena::CreateMaybeMessage< ::cosmos::vesting::v1beta1::Period >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::vesting::v1beta1::Period >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::vesting::v1beta1::PeriodicVestingAccount*
Arena::CreateMaybeMessage< ::cosmos::vesting::v1beta1::PeriodicVestingAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::vesting::v1beta1::PeriodicVestingAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::vesting::v1beta1::PermanentLockedAccount*
Arena::CreateMaybeMessage< ::cosmos::vesting::v1beta1::PermanentLockedAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::vesting::v1beta1::PermanentLockedAccount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

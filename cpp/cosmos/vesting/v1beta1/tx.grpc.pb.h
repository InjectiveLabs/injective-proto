// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/vesting/v1beta1/tx.proto
#ifndef GRPC_cosmos_2fvesting_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_cosmos_2fvesting_2fv1beta1_2ftx_2eproto__INCLUDED

#include "cosmos/vesting/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace vesting {
namespace v1beta1 {

// Msg defines the bank Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.vesting.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CreateVestingAccount defines a method that enables creating a vesting
    // account.
    virtual ::grpc::Status CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>> AsyncCreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>>(AsyncCreateVestingAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>> PrepareAsyncCreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>>(PrepareAsyncCreateVestingAccountRaw(context, request, cq));
    }
    // CreatePermanentLockedAccount defines a method that enables creating a permanent
    // locked account.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>> AsyncCreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>>(AsyncCreatePermanentLockedAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>> PrepareAsyncCreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>>(PrepareAsyncCreatePermanentLockedAccountRaw(context, request, cq));
    }
    // CreatePeriodicVestingAccount defines a method that enables creating a
    // periodic vesting account.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>> AsyncCreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>>(AsyncCreatePeriodicVestingAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>> PrepareAsyncCreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>>(PrepareAsyncCreatePeriodicVestingAccountRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // CreateVestingAccount defines a method that enables creating a vesting
      // account.
      virtual void CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CreatePermanentLockedAccount defines a method that enables creating a permanent
      // locked account.
      //
      // Since: cosmos-sdk 0.46
      virtual void CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CreatePeriodicVestingAccount defines a method that enables creating a
      // periodic vesting account.
      //
      // Since: cosmos-sdk 0.46
      virtual void CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* AsyncCreateVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* PrepareAsyncCreateVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* AsyncCreatePermanentLockedAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* PrepareAsyncCreatePermanentLockedAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* AsyncCreatePeriodicVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* PrepareAsyncCreatePeriodicVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>> AsyncCreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>>(AsyncCreateVestingAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>> PrepareAsyncCreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>>(PrepareAsyncCreateVestingAccountRaw(context, request, cq));
    }
    ::grpc::Status CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>> AsyncCreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>>(AsyncCreatePermanentLockedAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>> PrepareAsyncCreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>>(PrepareAsyncCreatePermanentLockedAccountRaw(context, request, cq));
    }
    ::grpc::Status CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>> AsyncCreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>>(AsyncCreatePeriodicVestingAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>> PrepareAsyncCreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>>(PrepareAsyncCreatePeriodicVestingAccountRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response, std::function<void(::grpc::Status)>) override;
      void CreatePermanentLockedAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response, std::function<void(::grpc::Status)>) override;
      void CreatePeriodicVestingAccount(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* AsyncCreateVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* PrepareAsyncCreateVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* AsyncCreatePermanentLockedAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* PrepareAsyncCreatePermanentLockedAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* AsyncCreatePeriodicVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* PrepareAsyncCreatePeriodicVestingAccountRaw(::grpc::ClientContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateVestingAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePermanentLockedAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePeriodicVestingAccount_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CreateVestingAccount defines a method that enables creating a vesting
    // account.
    virtual ::grpc::Status CreateVestingAccount(::grpc::ServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response);
    // CreatePermanentLockedAccount defines a method that enables creating a permanent
    // locked account.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status CreatePermanentLockedAccount(::grpc::ServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response);
    // CreatePeriodicVestingAccount defines a method that enables creating a
    // periodic vesting account.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status CreatePeriodicVestingAccount(::grpc::ServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateVestingAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVestingAccount(::grpc::ServerContext* context, ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePermanentLockedAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePermanentLockedAccount() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreatePermanentLockedAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePermanentLockedAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePermanentLockedAccount(::grpc::ServerContext* context, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePeriodicVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePeriodicVestingAccount() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreatePeriodicVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePeriodicVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePeriodicVestingAccount(::grpc::ServerContext* context, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateVestingAccount<WithAsyncMethod_CreatePermanentLockedAccount<WithAsyncMethod_CreatePeriodicVestingAccount<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateVestingAccount() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* response) { return this->CreateVestingAccount(context, request, response); }));}
    void SetMessageAllocatorFor_CreateVestingAccount(
        ::grpc::MessageAllocator< ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVestingAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreatePermanentLockedAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePermanentLockedAccount() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* response) { return this->CreatePermanentLockedAccount(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePermanentLockedAccount(
        ::grpc::MessageAllocator< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePermanentLockedAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePermanentLockedAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePermanentLockedAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreatePeriodicVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePeriodicVestingAccount() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* request, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* response) { return this->CreatePeriodicVestingAccount(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePeriodicVestingAccount(
        ::grpc::MessageAllocator< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePeriodicVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePeriodicVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePeriodicVestingAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateVestingAccount<WithCallbackMethod_CreatePermanentLockedAccount<WithCallbackMethod_CreatePeriodicVestingAccount<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateVestingAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePermanentLockedAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePermanentLockedAccount() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreatePermanentLockedAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePermanentLockedAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePeriodicVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePeriodicVestingAccount() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreatePeriodicVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePeriodicVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateVestingAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVestingAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePermanentLockedAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePermanentLockedAccount() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreatePermanentLockedAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePermanentLockedAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePermanentLockedAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePeriodicVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePeriodicVestingAccount() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreatePeriodicVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePeriodicVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePeriodicVestingAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateVestingAccount() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateVestingAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateVestingAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePermanentLockedAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePermanentLockedAccount() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePermanentLockedAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePermanentLockedAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePermanentLockedAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePermanentLockedAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePeriodicVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePeriodicVestingAccount() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePeriodicVestingAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePeriodicVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePeriodicVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePeriodicVestingAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateVestingAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::vesting::v1beta1::MsgCreateVestingAccount, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* streamer) {
                       return this->StreamedCreateVestingAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreateVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateVestingAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::vesting::v1beta1::MsgCreateVestingAccount,::cosmos::vesting::v1beta1::MsgCreateVestingAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePermanentLockedAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePermanentLockedAccount() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* streamer) {
                       return this->StreamedCreatePermanentLockedAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePermanentLockedAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePermanentLockedAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePermanentLockedAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccount,::cosmos::vesting::v1beta1::MsgCreatePermanentLockedAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePeriodicVestingAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePeriodicVestingAccount() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* streamer) {
                       return this->StreamedCreatePeriodicVestingAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePeriodicVestingAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePeriodicVestingAccount(::grpc::ServerContext* /*context*/, const ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount* /*request*/, ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePeriodicVestingAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccount,::cosmos::vesting::v1beta1::MsgCreatePeriodicVestingAccountResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateVestingAccount<WithStreamedUnaryMethod_CreatePermanentLockedAccount<WithStreamedUnaryMethod_CreatePeriodicVestingAccount<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateVestingAccount<WithStreamedUnaryMethod_CreatePermanentLockedAccount<WithStreamedUnaryMethod_CreatePeriodicVestingAccount<Service > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace vesting
}  // namespace cosmos


#endif  // GRPC_cosmos_2fvesting_2fv1beta1_2ftx_2eproto__INCLUDED

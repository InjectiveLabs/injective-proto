// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/tendermint/v1beta1/types.proto

#include "cosmos/base/tendermint/v1beta1/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Block::Block(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.evidence_)*/nullptr
  , /*decltype(_impl_.last_commit_)*/nullptr} {}
struct BlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockDefaultTypeInternal() {}
  union {
    Block _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockDefaultTypeInternal _Block_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chain_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.last_commit_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validators_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.next_validators_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.consensus_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.app_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.last_results_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.evidence_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposer_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.last_block_id_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}
} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.evidence_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Block, _impl_.last_commit_),
    0,
    1,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.chain_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_block_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_commit_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.data_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.validators_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.next_validators_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.consensus_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.app_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.last_results_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.evidence_hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::tendermint::v1beta1::Header, _impl_.proposer_address_),
    0,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::cosmos::base::tendermint::v1beta1::Block)},
        { 16, 38, -1, sizeof(::cosmos::base::tendermint::v1beta1::Header)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::base::tendermint::v1beta1::_Block_default_instance_._instance,
    &::cosmos::base::tendermint::v1beta1::_Header_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n*cosmos/base/tendermint/v1beta1/types.p"
    "roto\022\036cosmos.base.tendermint.v1beta1\032\024go"
    "goproto/gogo.proto\032\034tendermint/types/typ"
    "es.proto\032\037tendermint/types/evidence.prot"
    "o\032\036tendermint/version/types.proto\032\037googl"
    "e/protobuf/timestamp.proto\032\021amino/amino."
    "proto\"\213\002\n\005Block\022I\n\006header\030\001 \001(\0132&.cosmos"
    ".base.tendermint.v1beta1.HeaderB\t\310\336\037\000\250\347\260"
    "*\001R\006header\0225\n\004data\030\002 \001(\0132\026.tendermint.ty"
    "pes.DataB\t\310\336\037\000\250\347\260*\001R\004data\022E\n\010evidence\030\003 "
    "\001(\0132\036.tendermint.types.EvidenceListB\t\310\336\037"
    "\000\250\347\260*\001R\010evidence\0229\n\013last_commit\030\004 \001(\0132\030."
    "tendermint.types.CommitR\nlastCommit\"\365\004\n\006"
    "Header\022B\n\007version\030\001 \001(\0132\035.tendermint.ver"
    "sion.ConsensusB\t\310\336\037\000\250\347\260*\001R\007version\022&\n\010ch"
    "ain_id\030\002 \001(\tB\013\342\336\037\007ChainIDR\007chainId\022\026\n\006he"
    "ight\030\003 \001(\003R\006height\022=\n\004time\030\004 \001(\0132\032.googl"
    "e.protobuf.TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\004tim"
    "e\022H\n\rlast_block_id\030\005 \001(\0132\031.tendermint.ty"
    "pes.BlockIDB\t\310\336\037\000\250\347\260*\001R\013lastBlockId\022(\n\020l"
    "ast_commit_hash\030\006 \001(\014R\016lastCommitHash\022\033\n"
    "\tdata_hash\030\007 \001(\014R\010dataHash\022\'\n\017validators"
    "_hash\030\010 \001(\014R\016validatorsHash\0220\n\024next_vali"
    "dators_hash\030\t \001(\014R\022nextValidatorsHash\022%\n"
    "\016consensus_hash\030\n \001(\014R\rconsensusHash\022\031\n\010"
    "app_hash\030\013 \001(\014R\007appHash\022*\n\021last_results_"
    "hash\030\014 \001(\014R\017lastResultsHash\022#\n\revidence_"
    "hash\030\r \001(\014R\014evidenceHash\022)\n\020proposer_add"
    "ress\030\016 \001(\tR\017proposerAddressB\377\001\n\"com.cosm"
    "os.base.tendermint.v1beta1B\nTypesProtoP\001"
    "Z2github.com/cosmos/cosmos-sdk/client/gr"
    "pc/tmservice\242\002\003CBT\252\002\036Cosmos.Base.Tenderm"
    "int.V1beta1\312\002\036Cosmos\\Base\\Tendermint\\V1b"
    "eta1\342\002*Cosmos\\Base\\Tendermint\\V1beta1\\GP"
    "BMetadata\352\002!Cosmos::Base::Tendermint::V1"
    "beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_deps[6] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2ftypes_2fevidence_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
        &::descriptor_table_tendermint_2fversion_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto = {
    false,
    false,
    1413,
    descriptor_table_protodef_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    "cosmos/base/tendermint/v1beta1/types.proto",
    &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once,
    descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_deps,
    6,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto::offsets,
    file_level_metadata_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    file_level_enum_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_getter() {
  return &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto(&descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto);
namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {
// ===================================================================

class Block::_Internal {
 public:
  using HasBits = decltype(std::declval<Block>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Block, _impl_._has_bits_);
  static const ::cosmos::base::tendermint::v1beta1::Header& header(const Block* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::types::Data& data(const Block* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tendermint::types::EvidenceList& evidence(const Block* msg);
  static void set_has_evidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tendermint::types::Commit& last_commit(const Block* msg);
  static void set_has_last_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::cosmos::base::tendermint::v1beta1::Header&
Block::_Internal::header(const Block* msg) {
  return *msg->_impl_.header_;
}
const ::tendermint::types::Data&
Block::_Internal::data(const Block* msg) {
  return *msg->_impl_.data_;
}
const ::tendermint::types::EvidenceList&
Block::_Internal::evidence(const Block* msg) {
  return *msg->_impl_.evidence_;
}
const ::tendermint::types::Commit&
Block::_Internal::last_commit(const Block* msg) {
  return *msg->_impl_.last_commit_;
}
void Block::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Block::clear_evidence() {
  if (_impl_.evidence_ != nullptr) _impl_.evidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Block::clear_last_commit() {
  if (_impl_.last_commit_ != nullptr) _impl_.last_commit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.tendermint.v1beta1.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Block* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.evidence_){nullptr}
    , decltype(_impl_.last_commit_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::cosmos::base::tendermint::v1beta1::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.data_ = new ::tendermint::types::Data(*from._impl_.data_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.evidence_ = new ::tendermint::types::EvidenceList(*from._impl_.evidence_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.last_commit_ = new ::tendermint::types::Commit(*from._impl_.last_commit_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.tendermint.v1beta1.Block)
}

inline void Block::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.evidence_){nullptr}
    , decltype(_impl_.last_commit_){nullptr}
  };
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:cosmos.base.tendermint.v1beta1.Block)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Block::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.data_;
  if (this != internal_default_instance()) delete _impl_.evidence_;
  if (this != internal_default_instance()) delete _impl_.last_commit_;
}

void Block::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.tendermint.v1beta1.Block)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.evidence_ != nullptr);
      _impl_.evidence_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.last_commit_ != nullptr);
      _impl_.last_commit_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_evidence(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_commit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Block::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.tendermint.v1beta1.Block)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::evidence(this),
        _Internal::evidence(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::last_commit(this),
        _Internal::last_commit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.tendermint.v1beta1.Block)
  return target;
}

::size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.tendermint.v1beta1.Block)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .cosmos.base.tendermint.v1beta1.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .tendermint.types.Data data = 2 [json_name = "data", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

    // .tendermint.types.EvidenceList evidence = 3 [json_name = "evidence", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.evidence_);
    }

    // .tendermint.types.Commit last_commit = 4 [json_name = "lastCommit"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_commit_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Block::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Block::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Block::GetClassData() const { return &_class_data_; }


void Block::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Block*>(&to_msg);
  auto& from = static_cast<const Block&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.tendermint.v1beta1.Block)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::cosmos::base::tendermint::v1beta1::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::tendermint::types::Data::MergeFrom(
          from._internal_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_evidence()->::tendermint::types::EvidenceList::MergeFrom(
          from._internal_evidence());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_last_commit()->::tendermint::types::Commit::MergeFrom(
          from._internal_last_commit());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.tendermint.v1beta1.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, _impl_.last_commit_)
      + sizeof(Block::_impl_.last_commit_)
      - PROTOBUF_FIELD_OFFSET(Block, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[0]);
}
// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static const ::tendermint::version::Consensus& version(const Header* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Header* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tendermint::types::BlockID& last_block_id(const Header* msg);
  static void set_has_last_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tendermint::version::Consensus&
Header::_Internal::version(const Header* msg) {
  return *msg->_impl_.version_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Header::_Internal::time(const Header* msg) {
  return *msg->_impl_.time_;
}
const ::tendermint::types::BlockID&
Header::_Internal::last_block_id(const Header* msg) {
  return *msg->_impl_.last_block_id_;
}
void Header::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Header::clear_time() {
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Header::clear_last_block_id() {
  if (_impl_.last_block_id_ != nullptr) _impl_.last_block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.tendermint.v1beta1.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.last_commit_hash_) {}

    , decltype(_impl_.data_hash_) {}

    , decltype(_impl_.validators_hash_) {}

    , decltype(_impl_.next_validators_hash_) {}

    , decltype(_impl_.consensus_hash_) {}

    , decltype(_impl_.app_hash_) {}

    , decltype(_impl_.last_results_hash_) {}

    , decltype(_impl_.evidence_hash_) {}

    , decltype(_impl_.proposer_address_) {}

    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_block_id_){nullptr}
    , decltype(_impl_.height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), _this->GetArenaForAllocation());
  }
  _impl_.last_commit_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_commit_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_commit_hash().empty()) {
    _this->_impl_.last_commit_hash_.Set(from._internal_last_commit_hash(), _this->GetArenaForAllocation());
  }
  _impl_.data_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_hash().empty()) {
    _this->_impl_.data_hash_.Set(from._internal_data_hash(), _this->GetArenaForAllocation());
  }
  _impl_.validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validators_hash().empty()) {
    _this->_impl_.validators_hash_.Set(from._internal_validators_hash(), _this->GetArenaForAllocation());
  }
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_validators_hash().empty()) {
    _this->_impl_.next_validators_hash_.Set(from._internal_next_validators_hash(), _this->GetArenaForAllocation());
  }
  _impl_.consensus_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.consensus_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consensus_hash().empty()) {
    _this->_impl_.consensus_hash_.Set(from._internal_consensus_hash(), _this->GetArenaForAllocation());
  }
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    _this->_impl_.app_hash_.Set(from._internal_app_hash(), _this->GetArenaForAllocation());
  }
  _impl_.last_results_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_results_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_results_hash().empty()) {
    _this->_impl_.last_results_hash_.Set(from._internal_last_results_hash(), _this->GetArenaForAllocation());
  }
  _impl_.evidence_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.evidence_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_evidence_hash().empty()) {
    _this->_impl_.evidence_hash_.Set(from._internal_evidence_hash(), _this->GetArenaForAllocation());
  }
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer_address().empty()) {
    _this->_impl_.proposer_address_.Set(from._internal_proposer_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.version_ = new ::tendermint::version::Consensus(*from._impl_.version_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.last_block_id_ = new ::tendermint::types::BlockID(*from._impl_.last_block_id_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:cosmos.base.tendermint.v1beta1.Header)
}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.last_commit_hash_) {}

    , decltype(_impl_.data_hash_) {}

    , decltype(_impl_.validators_hash_) {}

    , decltype(_impl_.next_validators_hash_) {}

    , decltype(_impl_.consensus_hash_) {}

    , decltype(_impl_.app_hash_) {}

    , decltype(_impl_.last_results_hash_) {}

    , decltype(_impl_.evidence_hash_) {}

    , decltype(_impl_.proposer_address_) {}

    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_block_id_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_commit_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_commit_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consensus_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.consensus_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_results_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_results_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.evidence_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.evidence_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:cosmos.base.tendermint.v1beta1.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_id_.Destroy();
  _impl_.last_commit_hash_.Destroy();
  _impl_.data_hash_.Destroy();
  _impl_.validators_hash_.Destroy();
  _impl_.next_validators_hash_.Destroy();
  _impl_.consensus_hash_.Destroy();
  _impl_.app_hash_.Destroy();
  _impl_.last_results_hash_.Destroy();
  _impl_.evidence_hash_.Destroy();
  _impl_.proposer_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.last_block_id_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.tendermint.v1beta1.Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  _impl_.last_commit_hash_.ClearToEmpty();
  _impl_.data_hash_.ClearToEmpty();
  _impl_.validators_hash_.ClearToEmpty();
  _impl_.next_validators_hash_.ClearToEmpty();
  _impl_.consensus_hash_.ClearToEmpty();
  _impl_.app_hash_.ClearToEmpty();
  _impl_.last_results_hash_.ClearToEmpty();
  _impl_.evidence_hash_.ClearToEmpty();
  _impl_.proposer_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.last_block_id_ != nullptr);
      _impl_.last_block_id_->Clear();
    }
  }
  _impl_.height_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.tendermint.v1beta1.Header.chain_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_last_commit_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data_hash = 7 [json_name = "dataHash"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes validators_hash = 8 [json_name = "validatorsHash"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_next_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes consensus_hash = 10 [json_name = "consensusHash"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_consensus_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes app_hash = 11 [json_name = "appHash"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_last_results_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes evidence_hash = 13 [json_name = "evidenceHash"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_evidence_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string proposer_address = 14 [json_name = "proposerAddress"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_proposer_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.tendermint.v1beta1.Header.proposer_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.tendermint.v1beta1.Header)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    const std::string& _s = this->_internal_chain_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.tendermint.v1beta1.Header.chain_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_height(), target);
  }

  // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_block_id(this),
        _Internal::last_block_id(this).GetCachedSize(), target, stream);
  }

  // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
  if (!this->_internal_last_commit_hash().empty()) {
    const std::string& _s = this->_internal_last_commit_hash();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // bytes data_hash = 7 [json_name = "dataHash"];
  if (!this->_internal_data_hash().empty()) {
    const std::string& _s = this->_internal_data_hash();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // bytes validators_hash = 8 [json_name = "validatorsHash"];
  if (!this->_internal_validators_hash().empty()) {
    const std::string& _s = this->_internal_validators_hash();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
  if (!this->_internal_next_validators_hash().empty()) {
    const std::string& _s = this->_internal_next_validators_hash();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // bytes consensus_hash = 10 [json_name = "consensusHash"];
  if (!this->_internal_consensus_hash().empty()) {
    const std::string& _s = this->_internal_consensus_hash();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // bytes app_hash = 11 [json_name = "appHash"];
  if (!this->_internal_app_hash().empty()) {
    const std::string& _s = this->_internal_app_hash();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
  if (!this->_internal_last_results_hash().empty()) {
    const std::string& _s = this->_internal_last_results_hash();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // bytes evidence_hash = 13 [json_name = "evidenceHash"];
  if (!this->_internal_evidence_hash().empty()) {
    const std::string& _s = this->_internal_evidence_hash();
    target = stream->WriteBytesMaybeAliased(13, _s, target);
  }

  // string proposer_address = 14 [json_name = "proposerAddress"];
  if (!this->_internal_proposer_address().empty()) {
    const std::string& _s = this->_internal_proposer_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.tendermint.v1beta1.Header.proposer_address");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.tendermint.v1beta1.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.tendermint.v1beta1.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chain_id());
  }

  // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
  if (!this->_internal_last_commit_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_last_commit_hash());
  }

  // bytes data_hash = 7 [json_name = "dataHash"];
  if (!this->_internal_data_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data_hash());
  }

  // bytes validators_hash = 8 [json_name = "validatorsHash"];
  if (!this->_internal_validators_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_validators_hash());
  }

  // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
  if (!this->_internal_next_validators_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_next_validators_hash());
  }

  // bytes consensus_hash = 10 [json_name = "consensusHash"];
  if (!this->_internal_consensus_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_consensus_hash());
  }

  // bytes app_hash = 11 [json_name = "appHash"];
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_app_hash());
  }

  // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
  if (!this->_internal_last_results_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_last_results_hash());
  }

  // bytes evidence_hash = 13 [json_name = "evidenceHash"];
  if (!this->_internal_evidence_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_evidence_hash());
  }

  // string proposer_address = 14 [json_name = "proposerAddress"];
  if (!this->_internal_proposer_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_proposer_address());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_);
    }

    // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_block_id_);
    }

  }
  // int64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.tendermint.v1beta1.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_last_commit_hash().empty()) {
    _this->_internal_set_last_commit_hash(from._internal_last_commit_hash());
  }
  if (!from._internal_data_hash().empty()) {
    _this->_internal_set_data_hash(from._internal_data_hash());
  }
  if (!from._internal_validators_hash().empty()) {
    _this->_internal_set_validators_hash(from._internal_validators_hash());
  }
  if (!from._internal_next_validators_hash().empty()) {
    _this->_internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  if (!from._internal_consensus_hash().empty()) {
    _this->_internal_set_consensus_hash(from._internal_consensus_hash());
  }
  if (!from._internal_app_hash().empty()) {
    _this->_internal_set_app_hash(from._internal_app_hash());
  }
  if (!from._internal_last_results_hash().empty()) {
    _this->_internal_set_last_results_hash(from._internal_last_results_hash());
  }
  if (!from._internal_evidence_hash().empty()) {
    _this->_internal_set_evidence_hash(from._internal_evidence_hash());
  }
  if (!from._internal_proposer_address().empty()) {
    _this->_internal_set_proposer_address(from._internal_proposer_address());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::tendermint::version::Consensus::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_last_block_id()->::tendermint::types::BlockID::MergeFrom(
          from._internal_last_block_id());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.tendermint.v1beta1.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, lhs_arena,
                                       &other->_impl_.chain_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_commit_hash_, lhs_arena,
                                       &other->_impl_.last_commit_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_hash_, lhs_arena,
                                       &other->_impl_.data_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validators_hash_, lhs_arena,
                                       &other->_impl_.validators_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_validators_hash_, lhs_arena,
                                       &other->_impl_.next_validators_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.consensus_hash_, lhs_arena,
                                       &other->_impl_.consensus_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_hash_, lhs_arena,
                                       &other->_impl_.app_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_results_hash_, lhs_arena,
                                       &other->_impl_.last_results_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evidence_hash_, lhs_arena,
                                       &other->_impl_.evidence_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposer_address_, lhs_arena,
                                       &other->_impl_.proposer_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.height_)
      + sizeof(Header::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_getter, &descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto_once,
      file_level_metadata_cosmos_2fbase_2ftendermint_2fv1beta1_2ftypes_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::base::tendermint::v1beta1::Block*
Arena::CreateMaybeMessage< ::cosmos::base::tendermint::v1beta1::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::tendermint::v1beta1::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::tendermint::v1beta1::Header*
Arena::CreateMaybeMessage< ::cosmos::base::tendermint::v1beta1::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::tendermint::v1beta1::Header >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

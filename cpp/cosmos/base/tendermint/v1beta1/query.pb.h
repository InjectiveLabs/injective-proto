// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/tendermint/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "google/api/annotations.pb.h"
#include "tendermint/p2p/types.pb.h"
#include "tendermint/types/types.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "cosmos/base/tendermint/v1beta1/types.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "tendermint/types/block.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {
class ABCIQueryRequest;
struct ABCIQueryRequestDefaultTypeInternal;
extern ABCIQueryRequestDefaultTypeInternal _ABCIQueryRequest_default_instance_;
class ABCIQueryResponse;
struct ABCIQueryResponseDefaultTypeInternal;
extern ABCIQueryResponseDefaultTypeInternal _ABCIQueryResponse_default_instance_;
class GetBlockByHeightRequest;
struct GetBlockByHeightRequestDefaultTypeInternal;
extern GetBlockByHeightRequestDefaultTypeInternal _GetBlockByHeightRequest_default_instance_;
class GetBlockByHeightResponse;
struct GetBlockByHeightResponseDefaultTypeInternal;
extern GetBlockByHeightResponseDefaultTypeInternal _GetBlockByHeightResponse_default_instance_;
class GetLatestBlockRequest;
struct GetLatestBlockRequestDefaultTypeInternal;
extern GetLatestBlockRequestDefaultTypeInternal _GetLatestBlockRequest_default_instance_;
class GetLatestBlockResponse;
struct GetLatestBlockResponseDefaultTypeInternal;
extern GetLatestBlockResponseDefaultTypeInternal _GetLatestBlockResponse_default_instance_;
class GetLatestValidatorSetRequest;
struct GetLatestValidatorSetRequestDefaultTypeInternal;
extern GetLatestValidatorSetRequestDefaultTypeInternal _GetLatestValidatorSetRequest_default_instance_;
class GetLatestValidatorSetResponse;
struct GetLatestValidatorSetResponseDefaultTypeInternal;
extern GetLatestValidatorSetResponseDefaultTypeInternal _GetLatestValidatorSetResponse_default_instance_;
class GetNodeInfoRequest;
struct GetNodeInfoRequestDefaultTypeInternal;
extern GetNodeInfoRequestDefaultTypeInternal _GetNodeInfoRequest_default_instance_;
class GetNodeInfoResponse;
struct GetNodeInfoResponseDefaultTypeInternal;
extern GetNodeInfoResponseDefaultTypeInternal _GetNodeInfoResponse_default_instance_;
class GetSyncingRequest;
struct GetSyncingRequestDefaultTypeInternal;
extern GetSyncingRequestDefaultTypeInternal _GetSyncingRequest_default_instance_;
class GetSyncingResponse;
struct GetSyncingResponseDefaultTypeInternal;
extern GetSyncingResponseDefaultTypeInternal _GetSyncingResponse_default_instance_;
class GetValidatorSetByHeightRequest;
struct GetValidatorSetByHeightRequestDefaultTypeInternal;
extern GetValidatorSetByHeightRequestDefaultTypeInternal _GetValidatorSetByHeightRequest_default_instance_;
class GetValidatorSetByHeightResponse;
struct GetValidatorSetByHeightResponseDefaultTypeInternal;
extern GetValidatorSetByHeightResponseDefaultTypeInternal _GetValidatorSetByHeightResponse_default_instance_;
class Module;
struct ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class ProofOp;
struct ProofOpDefaultTypeInternal;
extern ProofOpDefaultTypeInternal _ProofOp_default_instance_;
class ProofOps;
struct ProofOpsDefaultTypeInternal;
extern ProofOpsDefaultTypeInternal _ProofOps_default_instance_;
class Validator;
struct ValidatorDefaultTypeInternal;
extern ValidatorDefaultTypeInternal _Validator_default_instance_;
class VersionInfo;
struct VersionInfoDefaultTypeInternal;
extern VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::base::tendermint::v1beta1::ABCIQueryRequest* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::ABCIQueryRequest>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::ABCIQueryResponse* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::ABCIQueryResponse>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetBlockByHeightRequest>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetBlockByHeightResponse>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetLatestBlockRequest>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetLatestBlockResponse>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetRequest>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetLatestValidatorSetResponse>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetNodeInfoRequest>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetNodeInfoResponse>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetSyncingRequest* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetSyncingRequest>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetSyncingResponse* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetSyncingResponse>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightRequest>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::GetValidatorSetByHeightResponse>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::Module* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::Module>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::ProofOp* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::ProofOp>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::ProofOps* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::ProofOps>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::Validator* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::Validator>(Arena*);
template <>
::cosmos::base::tendermint::v1beta1::VersionInfo* Arena::CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::VersionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace base {
namespace tendermint {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GetValidatorSetByHeightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest) */ {
 public:
  inline GetValidatorSetByHeightRequest() : GetValidatorSetByHeightRequest(nullptr) {}
  ~GetValidatorSetByHeightRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetValidatorSetByHeightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetValidatorSetByHeightRequest(const GetValidatorSetByHeightRequest& from);
  GetValidatorSetByHeightRequest(GetValidatorSetByHeightRequest&& from) noexcept
    : GetValidatorSetByHeightRequest() {
    *this = ::std::move(from);
  }

  inline GetValidatorSetByHeightRequest& operator=(const GetValidatorSetByHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetValidatorSetByHeightRequest& operator=(GetValidatorSetByHeightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetValidatorSetByHeightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetValidatorSetByHeightRequest* internal_default_instance() {
    return reinterpret_cast<const GetValidatorSetByHeightRequest*>(
               &_GetValidatorSetByHeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetValidatorSetByHeightRequest& a, GetValidatorSetByHeightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetValidatorSetByHeightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetValidatorSetByHeightRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetValidatorSetByHeightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetValidatorSetByHeightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetValidatorSetByHeightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetValidatorSetByHeightRequest& from) {
    GetValidatorSetByHeightRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetValidatorSetByHeightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest";
  }
  protected:
  explicit GetValidatorSetByHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::int64_t height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetValidatorSetByHeightResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse) */ {
 public:
  inline GetValidatorSetByHeightResponse() : GetValidatorSetByHeightResponse(nullptr) {}
  ~GetValidatorSetByHeightResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetValidatorSetByHeightResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetValidatorSetByHeightResponse(const GetValidatorSetByHeightResponse& from);
  GetValidatorSetByHeightResponse(GetValidatorSetByHeightResponse&& from) noexcept
    : GetValidatorSetByHeightResponse() {
    *this = ::std::move(from);
  }

  inline GetValidatorSetByHeightResponse& operator=(const GetValidatorSetByHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetValidatorSetByHeightResponse& operator=(GetValidatorSetByHeightResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetValidatorSetByHeightResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetValidatorSetByHeightResponse* internal_default_instance() {
    return reinterpret_cast<const GetValidatorSetByHeightResponse*>(
               &_GetValidatorSetByHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetValidatorSetByHeightResponse& a, GetValidatorSetByHeightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetValidatorSetByHeightResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetValidatorSetByHeightResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetValidatorSetByHeightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetValidatorSetByHeightResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetValidatorSetByHeightResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetValidatorSetByHeightResponse& from) {
    GetValidatorSetByHeightResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetValidatorSetByHeightResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse";
  }
  protected:
  explicit GetValidatorSetByHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 2,
    kPaginationFieldNumber = 3,
    kBlockHeightFieldNumber = 1,
  };
  // repeated .cosmos.base.tendermint.v1beta1.Validator validators = 2 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;

  public:
  void clear_validators() ;
  ::cosmos::base::tendermint::v1beta1::Validator* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator >*
      mutable_validators();
  private:
  const ::cosmos::base::tendermint::v1beta1::Validator& _internal_validators(int index) const;
  ::cosmos::base::tendermint::v1beta1::Validator* _internal_add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Validator>& _internal_validators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Validator>* _internal_mutable_validators();
  public:
  const ::cosmos::base::tendermint::v1beta1::Validator& validators(int index) const;
  ::cosmos::base::tendermint::v1beta1::Validator* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator >&
      validators() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 3 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // int64 block_height = 1 [json_name = "blockHeight"];
  void clear_block_height() ;
  ::int64_t block_height() const;
  void set_block_height(::int64_t value);

  private:
  ::int64_t _internal_block_height() const;
  void _internal_set_block_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator > validators_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    ::int64_t block_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetLatestValidatorSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest) */ {
 public:
  inline GetLatestValidatorSetRequest() : GetLatestValidatorSetRequest(nullptr) {}
  ~GetLatestValidatorSetRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetLatestValidatorSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLatestValidatorSetRequest(const GetLatestValidatorSetRequest& from);
  GetLatestValidatorSetRequest(GetLatestValidatorSetRequest&& from) noexcept
    : GetLatestValidatorSetRequest() {
    *this = ::std::move(from);
  }

  inline GetLatestValidatorSetRequest& operator=(const GetLatestValidatorSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestValidatorSetRequest& operator=(GetLatestValidatorSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLatestValidatorSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLatestValidatorSetRequest* internal_default_instance() {
    return reinterpret_cast<const GetLatestValidatorSetRequest*>(
               &_GetLatestValidatorSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetLatestValidatorSetRequest& a, GetLatestValidatorSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestValidatorSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestValidatorSetRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLatestValidatorSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLatestValidatorSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLatestValidatorSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLatestValidatorSetRequest& from) {
    GetLatestValidatorSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestValidatorSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest";
  }
  protected:
  explicit GetLatestValidatorSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetLatestValidatorSetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse) */ {
 public:
  inline GetLatestValidatorSetResponse() : GetLatestValidatorSetResponse(nullptr) {}
  ~GetLatestValidatorSetResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetLatestValidatorSetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLatestValidatorSetResponse(const GetLatestValidatorSetResponse& from);
  GetLatestValidatorSetResponse(GetLatestValidatorSetResponse&& from) noexcept
    : GetLatestValidatorSetResponse() {
    *this = ::std::move(from);
  }

  inline GetLatestValidatorSetResponse& operator=(const GetLatestValidatorSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestValidatorSetResponse& operator=(GetLatestValidatorSetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLatestValidatorSetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLatestValidatorSetResponse* internal_default_instance() {
    return reinterpret_cast<const GetLatestValidatorSetResponse*>(
               &_GetLatestValidatorSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetLatestValidatorSetResponse& a, GetLatestValidatorSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestValidatorSetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestValidatorSetResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLatestValidatorSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLatestValidatorSetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLatestValidatorSetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLatestValidatorSetResponse& from) {
    GetLatestValidatorSetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestValidatorSetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse";
  }
  protected:
  explicit GetLatestValidatorSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 2,
    kPaginationFieldNumber = 3,
    kBlockHeightFieldNumber = 1,
  };
  // repeated .cosmos.base.tendermint.v1beta1.Validator validators = 2 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;

  public:
  void clear_validators() ;
  ::cosmos::base::tendermint::v1beta1::Validator* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator >*
      mutable_validators();
  private:
  const ::cosmos::base::tendermint::v1beta1::Validator& _internal_validators(int index) const;
  ::cosmos::base::tendermint::v1beta1::Validator* _internal_add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Validator>& _internal_validators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Validator>* _internal_mutable_validators();
  public:
  const ::cosmos::base::tendermint::v1beta1::Validator& validators(int index) const;
  ::cosmos::base::tendermint::v1beta1::Validator* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator >&
      validators() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 3 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // int64 block_height = 1 [json_name = "blockHeight"];
  void clear_block_height() ;
  ::int64_t block_height() const;
  void set_block_height(::int64_t value);

  private:
  ::int64_t _internal_block_height() const;
  void _internal_set_block_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator > validators_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    ::int64_t block_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Validator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.Validator) */ {
 public:
  inline Validator() : Validator(nullptr) {}
  ~Validator() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Validator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Validator(const Validator& from);
  Validator(Validator&& from) noexcept
    : Validator() {
    *this = ::std::move(from);
  }

  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validator& operator=(Validator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Validator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Validator* internal_default_instance() {
    return reinterpret_cast<const Validator*>(
               &_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Validator& a, Validator& b) {
    a.Swap(&b);
  }
  inline void Swap(Validator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Validator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Validator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Validator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Validator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Validator& from) {
    Validator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Validator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.Validator";
  }
  protected:
  explicit Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPubKeyFieldNumber = 2,
    kVotingPowerFieldNumber = 3,
    kProposerPriorityFieldNumber = 4,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .google.protobuf.Any pub_key = 2 [json_name = "pubKey"];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& pub_key() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_pub_key();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_pub_key();
  void set_allocated_pub_key(::PROTOBUF_NAMESPACE_ID::Any* pub_key);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_pub_key() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_pub_key();
  public:
  void unsafe_arena_set_allocated_pub_key(
      ::PROTOBUF_NAMESPACE_ID::Any* pub_key);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_pub_key();
  // int64 voting_power = 3 [json_name = "votingPower"];
  void clear_voting_power() ;
  ::int64_t voting_power() const;
  void set_voting_power(::int64_t value);

  private:
  ::int64_t _internal_voting_power() const;
  void _internal_set_voting_power(::int64_t value);

  public:
  // int64 proposer_priority = 4 [json_name = "proposerPriority"];
  void clear_proposer_priority() ;
  ::int64_t proposer_priority() const;
  void set_proposer_priority(::int64_t value);

  private:
  ::int64_t _internal_proposer_priority() const;
  void _internal_set_proposer_priority(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.Validator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::Any* pub_key_;
    ::int64_t voting_power_;
    ::int64_t proposer_priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetBlockByHeightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest) */ {
 public:
  inline GetBlockByHeightRequest() : GetBlockByHeightRequest(nullptr) {}
  ~GetBlockByHeightRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBlockByHeightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockByHeightRequest(const GetBlockByHeightRequest& from);
  GetBlockByHeightRequest(GetBlockByHeightRequest&& from) noexcept
    : GetBlockByHeightRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockByHeightRequest& operator=(const GetBlockByHeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockByHeightRequest& operator=(GetBlockByHeightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockByHeightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockByHeightRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockByHeightRequest*>(
               &_GetBlockByHeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetBlockByHeightRequest& a, GetBlockByHeightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockByHeightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockByHeightRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockByHeightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockByHeightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockByHeightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockByHeightRequest& from) {
    GetBlockByHeightRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockByHeightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest";
  }
  protected:
  explicit GetBlockByHeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetBlockByHeightResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse) */ {
 public:
  inline GetBlockByHeightResponse() : GetBlockByHeightResponse(nullptr) {}
  ~GetBlockByHeightResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBlockByHeightResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockByHeightResponse(const GetBlockByHeightResponse& from);
  GetBlockByHeightResponse(GetBlockByHeightResponse&& from) noexcept
    : GetBlockByHeightResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockByHeightResponse& operator=(const GetBlockByHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockByHeightResponse& operator=(GetBlockByHeightResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockByHeightResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockByHeightResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockByHeightResponse*>(
               &_GetBlockByHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetBlockByHeightResponse& a, GetBlockByHeightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockByHeightResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockByHeightResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockByHeightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockByHeightResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockByHeightResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockByHeightResponse& from) {
    GetBlockByHeightResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockByHeightResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse";
  }
  protected:
  explicit GetBlockByHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kBlockFieldNumber = 2,
    kSdkBlockFieldNumber = 3,
  };
  // .tendermint.types.BlockID block_id = 1 [json_name = "blockId"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();
  // .tendermint.types.Block block = 2 [json_name = "block"];
  bool has_block() const;
  void clear_block() ;
  const ::tendermint::types::Block& block() const;
  PROTOBUF_NODISCARD ::tendermint::types::Block* release_block();
  ::tendermint::types::Block* mutable_block();
  void set_allocated_block(::tendermint::types::Block* block);
  private:
  const ::tendermint::types::Block& _internal_block() const;
  ::tendermint::types::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tendermint::types::Block* block);
  ::tendermint::types::Block* unsafe_arena_release_block();
  // .cosmos.base.tendermint.v1beta1.Block sdk_block = 3 [json_name = "sdkBlock"];
  bool has_sdk_block() const;
  void clear_sdk_block() ;
  const ::cosmos::base::tendermint::v1beta1::Block& sdk_block() const;
  PROTOBUF_NODISCARD ::cosmos::base::tendermint::v1beta1::Block* release_sdk_block();
  ::cosmos::base::tendermint::v1beta1::Block* mutable_sdk_block();
  void set_allocated_sdk_block(::cosmos::base::tendermint::v1beta1::Block* sdk_block);
  private:
  const ::cosmos::base::tendermint::v1beta1::Block& _internal_sdk_block() const;
  ::cosmos::base::tendermint::v1beta1::Block* _internal_mutable_sdk_block();
  public:
  void unsafe_arena_set_allocated_sdk_block(
      ::cosmos::base::tendermint::v1beta1::Block* sdk_block);
  ::cosmos::base::tendermint::v1beta1::Block* unsafe_arena_release_sdk_block();
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::types::BlockID* block_id_;
    ::tendermint::types::Block* block_;
    ::cosmos::base::tendermint::v1beta1::Block* sdk_block_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetLatestBlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetLatestBlockRequest) */ {
 public:
  inline GetLatestBlockRequest() : GetLatestBlockRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetLatestBlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLatestBlockRequest(const GetLatestBlockRequest& from);
  GetLatestBlockRequest(GetLatestBlockRequest&& from) noexcept
    : GetLatestBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetLatestBlockRequest& operator=(const GetLatestBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestBlockRequest& operator=(GetLatestBlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLatestBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLatestBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetLatestBlockRequest*>(
               &_GetLatestBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetLatestBlockRequest& a, GetLatestBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestBlockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestBlockRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLatestBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLatestBlockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetLatestBlockRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetLatestBlockRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetLatestBlockRequest";
  }
  protected:
  explicit GetLatestBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetLatestBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetLatestBlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse) */ {
 public:
  inline GetLatestBlockResponse() : GetLatestBlockResponse(nullptr) {}
  ~GetLatestBlockResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetLatestBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLatestBlockResponse(const GetLatestBlockResponse& from);
  GetLatestBlockResponse(GetLatestBlockResponse&& from) noexcept
    : GetLatestBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetLatestBlockResponse& operator=(const GetLatestBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestBlockResponse& operator=(GetLatestBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLatestBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLatestBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetLatestBlockResponse*>(
               &_GetLatestBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetLatestBlockResponse& a, GetLatestBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestBlockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestBlockResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLatestBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLatestBlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLatestBlockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLatestBlockResponse& from) {
    GetLatestBlockResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestBlockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetLatestBlockResponse";
  }
  protected:
  explicit GetLatestBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kBlockFieldNumber = 2,
    kSdkBlockFieldNumber = 3,
  };
  // .tendermint.types.BlockID block_id = 1 [json_name = "blockId"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();
  // .tendermint.types.Block block = 2 [json_name = "block"];
  bool has_block() const;
  void clear_block() ;
  const ::tendermint::types::Block& block() const;
  PROTOBUF_NODISCARD ::tendermint::types::Block* release_block();
  ::tendermint::types::Block* mutable_block();
  void set_allocated_block(::tendermint::types::Block* block);
  private:
  const ::tendermint::types::Block& _internal_block() const;
  ::tendermint::types::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tendermint::types::Block* block);
  ::tendermint::types::Block* unsafe_arena_release_block();
  // .cosmos.base.tendermint.v1beta1.Block sdk_block = 3 [json_name = "sdkBlock"];
  bool has_sdk_block() const;
  void clear_sdk_block() ;
  const ::cosmos::base::tendermint::v1beta1::Block& sdk_block() const;
  PROTOBUF_NODISCARD ::cosmos::base::tendermint::v1beta1::Block* release_sdk_block();
  ::cosmos::base::tendermint::v1beta1::Block* mutable_sdk_block();
  void set_allocated_sdk_block(::cosmos::base::tendermint::v1beta1::Block* sdk_block);
  private:
  const ::cosmos::base::tendermint::v1beta1::Block& _internal_sdk_block() const;
  ::cosmos::base::tendermint::v1beta1::Block* _internal_mutable_sdk_block();
  public:
  void unsafe_arena_set_allocated_sdk_block(
      ::cosmos::base::tendermint::v1beta1::Block* sdk_block);
  ::cosmos::base::tendermint::v1beta1::Block* unsafe_arena_release_sdk_block();
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::types::BlockID* block_id_;
    ::tendermint::types::Block* block_;
    ::cosmos::base::tendermint::v1beta1::Block* sdk_block_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetSyncingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetSyncingRequest) */ {
 public:
  inline GetSyncingRequest() : GetSyncingRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetSyncingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSyncingRequest(const GetSyncingRequest& from);
  GetSyncingRequest(GetSyncingRequest&& from) noexcept
    : GetSyncingRequest() {
    *this = ::std::move(from);
  }

  inline GetSyncingRequest& operator=(const GetSyncingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSyncingRequest& operator=(GetSyncingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSyncingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSyncingRequest* internal_default_instance() {
    return reinterpret_cast<const GetSyncingRequest*>(
               &_GetSyncingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetSyncingRequest& a, GetSyncingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSyncingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSyncingRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSyncingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSyncingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetSyncingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetSyncingRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetSyncingRequest";
  }
  protected:
  explicit GetSyncingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetSyncingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetSyncingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetSyncingResponse) */ {
 public:
  inline GetSyncingResponse() : GetSyncingResponse(nullptr) {}
  ~GetSyncingResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetSyncingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSyncingResponse(const GetSyncingResponse& from);
  GetSyncingResponse(GetSyncingResponse&& from) noexcept
    : GetSyncingResponse() {
    *this = ::std::move(from);
  }

  inline GetSyncingResponse& operator=(const GetSyncingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSyncingResponse& operator=(GetSyncingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSyncingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSyncingResponse* internal_default_instance() {
    return reinterpret_cast<const GetSyncingResponse*>(
               &_GetSyncingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetSyncingResponse& a, GetSyncingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSyncingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSyncingResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSyncingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSyncingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSyncingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSyncingResponse& from) {
    GetSyncingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSyncingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetSyncingResponse";
  }
  protected:
  explicit GetSyncingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncingFieldNumber = 1,
  };
  // bool syncing = 1 [json_name = "syncing"];
  void clear_syncing() ;
  bool syncing() const;
  void set_syncing(bool value);

  private:
  bool _internal_syncing() const;
  void _internal_set_syncing(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetSyncingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool syncing_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetNodeInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetNodeInfoRequest) */ {
 public:
  inline GetNodeInfoRequest() : GetNodeInfoRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetNodeInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNodeInfoRequest(const GetNodeInfoRequest& from);
  GetNodeInfoRequest(GetNodeInfoRequest&& from) noexcept
    : GetNodeInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetNodeInfoRequest& operator=(const GetNodeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeInfoRequest& operator=(GetNodeInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodeInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodeInfoRequest*>(
               &_GetNodeInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetNodeInfoRequest& a, GetNodeInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodeInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNodeInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetNodeInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetNodeInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetNodeInfoRequest";
  }
  protected:
  explicit GetNodeInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetNodeInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class GetNodeInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse) */ {
 public:
  inline GetNodeInfoResponse() : GetNodeInfoResponse(nullptr) {}
  ~GetNodeInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetNodeInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNodeInfoResponse(const GetNodeInfoResponse& from);
  GetNodeInfoResponse(GetNodeInfoResponse&& from) noexcept
    : GetNodeInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetNodeInfoResponse& operator=(const GetNodeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeInfoResponse& operator=(GetNodeInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodeInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetNodeInfoResponse*>(
               &_GetNodeInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetNodeInfoResponse& a, GetNodeInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodeInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNodeInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNodeInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNodeInfoResponse& from) {
    GetNodeInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.GetNodeInfoResponse";
  }
  protected:
  explicit GetNodeInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultNodeInfoFieldNumber = 1,
    kApplicationVersionFieldNumber = 2,
  };
  // .tendermint.p2p.DefaultNodeInfo default_node_info = 1 [json_name = "defaultNodeInfo"];
  bool has_default_node_info() const;
  void clear_default_node_info() ;
  const ::tendermint::p2p::DefaultNodeInfo& default_node_info() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::DefaultNodeInfo* release_default_node_info();
  ::tendermint::p2p::DefaultNodeInfo* mutable_default_node_info();
  void set_allocated_default_node_info(::tendermint::p2p::DefaultNodeInfo* default_node_info);
  private:
  const ::tendermint::p2p::DefaultNodeInfo& _internal_default_node_info() const;
  ::tendermint::p2p::DefaultNodeInfo* _internal_mutable_default_node_info();
  public:
  void unsafe_arena_set_allocated_default_node_info(
      ::tendermint::p2p::DefaultNodeInfo* default_node_info);
  ::tendermint::p2p::DefaultNodeInfo* unsafe_arena_release_default_node_info();
  // .cosmos.base.tendermint.v1beta1.VersionInfo application_version = 2 [json_name = "applicationVersion"];
  bool has_application_version() const;
  void clear_application_version() ;
  const ::cosmos::base::tendermint::v1beta1::VersionInfo& application_version() const;
  PROTOBUF_NODISCARD ::cosmos::base::tendermint::v1beta1::VersionInfo* release_application_version();
  ::cosmos::base::tendermint::v1beta1::VersionInfo* mutable_application_version();
  void set_allocated_application_version(::cosmos::base::tendermint::v1beta1::VersionInfo* application_version);
  private:
  const ::cosmos::base::tendermint::v1beta1::VersionInfo& _internal_application_version() const;
  ::cosmos::base::tendermint::v1beta1::VersionInfo* _internal_mutable_application_version();
  public:
  void unsafe_arena_set_allocated_application_version(
      ::cosmos::base::tendermint::v1beta1::VersionInfo* application_version);
  ::cosmos::base::tendermint::v1beta1::VersionInfo* unsafe_arena_release_application_version();
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::p2p::DefaultNodeInfo* default_node_info_;
    ::cosmos::base::tendermint::v1beta1::VersionInfo* application_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class VersionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.VersionInfo) */ {
 public:
  inline VersionInfo() : VersionInfo(nullptr) {}
  ~VersionInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VersionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionInfo(const VersionInfo& from);
  VersionInfo(VersionInfo&& from) noexcept
    : VersionInfo() {
    *this = ::std::move(from);
  }

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionInfo& operator=(VersionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionInfo* internal_default_instance() {
    return reinterpret_cast<const VersionInfo*>(
               &_VersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VersionInfo& a, VersionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionInfo& from) {
    VersionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.VersionInfo";
  }
  protected:
  explicit VersionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildDepsFieldNumber = 7,
    kNameFieldNumber = 1,
    kAppNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kGitCommitFieldNumber = 4,
    kBuildTagsFieldNumber = 5,
    kGoVersionFieldNumber = 6,
    kCosmosSdkVersionFieldNumber = 8,
  };
  // repeated .cosmos.base.tendermint.v1beta1.Module build_deps = 7 [json_name = "buildDeps"];
  int build_deps_size() const;
  private:
  int _internal_build_deps_size() const;

  public:
  void clear_build_deps() ;
  ::cosmos::base::tendermint::v1beta1::Module* mutable_build_deps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Module >*
      mutable_build_deps();
  private:
  const ::cosmos::base::tendermint::v1beta1::Module& _internal_build_deps(int index) const;
  ::cosmos::base::tendermint::v1beta1::Module* _internal_add_build_deps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Module>& _internal_build_deps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Module>* _internal_mutable_build_deps();
  public:
  const ::cosmos::base::tendermint::v1beta1::Module& build_deps(int index) const;
  ::cosmos::base::tendermint::v1beta1::Module* add_build_deps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Module >&
      build_deps() const;
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string app_name = 2 [json_name = "appName"];
  void clear_app_name() ;
  const std::string& app_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_name(Arg_&& arg, Args_... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* ptr);

  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(
      const std::string& value);
  std::string* _internal_mutable_app_name();

  public:
  // string version = 3 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string git_commit = 4 [json_name = "gitCommit"];
  void clear_git_commit() ;
  const std::string& git_commit() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_git_commit(Arg_&& arg, Args_... args);
  std::string* mutable_git_commit();
  PROTOBUF_NODISCARD std::string* release_git_commit();
  void set_allocated_git_commit(std::string* ptr);

  private:
  const std::string& _internal_git_commit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_git_commit(
      const std::string& value);
  std::string* _internal_mutable_git_commit();

  public:
  // string build_tags = 5 [json_name = "buildTags"];
  void clear_build_tags() ;
  const std::string& build_tags() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_build_tags(Arg_&& arg, Args_... args);
  std::string* mutable_build_tags();
  PROTOBUF_NODISCARD std::string* release_build_tags();
  void set_allocated_build_tags(std::string* ptr);

  private:
  const std::string& _internal_build_tags() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_tags(
      const std::string& value);
  std::string* _internal_mutable_build_tags();

  public:
  // string go_version = 6 [json_name = "goVersion"];
  void clear_go_version() ;
  const std::string& go_version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_go_version(Arg_&& arg, Args_... args);
  std::string* mutable_go_version();
  PROTOBUF_NODISCARD std::string* release_go_version();
  void set_allocated_go_version(std::string* ptr);

  private:
  const std::string& _internal_go_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_go_version(
      const std::string& value);
  std::string* _internal_mutable_go_version();

  public:
  // string cosmos_sdk_version = 8 [json_name = "cosmosSdkVersion"];
  void clear_cosmos_sdk_version() ;
  const std::string& cosmos_sdk_version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cosmos_sdk_version(Arg_&& arg, Args_... args);
  std::string* mutable_cosmos_sdk_version();
  PROTOBUF_NODISCARD std::string* release_cosmos_sdk_version();
  void set_allocated_cosmos_sdk_version(std::string* ptr);

  private:
  const std::string& _internal_cosmos_sdk_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cosmos_sdk_version(
      const std::string& value);
  std::string* _internal_mutable_cosmos_sdk_version();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.VersionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Module > build_deps_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_commit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr go_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cosmos_sdk_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Module final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.Module) */ {
 public:
  inline Module() : Module(nullptr) {}
  ~Module() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Module(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Module(const Module& from);
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Module& operator=(Module&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Module& default_instance() {
    return *internal_default_instance();
  }
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Module* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Module* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Module& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Module& from) {
    Module::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.Module";
  }
  protected:
  explicit Module(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kVersionFieldNumber = 2,
    kSumFieldNumber = 3,
  };
  // string path = 1 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string version = 2 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string sum = 3 [json_name = "sum"];
  void clear_sum() ;
  const std::string& sum() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sum(Arg_&& arg, Args_... args);
  std::string* mutable_sum();
  PROTOBUF_NODISCARD std::string* release_sum();
  void set_allocated_sum(std::string* ptr);

  private:
  const std::string& _internal_sum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sum(
      const std::string& value);
  std::string* _internal_mutable_sum();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.Module)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class ABCIQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.ABCIQueryRequest) */ {
 public:
  inline ABCIQueryRequest() : ABCIQueryRequest(nullptr) {}
  ~ABCIQueryRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ABCIQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ABCIQueryRequest(const ABCIQueryRequest& from);
  ABCIQueryRequest(ABCIQueryRequest&& from) noexcept
    : ABCIQueryRequest() {
    *this = ::std::move(from);
  }

  inline ABCIQueryRequest& operator=(const ABCIQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ABCIQueryRequest& operator=(ABCIQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ABCIQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ABCIQueryRequest* internal_default_instance() {
    return reinterpret_cast<const ABCIQueryRequest*>(
               &_ABCIQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ABCIQueryRequest& a, ABCIQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ABCIQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ABCIQueryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ABCIQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ABCIQueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ABCIQueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ABCIQueryRequest& from) {
    ABCIQueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ABCIQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.ABCIQueryRequest";
  }
  protected:
  explicit ABCIQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kPathFieldNumber = 2,
    kHeightFieldNumber = 3,
    kProveFieldNumber = 4,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string path = 2 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // int64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // bool prove = 4 [json_name = "prove"];
  void clear_prove() ;
  bool prove() const;
  void set_prove(bool value);

  private:
  bool _internal_prove() const;
  void _internal_set_prove(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.ABCIQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::int64_t height_;
    bool prove_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class ABCIQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.ABCIQueryResponse) */ {
 public:
  inline ABCIQueryResponse() : ABCIQueryResponse(nullptr) {}
  ~ABCIQueryResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ABCIQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ABCIQueryResponse(const ABCIQueryResponse& from);
  ABCIQueryResponse(ABCIQueryResponse&& from) noexcept
    : ABCIQueryResponse() {
    *this = ::std::move(from);
  }

  inline ABCIQueryResponse& operator=(const ABCIQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ABCIQueryResponse& operator=(ABCIQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ABCIQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ABCIQueryResponse* internal_default_instance() {
    return reinterpret_cast<const ABCIQueryResponse*>(
               &_ABCIQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ABCIQueryResponse& a, ABCIQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ABCIQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ABCIQueryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ABCIQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ABCIQueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ABCIQueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ABCIQueryResponse& from) {
    ABCIQueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ABCIQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.ABCIQueryResponse";
  }
  protected:
  explicit ABCIQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 3,
    kInfoFieldNumber = 4,
    kKeyFieldNumber = 6,
    kValueFieldNumber = 7,
    kCodespaceFieldNumber = 10,
    kProofOpsFieldNumber = 8,
    kIndexFieldNumber = 5,
    kHeightFieldNumber = 9,
    kCodeFieldNumber = 1,
  };
  // string log = 3 [json_name = "log"];
  void clear_log() ;
  const std::string& log() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log(Arg_&& arg, Args_... args);
  std::string* mutable_log();
  PROTOBUF_NODISCARD std::string* release_log();
  void set_allocated_log(std::string* ptr);

  private:
  const std::string& _internal_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log(
      const std::string& value);
  std::string* _internal_mutable_log();

  public:
  // string info = 4 [json_name = "info"];
  void clear_info() ;
  const std::string& info() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* ptr);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // bytes key = 6 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 7 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // string codespace = 10 [json_name = "codespace"];
  void clear_codespace() ;
  const std::string& codespace() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_codespace(Arg_&& arg, Args_... args);
  std::string* mutable_codespace();
  PROTOBUF_NODISCARD std::string* release_codespace();
  void set_allocated_codespace(std::string* ptr);

  private:
  const std::string& _internal_codespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codespace(
      const std::string& value);
  std::string* _internal_mutable_codespace();

  public:
  // .cosmos.base.tendermint.v1beta1.ProofOps proof_ops = 8 [json_name = "proofOps"];
  bool has_proof_ops() const;
  void clear_proof_ops() ;
  const ::cosmos::base::tendermint::v1beta1::ProofOps& proof_ops() const;
  PROTOBUF_NODISCARD ::cosmos::base::tendermint::v1beta1::ProofOps* release_proof_ops();
  ::cosmos::base::tendermint::v1beta1::ProofOps* mutable_proof_ops();
  void set_allocated_proof_ops(::cosmos::base::tendermint::v1beta1::ProofOps* proof_ops);
  private:
  const ::cosmos::base::tendermint::v1beta1::ProofOps& _internal_proof_ops() const;
  ::cosmos::base::tendermint::v1beta1::ProofOps* _internal_mutable_proof_ops();
  public:
  void unsafe_arena_set_allocated_proof_ops(
      ::cosmos::base::tendermint::v1beta1::ProofOps* proof_ops);
  ::cosmos::base::tendermint::v1beta1::ProofOps* unsafe_arena_release_proof_ops();
  // int64 index = 5 [json_name = "index"];
  void clear_index() ;
  ::int64_t index() const;
  void set_index(::int64_t value);

  private:
  ::int64_t _internal_index() const;
  void _internal_set_index(::int64_t value);

  public:
  // int64 height = 9 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // uint32 code = 1 [json_name = "code"];
  void clear_code() ;
  ::uint32_t code() const;
  void set_code(::uint32_t value);

  private:
  ::uint32_t _internal_code() const;
  void _internal_set_code(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.ABCIQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codespace_;
    ::cosmos::base::tendermint::v1beta1::ProofOps* proof_ops_;
    ::int64_t index_;
    ::int64_t height_;
    ::uint32_t code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class ProofOp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.ProofOp) */ {
 public:
  inline ProofOp() : ProofOp(nullptr) {}
  ~ProofOp() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProofOp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProofOp(const ProofOp& from);
  ProofOp(ProofOp&& from) noexcept
    : ProofOp() {
    *this = ::std::move(from);
  }

  inline ProofOp& operator=(const ProofOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofOp& operator=(ProofOp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProofOp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProofOp* internal_default_instance() {
    return reinterpret_cast<const ProofOp*>(
               &_ProofOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ProofOp& a, ProofOp& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofOp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofOp* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProofOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProofOp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProofOp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProofOp& from) {
    ProofOp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofOp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.ProofOp";
  }
  protected:
  explicit ProofOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kKeyFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string type = 1 [json_name = "type"];
  void clear_type() ;
  const std::string& type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // bytes key = 2 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes data = 3 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.ProofOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class ProofOps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.tendermint.v1beta1.ProofOps) */ {
 public:
  inline ProofOps() : ProofOps(nullptr) {}
  ~ProofOps() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProofOps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProofOps(const ProofOps& from);
  ProofOps(ProofOps&& from) noexcept
    : ProofOps() {
    *this = ::std::move(from);
  }

  inline ProofOps& operator=(const ProofOps& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofOps& operator=(ProofOps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProofOps& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProofOps* internal_default_instance() {
    return reinterpret_cast<const ProofOps*>(
               &_ProofOps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ProofOps& a, ProofOps& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofOps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofOps* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProofOps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProofOps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProofOps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProofOps& from) {
    ProofOps::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofOps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.tendermint.v1beta1.ProofOps";
  }
  protected:
  explicit ProofOps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 1,
  };
  // repeated .cosmos.base.tendermint.v1beta1.ProofOp ops = 1 [json_name = "ops", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int ops_size() const;
  private:
  int _internal_ops_size() const;

  public:
  void clear_ops() ;
  ::cosmos::base::tendermint::v1beta1::ProofOp* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::ProofOp >*
      mutable_ops();
  private:
  const ::cosmos::base::tendermint::v1beta1::ProofOp& _internal_ops(int index) const;
  ::cosmos::base::tendermint::v1beta1::ProofOp* _internal_add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::ProofOp>& _internal_ops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::ProofOp>* _internal_mutable_ops();
  public:
  const ::cosmos::base::tendermint::v1beta1::ProofOp& ops(int index) const;
  ::cosmos::base::tendermint::v1beta1::ProofOp* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::ProofOp >&
      ops() const;
  // @@protoc_insertion_point(class_scope:cosmos.base.tendermint.v1beta1.ProofOps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::ProofOp > ops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetValidatorSetByHeightRequest

// int64 height = 1 [json_name = "height"];
inline void GetValidatorSetByHeightRequest::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t GetValidatorSetByHeightRequest::height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest.height)
  return _internal_height();
}
inline void GetValidatorSetByHeightRequest::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest.height)
}
inline ::int64_t GetValidatorSetByHeightRequest::_internal_height() const {
  return _impl_.height_;
}
inline void GetValidatorSetByHeightRequest::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool GetValidatorSetByHeightRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& GetValidatorSetByHeightRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& GetValidatorSetByHeightRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest.pagination)
  return _internal_pagination();
}
inline void GetValidatorSetByHeightRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetValidatorSetByHeightRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetValidatorSetByHeightRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetValidatorSetByHeightRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetValidatorSetByHeightRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest.pagination)
  return _msg;
}
inline void GetValidatorSetByHeightRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightRequest.pagination)
}

// -------------------------------------------------------------------

// GetValidatorSetByHeightResponse

// int64 block_height = 1 [json_name = "blockHeight"];
inline void GetValidatorSetByHeightResponse::clear_block_height() {
  _impl_.block_height_ = ::int64_t{0};
}
inline ::int64_t GetValidatorSetByHeightResponse::block_height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.block_height)
  return _internal_block_height();
}
inline void GetValidatorSetByHeightResponse::set_block_height(::int64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.block_height)
}
inline ::int64_t GetValidatorSetByHeightResponse::_internal_block_height() const {
  return _impl_.block_height_;
}
inline void GetValidatorSetByHeightResponse::_internal_set_block_height(::int64_t value) {
  ;
  _impl_.block_height_ = value;
}

// repeated .cosmos.base.tendermint.v1beta1.Validator validators = 2 [json_name = "validators"];
inline int GetValidatorSetByHeightResponse::_internal_validators_size() const {
  return _impl_.validators_.size();
}
inline int GetValidatorSetByHeightResponse::validators_size() const {
  return _internal_validators_size();
}
inline void GetValidatorSetByHeightResponse::clear_validators() {
  _internal_mutable_validators()->Clear();
}
inline ::cosmos::base::tendermint::v1beta1::Validator* GetValidatorSetByHeightResponse::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.validators)
  return _internal_mutable_validators()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator >*
GetValidatorSetByHeightResponse::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.validators)
  return _internal_mutable_validators();
}
inline const ::cosmos::base::tendermint::v1beta1::Validator& GetValidatorSetByHeightResponse::_internal_validators(int index) const {
  return _internal_validators().Get(index);
}
inline const ::cosmos::base::tendermint::v1beta1::Validator& GetValidatorSetByHeightResponse::validators(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.validators)
  return _internal_validators(index);
}
inline ::cosmos::base::tendermint::v1beta1::Validator* GetValidatorSetByHeightResponse::_internal_add_validators() {
  return _internal_mutable_validators()->Add();
}
inline ::cosmos::base::tendermint::v1beta1::Validator* GetValidatorSetByHeightResponse::add_validators() {
  ::cosmos::base::tendermint::v1beta1::Validator* _add = _internal_add_validators();
  // @@protoc_insertion_point(field_add:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator >&
GetValidatorSetByHeightResponse::validators() const {
  // @@protoc_insertion_point(field_list:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.validators)
  return _internal_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Validator>&
GetValidatorSetByHeightResponse::_internal_validators() const {
  return _impl_.validators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Validator>*
GetValidatorSetByHeightResponse::_internal_mutable_validators() {
  return &_impl_.validators_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 3 [json_name = "pagination"];
inline bool GetValidatorSetByHeightResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& GetValidatorSetByHeightResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& GetValidatorSetByHeightResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.pagination)
  return _internal_pagination();
}
inline void GetValidatorSetByHeightResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetValidatorSetByHeightResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetValidatorSetByHeightResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetValidatorSetByHeightResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetValidatorSetByHeightResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.pagination)
  return _msg;
}
inline void GetValidatorSetByHeightResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse.pagination)
}

// -------------------------------------------------------------------

// GetLatestValidatorSetRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool GetLatestValidatorSetRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& GetLatestValidatorSetRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& GetLatestValidatorSetRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest.pagination)
  return _internal_pagination();
}
inline void GetLatestValidatorSetRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetLatestValidatorSetRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetLatestValidatorSetRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetLatestValidatorSetRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetLatestValidatorSetRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest.pagination)
  return _msg;
}
inline void GetLatestValidatorSetRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetRequest.pagination)
}

// -------------------------------------------------------------------

// GetLatestValidatorSetResponse

// int64 block_height = 1 [json_name = "blockHeight"];
inline void GetLatestValidatorSetResponse::clear_block_height() {
  _impl_.block_height_ = ::int64_t{0};
}
inline ::int64_t GetLatestValidatorSetResponse::block_height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.block_height)
  return _internal_block_height();
}
inline void GetLatestValidatorSetResponse::set_block_height(::int64_t value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.block_height)
}
inline ::int64_t GetLatestValidatorSetResponse::_internal_block_height() const {
  return _impl_.block_height_;
}
inline void GetLatestValidatorSetResponse::_internal_set_block_height(::int64_t value) {
  ;
  _impl_.block_height_ = value;
}

// repeated .cosmos.base.tendermint.v1beta1.Validator validators = 2 [json_name = "validators"];
inline int GetLatestValidatorSetResponse::_internal_validators_size() const {
  return _impl_.validators_.size();
}
inline int GetLatestValidatorSetResponse::validators_size() const {
  return _internal_validators_size();
}
inline void GetLatestValidatorSetResponse::clear_validators() {
  _internal_mutable_validators()->Clear();
}
inline ::cosmos::base::tendermint::v1beta1::Validator* GetLatestValidatorSetResponse::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.validators)
  return _internal_mutable_validators()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator >*
GetLatestValidatorSetResponse::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.validators)
  return _internal_mutable_validators();
}
inline const ::cosmos::base::tendermint::v1beta1::Validator& GetLatestValidatorSetResponse::_internal_validators(int index) const {
  return _internal_validators().Get(index);
}
inline const ::cosmos::base::tendermint::v1beta1::Validator& GetLatestValidatorSetResponse::validators(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.validators)
  return _internal_validators(index);
}
inline ::cosmos::base::tendermint::v1beta1::Validator* GetLatestValidatorSetResponse::_internal_add_validators() {
  return _internal_mutable_validators()->Add();
}
inline ::cosmos::base::tendermint::v1beta1::Validator* GetLatestValidatorSetResponse::add_validators() {
  ::cosmos::base::tendermint::v1beta1::Validator* _add = _internal_add_validators();
  // @@protoc_insertion_point(field_add:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Validator >&
GetLatestValidatorSetResponse::validators() const {
  // @@protoc_insertion_point(field_list:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.validators)
  return _internal_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Validator>&
GetLatestValidatorSetResponse::_internal_validators() const {
  return _impl_.validators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Validator>*
GetLatestValidatorSetResponse::_internal_mutable_validators() {
  return &_impl_.validators_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 3 [json_name = "pagination"];
inline bool GetLatestValidatorSetResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& GetLatestValidatorSetResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& GetLatestValidatorSetResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.pagination)
  return _internal_pagination();
}
inline void GetLatestValidatorSetResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetLatestValidatorSetResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetLatestValidatorSetResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetLatestValidatorSetResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetLatestValidatorSetResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.pagination)
  return _msg;
}
inline void GetLatestValidatorSetResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse.pagination)
}

// -------------------------------------------------------------------

// Validator

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Validator::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Validator::address() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Validator.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Validator::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Validator.address)
}
inline std::string* Validator::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Validator.address)
  return _s;
}
inline const std::string& Validator::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Validator::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Validator::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* Validator::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Validator.address)
  return _impl_.address_.Release();
}
inline void Validator::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Validator.address)
}

// .google.protobuf.Any pub_key = 2 [json_name = "pubKey"];
inline bool Validator::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Validator::_internal_pub_key() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Validator::pub_key() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Validator.pub_key)
  return _internal_pub_key();
}
inline void Validator::unsafe_arena_set_allocated_pub_key(
    ::PROTOBUF_NAMESPACE_ID::Any* pub_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = pub_key;
  if (pub_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.Validator.pub_key)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Validator::release_pub_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Validator::unsafe_arena_release_pub_key() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Validator.pub_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Validator::_internal_mutable_pub_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pub_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.pub_key_ = p;
  }
  return _impl_.pub_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Validator::mutable_pub_key() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Validator.pub_key)
  return _msg;
}
inline void Validator::set_allocated_pub_key(::PROTOBUF_NAMESPACE_ID::Any* pub_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  if (pub_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_key));
    if (message_arena != submessage_arena) {
      pub_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pub_key_ = pub_key;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Validator.pub_key)
}

// int64 voting_power = 3 [json_name = "votingPower"];
inline void Validator::clear_voting_power() {
  _impl_.voting_power_ = ::int64_t{0};
}
inline ::int64_t Validator::voting_power() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Validator.voting_power)
  return _internal_voting_power();
}
inline void Validator::set_voting_power(::int64_t value) {
  _internal_set_voting_power(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Validator.voting_power)
}
inline ::int64_t Validator::_internal_voting_power() const {
  return _impl_.voting_power_;
}
inline void Validator::_internal_set_voting_power(::int64_t value) {
  ;
  _impl_.voting_power_ = value;
}

// int64 proposer_priority = 4 [json_name = "proposerPriority"];
inline void Validator::clear_proposer_priority() {
  _impl_.proposer_priority_ = ::int64_t{0};
}
inline ::int64_t Validator::proposer_priority() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Validator.proposer_priority)
  return _internal_proposer_priority();
}
inline void Validator::set_proposer_priority(::int64_t value) {
  _internal_set_proposer_priority(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Validator.proposer_priority)
}
inline ::int64_t Validator::_internal_proposer_priority() const {
  return _impl_.proposer_priority_;
}
inline void Validator::_internal_set_proposer_priority(::int64_t value) {
  ;
  _impl_.proposer_priority_ = value;
}

// -------------------------------------------------------------------

// GetBlockByHeightRequest

// int64 height = 1 [json_name = "height"];
inline void GetBlockByHeightRequest::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t GetBlockByHeightRequest::height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest.height)
  return _internal_height();
}
inline void GetBlockByHeightRequest::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.GetBlockByHeightRequest.height)
}
inline ::int64_t GetBlockByHeightRequest::_internal_height() const {
  return _impl_.height_;
}
inline void GetBlockByHeightRequest::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// GetBlockByHeightResponse

// .tendermint.types.BlockID block_id = 1 [json_name = "blockId"];
inline bool GetBlockByHeightResponse::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline const ::tendermint::types::BlockID& GetBlockByHeightResponse::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& GetBlockByHeightResponse::block_id() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block_id)
  return _internal_block_id();
}
inline void GetBlockByHeightResponse::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block_id)
}
inline ::tendermint::types::BlockID* GetBlockByHeightResponse::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* GetBlockByHeightResponse::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* GetBlockByHeightResponse::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::BlockID* GetBlockByHeightResponse::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block_id)
  return _msg;
}
inline void GetBlockByHeightResponse::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id));
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block_id)
}

// .tendermint.types.Block block = 2 [json_name = "block"];
inline bool GetBlockByHeightResponse::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_ != nullptr);
  return value;
}
inline const ::tendermint::types::Block& GetBlockByHeightResponse::_internal_block() const {
  const ::tendermint::types::Block* p = _impl_.block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Block&>(
      ::tendermint::types::_Block_default_instance_);
}
inline const ::tendermint::types::Block& GetBlockByHeightResponse::block() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block)
  return _internal_block();
}
inline void GetBlockByHeightResponse::unsafe_arena_set_allocated_block(
    ::tendermint::types::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  _impl_.block_ = block;
  if (block) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block)
}
inline ::tendermint::types::Block* GetBlockByHeightResponse::release_block() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Block* GetBlockByHeightResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
  return temp;
}
inline ::tendermint::types::Block* GetBlockByHeightResponse::_internal_mutable_block() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Block>(GetArenaForAllocation());
    _impl_.block_ = p;
  }
  return _impl_.block_;
}
inline ::tendermint::types::Block* GetBlockByHeightResponse::mutable_block() {
  ::tendermint::types::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block)
  return _msg;
}
inline void GetBlockByHeightResponse::set_allocated_block(::tendermint::types::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.block_ = block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.block)
}

// .cosmos.base.tendermint.v1beta1.Block sdk_block = 3 [json_name = "sdkBlock"];
inline bool GetBlockByHeightResponse::has_sdk_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sdk_block_ != nullptr);
  return value;
}
inline const ::cosmos::base::tendermint::v1beta1::Block& GetBlockByHeightResponse::_internal_sdk_block() const {
  const ::cosmos::base::tendermint::v1beta1::Block* p = _impl_.sdk_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::tendermint::v1beta1::Block&>(
      ::cosmos::base::tendermint::v1beta1::_Block_default_instance_);
}
inline const ::cosmos::base::tendermint::v1beta1::Block& GetBlockByHeightResponse::sdk_block() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.sdk_block)
  return _internal_sdk_block();
}
inline void GetBlockByHeightResponse::unsafe_arena_set_allocated_sdk_block(
    ::cosmos::base::tendermint::v1beta1::Block* sdk_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sdk_block_);
  }
  _impl_.sdk_block_ = sdk_block;
  if (sdk_block) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.sdk_block)
}
inline ::cosmos::base::tendermint::v1beta1::Block* GetBlockByHeightResponse::release_sdk_block() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::base::tendermint::v1beta1::Block* temp = _impl_.sdk_block_;
  _impl_.sdk_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::Block* GetBlockByHeightResponse::unsafe_arena_release_sdk_block() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.sdk_block)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::base::tendermint::v1beta1::Block* temp = _impl_.sdk_block_;
  _impl_.sdk_block_ = nullptr;
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::Block* GetBlockByHeightResponse::_internal_mutable_sdk_block() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sdk_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::Block>(GetArenaForAllocation());
    _impl_.sdk_block_ = p;
  }
  return _impl_.sdk_block_;
}
inline ::cosmos::base::tendermint::v1beta1::Block* GetBlockByHeightResponse::mutable_sdk_block() {
  ::cosmos::base::tendermint::v1beta1::Block* _msg = _internal_mutable_sdk_block();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.sdk_block)
  return _msg;
}
inline void GetBlockByHeightResponse::set_allocated_sdk_block(::cosmos::base::tendermint::v1beta1::Block* sdk_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sdk_block_);
  }
  if (sdk_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sdk_block));
    if (message_arena != submessage_arena) {
      sdk_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sdk_block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sdk_block_ = sdk_block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse.sdk_block)
}

// -------------------------------------------------------------------

// GetLatestBlockRequest

// -------------------------------------------------------------------

// GetLatestBlockResponse

// .tendermint.types.BlockID block_id = 1 [json_name = "blockId"];
inline bool GetLatestBlockResponse::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline const ::tendermint::types::BlockID& GetLatestBlockResponse::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& GetLatestBlockResponse::block_id() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block_id)
  return _internal_block_id();
}
inline void GetLatestBlockResponse::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block_id)
}
inline ::tendermint::types::BlockID* GetLatestBlockResponse::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* GetLatestBlockResponse::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* GetLatestBlockResponse::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::BlockID* GetLatestBlockResponse::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block_id)
  return _msg;
}
inline void GetLatestBlockResponse::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id));
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block_id)
}

// .tendermint.types.Block block = 2 [json_name = "block"];
inline bool GetLatestBlockResponse::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_ != nullptr);
  return value;
}
inline const ::tendermint::types::Block& GetLatestBlockResponse::_internal_block() const {
  const ::tendermint::types::Block* p = _impl_.block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Block&>(
      ::tendermint::types::_Block_default_instance_);
}
inline const ::tendermint::types::Block& GetLatestBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block)
  return _internal_block();
}
inline void GetLatestBlockResponse::unsafe_arena_set_allocated_block(
    ::tendermint::types::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  _impl_.block_ = block;
  if (block) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block)
}
inline ::tendermint::types::Block* GetLatestBlockResponse::release_block() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Block* GetLatestBlockResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
  return temp;
}
inline ::tendermint::types::Block* GetLatestBlockResponse::_internal_mutable_block() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Block>(GetArenaForAllocation());
    _impl_.block_ = p;
  }
  return _impl_.block_;
}
inline ::tendermint::types::Block* GetLatestBlockResponse::mutable_block() {
  ::tendermint::types::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block)
  return _msg;
}
inline void GetLatestBlockResponse::set_allocated_block(::tendermint::types::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.block_ = block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.block)
}

// .cosmos.base.tendermint.v1beta1.Block sdk_block = 3 [json_name = "sdkBlock"];
inline bool GetLatestBlockResponse::has_sdk_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sdk_block_ != nullptr);
  return value;
}
inline const ::cosmos::base::tendermint::v1beta1::Block& GetLatestBlockResponse::_internal_sdk_block() const {
  const ::cosmos::base::tendermint::v1beta1::Block* p = _impl_.sdk_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::tendermint::v1beta1::Block&>(
      ::cosmos::base::tendermint::v1beta1::_Block_default_instance_);
}
inline const ::cosmos::base::tendermint::v1beta1::Block& GetLatestBlockResponse::sdk_block() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.sdk_block)
  return _internal_sdk_block();
}
inline void GetLatestBlockResponse::unsafe_arena_set_allocated_sdk_block(
    ::cosmos::base::tendermint::v1beta1::Block* sdk_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sdk_block_);
  }
  _impl_.sdk_block_ = sdk_block;
  if (sdk_block) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.sdk_block)
}
inline ::cosmos::base::tendermint::v1beta1::Block* GetLatestBlockResponse::release_sdk_block() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::base::tendermint::v1beta1::Block* temp = _impl_.sdk_block_;
  _impl_.sdk_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::Block* GetLatestBlockResponse::unsafe_arena_release_sdk_block() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.sdk_block)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::base::tendermint::v1beta1::Block* temp = _impl_.sdk_block_;
  _impl_.sdk_block_ = nullptr;
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::Block* GetLatestBlockResponse::_internal_mutable_sdk_block() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sdk_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::Block>(GetArenaForAllocation());
    _impl_.sdk_block_ = p;
  }
  return _impl_.sdk_block_;
}
inline ::cosmos::base::tendermint::v1beta1::Block* GetLatestBlockResponse::mutable_sdk_block() {
  ::cosmos::base::tendermint::v1beta1::Block* _msg = _internal_mutable_sdk_block();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.sdk_block)
  return _msg;
}
inline void GetLatestBlockResponse::set_allocated_sdk_block(::cosmos::base::tendermint::v1beta1::Block* sdk_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sdk_block_);
  }
  if (sdk_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sdk_block));
    if (message_arena != submessage_arena) {
      sdk_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sdk_block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sdk_block_ = sdk_block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetLatestBlockResponse.sdk_block)
}

// -------------------------------------------------------------------

// GetSyncingRequest

// -------------------------------------------------------------------

// GetSyncingResponse

// bool syncing = 1 [json_name = "syncing"];
inline void GetSyncingResponse::clear_syncing() {
  _impl_.syncing_ = false;
}
inline bool GetSyncingResponse::syncing() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetSyncingResponse.syncing)
  return _internal_syncing();
}
inline void GetSyncingResponse::set_syncing(bool value) {
  _internal_set_syncing(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.GetSyncingResponse.syncing)
}
inline bool GetSyncingResponse::_internal_syncing() const {
  return _impl_.syncing_;
}
inline void GetSyncingResponse::_internal_set_syncing(bool value) {
  ;
  _impl_.syncing_ = value;
}

// -------------------------------------------------------------------

// GetNodeInfoRequest

// -------------------------------------------------------------------

// GetNodeInfoResponse

// .tendermint.p2p.DefaultNodeInfo default_node_info = 1 [json_name = "defaultNodeInfo"];
inline bool GetNodeInfoResponse::has_default_node_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.default_node_info_ != nullptr);
  return value;
}
inline const ::tendermint::p2p::DefaultNodeInfo& GetNodeInfoResponse::_internal_default_node_info() const {
  const ::tendermint::p2p::DefaultNodeInfo* p = _impl_.default_node_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::p2p::DefaultNodeInfo&>(
      ::tendermint::p2p::_DefaultNodeInfo_default_instance_);
}
inline const ::tendermint::p2p::DefaultNodeInfo& GetNodeInfoResponse::default_node_info() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.default_node_info)
  return _internal_default_node_info();
}
inline void GetNodeInfoResponse::unsafe_arena_set_allocated_default_node_info(
    ::tendermint::p2p::DefaultNodeInfo* default_node_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_node_info_);
  }
  _impl_.default_node_info_ = default_node_info;
  if (default_node_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.default_node_info)
}
inline ::tendermint::p2p::DefaultNodeInfo* GetNodeInfoResponse::release_default_node_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::p2p::DefaultNodeInfo* temp = _impl_.default_node_info_;
  _impl_.default_node_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::p2p::DefaultNodeInfo* GetNodeInfoResponse::unsafe_arena_release_default_node_info() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.default_node_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::p2p::DefaultNodeInfo* temp = _impl_.default_node_info_;
  _impl_.default_node_info_ = nullptr;
  return temp;
}
inline ::tendermint::p2p::DefaultNodeInfo* GetNodeInfoResponse::_internal_mutable_default_node_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.default_node_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::p2p::DefaultNodeInfo>(GetArenaForAllocation());
    _impl_.default_node_info_ = p;
  }
  return _impl_.default_node_info_;
}
inline ::tendermint::p2p::DefaultNodeInfo* GetNodeInfoResponse::mutable_default_node_info() {
  ::tendermint::p2p::DefaultNodeInfo* _msg = _internal_mutable_default_node_info();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.default_node_info)
  return _msg;
}
inline void GetNodeInfoResponse::set_allocated_default_node_info(::tendermint::p2p::DefaultNodeInfo* default_node_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.default_node_info_);
  }
  if (default_node_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_node_info));
    if (message_arena != submessage_arena) {
      default_node_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_node_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.default_node_info_ = default_node_info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.default_node_info)
}

// .cosmos.base.tendermint.v1beta1.VersionInfo application_version = 2 [json_name = "applicationVersion"];
inline bool GetNodeInfoResponse::has_application_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.application_version_ != nullptr);
  return value;
}
inline void GetNodeInfoResponse::clear_application_version() {
  if (_impl_.application_version_ != nullptr) _impl_.application_version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::base::tendermint::v1beta1::VersionInfo& GetNodeInfoResponse::_internal_application_version() const {
  const ::cosmos::base::tendermint::v1beta1::VersionInfo* p = _impl_.application_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::tendermint::v1beta1::VersionInfo&>(
      ::cosmos::base::tendermint::v1beta1::_VersionInfo_default_instance_);
}
inline const ::cosmos::base::tendermint::v1beta1::VersionInfo& GetNodeInfoResponse::application_version() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.application_version)
  return _internal_application_version();
}
inline void GetNodeInfoResponse::unsafe_arena_set_allocated_application_version(
    ::cosmos::base::tendermint::v1beta1::VersionInfo* application_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.application_version_);
  }
  _impl_.application_version_ = application_version;
  if (application_version) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.application_version)
}
inline ::cosmos::base::tendermint::v1beta1::VersionInfo* GetNodeInfoResponse::release_application_version() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::tendermint::v1beta1::VersionInfo* temp = _impl_.application_version_;
  _impl_.application_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::VersionInfo* GetNodeInfoResponse::unsafe_arena_release_application_version() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.application_version)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::tendermint::v1beta1::VersionInfo* temp = _impl_.application_version_;
  _impl_.application_version_ = nullptr;
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::VersionInfo* GetNodeInfoResponse::_internal_mutable_application_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.application_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::VersionInfo>(GetArenaForAllocation());
    _impl_.application_version_ = p;
  }
  return _impl_.application_version_;
}
inline ::cosmos::base::tendermint::v1beta1::VersionInfo* GetNodeInfoResponse::mutable_application_version() {
  ::cosmos::base::tendermint::v1beta1::VersionInfo* _msg = _internal_mutable_application_version();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.application_version)
  return _msg;
}
inline void GetNodeInfoResponse::set_allocated_application_version(::cosmos::base::tendermint::v1beta1::VersionInfo* application_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.application_version_;
  }
  if (application_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(application_version);
    if (message_arena != submessage_arena) {
      application_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application_version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.application_version_ = application_version;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.GetNodeInfoResponse.application_version)
}

// -------------------------------------------------------------------

// VersionInfo

// string name = 1 [json_name = "name"];
inline void VersionInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VersionInfo::name() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.VersionInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.VersionInfo.name)
}
inline std::string* VersionInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.VersionInfo.name)
  return _s;
}
inline const std::string& VersionInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VersionInfo::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* VersionInfo::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.VersionInfo.name)
  return _impl_.name_.Release();
}
inline void VersionInfo::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.VersionInfo.name)
}

// string app_name = 2 [json_name = "appName"];
inline void VersionInfo::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
}
inline const std::string& VersionInfo::app_name() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.VersionInfo.app_name)
  return _internal_app_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionInfo::set_app_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.VersionInfo.app_name)
}
inline std::string* VersionInfo::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.VersionInfo.app_name)
  return _s;
}
inline const std::string& VersionInfo::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void VersionInfo::_internal_set_app_name(const std::string& value) {
  ;


  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_app_name() {
  ;
  return _impl_.app_name_.Mutable( GetArenaForAllocation());
}
inline std::string* VersionInfo::release_app_name() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.VersionInfo.app_name)
  return _impl_.app_name_.Release();
}
inline void VersionInfo::set_allocated_app_name(std::string* value) {
  _impl_.app_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_name_.IsDefault()) {
          _impl_.app_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.VersionInfo.app_name)
}

// string version = 3 [json_name = "version"];
inline void VersionInfo::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& VersionInfo::version() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.VersionInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionInfo::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.VersionInfo.version)
}
inline std::string* VersionInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.VersionInfo.version)
  return _s;
}
inline const std::string& VersionInfo::_internal_version() const {
  return _impl_.version_.Get();
}
inline void VersionInfo::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* VersionInfo::release_version() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.VersionInfo.version)
  return _impl_.version_.Release();
}
inline void VersionInfo::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.VersionInfo.version)
}

// string git_commit = 4 [json_name = "gitCommit"];
inline void VersionInfo::clear_git_commit() {
  _impl_.git_commit_.ClearToEmpty();
}
inline const std::string& VersionInfo::git_commit() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.VersionInfo.git_commit)
  return _internal_git_commit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionInfo::set_git_commit(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.git_commit_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.VersionInfo.git_commit)
}
inline std::string* VersionInfo::mutable_git_commit() {
  std::string* _s = _internal_mutable_git_commit();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.VersionInfo.git_commit)
  return _s;
}
inline const std::string& VersionInfo::_internal_git_commit() const {
  return _impl_.git_commit_.Get();
}
inline void VersionInfo::_internal_set_git_commit(const std::string& value) {
  ;


  _impl_.git_commit_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_git_commit() {
  ;
  return _impl_.git_commit_.Mutable( GetArenaForAllocation());
}
inline std::string* VersionInfo::release_git_commit() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.VersionInfo.git_commit)
  return _impl_.git_commit_.Release();
}
inline void VersionInfo::set_allocated_git_commit(std::string* value) {
  _impl_.git_commit_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.git_commit_.IsDefault()) {
          _impl_.git_commit_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.VersionInfo.git_commit)
}

// string build_tags = 5 [json_name = "buildTags"];
inline void VersionInfo::clear_build_tags() {
  _impl_.build_tags_.ClearToEmpty();
}
inline const std::string& VersionInfo::build_tags() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.VersionInfo.build_tags)
  return _internal_build_tags();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionInfo::set_build_tags(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.build_tags_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.VersionInfo.build_tags)
}
inline std::string* VersionInfo::mutable_build_tags() {
  std::string* _s = _internal_mutable_build_tags();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.VersionInfo.build_tags)
  return _s;
}
inline const std::string& VersionInfo::_internal_build_tags() const {
  return _impl_.build_tags_.Get();
}
inline void VersionInfo::_internal_set_build_tags(const std::string& value) {
  ;


  _impl_.build_tags_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_build_tags() {
  ;
  return _impl_.build_tags_.Mutable( GetArenaForAllocation());
}
inline std::string* VersionInfo::release_build_tags() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.VersionInfo.build_tags)
  return _impl_.build_tags_.Release();
}
inline void VersionInfo::set_allocated_build_tags(std::string* value) {
  _impl_.build_tags_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.build_tags_.IsDefault()) {
          _impl_.build_tags_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.VersionInfo.build_tags)
}

// string go_version = 6 [json_name = "goVersion"];
inline void VersionInfo::clear_go_version() {
  _impl_.go_version_.ClearToEmpty();
}
inline const std::string& VersionInfo::go_version() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.VersionInfo.go_version)
  return _internal_go_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionInfo::set_go_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.go_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.VersionInfo.go_version)
}
inline std::string* VersionInfo::mutable_go_version() {
  std::string* _s = _internal_mutable_go_version();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.VersionInfo.go_version)
  return _s;
}
inline const std::string& VersionInfo::_internal_go_version() const {
  return _impl_.go_version_.Get();
}
inline void VersionInfo::_internal_set_go_version(const std::string& value) {
  ;


  _impl_.go_version_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_go_version() {
  ;
  return _impl_.go_version_.Mutable( GetArenaForAllocation());
}
inline std::string* VersionInfo::release_go_version() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.VersionInfo.go_version)
  return _impl_.go_version_.Release();
}
inline void VersionInfo::set_allocated_go_version(std::string* value) {
  _impl_.go_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.go_version_.IsDefault()) {
          _impl_.go_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.VersionInfo.go_version)
}

// repeated .cosmos.base.tendermint.v1beta1.Module build_deps = 7 [json_name = "buildDeps"];
inline int VersionInfo::_internal_build_deps_size() const {
  return _impl_.build_deps_.size();
}
inline int VersionInfo::build_deps_size() const {
  return _internal_build_deps_size();
}
inline void VersionInfo::clear_build_deps() {
  _internal_mutable_build_deps()->Clear();
}
inline ::cosmos::base::tendermint::v1beta1::Module* VersionInfo::mutable_build_deps(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.VersionInfo.build_deps)
  return _internal_mutable_build_deps()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Module >*
VersionInfo::mutable_build_deps() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.tendermint.v1beta1.VersionInfo.build_deps)
  return _internal_mutable_build_deps();
}
inline const ::cosmos::base::tendermint::v1beta1::Module& VersionInfo::_internal_build_deps(int index) const {
  return _internal_build_deps().Get(index);
}
inline const ::cosmos::base::tendermint::v1beta1::Module& VersionInfo::build_deps(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.VersionInfo.build_deps)
  return _internal_build_deps(index);
}
inline ::cosmos::base::tendermint::v1beta1::Module* VersionInfo::_internal_add_build_deps() {
  return _internal_mutable_build_deps()->Add();
}
inline ::cosmos::base::tendermint::v1beta1::Module* VersionInfo::add_build_deps() {
  ::cosmos::base::tendermint::v1beta1::Module* _add = _internal_add_build_deps();
  // @@protoc_insertion_point(field_add:cosmos.base.tendermint.v1beta1.VersionInfo.build_deps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::Module >&
VersionInfo::build_deps() const {
  // @@protoc_insertion_point(field_list:cosmos.base.tendermint.v1beta1.VersionInfo.build_deps)
  return _internal_build_deps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Module>&
VersionInfo::_internal_build_deps() const {
  return _impl_.build_deps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::Module>*
VersionInfo::_internal_mutable_build_deps() {
  return &_impl_.build_deps_;
}

// string cosmos_sdk_version = 8 [json_name = "cosmosSdkVersion"];
inline void VersionInfo::clear_cosmos_sdk_version() {
  _impl_.cosmos_sdk_version_.ClearToEmpty();
}
inline const std::string& VersionInfo::cosmos_sdk_version() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.VersionInfo.cosmos_sdk_version)
  return _internal_cosmos_sdk_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VersionInfo::set_cosmos_sdk_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.cosmos_sdk_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.VersionInfo.cosmos_sdk_version)
}
inline std::string* VersionInfo::mutable_cosmos_sdk_version() {
  std::string* _s = _internal_mutable_cosmos_sdk_version();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.VersionInfo.cosmos_sdk_version)
  return _s;
}
inline const std::string& VersionInfo::_internal_cosmos_sdk_version() const {
  return _impl_.cosmos_sdk_version_.Get();
}
inline void VersionInfo::_internal_set_cosmos_sdk_version(const std::string& value) {
  ;


  _impl_.cosmos_sdk_version_.Set(value, GetArenaForAllocation());
}
inline std::string* VersionInfo::_internal_mutable_cosmos_sdk_version() {
  ;
  return _impl_.cosmos_sdk_version_.Mutable( GetArenaForAllocation());
}
inline std::string* VersionInfo::release_cosmos_sdk_version() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.VersionInfo.cosmos_sdk_version)
  return _impl_.cosmos_sdk_version_.Release();
}
inline void VersionInfo::set_allocated_cosmos_sdk_version(std::string* value) {
  _impl_.cosmos_sdk_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cosmos_sdk_version_.IsDefault()) {
          _impl_.cosmos_sdk_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.VersionInfo.cosmos_sdk_version)
}

// -------------------------------------------------------------------

// Module

// string path = 1 [json_name = "path"];
inline void Module::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Module::path() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Module.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Module::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Module.path)
}
inline std::string* Module::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Module.path)
  return _s;
}
inline const std::string& Module::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Module::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* Module::release_path() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Module.path)
  return _impl_.path_.Release();
}
inline void Module::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Module.path)
}

// string version = 2 [json_name = "version"];
inline void Module::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Module::version() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Module.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Module::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Module.version)
}
inline std::string* Module::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Module.version)
  return _s;
}
inline const std::string& Module::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Module::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* Module::release_version() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Module.version)
  return _impl_.version_.Release();
}
inline void Module::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Module.version)
}

// string sum = 3 [json_name = "sum"];
inline void Module::clear_sum() {
  _impl_.sum_.ClearToEmpty();
}
inline const std::string& Module::sum() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.Module.sum)
  return _internal_sum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Module::set_sum(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sum_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.Module.sum)
}
inline std::string* Module::mutable_sum() {
  std::string* _s = _internal_mutable_sum();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.Module.sum)
  return _s;
}
inline const std::string& Module::_internal_sum() const {
  return _impl_.sum_.Get();
}
inline void Module::_internal_set_sum(const std::string& value) {
  ;


  _impl_.sum_.Set(value, GetArenaForAllocation());
}
inline std::string* Module::_internal_mutable_sum() {
  ;
  return _impl_.sum_.Mutable( GetArenaForAllocation());
}
inline std::string* Module::release_sum() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.Module.sum)
  return _impl_.sum_.Release();
}
inline void Module::set_allocated_sum(std::string* value) {
  _impl_.sum_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sum_.IsDefault()) {
          _impl_.sum_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.Module.sum)
}

// -------------------------------------------------------------------

// ABCIQueryRequest

// bytes data = 1 [json_name = "data"];
inline void ABCIQueryRequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ABCIQueryRequest::data() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ABCIQueryRequest::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.data)
}
inline std::string* ABCIQueryRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.data)
  return _s;
}
inline const std::string& ABCIQueryRequest::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ABCIQueryRequest::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ABCIQueryRequest::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* ABCIQueryRequest::release_data() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.data)
  return _impl_.data_.Release();
}
inline void ABCIQueryRequest::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.data)
}

// string path = 2 [json_name = "path"];
inline void ABCIQueryRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ABCIQueryRequest::path() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ABCIQueryRequest::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.path)
}
inline std::string* ABCIQueryRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.path)
  return _s;
}
inline const std::string& ABCIQueryRequest::_internal_path() const {
  return _impl_.path_.Get();
}
inline void ABCIQueryRequest::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* ABCIQueryRequest::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* ABCIQueryRequest::release_path() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.path)
  return _impl_.path_.Release();
}
inline void ABCIQueryRequest::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.path)
}

// int64 height = 3 [json_name = "height"];
inline void ABCIQueryRequest::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t ABCIQueryRequest::height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.height)
  return _internal_height();
}
inline void ABCIQueryRequest::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.height)
}
inline ::int64_t ABCIQueryRequest::_internal_height() const {
  return _impl_.height_;
}
inline void ABCIQueryRequest::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// bool prove = 4 [json_name = "prove"];
inline void ABCIQueryRequest::clear_prove() {
  _impl_.prove_ = false;
}
inline bool ABCIQueryRequest::prove() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.prove)
  return _internal_prove();
}
inline void ABCIQueryRequest::set_prove(bool value) {
  _internal_set_prove(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryRequest.prove)
}
inline bool ABCIQueryRequest::_internal_prove() const {
  return _impl_.prove_;
}
inline void ABCIQueryRequest::_internal_set_prove(bool value) {
  ;
  _impl_.prove_ = value;
}

// -------------------------------------------------------------------

// ABCIQueryResponse

// uint32 code = 1 [json_name = "code"];
inline void ABCIQueryResponse::clear_code() {
  _impl_.code_ = 0u;
}
inline ::uint32_t ABCIQueryResponse::code() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.code)
  return _internal_code();
}
inline void ABCIQueryResponse::set_code(::uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.code)
}
inline ::uint32_t ABCIQueryResponse::_internal_code() const {
  return _impl_.code_;
}
inline void ABCIQueryResponse::_internal_set_code(::uint32_t value) {
  ;
  _impl_.code_ = value;
}

// string log = 3 [json_name = "log"];
inline void ABCIQueryResponse::clear_log() {
  _impl_.log_.ClearToEmpty();
}
inline const std::string& ABCIQueryResponse::log() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.log)
  return _internal_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ABCIQueryResponse::set_log(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.log_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.log)
}
inline std::string* ABCIQueryResponse::mutable_log() {
  std::string* _s = _internal_mutable_log();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.log)
  return _s;
}
inline const std::string& ABCIQueryResponse::_internal_log() const {
  return _impl_.log_.Get();
}
inline void ABCIQueryResponse::_internal_set_log(const std::string& value) {
  ;


  _impl_.log_.Set(value, GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::_internal_mutable_log() {
  ;
  return _impl_.log_.Mutable( GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::release_log() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.log)
  return _impl_.log_.Release();
}
inline void ABCIQueryResponse::set_allocated_log(std::string* value) {
  _impl_.log_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.log_.IsDefault()) {
          _impl_.log_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.log)
}

// string info = 4 [json_name = "info"];
inline void ABCIQueryResponse::clear_info() {
  _impl_.info_.ClearToEmpty();
}
inline const std::string& ABCIQueryResponse::info() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ABCIQueryResponse::set_info(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.info)
}
inline std::string* ABCIQueryResponse::mutable_info() {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.info)
  return _s;
}
inline const std::string& ABCIQueryResponse::_internal_info() const {
  return _impl_.info_.Get();
}
inline void ABCIQueryResponse::_internal_set_info(const std::string& value) {
  ;


  _impl_.info_.Set(value, GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::_internal_mutable_info() {
  ;
  return _impl_.info_.Mutable( GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::release_info() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.info)
  return _impl_.info_.Release();
}
inline void ABCIQueryResponse::set_allocated_info(std::string* value) {
  _impl_.info_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.info_.IsDefault()) {
          _impl_.info_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.info)
}

// int64 index = 5 [json_name = "index"];
inline void ABCIQueryResponse::clear_index() {
  _impl_.index_ = ::int64_t{0};
}
inline ::int64_t ABCIQueryResponse::index() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.index)
  return _internal_index();
}
inline void ABCIQueryResponse::set_index(::int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.index)
}
inline ::int64_t ABCIQueryResponse::_internal_index() const {
  return _impl_.index_;
}
inline void ABCIQueryResponse::_internal_set_index(::int64_t value) {
  ;
  _impl_.index_ = value;
}

// bytes key = 6 [json_name = "key"];
inline void ABCIQueryResponse::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ABCIQueryResponse::key() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ABCIQueryResponse::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.key)
}
inline std::string* ABCIQueryResponse::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.key)
  return _s;
}
inline const std::string& ABCIQueryResponse::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ABCIQueryResponse::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::release_key() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.key)
  return _impl_.key_.Release();
}
inline void ABCIQueryResponse::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.key)
}

// bytes value = 7 [json_name = "value"];
inline void ABCIQueryResponse::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ABCIQueryResponse::value() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ABCIQueryResponse::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.value)
}
inline std::string* ABCIQueryResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.value)
  return _s;
}
inline const std::string& ABCIQueryResponse::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ABCIQueryResponse::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::release_value() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.value)
  return _impl_.value_.Release();
}
inline void ABCIQueryResponse::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.value)
}

// .cosmos.base.tendermint.v1beta1.ProofOps proof_ops = 8 [json_name = "proofOps"];
inline bool ABCIQueryResponse::has_proof_ops() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_ops_ != nullptr);
  return value;
}
inline void ABCIQueryResponse::clear_proof_ops() {
  if (_impl_.proof_ops_ != nullptr) _impl_.proof_ops_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::tendermint::v1beta1::ProofOps& ABCIQueryResponse::_internal_proof_ops() const {
  const ::cosmos::base::tendermint::v1beta1::ProofOps* p = _impl_.proof_ops_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::tendermint::v1beta1::ProofOps&>(
      ::cosmos::base::tendermint::v1beta1::_ProofOps_default_instance_);
}
inline const ::cosmos::base::tendermint::v1beta1::ProofOps& ABCIQueryResponse::proof_ops() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.proof_ops)
  return _internal_proof_ops();
}
inline void ABCIQueryResponse::unsafe_arena_set_allocated_proof_ops(
    ::cosmos::base::tendermint::v1beta1::ProofOps* proof_ops) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_ops_);
  }
  _impl_.proof_ops_ = proof_ops;
  if (proof_ops) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.proof_ops)
}
inline ::cosmos::base::tendermint::v1beta1::ProofOps* ABCIQueryResponse::release_proof_ops() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::tendermint::v1beta1::ProofOps* temp = _impl_.proof_ops_;
  _impl_.proof_ops_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::ProofOps* ABCIQueryResponse::unsafe_arena_release_proof_ops() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.proof_ops)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::tendermint::v1beta1::ProofOps* temp = _impl_.proof_ops_;
  _impl_.proof_ops_ = nullptr;
  return temp;
}
inline ::cosmos::base::tendermint::v1beta1::ProofOps* ABCIQueryResponse::_internal_mutable_proof_ops() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_ops_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::tendermint::v1beta1::ProofOps>(GetArenaForAllocation());
    _impl_.proof_ops_ = p;
  }
  return _impl_.proof_ops_;
}
inline ::cosmos::base::tendermint::v1beta1::ProofOps* ABCIQueryResponse::mutable_proof_ops() {
  ::cosmos::base::tendermint::v1beta1::ProofOps* _msg = _internal_mutable_proof_ops();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.proof_ops)
  return _msg;
}
inline void ABCIQueryResponse::set_allocated_proof_ops(::cosmos::base::tendermint::v1beta1::ProofOps* proof_ops) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.proof_ops_;
  }
  if (proof_ops) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proof_ops);
    if (message_arena != submessage_arena) {
      proof_ops = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_ops, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_ops_ = proof_ops;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.proof_ops)
}

// int64 height = 9 [json_name = "height"];
inline void ABCIQueryResponse::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t ABCIQueryResponse::height() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.height)
  return _internal_height();
}
inline void ABCIQueryResponse::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.height)
}
inline ::int64_t ABCIQueryResponse::_internal_height() const {
  return _impl_.height_;
}
inline void ABCIQueryResponse::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// string codespace = 10 [json_name = "codespace"];
inline void ABCIQueryResponse::clear_codespace() {
  _impl_.codespace_.ClearToEmpty();
}
inline const std::string& ABCIQueryResponse::codespace() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.codespace)
  return _internal_codespace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ABCIQueryResponse::set_codespace(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.codespace_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.codespace)
}
inline std::string* ABCIQueryResponse::mutable_codespace() {
  std::string* _s = _internal_mutable_codespace();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.codespace)
  return _s;
}
inline const std::string& ABCIQueryResponse::_internal_codespace() const {
  return _impl_.codespace_.Get();
}
inline void ABCIQueryResponse::_internal_set_codespace(const std::string& value) {
  ;


  _impl_.codespace_.Set(value, GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::_internal_mutable_codespace() {
  ;
  return _impl_.codespace_.Mutable( GetArenaForAllocation());
}
inline std::string* ABCIQueryResponse::release_codespace() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.codespace)
  return _impl_.codespace_.Release();
}
inline void ABCIQueryResponse::set_allocated_codespace(std::string* value) {
  _impl_.codespace_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.codespace_.IsDefault()) {
          _impl_.codespace_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ABCIQueryResponse.codespace)
}

// -------------------------------------------------------------------

// ProofOp

// string type = 1 [json_name = "type"];
inline void ProofOp::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& ProofOp::type() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ProofOp.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProofOp::set_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ProofOp.type)
}
inline std::string* ProofOp::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ProofOp.type)
  return _s;
}
inline const std::string& ProofOp::_internal_type() const {
  return _impl_.type_.Get();
}
inline void ProofOp::_internal_set_type(const std::string& value) {
  ;


  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* ProofOp::_internal_mutable_type() {
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* ProofOp::release_type() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ProofOp.type)
  return _impl_.type_.Release();
}
inline void ProofOp::set_allocated_type(std::string* value) {
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ProofOp.type)
}

// bytes key = 2 [json_name = "key"];
inline void ProofOp::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ProofOp::key() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ProofOp.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProofOp::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ProofOp.key)
}
inline std::string* ProofOp::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ProofOp.key)
  return _s;
}
inline const std::string& ProofOp::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ProofOp::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ProofOp::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* ProofOp::release_key() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ProofOp.key)
  return _impl_.key_.Release();
}
inline void ProofOp::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ProofOp.key)
}

// bytes data = 3 [json_name = "data"];
inline void ProofOp::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ProofOp::data() const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ProofOp.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProofOp::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.tendermint.v1beta1.ProofOp.data)
}
inline std::string* ProofOp::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ProofOp.data)
  return _s;
}
inline const std::string& ProofOp::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ProofOp::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ProofOp::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* ProofOp::release_data() {
  // @@protoc_insertion_point(field_release:cosmos.base.tendermint.v1beta1.ProofOp.data)
  return _impl_.data_.Release();
}
inline void ProofOp::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.tendermint.v1beta1.ProofOp.data)
}

// -------------------------------------------------------------------

// ProofOps

// repeated .cosmos.base.tendermint.v1beta1.ProofOp ops = 1 [json_name = "ops", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int ProofOps::_internal_ops_size() const {
  return _impl_.ops_.size();
}
inline int ProofOps::ops_size() const {
  return _internal_ops_size();
}
inline void ProofOps::clear_ops() {
  _internal_mutable_ops()->Clear();
}
inline ::cosmos::base::tendermint::v1beta1::ProofOp* ProofOps::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.tendermint.v1beta1.ProofOps.ops)
  return _internal_mutable_ops()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::ProofOp >*
ProofOps::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.tendermint.v1beta1.ProofOps.ops)
  return _internal_mutable_ops();
}
inline const ::cosmos::base::tendermint::v1beta1::ProofOp& ProofOps::_internal_ops(int index) const {
  return _internal_ops().Get(index);
}
inline const ::cosmos::base::tendermint::v1beta1::ProofOp& ProofOps::ops(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.tendermint.v1beta1.ProofOps.ops)
  return _internal_ops(index);
}
inline ::cosmos::base::tendermint::v1beta1::ProofOp* ProofOps::_internal_add_ops() {
  return _internal_mutable_ops()->Add();
}
inline ::cosmos::base::tendermint::v1beta1::ProofOp* ProofOps::add_ops() {
  ::cosmos::base::tendermint::v1beta1::ProofOp* _add = _internal_add_ops();
  // @@protoc_insertion_point(field_add:cosmos.base.tendermint.v1beta1.ProofOps.ops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::tendermint::v1beta1::ProofOp >&
ProofOps::ops() const {
  // @@protoc_insertion_point(field_list:cosmos.base.tendermint.v1beta1.ProofOps.ops)
  return _internal_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::ProofOp>&
ProofOps::_internal_ops() const {
  return _impl_.ops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::tendermint::v1beta1::ProofOp>*
ProofOps::_internal_mutable_ops() {
  return &_impl_.ops_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tendermint
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2ftendermint_2fv1beta1_2fquery_2eproto_2epb_2eh

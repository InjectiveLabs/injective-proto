// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/query/v1beta1/pagination.proto

#include "cosmos/base/query/v1beta1/pagination.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace base {
namespace query {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR PageRequest::PageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.offset_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.count_total_)*/ false

  , /*decltype(_impl_.reverse_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageRequestDefaultTypeInternal() {}
  union {
    PageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageRequestDefaultTypeInternal _PageRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PageResponse::PageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.next_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageResponseDefaultTypeInternal() {}
  union {
    PageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageResponseDefaultTypeInternal _PageResponse_default_instance_;
}  // namespace v1beta1
}  // namespace query
}  // namespace base
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.offset_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.count_total_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageRequest, _impl_.reverse_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageResponse, _impl_.next_key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::query::v1beta1::PageResponse, _impl_.total_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::base::query::v1beta1::PageRequest)},
        { 13, -1, -1, sizeof(::cosmos::base::query::v1beta1::PageResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::base::query::v1beta1::_PageRequest_default_instance_._instance,
    &::cosmos::base::query::v1beta1::_PageResponse_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n*cosmos/base/query/v1beta1/pagination.p"
    "roto\022\031cosmos.base.query.v1beta1\"\210\001\n\013Page"
    "Request\022\020\n\003key\030\001 \001(\014R\003key\022\026\n\006offset\030\002 \001("
    "\004R\006offset\022\024\n\005limit\030\003 \001(\004R\005limit\022\037\n\013count"
    "_total\030\004 \001(\010R\ncountTotal\022\030\n\007reverse\030\005 \001("
    "\010R\007reverse\"\?\n\014PageResponse\022\031\n\010next_key\030\001"
    " \001(\014R\007nextKey\022\024\n\005total\030\002 \001(\004R\005totalB\341\001\n\035"
    "com.cosmos.base.query.v1beta1B\017Paginatio"
    "nProtoP\001Z(github.com/cosmos/cosmos-sdk/t"
    "ypes/query\242\002\003CBQ\252\002\031Cosmos.Base.Query.V1b"
    "eta1\312\002\031Cosmos\\Base\\Query\\V1beta1\342\002%Cosmo"
    "s\\Base\\Query\\V1beta1\\GPBMetadata\352\002\034Cosmo"
    "s::Base::Query::V1beta1b\006proto3"
};
static ::absl::once_flag descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto = {
    false,
    false,
    511,
    descriptor_table_protodef_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
    "cosmos/base/query/v1beta1/pagination.proto",
    &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto::offsets,
    file_level_metadata_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
    file_level_enum_descriptors_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_getter() {
  return &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto(&descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto);
namespace cosmos {
namespace base {
namespace query {
namespace v1beta1 {
// ===================================================================

class PageRequest::_Internal {
 public:
};

PageRequest::PageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.query.v1beta1.PageRequest)
}
PageRequest::PageRequest(const PageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.offset_) {}

    , decltype(_impl_.limit_) {}

    , decltype(_impl_.count_total_) {}

    , decltype(_impl_.reverse_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.offset_, &from._impl_.offset_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.reverse_) -
    reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.reverse_));
  // @@protoc_insertion_point(copy_constructor:cosmos.base.query.v1beta1.PageRequest)
}

inline void PageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.offset_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { ::uint64_t{0u} }

    , decltype(_impl_.count_total_) { false }

    , decltype(_impl_.reverse_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PageRequest::~PageRequest() {
  // @@protoc_insertion_point(destructor:cosmos.base.query.v1beta1.PageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void PageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.query.v1beta1.PageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  ::memset(&_impl_.offset_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.reverse_) -
      reinterpret_cast<char*>(&_impl_.offset_)) + sizeof(_impl_.reverse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 offset = 2 [json_name = "offset"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 limit = 3 [json_name = "limit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool count_total = 4 [json_name = "countTotal"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.count_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool reverse = 5 [json_name = "reverse"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PageRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.query.v1beta1.PageRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_offset(), target);
  }

  // uint64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_limit(), target);
  }

  // bool count_total = 4 [json_name = "countTotal"];
  if (this->_internal_count_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_count_total(), target);
  }

  // bool reverse = 5 [json_name = "reverse"];
  if (this->_internal_reverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_reverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.query.v1beta1.PageRequest)
  return target;
}

::size_t PageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.query.v1beta1.PageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // uint64 offset = 2 [json_name = "offset"];
  if (this->_internal_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_offset());
  }

  // uint64 limit = 3 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_limit());
  }

  // bool count_total = 4 [json_name = "countTotal"];
  if (this->_internal_count_total() != 0) {
    total_size += 2;
  }

  // bool reverse = 5 [json_name = "reverse"];
  if (this->_internal_reverse() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PageRequest::GetClassData() const { return &_class_data_; }


void PageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PageRequest*>(&to_msg);
  auto& from = static_cast<const PageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.query.v1beta1.PageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_offset() != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  if (from._internal_count_total() != 0) {
    _this->_internal_set_count_total(from._internal_count_total());
  }
  if (from._internal_reverse() != 0) {
    _this->_internal_set_reverse(from._internal_reverse());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PageRequest::CopyFrom(const PageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.query.v1beta1.PageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageRequest::IsInitialized() const {
  return true;
}

void PageRequest::InternalSwap(PageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.reverse_)
      + sizeof(PageRequest::_impl_.reverse_)
      - PROTOBUF_FIELD_OFFSET(PageRequest, _impl_.offset_)>(
          reinterpret_cast<char*>(&_impl_.offset_),
          reinterpret_cast<char*>(&other->_impl_.offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_getter, &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto[0]);
}
// ===================================================================

class PageResponse::_Internal {
 public:
};

PageResponse::PageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.query.v1beta1.PageResponse)
}
PageResponse::PageResponse(const PageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.next_key_) {}

    , decltype(_impl_.total_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_key().empty()) {
    _this->_impl_.next_key_.Set(from._internal_next_key(), _this->GetArenaForAllocation());
  }
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:cosmos.base.query.v1beta1.PageResponse)
}

inline void PageResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.next_key_) {}

    , decltype(_impl_.total_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PageResponse::~PageResponse() {
  // @@protoc_insertion_point(destructor:cosmos.base.query.v1beta1.PageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_key_.Destroy();
}

void PageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.query.v1beta1.PageResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_key_.ClearToEmpty();
  _impl_.total_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes next_key = 1 [json_name = "nextKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_next_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PageResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.query.v1beta1.PageResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes next_key = 1 [json_name = "nextKey"];
  if (!this->_internal_next_key().empty()) {
    const std::string& _s = this->_internal_next_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.query.v1beta1.PageResponse)
  return target;
}

::size_t PageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.query.v1beta1.PageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes next_key = 1 [json_name = "nextKey"];
  if (!this->_internal_next_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_next_key());
  }

  // uint64 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PageResponse::GetClassData() const { return &_class_data_; }


void PageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PageResponse*>(&to_msg);
  auto& from = static_cast<const PageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.query.v1beta1.PageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_next_key().empty()) {
    _this->_internal_set_next_key(from._internal_next_key());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PageResponse::CopyFrom(const PageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.query.v1beta1.PageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageResponse::IsInitialized() const {
  return true;
}

void PageResponse::InternalSwap(PageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_key_, lhs_arena,
                                       &other->_impl_.next_key_, rhs_arena);

  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_getter, &descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace query
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::base::query::v1beta1::PageRequest*
Arena::CreateMaybeMessage< ::cosmos::base::query::v1beta1::PageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::query::v1beta1::PageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::query::v1beta1::PageResponse*
Arena::CreateMaybeMessage< ::cosmos::base::query::v1beta1::PageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::query::v1beta1::PageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

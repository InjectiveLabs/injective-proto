// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/store/v1beta1/commit_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
namespace cosmos {
namespace base {
namespace store {
namespace v1beta1 {
class CommitID;
struct CommitIDDefaultTypeInternal;
extern CommitIDDefaultTypeInternal _CommitID_default_instance_;
class CommitInfo;
struct CommitInfoDefaultTypeInternal;
extern CommitInfoDefaultTypeInternal _CommitInfo_default_instance_;
class StoreInfo;
struct StoreInfoDefaultTypeInternal;
extern StoreInfoDefaultTypeInternal _StoreInfo_default_instance_;
}  // namespace v1beta1
}  // namespace store
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::base::store::v1beta1::CommitID* Arena::CreateMaybeMessage<::cosmos::base::store::v1beta1::CommitID>(Arena*);
template <>
::cosmos::base::store::v1beta1::CommitInfo* Arena::CreateMaybeMessage<::cosmos::base::store::v1beta1::CommitInfo>(Arena*);
template <>
::cosmos::base::store::v1beta1::StoreInfo* Arena::CreateMaybeMessage<::cosmos::base::store::v1beta1::StoreInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace base {
namespace store {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class CommitInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.store.v1beta1.CommitInfo) */ {
 public:
  inline CommitInfo() : CommitInfo(nullptr) {}
  ~CommitInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommitInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitInfo(const CommitInfo& from);
  CommitInfo(CommitInfo&& from) noexcept
    : CommitInfo() {
    *this = ::std::move(from);
  }

  inline CommitInfo& operator=(const CommitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitInfo& operator=(CommitInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitInfo* internal_default_instance() {
    return reinterpret_cast<const CommitInfo*>(
               &_CommitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommitInfo& a, CommitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommitInfo& from) {
    CommitInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.store.v1beta1.CommitInfo";
  }
  protected:
  explicit CommitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreInfosFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .cosmos.base.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
  int store_infos_size() const;
  private:
  int _internal_store_infos_size() const;

  public:
  void clear_store_infos() ;
  ::cosmos::base::store::v1beta1::StoreInfo* mutable_store_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::StoreInfo >*
      mutable_store_infos();
  private:
  const ::cosmos::base::store::v1beta1::StoreInfo& _internal_store_infos(int index) const;
  ::cosmos::base::store::v1beta1::StoreInfo* _internal_add_store_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::store::v1beta1::StoreInfo>& _internal_store_infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::store::v1beta1::StoreInfo>* _internal_mutable_store_infos();
  public:
  const ::cosmos::base::store::v1beta1::StoreInfo& store_infos(int index) const;
  ::cosmos::base::store::v1beta1::StoreInfo* add_store_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::StoreInfo >&
      store_infos() const;
  // int64 version = 1 [json_name = "version"];
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.store.v1beta1.CommitInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::StoreInfo > store_infos_;
    ::int64_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
};// -------------------------------------------------------------------

class StoreInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.store.v1beta1.StoreInfo) */ {
 public:
  inline StoreInfo() : StoreInfo(nullptr) {}
  ~StoreInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StoreInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreInfo(const StoreInfo& from);
  StoreInfo(StoreInfo&& from) noexcept
    : StoreInfo() {
    *this = ::std::move(from);
  }

  inline StoreInfo& operator=(const StoreInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreInfo& operator=(StoreInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreInfo* internal_default_instance() {
    return reinterpret_cast<const StoreInfo*>(
               &_StoreInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StoreInfo& a, StoreInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoreInfo& from) {
    StoreInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.store.v1beta1.StoreInfo";
  }
  protected:
  explicit StoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCommitIdFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .cosmos.base.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
  bool has_commit_id() const;
  void clear_commit_id() ;
  const ::cosmos::base::store::v1beta1::CommitID& commit_id() const;
  PROTOBUF_NODISCARD ::cosmos::base::store::v1beta1::CommitID* release_commit_id();
  ::cosmos::base::store::v1beta1::CommitID* mutable_commit_id();
  void set_allocated_commit_id(::cosmos::base::store::v1beta1::CommitID* commit_id);
  private:
  const ::cosmos::base::store::v1beta1::CommitID& _internal_commit_id() const;
  ::cosmos::base::store::v1beta1::CommitID* _internal_mutable_commit_id();
  public:
  void unsafe_arena_set_allocated_commit_id(
      ::cosmos::base::store::v1beta1::CommitID* commit_id);
  ::cosmos::base::store::v1beta1::CommitID* unsafe_arena_release_commit_id();
  // @@protoc_insertion_point(class_scope:cosmos.base.store.v1beta1.StoreInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::cosmos::base::store::v1beta1::CommitID* commit_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
};// -------------------------------------------------------------------

class CommitID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.store.v1beta1.CommitID) */ {
 public:
  inline CommitID() : CommitID(nullptr) {}
  ~CommitID() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommitID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitID(const CommitID& from);
  CommitID(CommitID&& from) noexcept
    : CommitID() {
    *this = ::std::move(from);
  }

  inline CommitID& operator=(const CommitID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitID& operator=(CommitID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitID* internal_default_instance() {
    return reinterpret_cast<const CommitID*>(
               &_CommitID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommitID& a, CommitID& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommitID& from) {
    CommitID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.store.v1beta1.CommitID";
  }
  protected:
  explicit CommitID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // bytes hash = 2 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // int64 version = 1 [json_name = "version"];
  void clear_version() ;
  ::int64_t version() const;
  void set_version(::int64_t value);

  private:
  ::int64_t _internal_version() const;
  void _internal_set_version(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.store.v1beta1.CommitID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::int64_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommitInfo

// int64 version = 1 [json_name = "version"];
inline void CommitInfo::clear_version() {
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t CommitInfo::version() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.CommitInfo.version)
  return _internal_version();
}
inline void CommitInfo::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cosmos.base.store.v1beta1.CommitInfo.version)
}
inline ::int64_t CommitInfo::_internal_version() const {
  return _impl_.version_;
}
inline void CommitInfo::_internal_set_version(::int64_t value) {
  ;
  _impl_.version_ = value;
}

// repeated .cosmos.base.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
inline int CommitInfo::_internal_store_infos_size() const {
  return _impl_.store_infos_.size();
}
inline int CommitInfo::store_infos_size() const {
  return _internal_store_infos_size();
}
inline void CommitInfo::clear_store_infos() {
  _internal_mutable_store_infos()->Clear();
}
inline ::cosmos::base::store::v1beta1::StoreInfo* CommitInfo::mutable_store_infos(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.CommitInfo.store_infos)
  return _internal_mutable_store_infos()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::StoreInfo >*
CommitInfo::mutable_store_infos() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.store.v1beta1.CommitInfo.store_infos)
  return _internal_mutable_store_infos();
}
inline const ::cosmos::base::store::v1beta1::StoreInfo& CommitInfo::_internal_store_infos(int index) const {
  return _internal_store_infos().Get(index);
}
inline const ::cosmos::base::store::v1beta1::StoreInfo& CommitInfo::store_infos(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.CommitInfo.store_infos)
  return _internal_store_infos(index);
}
inline ::cosmos::base::store::v1beta1::StoreInfo* CommitInfo::_internal_add_store_infos() {
  return _internal_mutable_store_infos()->Add();
}
inline ::cosmos::base::store::v1beta1::StoreInfo* CommitInfo::add_store_infos() {
  ::cosmos::base::store::v1beta1::StoreInfo* _add = _internal_add_store_infos();
  // @@protoc_insertion_point(field_add:cosmos.base.store.v1beta1.CommitInfo.store_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::StoreInfo >&
CommitInfo::store_infos() const {
  // @@protoc_insertion_point(field_list:cosmos.base.store.v1beta1.CommitInfo.store_infos)
  return _internal_store_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::store::v1beta1::StoreInfo>&
CommitInfo::_internal_store_infos() const {
  return _impl_.store_infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::store::v1beta1::StoreInfo>*
CommitInfo::_internal_mutable_store_infos() {
  return &_impl_.store_infos_;
}

// -------------------------------------------------------------------

// StoreInfo

// string name = 1 [json_name = "name"];
inline void StoreInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StoreInfo::name() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.StoreInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.store.v1beta1.StoreInfo.name)
}
inline std::string* StoreInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.StoreInfo.name)
  return _s;
}
inline const std::string& StoreInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StoreInfo::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreInfo::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* StoreInfo::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.StoreInfo.name)
  return _impl_.name_.Release();
}
inline void StoreInfo::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.StoreInfo.name)
}

// .cosmos.base.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
inline bool StoreInfo::has_commit_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.commit_id_ != nullptr);
  return value;
}
inline void StoreInfo::clear_commit_id() {
  if (_impl_.commit_id_ != nullptr) _impl_.commit_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::store::v1beta1::CommitID& StoreInfo::_internal_commit_id() const {
  const ::cosmos::base::store::v1beta1::CommitID* p = _impl_.commit_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::store::v1beta1::CommitID&>(
      ::cosmos::base::store::v1beta1::_CommitID_default_instance_);
}
inline const ::cosmos::base::store::v1beta1::CommitID& StoreInfo::commit_id() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.StoreInfo.commit_id)
  return _internal_commit_id();
}
inline void StoreInfo::unsafe_arena_set_allocated_commit_id(
    ::cosmos::base::store::v1beta1::CommitID* commit_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_id_);
  }
  _impl_.commit_id_ = commit_id;
  if (commit_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.store.v1beta1.StoreInfo.commit_id)
}
inline ::cosmos::base::store::v1beta1::CommitID* StoreInfo::release_commit_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::store::v1beta1::CommitID* temp = _impl_.commit_id_;
  _impl_.commit_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::store::v1beta1::CommitID* StoreInfo::unsafe_arena_release_commit_id() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.StoreInfo.commit_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::store::v1beta1::CommitID* temp = _impl_.commit_id_;
  _impl_.commit_id_ = nullptr;
  return temp;
}
inline ::cosmos::base::store::v1beta1::CommitID* StoreInfo::_internal_mutable_commit_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.commit_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::store::v1beta1::CommitID>(GetArenaForAllocation());
    _impl_.commit_id_ = p;
  }
  return _impl_.commit_id_;
}
inline ::cosmos::base::store::v1beta1::CommitID* StoreInfo::mutable_commit_id() {
  ::cosmos::base::store::v1beta1::CommitID* _msg = _internal_mutable_commit_id();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.StoreInfo.commit_id)
  return _msg;
}
inline void StoreInfo::set_allocated_commit_id(::cosmos::base::store::v1beta1::CommitID* commit_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.commit_id_;
  }
  if (commit_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commit_id);
    if (message_arena != submessage_arena) {
      commit_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.commit_id_ = commit_id;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.StoreInfo.commit_id)
}

// -------------------------------------------------------------------

// CommitID

// int64 version = 1 [json_name = "version"];
inline void CommitID::clear_version() {
  _impl_.version_ = ::int64_t{0};
}
inline ::int64_t CommitID::version() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.CommitID.version)
  return _internal_version();
}
inline void CommitID::set_version(::int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:cosmos.base.store.v1beta1.CommitID.version)
}
inline ::int64_t CommitID::_internal_version() const {
  return _impl_.version_;
}
inline void CommitID::_internal_set_version(::int64_t value) {
  ;
  _impl_.version_ = value;
}

// bytes hash = 2 [json_name = "hash"];
inline void CommitID::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& CommitID::hash() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.CommitID.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommitID::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.store.v1beta1.CommitID.hash)
}
inline std::string* CommitID::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.CommitID.hash)
  return _s;
}
inline const std::string& CommitID::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void CommitID::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* CommitID::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* CommitID::release_hash() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.CommitID.hash)
  return _impl_.hash_.Release();
}
inline void CommitID::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.CommitID.hash)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace store
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_2epb_2eh

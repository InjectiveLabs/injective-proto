// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/store/v1beta1/listening.proto

#include "cosmos/base/store/v1beta1/listening.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace base {
namespace store {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR StoreKVPair::StoreKVPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.store_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.delete__)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreKVPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreKVPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreKVPairDefaultTypeInternal() {}
  union {
    StoreKVPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreKVPairDefaultTypeInternal _StoreKVPair_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockMetadata_DeliverTx::BlockMetadata_DeliverTx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr} {}
struct BlockMetadata_DeliverTxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockMetadata_DeliverTxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockMetadata_DeliverTxDefaultTypeInternal() {}
  union {
    BlockMetadata_DeliverTx _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockMetadata_DeliverTxDefaultTypeInternal _BlockMetadata_DeliverTx_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockMetadata::BlockMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deliver_txs_)*/{}
  , /*decltype(_impl_.request_begin_block_)*/nullptr
  , /*decltype(_impl_.response_begin_block_)*/nullptr
  , /*decltype(_impl_.request_end_block_)*/nullptr
  , /*decltype(_impl_.response_end_block_)*/nullptr
  , /*decltype(_impl_.response_commit_)*/nullptr} {}
struct BlockMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockMetadataDefaultTypeInternal() {}
  union {
    BlockMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockMetadataDefaultTypeInternal _BlockMetadata_default_instance_;
}  // namespace v1beta1
}  // namespace store
}  // namespace base
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreKVPair, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreKVPair, _impl_.store_key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreKVPair, _impl_.delete__),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreKVPair, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreKVPair, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx, _impl_.request_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx, _impl_.response_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata, _impl_.request_begin_block_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata, _impl_.response_begin_block_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata, _impl_.deliver_txs_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata, _impl_.request_end_block_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata, _impl_.response_end_block_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::BlockMetadata, _impl_.response_commit_),
    0,
    1,
    ~0u,
    2,
    3,
    4,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::base::store::v1beta1::StoreKVPair)},
        { 12, 22, -1, sizeof(::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx)},
        { 24, 38, -1, sizeof(::cosmos::base::store::v1beta1::BlockMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::base::store::v1beta1::_StoreKVPair_default_instance_._instance,
    &::cosmos::base::store::v1beta1::_BlockMetadata_DeliverTx_default_instance_._instance,
    &::cosmos::base::store::v1beta1::_BlockMetadata_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)cosmos/base/store/v1beta1/listening.pr"
    "oto\022\031cosmos.base.store.v1beta1\032\033tendermi"
    "nt/abci/types.proto\"j\n\013StoreKVPair\022\033\n\tst"
    "ore_key\030\001 \001(\tR\010storeKey\022\026\n\006delete\030\002 \001(\010R"
    "\006delete\022\020\n\003key\030\003 \001(\014R\003key\022\024\n\005value\030\004 \001(\014"
    "R\005value\"\203\005\n\rBlockMetadata\022R\n\023request_beg"
    "in_block\030\001 \001(\0132\".tendermint.abci.Request"
    "BeginBlockR\021requestBeginBlock\022U\n\024respons"
    "e_begin_block\030\002 \001(\0132#.tendermint.abci.Re"
    "sponseBeginBlockR\022responseBeginBlock\022S\n\013"
    "deliver_txs\030\003 \003(\01322.cosmos.base.store.v1"
    "beta1.BlockMetadata.DeliverTxR\ndeliverTx"
    "s\022L\n\021request_end_block\030\004 \001(\0132 .tendermin"
    "t.abci.RequestEndBlockR\017requestEndBlock\022"
    "O\n\022response_end_block\030\005 \001(\0132!.tendermint"
    ".abci.ResponseEndBlockR\020responseEndBlock"
    "\022H\n\017response_commit\030\006 \001(\0132\037.tendermint.a"
    "bci.ResponseCommitR\016responseCommit\032\210\001\n\tD"
    "eliverTx\022;\n\007request\030\001 \001(\0132!.tendermint.a"
    "bci.RequestDeliverTxR\007request\022>\n\010respons"
    "e\030\002 \001(\0132\".tendermint.abci.ResponseDelive"
    "rTxR\010responseB\340\001\n\035com.cosmos.base.store."
    "v1beta1B\016ListeningProtoP\001Z(github.com/co"
    "smos/cosmos-sdk/store/types\242\002\003CBS\252\002\031Cosm"
    "os.Base.Store.V1beta1\312\002\031Cosmos\\Base\\Stor"
    "e\\V1beta1\342\002%Cosmos\\Base\\Store\\V1beta1\\GP"
    "BMetadata\352\002\034Cosmos::Base::Store::V1beta1"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_deps[1] =
    {
        &::descriptor_table_tendermint_2fabci_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto = {
    false,
    false,
    1088,
    descriptor_table_protodef_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto,
    "cosmos/base/store/v1beta1/listening.proto",
    &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_once,
    descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto::offsets,
    file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto,
    file_level_enum_descriptors_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_getter() {
  return &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto(&descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto);
namespace cosmos {
namespace base {
namespace store {
namespace v1beta1 {
// ===================================================================

class StoreKVPair::_Internal {
 public:
};

StoreKVPair::StoreKVPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.store.v1beta1.StoreKVPair)
}
StoreKVPair::StoreKVPair(const StoreKVPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreKVPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.store_key_) {}

    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.delete__) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.store_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.store_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_store_key().empty()) {
    _this->_impl_.store_key_.Set(from._internal_store_key(), _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  _this->_impl_.delete__ = from._impl_.delete__;
  // @@protoc_insertion_point(copy_constructor:cosmos.base.store.v1beta1.StoreKVPair)
}

inline void StoreKVPair::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.store_key_) {}

    , decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.delete__) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.store_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.store_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoreKVPair::~StoreKVPair() {
  // @@protoc_insertion_point(destructor:cosmos.base.store.v1beta1.StoreKVPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreKVPair::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.store_key_.Destroy();
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void StoreKVPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreKVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.store.v1beta1.StoreKVPair)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.store_key_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _impl_.delete__ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreKVPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string store_key = 1 [json_name = "storeKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_store_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.store.v1beta1.StoreKVPair.store_key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool delete = 2 [json_name = "delete"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.delete__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes key = 3 [json_name = "key"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes value = 4 [json_name = "value"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StoreKVPair::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.store.v1beta1.StoreKVPair)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string store_key = 1 [json_name = "storeKey"];
  if (!this->_internal_store_key().empty()) {
    const std::string& _s = this->_internal_store_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.store.v1beta1.StoreKVPair.store_key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool delete = 2 [json_name = "delete"];
  if (this->_internal_delete_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_delete_(), target);
  }

  // bytes key = 3 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // bytes value = 4 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.store.v1beta1.StoreKVPair)
  return target;
}

::size_t StoreKVPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.store.v1beta1.StoreKVPair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string store_key = 1 [json_name = "storeKey"];
  if (!this->_internal_store_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_store_key());
  }

  // bytes key = 3 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // bytes value = 4 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_value());
  }

  // bool delete = 2 [json_name = "delete"];
  if (this->_internal_delete_() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreKVPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreKVPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreKVPair::GetClassData() const { return &_class_data_; }


void StoreKVPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreKVPair*>(&to_msg);
  auto& from = static_cast<const StoreKVPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.store.v1beta1.StoreKVPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_store_key().empty()) {
    _this->_internal_set_store_key(from._internal_store_key());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_delete_() != 0) {
    _this->_internal_set_delete_(from._internal_delete_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreKVPair::CopyFrom(const StoreKVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.store.v1beta1.StoreKVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreKVPair::IsInitialized() const {
  return true;
}

void StoreKVPair::InternalSwap(StoreKVPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.store_key_, lhs_arena,
                                       &other->_impl_.store_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);

  swap(_impl_.delete__, other->_impl_.delete__);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreKVPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_getter, &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto[0]);
}
// ===================================================================

class BlockMetadata_DeliverTx::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockMetadata_DeliverTx>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockMetadata_DeliverTx, _impl_._has_bits_);
  static const ::tendermint::abci::RequestDeliverTx& request(const BlockMetadata_DeliverTx* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::abci::ResponseDeliverTx& response(const BlockMetadata_DeliverTx* msg);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::abci::RequestDeliverTx&
BlockMetadata_DeliverTx::_Internal::request(const BlockMetadata_DeliverTx* msg) {
  return *msg->_impl_.request_;
}
const ::tendermint::abci::ResponseDeliverTx&
BlockMetadata_DeliverTx::_Internal::response(const BlockMetadata_DeliverTx* msg) {
  return *msg->_impl_.response_;
}
void BlockMetadata_DeliverTx::clear_request() {
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void BlockMetadata_DeliverTx::clear_response() {
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
BlockMetadata_DeliverTx::BlockMetadata_DeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
}
BlockMetadata_DeliverTx::BlockMetadata_DeliverTx(const BlockMetadata_DeliverTx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockMetadata_DeliverTx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.request_ = new ::tendermint::abci::RequestDeliverTx(*from._impl_.request_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.response_ = new ::tendermint::abci::ResponseDeliverTx(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
}

inline void BlockMetadata_DeliverTx::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
  };
}

BlockMetadata_DeliverTx::~BlockMetadata_DeliverTx() {
  // @@protoc_insertion_point(destructor:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockMetadata_DeliverTx::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.request_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void BlockMetadata_DeliverTx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockMetadata_DeliverTx::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.request_ != nullptr);
      _impl_.request_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.response_ != nullptr);
      _impl_.response_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMetadata_DeliverTx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.RequestDeliverTx request = 1 [json_name = "request"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.abci.ResponseDeliverTx response = 2 [json_name = "response"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockMetadata_DeliverTx::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.abci.RequestDeliverTx request = 1 [json_name = "request"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseDeliverTx response = 2 [json_name = "response"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
  return target;
}

::size_t BlockMetadata_DeliverTx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.abci.RequestDeliverTx request = 1 [json_name = "request"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_);
    }

    // .tendermint.abci.ResponseDeliverTx response = 2 [json_name = "response"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockMetadata_DeliverTx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockMetadata_DeliverTx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockMetadata_DeliverTx::GetClassData() const { return &_class_data_; }


void BlockMetadata_DeliverTx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockMetadata_DeliverTx*>(&to_msg);
  auto& from = static_cast<const BlockMetadata_DeliverTx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_request()->::tendermint::abci::RequestDeliverTx::MergeFrom(
          from._internal_request());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_response()->::tendermint::abci::ResponseDeliverTx::MergeFrom(
          from._internal_response());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMetadata_DeliverTx::CopyFrom(const BlockMetadata_DeliverTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMetadata_DeliverTx::IsInitialized() const {
  return true;
}

void BlockMetadata_DeliverTx::InternalSwap(BlockMetadata_DeliverTx* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockMetadata_DeliverTx, _impl_.response_)
      + sizeof(BlockMetadata_DeliverTx::_impl_.response_)
      - PROTOBUF_FIELD_OFFSET(BlockMetadata_DeliverTx, _impl_.request_)>(
          reinterpret_cast<char*>(&_impl_.request_),
          reinterpret_cast<char*>(&other->_impl_.request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMetadata_DeliverTx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_getter, &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto[1]);
}
// ===================================================================

class BlockMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockMetadata, _impl_._has_bits_);
  static const ::tendermint::abci::RequestBeginBlock& request_begin_block(const BlockMetadata* msg);
  static void set_has_request_begin_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::abci::ResponseBeginBlock& response_begin_block(const BlockMetadata* msg);
  static void set_has_response_begin_block(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tendermint::abci::RequestEndBlock& request_end_block(const BlockMetadata* msg);
  static void set_has_request_end_block(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tendermint::abci::ResponseEndBlock& response_end_block(const BlockMetadata* msg);
  static void set_has_response_end_block(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::tendermint::abci::ResponseCommit& response_commit(const BlockMetadata* msg);
  static void set_has_response_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::tendermint::abci::RequestBeginBlock&
BlockMetadata::_Internal::request_begin_block(const BlockMetadata* msg) {
  return *msg->_impl_.request_begin_block_;
}
const ::tendermint::abci::ResponseBeginBlock&
BlockMetadata::_Internal::response_begin_block(const BlockMetadata* msg) {
  return *msg->_impl_.response_begin_block_;
}
const ::tendermint::abci::RequestEndBlock&
BlockMetadata::_Internal::request_end_block(const BlockMetadata* msg) {
  return *msg->_impl_.request_end_block_;
}
const ::tendermint::abci::ResponseEndBlock&
BlockMetadata::_Internal::response_end_block(const BlockMetadata* msg) {
  return *msg->_impl_.response_end_block_;
}
const ::tendermint::abci::ResponseCommit&
BlockMetadata::_Internal::response_commit(const BlockMetadata* msg) {
  return *msg->_impl_.response_commit_;
}
void BlockMetadata::clear_request_begin_block() {
  if (_impl_.request_begin_block_ != nullptr) _impl_.request_begin_block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void BlockMetadata::clear_response_begin_block() {
  if (_impl_.response_begin_block_ != nullptr) _impl_.response_begin_block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void BlockMetadata::clear_request_end_block() {
  if (_impl_.request_end_block_ != nullptr) _impl_.request_end_block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void BlockMetadata::clear_response_end_block() {
  if (_impl_.response_end_block_ != nullptr) _impl_.response_end_block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void BlockMetadata::clear_response_commit() {
  if (_impl_.response_commit_ != nullptr) _impl_.response_commit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
BlockMetadata::BlockMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.store.v1beta1.BlockMetadata)
}
BlockMetadata::BlockMetadata(const BlockMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deliver_txs_){from._impl_.deliver_txs_}
    , decltype(_impl_.request_begin_block_){nullptr}
    , decltype(_impl_.response_begin_block_){nullptr}
    , decltype(_impl_.request_end_block_){nullptr}
    , decltype(_impl_.response_end_block_){nullptr}
    , decltype(_impl_.response_commit_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.request_begin_block_ = new ::tendermint::abci::RequestBeginBlock(*from._impl_.request_begin_block_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.response_begin_block_ = new ::tendermint::abci::ResponseBeginBlock(*from._impl_.response_begin_block_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.request_end_block_ = new ::tendermint::abci::RequestEndBlock(*from._impl_.request_end_block_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.response_end_block_ = new ::tendermint::abci::ResponseEndBlock(*from._impl_.response_end_block_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.response_commit_ = new ::tendermint::abci::ResponseCommit(*from._impl_.response_commit_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.store.v1beta1.BlockMetadata)
}

inline void BlockMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deliver_txs_){arena}
    , decltype(_impl_.request_begin_block_){nullptr}
    , decltype(_impl_.response_begin_block_){nullptr}
    , decltype(_impl_.request_end_block_){nullptr}
    , decltype(_impl_.response_end_block_){nullptr}
    , decltype(_impl_.response_commit_){nullptr}
  };
}

BlockMetadata::~BlockMetadata() {
  // @@protoc_insertion_point(destructor:cosmos.base.store.v1beta1.BlockMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_deliver_txs()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.request_begin_block_;
  if (this != internal_default_instance()) delete _impl_.response_begin_block_;
  if (this != internal_default_instance()) delete _impl_.request_end_block_;
  if (this != internal_default_instance()) delete _impl_.response_end_block_;
  if (this != internal_default_instance()) delete _impl_.response_commit_;
}

void BlockMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.store.v1beta1.BlockMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_deliver_txs()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.request_begin_block_ != nullptr);
      _impl_.request_begin_block_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.response_begin_block_ != nullptr);
      _impl_.response_begin_block_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.request_end_block_ != nullptr);
      _impl_.request_end_block_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.response_end_block_ != nullptr);
      _impl_.response_end_block_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.response_commit_ != nullptr);
      _impl_.response_commit_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.abci.RequestBeginBlock request_begin_block = 1 [json_name = "requestBeginBlock"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_begin_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.abci.ResponseBeginBlock response_begin_block = 2 [json_name = "responseBeginBlock"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_begin_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.store.v1beta1.BlockMetadata.DeliverTx deliver_txs = 3 [json_name = "deliverTxs"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deliver_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.abci.RequestEndBlock request_end_block = 4 [json_name = "requestEndBlock"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_end_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.abci.ResponseEndBlock response_end_block = 5 [json_name = "responseEndBlock"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_end_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.abci.ResponseCommit response_commit = 6 [json_name = "responseCommit"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_commit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.store.v1beta1.BlockMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.abci.RequestBeginBlock request_begin_block = 1 [json_name = "requestBeginBlock"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::request_begin_block(this),
        _Internal::request_begin_block(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseBeginBlock response_begin_block = 2 [json_name = "responseBeginBlock"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::response_begin_block(this),
        _Internal::response_begin_block(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.store.v1beta1.BlockMetadata.DeliverTx deliver_txs = 3 [json_name = "deliverTxs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deliver_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_deliver_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tendermint.abci.RequestEndBlock request_end_block = 4 [json_name = "requestEndBlock"];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::request_end_block(this),
        _Internal::request_end_block(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseEndBlock response_end_block = 5 [json_name = "responseEndBlock"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::response_end_block(this),
        _Internal::response_end_block(this).GetCachedSize(), target, stream);
  }

  // .tendermint.abci.ResponseCommit response_commit = 6 [json_name = "responseCommit"];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::response_commit(this),
        _Internal::response_commit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.store.v1beta1.BlockMetadata)
  return target;
}

::size_t BlockMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.store.v1beta1.BlockMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.store.v1beta1.BlockMetadata.DeliverTx deliver_txs = 3 [json_name = "deliverTxs"];
  total_size += 1UL * this->_internal_deliver_txs_size();
  for (const auto& msg : this->_internal_deliver_txs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .tendermint.abci.RequestBeginBlock request_begin_block = 1 [json_name = "requestBeginBlock"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_begin_block_);
    }

    // .tendermint.abci.ResponseBeginBlock response_begin_block = 2 [json_name = "responseBeginBlock"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_begin_block_);
    }

    // .tendermint.abci.RequestEndBlock request_end_block = 4 [json_name = "requestEndBlock"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_end_block_);
    }

    // .tendermint.abci.ResponseEndBlock response_end_block = 5 [json_name = "responseEndBlock"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_end_block_);
    }

    // .tendermint.abci.ResponseCommit response_commit = 6 [json_name = "responseCommit"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_commit_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockMetadata::GetClassData() const { return &_class_data_; }


void BlockMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockMetadata*>(&to_msg);
  auto& from = static_cast<const BlockMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.store.v1beta1.BlockMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_deliver_txs()->MergeFrom(from._internal_deliver_txs());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_request_begin_block()->::tendermint::abci::RequestBeginBlock::MergeFrom(
          from._internal_request_begin_block());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_response_begin_block()->::tendermint::abci::ResponseBeginBlock::MergeFrom(
          from._internal_response_begin_block());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_request_end_block()->::tendermint::abci::RequestEndBlock::MergeFrom(
          from._internal_request_end_block());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_response_end_block()->::tendermint::abci::ResponseEndBlock::MergeFrom(
          from._internal_response_end_block());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_response_commit()->::tendermint::abci::ResponseCommit::MergeFrom(
          from._internal_response_commit());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMetadata::CopyFrom(const BlockMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.store.v1beta1.BlockMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMetadata::IsInitialized() const {
  return true;
}

void BlockMetadata::InternalSwap(BlockMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_deliver_txs()->InternalSwap(other->_internal_mutable_deliver_txs());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockMetadata, _impl_.response_commit_)
      + sizeof(BlockMetadata::_impl_.response_commit_)
      - PROTOBUF_FIELD_OFFSET(BlockMetadata, _impl_.request_begin_block_)>(
          reinterpret_cast<char*>(&_impl_.request_begin_block_),
          reinterpret_cast<char*>(&other->_impl_.request_begin_block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_getter, &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace store
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::base::store::v1beta1::StoreKVPair*
Arena::CreateMaybeMessage< ::cosmos::base::store::v1beta1::StoreKVPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::store::v1beta1::StoreKVPair >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx*
Arena::CreateMaybeMessage< ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::store::v1beta1::BlockMetadata*
Arena::CreateMaybeMessage< ::cosmos::base::store::v1beta1::BlockMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::store::v1beta1::BlockMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

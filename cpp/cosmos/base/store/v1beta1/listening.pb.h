// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/store/v1beta1/listening.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tendermint/abci/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto;
namespace cosmos {
namespace base {
namespace store {
namespace v1beta1 {
class BlockMetadata;
struct BlockMetadataDefaultTypeInternal;
extern BlockMetadataDefaultTypeInternal _BlockMetadata_default_instance_;
class BlockMetadata_DeliverTx;
struct BlockMetadata_DeliverTxDefaultTypeInternal;
extern BlockMetadata_DeliverTxDefaultTypeInternal _BlockMetadata_DeliverTx_default_instance_;
class StoreKVPair;
struct StoreKVPairDefaultTypeInternal;
extern StoreKVPairDefaultTypeInternal _StoreKVPair_default_instance_;
}  // namespace v1beta1
}  // namespace store
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::base::store::v1beta1::BlockMetadata* Arena::CreateMaybeMessage<::cosmos::base::store::v1beta1::BlockMetadata>(Arena*);
template <>
::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx* Arena::CreateMaybeMessage<::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx>(Arena*);
template <>
::cosmos::base::store::v1beta1::StoreKVPair* Arena::CreateMaybeMessage<::cosmos::base::store::v1beta1::StoreKVPair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace base {
namespace store {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class StoreKVPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.store.v1beta1.StoreKVPair) */ {
 public:
  inline StoreKVPair() : StoreKVPair(nullptr) {}
  ~StoreKVPair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StoreKVPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoreKVPair(const StoreKVPair& from);
  StoreKVPair(StoreKVPair&& from) noexcept
    : StoreKVPair() {
    *this = ::std::move(from);
  }

  inline StoreKVPair& operator=(const StoreKVPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoreKVPair& operator=(StoreKVPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoreKVPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoreKVPair* internal_default_instance() {
    return reinterpret_cast<const StoreKVPair*>(
               &_StoreKVPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoreKVPair& a, StoreKVPair& b) {
    a.Swap(&b);
  }
  inline void Swap(StoreKVPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoreKVPair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoreKVPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoreKVPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StoreKVPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StoreKVPair& from) {
    StoreKVPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StoreKVPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.store.v1beta1.StoreKVPair";
  }
  protected:
  explicit StoreKVPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoreKeyFieldNumber = 1,
    kKeyFieldNumber = 3,
    kValueFieldNumber = 4,
    kDeleteFieldNumber = 2,
  };
  // string store_key = 1 [json_name = "storeKey"];
  void clear_store_key() ;
  const std::string& store_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_store_key(Arg_&& arg, Args_... args);
  std::string* mutable_store_key();
  PROTOBUF_NODISCARD std::string* release_store_key();
  void set_allocated_store_key(std::string* ptr);

  private:
  const std::string& _internal_store_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_store_key(
      const std::string& value);
  std::string* _internal_mutable_store_key();

  public:
  // bytes key = 3 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // bytes value = 4 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // bool delete = 2 [json_name = "delete"];
  void clear_delete_() ;
  bool delete_() const;
  void set_delete_(bool value);

  private:
  bool _internal_delete_() const;
  void _internal_set_delete_(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.store.v1beta1.StoreKVPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr store_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    bool delete__;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto;
};// -------------------------------------------------------------------

class BlockMetadata_DeliverTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx) */ {
 public:
  inline BlockMetadata_DeliverTx() : BlockMetadata_DeliverTx(nullptr) {}
  ~BlockMetadata_DeliverTx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockMetadata_DeliverTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockMetadata_DeliverTx(const BlockMetadata_DeliverTx& from);
  BlockMetadata_DeliverTx(BlockMetadata_DeliverTx&& from) noexcept
    : BlockMetadata_DeliverTx() {
    *this = ::std::move(from);
  }

  inline BlockMetadata_DeliverTx& operator=(const BlockMetadata_DeliverTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMetadata_DeliverTx& operator=(BlockMetadata_DeliverTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockMetadata_DeliverTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockMetadata_DeliverTx* internal_default_instance() {
    return reinterpret_cast<const BlockMetadata_DeliverTx*>(
               &_BlockMetadata_DeliverTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockMetadata_DeliverTx& a, BlockMetadata_DeliverTx& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMetadata_DeliverTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMetadata_DeliverTx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockMetadata_DeliverTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockMetadata_DeliverTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockMetadata_DeliverTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockMetadata_DeliverTx& from) {
    BlockMetadata_DeliverTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMetadata_DeliverTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.store.v1beta1.BlockMetadata.DeliverTx";
  }
  protected:
  explicit BlockMetadata_DeliverTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .tendermint.abci.RequestDeliverTx request = 1 [json_name = "request"];
  bool has_request() const;
  void clear_request() ;
  const ::tendermint::abci::RequestDeliverTx& request() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestDeliverTx* release_request();
  ::tendermint::abci::RequestDeliverTx* mutable_request();
  void set_allocated_request(::tendermint::abci::RequestDeliverTx* request);
  private:
  const ::tendermint::abci::RequestDeliverTx& _internal_request() const;
  ::tendermint::abci::RequestDeliverTx* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::tendermint::abci::RequestDeliverTx* request);
  ::tendermint::abci::RequestDeliverTx* unsafe_arena_release_request();
  // .tendermint.abci.ResponseDeliverTx response = 2 [json_name = "response"];
  bool has_response() const;
  void clear_response() ;
  const ::tendermint::abci::ResponseDeliverTx& response() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseDeliverTx* release_response();
  ::tendermint::abci::ResponseDeliverTx* mutable_response();
  void set_allocated_response(::tendermint::abci::ResponseDeliverTx* response);
  private:
  const ::tendermint::abci::ResponseDeliverTx& _internal_response() const;
  ::tendermint::abci::ResponseDeliverTx* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::tendermint::abci::ResponseDeliverTx* response);
  ::tendermint::abci::ResponseDeliverTx* unsafe_arena_release_response();
  // @@protoc_insertion_point(class_scope:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::abci::RequestDeliverTx* request_;
    ::tendermint::abci::ResponseDeliverTx* response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto;
};// -------------------------------------------------------------------

class BlockMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.store.v1beta1.BlockMetadata) */ {
 public:
  inline BlockMetadata() : BlockMetadata(nullptr) {}
  ~BlockMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockMetadata(const BlockMetadata& from);
  BlockMetadata(BlockMetadata&& from) noexcept
    : BlockMetadata() {
    *this = ::std::move(from);
  }

  inline BlockMetadata& operator=(const BlockMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMetadata& operator=(BlockMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockMetadata* internal_default_instance() {
    return reinterpret_cast<const BlockMetadata*>(
               &_BlockMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockMetadata& a, BlockMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockMetadata& from) {
    BlockMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.store.v1beta1.BlockMetadata";
  }
  protected:
  explicit BlockMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BlockMetadata_DeliverTx DeliverTx;

  // accessors -------------------------------------------------------

  enum : int {
    kDeliverTxsFieldNumber = 3,
    kRequestBeginBlockFieldNumber = 1,
    kResponseBeginBlockFieldNumber = 2,
    kRequestEndBlockFieldNumber = 4,
    kResponseEndBlockFieldNumber = 5,
    kResponseCommitFieldNumber = 6,
  };
  // repeated .cosmos.base.store.v1beta1.BlockMetadata.DeliverTx deliver_txs = 3 [json_name = "deliverTxs"];
  int deliver_txs_size() const;
  private:
  int _internal_deliver_txs_size() const;

  public:
  void clear_deliver_txs() ;
  ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx* mutable_deliver_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx >*
      mutable_deliver_txs();
  private:
  const ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx& _internal_deliver_txs(int index) const;
  ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx* _internal_add_deliver_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx>& _internal_deliver_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx>* _internal_mutable_deliver_txs();
  public:
  const ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx& deliver_txs(int index) const;
  ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx* add_deliver_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx >&
      deliver_txs() const;
  // .tendermint.abci.RequestBeginBlock request_begin_block = 1 [json_name = "requestBeginBlock"];
  bool has_request_begin_block() const;
  void clear_request_begin_block() ;
  const ::tendermint::abci::RequestBeginBlock& request_begin_block() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestBeginBlock* release_request_begin_block();
  ::tendermint::abci::RequestBeginBlock* mutable_request_begin_block();
  void set_allocated_request_begin_block(::tendermint::abci::RequestBeginBlock* request_begin_block);
  private:
  const ::tendermint::abci::RequestBeginBlock& _internal_request_begin_block() const;
  ::tendermint::abci::RequestBeginBlock* _internal_mutable_request_begin_block();
  public:
  void unsafe_arena_set_allocated_request_begin_block(
      ::tendermint::abci::RequestBeginBlock* request_begin_block);
  ::tendermint::abci::RequestBeginBlock* unsafe_arena_release_request_begin_block();
  // .tendermint.abci.ResponseBeginBlock response_begin_block = 2 [json_name = "responseBeginBlock"];
  bool has_response_begin_block() const;
  void clear_response_begin_block() ;
  const ::tendermint::abci::ResponseBeginBlock& response_begin_block() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseBeginBlock* release_response_begin_block();
  ::tendermint::abci::ResponseBeginBlock* mutable_response_begin_block();
  void set_allocated_response_begin_block(::tendermint::abci::ResponseBeginBlock* response_begin_block);
  private:
  const ::tendermint::abci::ResponseBeginBlock& _internal_response_begin_block() const;
  ::tendermint::abci::ResponseBeginBlock* _internal_mutable_response_begin_block();
  public:
  void unsafe_arena_set_allocated_response_begin_block(
      ::tendermint::abci::ResponseBeginBlock* response_begin_block);
  ::tendermint::abci::ResponseBeginBlock* unsafe_arena_release_response_begin_block();
  // .tendermint.abci.RequestEndBlock request_end_block = 4 [json_name = "requestEndBlock"];
  bool has_request_end_block() const;
  void clear_request_end_block() ;
  const ::tendermint::abci::RequestEndBlock& request_end_block() const;
  PROTOBUF_NODISCARD ::tendermint::abci::RequestEndBlock* release_request_end_block();
  ::tendermint::abci::RequestEndBlock* mutable_request_end_block();
  void set_allocated_request_end_block(::tendermint::abci::RequestEndBlock* request_end_block);
  private:
  const ::tendermint::abci::RequestEndBlock& _internal_request_end_block() const;
  ::tendermint::abci::RequestEndBlock* _internal_mutable_request_end_block();
  public:
  void unsafe_arena_set_allocated_request_end_block(
      ::tendermint::abci::RequestEndBlock* request_end_block);
  ::tendermint::abci::RequestEndBlock* unsafe_arena_release_request_end_block();
  // .tendermint.abci.ResponseEndBlock response_end_block = 5 [json_name = "responseEndBlock"];
  bool has_response_end_block() const;
  void clear_response_end_block() ;
  const ::tendermint::abci::ResponseEndBlock& response_end_block() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseEndBlock* release_response_end_block();
  ::tendermint::abci::ResponseEndBlock* mutable_response_end_block();
  void set_allocated_response_end_block(::tendermint::abci::ResponseEndBlock* response_end_block);
  private:
  const ::tendermint::abci::ResponseEndBlock& _internal_response_end_block() const;
  ::tendermint::abci::ResponseEndBlock* _internal_mutable_response_end_block();
  public:
  void unsafe_arena_set_allocated_response_end_block(
      ::tendermint::abci::ResponseEndBlock* response_end_block);
  ::tendermint::abci::ResponseEndBlock* unsafe_arena_release_response_end_block();
  // .tendermint.abci.ResponseCommit response_commit = 6 [json_name = "responseCommit"];
  bool has_response_commit() const;
  void clear_response_commit() ;
  const ::tendermint::abci::ResponseCommit& response_commit() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseCommit* release_response_commit();
  ::tendermint::abci::ResponseCommit* mutable_response_commit();
  void set_allocated_response_commit(::tendermint::abci::ResponseCommit* response_commit);
  private:
  const ::tendermint::abci::ResponseCommit& _internal_response_commit() const;
  ::tendermint::abci::ResponseCommit* _internal_mutable_response_commit();
  public:
  void unsafe_arena_set_allocated_response_commit(
      ::tendermint::abci::ResponseCommit* response_commit);
  ::tendermint::abci::ResponseCommit* unsafe_arena_release_response_commit();
  // @@protoc_insertion_point(class_scope:cosmos.base.store.v1beta1.BlockMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx > deliver_txs_;
    ::tendermint::abci::RequestBeginBlock* request_begin_block_;
    ::tendermint::abci::ResponseBeginBlock* response_begin_block_;
    ::tendermint::abci::RequestEndBlock* request_end_block_;
    ::tendermint::abci::ResponseEndBlock* response_end_block_;
    ::tendermint::abci::ResponseCommit* response_commit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StoreKVPair

// string store_key = 1 [json_name = "storeKey"];
inline void StoreKVPair::clear_store_key() {
  _impl_.store_key_.ClearToEmpty();
}
inline const std::string& StoreKVPair::store_key() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.StoreKVPair.store_key)
  return _internal_store_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreKVPair::set_store_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.store_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.store.v1beta1.StoreKVPair.store_key)
}
inline std::string* StoreKVPair::mutable_store_key() {
  std::string* _s = _internal_mutable_store_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.StoreKVPair.store_key)
  return _s;
}
inline const std::string& StoreKVPair::_internal_store_key() const {
  return _impl_.store_key_.Get();
}
inline void StoreKVPair::_internal_set_store_key(const std::string& value) {
  ;


  _impl_.store_key_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreKVPair::_internal_mutable_store_key() {
  ;
  return _impl_.store_key_.Mutable( GetArenaForAllocation());
}
inline std::string* StoreKVPair::release_store_key() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.StoreKVPair.store_key)
  return _impl_.store_key_.Release();
}
inline void StoreKVPair::set_allocated_store_key(std::string* value) {
  _impl_.store_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.store_key_.IsDefault()) {
          _impl_.store_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.StoreKVPair.store_key)
}

// bool delete = 2 [json_name = "delete"];
inline void StoreKVPair::clear_delete_() {
  _impl_.delete__ = false;
}
inline bool StoreKVPair::delete_() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.StoreKVPair.delete)
  return _internal_delete_();
}
inline void StoreKVPair::set_delete_(bool value) {
  _internal_set_delete_(value);
  // @@protoc_insertion_point(field_set:cosmos.base.store.v1beta1.StoreKVPair.delete)
}
inline bool StoreKVPair::_internal_delete_() const {
  return _impl_.delete__;
}
inline void StoreKVPair::_internal_set_delete_(bool value) {
  ;
  _impl_.delete__ = value;
}

// bytes key = 3 [json_name = "key"];
inline void StoreKVPair::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& StoreKVPair::key() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.StoreKVPair.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreKVPair::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.store.v1beta1.StoreKVPair.key)
}
inline std::string* StoreKVPair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.StoreKVPair.key)
  return _s;
}
inline const std::string& StoreKVPair::_internal_key() const {
  return _impl_.key_.Get();
}
inline void StoreKVPair::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreKVPair::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* StoreKVPair::release_key() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.StoreKVPair.key)
  return _impl_.key_.Release();
}
inline void StoreKVPair::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.StoreKVPair.key)
}

// bytes value = 4 [json_name = "value"];
inline void StoreKVPair::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& StoreKVPair::value() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.StoreKVPair.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StoreKVPair::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.store.v1beta1.StoreKVPair.value)
}
inline std::string* StoreKVPair::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.StoreKVPair.value)
  return _s;
}
inline const std::string& StoreKVPair::_internal_value() const {
  return _impl_.value_.Get();
}
inline void StoreKVPair::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* StoreKVPair::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* StoreKVPair::release_value() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.StoreKVPair.value)
  return _impl_.value_.Release();
}
inline void StoreKVPair::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.StoreKVPair.value)
}

// -------------------------------------------------------------------

// BlockMetadata_DeliverTx

// .tendermint.abci.RequestDeliverTx request = 1 [json_name = "request"];
inline bool BlockMetadata_DeliverTx::has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline const ::tendermint::abci::RequestDeliverTx& BlockMetadata_DeliverTx::_internal_request() const {
  const ::tendermint::abci::RequestDeliverTx* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::RequestDeliverTx&>(
      ::tendermint::abci::_RequestDeliverTx_default_instance_);
}
inline const ::tendermint::abci::RequestDeliverTx& BlockMetadata_DeliverTx::request() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.request)
  return _internal_request();
}
inline void BlockMetadata_DeliverTx::unsafe_arena_set_allocated_request(
    ::tendermint::abci::RequestDeliverTx* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.request)
}
inline ::tendermint::abci::RequestDeliverTx* BlockMetadata_DeliverTx::release_request() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::RequestDeliverTx* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::RequestDeliverTx* BlockMetadata_DeliverTx::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.request)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::RequestDeliverTx* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::tendermint::abci::RequestDeliverTx* BlockMetadata_DeliverTx::_internal_mutable_request() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::RequestDeliverTx>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::tendermint::abci::RequestDeliverTx* BlockMetadata_DeliverTx::mutable_request() {
  ::tendermint::abci::RequestDeliverTx* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.request)
  return _msg;
}
inline void BlockMetadata_DeliverTx::set_allocated_request(::tendermint::abci::RequestDeliverTx* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request));
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.request)
}

// .tendermint.abci.ResponseDeliverTx response = 2 [json_name = "response"];
inline bool BlockMetadata_DeliverTx::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline const ::tendermint::abci::ResponseDeliverTx& BlockMetadata_DeliverTx::_internal_response() const {
  const ::tendermint::abci::ResponseDeliverTx* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ResponseDeliverTx&>(
      ::tendermint::abci::_ResponseDeliverTx_default_instance_);
}
inline const ::tendermint::abci::ResponseDeliverTx& BlockMetadata_DeliverTx::response() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.response)
  return _internal_response();
}
inline void BlockMetadata_DeliverTx::unsafe_arena_set_allocated_response(
    ::tendermint::abci::ResponseDeliverTx* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.response)
}
inline ::tendermint::abci::ResponseDeliverTx* BlockMetadata_DeliverTx::release_response() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::abci::ResponseDeliverTx* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::ResponseDeliverTx* BlockMetadata_DeliverTx::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.response)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::abci::ResponseDeliverTx* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ResponseDeliverTx* BlockMetadata_DeliverTx::_internal_mutable_response() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::ResponseDeliverTx>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::tendermint::abci::ResponseDeliverTx* BlockMetadata_DeliverTx::mutable_response() {
  ::tendermint::abci::ResponseDeliverTx* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.response)
  return _msg;
}
inline void BlockMetadata_DeliverTx::set_allocated_response(::tendermint::abci::ResponseDeliverTx* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response));
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.DeliverTx.response)
}

// -------------------------------------------------------------------

// BlockMetadata

// .tendermint.abci.RequestBeginBlock request_begin_block = 1 [json_name = "requestBeginBlock"];
inline bool BlockMetadata::has_request_begin_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_begin_block_ != nullptr);
  return value;
}
inline const ::tendermint::abci::RequestBeginBlock& BlockMetadata::_internal_request_begin_block() const {
  const ::tendermint::abci::RequestBeginBlock* p = _impl_.request_begin_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::RequestBeginBlock&>(
      ::tendermint::abci::_RequestBeginBlock_default_instance_);
}
inline const ::tendermint::abci::RequestBeginBlock& BlockMetadata::request_begin_block() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.BlockMetadata.request_begin_block)
  return _internal_request_begin_block();
}
inline void BlockMetadata::unsafe_arena_set_allocated_request_begin_block(
    ::tendermint::abci::RequestBeginBlock* request_begin_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_begin_block_);
  }
  _impl_.request_begin_block_ = request_begin_block;
  if (request_begin_block) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.request_begin_block)
}
inline ::tendermint::abci::RequestBeginBlock* BlockMetadata::release_request_begin_block() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::RequestBeginBlock* temp = _impl_.request_begin_block_;
  _impl_.request_begin_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::RequestBeginBlock* BlockMetadata::unsafe_arena_release_request_begin_block() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.BlockMetadata.request_begin_block)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::RequestBeginBlock* temp = _impl_.request_begin_block_;
  _impl_.request_begin_block_ = nullptr;
  return temp;
}
inline ::tendermint::abci::RequestBeginBlock* BlockMetadata::_internal_mutable_request_begin_block() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.request_begin_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::RequestBeginBlock>(GetArenaForAllocation());
    _impl_.request_begin_block_ = p;
  }
  return _impl_.request_begin_block_;
}
inline ::tendermint::abci::RequestBeginBlock* BlockMetadata::mutable_request_begin_block() {
  ::tendermint::abci::RequestBeginBlock* _msg = _internal_mutable_request_begin_block();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.BlockMetadata.request_begin_block)
  return _msg;
}
inline void BlockMetadata::set_allocated_request_begin_block(::tendermint::abci::RequestBeginBlock* request_begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_begin_block_);
  }
  if (request_begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_begin_block));
    if (message_arena != submessage_arena) {
      request_begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_begin_block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.request_begin_block_ = request_begin_block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.request_begin_block)
}

// .tendermint.abci.ResponseBeginBlock response_begin_block = 2 [json_name = "responseBeginBlock"];
inline bool BlockMetadata::has_response_begin_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_begin_block_ != nullptr);
  return value;
}
inline const ::tendermint::abci::ResponseBeginBlock& BlockMetadata::_internal_response_begin_block() const {
  const ::tendermint::abci::ResponseBeginBlock* p = _impl_.response_begin_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ResponseBeginBlock&>(
      ::tendermint::abci::_ResponseBeginBlock_default_instance_);
}
inline const ::tendermint::abci::ResponseBeginBlock& BlockMetadata::response_begin_block() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.BlockMetadata.response_begin_block)
  return _internal_response_begin_block();
}
inline void BlockMetadata::unsafe_arena_set_allocated_response_begin_block(
    ::tendermint::abci::ResponseBeginBlock* response_begin_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_begin_block_);
  }
  _impl_.response_begin_block_ = response_begin_block;
  if (response_begin_block) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.response_begin_block)
}
inline ::tendermint::abci::ResponseBeginBlock* BlockMetadata::release_response_begin_block() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::abci::ResponseBeginBlock* temp = _impl_.response_begin_block_;
  _impl_.response_begin_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::ResponseBeginBlock* BlockMetadata::unsafe_arena_release_response_begin_block() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.BlockMetadata.response_begin_block)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::abci::ResponseBeginBlock* temp = _impl_.response_begin_block_;
  _impl_.response_begin_block_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ResponseBeginBlock* BlockMetadata::_internal_mutable_response_begin_block() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.response_begin_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::ResponseBeginBlock>(GetArenaForAllocation());
    _impl_.response_begin_block_ = p;
  }
  return _impl_.response_begin_block_;
}
inline ::tendermint::abci::ResponseBeginBlock* BlockMetadata::mutable_response_begin_block() {
  ::tendermint::abci::ResponseBeginBlock* _msg = _internal_mutable_response_begin_block();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.BlockMetadata.response_begin_block)
  return _msg;
}
inline void BlockMetadata::set_allocated_response_begin_block(::tendermint::abci::ResponseBeginBlock* response_begin_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_begin_block_);
  }
  if (response_begin_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_begin_block));
    if (message_arena != submessage_arena) {
      response_begin_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_begin_block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.response_begin_block_ = response_begin_block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.response_begin_block)
}

// repeated .cosmos.base.store.v1beta1.BlockMetadata.DeliverTx deliver_txs = 3 [json_name = "deliverTxs"];
inline int BlockMetadata::_internal_deliver_txs_size() const {
  return _impl_.deliver_txs_.size();
}
inline int BlockMetadata::deliver_txs_size() const {
  return _internal_deliver_txs_size();
}
inline void BlockMetadata::clear_deliver_txs() {
  _internal_mutable_deliver_txs()->Clear();
}
inline ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx* BlockMetadata::mutable_deliver_txs(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.BlockMetadata.deliver_txs)
  return _internal_mutable_deliver_txs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx >*
BlockMetadata::mutable_deliver_txs() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.store.v1beta1.BlockMetadata.deliver_txs)
  return _internal_mutable_deliver_txs();
}
inline const ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx& BlockMetadata::_internal_deliver_txs(int index) const {
  return _internal_deliver_txs().Get(index);
}
inline const ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx& BlockMetadata::deliver_txs(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.BlockMetadata.deliver_txs)
  return _internal_deliver_txs(index);
}
inline ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx* BlockMetadata::_internal_add_deliver_txs() {
  return _internal_mutable_deliver_txs()->Add();
}
inline ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx* BlockMetadata::add_deliver_txs() {
  ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx* _add = _internal_add_deliver_txs();
  // @@protoc_insertion_point(field_add:cosmos.base.store.v1beta1.BlockMetadata.deliver_txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx >&
BlockMetadata::deliver_txs() const {
  // @@protoc_insertion_point(field_list:cosmos.base.store.v1beta1.BlockMetadata.deliver_txs)
  return _internal_deliver_txs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx>&
BlockMetadata::_internal_deliver_txs() const {
  return _impl_.deliver_txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::store::v1beta1::BlockMetadata_DeliverTx>*
BlockMetadata::_internal_mutable_deliver_txs() {
  return &_impl_.deliver_txs_;
}

// .tendermint.abci.RequestEndBlock request_end_block = 4 [json_name = "requestEndBlock"];
inline bool BlockMetadata::has_request_end_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_end_block_ != nullptr);
  return value;
}
inline const ::tendermint::abci::RequestEndBlock& BlockMetadata::_internal_request_end_block() const {
  const ::tendermint::abci::RequestEndBlock* p = _impl_.request_end_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::RequestEndBlock&>(
      ::tendermint::abci::_RequestEndBlock_default_instance_);
}
inline const ::tendermint::abci::RequestEndBlock& BlockMetadata::request_end_block() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.BlockMetadata.request_end_block)
  return _internal_request_end_block();
}
inline void BlockMetadata::unsafe_arena_set_allocated_request_end_block(
    ::tendermint::abci::RequestEndBlock* request_end_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_end_block_);
  }
  _impl_.request_end_block_ = request_end_block;
  if (request_end_block) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.request_end_block)
}
inline ::tendermint::abci::RequestEndBlock* BlockMetadata::release_request_end_block() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::abci::RequestEndBlock* temp = _impl_.request_end_block_;
  _impl_.request_end_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::RequestEndBlock* BlockMetadata::unsafe_arena_release_request_end_block() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.BlockMetadata.request_end_block)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::abci::RequestEndBlock* temp = _impl_.request_end_block_;
  _impl_.request_end_block_ = nullptr;
  return temp;
}
inline ::tendermint::abci::RequestEndBlock* BlockMetadata::_internal_mutable_request_end_block() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.request_end_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::RequestEndBlock>(GetArenaForAllocation());
    _impl_.request_end_block_ = p;
  }
  return _impl_.request_end_block_;
}
inline ::tendermint::abci::RequestEndBlock* BlockMetadata::mutable_request_end_block() {
  ::tendermint::abci::RequestEndBlock* _msg = _internal_mutable_request_end_block();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.BlockMetadata.request_end_block)
  return _msg;
}
inline void BlockMetadata::set_allocated_request_end_block(::tendermint::abci::RequestEndBlock* request_end_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_end_block_);
  }
  if (request_end_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_end_block));
    if (message_arena != submessage_arena) {
      request_end_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_end_block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.request_end_block_ = request_end_block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.request_end_block)
}

// .tendermint.abci.ResponseEndBlock response_end_block = 5 [json_name = "responseEndBlock"];
inline bool BlockMetadata::has_response_end_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_end_block_ != nullptr);
  return value;
}
inline const ::tendermint::abci::ResponseEndBlock& BlockMetadata::_internal_response_end_block() const {
  const ::tendermint::abci::ResponseEndBlock* p = _impl_.response_end_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ResponseEndBlock&>(
      ::tendermint::abci::_ResponseEndBlock_default_instance_);
}
inline const ::tendermint::abci::ResponseEndBlock& BlockMetadata::response_end_block() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.BlockMetadata.response_end_block)
  return _internal_response_end_block();
}
inline void BlockMetadata::unsafe_arena_set_allocated_response_end_block(
    ::tendermint::abci::ResponseEndBlock* response_end_block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_end_block_);
  }
  _impl_.response_end_block_ = response_end_block;
  if (response_end_block) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.response_end_block)
}
inline ::tendermint::abci::ResponseEndBlock* BlockMetadata::release_response_end_block() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::abci::ResponseEndBlock* temp = _impl_.response_end_block_;
  _impl_.response_end_block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::ResponseEndBlock* BlockMetadata::unsafe_arena_release_response_end_block() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.BlockMetadata.response_end_block)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::abci::ResponseEndBlock* temp = _impl_.response_end_block_;
  _impl_.response_end_block_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ResponseEndBlock* BlockMetadata::_internal_mutable_response_end_block() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.response_end_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::ResponseEndBlock>(GetArenaForAllocation());
    _impl_.response_end_block_ = p;
  }
  return _impl_.response_end_block_;
}
inline ::tendermint::abci::ResponseEndBlock* BlockMetadata::mutable_response_end_block() {
  ::tendermint::abci::ResponseEndBlock* _msg = _internal_mutable_response_end_block();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.BlockMetadata.response_end_block)
  return _msg;
}
inline void BlockMetadata::set_allocated_response_end_block(::tendermint::abci::ResponseEndBlock* response_end_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_end_block_);
  }
  if (response_end_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_end_block));
    if (message_arena != submessage_arena) {
      response_end_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_end_block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.response_end_block_ = response_end_block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.response_end_block)
}

// .tendermint.abci.ResponseCommit response_commit = 6 [json_name = "responseCommit"];
inline bool BlockMetadata::has_response_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_commit_ != nullptr);
  return value;
}
inline const ::tendermint::abci::ResponseCommit& BlockMetadata::_internal_response_commit() const {
  const ::tendermint::abci::ResponseCommit* p = _impl_.response_commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ResponseCommit&>(
      ::tendermint::abci::_ResponseCommit_default_instance_);
}
inline const ::tendermint::abci::ResponseCommit& BlockMetadata::response_commit() const {
  // @@protoc_insertion_point(field_get:cosmos.base.store.v1beta1.BlockMetadata.response_commit)
  return _internal_response_commit();
}
inline void BlockMetadata::unsafe_arena_set_allocated_response_commit(
    ::tendermint::abci::ResponseCommit* response_commit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_commit_);
  }
  _impl_.response_commit_ = response_commit;
  if (response_commit) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.response_commit)
}
inline ::tendermint::abci::ResponseCommit* BlockMetadata::release_response_commit() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tendermint::abci::ResponseCommit* temp = _impl_.response_commit_;
  _impl_.response_commit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::ResponseCommit* BlockMetadata::unsafe_arena_release_response_commit() {
  // @@protoc_insertion_point(field_release:cosmos.base.store.v1beta1.BlockMetadata.response_commit)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tendermint::abci::ResponseCommit* temp = _impl_.response_commit_;
  _impl_.response_commit_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ResponseCommit* BlockMetadata::_internal_mutable_response_commit() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.response_commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::ResponseCommit>(GetArenaForAllocation());
    _impl_.response_commit_ = p;
  }
  return _impl_.response_commit_;
}
inline ::tendermint::abci::ResponseCommit* BlockMetadata::mutable_response_commit() {
  ::tendermint::abci::ResponseCommit* _msg = _internal_mutable_response_commit();
  // @@protoc_insertion_point(field_mutable:cosmos.base.store.v1beta1.BlockMetadata.response_commit)
  return _msg;
}
inline void BlockMetadata::set_allocated_response_commit(::tendermint::abci::ResponseCommit* response_commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_commit_);
  }
  if (response_commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_commit));
    if (message_arena != submessage_arena) {
      response_commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_commit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.response_commit_ = response_commit;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.store.v1beta1.BlockMetadata.response_commit)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace store
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2fstore_2fv1beta1_2flistening_2eproto_2epb_2eh

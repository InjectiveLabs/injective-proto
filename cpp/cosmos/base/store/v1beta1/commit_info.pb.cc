// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/store/v1beta1/commit_info.proto

#include "cosmos/base/store/v1beta1/commit_info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace base {
namespace store {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR CommitInfo::CommitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.store_infos_)*/{}
  , /*decltype(_impl_.version_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitInfoDefaultTypeInternal() {}
  union {
    CommitInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitInfoDefaultTypeInternal _CommitInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StoreInfo::StoreInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.commit_id_)*/nullptr} {}
struct StoreInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreInfoDefaultTypeInternal() {}
  union {
    StoreInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreInfoDefaultTypeInternal _StoreInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CommitID::CommitID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommitIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitIDDefaultTypeInternal() {}
  union {
    CommitID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitIDDefaultTypeInternal _CommitID_default_instance_;
}  // namespace v1beta1
}  // namespace store
}  // namespace base
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::CommitInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::CommitInfo, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::CommitInfo, _impl_.store_infos_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreInfo, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::StoreInfo, _impl_.commit_id_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::CommitID, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::CommitID, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::store::v1beta1::CommitID, _impl_.hash_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::base::store::v1beta1::CommitInfo)},
        { 10, 20, -1, sizeof(::cosmos::base::store::v1beta1::StoreInfo)},
        { 22, -1, -1, sizeof(::cosmos::base::store::v1beta1::CommitID)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::base::store::v1beta1::_CommitInfo_default_instance_._instance,
    &::cosmos::base::store::v1beta1::_StoreInfo_default_instance_._instance,
    &::cosmos::base::store::v1beta1::_CommitID_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+cosmos/base/store/v1beta1/commit_info."
    "proto\022\031cosmos.base.store.v1beta1\032\024gogopr"
    "oto/gogo.proto\"s\n\nCommitInfo\022\030\n\007version\030"
    "\001 \001(\003R\007version\022K\n\013store_infos\030\002 \003(\0132$.co"
    "smos.base.store.v1beta1.StoreInfoB\004\310\336\037\000R"
    "\nstoreInfos\"g\n\tStoreInfo\022\022\n\004name\030\001 \001(\tR\004"
    "name\022F\n\tcommit_id\030\002 \001(\0132#.cosmos.base.st"
    "ore.v1beta1.CommitIDB\004\310\336\037\000R\010commitId\">\n\010"
    "CommitID\022\030\n\007version\030\001 \001(\003R\007version\022\022\n\004ha"
    "sh\030\002 \001(\014R\004hash:\004\230\240\037\000B\341\001\n\035com.cosmos.base"
    ".store.v1beta1B\017CommitInfoProtoP\001Z(githu"
    "b.com/cosmos/cosmos-sdk/store/types\242\002\003CB"
    "S\252\002\031Cosmos.Base.Store.V1beta1\312\002\031Cosmos\\B"
    "ase\\Store\\V1beta1\342\002%Cosmos\\Base\\Store\\V1"
    "beta1\\GPBMetadata\352\002\034Cosmos::Base::Store:"
    ":V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto = {
    false,
    false,
    616,
    descriptor_table_protodef_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
    "cosmos/base/store/v1beta1/commit_info.proto",
    &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_once,
    descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto::offsets,
    file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
    file_level_enum_descriptors_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_getter() {
  return &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto(&descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto);
namespace cosmos {
namespace base {
namespace store {
namespace v1beta1 {
// ===================================================================

class CommitInfo::_Internal {
 public:
};

CommitInfo::CommitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.store.v1beta1.CommitInfo)
}
CommitInfo::CommitInfo(const CommitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.store_infos_){from._impl_.store_infos_}
    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:cosmos.base.store.v1beta1.CommitInfo)
}

inline void CommitInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.store_infos_){arena}
    , decltype(_impl_.version_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommitInfo::~CommitInfo() {
  // @@protoc_insertion_point(destructor:cosmos.base.store.v1beta1.CommitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_store_infos()->~RepeatedPtrField();
}

void CommitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.store.v1beta1.CommitInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_store_infos()->Clear();
  _impl_.version_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 version = 1 [json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_store_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommitInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.store.v1beta1.CommitInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_version(), target);
  }

  // repeated .cosmos.base.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_store_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_store_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.store.v1beta1.CommitInfo)
  return target;
}

::size_t CommitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.store.v1beta1.CommitInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.store.v1beta1.StoreInfo store_infos = 2 [json_name = "storeInfos", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_store_infos_size();
  for (const auto& msg : this->_internal_store_infos()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 version = 1 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitInfo::GetClassData() const { return &_class_data_; }


void CommitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommitInfo*>(&to_msg);
  auto& from = static_cast<const CommitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.store.v1beta1.CommitInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_store_infos()->MergeFrom(from._internal_store_infos());
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitInfo::CopyFrom(const CommitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.store.v1beta1.CommitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitInfo::IsInitialized() const {
  return true;
}

void CommitInfo::InternalSwap(CommitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_store_infos()->InternalSwap(other->_internal_mutable_store_infos());

  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_getter, &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto[0]);
}
// ===================================================================

class StoreInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StoreInfo, _impl_._has_bits_);
  static const ::cosmos::base::store::v1beta1::CommitID& commit_id(const StoreInfo* msg);
  static void set_has_commit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::store::v1beta1::CommitID&
StoreInfo::_Internal::commit_id(const StoreInfo* msg) {
  return *msg->_impl_.commit_id_;
}
StoreInfo::StoreInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.store.v1beta1.StoreInfo)
}
StoreInfo::StoreInfo(const StoreInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.commit_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.commit_id_ = new ::cosmos::base::store::v1beta1::CommitID(*from._impl_.commit_id_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.store.v1beta1.StoreInfo)
}

inline void StoreInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.commit_id_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoreInfo::~StoreInfo() {
  // @@protoc_insertion_point(destructor:cosmos.base.store.v1beta1.StoreInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.commit_id_;
}

void StoreInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.store.v1beta1.StoreInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.commit_id_ != nullptr);
    _impl_.commit_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.store.v1beta1.StoreInfo.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StoreInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.store.v1beta1.StoreInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.store.v1beta1.StoreInfo.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::commit_id(this),
        _Internal::commit_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.store.v1beta1.StoreInfo)
  return target;
}

::size_t StoreInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.store.v1beta1.StoreInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .cosmos.base.store.v1beta1.CommitID commit_id = 2 [json_name = "commitId", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.commit_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreInfo::GetClassData() const { return &_class_data_; }


void StoreInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreInfo*>(&to_msg);
  auto& from = static_cast<const StoreInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.store.v1beta1.StoreInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_commit_id()->::cosmos::base::store::v1beta1::CommitID::MergeFrom(
        from._internal_commit_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreInfo::CopyFrom(const StoreInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.store.v1beta1.StoreInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreInfo::IsInitialized() const {
  return true;
}

void StoreInfo::InternalSwap(StoreInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.commit_id_, other->_impl_.commit_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_getter, &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto[1]);
}
// ===================================================================

class CommitID::_Internal {
 public:
};

CommitID::CommitID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.store.v1beta1.CommitID)
}
CommitID::CommitID(const CommitID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommitID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:cosmos.base.store.v1beta1.CommitID)
}

inline void CommitID::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.version_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommitID::~CommitID() {
  // @@protoc_insertion_point(destructor:cosmos.base.store.v1beta1.CommitID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitID::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void CommitID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitID::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.store.v1beta1.CommitID)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.version_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 version = 1 [json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes hash = 2 [json_name = "hash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommitID::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.store.v1beta1.CommitID)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_version(), target);
  }

  // bytes hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.store.v1beta1.CommitID)
  return target;
}

::size_t CommitID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.store.v1beta1.CommitID)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // int64 version = 1 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommitID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitID::GetClassData() const { return &_class_data_; }


void CommitID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommitID*>(&to_msg);
  auto& from = static_cast<const CommitID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.store.v1beta1.CommitID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitID::CopyFrom(const CommitID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.store.v1beta1.CommitID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitID::IsInitialized() const {
  return true;
}

void CommitID::InternalSwap(CommitID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);

  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_getter, &descriptor_table_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fstore_2fv1beta1_2fcommit_5finfo_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace store
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::base::store::v1beta1::CommitInfo*
Arena::CreateMaybeMessage< ::cosmos::base::store::v1beta1::CommitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::store::v1beta1::CommitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::store::v1beta1::StoreInfo*
Arena::CreateMaybeMessage< ::cosmos::base::store::v1beta1::StoreInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::store::v1beta1::StoreInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::store::v1beta1::CommitID*
Arena::CreateMaybeMessage< ::cosmos::base::store::v1beta1::CommitID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::store::v1beta1::CommitID >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/abci/v1beta1/abci.proto

#include "cosmos/base/abci/v1beta1/abci.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace base {
namespace abci {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR TxResponse::TxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.txhash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.codespace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.raw_log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.info_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tx_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.gas_wanted_)*/ ::int64_t{0}

  , /*decltype(_impl_.gas_used_)*/ ::int64_t{0}

  , /*decltype(_impl_.code_)*/ 0u
} {}
struct TxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxResponseDefaultTypeInternal() {}
  union {
    TxResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxResponseDefaultTypeInternal _TxResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ABCIMessageLog::ABCIMessageLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_index_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ABCIMessageLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ABCIMessageLogDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ABCIMessageLogDefaultTypeInternal() {}
  union {
    ABCIMessageLog _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ABCIMessageLogDefaultTypeInternal _ABCIMessageLog_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StringEvent::StringEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringEventDefaultTypeInternal() {}
  union {
    StringEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringEventDefaultTypeInternal _StringEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Attribute::Attribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeDefaultTypeInternal() {}
  union {
    Attribute _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeDefaultTypeInternal _Attribute_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GasInfo::GasInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gas_wanted_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.gas_used_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GasInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GasInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GasInfoDefaultTypeInternal() {}
  union {
    GasInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GasInfoDefaultTypeInternal _GasInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.msg_responses_)*/{}
  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.log_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SimulationResponse::SimulationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.gas_info_)*/nullptr
  , /*decltype(_impl_.result_)*/nullptr} {}
struct SimulationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimulationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimulationResponseDefaultTypeInternal() {}
  union {
    SimulationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimulationResponseDefaultTypeInternal _SimulationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgData::MsgData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgDataDefaultTypeInternal() {}
  union {
    MsgData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgDataDefaultTypeInternal _MsgData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TxMsgData::TxMsgData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.msg_responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxMsgDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxMsgDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxMsgDataDefaultTypeInternal() {}
  union {
    TxMsgData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxMsgDataDefaultTypeInternal _TxMsgData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SearchTxsResult::SearchTxsResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_.total_count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.count_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.page_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.page_total_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchTxsResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchTxsResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchTxsResultDefaultTypeInternal() {}
  union {
    SearchTxsResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchTxsResultDefaultTypeInternal _SearchTxsResult_default_instance_;
}  // namespace v1beta1
}  // namespace abci
}  // namespace base
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.txhash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.codespace_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.raw_log_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.logs_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.info_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.gas_wanted_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.gas_used_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.tx_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxResponse, _impl_.events_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::ABCIMessageLog, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::ABCIMessageLog, _impl_.msg_index_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::ABCIMessageLog, _impl_.log_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::ABCIMessageLog, _impl_.events_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::StringEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::StringEvent, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::StringEvent, _impl_.attributes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::Attribute, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::Attribute, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::Attribute, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::GasInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::GasInfo, _impl_.gas_wanted_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::GasInfo, _impl_.gas_used_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::Result, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::Result, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::Result, _impl_.log_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::Result, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::Result, _impl_.msg_responses_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SimulationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SimulationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SimulationResponse, _impl_.gas_info_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SimulationResponse, _impl_.result_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::MsgData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::MsgData, _impl_.msg_type_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::MsgData, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxMsgData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxMsgData, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::TxMsgData, _impl_.msg_responses_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SearchTxsResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SearchTxsResult, _impl_.total_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SearchTxsResult, _impl_.count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SearchTxsResult, _impl_.page_number_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SearchTxsResult, _impl_.page_total_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SearchTxsResult, _impl_.limit_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::abci::v1beta1::SearchTxsResult, _impl_.txs_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 21, -1, sizeof(::cosmos::base::abci::v1beta1::TxResponse)},
        { 34, -1, -1, sizeof(::cosmos::base::abci::v1beta1::ABCIMessageLog)},
        { 45, -1, -1, sizeof(::cosmos::base::abci::v1beta1::StringEvent)},
        { 55, -1, -1, sizeof(::cosmos::base::abci::v1beta1::Attribute)},
        { 65, -1, -1, sizeof(::cosmos::base::abci::v1beta1::GasInfo)},
        { 75, -1, -1, sizeof(::cosmos::base::abci::v1beta1::Result)},
        { 87, 97, -1, sizeof(::cosmos::base::abci::v1beta1::SimulationResponse)},
        { 99, -1, -1, sizeof(::cosmos::base::abci::v1beta1::MsgData)},
        { 109, -1, -1, sizeof(::cosmos::base::abci::v1beta1::TxMsgData)},
        { 119, -1, -1, sizeof(::cosmos::base::abci::v1beta1::SearchTxsResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::base::abci::v1beta1::_TxResponse_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_ABCIMessageLog_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_StringEvent_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_Attribute_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_GasInfo_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_Result_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_SimulationResponse_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_MsgData_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_TxMsgData_default_instance_._instance,
    &::cosmos::base::abci::v1beta1::_SearchTxsResult_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#cosmos/base/abci/v1beta1/abci.proto\022\030c"
    "osmos.base.abci.v1beta1\032\024gogoproto/gogo."
    "proto\032\033tendermint/abci/types.proto\032\031goog"
    "le/protobuf/any.proto\"\314\003\n\nTxResponse\022\026\n\006"
    "height\030\001 \001(\003R\006height\022\"\n\006txhash\030\002 \001(\tB\n\342\336"
    "\037\006TxHashR\006txhash\022\034\n\tcodespace\030\003 \001(\tR\tcod"
    "espace\022\022\n\004code\030\004 \001(\rR\004code\022\022\n\004data\030\005 \001(\t"
    "R\004data\022\027\n\007raw_log\030\006 \001(\tR\006rawLog\022U\n\004logs\030"
    "\007 \003(\0132(.cosmos.base.abci.v1beta1.ABCIMes"
    "sageLogB\027\310\336\037\000\252\337\037\017ABCIMessageLogsR\004logs\022\022"
    "\n\004info\030\010 \001(\tR\004info\022\035\n\ngas_wanted\030\t \001(\003R\t"
    "gasWanted\022\031\n\010gas_used\030\n \001(\003R\007gasUsed\022$\n\002"
    "tx\030\013 \001(\0132\024.google.protobuf.AnyR\002tx\022\034\n\tti"
    "mestamp\030\014 \001(\tR\ttimestamp\0224\n\006events\030\r \003(\013"
    "2\026.tendermint.abci.EventB\004\310\336\037\000R\006events:\004"
    "\210\240\037\000\"\251\001\n\016ABCIMessageLog\022*\n\tmsg_index\030\001 \001"
    "(\rB\r\352\336\037\tmsg_indexR\010msgIndex\022\020\n\003log\030\002 \001(\t"
    "R\003log\022S\n\006events\030\003 \003(\0132%.cosmos.base.abci"
    ".v1beta1.StringEventB\024\310\336\037\000\252\337\037\014StringEven"
    "tsR\006events:\004\200\334 \001\"r\n\013StringEvent\022\022\n\004type\030"
    "\001 \001(\tR\004type\022I\n\nattributes\030\002 \003(\0132#.cosmos"
    ".base.abci.v1beta1.AttributeB\004\310\336\037\000R\nattr"
    "ibutes:\004\200\334 \001\"3\n\tAttribute\022\020\n\003key\030\001 \001(\tR\003"
    "key\022\024\n\005value\030\002 \001(\tR\005value\"C\n\007GasInfo\022\035\n\n"
    "gas_wanted\030\001 \001(\004R\tgasWanted\022\031\n\010gas_used\030"
    "\002 \001(\004R\007gasUsed\"\251\001\n\006Result\022\026\n\004data\030\001 \001(\014B"
    "\002\030\001R\004data\022\020\n\003log\030\002 \001(\tR\003log\0224\n\006events\030\003 "
    "\003(\0132\026.tendermint.abci.EventB\004\310\336\037\000R\006event"
    "s\0229\n\rmsg_responses\030\004 \003(\0132\024.google.protob"
    "uf.AnyR\014msgResponses:\004\210\240\037\000\"\226\001\n\022Simulatio"
    "nResponse\022F\n\010gas_info\030\001 \001(\0132!.cosmos.bas"
    "e.abci.v1beta1.GasInfoB\010\310\336\037\000\320\336\037\001R\007gasInf"
    "o\0228\n\006result\030\002 \001(\0132 .cosmos.base.abci.v1b"
    "eta1.ResultR\006result\"@\n\007MsgData\022\031\n\010msg_ty"
    "pe\030\001 \001(\tR\007msgType\022\022\n\004data\030\002 \001(\014R\004data:\006\030"
    "\001\200\334 \001\"\207\001\n\tTxMsgData\0229\n\004data\030\001 \003(\0132!.cosm"
    "os.base.abci.v1beta1.MsgDataB\002\030\001R\004data\0229"
    "\n\rmsg_responses\030\002 \003(\0132\024.google.protobuf."
    "AnyR\014msgResponses:\004\200\334 \001\"\334\001\n\017SearchTxsRes"
    "ult\022\037\n\013total_count\030\001 \001(\004R\ntotalCount\022\024\n\005"
    "count\030\002 \001(\004R\005count\022\037\n\013page_number\030\003 \001(\004R"
    "\npageNumber\022\035\n\npage_total\030\004 \001(\004R\tpageTot"
    "al\022\024\n\005limit\030\005 \001(\004R\005limit\0226\n\003txs\030\006 \003(\0132$."
    "cosmos.base.abci.v1beta1.TxResponseR\003txs"
    ":\004\200\334 \001B\324\001\n\034com.cosmos.base.abci.v1beta1B"
    "\tAbciProtoP\001Z\"github.com/cosmos/cosmos-s"
    "dk/types\242\002\003CBA\252\002\030Cosmos.Base.Abci.V1beta"
    "1\312\002\030Cosmos\\Base\\Abci\\V1beta1\342\002$Cosmos\\Ba"
    "se\\Abci\\V1beta1\\GPBMetadata\352\002\033Cosmos::Ba"
    "se::Abci::V1beta1\330\341\036\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_tendermint_2fabci_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto = {
    false,
    false,
    1989,
    descriptor_table_protodef_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto,
    "cosmos/base/abci/v1beta1/abci.proto",
    &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
    descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_deps,
    3,
    10,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto::offsets,
    file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto,
    file_level_enum_descriptors_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter() {
  return &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto(&descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto);
namespace cosmos {
namespace base {
namespace abci {
namespace v1beta1 {
// ===================================================================

class TxResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<TxResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TxResponse, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& tx(const TxResponse* msg);
  static void set_has_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
TxResponse::_Internal::tx(const TxResponse* msg) {
  return *msg->_impl_.tx_;
}
void TxResponse::clear_tx() {
  if (_impl_.tx_ != nullptr) _impl_.tx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TxResponse::clear_events() {
  _internal_mutable_events()->Clear();
}
TxResponse::TxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.TxResponse)
}
TxResponse::TxResponse(const TxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.logs_){from._impl_.logs_}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.txhash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.raw_log_) {}

    , decltype(_impl_.info_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.tx_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.gas_wanted_) {}

    , decltype(_impl_.gas_used_) {}

    , decltype(_impl_.code_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.txhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.txhash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_txhash().empty()) {
    _this->_impl_.txhash_.Set(from._internal_txhash(), _this->GetArenaForAllocation());
  }
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codespace().empty()) {
    _this->_impl_.codespace_.Set(from._internal_codespace(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _impl_.raw_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_raw_log().empty()) {
    _this->_impl_.raw_log_.Set(from._internal_raw_log(), _this->GetArenaForAllocation());
  }
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.info_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_info().empty()) {
    _this->_impl_.info_.Set(from._internal_info(), _this->GetArenaForAllocation());
  }
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_timestamp().empty()) {
    _this->_impl_.timestamp_.Set(from._internal_timestamp(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tx_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.tx_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.TxResponse)
}

inline void TxResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.logs_){arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.txhash_) {}

    , decltype(_impl_.codespace_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.raw_log_) {}

    , decltype(_impl_.info_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.tx_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.gas_wanted_) { ::int64_t{0} }

    , decltype(_impl_.gas_used_) { ::int64_t{0} }

    , decltype(_impl_.code_) { 0u }

  };
  _impl_.txhash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.txhash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.codespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.codespace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.raw_log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.raw_log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.info_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.timestamp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.timestamp_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxResponse::~TxResponse() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.TxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_logs()->~RepeatedPtrField();
  _internal_mutable_events()->~RepeatedPtrField();
  _impl_.txhash_.Destroy();
  _impl_.codespace_.Destroy();
  _impl_.data_.Destroy();
  _impl_.raw_log_.Destroy();
  _impl_.info_.Destroy();
  _impl_.timestamp_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tx_;
}

void TxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.TxResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_logs()->Clear();
  _internal_mutable_events()->Clear();
  _impl_.txhash_.ClearToEmpty();
  _impl_.codespace_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.raw_log_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.tx_ != nullptr);
    _impl_.tx_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string txhash = 2 [json_name = "txhash", (.gogoproto.customname) = "TxHash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_txhash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.TxResponse.txhash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string codespace = 3 [json_name = "codespace"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_codespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.TxResponse.codespace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 code = 4 [json_name = "code"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string data = 5 [json_name = "data"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.TxResponse.data"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string raw_log = 6 [json_name = "rawLog"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_raw_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.TxResponse.raw_log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7 [json_name = "logs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ABCIMessageLogs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string info = 8 [json_name = "info"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.TxResponse.info"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 gas_wanted = 9 [json_name = "gasWanted"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.gas_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 gas_used = 10 [json_name = "gasUsed"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any tx = 11 [json_name = "tx"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string timestamp = 12 [json_name = "timestamp"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.TxResponse.timestamp"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .tendermint.abci.Event events = 13 [json_name = "events", (.gogoproto.nullable) = false];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TxResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.TxResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // string txhash = 2 [json_name = "txhash", (.gogoproto.customname) = "TxHash"];
  if (!this->_internal_txhash().empty()) {
    const std::string& _s = this->_internal_txhash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.TxResponse.txhash");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string codespace = 3 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    const std::string& _s = this->_internal_codespace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.TxResponse.codespace");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint32 code = 4 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_code(), target);
  }

  // string data = 5 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.TxResponse.data");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string raw_log = 6 [json_name = "rawLog"];
  if (!this->_internal_raw_log().empty()) {
    const std::string& _s = this->_internal_raw_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.TxResponse.raw_log");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // repeated .cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7 [json_name = "logs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ABCIMessageLogs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string info = 8 [json_name = "info"];
  if (!this->_internal_info().empty()) {
    const std::string& _s = this->_internal_info();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.TxResponse.info");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // int64 gas_wanted = 9 [json_name = "gasWanted"];
  if (this->_internal_gas_wanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_gas_wanted(), target);
  }

  // int64 gas_used = 10 [json_name = "gasUsed"];
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        10, this->_internal_gas_used(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any tx = 11 [json_name = "tx"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tx(this),
        _Internal::tx(this).GetCachedSize(), target, stream);
  }

  // string timestamp = 12 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    const std::string& _s = this->_internal_timestamp();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.TxResponse.timestamp");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // repeated .tendermint.abci.Event events = 13 [json_name = "events", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.TxResponse)
  return target;
}

::size_t TxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.TxResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.abci.v1beta1.ABCIMessageLog logs = 7 [json_name = "logs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ABCIMessageLogs"];
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_internal_logs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tendermint.abci.Event events = 13 [json_name = "events", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string txhash = 2 [json_name = "txhash", (.gogoproto.customname) = "TxHash"];
  if (!this->_internal_txhash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_txhash());
  }

  // string codespace = 3 [json_name = "codespace"];
  if (!this->_internal_codespace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_codespace());
  }

  // string data = 5 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_data());
  }

  // string raw_log = 6 [json_name = "rawLog"];
  if (!this->_internal_raw_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_raw_log());
  }

  // string info = 8 [json_name = "info"];
  if (!this->_internal_info().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_info());
  }

  // string timestamp = 12 [json_name = "timestamp"];
  if (!this->_internal_timestamp().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_timestamp());
  }

  // .google.protobuf.Any tx = 11 [json_name = "tx"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tx_);
  }

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int64 gas_wanted = 9 [json_name = "gasWanted"];
  if (this->_internal_gas_wanted() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_gas_wanted());
  }

  // int64 gas_used = 10 [json_name = "gasUsed"];
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_gas_used());
  }

  // uint32 code = 4 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxResponse::GetClassData() const { return &_class_data_; }


void TxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxResponse*>(&to_msg);
  auto& from = static_cast<const TxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.TxResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_logs()->MergeFrom(from._internal_logs());
  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  if (!from._internal_txhash().empty()) {
    _this->_internal_set_txhash(from._internal_txhash());
  }
  if (!from._internal_codespace().empty()) {
    _this->_internal_set_codespace(from._internal_codespace());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_raw_log().empty()) {
    _this->_internal_set_raw_log(from._internal_raw_log());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_tx()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_tx());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_gas_wanted() != 0) {
    _this->_internal_set_gas_wanted(from._internal_gas_wanted());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxResponse::CopyFrom(const TxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.TxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxResponse::IsInitialized() const {
  return true;
}

void TxResponse::InternalSwap(TxResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_logs()->InternalSwap(other->_internal_mutable_logs());
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.txhash_, lhs_arena,
                                       &other->_impl_.txhash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.codespace_, lhs_arena,
                                       &other->_impl_.codespace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_log_, lhs_arena,
                                       &other->_impl_.raw_log_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.info_, lhs_arena,
                                       &other->_impl_.info_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, lhs_arena,
                                       &other->_impl_.timestamp_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxResponse, _impl_.code_)
      + sizeof(TxResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(TxResponse, _impl_.tx_)>(
          reinterpret_cast<char*>(&_impl_.tx_),
          reinterpret_cast<char*>(&other->_impl_.tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[0]);
}
// ===================================================================

class ABCIMessageLog::_Internal {
 public:
};

ABCIMessageLog::ABCIMessageLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.ABCIMessageLog)
}
ABCIMessageLog::ABCIMessageLog(const ABCIMessageLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ABCIMessageLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.log_) {}

    , decltype(_impl_.msg_index_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    _this->_impl_.log_.Set(from._internal_log(), _this->GetArenaForAllocation());
  }
  _this->_impl_.msg_index_ = from._impl_.msg_index_;
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.ABCIMessageLog)
}

inline void ABCIMessageLog::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.log_) {}

    , decltype(_impl_.msg_index_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ABCIMessageLog::~ABCIMessageLog() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.ABCIMessageLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ABCIMessageLog::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_events()->~RepeatedPtrField();
  _impl_.log_.Destroy();
}

void ABCIMessageLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ABCIMessageLog::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.ABCIMessageLog)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_events()->Clear();
  _impl_.log_.ClearToEmpty();
  _impl_.msg_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ABCIMessageLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msg_index = 1 [json_name = "msgIndex", (.gogoproto.jsontag) = "msg_index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.msg_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string log = 2 [json_name = "log"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.ABCIMessageLog.log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.abci.v1beta1.StringEvent events = 3 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "StringEvents"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ABCIMessageLog::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.ABCIMessageLog)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_index = 1 [json_name = "msgIndex", (.gogoproto.jsontag) = "msg_index"];
  if (this->_internal_msg_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_msg_index(), target);
  }

  // string log = 2 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    const std::string& _s = this->_internal_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.ABCIMessageLog.log");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmos.base.abci.v1beta1.StringEvent events = 3 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "StringEvents"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.ABCIMessageLog)
  return target;
}

::size_t ABCIMessageLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.ABCIMessageLog)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.abci.v1beta1.StringEvent events = 3 [json_name = "events", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "StringEvents"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string log = 2 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_log());
  }

  // uint32 msg_index = 1 [json_name = "msgIndex", (.gogoproto.jsontag) = "msg_index"];
  if (this->_internal_msg_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_msg_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ABCIMessageLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ABCIMessageLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ABCIMessageLog::GetClassData() const { return &_class_data_; }


void ABCIMessageLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ABCIMessageLog*>(&to_msg);
  auto& from = static_cast<const ABCIMessageLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.ABCIMessageLog)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  if (!from._internal_log().empty()) {
    _this->_internal_set_log(from._internal_log());
  }
  if (from._internal_msg_index() != 0) {
    _this->_internal_set_msg_index(from._internal_msg_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ABCIMessageLog::CopyFrom(const ABCIMessageLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.ABCIMessageLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ABCIMessageLog::IsInitialized() const {
  return true;
}

void ABCIMessageLog::InternalSwap(ABCIMessageLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_, lhs_arena,
                                       &other->_impl_.log_, rhs_arena);

  swap(_impl_.msg_index_, other->_impl_.msg_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ABCIMessageLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[1]);
}
// ===================================================================

class StringEvent::_Internal {
 public:
};

StringEvent::StringEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.StringEvent)
}
StringEvent::StringEvent(const StringEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.StringEvent)
}

inline void StringEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.attributes_){arena}
    , decltype(_impl_.type_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringEvent::~StringEvent() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.StringEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_attributes()->~RepeatedPtrField();
  _impl_.type_.Destroy();
}

void StringEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.StringEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_attributes()->Clear();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.StringEvent.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.abci.v1beta1.Attribute attributes = 2 [json_name = "attributes", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StringEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.StringEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.StringEvent.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .cosmos.base.abci.v1beta1.Attribute attributes = 2 [json_name = "attributes", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.StringEvent)
  return target;
}

::size_t StringEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.StringEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.abci.v1beta1.Attribute attributes = 2 [json_name = "attributes", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_internal_attributes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringEvent::GetClassData() const { return &_class_data_; }


void StringEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringEvent*>(&to_msg);
  auto& from = static_cast<const StringEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.StringEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_attributes()->MergeFrom(from._internal_attributes());
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringEvent::CopyFrom(const StringEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.StringEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringEvent::IsInitialized() const {
  return true;
}

void StringEvent::InternalSwap(StringEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_attributes()->InternalSwap(other->_internal_mutable_attributes());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[2]);
}
// ===================================================================

class Attribute::_Internal {
 public:
};

Attribute::Attribute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.Attribute)
}
Attribute::Attribute(const Attribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Attribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.Attribute)
}

inline void Attribute::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Attribute::~Attribute() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.Attribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Attribute::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void Attribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Attribute::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.Attribute)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Attribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.Attribute.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.Attribute.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Attribute::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.Attribute)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.Attribute.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.Attribute.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.Attribute)
  return target;
}

::size_t Attribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.Attribute)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Attribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Attribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Attribute::GetClassData() const { return &_class_data_; }


void Attribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Attribute*>(&to_msg);
  auto& from = static_cast<const Attribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.Attribute)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Attribute::CopyFrom(const Attribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.Attribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attribute::IsInitialized() const {
  return true;
}

void Attribute::InternalSwap(Attribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Attribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[3]);
}
// ===================================================================

class GasInfo::_Internal {
 public:
};

GasInfo::GasInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.GasInfo)
}
GasInfo::GasInfo(const GasInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.GasInfo)
}

inline void GasInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.gas_wanted_) { ::uint64_t{0u} }

    , decltype(_impl_.gas_used_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GasInfo::~GasInfo() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.GasInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GasInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GasInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GasInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.GasInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gas_wanted_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gas_used_) -
      reinterpret_cast<char*>(&_impl_.gas_wanted_)) + sizeof(_impl_.gas_used_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GasInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 gas_wanted = 1 [json_name = "gasWanted"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.gas_wanted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 gas_used = 2 [json_name = "gasUsed"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GasInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.GasInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 gas_wanted = 1 [json_name = "gasWanted"];
  if (this->_internal_gas_wanted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_gas_wanted(), target);
  }

  // uint64 gas_used = 2 [json_name = "gasUsed"];
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_gas_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.GasInfo)
  return target;
}

::size_t GasInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.GasInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 gas_wanted = 1 [json_name = "gasWanted"];
  if (this->_internal_gas_wanted() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_gas_wanted());
  }

  // uint64 gas_used = 2 [json_name = "gasUsed"];
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_gas_used());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GasInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GasInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GasInfo::GetClassData() const { return &_class_data_; }


void GasInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GasInfo*>(&to_msg);
  auto& from = static_cast<const GasInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.GasInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gas_wanted() != 0) {
    _this->_internal_set_gas_wanted(from._internal_gas_wanted());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GasInfo::CopyFrom(const GasInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.GasInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GasInfo::IsInitialized() const {
  return true;
}

void GasInfo::InternalSwap(GasInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GasInfo, _impl_.gas_used_)
      + sizeof(GasInfo::_impl_.gas_used_)
      - PROTOBUF_FIELD_OFFSET(GasInfo, _impl_.gas_wanted_)>(
          reinterpret_cast<char*>(&_impl_.gas_wanted_),
          reinterpret_cast<char*>(&other->_impl_.gas_wanted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GasInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[4]);
}
// ===================================================================

class Result::_Internal {
 public:
};

void Result::clear_events() {
  _internal_mutable_events()->Clear();
}
void Result::clear_msg_responses() {
  _internal_mutable_msg_responses()->Clear();
}
Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.msg_responses_){from._impl_.msg_responses_}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.log_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    _this->_impl_.log_.Set(from._internal_log(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.Result)
}

inline void Result::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.msg_responses_){arena}
    , decltype(_impl_.data_) {}

    , decltype(_impl_.log_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_events()->~RepeatedPtrField();
  _internal_mutable_msg_responses()->~RepeatedPtrField();
  _impl_.data_.Destroy();
  _impl_.log_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.Result)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_events()->Clear();
  _internal_mutable_msg_responses()->Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.log_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1 [json_name = "data", deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string log = 2 [json_name = "log"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.Result.log"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .tendermint.abci.Event events = 3 [json_name = "events", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .google.protobuf.Any msg_responses = 4 [json_name = "msgResponses"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Result::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.Result)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data", deprecated = true];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // string log = 2 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    const std::string& _s = this->_internal_log();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.Result.log");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .tendermint.abci.Event events = 3 [json_name = "events", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any msg_responses = 4 [json_name = "msgResponses"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.Result)
  return target;
}

::size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.Result)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.Event events = 3 [json_name = "events", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any msg_responses = 4 [json_name = "msgResponses"];
  total_size += 1UL * this->_internal_msg_responses_size();
  for (const auto& msg : this->_internal_msg_responses()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 1 [json_name = "data", deprecated = true];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // string log = 2 [json_name = "log"];
  if (!this->_internal_log().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_log());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.Result)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_mutable_msg_responses()->MergeFrom(from._internal_msg_responses());
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_log().empty()) {
    _this->_internal_set_log(from._internal_log());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
  _internal_mutable_msg_responses()->InternalSwap(other->_internal_mutable_msg_responses());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_, lhs_arena,
                                       &other->_impl_.log_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[5]);
}
// ===================================================================

class SimulationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SimulationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SimulationResponse, _impl_._has_bits_);
  static const ::cosmos::base::abci::v1beta1::GasInfo& gas_info(const SimulationResponse* msg);
  static void set_has_gas_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::base::abci::v1beta1::Result& result(const SimulationResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::base::abci::v1beta1::GasInfo&
SimulationResponse::_Internal::gas_info(const SimulationResponse* msg) {
  return *msg->_impl_.gas_info_;
}
const ::cosmos::base::abci::v1beta1::Result&
SimulationResponse::_Internal::result(const SimulationResponse* msg) {
  return *msg->_impl_.result_;
}
SimulationResponse::SimulationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.SimulationResponse)
}
SimulationResponse::SimulationResponse(const SimulationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimulationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gas_info_){nullptr}
    , decltype(_impl_.result_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.gas_info_ = new ::cosmos::base::abci::v1beta1::GasInfo(*from._impl_.gas_info_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.result_ = new ::cosmos::base::abci::v1beta1::Result(*from._impl_.result_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.SimulationResponse)
}

inline void SimulationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.gas_info_){nullptr}
    , decltype(_impl_.result_){nullptr}
  };
}

SimulationResponse::~SimulationResponse() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.SimulationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimulationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.gas_info_;
  if (this != internal_default_instance()) delete _impl_.result_;
}

void SimulationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimulationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.SimulationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.gas_info_ != nullptr);
      _impl_.gas_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [json_name = "gasInfo", (.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gas_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.abci.v1beta1.Result result = 2 [json_name = "result"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SimulationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.SimulationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [json_name = "gasInfo", (.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::gas_info(this),
        _Internal::gas_info(this).GetCachedSize(), target, stream);
  }

  // .cosmos.base.abci.v1beta1.Result result = 2 [json_name = "result"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.SimulationResponse)
  return target;
}

::size_t SimulationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.SimulationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [json_name = "gasInfo", (.gogoproto.nullable) = false, (.gogoproto.embed) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gas_info_);
    }

    // .cosmos.base.abci.v1beta1.Result result = 2 [json_name = "result"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimulationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimulationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimulationResponse::GetClassData() const { return &_class_data_; }


void SimulationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimulationResponse*>(&to_msg);
  auto& from = static_cast<const SimulationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.SimulationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_gas_info()->::cosmos::base::abci::v1beta1::GasInfo::MergeFrom(
          from._internal_gas_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_result()->::cosmos::base::abci::v1beta1::Result::MergeFrom(
          from._internal_result());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimulationResponse::CopyFrom(const SimulationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.SimulationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationResponse::IsInitialized() const {
  return true;
}

void SimulationResponse::InternalSwap(SimulationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationResponse, _impl_.result_)
      + sizeof(SimulationResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(SimulationResponse, _impl_.gas_info_)>(
          reinterpret_cast<char*>(&_impl_.gas_info_),
          reinterpret_cast<char*>(&other->_impl_.gas_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[6]);
}
// ===================================================================

class MsgData::_Internal {
 public:
};

MsgData::MsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.MsgData)
}
MsgData::MsgData(const MsgData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_type().empty()) {
    _this->_impl_.msg_type_.Set(from._internal_msg_type(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.MsgData)
}

inline void MsgData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.msg_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgData::~MsgData() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.MsgData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_type_.Destroy();
  _impl_.data_.Destroy();
}

void MsgData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.MsgData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_type_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg_type = 1 [json_name = "msgType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.abci.v1beta1.MsgData.msg_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.MsgData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg_type = 1 [json_name = "msgType"];
  if (!this->_internal_msg_type().empty()) {
    const std::string& _s = this->_internal_msg_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.abci.v1beta1.MsgData.msg_type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes data = 2 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.MsgData)
  return target;
}

::size_t MsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.MsgData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg_type = 1 [json_name = "msgType"];
  if (!this->_internal_msg_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_msg_type());
  }

  // bytes data = 2 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgData::GetClassData() const { return &_class_data_; }


void MsgData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgData*>(&to_msg);
  auto& from = static_cast<const MsgData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.MsgData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg_type().empty()) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgData::CopyFrom(const MsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.MsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgData::IsInitialized() const {
  return true;
}

void MsgData::InternalSwap(MsgData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_type_, lhs_arena,
                                       &other->_impl_.msg_type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[7]);
}
// ===================================================================

class TxMsgData::_Internal {
 public:
};

void TxMsgData::clear_msg_responses() {
  _internal_mutable_msg_responses()->Clear();
}
TxMsgData::TxMsgData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.TxMsgData)
}
TxMsgData::TxMsgData(const TxMsgData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxMsgData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.msg_responses_){from._impl_.msg_responses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.TxMsgData)
}

inline void TxMsgData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.msg_responses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxMsgData::~TxMsgData() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.TxMsgData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxMsgData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_data()->~RepeatedPtrField();
  _internal_mutable_msg_responses()->~RepeatedPtrField();
}

void TxMsgData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxMsgData::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.TxMsgData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_data()->Clear();
  _internal_mutable_msg_responses()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxMsgData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.abci.v1beta1.MsgData data = 1 [json_name = "data", deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .google.protobuf.Any msg_responses = 2 [json_name = "msgResponses"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msg_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TxMsgData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.TxMsgData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.abci.v1beta1.MsgData data = 1 [json_name = "data", deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any msg_responses = 2 [json_name = "msgResponses"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_msg_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_msg_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.TxMsgData)
  return target;
}

::size_t TxMsgData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.TxMsgData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.abci.v1beta1.MsgData data = 1 [json_name = "data", deprecated = true];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_internal_data()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.protobuf.Any msg_responses = 2 [json_name = "msgResponses"];
  total_size += 1UL * this->_internal_msg_responses_size();
  for (const auto& msg : this->_internal_msg_responses()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxMsgData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxMsgData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxMsgData::GetClassData() const { return &_class_data_; }


void TxMsgData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxMsgData*>(&to_msg);
  auto& from = static_cast<const TxMsgData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.TxMsgData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(from._internal_data());
  _this->_internal_mutable_msg_responses()->MergeFrom(from._internal_msg_responses());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxMsgData::CopyFrom(const TxMsgData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.TxMsgData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxMsgData::IsInitialized() const {
  return true;
}

void TxMsgData::InternalSwap(TxMsgData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_data()->InternalSwap(other->_internal_mutable_data());
  _internal_mutable_msg_responses()->InternalSwap(other->_internal_mutable_msg_responses());
}

::PROTOBUF_NAMESPACE_ID::Metadata TxMsgData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[8]);
}
// ===================================================================

class SearchTxsResult::_Internal {
 public:
};

SearchTxsResult::SearchTxsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.abci.v1beta1.SearchTxsResult)
}
SearchTxsResult::SearchTxsResult(const SearchTxsResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchTxsResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , decltype(_impl_.total_count_) {}

    , decltype(_impl_.count_) {}

    , decltype(_impl_.page_number_) {}

    , decltype(_impl_.page_total_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_count_, &from._impl_.total_count_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.limit_) -
    reinterpret_cast<char*>(&_impl_.total_count_)) + sizeof(_impl_.limit_));
  // @@protoc_insertion_point(copy_constructor:cosmos.base.abci.v1beta1.SearchTxsResult)
}

inline void SearchTxsResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , decltype(_impl_.total_count_) { ::uint64_t{0u} }

    , decltype(_impl_.count_) { ::uint64_t{0u} }

    , decltype(_impl_.page_number_) { ::uint64_t{0u} }

    , decltype(_impl_.page_total_) { ::uint64_t{0u} }

    , decltype(_impl_.limit_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchTxsResult::~SearchTxsResult() {
  // @@protoc_insertion_point(destructor:cosmos.base.abci.v1beta1.SearchTxsResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchTxsResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_txs()->~RepeatedPtrField();
}

void SearchTxsResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchTxsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.abci.v1beta1.SearchTxsResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_txs()->Clear();
  ::memset(&_impl_.total_count_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.total_count_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchTxsResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 total_count = 1 [json_name = "totalCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 count = 2 [json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 page_number = 3 [json_name = "pageNumber"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 page_total = 4 [json_name = "pageTotal"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.page_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 limit = 5 [json_name = "limit"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.abci.v1beta1.TxResponse txs = 6 [json_name = "txs"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_txs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SearchTxsResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.abci.v1beta1.SearchTxsResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_count = 1 [json_name = "totalCount"];
  if (this->_internal_total_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_total_count(), target);
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_count(), target);
  }

  // uint64 page_number = 3 [json_name = "pageNumber"];
  if (this->_internal_page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_page_number(), target);
  }

  // uint64 page_total = 4 [json_name = "pageTotal"];
  if (this->_internal_page_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_page_total(), target);
  }

  // uint64 limit = 5 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_limit(), target);
  }

  // repeated .cosmos.base.abci.v1beta1.TxResponse txs = 6 [json_name = "txs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_txs_size()); i < n; i++) {
    const auto& repfield = this->_internal_txs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.abci.v1beta1.SearchTxsResult)
  return target;
}

::size_t SearchTxsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.abci.v1beta1.SearchTxsResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.abci.v1beta1.TxResponse txs = 6 [json_name = "txs"];
  total_size += 1UL * this->_internal_txs_size();
  for (const auto& msg : this->_internal_txs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total_count = 1 [json_name = "totalCount"];
  if (this->_internal_total_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_total_count());
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_count());
  }

  // uint64 page_number = 3 [json_name = "pageNumber"];
  if (this->_internal_page_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_page_number());
  }

  // uint64 page_total = 4 [json_name = "pageTotal"];
  if (this->_internal_page_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_page_total());
  }

  // uint64 limit = 5 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchTxsResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchTxsResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchTxsResult::GetClassData() const { return &_class_data_; }


void SearchTxsResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchTxsResult*>(&to_msg);
  auto& from = static_cast<const SearchTxsResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.abci.v1beta1.SearchTxsResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_txs()->MergeFrom(from._internal_txs());
  if (from._internal_total_count() != 0) {
    _this->_internal_set_total_count(from._internal_total_count());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_page_number() != 0) {
    _this->_internal_set_page_number(from._internal_page_number());
  }
  if (from._internal_page_total() != 0) {
    _this->_internal_set_page_total(from._internal_page_total());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchTxsResult::CopyFrom(const SearchTxsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.abci.v1beta1.SearchTxsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchTxsResult::IsInitialized() const {
  return true;
}

void SearchTxsResult::InternalSwap(SearchTxsResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_txs()->InternalSwap(other->_internal_mutable_txs());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchTxsResult, _impl_.limit_)
      + sizeof(SearchTxsResult::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(SearchTxsResult, _impl_.total_count_)>(
          reinterpret_cast<char*>(&_impl_.total_count_),
          reinterpret_cast<char*>(&other->_impl_.total_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchTxsResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_getter, &descriptor_table_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fabci_2fv1beta1_2fabci_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace abci
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::TxResponse*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::TxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::TxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::ABCIMessageLog*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::ABCIMessageLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::ABCIMessageLog >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::StringEvent*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::StringEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::StringEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::Attribute*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::Attribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::Attribute >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::GasInfo*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::GasInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::GasInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::Result*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::SimulationResponse*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::SimulationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::SimulationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::MsgData*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::MsgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::MsgData >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::TxMsgData*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::TxMsgData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::TxMsgData >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::abci::v1beta1::SearchTxsResult*
Arena::CreateMaybeMessage< ::cosmos::base::abci::v1beta1::SearchTxsResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::abci::v1beta1::SearchTxsResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/base/reflection/v2alpha1/reflection.proto

#include "cosmos/base/reflection/v2alpha1/reflection.pb.h"
#include "cosmos/base/reflection/v2alpha1/reflection.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace base {
namespace reflection {
namespace v2alpha1 {

static const char* ReflectionService_method_names[] = {
  "/cosmos.base.reflection.v2alpha1.ReflectionService/GetAuthnDescriptor",
  "/cosmos.base.reflection.v2alpha1.ReflectionService/GetChainDescriptor",
  "/cosmos.base.reflection.v2alpha1.ReflectionService/GetCodecDescriptor",
  "/cosmos.base.reflection.v2alpha1.ReflectionService/GetConfigurationDescriptor",
  "/cosmos.base.reflection.v2alpha1.ReflectionService/GetQueryServicesDescriptor",
  "/cosmos.base.reflection.v2alpha1.ReflectionService/GetTxDescriptor",
};

std::unique_ptr< ReflectionService::Stub> ReflectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ReflectionService::Stub> stub(new ReflectionService::Stub(channel, options));
  return stub;
}

ReflectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAuthnDescriptor_(ReflectionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChainDescriptor_(ReflectionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCodecDescriptor_(ReflectionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfigurationDescriptor_(ReflectionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetQueryServicesDescriptor_(ReflectionService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxDescriptor_(ReflectionService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ReflectionService::Stub::GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAuthnDescriptor_, context, request, response);
}

void ReflectionService::Stub::async::GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthnDescriptor_, context, request, response, std::move(f));
}

void ReflectionService::Stub::async::GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthnDescriptor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* ReflectionService::Stub::PrepareAsyncGetAuthnDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAuthnDescriptor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* ReflectionService::Stub::AsyncGetAuthnDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAuthnDescriptorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReflectionService::Stub::GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChainDescriptor_, context, request, response);
}

void ReflectionService::Stub::async::GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChainDescriptor_, context, request, response, std::move(f));
}

void ReflectionService::Stub::async::GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChainDescriptor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* ReflectionService::Stub::PrepareAsyncGetChainDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChainDescriptor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* ReflectionService::Stub::AsyncGetChainDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChainDescriptorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReflectionService::Stub::GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCodecDescriptor_, context, request, response);
}

void ReflectionService::Stub::async::GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCodecDescriptor_, context, request, response, std::move(f));
}

void ReflectionService::Stub::async::GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCodecDescriptor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* ReflectionService::Stub::PrepareAsyncGetCodecDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCodecDescriptor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* ReflectionService::Stub::AsyncGetCodecDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCodecDescriptorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReflectionService::Stub::GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConfigurationDescriptor_, context, request, response);
}

void ReflectionService::Stub::async::GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfigurationDescriptor_, context, request, response, std::move(f));
}

void ReflectionService::Stub::async::GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfigurationDescriptor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* ReflectionService::Stub::PrepareAsyncGetConfigurationDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConfigurationDescriptor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* ReflectionService::Stub::AsyncGetConfigurationDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConfigurationDescriptorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReflectionService::Stub::GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetQueryServicesDescriptor_, context, request, response);
}

void ReflectionService::Stub::async::GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQueryServicesDescriptor_, context, request, response, std::move(f));
}

void ReflectionService::Stub::async::GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetQueryServicesDescriptor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* ReflectionService::Stub::PrepareAsyncGetQueryServicesDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetQueryServicesDescriptor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* ReflectionService::Stub::AsyncGetQueryServicesDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetQueryServicesDescriptorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ReflectionService::Stub::GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTxDescriptor_, context, request, response);
}

void ReflectionService::Stub::async::GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxDescriptor_, context, request, response, std::move(f));
}

void ReflectionService::Stub::async::GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxDescriptor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* ReflectionService::Stub::PrepareAsyncGetTxDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTxDescriptor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* ReflectionService::Stub::AsyncGetTxDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTxDescriptorRaw(context, request, cq);
  result->StartCall();
  return result;
}

ReflectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReflectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReflectionService::Service, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* req,
             ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* resp) {
               return service->GetAuthnDescriptor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReflectionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReflectionService::Service, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* req,
             ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* resp) {
               return service->GetChainDescriptor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReflectionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReflectionService::Service, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* req,
             ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* resp) {
               return service->GetCodecDescriptor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReflectionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReflectionService::Service, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* req,
             ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* resp) {
               return service->GetConfigurationDescriptor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReflectionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReflectionService::Service, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* req,
             ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* resp) {
               return service->GetQueryServicesDescriptor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ReflectionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ReflectionService::Service, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ReflectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* req,
             ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* resp) {
               return service->GetTxDescriptor(ctx, req, resp);
             }, this)));
}

ReflectionService::Service::~Service() {
}

::grpc::Status ReflectionService::Service::GetAuthnDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReflectionService::Service::GetChainDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReflectionService::Service::GetCodecDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReflectionService::Service::GetConfigurationDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReflectionService::Service::GetQueryServicesDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ReflectionService::Service::GetTxDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace base
}  // namespace reflection
}  // namespace v2alpha1


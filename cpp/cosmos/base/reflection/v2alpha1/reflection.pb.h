// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/reflection/v2alpha1/reflection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
namespace cosmos {
namespace base {
namespace reflection {
namespace v2alpha1 {
class AppDescriptor;
struct AppDescriptorDefaultTypeInternal;
extern AppDescriptorDefaultTypeInternal _AppDescriptor_default_instance_;
class AuthnDescriptor;
struct AuthnDescriptorDefaultTypeInternal;
extern AuthnDescriptorDefaultTypeInternal _AuthnDescriptor_default_instance_;
class ChainDescriptor;
struct ChainDescriptorDefaultTypeInternal;
extern ChainDescriptorDefaultTypeInternal _ChainDescriptor_default_instance_;
class CodecDescriptor;
struct CodecDescriptorDefaultTypeInternal;
extern CodecDescriptorDefaultTypeInternal _CodecDescriptor_default_instance_;
class ConfigurationDescriptor;
struct ConfigurationDescriptorDefaultTypeInternal;
extern ConfigurationDescriptorDefaultTypeInternal _ConfigurationDescriptor_default_instance_;
class GetAuthnDescriptorRequest;
struct GetAuthnDescriptorRequestDefaultTypeInternal;
extern GetAuthnDescriptorRequestDefaultTypeInternal _GetAuthnDescriptorRequest_default_instance_;
class GetAuthnDescriptorResponse;
struct GetAuthnDescriptorResponseDefaultTypeInternal;
extern GetAuthnDescriptorResponseDefaultTypeInternal _GetAuthnDescriptorResponse_default_instance_;
class GetChainDescriptorRequest;
struct GetChainDescriptorRequestDefaultTypeInternal;
extern GetChainDescriptorRequestDefaultTypeInternal _GetChainDescriptorRequest_default_instance_;
class GetChainDescriptorResponse;
struct GetChainDescriptorResponseDefaultTypeInternal;
extern GetChainDescriptorResponseDefaultTypeInternal _GetChainDescriptorResponse_default_instance_;
class GetCodecDescriptorRequest;
struct GetCodecDescriptorRequestDefaultTypeInternal;
extern GetCodecDescriptorRequestDefaultTypeInternal _GetCodecDescriptorRequest_default_instance_;
class GetCodecDescriptorResponse;
struct GetCodecDescriptorResponseDefaultTypeInternal;
extern GetCodecDescriptorResponseDefaultTypeInternal _GetCodecDescriptorResponse_default_instance_;
class GetConfigurationDescriptorRequest;
struct GetConfigurationDescriptorRequestDefaultTypeInternal;
extern GetConfigurationDescriptorRequestDefaultTypeInternal _GetConfigurationDescriptorRequest_default_instance_;
class GetConfigurationDescriptorResponse;
struct GetConfigurationDescriptorResponseDefaultTypeInternal;
extern GetConfigurationDescriptorResponseDefaultTypeInternal _GetConfigurationDescriptorResponse_default_instance_;
class GetQueryServicesDescriptorRequest;
struct GetQueryServicesDescriptorRequestDefaultTypeInternal;
extern GetQueryServicesDescriptorRequestDefaultTypeInternal _GetQueryServicesDescriptorRequest_default_instance_;
class GetQueryServicesDescriptorResponse;
struct GetQueryServicesDescriptorResponseDefaultTypeInternal;
extern GetQueryServicesDescriptorResponseDefaultTypeInternal _GetQueryServicesDescriptorResponse_default_instance_;
class GetTxDescriptorRequest;
struct GetTxDescriptorRequestDefaultTypeInternal;
extern GetTxDescriptorRequestDefaultTypeInternal _GetTxDescriptorRequest_default_instance_;
class GetTxDescriptorResponse;
struct GetTxDescriptorResponseDefaultTypeInternal;
extern GetTxDescriptorResponseDefaultTypeInternal _GetTxDescriptorResponse_default_instance_;
class InterfaceAcceptingMessageDescriptor;
struct InterfaceAcceptingMessageDescriptorDefaultTypeInternal;
extern InterfaceAcceptingMessageDescriptorDefaultTypeInternal _InterfaceAcceptingMessageDescriptor_default_instance_;
class InterfaceDescriptor;
struct InterfaceDescriptorDefaultTypeInternal;
extern InterfaceDescriptorDefaultTypeInternal _InterfaceDescriptor_default_instance_;
class InterfaceImplementerDescriptor;
struct InterfaceImplementerDescriptorDefaultTypeInternal;
extern InterfaceImplementerDescriptorDefaultTypeInternal _InterfaceImplementerDescriptor_default_instance_;
class MsgDescriptor;
struct MsgDescriptorDefaultTypeInternal;
extern MsgDescriptorDefaultTypeInternal _MsgDescriptor_default_instance_;
class QueryMethodDescriptor;
struct QueryMethodDescriptorDefaultTypeInternal;
extern QueryMethodDescriptorDefaultTypeInternal _QueryMethodDescriptor_default_instance_;
class QueryServiceDescriptor;
struct QueryServiceDescriptorDefaultTypeInternal;
extern QueryServiceDescriptorDefaultTypeInternal _QueryServiceDescriptor_default_instance_;
class QueryServicesDescriptor;
struct QueryServicesDescriptorDefaultTypeInternal;
extern QueryServicesDescriptorDefaultTypeInternal _QueryServicesDescriptor_default_instance_;
class SigningModeDescriptor;
struct SigningModeDescriptorDefaultTypeInternal;
extern SigningModeDescriptorDefaultTypeInternal _SigningModeDescriptor_default_instance_;
class TxDescriptor;
struct TxDescriptorDefaultTypeInternal;
extern TxDescriptorDefaultTypeInternal _TxDescriptor_default_instance_;
}  // namespace v2alpha1
}  // namespace reflection
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::base::reflection::v2alpha1::AppDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::AppDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::AuthnDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::AuthnDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::ChainDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::ChainDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::CodecDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::CodecDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::InterfaceDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::InterfaceDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::MsgDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::MsgDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::SigningModeDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::SigningModeDescriptor>(Arena*);
template <>
::cosmos::base::reflection::v2alpha1::TxDescriptor* Arena::CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::TxDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace base {
namespace reflection {
namespace v2alpha1 {

// ===================================================================


// -------------------------------------------------------------------

class AppDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.AppDescriptor) */ {
 public:
  inline AppDescriptor() : AppDescriptor(nullptr) {}
  ~AppDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AppDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppDescriptor(const AppDescriptor& from);
  AppDescriptor(AppDescriptor&& from) noexcept
    : AppDescriptor() {
    *this = ::std::move(from);
  }

  inline AppDescriptor& operator=(const AppDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppDescriptor& operator=(AppDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppDescriptor* internal_default_instance() {
    return reinterpret_cast<const AppDescriptor*>(
               &_AppDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppDescriptor& a, AppDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(AppDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppDescriptor& from) {
    AppDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.AppDescriptor";
  }
  protected:
  explicit AppDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthnFieldNumber = 1,
    kChainFieldNumber = 2,
    kCodecFieldNumber = 3,
    kConfigurationFieldNumber = 4,
    kQueryServicesFieldNumber = 5,
    kTxFieldNumber = 6,
  };
  // .cosmos.base.reflection.v2alpha1.AuthnDescriptor authn = 1 [json_name = "authn"];
  bool has_authn() const;
  void clear_authn() ;
  const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor& authn() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* release_authn();
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* mutable_authn();
  void set_allocated_authn(::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn);
  private:
  const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor& _internal_authn() const;
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* _internal_mutable_authn();
  public:
  void unsafe_arena_set_allocated_authn(
      ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn);
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* unsafe_arena_release_authn();
  // .cosmos.base.reflection.v2alpha1.ChainDescriptor chain = 2 [json_name = "chain"];
  bool has_chain() const;
  void clear_chain() ;
  const ::cosmos::base::reflection::v2alpha1::ChainDescriptor& chain() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::ChainDescriptor* release_chain();
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* mutable_chain();
  void set_allocated_chain(::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain);
  private:
  const ::cosmos::base::reflection::v2alpha1::ChainDescriptor& _internal_chain() const;
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* _internal_mutable_chain();
  public:
  void unsafe_arena_set_allocated_chain(
      ::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain);
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* unsafe_arena_release_chain();
  // .cosmos.base.reflection.v2alpha1.CodecDescriptor codec = 3 [json_name = "codec"];
  bool has_codec() const;
  void clear_codec() ;
  const ::cosmos::base::reflection::v2alpha1::CodecDescriptor& codec() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::CodecDescriptor* release_codec();
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* mutable_codec();
  void set_allocated_codec(::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec);
  private:
  const ::cosmos::base::reflection::v2alpha1::CodecDescriptor& _internal_codec() const;
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* _internal_mutable_codec();
  public:
  void unsafe_arena_set_allocated_codec(
      ::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec);
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* unsafe_arena_release_codec();
  // .cosmos.base.reflection.v2alpha1.ConfigurationDescriptor configuration = 4 [json_name = "configuration"];
  bool has_configuration() const;
  void clear_configuration() ;
  const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor& configuration() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* release_configuration();
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* mutable_configuration();
  void set_allocated_configuration(::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* configuration);
  private:
  const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor& _internal_configuration() const;
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* configuration);
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* unsafe_arena_release_configuration();
  // .cosmos.base.reflection.v2alpha1.QueryServicesDescriptor query_services = 5 [json_name = "queryServices"];
  bool has_query_services() const;
  void clear_query_services() ;
  const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor& query_services() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* release_query_services();
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* mutable_query_services();
  void set_allocated_query_services(::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* query_services);
  private:
  const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor& _internal_query_services() const;
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* _internal_mutable_query_services();
  public:
  void unsafe_arena_set_allocated_query_services(
      ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* query_services);
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* unsafe_arena_release_query_services();
  // .cosmos.base.reflection.v2alpha1.TxDescriptor tx = 6 [json_name = "tx"];
  bool has_tx() const;
  void clear_tx() ;
  const ::cosmos::base::reflection::v2alpha1::TxDescriptor& tx() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::TxDescriptor* release_tx();
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* mutable_tx();
  void set_allocated_tx(::cosmos::base::reflection::v2alpha1::TxDescriptor* tx);
  private:
  const ::cosmos::base::reflection::v2alpha1::TxDescriptor& _internal_tx() const;
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::cosmos::base::reflection::v2alpha1::TxDescriptor* tx);
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* unsafe_arena_release_tx();
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.AppDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn_;
    ::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain_;
    ::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec_;
    ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* configuration_;
    ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* query_services_;
    ::cosmos::base::reflection::v2alpha1::TxDescriptor* tx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class TxDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.TxDescriptor) */ {
 public:
  inline TxDescriptor() : TxDescriptor(nullptr) {}
  ~TxDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxDescriptor(const TxDescriptor& from);
  TxDescriptor(TxDescriptor&& from) noexcept
    : TxDescriptor() {
    *this = ::std::move(from);
  }

  inline TxDescriptor& operator=(const TxDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxDescriptor& operator=(TxDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxDescriptor* internal_default_instance() {
    return reinterpret_cast<const TxDescriptor*>(
               &_TxDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxDescriptor& a, TxDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TxDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxDescriptor& from) {
    TxDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.TxDescriptor";
  }
  protected:
  explicit TxDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 2,
    kFullnameFieldNumber = 1,
  };
  // repeated .cosmos.base.reflection.v2alpha1.MsgDescriptor msgs = 2 [json_name = "msgs"];
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;

  public:
  void clear_msgs() ;
  ::cosmos::base::reflection::v2alpha1::MsgDescriptor* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::MsgDescriptor >*
      mutable_msgs();
  private:
  const ::cosmos::base::reflection::v2alpha1::MsgDescriptor& _internal_msgs(int index) const;
  ::cosmos::base::reflection::v2alpha1::MsgDescriptor* _internal_add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::MsgDescriptor>& _internal_msgs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::MsgDescriptor>* _internal_mutable_msgs();
  public:
  const ::cosmos::base::reflection::v2alpha1::MsgDescriptor& msgs(int index) const;
  ::cosmos::base::reflection::v2alpha1::MsgDescriptor* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::MsgDescriptor >&
      msgs() const;
  // string fullname = 1 [json_name = "fullname"];
  void clear_fullname() ;
  const std::string& fullname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_fullname();
  PROTOBUF_NODISCARD std::string* release_fullname();
  void set_allocated_fullname(std::string* ptr);

  private:
  const std::string& _internal_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullname(
      const std::string& value);
  std::string* _internal_mutable_fullname();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.TxDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::MsgDescriptor > msgs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class AuthnDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.AuthnDescriptor) */ {
 public:
  inline AuthnDescriptor() : AuthnDescriptor(nullptr) {}
  ~AuthnDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AuthnDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthnDescriptor(const AuthnDescriptor& from);
  AuthnDescriptor(AuthnDescriptor&& from) noexcept
    : AuthnDescriptor() {
    *this = ::std::move(from);
  }

  inline AuthnDescriptor& operator=(const AuthnDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthnDescriptor& operator=(AuthnDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthnDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthnDescriptor* internal_default_instance() {
    return reinterpret_cast<const AuthnDescriptor*>(
               &_AuthnDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthnDescriptor& a, AuthnDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthnDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthnDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthnDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthnDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthnDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthnDescriptor& from) {
    AuthnDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthnDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.AuthnDescriptor";
  }
  protected:
  explicit AuthnDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignModesFieldNumber = 1,
  };
  // repeated .cosmos.base.reflection.v2alpha1.SigningModeDescriptor sign_modes = 1 [json_name = "signModes"];
  int sign_modes_size() const;
  private:
  int _internal_sign_modes_size() const;

  public:
  void clear_sign_modes() ;
  ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor* mutable_sign_modes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor >*
      mutable_sign_modes();
  private:
  const ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor& _internal_sign_modes(int index) const;
  ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor* _internal_add_sign_modes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::SigningModeDescriptor>& _internal_sign_modes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::SigningModeDescriptor>* _internal_mutable_sign_modes();
  public:
  const ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor& sign_modes(int index) const;
  ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor* add_sign_modes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor >&
      sign_modes() const;
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.AuthnDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor > sign_modes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class SigningModeDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.SigningModeDescriptor) */ {
 public:
  inline SigningModeDescriptor() : SigningModeDescriptor(nullptr) {}
  ~SigningModeDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SigningModeDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningModeDescriptor(const SigningModeDescriptor& from);
  SigningModeDescriptor(SigningModeDescriptor&& from) noexcept
    : SigningModeDescriptor() {
    *this = ::std::move(from);
  }

  inline SigningModeDescriptor& operator=(const SigningModeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningModeDescriptor& operator=(SigningModeDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningModeDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningModeDescriptor* internal_default_instance() {
    return reinterpret_cast<const SigningModeDescriptor*>(
               &_SigningModeDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SigningModeDescriptor& a, SigningModeDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningModeDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningModeDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningModeDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningModeDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningModeDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SigningModeDescriptor& from) {
    SigningModeDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningModeDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.SigningModeDescriptor";
  }
  protected:
  explicit SigningModeDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAuthnInfoProviderMethodFullnameFieldNumber = 3,
    kNumberFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string authn_info_provider_method_fullname = 3 [json_name = "authnInfoProviderMethodFullname"];
  void clear_authn_info_provider_method_fullname() ;
  const std::string& authn_info_provider_method_fullname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authn_info_provider_method_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_authn_info_provider_method_fullname();
  PROTOBUF_NODISCARD std::string* release_authn_info_provider_method_fullname();
  void set_allocated_authn_info_provider_method_fullname(std::string* ptr);

  private:
  const std::string& _internal_authn_info_provider_method_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authn_info_provider_method_fullname(
      const std::string& value);
  std::string* _internal_mutable_authn_info_provider_method_fullname();

  public:
  // int32 number = 2 [json_name = "number"];
  void clear_number() ;
  ::int32_t number() const;
  void set_number(::int32_t value);

  private:
  ::int32_t _internal_number() const;
  void _internal_set_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.SigningModeDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authn_info_provider_method_fullname_;
    ::int32_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class ChainDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.ChainDescriptor) */ {
 public:
  inline ChainDescriptor() : ChainDescriptor(nullptr) {}
  ~ChainDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ChainDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChainDescriptor(const ChainDescriptor& from);
  ChainDescriptor(ChainDescriptor&& from) noexcept
    : ChainDescriptor() {
    *this = ::std::move(from);
  }

  inline ChainDescriptor& operator=(const ChainDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainDescriptor& operator=(ChainDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChainDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChainDescriptor* internal_default_instance() {
    return reinterpret_cast<const ChainDescriptor*>(
               &_ChainDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChainDescriptor& a, ChainDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ChainDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChainDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChainDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChainDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChainDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChainDescriptor& from) {
    ChainDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChainDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.ChainDescriptor";
  }
  protected:
  explicit ChainDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.ChainDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class CodecDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.CodecDescriptor) */ {
 public:
  inline CodecDescriptor() : CodecDescriptor(nullptr) {}
  ~CodecDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CodecDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CodecDescriptor(const CodecDescriptor& from);
  CodecDescriptor(CodecDescriptor&& from) noexcept
    : CodecDescriptor() {
    *this = ::std::move(from);
  }

  inline CodecDescriptor& operator=(const CodecDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CodecDescriptor& operator=(CodecDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CodecDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const CodecDescriptor* internal_default_instance() {
    return reinterpret_cast<const CodecDescriptor*>(
               &_CodecDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CodecDescriptor& a, CodecDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(CodecDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CodecDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CodecDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CodecDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CodecDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CodecDescriptor& from) {
    CodecDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodecDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.CodecDescriptor";
  }
  protected:
  explicit CodecDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfacesFieldNumber = 1,
  };
  // repeated .cosmos.base.reflection.v2alpha1.InterfaceDescriptor interfaces = 1 [json_name = "interfaces"];
  int interfaces_size() const;
  private:
  int _internal_interfaces_size() const;

  public:
  void clear_interfaces() ;
  ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor* mutable_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor >*
      mutable_interfaces();
  private:
  const ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor& _internal_interfaces(int index) const;
  ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor* _internal_add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceDescriptor>& _internal_interfaces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceDescriptor>* _internal_mutable_interfaces();
  public:
  const ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor& interfaces(int index) const;
  ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor* add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor >&
      interfaces() const;
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.CodecDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor > interfaces_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class InterfaceDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.InterfaceDescriptor) */ {
 public:
  inline InterfaceDescriptor() : InterfaceDescriptor(nullptr) {}
  ~InterfaceDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InterfaceDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterfaceDescriptor(const InterfaceDescriptor& from);
  InterfaceDescriptor(InterfaceDescriptor&& from) noexcept
    : InterfaceDescriptor() {
    *this = ::std::move(from);
  }

  inline InterfaceDescriptor& operator=(const InterfaceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceDescriptor& operator=(InterfaceDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InterfaceDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterfaceDescriptor* internal_default_instance() {
    return reinterpret_cast<const InterfaceDescriptor*>(
               &_InterfaceDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InterfaceDescriptor& a, InterfaceDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InterfaceDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InterfaceDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InterfaceDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InterfaceDescriptor& from) {
    InterfaceDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.InterfaceDescriptor";
  }
  protected:
  explicit InterfaceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceAcceptingMessagesFieldNumber = 2,
    kInterfaceImplementersFieldNumber = 3,
    kFullnameFieldNumber = 1,
  };
  // repeated .cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor interface_accepting_messages = 2 [json_name = "interfaceAcceptingMessages"];
  int interface_accepting_messages_size() const;
  private:
  int _internal_interface_accepting_messages_size() const;

  public:
  void clear_interface_accepting_messages() ;
  ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor* mutable_interface_accepting_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor >*
      mutable_interface_accepting_messages();
  private:
  const ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor& _internal_interface_accepting_messages(int index) const;
  ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor* _internal_add_interface_accepting_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor>& _internal_interface_accepting_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor>* _internal_mutable_interface_accepting_messages();
  public:
  const ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor& interface_accepting_messages(int index) const;
  ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor* add_interface_accepting_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor >&
      interface_accepting_messages() const;
  // repeated .cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor interface_implementers = 3 [json_name = "interfaceImplementers"];
  int interface_implementers_size() const;
  private:
  int _internal_interface_implementers_size() const;

  public:
  void clear_interface_implementers() ;
  ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor* mutable_interface_implementers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor >*
      mutable_interface_implementers();
  private:
  const ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor& _internal_interface_implementers(int index) const;
  ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor* _internal_add_interface_implementers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor>& _internal_interface_implementers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor>* _internal_mutable_interface_implementers();
  public:
  const ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor& interface_implementers(int index) const;
  ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor* add_interface_implementers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor >&
      interface_implementers() const;
  // string fullname = 1 [json_name = "fullname"];
  void clear_fullname() ;
  const std::string& fullname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_fullname();
  PROTOBUF_NODISCARD std::string* release_fullname();
  void set_allocated_fullname(std::string* ptr);

  private:
  const std::string& _internal_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullname(
      const std::string& value);
  std::string* _internal_mutable_fullname();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.InterfaceDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor > interface_accepting_messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor > interface_implementers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class InterfaceImplementerDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor) */ {
 public:
  inline InterfaceImplementerDescriptor() : InterfaceImplementerDescriptor(nullptr) {}
  ~InterfaceImplementerDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InterfaceImplementerDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterfaceImplementerDescriptor(const InterfaceImplementerDescriptor& from);
  InterfaceImplementerDescriptor(InterfaceImplementerDescriptor&& from) noexcept
    : InterfaceImplementerDescriptor() {
    *this = ::std::move(from);
  }

  inline InterfaceImplementerDescriptor& operator=(const InterfaceImplementerDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceImplementerDescriptor& operator=(InterfaceImplementerDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InterfaceImplementerDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterfaceImplementerDescriptor* internal_default_instance() {
    return reinterpret_cast<const InterfaceImplementerDescriptor*>(
               &_InterfaceImplementerDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InterfaceImplementerDescriptor& a, InterfaceImplementerDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceImplementerDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceImplementerDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InterfaceImplementerDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InterfaceImplementerDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InterfaceImplementerDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InterfaceImplementerDescriptor& from) {
    InterfaceImplementerDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceImplementerDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor";
  }
  protected:
  explicit InterfaceImplementerDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFullnameFieldNumber = 1,
    kTypeUrlFieldNumber = 2,
  };
  // string fullname = 1 [json_name = "fullname"];
  void clear_fullname() ;
  const std::string& fullname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_fullname();
  PROTOBUF_NODISCARD std::string* release_fullname();
  void set_allocated_fullname(std::string* ptr);

  private:
  const std::string& _internal_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullname(
      const std::string& value);
  std::string* _internal_mutable_fullname();

  public:
  // string type_url = 2 [json_name = "typeUrl"];
  void clear_type_url() ;
  const std::string& type_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type_url(Arg_&& arg, Args_... args);
  std::string* mutable_type_url();
  PROTOBUF_NODISCARD std::string* release_type_url();
  void set_allocated_type_url(std::string* ptr);

  private:
  const std::string& _internal_type_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_url(
      const std::string& value);
  std::string* _internal_mutable_type_url();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class InterfaceAcceptingMessageDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor) */ {
 public:
  inline InterfaceAcceptingMessageDescriptor() : InterfaceAcceptingMessageDescriptor(nullptr) {}
  ~InterfaceAcceptingMessageDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InterfaceAcceptingMessageDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterfaceAcceptingMessageDescriptor(const InterfaceAcceptingMessageDescriptor& from);
  InterfaceAcceptingMessageDescriptor(InterfaceAcceptingMessageDescriptor&& from) noexcept
    : InterfaceAcceptingMessageDescriptor() {
    *this = ::std::move(from);
  }

  inline InterfaceAcceptingMessageDescriptor& operator=(const InterfaceAcceptingMessageDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceAcceptingMessageDescriptor& operator=(InterfaceAcceptingMessageDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InterfaceAcceptingMessageDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterfaceAcceptingMessageDescriptor* internal_default_instance() {
    return reinterpret_cast<const InterfaceAcceptingMessageDescriptor*>(
               &_InterfaceAcceptingMessageDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InterfaceAcceptingMessageDescriptor& a, InterfaceAcceptingMessageDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceAcceptingMessageDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterfaceAcceptingMessageDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InterfaceAcceptingMessageDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InterfaceAcceptingMessageDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InterfaceAcceptingMessageDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InterfaceAcceptingMessageDescriptor& from) {
    InterfaceAcceptingMessageDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceAcceptingMessageDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor";
  }
  protected:
  explicit InterfaceAcceptingMessageDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldDescriptorNamesFieldNumber = 2,
    kFullnameFieldNumber = 1,
  };
  // repeated string field_descriptor_names = 2 [json_name = "fieldDescriptorNames"];
  int field_descriptor_names_size() const;
  private:
  int _internal_field_descriptor_names_size() const;

  public:
  void clear_field_descriptor_names() ;
  const std::string& field_descriptor_names(int index) const;
  std::string* mutable_field_descriptor_names(int index);
  void set_field_descriptor_names(int index, const std::string& value);
  void set_field_descriptor_names(int index, std::string&& value);
  void set_field_descriptor_names(int index, const char* value);
  void set_field_descriptor_names(int index, const char* value, std::size_t size);
  void set_field_descriptor_names(int index, absl::string_view value);
  std::string* add_field_descriptor_names();
  void add_field_descriptor_names(const std::string& value);
  void add_field_descriptor_names(std::string&& value);
  void add_field_descriptor_names(const char* value);
  void add_field_descriptor_names(const char* value, std::size_t size);
  void add_field_descriptor_names(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field_descriptor_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field_descriptor_names();

  private:
  const std::string& _internal_field_descriptor_names(int index) const;
  std::string* _internal_add_field_descriptor_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_field_descriptor_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_field_descriptor_names();

  public:
  // string fullname = 1 [json_name = "fullname"];
  void clear_fullname() ;
  const std::string& fullname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_fullname();
  PROTOBUF_NODISCARD std::string* release_fullname();
  void set_allocated_fullname(std::string* ptr);

  private:
  const std::string& _internal_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullname(
      const std::string& value);
  std::string* _internal_mutable_fullname();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_descriptor_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class ConfigurationDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.ConfigurationDescriptor) */ {
 public:
  inline ConfigurationDescriptor() : ConfigurationDescriptor(nullptr) {}
  ~ConfigurationDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigurationDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigurationDescriptor(const ConfigurationDescriptor& from);
  ConfigurationDescriptor(ConfigurationDescriptor&& from) noexcept
    : ConfigurationDescriptor() {
    *this = ::std::move(from);
  }

  inline ConfigurationDescriptor& operator=(const ConfigurationDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationDescriptor& operator=(ConfigurationDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigurationDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationDescriptor* internal_default_instance() {
    return reinterpret_cast<const ConfigurationDescriptor*>(
               &_ConfigurationDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ConfigurationDescriptor& a, ConfigurationDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigurationDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigurationDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigurationDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigurationDescriptor& from) {
    ConfigurationDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.ConfigurationDescriptor";
  }
  protected:
  explicit ConfigurationDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBech32AccountAddressPrefixFieldNumber = 1,
  };
  // string bech32_account_address_prefix = 1 [json_name = "bech32AccountAddressPrefix"];
  void clear_bech32_account_address_prefix() ;
  const std::string& bech32_account_address_prefix() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bech32_account_address_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_bech32_account_address_prefix();
  PROTOBUF_NODISCARD std::string* release_bech32_account_address_prefix();
  void set_allocated_bech32_account_address_prefix(std::string* ptr);

  private:
  const std::string& _internal_bech32_account_address_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bech32_account_address_prefix(
      const std::string& value);
  std::string* _internal_mutable_bech32_account_address_prefix();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.ConfigurationDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bech32_account_address_prefix_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class MsgDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.MsgDescriptor) */ {
 public:
  inline MsgDescriptor() : MsgDescriptor(nullptr) {}
  ~MsgDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDescriptor(const MsgDescriptor& from);
  MsgDescriptor(MsgDescriptor&& from) noexcept
    : MsgDescriptor() {
    *this = ::std::move(from);
  }

  inline MsgDescriptor& operator=(const MsgDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDescriptor& operator=(MsgDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDescriptor* internal_default_instance() {
    return reinterpret_cast<const MsgDescriptor*>(
               &_MsgDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgDescriptor& a, MsgDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgDescriptor& from) {
    MsgDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.MsgDescriptor";
  }
  protected:
  explicit MsgDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeUrlFieldNumber = 1,
  };
  // string msg_type_url = 1 [json_name = "msgTypeUrl"];
  void clear_msg_type_url() ;
  const std::string& msg_type_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg_type_url(Arg_&& arg, Args_... args);
  std::string* mutable_msg_type_url();
  PROTOBUF_NODISCARD std::string* release_msg_type_url();
  void set_allocated_msg_type_url(std::string* ptr);

  private:
  const std::string& _internal_msg_type_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_type_url(
      const std::string& value);
  std::string* _internal_mutable_msg_type_url();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.MsgDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_type_url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetAuthnDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest) */ {
 public:
  inline GetAuthnDescriptorRequest() : GetAuthnDescriptorRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAuthnDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAuthnDescriptorRequest(const GetAuthnDescriptorRequest& from);
  GetAuthnDescriptorRequest(GetAuthnDescriptorRequest&& from) noexcept
    : GetAuthnDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetAuthnDescriptorRequest& operator=(const GetAuthnDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthnDescriptorRequest& operator=(GetAuthnDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAuthnDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAuthnDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetAuthnDescriptorRequest*>(
               &_GetAuthnDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetAuthnDescriptorRequest& a, GetAuthnDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthnDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAuthnDescriptorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAuthnDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAuthnDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAuthnDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAuthnDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest";
  }
  protected:
  explicit GetAuthnDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetAuthnDescriptorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse) */ {
 public:
  inline GetAuthnDescriptorResponse() : GetAuthnDescriptorResponse(nullptr) {}
  ~GetAuthnDescriptorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAuthnDescriptorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAuthnDescriptorResponse(const GetAuthnDescriptorResponse& from);
  GetAuthnDescriptorResponse(GetAuthnDescriptorResponse&& from) noexcept
    : GetAuthnDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline GetAuthnDescriptorResponse& operator=(const GetAuthnDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthnDescriptorResponse& operator=(GetAuthnDescriptorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAuthnDescriptorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAuthnDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const GetAuthnDescriptorResponse*>(
               &_GetAuthnDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetAuthnDescriptorResponse& a, GetAuthnDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthnDescriptorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAuthnDescriptorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAuthnDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAuthnDescriptorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAuthnDescriptorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAuthnDescriptorResponse& from) {
    GetAuthnDescriptorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthnDescriptorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse";
  }
  protected:
  explicit GetAuthnDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthnFieldNumber = 1,
  };
  // .cosmos.base.reflection.v2alpha1.AuthnDescriptor authn = 1 [json_name = "authn"];
  bool has_authn() const;
  void clear_authn() ;
  const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor& authn() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* release_authn();
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* mutable_authn();
  void set_allocated_authn(::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn);
  private:
  const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor& _internal_authn() const;
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* _internal_mutable_authn();
  public:
  void unsafe_arena_set_allocated_authn(
      ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn);
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* unsafe_arena_release_authn();
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetChainDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest) */ {
 public:
  inline GetChainDescriptorRequest() : GetChainDescriptorRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetChainDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChainDescriptorRequest(const GetChainDescriptorRequest& from);
  GetChainDescriptorRequest(GetChainDescriptorRequest&& from) noexcept
    : GetChainDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetChainDescriptorRequest& operator=(const GetChainDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChainDescriptorRequest& operator=(GetChainDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChainDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChainDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetChainDescriptorRequest*>(
               &_GetChainDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetChainDescriptorRequest& a, GetChainDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChainDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChainDescriptorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChainDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChainDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetChainDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetChainDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest";
  }
  protected:
  explicit GetChainDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetChainDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetChainDescriptorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse) */ {
 public:
  inline GetChainDescriptorResponse() : GetChainDescriptorResponse(nullptr) {}
  ~GetChainDescriptorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetChainDescriptorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetChainDescriptorResponse(const GetChainDescriptorResponse& from);
  GetChainDescriptorResponse(GetChainDescriptorResponse&& from) noexcept
    : GetChainDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline GetChainDescriptorResponse& operator=(const GetChainDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChainDescriptorResponse& operator=(GetChainDescriptorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetChainDescriptorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetChainDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const GetChainDescriptorResponse*>(
               &_GetChainDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetChainDescriptorResponse& a, GetChainDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChainDescriptorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetChainDescriptorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetChainDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetChainDescriptorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetChainDescriptorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetChainDescriptorResponse& from) {
    GetChainDescriptorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChainDescriptorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse";
  }
  protected:
  explicit GetChainDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainFieldNumber = 1,
  };
  // .cosmos.base.reflection.v2alpha1.ChainDescriptor chain = 1 [json_name = "chain"];
  bool has_chain() const;
  void clear_chain() ;
  const ::cosmos::base::reflection::v2alpha1::ChainDescriptor& chain() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::ChainDescriptor* release_chain();
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* mutable_chain();
  void set_allocated_chain(::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain);
  private:
  const ::cosmos::base::reflection::v2alpha1::ChainDescriptor& _internal_chain() const;
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* _internal_mutable_chain();
  public:
  void unsafe_arena_set_allocated_chain(
      ::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain);
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* unsafe_arena_release_chain();
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetCodecDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest) */ {
 public:
  inline GetCodecDescriptorRequest() : GetCodecDescriptorRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCodecDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCodecDescriptorRequest(const GetCodecDescriptorRequest& from);
  GetCodecDescriptorRequest(GetCodecDescriptorRequest&& from) noexcept
    : GetCodecDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetCodecDescriptorRequest& operator=(const GetCodecDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCodecDescriptorRequest& operator=(GetCodecDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCodecDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCodecDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetCodecDescriptorRequest*>(
               &_GetCodecDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetCodecDescriptorRequest& a, GetCodecDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCodecDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCodecDescriptorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCodecDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCodecDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetCodecDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetCodecDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest";
  }
  protected:
  explicit GetCodecDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetCodecDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetCodecDescriptorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse) */ {
 public:
  inline GetCodecDescriptorResponse() : GetCodecDescriptorResponse(nullptr) {}
  ~GetCodecDescriptorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCodecDescriptorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCodecDescriptorResponse(const GetCodecDescriptorResponse& from);
  GetCodecDescriptorResponse(GetCodecDescriptorResponse&& from) noexcept
    : GetCodecDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline GetCodecDescriptorResponse& operator=(const GetCodecDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCodecDescriptorResponse& operator=(GetCodecDescriptorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCodecDescriptorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCodecDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const GetCodecDescriptorResponse*>(
               &_GetCodecDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetCodecDescriptorResponse& a, GetCodecDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCodecDescriptorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCodecDescriptorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCodecDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCodecDescriptorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCodecDescriptorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCodecDescriptorResponse& from) {
    GetCodecDescriptorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCodecDescriptorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse";
  }
  protected:
  explicit GetCodecDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodecFieldNumber = 1,
  };
  // .cosmos.base.reflection.v2alpha1.CodecDescriptor codec = 1 [json_name = "codec"];
  bool has_codec() const;
  void clear_codec() ;
  const ::cosmos::base::reflection::v2alpha1::CodecDescriptor& codec() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::CodecDescriptor* release_codec();
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* mutable_codec();
  void set_allocated_codec(::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec);
  private:
  const ::cosmos::base::reflection::v2alpha1::CodecDescriptor& _internal_codec() const;
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* _internal_mutable_codec();
  public:
  void unsafe_arena_set_allocated_codec(
      ::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec);
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* unsafe_arena_release_codec();
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetConfigurationDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest) */ {
 public:
  inline GetConfigurationDescriptorRequest() : GetConfigurationDescriptorRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetConfigurationDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigurationDescriptorRequest(const GetConfigurationDescriptorRequest& from);
  GetConfigurationDescriptorRequest(GetConfigurationDescriptorRequest&& from) noexcept
    : GetConfigurationDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigurationDescriptorRequest& operator=(const GetConfigurationDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigurationDescriptorRequest& operator=(GetConfigurationDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigurationDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigurationDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigurationDescriptorRequest*>(
               &_GetConfigurationDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetConfigurationDescriptorRequest& a, GetConfigurationDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigurationDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigurationDescriptorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigurationDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigurationDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetConfigurationDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetConfigurationDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest";
  }
  protected:
  explicit GetConfigurationDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetConfigurationDescriptorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse) */ {
 public:
  inline GetConfigurationDescriptorResponse() : GetConfigurationDescriptorResponse(nullptr) {}
  ~GetConfigurationDescriptorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetConfigurationDescriptorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigurationDescriptorResponse(const GetConfigurationDescriptorResponse& from);
  GetConfigurationDescriptorResponse(GetConfigurationDescriptorResponse&& from) noexcept
    : GetConfigurationDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigurationDescriptorResponse& operator=(const GetConfigurationDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigurationDescriptorResponse& operator=(GetConfigurationDescriptorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigurationDescriptorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigurationDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigurationDescriptorResponse*>(
               &_GetConfigurationDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetConfigurationDescriptorResponse& a, GetConfigurationDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigurationDescriptorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigurationDescriptorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigurationDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigurationDescriptorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigurationDescriptorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConfigurationDescriptorResponse& from) {
    GetConfigurationDescriptorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigurationDescriptorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse";
  }
  protected:
  explicit GetConfigurationDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // .cosmos.base.reflection.v2alpha1.ConfigurationDescriptor config = 1 [json_name = "config"];
  bool has_config() const;
  void clear_config() ;
  const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor& config() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* release_config();
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* mutable_config();
  void set_allocated_config(::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* config);
  private:
  const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor& _internal_config() const;
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* config);
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* unsafe_arena_release_config();
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetQueryServicesDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest) */ {
 public:
  inline GetQueryServicesDescriptorRequest() : GetQueryServicesDescriptorRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetQueryServicesDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetQueryServicesDescriptorRequest(const GetQueryServicesDescriptorRequest& from);
  GetQueryServicesDescriptorRequest(GetQueryServicesDescriptorRequest&& from) noexcept
    : GetQueryServicesDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetQueryServicesDescriptorRequest& operator=(const GetQueryServicesDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQueryServicesDescriptorRequest& operator=(GetQueryServicesDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetQueryServicesDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetQueryServicesDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetQueryServicesDescriptorRequest*>(
               &_GetQueryServicesDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetQueryServicesDescriptorRequest& a, GetQueryServicesDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQueryServicesDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetQueryServicesDescriptorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetQueryServicesDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetQueryServicesDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetQueryServicesDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetQueryServicesDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest";
  }
  protected:
  explicit GetQueryServicesDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetQueryServicesDescriptorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse) */ {
 public:
  inline GetQueryServicesDescriptorResponse() : GetQueryServicesDescriptorResponse(nullptr) {}
  ~GetQueryServicesDescriptorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetQueryServicesDescriptorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetQueryServicesDescriptorResponse(const GetQueryServicesDescriptorResponse& from);
  GetQueryServicesDescriptorResponse(GetQueryServicesDescriptorResponse&& from) noexcept
    : GetQueryServicesDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline GetQueryServicesDescriptorResponse& operator=(const GetQueryServicesDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQueryServicesDescriptorResponse& operator=(GetQueryServicesDescriptorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetQueryServicesDescriptorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetQueryServicesDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const GetQueryServicesDescriptorResponse*>(
               &_GetQueryServicesDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetQueryServicesDescriptorResponse& a, GetQueryServicesDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQueryServicesDescriptorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetQueryServicesDescriptorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetQueryServicesDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetQueryServicesDescriptorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetQueryServicesDescriptorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetQueryServicesDescriptorResponse& from) {
    GetQueryServicesDescriptorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQueryServicesDescriptorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse";
  }
  protected:
  explicit GetQueryServicesDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 1,
  };
  // .cosmos.base.reflection.v2alpha1.QueryServicesDescriptor queries = 1 [json_name = "queries"];
  bool has_queries() const;
  void clear_queries() ;
  const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor& queries() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* release_queries();
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* mutable_queries();
  void set_allocated_queries(::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* queries);
  private:
  const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor& _internal_queries() const;
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* _internal_mutable_queries();
  public:
  void unsafe_arena_set_allocated_queries(
      ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* queries);
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* unsafe_arena_release_queries();
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* queries_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetTxDescriptorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest) */ {
 public:
  inline GetTxDescriptorRequest() : GetTxDescriptorRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTxDescriptorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTxDescriptorRequest(const GetTxDescriptorRequest& from);
  GetTxDescriptorRequest(GetTxDescriptorRequest&& from) noexcept
    : GetTxDescriptorRequest() {
    *this = ::std::move(from);
  }

  inline GetTxDescriptorRequest& operator=(const GetTxDescriptorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxDescriptorRequest& operator=(GetTxDescriptorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTxDescriptorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTxDescriptorRequest* internal_default_instance() {
    return reinterpret_cast<const GetTxDescriptorRequest*>(
               &_GetTxDescriptorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetTxDescriptorRequest& a, GetTxDescriptorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxDescriptorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxDescriptorRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTxDescriptorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTxDescriptorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetTxDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetTxDescriptorRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest";
  }
  protected:
  explicit GetTxDescriptorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetTxDescriptorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class GetTxDescriptorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse) */ {
 public:
  inline GetTxDescriptorResponse() : GetTxDescriptorResponse(nullptr) {}
  ~GetTxDescriptorResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTxDescriptorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTxDescriptorResponse(const GetTxDescriptorResponse& from);
  GetTxDescriptorResponse(GetTxDescriptorResponse&& from) noexcept
    : GetTxDescriptorResponse() {
    *this = ::std::move(from);
  }

  inline GetTxDescriptorResponse& operator=(const GetTxDescriptorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxDescriptorResponse& operator=(GetTxDescriptorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTxDescriptorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTxDescriptorResponse* internal_default_instance() {
    return reinterpret_cast<const GetTxDescriptorResponse*>(
               &_GetTxDescriptorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetTxDescriptorResponse& a, GetTxDescriptorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxDescriptorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxDescriptorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTxDescriptorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTxDescriptorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTxDescriptorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTxDescriptorResponse& from) {
    GetTxDescriptorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxDescriptorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse";
  }
  protected:
  explicit GetTxDescriptorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
  };
  // .cosmos.base.reflection.v2alpha1.TxDescriptor tx = 1 [json_name = "tx"];
  bool has_tx() const;
  void clear_tx() ;
  const ::cosmos::base::reflection::v2alpha1::TxDescriptor& tx() const;
  PROTOBUF_NODISCARD ::cosmos::base::reflection::v2alpha1::TxDescriptor* release_tx();
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* mutable_tx();
  void set_allocated_tx(::cosmos::base::reflection::v2alpha1::TxDescriptor* tx);
  private:
  const ::cosmos::base::reflection::v2alpha1::TxDescriptor& _internal_tx() const;
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::cosmos::base::reflection::v2alpha1::TxDescriptor* tx);
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* unsafe_arena_release_tx();
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::reflection::v2alpha1::TxDescriptor* tx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class QueryServicesDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.QueryServicesDescriptor) */ {
 public:
  inline QueryServicesDescriptor() : QueryServicesDescriptor(nullptr) {}
  ~QueryServicesDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryServicesDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryServicesDescriptor(const QueryServicesDescriptor& from);
  QueryServicesDescriptor(QueryServicesDescriptor&& from) noexcept
    : QueryServicesDescriptor() {
    *this = ::std::move(from);
  }

  inline QueryServicesDescriptor& operator=(const QueryServicesDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryServicesDescriptor& operator=(QueryServicesDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryServicesDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryServicesDescriptor* internal_default_instance() {
    return reinterpret_cast<const QueryServicesDescriptor*>(
               &_QueryServicesDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QueryServicesDescriptor& a, QueryServicesDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryServicesDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryServicesDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryServicesDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryServicesDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryServicesDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryServicesDescriptor& from) {
    QueryServicesDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryServicesDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.QueryServicesDescriptor";
  }
  protected:
  explicit QueryServicesDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryServicesFieldNumber = 1,
  };
  // repeated .cosmos.base.reflection.v2alpha1.QueryServiceDescriptor query_services = 1 [json_name = "queryServices"];
  int query_services_size() const;
  private:
  int _internal_query_services_size() const;

  public:
  void clear_query_services() ;
  ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor* mutable_query_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor >*
      mutable_query_services();
  private:
  const ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor& _internal_query_services(int index) const;
  ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor* _internal_add_query_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor>& _internal_query_services() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor>* _internal_mutable_query_services();
  public:
  const ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor& query_services(int index) const;
  ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor* add_query_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor >&
      query_services() const;
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.QueryServicesDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor > query_services_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class QueryServiceDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor) */ {
 public:
  inline QueryServiceDescriptor() : QueryServiceDescriptor(nullptr) {}
  ~QueryServiceDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryServiceDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryServiceDescriptor(const QueryServiceDescriptor& from);
  QueryServiceDescriptor(QueryServiceDescriptor&& from) noexcept
    : QueryServiceDescriptor() {
    *this = ::std::move(from);
  }

  inline QueryServiceDescriptor& operator=(const QueryServiceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryServiceDescriptor& operator=(QueryServiceDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryServiceDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryServiceDescriptor* internal_default_instance() {
    return reinterpret_cast<const QueryServiceDescriptor*>(
               &_QueryServiceDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(QueryServiceDescriptor& a, QueryServiceDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryServiceDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryServiceDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryServiceDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryServiceDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryServiceDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryServiceDescriptor& from) {
    QueryServiceDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryServiceDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.QueryServiceDescriptor";
  }
  protected:
  explicit QueryServiceDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodsFieldNumber = 3,
    kFullnameFieldNumber = 1,
    kIsModuleFieldNumber = 2,
  };
  // repeated .cosmos.base.reflection.v2alpha1.QueryMethodDescriptor methods = 3 [json_name = "methods"];
  int methods_size() const;
  private:
  int _internal_methods_size() const;

  public:
  void clear_methods() ;
  ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor* mutable_methods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor >*
      mutable_methods();
  private:
  const ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor& _internal_methods(int index) const;
  ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor* _internal_add_methods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor>& _internal_methods() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor>* _internal_mutable_methods();
  public:
  const ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor& methods(int index) const;
  ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor* add_methods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor >&
      methods() const;
  // string fullname = 1 [json_name = "fullname"];
  void clear_fullname() ;
  const std::string& fullname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fullname(Arg_&& arg, Args_... args);
  std::string* mutable_fullname();
  PROTOBUF_NODISCARD std::string* release_fullname();
  void set_allocated_fullname(std::string* ptr);

  private:
  const std::string& _internal_fullname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fullname(
      const std::string& value);
  std::string* _internal_mutable_fullname();

  public:
  // bool is_module = 2 [json_name = "isModule"];
  void clear_is_module() ;
  bool is_module() const;
  void set_is_module(bool value);

  private:
  bool _internal_is_module() const;
  void _internal_set_is_module(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor > methods_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
    bool is_module_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};// -------------------------------------------------------------------

class QueryMethodDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor) */ {
 public:
  inline QueryMethodDescriptor() : QueryMethodDescriptor(nullptr) {}
  ~QueryMethodDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryMethodDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryMethodDescriptor(const QueryMethodDescriptor& from);
  QueryMethodDescriptor(QueryMethodDescriptor&& from) noexcept
    : QueryMethodDescriptor() {
    *this = ::std::move(from);
  }

  inline QueryMethodDescriptor& operator=(const QueryMethodDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMethodDescriptor& operator=(QueryMethodDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryMethodDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryMethodDescriptor* internal_default_instance() {
    return reinterpret_cast<const QueryMethodDescriptor*>(
               &_QueryMethodDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(QueryMethodDescriptor& a, QueryMethodDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMethodDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMethodDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryMethodDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryMethodDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryMethodDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryMethodDescriptor& from) {
    QueryMethodDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMethodDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v2alpha1.QueryMethodDescriptor";
  }
  protected:
  explicit QueryMethodDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFullQueryPathFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string full_query_path = 2 [json_name = "fullQueryPath"];
  void clear_full_query_path() ;
  const std::string& full_query_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_full_query_path(Arg_&& arg, Args_... args);
  std::string* mutable_full_query_path();
  PROTOBUF_NODISCARD std::string* release_full_query_path();
  void set_allocated_full_query_path(std::string* ptr);

  private:
  const std::string& _internal_full_query_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_query_path(
      const std::string& value);
  std::string* _internal_mutable_full_query_path();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_query_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AppDescriptor

// .cosmos.base.reflection.v2alpha1.AuthnDescriptor authn = 1 [json_name = "authn"];
inline bool AppDescriptor::has_authn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authn_ != nullptr);
  return value;
}
inline void AppDescriptor::clear_authn() {
  if (_impl_.authn_ != nullptr) _impl_.authn_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor& AppDescriptor::_internal_authn() const {
  const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* p = _impl_.authn_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_AuthnDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor& AppDescriptor::authn() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.AppDescriptor.authn)
  return _internal_authn();
}
inline void AppDescriptor::unsafe_arena_set_allocated_authn(
    ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authn_);
  }
  _impl_.authn_ = authn;
  if (authn) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.authn)
}
inline ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* AppDescriptor::release_authn() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* temp = _impl_.authn_;
  _impl_.authn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* AppDescriptor::unsafe_arena_release_authn() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.AppDescriptor.authn)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* temp = _impl_.authn_;
  _impl_.authn_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* AppDescriptor::_internal_mutable_authn() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.authn_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::AuthnDescriptor>(GetArenaForAllocation());
    _impl_.authn_ = p;
  }
  return _impl_.authn_;
}
inline ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* AppDescriptor::mutable_authn() {
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* _msg = _internal_mutable_authn();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.AppDescriptor.authn)
  return _msg;
}
inline void AppDescriptor::set_allocated_authn(::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.authn_;
  }
  if (authn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(authn);
    if (message_arena != submessage_arena) {
      authn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authn, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authn_ = authn;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.authn)
}

// .cosmos.base.reflection.v2alpha1.ChainDescriptor chain = 2 [json_name = "chain"];
inline bool AppDescriptor::has_chain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chain_ != nullptr);
  return value;
}
inline void AppDescriptor::clear_chain() {
  if (_impl_.chain_ != nullptr) _impl_.chain_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::base::reflection::v2alpha1::ChainDescriptor& AppDescriptor::_internal_chain() const {
  const ::cosmos::base::reflection::v2alpha1::ChainDescriptor* p = _impl_.chain_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::ChainDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_ChainDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::ChainDescriptor& AppDescriptor::chain() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.AppDescriptor.chain)
  return _internal_chain();
}
inline void AppDescriptor::unsafe_arena_set_allocated_chain(
    ::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chain_);
  }
  _impl_.chain_ = chain;
  if (chain) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.chain)
}
inline ::cosmos::base::reflection::v2alpha1::ChainDescriptor* AppDescriptor::release_chain() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* temp = _impl_.chain_;
  _impl_.chain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::ChainDescriptor* AppDescriptor::unsafe_arena_release_chain() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.AppDescriptor.chain)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* temp = _impl_.chain_;
  _impl_.chain_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::ChainDescriptor* AppDescriptor::_internal_mutable_chain() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.chain_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::ChainDescriptor>(GetArenaForAllocation());
    _impl_.chain_ = p;
  }
  return _impl_.chain_;
}
inline ::cosmos::base::reflection::v2alpha1::ChainDescriptor* AppDescriptor::mutable_chain() {
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* _msg = _internal_mutable_chain();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.AppDescriptor.chain)
  return _msg;
}
inline void AppDescriptor::set_allocated_chain(::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chain_;
  }
  if (chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chain);
    if (message_arena != submessage_arena) {
      chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chain, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.chain_ = chain;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.chain)
}

// .cosmos.base.reflection.v2alpha1.CodecDescriptor codec = 3 [json_name = "codec"];
inline bool AppDescriptor::has_codec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.codec_ != nullptr);
  return value;
}
inline void AppDescriptor::clear_codec() {
  if (_impl_.codec_ != nullptr) _impl_.codec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::cosmos::base::reflection::v2alpha1::CodecDescriptor& AppDescriptor::_internal_codec() const {
  const ::cosmos::base::reflection::v2alpha1::CodecDescriptor* p = _impl_.codec_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::CodecDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_CodecDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::CodecDescriptor& AppDescriptor::codec() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.AppDescriptor.codec)
  return _internal_codec();
}
inline void AppDescriptor::unsafe_arena_set_allocated_codec(
    ::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.codec_);
  }
  _impl_.codec_ = codec;
  if (codec) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.codec)
}
inline ::cosmos::base::reflection::v2alpha1::CodecDescriptor* AppDescriptor::release_codec() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* temp = _impl_.codec_;
  _impl_.codec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::CodecDescriptor* AppDescriptor::unsafe_arena_release_codec() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.AppDescriptor.codec)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* temp = _impl_.codec_;
  _impl_.codec_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::CodecDescriptor* AppDescriptor::_internal_mutable_codec() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.codec_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::CodecDescriptor>(GetArenaForAllocation());
    _impl_.codec_ = p;
  }
  return _impl_.codec_;
}
inline ::cosmos::base::reflection::v2alpha1::CodecDescriptor* AppDescriptor::mutable_codec() {
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* _msg = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.AppDescriptor.codec)
  return _msg;
}
inline void AppDescriptor::set_allocated_codec(::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.codec_;
  }
  if (codec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(codec);
    if (message_arena != submessage_arena) {
      codec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, codec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.codec_ = codec;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.codec)
}

// .cosmos.base.reflection.v2alpha1.ConfigurationDescriptor configuration = 4 [json_name = "configuration"];
inline bool AppDescriptor::has_configuration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.configuration_ != nullptr);
  return value;
}
inline void AppDescriptor::clear_configuration() {
  if (_impl_.configuration_ != nullptr) _impl_.configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor& AppDescriptor::_internal_configuration() const {
  const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* p = _impl_.configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_ConfigurationDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor& AppDescriptor::configuration() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.AppDescriptor.configuration)
  return _internal_configuration();
}
inline void AppDescriptor::unsafe_arena_set_allocated_configuration(
    ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.configuration_);
  }
  _impl_.configuration_ = configuration;
  if (configuration) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.configuration)
}
inline ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* AppDescriptor::release_configuration() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* temp = _impl_.configuration_;
  _impl_.configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* AppDescriptor::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.AppDescriptor.configuration)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* temp = _impl_.configuration_;
  _impl_.configuration_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* AppDescriptor::_internal_mutable_configuration() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor>(GetArenaForAllocation());
    _impl_.configuration_ = p;
  }
  return _impl_.configuration_;
}
inline ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* AppDescriptor::mutable_configuration() {
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* _msg = _internal_mutable_configuration();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.AppDescriptor.configuration)
  return _msg;
}
inline void AppDescriptor::set_allocated_configuration(::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.configuration_;
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(configuration);
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.configuration)
}

// .cosmos.base.reflection.v2alpha1.QueryServicesDescriptor query_services = 5 [json_name = "queryServices"];
inline bool AppDescriptor::has_query_services() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.query_services_ != nullptr);
  return value;
}
inline void AppDescriptor::clear_query_services() {
  if (_impl_.query_services_ != nullptr) _impl_.query_services_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor& AppDescriptor::_internal_query_services() const {
  const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* p = _impl_.query_services_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_QueryServicesDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor& AppDescriptor::query_services() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.AppDescriptor.query_services)
  return _internal_query_services();
}
inline void AppDescriptor::unsafe_arena_set_allocated_query_services(
    ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* query_services) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.query_services_);
  }
  _impl_.query_services_ = query_services;
  if (query_services) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.query_services)
}
inline ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* AppDescriptor::release_query_services() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* temp = _impl_.query_services_;
  _impl_.query_services_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* AppDescriptor::unsafe_arena_release_query_services() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.AppDescriptor.query_services)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* temp = _impl_.query_services_;
  _impl_.query_services_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* AppDescriptor::_internal_mutable_query_services() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.query_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor>(GetArenaForAllocation());
    _impl_.query_services_ = p;
  }
  return _impl_.query_services_;
}
inline ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* AppDescriptor::mutable_query_services() {
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* _msg = _internal_mutable_query_services();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.AppDescriptor.query_services)
  return _msg;
}
inline void AppDescriptor::set_allocated_query_services(::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* query_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.query_services_;
  }
  if (query_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query_services);
    if (message_arena != submessage_arena) {
      query_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_services, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.query_services_ = query_services;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.query_services)
}

// .cosmos.base.reflection.v2alpha1.TxDescriptor tx = 6 [json_name = "tx"];
inline bool AppDescriptor::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline void AppDescriptor::clear_tx() {
  if (_impl_.tx_ != nullptr) _impl_.tx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::cosmos::base::reflection::v2alpha1::TxDescriptor& AppDescriptor::_internal_tx() const {
  const ::cosmos::base::reflection::v2alpha1::TxDescriptor* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::TxDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_TxDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::TxDescriptor& AppDescriptor::tx() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.AppDescriptor.tx)
  return _internal_tx();
}
inline void AppDescriptor::unsafe_arena_set_allocated_tx(
    ::cosmos::base::reflection::v2alpha1::TxDescriptor* tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = tx;
  if (tx) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.tx)
}
inline ::cosmos::base::reflection::v2alpha1::TxDescriptor* AppDescriptor::release_tx() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::TxDescriptor* AppDescriptor::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.AppDescriptor.tx)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::TxDescriptor* AppDescriptor::_internal_mutable_tx() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::TxDescriptor>(GetArenaForAllocation());
    _impl_.tx_ = p;
  }
  return _impl_.tx_;
}
inline ::cosmos::base::reflection::v2alpha1::TxDescriptor* AppDescriptor::mutable_tx() {
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.AppDescriptor.tx)
  return _msg;
}
inline void AppDescriptor::set_allocated_tx(::cosmos::base::reflection::v2alpha1::TxDescriptor* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tx_;
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tx);
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.AppDescriptor.tx)
}

// -------------------------------------------------------------------

// TxDescriptor

// string fullname = 1 [json_name = "fullname"];
inline void TxDescriptor::clear_fullname() {
  _impl_.fullname_.ClearToEmpty();
}
inline const std::string& TxDescriptor::fullname() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.TxDescriptor.fullname)
  return _internal_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxDescriptor::set_fullname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.TxDescriptor.fullname)
}
inline std::string* TxDescriptor::mutable_fullname() {
  std::string* _s = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.TxDescriptor.fullname)
  return _s;
}
inline const std::string& TxDescriptor::_internal_fullname() const {
  return _impl_.fullname_.Get();
}
inline void TxDescriptor::_internal_set_fullname(const std::string& value) {
  ;


  _impl_.fullname_.Set(value, GetArenaForAllocation());
}
inline std::string* TxDescriptor::_internal_mutable_fullname() {
  ;
  return _impl_.fullname_.Mutable( GetArenaForAllocation());
}
inline std::string* TxDescriptor::release_fullname() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.TxDescriptor.fullname)
  return _impl_.fullname_.Release();
}
inline void TxDescriptor::set_allocated_fullname(std::string* value) {
  _impl_.fullname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fullname_.IsDefault()) {
          _impl_.fullname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.TxDescriptor.fullname)
}

// repeated .cosmos.base.reflection.v2alpha1.MsgDescriptor msgs = 2 [json_name = "msgs"];
inline int TxDescriptor::_internal_msgs_size() const {
  return _impl_.msgs_.size();
}
inline int TxDescriptor::msgs_size() const {
  return _internal_msgs_size();
}
inline void TxDescriptor::clear_msgs() {
  _internal_mutable_msgs()->Clear();
}
inline ::cosmos::base::reflection::v2alpha1::MsgDescriptor* TxDescriptor::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.TxDescriptor.msgs)
  return _internal_mutable_msgs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::MsgDescriptor >*
TxDescriptor::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v2alpha1.TxDescriptor.msgs)
  return _internal_mutable_msgs();
}
inline const ::cosmos::base::reflection::v2alpha1::MsgDescriptor& TxDescriptor::_internal_msgs(int index) const {
  return _internal_msgs().Get(index);
}
inline const ::cosmos::base::reflection::v2alpha1::MsgDescriptor& TxDescriptor::msgs(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.TxDescriptor.msgs)
  return _internal_msgs(index);
}
inline ::cosmos::base::reflection::v2alpha1::MsgDescriptor* TxDescriptor::_internal_add_msgs() {
  return _internal_mutable_msgs()->Add();
}
inline ::cosmos::base::reflection::v2alpha1::MsgDescriptor* TxDescriptor::add_msgs() {
  ::cosmos::base::reflection::v2alpha1::MsgDescriptor* _add = _internal_add_msgs();
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.TxDescriptor.msgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::MsgDescriptor >&
TxDescriptor::msgs() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v2alpha1.TxDescriptor.msgs)
  return _internal_msgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::MsgDescriptor>&
TxDescriptor::_internal_msgs() const {
  return _impl_.msgs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::MsgDescriptor>*
TxDescriptor::_internal_mutable_msgs() {
  return &_impl_.msgs_;
}

// -------------------------------------------------------------------

// AuthnDescriptor

// repeated .cosmos.base.reflection.v2alpha1.SigningModeDescriptor sign_modes = 1 [json_name = "signModes"];
inline int AuthnDescriptor::_internal_sign_modes_size() const {
  return _impl_.sign_modes_.size();
}
inline int AuthnDescriptor::sign_modes_size() const {
  return _internal_sign_modes_size();
}
inline void AuthnDescriptor::clear_sign_modes() {
  _internal_mutable_sign_modes()->Clear();
}
inline ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor* AuthnDescriptor::mutable_sign_modes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.AuthnDescriptor.sign_modes)
  return _internal_mutable_sign_modes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor >*
AuthnDescriptor::mutable_sign_modes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v2alpha1.AuthnDescriptor.sign_modes)
  return _internal_mutable_sign_modes();
}
inline const ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor& AuthnDescriptor::_internal_sign_modes(int index) const {
  return _internal_sign_modes().Get(index);
}
inline const ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor& AuthnDescriptor::sign_modes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.AuthnDescriptor.sign_modes)
  return _internal_sign_modes(index);
}
inline ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor* AuthnDescriptor::_internal_add_sign_modes() {
  return _internal_mutable_sign_modes()->Add();
}
inline ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor* AuthnDescriptor::add_sign_modes() {
  ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor* _add = _internal_add_sign_modes();
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.AuthnDescriptor.sign_modes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::SigningModeDescriptor >&
AuthnDescriptor::sign_modes() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v2alpha1.AuthnDescriptor.sign_modes)
  return _internal_sign_modes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::SigningModeDescriptor>&
AuthnDescriptor::_internal_sign_modes() const {
  return _impl_.sign_modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::SigningModeDescriptor>*
AuthnDescriptor::_internal_mutable_sign_modes() {
  return &_impl_.sign_modes_;
}

// -------------------------------------------------------------------

// SigningModeDescriptor

// string name = 1 [json_name = "name"];
inline void SigningModeDescriptor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SigningModeDescriptor::name() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SigningModeDescriptor::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.name)
}
inline std::string* SigningModeDescriptor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.name)
  return _s;
}
inline const std::string& SigningModeDescriptor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SigningModeDescriptor::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SigningModeDescriptor::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* SigningModeDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.name)
  return _impl_.name_.Release();
}
inline void SigningModeDescriptor::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.name)
}

// int32 number = 2 [json_name = "number"];
inline void SigningModeDescriptor::clear_number() {
  _impl_.number_ = 0;
}
inline ::int32_t SigningModeDescriptor::number() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.number)
  return _internal_number();
}
inline void SigningModeDescriptor::set_number(::int32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.number)
}
inline ::int32_t SigningModeDescriptor::_internal_number() const {
  return _impl_.number_;
}
inline void SigningModeDescriptor::_internal_set_number(::int32_t value) {
  ;
  _impl_.number_ = value;
}

// string authn_info_provider_method_fullname = 3 [json_name = "authnInfoProviderMethodFullname"];
inline void SigningModeDescriptor::clear_authn_info_provider_method_fullname() {
  _impl_.authn_info_provider_method_fullname_.ClearToEmpty();
}
inline const std::string& SigningModeDescriptor::authn_info_provider_method_fullname() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.authn_info_provider_method_fullname)
  return _internal_authn_info_provider_method_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SigningModeDescriptor::set_authn_info_provider_method_fullname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authn_info_provider_method_fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.authn_info_provider_method_fullname)
}
inline std::string* SigningModeDescriptor::mutable_authn_info_provider_method_fullname() {
  std::string* _s = _internal_mutable_authn_info_provider_method_fullname();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.authn_info_provider_method_fullname)
  return _s;
}
inline const std::string& SigningModeDescriptor::_internal_authn_info_provider_method_fullname() const {
  return _impl_.authn_info_provider_method_fullname_.Get();
}
inline void SigningModeDescriptor::_internal_set_authn_info_provider_method_fullname(const std::string& value) {
  ;


  _impl_.authn_info_provider_method_fullname_.Set(value, GetArenaForAllocation());
}
inline std::string* SigningModeDescriptor::_internal_mutable_authn_info_provider_method_fullname() {
  ;
  return _impl_.authn_info_provider_method_fullname_.Mutable( GetArenaForAllocation());
}
inline std::string* SigningModeDescriptor::release_authn_info_provider_method_fullname() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.authn_info_provider_method_fullname)
  return _impl_.authn_info_provider_method_fullname_.Release();
}
inline void SigningModeDescriptor::set_allocated_authn_info_provider_method_fullname(std::string* value) {
  _impl_.authn_info_provider_method_fullname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authn_info_provider_method_fullname_.IsDefault()) {
          _impl_.authn_info_provider_method_fullname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.SigningModeDescriptor.authn_info_provider_method_fullname)
}

// -------------------------------------------------------------------

// ChainDescriptor

// string id = 1 [json_name = "id"];
inline void ChainDescriptor::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ChainDescriptor::id() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.ChainDescriptor.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChainDescriptor::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.ChainDescriptor.id)
}
inline std::string* ChainDescriptor::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.ChainDescriptor.id)
  return _s;
}
inline const std::string& ChainDescriptor::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ChainDescriptor::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChainDescriptor::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* ChainDescriptor::release_id() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.ChainDescriptor.id)
  return _impl_.id_.Release();
}
inline void ChainDescriptor::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.ChainDescriptor.id)
}

// -------------------------------------------------------------------

// CodecDescriptor

// repeated .cosmos.base.reflection.v2alpha1.InterfaceDescriptor interfaces = 1 [json_name = "interfaces"];
inline int CodecDescriptor::_internal_interfaces_size() const {
  return _impl_.interfaces_.size();
}
inline int CodecDescriptor::interfaces_size() const {
  return _internal_interfaces_size();
}
inline void CodecDescriptor::clear_interfaces() {
  _internal_mutable_interfaces()->Clear();
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor* CodecDescriptor::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.CodecDescriptor.interfaces)
  return _internal_mutable_interfaces()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor >*
CodecDescriptor::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v2alpha1.CodecDescriptor.interfaces)
  return _internal_mutable_interfaces();
}
inline const ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor& CodecDescriptor::_internal_interfaces(int index) const {
  return _internal_interfaces().Get(index);
}
inline const ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor& CodecDescriptor::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.CodecDescriptor.interfaces)
  return _internal_interfaces(index);
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor* CodecDescriptor::_internal_add_interfaces() {
  return _internal_mutable_interfaces()->Add();
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor* CodecDescriptor::add_interfaces() {
  ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor* _add = _internal_add_interfaces();
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.CodecDescriptor.interfaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceDescriptor >&
CodecDescriptor::interfaces() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v2alpha1.CodecDescriptor.interfaces)
  return _internal_interfaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceDescriptor>&
CodecDescriptor::_internal_interfaces() const {
  return _impl_.interfaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceDescriptor>*
CodecDescriptor::_internal_mutable_interfaces() {
  return &_impl_.interfaces_;
}

// -------------------------------------------------------------------

// InterfaceDescriptor

// string fullname = 1 [json_name = "fullname"];
inline void InterfaceDescriptor::clear_fullname() {
  _impl_.fullname_.ClearToEmpty();
}
inline const std::string& InterfaceDescriptor::fullname() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.fullname)
  return _internal_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterfaceDescriptor::set_fullname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.fullname)
}
inline std::string* InterfaceDescriptor::mutable_fullname() {
  std::string* _s = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.fullname)
  return _s;
}
inline const std::string& InterfaceDescriptor::_internal_fullname() const {
  return _impl_.fullname_.Get();
}
inline void InterfaceDescriptor::_internal_set_fullname(const std::string& value) {
  ;


  _impl_.fullname_.Set(value, GetArenaForAllocation());
}
inline std::string* InterfaceDescriptor::_internal_mutable_fullname() {
  ;
  return _impl_.fullname_.Mutable( GetArenaForAllocation());
}
inline std::string* InterfaceDescriptor::release_fullname() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.fullname)
  return _impl_.fullname_.Release();
}
inline void InterfaceDescriptor::set_allocated_fullname(std::string* value) {
  _impl_.fullname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fullname_.IsDefault()) {
          _impl_.fullname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.fullname)
}

// repeated .cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor interface_accepting_messages = 2 [json_name = "interfaceAcceptingMessages"];
inline int InterfaceDescriptor::_internal_interface_accepting_messages_size() const {
  return _impl_.interface_accepting_messages_.size();
}
inline int InterfaceDescriptor::interface_accepting_messages_size() const {
  return _internal_interface_accepting_messages_size();
}
inline void InterfaceDescriptor::clear_interface_accepting_messages() {
  _internal_mutable_interface_accepting_messages()->Clear();
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor* InterfaceDescriptor::mutable_interface_accepting_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_accepting_messages)
  return _internal_mutable_interface_accepting_messages()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor >*
InterfaceDescriptor::mutable_interface_accepting_messages() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_accepting_messages)
  return _internal_mutable_interface_accepting_messages();
}
inline const ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor& InterfaceDescriptor::_internal_interface_accepting_messages(int index) const {
  return _internal_interface_accepting_messages().Get(index);
}
inline const ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor& InterfaceDescriptor::interface_accepting_messages(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_accepting_messages)
  return _internal_interface_accepting_messages(index);
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor* InterfaceDescriptor::_internal_add_interface_accepting_messages() {
  return _internal_mutable_interface_accepting_messages()->Add();
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor* InterfaceDescriptor::add_interface_accepting_messages() {
  ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor* _add = _internal_add_interface_accepting_messages();
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_accepting_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor >&
InterfaceDescriptor::interface_accepting_messages() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_accepting_messages)
  return _internal_interface_accepting_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor>&
InterfaceDescriptor::_internal_interface_accepting_messages() const {
  return _impl_.interface_accepting_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceAcceptingMessageDescriptor>*
InterfaceDescriptor::_internal_mutable_interface_accepting_messages() {
  return &_impl_.interface_accepting_messages_;
}

// repeated .cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor interface_implementers = 3 [json_name = "interfaceImplementers"];
inline int InterfaceDescriptor::_internal_interface_implementers_size() const {
  return _impl_.interface_implementers_.size();
}
inline int InterfaceDescriptor::interface_implementers_size() const {
  return _internal_interface_implementers_size();
}
inline void InterfaceDescriptor::clear_interface_implementers() {
  _internal_mutable_interface_implementers()->Clear();
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor* InterfaceDescriptor::mutable_interface_implementers(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_implementers)
  return _internal_mutable_interface_implementers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor >*
InterfaceDescriptor::mutable_interface_implementers() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_implementers)
  return _internal_mutable_interface_implementers();
}
inline const ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor& InterfaceDescriptor::_internal_interface_implementers(int index) const {
  return _internal_interface_implementers().Get(index);
}
inline const ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor& InterfaceDescriptor::interface_implementers(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_implementers)
  return _internal_interface_implementers(index);
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor* InterfaceDescriptor::_internal_add_interface_implementers() {
  return _internal_mutable_interface_implementers()->Add();
}
inline ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor* InterfaceDescriptor::add_interface_implementers() {
  ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor* _add = _internal_add_interface_implementers();
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_implementers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor >&
InterfaceDescriptor::interface_implementers() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v2alpha1.InterfaceDescriptor.interface_implementers)
  return _internal_interface_implementers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor>&
InterfaceDescriptor::_internal_interface_implementers() const {
  return _impl_.interface_implementers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::InterfaceImplementerDescriptor>*
InterfaceDescriptor::_internal_mutable_interface_implementers() {
  return &_impl_.interface_implementers_;
}

// -------------------------------------------------------------------

// InterfaceImplementerDescriptor

// string fullname = 1 [json_name = "fullname"];
inline void InterfaceImplementerDescriptor::clear_fullname() {
  _impl_.fullname_.ClearToEmpty();
}
inline const std::string& InterfaceImplementerDescriptor::fullname() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.fullname)
  return _internal_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterfaceImplementerDescriptor::set_fullname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.fullname)
}
inline std::string* InterfaceImplementerDescriptor::mutable_fullname() {
  std::string* _s = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.fullname)
  return _s;
}
inline const std::string& InterfaceImplementerDescriptor::_internal_fullname() const {
  return _impl_.fullname_.Get();
}
inline void InterfaceImplementerDescriptor::_internal_set_fullname(const std::string& value) {
  ;


  _impl_.fullname_.Set(value, GetArenaForAllocation());
}
inline std::string* InterfaceImplementerDescriptor::_internal_mutable_fullname() {
  ;
  return _impl_.fullname_.Mutable( GetArenaForAllocation());
}
inline std::string* InterfaceImplementerDescriptor::release_fullname() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.fullname)
  return _impl_.fullname_.Release();
}
inline void InterfaceImplementerDescriptor::set_allocated_fullname(std::string* value) {
  _impl_.fullname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fullname_.IsDefault()) {
          _impl_.fullname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.fullname)
}

// string type_url = 2 [json_name = "typeUrl"];
inline void InterfaceImplementerDescriptor::clear_type_url() {
  _impl_.type_url_.ClearToEmpty();
}
inline const std::string& InterfaceImplementerDescriptor::type_url() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.type_url)
  return _internal_type_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterfaceImplementerDescriptor::set_type_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.type_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.type_url)
}
inline std::string* InterfaceImplementerDescriptor::mutable_type_url() {
  std::string* _s = _internal_mutable_type_url();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.type_url)
  return _s;
}
inline const std::string& InterfaceImplementerDescriptor::_internal_type_url() const {
  return _impl_.type_url_.Get();
}
inline void InterfaceImplementerDescriptor::_internal_set_type_url(const std::string& value) {
  ;


  _impl_.type_url_.Set(value, GetArenaForAllocation());
}
inline std::string* InterfaceImplementerDescriptor::_internal_mutable_type_url() {
  ;
  return _impl_.type_url_.Mutable( GetArenaForAllocation());
}
inline std::string* InterfaceImplementerDescriptor::release_type_url() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.type_url)
  return _impl_.type_url_.Release();
}
inline void InterfaceImplementerDescriptor::set_allocated_type_url(std::string* value) {
  _impl_.type_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_url_.IsDefault()) {
          _impl_.type_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.InterfaceImplementerDescriptor.type_url)
}

// -------------------------------------------------------------------

// InterfaceAcceptingMessageDescriptor

// string fullname = 1 [json_name = "fullname"];
inline void InterfaceAcceptingMessageDescriptor::clear_fullname() {
  _impl_.fullname_.ClearToEmpty();
}
inline const std::string& InterfaceAcceptingMessageDescriptor::fullname() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.fullname)
  return _internal_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterfaceAcceptingMessageDescriptor::set_fullname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.fullname)
}
inline std::string* InterfaceAcceptingMessageDescriptor::mutable_fullname() {
  std::string* _s = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.fullname)
  return _s;
}
inline const std::string& InterfaceAcceptingMessageDescriptor::_internal_fullname() const {
  return _impl_.fullname_.Get();
}
inline void InterfaceAcceptingMessageDescriptor::_internal_set_fullname(const std::string& value) {
  ;


  _impl_.fullname_.Set(value, GetArenaForAllocation());
}
inline std::string* InterfaceAcceptingMessageDescriptor::_internal_mutable_fullname() {
  ;
  return _impl_.fullname_.Mutable( GetArenaForAllocation());
}
inline std::string* InterfaceAcceptingMessageDescriptor::release_fullname() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.fullname)
  return _impl_.fullname_.Release();
}
inline void InterfaceAcceptingMessageDescriptor::set_allocated_fullname(std::string* value) {
  _impl_.fullname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fullname_.IsDefault()) {
          _impl_.fullname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.fullname)
}

// repeated string field_descriptor_names = 2 [json_name = "fieldDescriptorNames"];
inline int InterfaceAcceptingMessageDescriptor::_internal_field_descriptor_names_size() const {
  return _impl_.field_descriptor_names_.size();
}
inline int InterfaceAcceptingMessageDescriptor::field_descriptor_names_size() const {
  return _internal_field_descriptor_names_size();
}
inline void InterfaceAcceptingMessageDescriptor::clear_field_descriptor_names() {
  _internal_mutable_field_descriptor_names()->Clear();
}
inline std::string* InterfaceAcceptingMessageDescriptor::add_field_descriptor_names() {
  std::string* _s = _internal_add_field_descriptor_names();
  // @@protoc_insertion_point(field_add_mutable:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
  return _s;
}
inline const std::string& InterfaceAcceptingMessageDescriptor::field_descriptor_names(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
  return _internal_field_descriptor_names(index);
}
inline std::string* InterfaceAcceptingMessageDescriptor::mutable_field_descriptor_names(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
  return _internal_mutable_field_descriptor_names()->Mutable(index);
}
inline void InterfaceAcceptingMessageDescriptor::set_field_descriptor_names(int index, const std::string& value) {
  _internal_mutable_field_descriptor_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::set_field_descriptor_names(int index, std::string&& value) {
  _internal_mutable_field_descriptor_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::set_field_descriptor_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_field_descriptor_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::set_field_descriptor_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_field_descriptor_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::set_field_descriptor_names(int index, absl::string_view value) {
  _internal_mutable_field_descriptor_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::add_field_descriptor_names(const std::string& value) {
  _internal_mutable_field_descriptor_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::add_field_descriptor_names(std::string&& value) {
  _internal_mutable_field_descriptor_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::add_field_descriptor_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_field_descriptor_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::add_field_descriptor_names(const char* value, std::size_t size) {
  _internal_mutable_field_descriptor_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline void InterfaceAcceptingMessageDescriptor::add_field_descriptor_names(absl::string_view value) {
  _internal_mutable_field_descriptor_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InterfaceAcceptingMessageDescriptor::field_descriptor_names() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
  return _internal_field_descriptor_names();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* InterfaceAcceptingMessageDescriptor::mutable_field_descriptor_names() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v2alpha1.InterfaceAcceptingMessageDescriptor.field_descriptor_names)
  return _internal_mutable_field_descriptor_names();
}
inline const std::string& InterfaceAcceptingMessageDescriptor::_internal_field_descriptor_names(int index) const {
  return _internal_field_descriptor_names().Get(index);
}
inline std::string* InterfaceAcceptingMessageDescriptor::_internal_add_field_descriptor_names() {
  return _internal_mutable_field_descriptor_names()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InterfaceAcceptingMessageDescriptor::_internal_field_descriptor_names() const {
  return _impl_.field_descriptor_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InterfaceAcceptingMessageDescriptor::_internal_mutable_field_descriptor_names() {
  return &_impl_.field_descriptor_names_;
}

// -------------------------------------------------------------------

// ConfigurationDescriptor

// string bech32_account_address_prefix = 1 [json_name = "bech32AccountAddressPrefix"];
inline void ConfigurationDescriptor::clear_bech32_account_address_prefix() {
  _impl_.bech32_account_address_prefix_.ClearToEmpty();
}
inline const std::string& ConfigurationDescriptor::bech32_account_address_prefix() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.bech32_account_address_prefix)
  return _internal_bech32_account_address_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConfigurationDescriptor::set_bech32_account_address_prefix(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bech32_account_address_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.bech32_account_address_prefix)
}
inline std::string* ConfigurationDescriptor::mutable_bech32_account_address_prefix() {
  std::string* _s = _internal_mutable_bech32_account_address_prefix();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.bech32_account_address_prefix)
  return _s;
}
inline const std::string& ConfigurationDescriptor::_internal_bech32_account_address_prefix() const {
  return _impl_.bech32_account_address_prefix_.Get();
}
inline void ConfigurationDescriptor::_internal_set_bech32_account_address_prefix(const std::string& value) {
  ;


  _impl_.bech32_account_address_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigurationDescriptor::_internal_mutable_bech32_account_address_prefix() {
  ;
  return _impl_.bech32_account_address_prefix_.Mutable( GetArenaForAllocation());
}
inline std::string* ConfigurationDescriptor::release_bech32_account_address_prefix() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.bech32_account_address_prefix)
  return _impl_.bech32_account_address_prefix_.Release();
}
inline void ConfigurationDescriptor::set_allocated_bech32_account_address_prefix(std::string* value) {
  _impl_.bech32_account_address_prefix_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bech32_account_address_prefix_.IsDefault()) {
          _impl_.bech32_account_address_prefix_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.ConfigurationDescriptor.bech32_account_address_prefix)
}

// -------------------------------------------------------------------

// MsgDescriptor

// string msg_type_url = 1 [json_name = "msgTypeUrl"];
inline void MsgDescriptor::clear_msg_type_url() {
  _impl_.msg_type_url_.ClearToEmpty();
}
inline const std::string& MsgDescriptor::msg_type_url() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.MsgDescriptor.msg_type_url)
  return _internal_msg_type_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDescriptor::set_msg_type_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.msg_type_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.MsgDescriptor.msg_type_url)
}
inline std::string* MsgDescriptor::mutable_msg_type_url() {
  std::string* _s = _internal_mutable_msg_type_url();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.MsgDescriptor.msg_type_url)
  return _s;
}
inline const std::string& MsgDescriptor::_internal_msg_type_url() const {
  return _impl_.msg_type_url_.Get();
}
inline void MsgDescriptor::_internal_set_msg_type_url(const std::string& value) {
  ;


  _impl_.msg_type_url_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDescriptor::_internal_mutable_msg_type_url() {
  ;
  return _impl_.msg_type_url_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDescriptor::release_msg_type_url() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.MsgDescriptor.msg_type_url)
  return _impl_.msg_type_url_.Release();
}
inline void MsgDescriptor::set_allocated_msg_type_url(std::string* value) {
  _impl_.msg_type_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_type_url_.IsDefault()) {
          _impl_.msg_type_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.MsgDescriptor.msg_type_url)
}

// -------------------------------------------------------------------

// GetAuthnDescriptorRequest

// -------------------------------------------------------------------

// GetAuthnDescriptorResponse

// .cosmos.base.reflection.v2alpha1.AuthnDescriptor authn = 1 [json_name = "authn"];
inline bool GetAuthnDescriptorResponse::has_authn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authn_ != nullptr);
  return value;
}
inline void GetAuthnDescriptorResponse::clear_authn() {
  if (_impl_.authn_ != nullptr) _impl_.authn_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor& GetAuthnDescriptorResponse::_internal_authn() const {
  const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* p = _impl_.authn_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_AuthnDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::AuthnDescriptor& GetAuthnDescriptorResponse::authn() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.authn)
  return _internal_authn();
}
inline void GetAuthnDescriptorResponse::unsafe_arena_set_allocated_authn(
    ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authn_);
  }
  _impl_.authn_ = authn;
  if (authn) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.authn)
}
inline ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* GetAuthnDescriptorResponse::release_authn() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* temp = _impl_.authn_;
  _impl_.authn_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* GetAuthnDescriptorResponse::unsafe_arena_release_authn() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.authn)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* temp = _impl_.authn_;
  _impl_.authn_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* GetAuthnDescriptorResponse::_internal_mutable_authn() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.authn_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::AuthnDescriptor>(GetArenaForAllocation());
    _impl_.authn_ = p;
  }
  return _impl_.authn_;
}
inline ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* GetAuthnDescriptorResponse::mutable_authn() {
  ::cosmos::base::reflection::v2alpha1::AuthnDescriptor* _msg = _internal_mutable_authn();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.authn)
  return _msg;
}
inline void GetAuthnDescriptorResponse::set_allocated_authn(::cosmos::base::reflection::v2alpha1::AuthnDescriptor* authn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.authn_;
  }
  if (authn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(authn);
    if (message_arena != submessage_arena) {
      authn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authn, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authn_ = authn;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.GetAuthnDescriptorResponse.authn)
}

// -------------------------------------------------------------------

// GetChainDescriptorRequest

// -------------------------------------------------------------------

// GetChainDescriptorResponse

// .cosmos.base.reflection.v2alpha1.ChainDescriptor chain = 1 [json_name = "chain"];
inline bool GetChainDescriptorResponse::has_chain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chain_ != nullptr);
  return value;
}
inline void GetChainDescriptorResponse::clear_chain() {
  if (_impl_.chain_ != nullptr) _impl_.chain_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::reflection::v2alpha1::ChainDescriptor& GetChainDescriptorResponse::_internal_chain() const {
  const ::cosmos::base::reflection::v2alpha1::ChainDescriptor* p = _impl_.chain_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::ChainDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_ChainDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::ChainDescriptor& GetChainDescriptorResponse::chain() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.chain)
  return _internal_chain();
}
inline void GetChainDescriptorResponse::unsafe_arena_set_allocated_chain(
    ::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chain_);
  }
  _impl_.chain_ = chain;
  if (chain) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.chain)
}
inline ::cosmos::base::reflection::v2alpha1::ChainDescriptor* GetChainDescriptorResponse::release_chain() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* temp = _impl_.chain_;
  _impl_.chain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::ChainDescriptor* GetChainDescriptorResponse::unsafe_arena_release_chain() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.chain)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* temp = _impl_.chain_;
  _impl_.chain_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::ChainDescriptor* GetChainDescriptorResponse::_internal_mutable_chain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chain_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::ChainDescriptor>(GetArenaForAllocation());
    _impl_.chain_ = p;
  }
  return _impl_.chain_;
}
inline ::cosmos::base::reflection::v2alpha1::ChainDescriptor* GetChainDescriptorResponse::mutable_chain() {
  ::cosmos::base::reflection::v2alpha1::ChainDescriptor* _msg = _internal_mutable_chain();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.chain)
  return _msg;
}
inline void GetChainDescriptorResponse::set_allocated_chain(::cosmos::base::reflection::v2alpha1::ChainDescriptor* chain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chain_;
  }
  if (chain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chain);
    if (message_arena != submessage_arena) {
      chain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chain, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chain_ = chain;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.GetChainDescriptorResponse.chain)
}

// -------------------------------------------------------------------

// GetCodecDescriptorRequest

// -------------------------------------------------------------------

// GetCodecDescriptorResponse

// .cosmos.base.reflection.v2alpha1.CodecDescriptor codec = 1 [json_name = "codec"];
inline bool GetCodecDescriptorResponse::has_codec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.codec_ != nullptr);
  return value;
}
inline void GetCodecDescriptorResponse::clear_codec() {
  if (_impl_.codec_ != nullptr) _impl_.codec_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::reflection::v2alpha1::CodecDescriptor& GetCodecDescriptorResponse::_internal_codec() const {
  const ::cosmos::base::reflection::v2alpha1::CodecDescriptor* p = _impl_.codec_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::CodecDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_CodecDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::CodecDescriptor& GetCodecDescriptorResponse::codec() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.codec)
  return _internal_codec();
}
inline void GetCodecDescriptorResponse::unsafe_arena_set_allocated_codec(
    ::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.codec_);
  }
  _impl_.codec_ = codec;
  if (codec) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.codec)
}
inline ::cosmos::base::reflection::v2alpha1::CodecDescriptor* GetCodecDescriptorResponse::release_codec() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* temp = _impl_.codec_;
  _impl_.codec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::CodecDescriptor* GetCodecDescriptorResponse::unsafe_arena_release_codec() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.codec)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* temp = _impl_.codec_;
  _impl_.codec_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::CodecDescriptor* GetCodecDescriptorResponse::_internal_mutable_codec() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.codec_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::CodecDescriptor>(GetArenaForAllocation());
    _impl_.codec_ = p;
  }
  return _impl_.codec_;
}
inline ::cosmos::base::reflection::v2alpha1::CodecDescriptor* GetCodecDescriptorResponse::mutable_codec() {
  ::cosmos::base::reflection::v2alpha1::CodecDescriptor* _msg = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.codec)
  return _msg;
}
inline void GetCodecDescriptorResponse::set_allocated_codec(::cosmos::base::reflection::v2alpha1::CodecDescriptor* codec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.codec_;
  }
  if (codec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(codec);
    if (message_arena != submessage_arena) {
      codec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, codec, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.codec_ = codec;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.GetCodecDescriptorResponse.codec)
}

// -------------------------------------------------------------------

// GetConfigurationDescriptorRequest

// -------------------------------------------------------------------

// GetConfigurationDescriptorResponse

// .cosmos.base.reflection.v2alpha1.ConfigurationDescriptor config = 1 [json_name = "config"];
inline bool GetConfigurationDescriptorResponse::has_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.config_ != nullptr);
  return value;
}
inline void GetConfigurationDescriptorResponse::clear_config() {
  if (_impl_.config_ != nullptr) _impl_.config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor& GetConfigurationDescriptorResponse::_internal_config() const {
  const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_ConfigurationDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor& GetConfigurationDescriptorResponse::config() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.config)
  return _internal_config();
}
inline void GetConfigurationDescriptorResponse::unsafe_arena_set_allocated_config(
    ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.config)
}
inline ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* GetConfigurationDescriptorResponse::release_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* GetConfigurationDescriptorResponse::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* GetConfigurationDescriptorResponse::_internal_mutable_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* GetConfigurationDescriptorResponse::mutable_config() {
  ::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.config)
  return _msg;
}
inline void GetConfigurationDescriptorResponse::set_allocated_config(::cosmos::base::reflection::v2alpha1::ConfigurationDescriptor* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.GetConfigurationDescriptorResponse.config)
}

// -------------------------------------------------------------------

// GetQueryServicesDescriptorRequest

// -------------------------------------------------------------------

// GetQueryServicesDescriptorResponse

// .cosmos.base.reflection.v2alpha1.QueryServicesDescriptor queries = 1 [json_name = "queries"];
inline bool GetQueryServicesDescriptorResponse::has_queries() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.queries_ != nullptr);
  return value;
}
inline void GetQueryServicesDescriptorResponse::clear_queries() {
  if (_impl_.queries_ != nullptr) _impl_.queries_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor& GetQueryServicesDescriptorResponse::_internal_queries() const {
  const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* p = _impl_.queries_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_QueryServicesDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor& GetQueryServicesDescriptorResponse::queries() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.queries)
  return _internal_queries();
}
inline void GetQueryServicesDescriptorResponse::unsafe_arena_set_allocated_queries(
    ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* queries) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queries_);
  }
  _impl_.queries_ = queries;
  if (queries) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.queries)
}
inline ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* GetQueryServicesDescriptorResponse::release_queries() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* temp = _impl_.queries_;
  _impl_.queries_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* GetQueryServicesDescriptorResponse::unsafe_arena_release_queries() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.queries)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* temp = _impl_.queries_;
  _impl_.queries_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* GetQueryServicesDescriptorResponse::_internal_mutable_queries() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.queries_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor>(GetArenaForAllocation());
    _impl_.queries_ = p;
  }
  return _impl_.queries_;
}
inline ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* GetQueryServicesDescriptorResponse::mutable_queries() {
  ::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* _msg = _internal_mutable_queries();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.queries)
  return _msg;
}
inline void GetQueryServicesDescriptorResponse::set_allocated_queries(::cosmos::base::reflection::v2alpha1::QueryServicesDescriptor* queries) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.queries_;
  }
  if (queries) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(queries);
    if (message_arena != submessage_arena) {
      queries = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queries, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.queries_ = queries;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.GetQueryServicesDescriptorResponse.queries)
}

// -------------------------------------------------------------------

// GetTxDescriptorRequest

// -------------------------------------------------------------------

// GetTxDescriptorResponse

// .cosmos.base.reflection.v2alpha1.TxDescriptor tx = 1 [json_name = "tx"];
inline bool GetTxDescriptorResponse::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline void GetTxDescriptorResponse::clear_tx() {
  if (_impl_.tx_ != nullptr) _impl_.tx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::base::reflection::v2alpha1::TxDescriptor& GetTxDescriptorResponse::_internal_tx() const {
  const ::cosmos::base::reflection::v2alpha1::TxDescriptor* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::reflection::v2alpha1::TxDescriptor&>(
      ::cosmos::base::reflection::v2alpha1::_TxDescriptor_default_instance_);
}
inline const ::cosmos::base::reflection::v2alpha1::TxDescriptor& GetTxDescriptorResponse::tx() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.tx)
  return _internal_tx();
}
inline void GetTxDescriptorResponse::unsafe_arena_set_allocated_tx(
    ::cosmos::base::reflection::v2alpha1::TxDescriptor* tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = tx;
  if (tx) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.tx)
}
inline ::cosmos::base::reflection::v2alpha1::TxDescriptor* GetTxDescriptorResponse::release_tx() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::TxDescriptor* GetTxDescriptorResponse::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.tx)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::cosmos::base::reflection::v2alpha1::TxDescriptor* GetTxDescriptorResponse::_internal_mutable_tx() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::reflection::v2alpha1::TxDescriptor>(GetArenaForAllocation());
    _impl_.tx_ = p;
  }
  return _impl_.tx_;
}
inline ::cosmos::base::reflection::v2alpha1::TxDescriptor* GetTxDescriptorResponse::mutable_tx() {
  ::cosmos::base::reflection::v2alpha1::TxDescriptor* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.tx)
  return _msg;
}
inline void GetTxDescriptorResponse::set_allocated_tx(::cosmos::base::reflection::v2alpha1::TxDescriptor* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tx_;
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tx);
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.GetTxDescriptorResponse.tx)
}

// -------------------------------------------------------------------

// QueryServicesDescriptor

// repeated .cosmos.base.reflection.v2alpha1.QueryServiceDescriptor query_services = 1 [json_name = "queryServices"];
inline int QueryServicesDescriptor::_internal_query_services_size() const {
  return _impl_.query_services_.size();
}
inline int QueryServicesDescriptor::query_services_size() const {
  return _internal_query_services_size();
}
inline void QueryServicesDescriptor::clear_query_services() {
  _internal_mutable_query_services()->Clear();
}
inline ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor* QueryServicesDescriptor::mutable_query_services(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.query_services)
  return _internal_mutable_query_services()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor >*
QueryServicesDescriptor::mutable_query_services() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.query_services)
  return _internal_mutable_query_services();
}
inline const ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor& QueryServicesDescriptor::_internal_query_services(int index) const {
  return _internal_query_services().Get(index);
}
inline const ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor& QueryServicesDescriptor::query_services(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.query_services)
  return _internal_query_services(index);
}
inline ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor* QueryServicesDescriptor::_internal_add_query_services() {
  return _internal_mutable_query_services()->Add();
}
inline ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor* QueryServicesDescriptor::add_query_services() {
  ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor* _add = _internal_add_query_services();
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.query_services)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor >&
QueryServicesDescriptor::query_services() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v2alpha1.QueryServicesDescriptor.query_services)
  return _internal_query_services();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor>&
QueryServicesDescriptor::_internal_query_services() const {
  return _impl_.query_services_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::QueryServiceDescriptor>*
QueryServicesDescriptor::_internal_mutable_query_services() {
  return &_impl_.query_services_;
}

// -------------------------------------------------------------------

// QueryServiceDescriptor

// string fullname = 1 [json_name = "fullname"];
inline void QueryServiceDescriptor::clear_fullname() {
  _impl_.fullname_.ClearToEmpty();
}
inline const std::string& QueryServiceDescriptor::fullname() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.fullname)
  return _internal_fullname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryServiceDescriptor::set_fullname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.fullname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.fullname)
}
inline std::string* QueryServiceDescriptor::mutable_fullname() {
  std::string* _s = _internal_mutable_fullname();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.fullname)
  return _s;
}
inline const std::string& QueryServiceDescriptor::_internal_fullname() const {
  return _impl_.fullname_.Get();
}
inline void QueryServiceDescriptor::_internal_set_fullname(const std::string& value) {
  ;


  _impl_.fullname_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryServiceDescriptor::_internal_mutable_fullname() {
  ;
  return _impl_.fullname_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryServiceDescriptor::release_fullname() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.fullname)
  return _impl_.fullname_.Release();
}
inline void QueryServiceDescriptor::set_allocated_fullname(std::string* value) {
  _impl_.fullname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fullname_.IsDefault()) {
          _impl_.fullname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.fullname)
}

// bool is_module = 2 [json_name = "isModule"];
inline void QueryServiceDescriptor::clear_is_module() {
  _impl_.is_module_ = false;
}
inline bool QueryServiceDescriptor::is_module() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.is_module)
  return _internal_is_module();
}
inline void QueryServiceDescriptor::set_is_module(bool value) {
  _internal_set_is_module(value);
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.is_module)
}
inline bool QueryServiceDescriptor::_internal_is_module() const {
  return _impl_.is_module_;
}
inline void QueryServiceDescriptor::_internal_set_is_module(bool value) {
  ;
  _impl_.is_module_ = value;
}

// repeated .cosmos.base.reflection.v2alpha1.QueryMethodDescriptor methods = 3 [json_name = "methods"];
inline int QueryServiceDescriptor::_internal_methods_size() const {
  return _impl_.methods_.size();
}
inline int QueryServiceDescriptor::methods_size() const {
  return _internal_methods_size();
}
inline void QueryServiceDescriptor::clear_methods() {
  _internal_mutable_methods()->Clear();
}
inline ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor* QueryServiceDescriptor::mutable_methods(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.methods)
  return _internal_mutable_methods()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor >*
QueryServiceDescriptor::mutable_methods() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.methods)
  return _internal_mutable_methods();
}
inline const ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor& QueryServiceDescriptor::_internal_methods(int index) const {
  return _internal_methods().Get(index);
}
inline const ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor& QueryServiceDescriptor::methods(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.methods)
  return _internal_methods(index);
}
inline ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor* QueryServiceDescriptor::_internal_add_methods() {
  return _internal_mutable_methods()->Add();
}
inline ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor* QueryServiceDescriptor::add_methods() {
  ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor* _add = _internal_add_methods();
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.methods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor >&
QueryServiceDescriptor::methods() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v2alpha1.QueryServiceDescriptor.methods)
  return _internal_methods();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor>&
QueryServiceDescriptor::_internal_methods() const {
  return _impl_.methods_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::reflection::v2alpha1::QueryMethodDescriptor>*
QueryServiceDescriptor::_internal_mutable_methods() {
  return &_impl_.methods_;
}

// -------------------------------------------------------------------

// QueryMethodDescriptor

// string name = 1 [json_name = "name"];
inline void QueryMethodDescriptor::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QueryMethodDescriptor::name() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryMethodDescriptor::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.name)
}
inline std::string* QueryMethodDescriptor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.name)
  return _s;
}
inline const std::string& QueryMethodDescriptor::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QueryMethodDescriptor::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryMethodDescriptor::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryMethodDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.name)
  return _impl_.name_.Release();
}
inline void QueryMethodDescriptor::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.name)
}

// string full_query_path = 2 [json_name = "fullQueryPath"];
inline void QueryMethodDescriptor::clear_full_query_path() {
  _impl_.full_query_path_.ClearToEmpty();
}
inline const std::string& QueryMethodDescriptor::full_query_path() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.full_query_path)
  return _internal_full_query_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryMethodDescriptor::set_full_query_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.full_query_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.full_query_path)
}
inline std::string* QueryMethodDescriptor::mutable_full_query_path() {
  std::string* _s = _internal_mutable_full_query_path();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.full_query_path)
  return _s;
}
inline const std::string& QueryMethodDescriptor::_internal_full_query_path() const {
  return _impl_.full_query_path_.Get();
}
inline void QueryMethodDescriptor::_internal_set_full_query_path(const std::string& value) {
  ;


  _impl_.full_query_path_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryMethodDescriptor::_internal_mutable_full_query_path() {
  ;
  return _impl_.full_query_path_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryMethodDescriptor::release_full_query_path() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.full_query_path)
  return _impl_.full_query_path_.Release();
}
inline void QueryMethodDescriptor::set_allocated_full_query_path(std::string* value) {
  _impl_.full_query_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.full_query_path_.IsDefault()) {
          _impl_.full_query_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v2alpha1.QueryMethodDescriptor.full_query_path)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2alpha1
}  // namespace reflection
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/base/reflection/v2alpha1/reflection.proto
// Original file comments:
// Since: cosmos-sdk 0.43
#ifndef GRPC_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto__INCLUDED
#define GRPC_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto__INCLUDED

#include "cosmos/base/reflection/v2alpha1/reflection.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace base {
namespace reflection {
namespace v2alpha1 {

// ReflectionService defines a service for application reflection.
class ReflectionService final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.base.reflection.v2alpha1.ReflectionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetAuthnDescriptor returns information on how to authenticate transactions in the application
    // NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
    // future releases of the cosmos-sdk.
    virtual ::grpc::Status GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>> AsyncGetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>>(AsyncGetAuthnDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>> PrepareAsyncGetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>>(PrepareAsyncGetAuthnDescriptorRaw(context, request, cq));
    }
    // GetChainDescriptor returns the description of the chain
    virtual ::grpc::Status GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>> AsyncGetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>>(AsyncGetChainDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>> PrepareAsyncGetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>>(PrepareAsyncGetChainDescriptorRaw(context, request, cq));
    }
    // GetCodecDescriptor returns the descriptor of the codec of the application
    virtual ::grpc::Status GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>> AsyncGetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>>(AsyncGetCodecDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>> PrepareAsyncGetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>>(PrepareAsyncGetCodecDescriptorRaw(context, request, cq));
    }
    // GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
    virtual ::grpc::Status GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>> AsyncGetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>>(AsyncGetConfigurationDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>> PrepareAsyncGetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>>(PrepareAsyncGetConfigurationDescriptorRaw(context, request, cq));
    }
    // GetQueryServicesDescriptor returns the available gRPC queryable services of the application
    virtual ::grpc::Status GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>> AsyncGetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>>(AsyncGetQueryServicesDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>> PrepareAsyncGetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>>(PrepareAsyncGetQueryServicesDescriptorRaw(context, request, cq));
    }
    // GetTxDescriptor returns information on the used transaction object and available msgs that can be used
    virtual ::grpc::Status GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>> AsyncGetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>>(AsyncGetTxDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>> PrepareAsyncGetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>>(PrepareAsyncGetTxDescriptorRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // GetAuthnDescriptor returns information on how to authenticate transactions in the application
      // NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
      // future releases of the cosmos-sdk.
      virtual void GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetChainDescriptor returns the description of the chain
      virtual void GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetCodecDescriptor returns the descriptor of the codec of the application
      virtual void GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
      virtual void GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetQueryServicesDescriptor returns the available gRPC queryable services of the application
      virtual void GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetTxDescriptor returns information on the used transaction object and available msgs that can be used
      virtual void GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* AsyncGetAuthnDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* PrepareAsyncGetAuthnDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* AsyncGetChainDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* PrepareAsyncGetChainDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* AsyncGetCodecDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* PrepareAsyncGetCodecDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* AsyncGetConfigurationDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* PrepareAsyncGetConfigurationDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* AsyncGetQueryServicesDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* PrepareAsyncGetQueryServicesDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* AsyncGetTxDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* PrepareAsyncGetTxDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>> AsyncGetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>>(AsyncGetAuthnDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>> PrepareAsyncGetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>>(PrepareAsyncGetAuthnDescriptorRaw(context, request, cq));
    }
    ::grpc::Status GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>> AsyncGetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>>(AsyncGetChainDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>> PrepareAsyncGetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>>(PrepareAsyncGetChainDescriptorRaw(context, request, cq));
    }
    ::grpc::Status GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>> AsyncGetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>>(AsyncGetCodecDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>> PrepareAsyncGetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>>(PrepareAsyncGetCodecDescriptorRaw(context, request, cq));
    }
    ::grpc::Status GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>> AsyncGetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>>(AsyncGetConfigurationDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>> PrepareAsyncGetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>>(PrepareAsyncGetConfigurationDescriptorRaw(context, request, cq));
    }
    ::grpc::Status GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>> AsyncGetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>>(AsyncGetQueryServicesDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>> PrepareAsyncGetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>>(PrepareAsyncGetQueryServicesDescriptorRaw(context, request, cq));
    }
    ::grpc::Status GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>> AsyncGetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>>(AsyncGetTxDescriptorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>> PrepareAsyncGetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>>(PrepareAsyncGetTxDescriptorRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAuthnDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetChainDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCodecDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConfigurationDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetQueryServicesDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTxDescriptor(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* AsyncGetAuthnDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* PrepareAsyncGetAuthnDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* AsyncGetChainDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* PrepareAsyncGetChainDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* AsyncGetCodecDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* PrepareAsyncGetCodecDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* AsyncGetConfigurationDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* PrepareAsyncGetConfigurationDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* AsyncGetQueryServicesDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* PrepareAsyncGetQueryServicesDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* AsyncGetTxDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* PrepareAsyncGetTxDescriptorRaw(::grpc::ClientContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAuthnDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChainDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCodecDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConfigurationDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetQueryServicesDescriptor_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxDescriptor_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetAuthnDescriptor returns information on how to authenticate transactions in the application
    // NOTE: this RPC is still experimental and might be subject to breaking changes or removal in
    // future releases of the cosmos-sdk.
    virtual ::grpc::Status GetAuthnDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response);
    // GetChainDescriptor returns the description of the chain
    virtual ::grpc::Status GetChainDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response);
    // GetCodecDescriptor returns the descriptor of the codec of the application
    virtual ::grpc::Status GetCodecDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response);
    // GetConfigurationDescriptor returns the descriptor for the sdk.Config of the application
    virtual ::grpc::Status GetConfigurationDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response);
    // GetQueryServicesDescriptor returns the available gRPC queryable services of the application
    virtual ::grpc::Status GetQueryServicesDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response);
    // GetTxDescriptor returns information on the used transaction object and available msgs that can be used
    virtual ::grpc::Status GetTxDescriptor(::grpc::ServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAuthnDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAuthnDescriptor() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAuthnDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthnDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthnDescriptor(::grpc::ServerContext* context, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChainDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChainDescriptor() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetChainDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChainDescriptor(::grpc::ServerContext* context, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCodecDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCodecDescriptor() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCodecDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCodecDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCodecDescriptor(::grpc::ServerContext* context, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConfigurationDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConfigurationDescriptor() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetConfigurationDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfigurationDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfigurationDescriptor(::grpc::ServerContext* context, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetQueryServicesDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetQueryServicesDescriptor() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetQueryServicesDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryServicesDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQueryServicesDescriptor(::grpc::ServerContext* context, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTxDescriptor() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetTxDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxDescriptor(::grpc::ServerContext* context, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAuthnDescriptor<WithAsyncMethod_GetChainDescriptor<WithAsyncMethod_GetCodecDescriptor<WithAsyncMethod_GetConfigurationDescriptor<WithAsyncMethod_GetQueryServicesDescriptor<WithAsyncMethod_GetTxDescriptor<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAuthnDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAuthnDescriptor() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* response) { return this->GetAuthnDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetAuthnDescriptor(
        ::grpc::MessageAllocator< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAuthnDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthnDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAuthnDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChainDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChainDescriptor() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* response) { return this->GetChainDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetChainDescriptor(
        ::grpc::MessageAllocator< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChainDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChainDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCodecDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCodecDescriptor() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* response) { return this->GetCodecDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetCodecDescriptor(
        ::grpc::MessageAllocator< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCodecDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCodecDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCodecDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetConfigurationDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConfigurationDescriptor() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* response) { return this->GetConfigurationDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetConfigurationDescriptor(
        ::grpc::MessageAllocator< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConfigurationDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfigurationDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConfigurationDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetQueryServicesDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetQueryServicesDescriptor() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* response) { return this->GetQueryServicesDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetQueryServicesDescriptor(
        ::grpc::MessageAllocator< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetQueryServicesDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryServicesDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetQueryServicesDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTxDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTxDescriptor() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* request, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* response) { return this->GetTxDescriptor(context, request, response); }));}
    void SetMessageAllocatorFor_GetTxDescriptor(
        ::grpc::MessageAllocator< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTxDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTxDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAuthnDescriptor<WithCallbackMethod_GetChainDescriptor<WithCallbackMethod_GetCodecDescriptor<WithCallbackMethod_GetConfigurationDescriptor<WithCallbackMethod_GetQueryServicesDescriptor<WithCallbackMethod_GetTxDescriptor<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAuthnDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAuthnDescriptor() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAuthnDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthnDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChainDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChainDescriptor() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetChainDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCodecDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCodecDescriptor() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCodecDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCodecDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConfigurationDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConfigurationDescriptor() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetConfigurationDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfigurationDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetQueryServicesDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetQueryServicesDescriptor() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetQueryServicesDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryServicesDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTxDescriptor() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetTxDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAuthnDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAuthnDescriptor() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAuthnDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthnDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthnDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChainDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChainDescriptor() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetChainDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChainDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCodecDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCodecDescriptor() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCodecDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCodecDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCodecDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConfigurationDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConfigurationDescriptor() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetConfigurationDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfigurationDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConfigurationDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetQueryServicesDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetQueryServicesDescriptor() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetQueryServicesDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryServicesDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetQueryServicesDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTxDescriptor() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetTxDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxDescriptor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAuthnDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAuthnDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAuthnDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAuthnDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthnDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAuthnDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChainDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChainDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChainDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChainDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChainDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChainDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCodecDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCodecDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCodecDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCodecDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCodecDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCodecDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConfigurationDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConfigurationDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConfigurationDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConfigurationDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConfigurationDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConfigurationDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetQueryServicesDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetQueryServicesDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetQueryServicesDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetQueryServicesDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetQueryServicesDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetQueryServicesDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTxDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTxDescriptor() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTxDescriptor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTxDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTxDescriptor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAuthnDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAuthnDescriptor() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* streamer) {
                       return this->StreamedGetAuthnDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAuthnDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAuthnDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAuthnDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorRequest,::cosmos::base::reflection::v2alpha1::GetAuthnDescriptorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChainDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChainDescriptor() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* streamer) {
                       return this->StreamedGetChainDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChainDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChainDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChainDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::base::reflection::v2alpha1::GetChainDescriptorRequest,::cosmos::base::reflection::v2alpha1::GetChainDescriptorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCodecDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCodecDescriptor() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* streamer) {
                       return this->StreamedGetCodecDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCodecDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCodecDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCodecDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::base::reflection::v2alpha1::GetCodecDescriptorRequest,::cosmos::base::reflection::v2alpha1::GetCodecDescriptorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConfigurationDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConfigurationDescriptor() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* streamer) {
                       return this->StreamedGetConfigurationDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConfigurationDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConfigurationDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConfigurationDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorRequest,::cosmos::base::reflection::v2alpha1::GetConfigurationDescriptorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetQueryServicesDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetQueryServicesDescriptor() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* streamer) {
                       return this->StreamedGetQueryServicesDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetQueryServicesDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetQueryServicesDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetQueryServicesDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorRequest,::cosmos::base::reflection::v2alpha1::GetQueryServicesDescriptorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxDescriptor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTxDescriptor() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* streamer) {
                       return this->StreamedGetTxDescriptor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTxDescriptor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxDescriptor(::grpc::ServerContext* /*context*/, const ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest* /*request*/, ::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxDescriptor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::base::reflection::v2alpha1::GetTxDescriptorRequest,::cosmos::base::reflection::v2alpha1::GetTxDescriptorResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAuthnDescriptor<WithStreamedUnaryMethod_GetChainDescriptor<WithStreamedUnaryMethod_GetCodecDescriptor<WithStreamedUnaryMethod_GetConfigurationDescriptor<WithStreamedUnaryMethod_GetQueryServicesDescriptor<WithStreamedUnaryMethod_GetTxDescriptor<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAuthnDescriptor<WithStreamedUnaryMethod_GetChainDescriptor<WithStreamedUnaryMethod_GetCodecDescriptor<WithStreamedUnaryMethod_GetConfigurationDescriptor<WithStreamedUnaryMethod_GetQueryServicesDescriptor<WithStreamedUnaryMethod_GetTxDescriptor<Service > > > > > > StreamedService;
};

}  // namespace v2alpha1
}  // namespace reflection
}  // namespace base
}  // namespace cosmos


#endif  // GRPC_cosmos_2fbase_2freflection_2fv2alpha1_2freflection_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/reflection/v1beta1/reflection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto;
namespace cosmos {
namespace base {
namespace reflection {
namespace v1beta1 {
class ListAllInterfacesRequest;
struct ListAllInterfacesRequestDefaultTypeInternal;
extern ListAllInterfacesRequestDefaultTypeInternal _ListAllInterfacesRequest_default_instance_;
class ListAllInterfacesResponse;
struct ListAllInterfacesResponseDefaultTypeInternal;
extern ListAllInterfacesResponseDefaultTypeInternal _ListAllInterfacesResponse_default_instance_;
class ListImplementationsRequest;
struct ListImplementationsRequestDefaultTypeInternal;
extern ListImplementationsRequestDefaultTypeInternal _ListImplementationsRequest_default_instance_;
class ListImplementationsResponse;
struct ListImplementationsResponseDefaultTypeInternal;
extern ListImplementationsResponseDefaultTypeInternal _ListImplementationsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace reflection
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::base::reflection::v1beta1::ListAllInterfacesRequest* Arena::CreateMaybeMessage<::cosmos::base::reflection::v1beta1::ListAllInterfacesRequest>(Arena*);
template <>
::cosmos::base::reflection::v1beta1::ListAllInterfacesResponse* Arena::CreateMaybeMessage<::cosmos::base::reflection::v1beta1::ListAllInterfacesResponse>(Arena*);
template <>
::cosmos::base::reflection::v1beta1::ListImplementationsRequest* Arena::CreateMaybeMessage<::cosmos::base::reflection::v1beta1::ListImplementationsRequest>(Arena*);
template <>
::cosmos::base::reflection::v1beta1::ListImplementationsResponse* Arena::CreateMaybeMessage<::cosmos::base::reflection::v1beta1::ListImplementationsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace base {
namespace reflection {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class ListAllInterfacesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v1beta1.ListAllInterfacesRequest) */ {
 public:
  inline ListAllInterfacesRequest() : ListAllInterfacesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListAllInterfacesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAllInterfacesRequest(const ListAllInterfacesRequest& from);
  ListAllInterfacesRequest(ListAllInterfacesRequest&& from) noexcept
    : ListAllInterfacesRequest() {
    *this = ::std::move(from);
  }

  inline ListAllInterfacesRequest& operator=(const ListAllInterfacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAllInterfacesRequest& operator=(ListAllInterfacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAllInterfacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAllInterfacesRequest* internal_default_instance() {
    return reinterpret_cast<const ListAllInterfacesRequest*>(
               &_ListAllInterfacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListAllInterfacesRequest& a, ListAllInterfacesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAllInterfacesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAllInterfacesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAllInterfacesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAllInterfacesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListAllInterfacesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListAllInterfacesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v1beta1.ListAllInterfacesRequest";
  }
  protected:
  explicit ListAllInterfacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v1beta1.ListAllInterfacesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto;
};// -------------------------------------------------------------------

class ListAllInterfacesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse) */ {
 public:
  inline ListAllInterfacesResponse() : ListAllInterfacesResponse(nullptr) {}
  ~ListAllInterfacesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListAllInterfacesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAllInterfacesResponse(const ListAllInterfacesResponse& from);
  ListAllInterfacesResponse(ListAllInterfacesResponse&& from) noexcept
    : ListAllInterfacesResponse() {
    *this = ::std::move(from);
  }

  inline ListAllInterfacesResponse& operator=(const ListAllInterfacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAllInterfacesResponse& operator=(ListAllInterfacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAllInterfacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAllInterfacesResponse* internal_default_instance() {
    return reinterpret_cast<const ListAllInterfacesResponse*>(
               &_ListAllInterfacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListAllInterfacesResponse& a, ListAllInterfacesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAllInterfacesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAllInterfacesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAllInterfacesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAllInterfacesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAllInterfacesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAllInterfacesResponse& from) {
    ListAllInterfacesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAllInterfacesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v1beta1.ListAllInterfacesResponse";
  }
  protected:
  explicit ListAllInterfacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceNamesFieldNumber = 1,
  };
  // repeated string interface_names = 1 [json_name = "interfaceNames"];
  int interface_names_size() const;
  private:
  int _internal_interface_names_size() const;

  public:
  void clear_interface_names() ;
  const std::string& interface_names(int index) const;
  std::string* mutable_interface_names(int index);
  void set_interface_names(int index, const std::string& value);
  void set_interface_names(int index, std::string&& value);
  void set_interface_names(int index, const char* value);
  void set_interface_names(int index, const char* value, std::size_t size);
  void set_interface_names(int index, absl::string_view value);
  std::string* add_interface_names();
  void add_interface_names(const std::string& value);
  void add_interface_names(std::string&& value);
  void add_interface_names(const char* value);
  void add_interface_names(const char* value, std::size_t size);
  void add_interface_names(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& interface_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_interface_names();

  private:
  const std::string& _internal_interface_names(int index) const;
  std::string* _internal_add_interface_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_interface_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_interface_names();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> interface_names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto;
};// -------------------------------------------------------------------

class ListImplementationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v1beta1.ListImplementationsRequest) */ {
 public:
  inline ListImplementationsRequest() : ListImplementationsRequest(nullptr) {}
  ~ListImplementationsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListImplementationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListImplementationsRequest(const ListImplementationsRequest& from);
  ListImplementationsRequest(ListImplementationsRequest&& from) noexcept
    : ListImplementationsRequest() {
    *this = ::std::move(from);
  }

  inline ListImplementationsRequest& operator=(const ListImplementationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImplementationsRequest& operator=(ListImplementationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImplementationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImplementationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListImplementationsRequest*>(
               &_ListImplementationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListImplementationsRequest& a, ListImplementationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImplementationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImplementationsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListImplementationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListImplementationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListImplementationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListImplementationsRequest& from) {
    ListImplementationsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImplementationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v1beta1.ListImplementationsRequest";
  }
  protected:
  explicit ListImplementationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceNameFieldNumber = 1,
  };
  // string interface_name = 1 [json_name = "interfaceName"];
  void clear_interface_name() ;
  const std::string& interface_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interface_name(Arg_&& arg, Args_... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* ptr);

  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(
      const std::string& value);
  std::string* _internal_mutable_interface_name();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v1beta1.ListImplementationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto;
};// -------------------------------------------------------------------

class ListImplementationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.base.reflection.v1beta1.ListImplementationsResponse) */ {
 public:
  inline ListImplementationsResponse() : ListImplementationsResponse(nullptr) {}
  ~ListImplementationsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListImplementationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListImplementationsResponse(const ListImplementationsResponse& from);
  ListImplementationsResponse(ListImplementationsResponse&& from) noexcept
    : ListImplementationsResponse() {
    *this = ::std::move(from);
  }

  inline ListImplementationsResponse& operator=(const ListImplementationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListImplementationsResponse& operator=(ListImplementationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListImplementationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListImplementationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListImplementationsResponse*>(
               &_ListImplementationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListImplementationsResponse& a, ListImplementationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListImplementationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListImplementationsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListImplementationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListImplementationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListImplementationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListImplementationsResponse& from) {
    ListImplementationsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListImplementationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.base.reflection.v1beta1.ListImplementationsResponse";
  }
  protected:
  explicit ListImplementationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImplementationMessageNamesFieldNumber = 1,
  };
  // repeated string implementation_message_names = 1 [json_name = "implementationMessageNames"];
  int implementation_message_names_size() const;
  private:
  int _internal_implementation_message_names_size() const;

  public:
  void clear_implementation_message_names() ;
  const std::string& implementation_message_names(int index) const;
  std::string* mutable_implementation_message_names(int index);
  void set_implementation_message_names(int index, const std::string& value);
  void set_implementation_message_names(int index, std::string&& value);
  void set_implementation_message_names(int index, const char* value);
  void set_implementation_message_names(int index, const char* value, std::size_t size);
  void set_implementation_message_names(int index, absl::string_view value);
  std::string* add_implementation_message_names();
  void add_implementation_message_names(const std::string& value);
  void add_implementation_message_names(std::string&& value);
  void add_implementation_message_names(const char* value);
  void add_implementation_message_names(const char* value, std::size_t size);
  void add_implementation_message_names(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& implementation_message_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_implementation_message_names();

  private:
  const std::string& _internal_implementation_message_names(int index) const;
  std::string* _internal_add_implementation_message_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_implementation_message_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_implementation_message_names();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.base.reflection.v1beta1.ListImplementationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> implementation_message_names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ListAllInterfacesRequest

// -------------------------------------------------------------------

// ListAllInterfacesResponse

// repeated string interface_names = 1 [json_name = "interfaceNames"];
inline int ListAllInterfacesResponse::_internal_interface_names_size() const {
  return _impl_.interface_names_.size();
}
inline int ListAllInterfacesResponse::interface_names_size() const {
  return _internal_interface_names_size();
}
inline void ListAllInterfacesResponse::clear_interface_names() {
  _internal_mutable_interface_names()->Clear();
}
inline std::string* ListAllInterfacesResponse::add_interface_names() {
  std::string* _s = _internal_add_interface_names();
  // @@protoc_insertion_point(field_add_mutable:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
  return _s;
}
inline const std::string& ListAllInterfacesResponse::interface_names(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
  return _internal_interface_names(index);
}
inline std::string* ListAllInterfacesResponse::mutable_interface_names(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
  return _internal_mutable_interface_names()->Mutable(index);
}
inline void ListAllInterfacesResponse::set_interface_names(int index, const std::string& value) {
  _internal_mutable_interface_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::set_interface_names(int index, std::string&& value) {
  _internal_mutable_interface_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::set_interface_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_interface_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::set_interface_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_interface_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::set_interface_names(int index, absl::string_view value) {
  _internal_mutable_interface_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::add_interface_names(const std::string& value) {
  _internal_mutable_interface_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::add_interface_names(std::string&& value) {
  _internal_mutable_interface_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::add_interface_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_interface_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::add_interface_names(const char* value, std::size_t size) {
  _internal_mutable_interface_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline void ListAllInterfacesResponse::add_interface_names(absl::string_view value) {
  _internal_mutable_interface_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAllInterfacesResponse::interface_names() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
  return _internal_interface_names();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ListAllInterfacesResponse::mutable_interface_names() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v1beta1.ListAllInterfacesResponse.interface_names)
  return _internal_mutable_interface_names();
}
inline const std::string& ListAllInterfacesResponse::_internal_interface_names(int index) const {
  return _internal_interface_names().Get(index);
}
inline std::string* ListAllInterfacesResponse::_internal_add_interface_names() {
  return _internal_mutable_interface_names()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListAllInterfacesResponse::_internal_interface_names() const {
  return _impl_.interface_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListAllInterfacesResponse::_internal_mutable_interface_names() {
  return &_impl_.interface_names_;
}

// -------------------------------------------------------------------

// ListImplementationsRequest

// string interface_name = 1 [json_name = "interfaceName"];
inline void ListImplementationsRequest::clear_interface_name() {
  _impl_.interface_name_.ClearToEmpty();
}
inline const std::string& ListImplementationsRequest::interface_name() const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v1beta1.ListImplementationsRequest.interface_name)
  return _internal_interface_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListImplementationsRequest::set_interface_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.interface_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v1beta1.ListImplementationsRequest.interface_name)
}
inline std::string* ListImplementationsRequest::mutable_interface_name() {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v1beta1.ListImplementationsRequest.interface_name)
  return _s;
}
inline const std::string& ListImplementationsRequest::_internal_interface_name() const {
  return _impl_.interface_name_.Get();
}
inline void ListImplementationsRequest::_internal_set_interface_name(const std::string& value) {
  ;


  _impl_.interface_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListImplementationsRequest::_internal_mutable_interface_name() {
  ;
  return _impl_.interface_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ListImplementationsRequest::release_interface_name() {
  // @@protoc_insertion_point(field_release:cosmos.base.reflection.v1beta1.ListImplementationsRequest.interface_name)
  return _impl_.interface_name_.Release();
}
inline void ListImplementationsRequest::set_allocated_interface_name(std::string* value) {
  _impl_.interface_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.interface_name_.IsDefault()) {
          _impl_.interface_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.reflection.v1beta1.ListImplementationsRequest.interface_name)
}

// -------------------------------------------------------------------

// ListImplementationsResponse

// repeated string implementation_message_names = 1 [json_name = "implementationMessageNames"];
inline int ListImplementationsResponse::_internal_implementation_message_names_size() const {
  return _impl_.implementation_message_names_.size();
}
inline int ListImplementationsResponse::implementation_message_names_size() const {
  return _internal_implementation_message_names_size();
}
inline void ListImplementationsResponse::clear_implementation_message_names() {
  _internal_mutable_implementation_message_names()->Clear();
}
inline std::string* ListImplementationsResponse::add_implementation_message_names() {
  std::string* _s = _internal_add_implementation_message_names();
  // @@protoc_insertion_point(field_add_mutable:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
  return _s;
}
inline const std::string& ListImplementationsResponse::implementation_message_names(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
  return _internal_implementation_message_names(index);
}
inline std::string* ListImplementationsResponse::mutable_implementation_message_names(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
  return _internal_mutable_implementation_message_names()->Mutable(index);
}
inline void ListImplementationsResponse::set_implementation_message_names(int index, const std::string& value) {
  _internal_mutable_implementation_message_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::set_implementation_message_names(int index, std::string&& value) {
  _internal_mutable_implementation_message_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::set_implementation_message_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_implementation_message_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::set_implementation_message_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_implementation_message_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::set_implementation_message_names(int index, absl::string_view value) {
  _internal_mutable_implementation_message_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::add_implementation_message_names(const std::string& value) {
  _internal_mutable_implementation_message_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::add_implementation_message_names(std::string&& value) {
  _internal_mutable_implementation_message_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::add_implementation_message_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_implementation_message_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::add_implementation_message_names(const char* value, std::size_t size) {
  _internal_mutable_implementation_message_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline void ListImplementationsResponse::add_implementation_message_names(absl::string_view value) {
  _internal_mutable_implementation_message_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListImplementationsResponse::implementation_message_names() const {
  // @@protoc_insertion_point(field_list:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
  return _internal_implementation_message_names();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ListImplementationsResponse::mutable_implementation_message_names() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.base.reflection.v1beta1.ListImplementationsResponse.implementation_message_names)
  return _internal_mutable_implementation_message_names();
}
inline const std::string& ListImplementationsResponse::_internal_implementation_message_names(int index) const {
  return _internal_implementation_message_names().Get(index);
}
inline std::string* ListImplementationsResponse::_internal_add_implementation_message_names() {
  return _internal_mutable_implementation_message_names()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListImplementationsResponse::_internal_implementation_message_names() const {
  return _impl_.implementation_message_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListImplementationsResponse::_internal_mutable_implementation_message_names() {
  return &_impl_.implementation_message_names_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace reflection
}  // namespace base
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fbase_2freflection_2fv1beta1_2freflection_2eproto_2epb_2eh

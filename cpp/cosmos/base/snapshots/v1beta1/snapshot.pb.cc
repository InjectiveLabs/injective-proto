// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/base/snapshots/v1beta1/snapshot.proto

#include "cosmos/base/snapshots/v1beta1/snapshot.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace base {
namespace snapshots {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR Snapshot::Snapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.format_)*/ 0u

  , /*decltype(_impl_.chunks_)*/ 0u
} {}
struct SnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotDefaultTypeInternal() {}
  union {
    Snapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotDefaultTypeInternal _Snapshot_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_hashes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotItem::SnapshotItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SnapshotItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotItemDefaultTypeInternal() {}
  union {
    SnapshotItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotItemDefaultTypeInternal _SnapshotItem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotStoreItem::SnapshotStoreItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotStoreItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotStoreItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotStoreItemDefaultTypeInternal() {}
  union {
    SnapshotStoreItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotStoreItemDefaultTypeInternal _SnapshotStoreItem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotIAVLItem::SnapshotIAVLItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ ::int64_t{0}

  , /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotIAVLItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotIAVLItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotIAVLItemDefaultTypeInternal() {}
  union {
    SnapshotIAVLItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotIAVLItemDefaultTypeInternal _SnapshotIAVLItem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotExtensionMeta::SnapshotExtensionMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.format_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotExtensionMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotExtensionMetaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotExtensionMetaDefaultTypeInternal() {}
  union {
    SnapshotExtensionMeta _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotExtensionMetaDefaultTypeInternal _SnapshotExtensionMeta_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotExtensionPayload::SnapshotExtensionPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotExtensionPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotExtensionPayloadDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotExtensionPayloadDefaultTypeInternal() {}
  union {
    SnapshotExtensionPayload _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotExtensionPayloadDefaultTypeInternal _SnapshotExtensionPayload_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotKVItem::SnapshotKVItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotKVItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotKVItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotKVItemDefaultTypeInternal() {}
  union {
    SnapshotKVItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotKVItemDefaultTypeInternal _SnapshotKVItem_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotSchema::SnapshotSchema(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotSchemaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotSchemaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotSchemaDefaultTypeInternal() {}
  union {
    SnapshotSchema _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotSchemaDefaultTypeInternal _SnapshotSchema_default_instance_;
}  // namespace v1beta1
}  // namespace snapshots
}  // namespace base
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Snapshot, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Snapshot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Snapshot, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Snapshot, _impl_.format_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Snapshot, _impl_.chunks_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Snapshot, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Snapshot, _impl_.metadata_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Metadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::Metadata, _impl_.chunk_hashes_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotItem, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotItem, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotItem, _impl_.item_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotStoreItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotStoreItem, _impl_.name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem, _impl_.height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta, _impl_.format_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotKVItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotKVItem, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotKVItem, _impl_.value_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotSchema, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotSchema, _impl_.keys_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::cosmos::base::snapshots::v1beta1::Snapshot)},
        { 18, -1, -1, sizeof(::cosmos::base::snapshots::v1beta1::Metadata)},
        { 27, -1, -1, sizeof(::cosmos::base::snapshots::v1beta1::SnapshotItem)},
        { 42, -1, -1, sizeof(::cosmos::base::snapshots::v1beta1::SnapshotStoreItem)},
        { 51, -1, -1, sizeof(::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem)},
        { 63, -1, -1, sizeof(::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta)},
        { 73, -1, -1, sizeof(::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload)},
        { 82, -1, -1, sizeof(::cosmos::base::snapshots::v1beta1::SnapshotKVItem)},
        { 92, -1, -1, sizeof(::cosmos::base::snapshots::v1beta1::SnapshotSchema)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::base::snapshots::v1beta1::_Snapshot_default_instance_._instance,
    &::cosmos::base::snapshots::v1beta1::_Metadata_default_instance_._instance,
    &::cosmos::base::snapshots::v1beta1::_SnapshotItem_default_instance_._instance,
    &::cosmos::base::snapshots::v1beta1::_SnapshotStoreItem_default_instance_._instance,
    &::cosmos::base::snapshots::v1beta1::_SnapshotIAVLItem_default_instance_._instance,
    &::cosmos::base::snapshots::v1beta1::_SnapshotExtensionMeta_default_instance_._instance,
    &::cosmos::base::snapshots::v1beta1::_SnapshotExtensionPayload_default_instance_._instance,
    &::cosmos::base::snapshots::v1beta1::_SnapshotKVItem_default_instance_._instance,
    &::cosmos::base::snapshots::v1beta1::_SnapshotSchema_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,cosmos/base/snapshots/v1beta1/snapshot"
    ".proto\022\035cosmos.base.snapshots.v1beta1\032\024g"
    "ogoproto/gogo.proto\"\261\001\n\010Snapshot\022\026\n\006heig"
    "ht\030\001 \001(\004R\006height\022\026\n\006format\030\002 \001(\rR\006format"
    "\022\026\n\006chunks\030\003 \001(\rR\006chunks\022\022\n\004hash\030\004 \001(\014R\004"
    "hash\022I\n\010metadata\030\005 \001(\0132\'.cosmos.base.sna"
    "pshots.v1beta1.MetadataB\004\310\336\037\000R\010metadata\""
    "-\n\010Metadata\022!\n\014chunk_hashes\030\001 \003(\014R\013chunk"
    "Hashes\"\207\004\n\014SnapshotItem\022H\n\005store\030\001 \001(\01320"
    ".cosmos.base.snapshots.v1beta1.SnapshotS"
    "toreItemH\000R\005store\022O\n\004iavl\030\002 \001(\0132/.cosmos"
    ".base.snapshots.v1beta1.SnapshotIAVLItem"
    "B\010\342\336\037\004IAVLH\000R\004iavl\022T\n\textension\030\003 \001(\01324."
    "cosmos.base.snapshots.v1beta1.SnapshotEx"
    "tensionMetaH\000R\textension\022f\n\021extension_pa"
    "yload\030\004 \001(\01327.cosmos.base.snapshots.v1be"
    "ta1.SnapshotExtensionPayloadH\000R\020extensio"
    "nPayload\022I\n\002kv\030\005 \001(\0132-.cosmos.base.snaps"
    "hots.v1beta1.SnapshotKVItemB\010\030\001\342\336\037\002KVH\000R"
    "\002kv\022K\n\006schema\030\006 \001(\0132-.cosmos.base.snapsh"
    "ots.v1beta1.SnapshotSchemaB\002\030\001H\000R\006schema"
    "B\006\n\004item\"\'\n\021SnapshotStoreItem\022\022\n\004name\030\001 "
    "\001(\tR\004name\"l\n\020SnapshotIAVLItem\022\020\n\003key\030\001 \001"
    "(\014R\003key\022\024\n\005value\030\002 \001(\014R\005value\022\030\n\007version"
    "\030\003 \001(\003R\007version\022\026\n\006height\030\004 \001(\005R\006height\""
    "C\n\025SnapshotExtensionMeta\022\022\n\004name\030\001 \001(\tR\004"
    "name\022\026\n\006format\030\002 \001(\rR\006format\"4\n\030Snapshot"
    "ExtensionPayload\022\030\n\007payload\030\001 \001(\014R\007paylo"
    "ad\"<\n\016SnapshotKVItem\022\020\n\003key\030\001 \001(\014R\003key\022\024"
    "\n\005value\030\002 \001(\014R\005value:\002\030\001\"(\n\016SnapshotSche"
    "ma\022\022\n\004keys\030\001 \003(\014R\004keys:\002\030\001B\367\001\n!com.cosmo"
    "s.base.snapshots.v1beta1B\rSnapshotProtoP"
    "\001Z,github.com/cosmos/cosmos-sdk/snapshot"
    "s/types\242\002\003CBS\252\002\035Cosmos.Base.Snapshots.V1"
    "beta1\312\002\035Cosmos\\Base\\Snapshots\\V1beta1\342\002)"
    "Cosmos\\Base\\Snapshots\\V1beta1\\GPBMetadat"
    "a\352\002 Cosmos::Base::Snapshots::V1beta1b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto = {
    false,
    false,
    1484,
    descriptor_table_protodef_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto,
    "cosmos/base/snapshots/v1beta1/snapshot.proto",
    &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
    descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_deps,
    1,
    9,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto::offsets,
    file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto,
    file_level_enum_descriptors_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto,
    file_level_service_descriptors_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter() {
  return &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto(&descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto);
namespace cosmos {
namespace base {
namespace snapshots {
namespace v1beta1 {
// ===================================================================

class Snapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<Snapshot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Snapshot, _impl_._has_bits_);
  static const ::cosmos::base::snapshots::v1beta1::Metadata& metadata(const Snapshot* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::snapshots::v1beta1::Metadata&
Snapshot::_Internal::metadata(const Snapshot* msg) {
  return *msg->_impl_.metadata_;
}
Snapshot::Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Snapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_) {}

    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.format_) {}

    , decltype(_impl_.chunks_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.metadata_ = new ::cosmos::base::snapshots::v1beta1::Metadata(*from._impl_.metadata_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.chunks_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.chunks_));
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.Snapshot)
}

inline void Snapshot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_) {}

    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.format_) { 0u }

    , decltype(_impl_.chunks_) { 0u }

  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.Snapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Snapshot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void Snapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.Snapshot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.chunks_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.chunks_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Snapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 format = 2 [json_name = "format"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 chunks = 3 [json_name = "chunks"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes hash = 4 [json_name = "hash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.snapshots.v1beta1.Metadata metadata = 5 [json_name = "metadata", (.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Snapshot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.Snapshot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_height(), target);
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_format(), target);
  }

  // uint32 chunks = 3 [json_name = "chunks"];
  if (this->_internal_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_chunks(), target);
  }

  // bytes hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.snapshots.v1beta1.Metadata metadata = 5 [json_name = "metadata", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.Snapshot)
  return target;
}

::size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.Snapshot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // .cosmos.base.snapshots.v1beta1.Metadata metadata = 5 [json_name = "metadata", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_format());
  }

  // uint32 chunks = 3 [json_name = "chunks"];
  if (this->_internal_chunks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_chunks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Snapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Snapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Snapshot::GetClassData() const { return &_class_data_; }


void Snapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Snapshot*>(&to_msg);
  auto& from = static_cast<const Snapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.Snapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_metadata()->::cosmos::base::snapshots::v1beta1::Metadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_chunks() != 0) {
    _this->_internal_set_chunks(from._internal_chunks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.chunks_)
      + sizeof(Snapshot::_impl_.chunks_)
      - PROTOBUF_FIELD_OFFSET(Snapshot, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Snapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[0]);
}
// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_hashes_){from._impl_.chunk_hashes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.Metadata)
}

inline void Metadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_hashes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_chunk_hashes()->~RepeatedPtrField();
}

void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.Metadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_chunk_hashes()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes chunk_hashes = 1 [json_name = "chunkHashes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_chunk_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Metadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.Metadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes chunk_hashes = 1 [json_name = "chunkHashes"];
  for (int i = 0, n = this->_internal_chunk_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_chunk_hashes(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.Metadata)
  return target;
}

::size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.Metadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes chunk_hashes = 1 [json_name = "chunkHashes"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_chunk_hashes().size());
  for (int i = 0, n = _internal_chunk_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_chunk_hashes().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }


void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata*>(&to_msg);
  auto& from = static_cast<const Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.Metadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_chunk_hashes()->MergeFrom(from._internal_chunk_hashes());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_chunk_hashes()->InternalSwap(
      other->_internal_mutable_chunk_hashes());
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[1]);
}
// ===================================================================

class SnapshotItem::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cosmos::base::snapshots::v1beta1::SnapshotItem, _impl_._oneof_case_);
  static const ::cosmos::base::snapshots::v1beta1::SnapshotStoreItem& store(const SnapshotItem* msg);
  static const ::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem& iavl(const SnapshotItem* msg);
  static const ::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta& extension(const SnapshotItem* msg);
  static const ::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload& extension_payload(const SnapshotItem* msg);
  static const ::cosmos::base::snapshots::v1beta1::SnapshotKVItem& kv(const SnapshotItem* msg);
  static const ::cosmos::base::snapshots::v1beta1::SnapshotSchema& schema(const SnapshotItem* msg);
};

const ::cosmos::base::snapshots::v1beta1::SnapshotStoreItem&
SnapshotItem::_Internal::store(const SnapshotItem* msg) {
  return *msg->_impl_.item_.store_;
}
const ::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem&
SnapshotItem::_Internal::iavl(const SnapshotItem* msg) {
  return *msg->_impl_.item_.iavl_;
}
const ::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta&
SnapshotItem::_Internal::extension(const SnapshotItem* msg) {
  return *msg->_impl_.item_.extension_;
}
const ::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload&
SnapshotItem::_Internal::extension_payload(const SnapshotItem* msg) {
  return *msg->_impl_.item_.extension_payload_;
}
const ::cosmos::base::snapshots::v1beta1::SnapshotKVItem&
SnapshotItem::_Internal::kv(const SnapshotItem* msg) {
  return *msg->_impl_.item_.kv_;
}
const ::cosmos::base::snapshots::v1beta1::SnapshotSchema&
SnapshotItem::_Internal::schema(const SnapshotItem* msg) {
  return *msg->_impl_.item_.schema_;
}
void SnapshotItem::set_allocated_store(::cosmos::base::snapshots::v1beta1::SnapshotStoreItem* store) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (store) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(store);
    if (message_arena != submessage_arena) {
      store = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, store, submessage_arena);
    }
    set_has_store();
    _impl_.item_.store_ = store;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.snapshots.v1beta1.SnapshotItem.store)
}
void SnapshotItem::set_allocated_iavl(::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem* iavl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (iavl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iavl);
    if (message_arena != submessage_arena) {
      iavl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iavl, submessage_arena);
    }
    set_has_iavl();
    _impl_.item_.iavl_ = iavl;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.snapshots.v1beta1.SnapshotItem.iavl)
}
void SnapshotItem::set_allocated_extension(::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta* extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension);
    if (message_arena != submessage_arena) {
      extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension, submessage_arena);
    }
    set_has_extension();
    _impl_.item_.extension_ = extension;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.snapshots.v1beta1.SnapshotItem.extension)
}
void SnapshotItem::set_allocated_extension_payload(::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload* extension_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (extension_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extension_payload);
    if (message_arena != submessage_arena) {
      extension_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_payload, submessage_arena);
    }
    set_has_extension_payload();
    _impl_.item_.extension_payload_ = extension_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.snapshots.v1beta1.SnapshotItem.extension_payload)
}
void SnapshotItem::set_allocated_kv(::cosmos::base::snapshots::v1beta1::SnapshotKVItem* kv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (kv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kv);
    if (message_arena != submessage_arena) {
      kv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv, submessage_arena);
    }
    set_has_kv();
    _impl_.item_.kv_ = kv;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.snapshots.v1beta1.SnapshotItem.kv)
}
void SnapshotItem::set_allocated_schema(::cosmos::base::snapshots::v1beta1::SnapshotSchema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(schema);
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    set_has_schema();
    _impl_.item_.schema_ = schema;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.base.snapshots.v1beta1.SnapshotItem.schema)
}
SnapshotItem::SnapshotItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.SnapshotItem)
}
SnapshotItem::SnapshotItem(const SnapshotItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kStore: {
      _this->_internal_mutable_store()->::cosmos::base::snapshots::v1beta1::SnapshotStoreItem::MergeFrom(
          from._internal_store());
      break;
    }
    case kIavl: {
      _this->_internal_mutable_iavl()->::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem::MergeFrom(
          from._internal_iavl());
      break;
    }
    case kExtension: {
      _this->_internal_mutable_extension()->::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta::MergeFrom(
          from._internal_extension());
      break;
    }
    case kExtensionPayload: {
      _this->_internal_mutable_extension_payload()->::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload::MergeFrom(
          from._internal_extension_payload());
      break;
    }
    case kKv: {
      _this->_internal_mutable_kv()->::cosmos::base::snapshots::v1beta1::SnapshotKVItem::MergeFrom(
          from._internal_kv());
      break;
    }
    case kSchema: {
      _this->_internal_mutable_schema()->::cosmos::base::snapshots::v1beta1::SnapshotSchema::MergeFrom(
          from._internal_schema());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.SnapshotItem)
}

inline void SnapshotItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_item();
}

SnapshotItem::~SnapshotItem() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.SnapshotItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_item()) {
    clear_item();
  }
}

void SnapshotItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotItem::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.base.snapshots.v1beta1.SnapshotItem)
  switch (item_case()) {
    case kStore: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.store_;
      }
      break;
    }
    case kIavl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.iavl_;
      }
      break;
    }
    case kExtension: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.extension_;
      }
      break;
    }
    case kExtensionPayload: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.extension_payload_;
      }
      break;
    }
    case kKv: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.kv_;
      }
      break;
    }
    case kSchema: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.schema_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}


void SnapshotItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.SnapshotItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.snapshots.v1beta1.SnapshotStoreItem store = 1 [json_name = "store"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_store(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.snapshots.v1beta1.SnapshotIAVLItem iavl = 2 [json_name = "iavl", (.gogoproto.customname) = "IAVL"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_iavl(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta extension = 3 [json_name = "extension"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload extension_payload = 4 [json_name = "extensionPayload"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_payload(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.snapshots.v1beta1.SnapshotKVItem kv = 5 [json_name = "kv", deprecated = true, (.gogoproto.customname) = "KV"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.snapshots.v1beta1.SnapshotSchema schema = 6 [json_name = "schema", deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_schema(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SnapshotItem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.SnapshotItem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (item_case()) {
    case kStore: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::store(this),
          _Internal::store(this).GetCachedSize(), target, stream);
      break;
    }
    case kIavl: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::iavl(this),
          _Internal::iavl(this).GetCachedSize(), target, stream);
      break;
    }
    case kExtension: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::extension(this),
          _Internal::extension(this).GetCachedSize(), target, stream);
      break;
    }
    case kExtensionPayload: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::extension_payload(this),
          _Internal::extension_payload(this).GetCachedSize(), target, stream);
      break;
    }
    case kKv: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::kv(this),
          _Internal::kv(this).GetCachedSize(), target, stream);
      break;
    }
    case kSchema: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::schema(this),
          _Internal::schema(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.SnapshotItem)
  return target;
}

::size_t SnapshotItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.SnapshotItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .cosmos.base.snapshots.v1beta1.SnapshotStoreItem store = 1 [json_name = "store"];
    case kStore: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.store_);
      break;
    }
    // .cosmos.base.snapshots.v1beta1.SnapshotIAVLItem iavl = 2 [json_name = "iavl", (.gogoproto.customname) = "IAVL"];
    case kIavl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.iavl_);
      break;
    }
    // .cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta extension = 3 [json_name = "extension"];
    case kExtension: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.extension_);
      break;
    }
    // .cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload extension_payload = 4 [json_name = "extensionPayload"];
    case kExtensionPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.extension_payload_);
      break;
    }
    // .cosmos.base.snapshots.v1beta1.SnapshotKVItem kv = 5 [json_name = "kv", deprecated = true, (.gogoproto.customname) = "KV"];
    case kKv: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.kv_);
      break;
    }
    // .cosmos.base.snapshots.v1beta1.SnapshotSchema schema = 6 [json_name = "schema", deprecated = true];
    case kSchema: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.schema_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotItem::GetClassData() const { return &_class_data_; }


void SnapshotItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotItem*>(&to_msg);
  auto& from = static_cast<const SnapshotItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.SnapshotItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kStore: {
      _this->_internal_mutable_store()->::cosmos::base::snapshots::v1beta1::SnapshotStoreItem::MergeFrom(
          from._internal_store());
      break;
    }
    case kIavl: {
      _this->_internal_mutable_iavl()->::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem::MergeFrom(
          from._internal_iavl());
      break;
    }
    case kExtension: {
      _this->_internal_mutable_extension()->::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta::MergeFrom(
          from._internal_extension());
      break;
    }
    case kExtensionPayload: {
      _this->_internal_mutable_extension_payload()->::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload::MergeFrom(
          from._internal_extension_payload());
      break;
    }
    case kKv: {
      _this->_internal_mutable_kv()->::cosmos::base::snapshots::v1beta1::SnapshotKVItem::MergeFrom(
          from._internal_kv());
      break;
    }
    case kSchema: {
      _this->_internal_mutable_schema()->::cosmos::base::snapshots::v1beta1::SnapshotSchema::MergeFrom(
          from._internal_schema());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotItem::CopyFrom(const SnapshotItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.SnapshotItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotItem::IsInitialized() const {
  return true;
}

void SnapshotItem::InternalSwap(SnapshotItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[2]);
}
// ===================================================================

class SnapshotStoreItem::_Internal {
 public:
};

SnapshotStoreItem::SnapshotStoreItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
}
SnapshotStoreItem::SnapshotStoreItem(const SnapshotStoreItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotStoreItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
}

inline void SnapshotStoreItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnapshotStoreItem::~SnapshotStoreItem() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotStoreItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SnapshotStoreItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotStoreItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotStoreItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.snapshots.v1beta1.SnapshotStoreItem.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SnapshotStoreItem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.snapshots.v1beta1.SnapshotStoreItem.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
  return target;
}

::size_t SnapshotStoreItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotStoreItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotStoreItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotStoreItem::GetClassData() const { return &_class_data_; }


void SnapshotStoreItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotStoreItem*>(&to_msg);
  auto& from = static_cast<const SnapshotStoreItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotStoreItem::CopyFrom(const SnapshotStoreItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.SnapshotStoreItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotStoreItem::IsInitialized() const {
  return true;
}

void SnapshotStoreItem::InternalSwap(SnapshotStoreItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotStoreItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[3]);
}
// ===================================================================

class SnapshotIAVLItem::_Internal {
 public:
};

SnapshotIAVLItem::SnapshotIAVLItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
}
SnapshotIAVLItem::SnapshotIAVLItem(const SnapshotIAVLItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotIAVLItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
}

inline void SnapshotIAVLItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , decltype(_impl_.version_) { ::int64_t{0} }

    , decltype(_impl_.height_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnapshotIAVLItem::~SnapshotIAVLItem() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotIAVLItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void SnapshotIAVLItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotIAVLItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  ::memset(&_impl_.version_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotIAVLItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 version = 3 [json_name = "version"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 height = 4 [json_name = "height"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SnapshotIAVLItem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // int64 version = 3 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_version(), target);
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
  return target;
}

::size_t SnapshotIAVLItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_value());
  }

  // int64 version = 3 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_version());
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotIAVLItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotIAVLItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotIAVLItem::GetClassData() const { return &_class_data_; }


void SnapshotIAVLItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotIAVLItem*>(&to_msg);
  auto& from = static_cast<const SnapshotIAVLItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotIAVLItem::CopyFrom(const SnapshotIAVLItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.SnapshotIAVLItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotIAVLItem::IsInitialized() const {
  return true;
}

void SnapshotIAVLItem::InternalSwap(SnapshotIAVLItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotIAVLItem, _impl_.height_)
      + sizeof(SnapshotIAVLItem::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SnapshotIAVLItem, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotIAVLItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[4]);
}
// ===================================================================

class SnapshotExtensionMeta::_Internal {
 public:
};

SnapshotExtensionMeta::SnapshotExtensionMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
}
SnapshotExtensionMeta::SnapshotExtensionMeta(const SnapshotExtensionMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotExtensionMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.format_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.format_ = from._impl_.format_;
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
}

inline void SnapshotExtensionMeta::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.format_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnapshotExtensionMeta::~SnapshotExtensionMeta() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotExtensionMeta::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SnapshotExtensionMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotExtensionMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.format_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotExtensionMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 format = 2 [json_name = "format"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SnapshotExtensionMeta::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
  return target;
}

::size_t SnapshotExtensionMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotExtensionMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotExtensionMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotExtensionMeta::GetClassData() const { return &_class_data_; }


void SnapshotExtensionMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotExtensionMeta*>(&to_msg);
  auto& from = static_cast<const SnapshotExtensionMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotExtensionMeta::CopyFrom(const SnapshotExtensionMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotExtensionMeta::IsInitialized() const {
  return true;
}

void SnapshotExtensionMeta::InternalSwap(SnapshotExtensionMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);

  swap(_impl_.format_, other->_impl_.format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotExtensionMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[5]);
}
// ===================================================================

class SnapshotExtensionPayload::_Internal {
 public:
};

SnapshotExtensionPayload::SnapshotExtensionPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
}
SnapshotExtensionPayload::SnapshotExtensionPayload(const SnapshotExtensionPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotExtensionPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
}

inline void SnapshotExtensionPayload::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnapshotExtensionPayload::~SnapshotExtensionPayload() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotExtensionPayload::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
}

void SnapshotExtensionPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotExtensionPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotExtensionPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1 [json_name = "payload"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SnapshotExtensionPayload::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1 [json_name = "payload"];
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
  return target;
}

::size_t SnapshotExtensionPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1 [json_name = "payload"];
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotExtensionPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotExtensionPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotExtensionPayload::GetClassData() const { return &_class_data_; }


void SnapshotExtensionPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotExtensionPayload*>(&to_msg);
  auto& from = static_cast<const SnapshotExtensionPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotExtensionPayload::CopyFrom(const SnapshotExtensionPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotExtensionPayload::IsInitialized() const {
  return true;
}

void SnapshotExtensionPayload::InternalSwap(SnapshotExtensionPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotExtensionPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[6]);
}
// ===================================================================

class SnapshotKVItem::_Internal {
 public:
};

SnapshotKVItem::SnapshotKVItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
}
SnapshotKVItem::SnapshotKVItem(const SnapshotKVItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotKVItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
}

inline void SnapshotKVItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnapshotKVItem::~SnapshotKVItem() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotKVItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void SnapshotKVItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotKVItem::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotKVItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SnapshotKVItem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
  return target;
}

::size_t SnapshotKVItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // bytes value = 2 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotKVItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotKVItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotKVItem::GetClassData() const { return &_class_data_; }


void SnapshotKVItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotKVItem*>(&to_msg);
  auto& from = static_cast<const SnapshotKVItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotKVItem::CopyFrom(const SnapshotKVItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.SnapshotKVItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotKVItem::IsInitialized() const {
  return true;
}

void SnapshotKVItem::InternalSwap(SnapshotKVItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotKVItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[7]);
}
// ===================================================================

class SnapshotSchema::_Internal {
 public:
};

SnapshotSchema::SnapshotSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.base.snapshots.v1beta1.SnapshotSchema)
}
SnapshotSchema::SnapshotSchema(const SnapshotSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotSchema* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.base.snapshots.v1beta1.SnapshotSchema)
}

inline void SnapshotSchema::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapshotSchema::~SnapshotSchema() {
  // @@protoc_insertion_point(destructor:cosmos.base.snapshots.v1beta1.SnapshotSchema)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotSchema::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_keys()->~RepeatedPtrField();
}

void SnapshotSchema::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.base.snapshots.v1beta1.SnapshotSchema)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotSchema::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes keys = 1 [json_name = "keys"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SnapshotSchema::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.base.snapshots.v1beta1.SnapshotSchema)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes keys = 1 [json_name = "keys"];
  for (int i = 0, n = this->_internal_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.base.snapshots.v1beta1.SnapshotSchema)
  return target;
}

::size_t SnapshotSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.base.snapshots.v1beta1.SnapshotSchema)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 1 [json_name = "keys"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_keys().size());
  for (int i = 0, n = _internal_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_keys().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotSchema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotSchema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotSchema::GetClassData() const { return &_class_data_; }


void SnapshotSchema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotSchema*>(&to_msg);
  auto& from = static_cast<const SnapshotSchema&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.base.snapshots.v1beta1.SnapshotSchema)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotSchema::CopyFrom(const SnapshotSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.base.snapshots.v1beta1.SnapshotSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotSchema::IsInitialized() const {
  return true;
}

void SnapshotSchema::InternalSwap(SnapshotSchema* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_keys()->InternalSwap(
      other->_internal_mutable_keys());
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotSchema::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_getter, &descriptor_table_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto_once,
      file_level_metadata_cosmos_2fbase_2fsnapshots_2fv1beta1_2fsnapshot_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace snapshots
}  // namespace base
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::Snapshot*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::Metadata*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::SnapshotItem*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::SnapshotItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::SnapshotItem >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::SnapshotStoreItem*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::SnapshotStoreItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::SnapshotStoreItem >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::SnapshotIAVLItem >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::SnapshotExtensionMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::SnapshotExtensionPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::SnapshotKVItem*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::SnapshotKVItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::SnapshotKVItem >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::base::snapshots::v1beta1::SnapshotSchema*
Arena::CreateMaybeMessage< ::cosmos::base::snapshots::v1beta1::SnapshotSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::base::snapshots::v1beta1::SnapshotSchema >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/capability/v1beta1/capability.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto;
namespace cosmos {
namespace capability {
namespace v1beta1 {
class Capability;
struct CapabilityDefaultTypeInternal;
extern CapabilityDefaultTypeInternal _Capability_default_instance_;
class CapabilityOwners;
struct CapabilityOwnersDefaultTypeInternal;
extern CapabilityOwnersDefaultTypeInternal _CapabilityOwners_default_instance_;
class Owner;
struct OwnerDefaultTypeInternal;
extern OwnerDefaultTypeInternal _Owner_default_instance_;
}  // namespace v1beta1
}  // namespace capability
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::capability::v1beta1::Capability* Arena::CreateMaybeMessage<::cosmos::capability::v1beta1::Capability>(Arena*);
template <>
::cosmos::capability::v1beta1::CapabilityOwners* Arena::CreateMaybeMessage<::cosmos::capability::v1beta1::CapabilityOwners>(Arena*);
template <>
::cosmos::capability::v1beta1::Owner* Arena::CreateMaybeMessage<::cosmos::capability::v1beta1::Owner>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace capability {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Capability final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.capability.v1beta1.Capability) */ {
 public:
  inline Capability() : Capability(nullptr) {}
  ~Capability() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Capability(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Capability(const Capability& from);
  Capability(Capability&& from) noexcept
    : Capability() {
    *this = ::std::move(from);
  }

  inline Capability& operator=(const Capability& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capability& operator=(Capability&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Capability& default_instance() {
    return *internal_default_instance();
  }
  static inline const Capability* internal_default_instance() {
    return reinterpret_cast<const Capability*>(
               &_Capability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Capability& a, Capability& b) {
    a.Swap(&b);
  }
  inline void Swap(Capability* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capability* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Capability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Capability>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Capability& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Capability& from) {
    Capability::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capability* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.capability.v1beta1.Capability";
  }
  protected:
  explicit Capability(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint64 index = 1 [json_name = "index"];
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.capability.v1beta1.Capability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto;
};// -------------------------------------------------------------------

class Owner final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.capability.v1beta1.Owner) */ {
 public:
  inline Owner() : Owner(nullptr) {}
  ~Owner() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Owner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Owner(const Owner& from);
  Owner(Owner&& from) noexcept
    : Owner() {
    *this = ::std::move(from);
  }

  inline Owner& operator=(const Owner& from) {
    CopyFrom(from);
    return *this;
  }
  inline Owner& operator=(Owner&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Owner& default_instance() {
    return *internal_default_instance();
  }
  static inline const Owner* internal_default_instance() {
    return reinterpret_cast<const Owner*>(
               &_Owner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Owner& a, Owner& b) {
    a.Swap(&b);
  }
  inline void Swap(Owner* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Owner* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Owner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Owner>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Owner& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Owner& from) {
    Owner::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Owner* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.capability.v1beta1.Owner";
  }
  protected:
  explicit Owner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string module = 1 [json_name = "module"];
  void clear_module() ;
  const std::string& module() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module(Arg_&& arg, Args_... args);
  std::string* mutable_module();
  PROTOBUF_NODISCARD std::string* release_module();
  void set_allocated_module(std::string* ptr);

  private:
  const std::string& _internal_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module(
      const std::string& value);
  std::string* _internal_mutable_module();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.capability.v1beta1.Owner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto;
};// -------------------------------------------------------------------

class CapabilityOwners final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.capability.v1beta1.CapabilityOwners) */ {
 public:
  inline CapabilityOwners() : CapabilityOwners(nullptr) {}
  ~CapabilityOwners() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CapabilityOwners(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CapabilityOwners(const CapabilityOwners& from);
  CapabilityOwners(CapabilityOwners&& from) noexcept
    : CapabilityOwners() {
    *this = ::std::move(from);
  }

  inline CapabilityOwners& operator=(const CapabilityOwners& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilityOwners& operator=(CapabilityOwners&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CapabilityOwners& default_instance() {
    return *internal_default_instance();
  }
  static inline const CapabilityOwners* internal_default_instance() {
    return reinterpret_cast<const CapabilityOwners*>(
               &_CapabilityOwners_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CapabilityOwners& a, CapabilityOwners& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilityOwners* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CapabilityOwners* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CapabilityOwners* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CapabilityOwners>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CapabilityOwners& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CapabilityOwners& from) {
    CapabilityOwners::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilityOwners* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.capability.v1beta1.CapabilityOwners";
  }
  protected:
  explicit CapabilityOwners(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnersFieldNumber = 1,
  };
  // repeated .cosmos.capability.v1beta1.Owner owners = 1 [json_name = "owners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int owners_size() const;
  private:
  int _internal_owners_size() const;

  public:
  void clear_owners() ;
  ::cosmos::capability::v1beta1::Owner* mutable_owners(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::capability::v1beta1::Owner >*
      mutable_owners();
  private:
  const ::cosmos::capability::v1beta1::Owner& _internal_owners(int index) const;
  ::cosmos::capability::v1beta1::Owner* _internal_add_owners();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::capability::v1beta1::Owner>& _internal_owners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::capability::v1beta1::Owner>* _internal_mutable_owners();
  public:
  const ::cosmos::capability::v1beta1::Owner& owners(int index) const;
  ::cosmos::capability::v1beta1::Owner* add_owners();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::capability::v1beta1::Owner >&
      owners() const;
  // @@protoc_insertion_point(class_scope:cosmos.capability.v1beta1.CapabilityOwners)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::capability::v1beta1::Owner > owners_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Capability

// uint64 index = 1 [json_name = "index"];
inline void Capability::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
}
inline ::uint64_t Capability::index() const {
  // @@protoc_insertion_point(field_get:cosmos.capability.v1beta1.Capability.index)
  return _internal_index();
}
inline void Capability::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:cosmos.capability.v1beta1.Capability.index)
}
inline ::uint64_t Capability::_internal_index() const {
  return _impl_.index_;
}
inline void Capability::_internal_set_index(::uint64_t value) {
  ;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// Owner

// string module = 1 [json_name = "module"];
inline void Owner::clear_module() {
  _impl_.module_.ClearToEmpty();
}
inline const std::string& Owner::module() const {
  // @@protoc_insertion_point(field_get:cosmos.capability.v1beta1.Owner.module)
  return _internal_module();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Owner::set_module(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.module_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.capability.v1beta1.Owner.module)
}
inline std::string* Owner::mutable_module() {
  std::string* _s = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:cosmos.capability.v1beta1.Owner.module)
  return _s;
}
inline const std::string& Owner::_internal_module() const {
  return _impl_.module_.Get();
}
inline void Owner::_internal_set_module(const std::string& value) {
  ;


  _impl_.module_.Set(value, GetArenaForAllocation());
}
inline std::string* Owner::_internal_mutable_module() {
  ;
  return _impl_.module_.Mutable( GetArenaForAllocation());
}
inline std::string* Owner::release_module() {
  // @@protoc_insertion_point(field_release:cosmos.capability.v1beta1.Owner.module)
  return _impl_.module_.Release();
}
inline void Owner::set_allocated_module(std::string* value) {
  _impl_.module_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_.IsDefault()) {
          _impl_.module_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.capability.v1beta1.Owner.module)
}

// string name = 2 [json_name = "name"];
inline void Owner::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Owner::name() const {
  // @@protoc_insertion_point(field_get:cosmos.capability.v1beta1.Owner.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Owner::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.capability.v1beta1.Owner.name)
}
inline std::string* Owner::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.capability.v1beta1.Owner.name)
  return _s;
}
inline const std::string& Owner::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Owner::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Owner::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Owner::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.capability.v1beta1.Owner.name)
  return _impl_.name_.Release();
}
inline void Owner::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.capability.v1beta1.Owner.name)
}

// -------------------------------------------------------------------

// CapabilityOwners

// repeated .cosmos.capability.v1beta1.Owner owners = 1 [json_name = "owners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int CapabilityOwners::_internal_owners_size() const {
  return _impl_.owners_.size();
}
inline int CapabilityOwners::owners_size() const {
  return _internal_owners_size();
}
inline void CapabilityOwners::clear_owners() {
  _internal_mutable_owners()->Clear();
}
inline ::cosmos::capability::v1beta1::Owner* CapabilityOwners::mutable_owners(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.capability.v1beta1.CapabilityOwners.owners)
  return _internal_mutable_owners()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::capability::v1beta1::Owner >*
CapabilityOwners::mutable_owners() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.capability.v1beta1.CapabilityOwners.owners)
  return _internal_mutable_owners();
}
inline const ::cosmos::capability::v1beta1::Owner& CapabilityOwners::_internal_owners(int index) const {
  return _internal_owners().Get(index);
}
inline const ::cosmos::capability::v1beta1::Owner& CapabilityOwners::owners(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.capability.v1beta1.CapabilityOwners.owners)
  return _internal_owners(index);
}
inline ::cosmos::capability::v1beta1::Owner* CapabilityOwners::_internal_add_owners() {
  return _internal_mutable_owners()->Add();
}
inline ::cosmos::capability::v1beta1::Owner* CapabilityOwners::add_owners() {
  ::cosmos::capability::v1beta1::Owner* _add = _internal_add_owners();
  // @@protoc_insertion_point(field_add:cosmos.capability.v1beta1.CapabilityOwners.owners)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::capability::v1beta1::Owner >&
CapabilityOwners::owners() const {
  // @@protoc_insertion_point(field_list:cosmos.capability.v1beta1.CapabilityOwners.owners)
  return _internal_owners();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::capability::v1beta1::Owner>&
CapabilityOwners::_internal_owners() const {
  return _impl_.owners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::capability::v1beta1::Owner>*
CapabilityOwners::_internal_mutable_owners() {
  return &_impl_.owners_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace capability
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto_2epb_2eh

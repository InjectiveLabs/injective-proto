// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/capability/v1beta1/genesis.proto

#include "cosmos/capability/v1beta1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace capability {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisOwners::GenesisOwners(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_owners_)*/nullptr
  , /*decltype(_impl_.index_)*/ ::uint64_t{0u}
} {}
struct GenesisOwnersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisOwnersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisOwnersDefaultTypeInternal() {}
  union {
    GenesisOwners _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisOwnersDefaultTypeInternal _GenesisOwners_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owners_)*/{}
  , /*decltype(_impl_.index_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1beta1
}  // namespace capability
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::capability::v1beta1::GenesisOwners, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::capability::v1beta1::GenesisOwners, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::capability::v1beta1::GenesisOwners, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::cosmos::capability::v1beta1::GenesisOwners, _impl_.index_owners_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::capability::v1beta1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::capability::v1beta1::GenesisState, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::cosmos::capability::v1beta1::GenesisState, _impl_.owners_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cosmos::capability::v1beta1::GenesisOwners)},
        { 12, -1, -1, sizeof(::cosmos::capability::v1beta1::GenesisState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::capability::v1beta1::_GenesisOwners_default_instance_._instance,
    &::cosmos::capability::v1beta1::_GenesisState_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'cosmos/capability/v1beta1/genesis.prot"
    "o\022\031cosmos.capability.v1beta1\032\024gogoproto/"
    "gogo.proto\032*cosmos/capability/v1beta1/ca"
    "pability.proto\032\021amino/amino.proto\"\200\001\n\rGe"
    "nesisOwners\022\024\n\005index\030\001 \001(\004R\005index\022Y\n\014ind"
    "ex_owners\030\002 \001(\0132+.cosmos.capability.v1be"
    "ta1.CapabilityOwnersB\t\310\336\037\000\250\347\260*\001R\013indexOw"
    "ners\"q\n\014GenesisState\022\024\n\005index\030\001 \001(\004R\005ind"
    "ex\022K\n\006owners\030\002 \003(\0132(.cosmos.capability.v"
    "1beta1.GenesisOwnersB\t\310\336\037\000\250\347\260*\001R\006ownersB"
    "\344\001\n\035com.cosmos.capability.v1beta1B\014Genes"
    "isProtoP\001Z/github.com/cosmos/cosmos-sdk/"
    "x/capability/types\242\002\003CCX\252\002\031Cosmos.Capabi"
    "lity.V1beta1\312\002\031Cosmos\\Capability\\V1beta1"
    "\342\002%Cosmos\\Capability\\V1beta1\\GPBMetadata"
    "\352\002\033Cosmos::Capability::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_deps[3] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fcapability_2fv1beta1_2fcapability_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto = {
    false,
    false,
    638,
    descriptor_table_protodef_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto,
    "cosmos/capability/v1beta1/genesis.proto",
    &descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_once,
    descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto::offsets,
    file_level_metadata_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto,
    file_level_enum_descriptors_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto,
    file_level_service_descriptors_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_getter() {
  return &descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto(&descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto);
namespace cosmos {
namespace capability {
namespace v1beta1 {
// ===================================================================

class GenesisOwners::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisOwners>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisOwners, _impl_._has_bits_);
  static const ::cosmos::capability::v1beta1::CapabilityOwners& index_owners(const GenesisOwners* msg);
  static void set_has_index_owners(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::capability::v1beta1::CapabilityOwners&
GenesisOwners::_Internal::index_owners(const GenesisOwners* msg) {
  return *msg->_impl_.index_owners_;
}
void GenesisOwners::clear_index_owners() {
  if (_impl_.index_owners_ != nullptr) _impl_.index_owners_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GenesisOwners::GenesisOwners(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.capability.v1beta1.GenesisOwners)
}
GenesisOwners::GenesisOwners(const GenesisOwners& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisOwners* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_owners_){nullptr}
    , decltype(_impl_.index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.index_owners_ = new ::cosmos::capability::v1beta1::CapabilityOwners(*from._impl_.index_owners_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:cosmos.capability.v1beta1.GenesisOwners)
}

inline void GenesisOwners::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_owners_){nullptr}
    , decltype(_impl_.index_) { ::uint64_t{0u} }

  };
}

GenesisOwners::~GenesisOwners() {
  // @@protoc_insertion_point(destructor:cosmos.capability.v1beta1.GenesisOwners)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisOwners::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.index_owners_;
}

void GenesisOwners::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisOwners::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.capability.v1beta1.GenesisOwners)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.index_owners_ != nullptr);
    _impl_.index_owners_->Clear();
  }
  _impl_.index_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisOwners::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.capability.v1beta1.CapabilityOwners index_owners = 2 [json_name = "indexOwners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_owners(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisOwners::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.capability.v1beta1.GenesisOwners)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_index(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.capability.v1beta1.CapabilityOwners index_owners = 2 [json_name = "indexOwners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::index_owners(this),
        _Internal::index_owners(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.capability.v1beta1.GenesisOwners)
  return target;
}

::size_t GenesisOwners::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.capability.v1beta1.GenesisOwners)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.capability.v1beta1.CapabilityOwners index_owners = 2 [json_name = "indexOwners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.index_owners_);
  }

  // uint64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisOwners::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisOwners::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisOwners::GetClassData() const { return &_class_data_; }


void GenesisOwners::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisOwners*>(&to_msg);
  auto& from = static_cast<const GenesisOwners&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.capability.v1beta1.GenesisOwners)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_index_owners()->::cosmos::capability::v1beta1::CapabilityOwners::MergeFrom(
        from._internal_index_owners());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisOwners::CopyFrom(const GenesisOwners& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.capability.v1beta1.GenesisOwners)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisOwners::IsInitialized() const {
  return true;
}

void GenesisOwners::InternalSwap(GenesisOwners* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisOwners, _impl_.index_)
      + sizeof(GenesisOwners::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(GenesisOwners, _impl_.index_owners_)>(
          reinterpret_cast<char*>(&_impl_.index_owners_),
          reinterpret_cast<char*>(&other->_impl_.index_owners_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisOwners::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto[0]);
}
// ===================================================================

class GenesisState::_Internal {
 public:
};

GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.capability.v1beta1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owners_){from._impl_.owners_}
    , decltype(_impl_.index_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:cosmos.capability.v1beta1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.owners_){arena}
    , decltype(_impl_.index_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:cosmos.capability.v1beta1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_owners()->~RepeatedPtrField();
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.capability.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_owners()->Clear();
  _impl_.index_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.capability.v1beta1.GenesisOwners owners = 2 [json_name = "owners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.capability.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_index(), target);
  }

  // repeated .cosmos.capability.v1beta1.GenesisOwners owners = 2 [json_name = "owners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owners_size()); i < n; i++) {
    const auto& repfield = this->_internal_owners(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.capability.v1beta1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.capability.v1beta1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.capability.v1beta1.GenesisOwners owners = 2 [json_name = "owners", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_owners_size();
  for (const auto& msg : this->_internal_owners()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.capability.v1beta1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_owners()->MergeFrom(from._internal_owners());
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.capability.v1beta1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_owners()->InternalSwap(other->_internal_mutable_owners());

  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fcapability_2fv1beta1_2fgenesis_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace capability
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::capability::v1beta1::GenesisOwners*
Arena::CreateMaybeMessage< ::cosmos::capability::v1beta1::GenesisOwners >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::capability::v1beta1::GenesisOwners >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::capability::v1beta1::GenesisState*
Arena::CreateMaybeMessage< ::cosmos::capability::v1beta1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::capability::v1beta1::GenesisState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

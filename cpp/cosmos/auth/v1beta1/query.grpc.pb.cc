// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/auth/v1beta1/query.proto

#include "cosmos/auth/v1beta1/query.pb.h"
#include "cosmos/auth/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace auth {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/cosmos.auth.v1beta1.Query/Accounts",
  "/cosmos.auth.v1beta1.Query/Account",
  "/cosmos.auth.v1beta1.Query/AccountAddressByID",
  "/cosmos.auth.v1beta1.Query/Params",
  "/cosmos.auth.v1beta1.Query/ModuleAccounts",
  "/cosmos.auth.v1beta1.Query/ModuleAccountByName",
  "/cosmos.auth.v1beta1.Query/Bech32Prefix",
  "/cosmos.auth.v1beta1.Query/AddressBytesToString",
  "/cosmos.auth.v1beta1.Query/AddressStringToBytes",
  "/cosmos.auth.v1beta1.Query/AccountInfo",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Accounts_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Account_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AccountAddressByID_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Params_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModuleAccounts_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModuleAccountByName_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Bech32Prefix_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddressBytesToString_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddressStringToBytes_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AccountInfo_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::QueryAccountsRequest, ::cosmos::auth::v1beta1::QueryAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Accounts_, context, request, response);
}

void Query::Stub::async::Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::QueryAccountsRequest, ::cosmos::auth::v1beta1::QueryAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Accounts_, context, request, response, std::move(f));
}

void Query::Stub::async::Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Accounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountsResponse>* Query::Stub::PrepareAsyncAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::QueryAccountsResponse, ::cosmos::auth::v1beta1::QueryAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Accounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountsResponse>* Query::Stub::AsyncAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::cosmos::auth::v1beta1::QueryAccountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::QueryAccountRequest, ::cosmos::auth::v1beta1::QueryAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Account_, context, request, response);
}

void Query::Stub::async::Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::QueryAccountRequest, ::cosmos::auth::v1beta1::QueryAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Account_, context, request, response, std::move(f));
}

void Query::Stub::async::Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Account_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountResponse>* Query::Stub::PrepareAsyncAccountRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::QueryAccountResponse, ::cosmos::auth::v1beta1::QueryAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Account_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountResponse>* Query::Stub::AsyncAccountRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AccountAddressByID_, context, request, response);
}

void Query::Stub::async::AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountAddressByID_, context, request, response, std::move(f));
}

void Query::Stub::async::AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountAddressByID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* Query::Stub::PrepareAsyncAccountAddressByIDRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse, ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AccountAddressByID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* Query::Stub::AsyncAccountAddressByIDRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccountAddressByIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::cosmos::auth::v1beta1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::QueryParamsRequest, ::cosmos::auth::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::QueryParamsRequest, ::cosmos::auth::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::QueryParamsResponse, ::cosmos::auth::v1beta1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModuleAccounts_, context, request, response);
}

void Query::Stub::async::ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModuleAccounts_, context, request, response, std::move(f));
}

void Query::Stub::async::ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModuleAccounts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* Query::Stub::PrepareAsyncModuleAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse, ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModuleAccounts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* Query::Stub::AsyncModuleAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModuleAccountsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ModuleAccountByName_, context, request, response);
}

void Query::Stub::async::ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModuleAccountByName_, context, request, response, std::move(f));
}

void Query::Stub::async::ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ModuleAccountByName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* Query::Stub::PrepareAsyncModuleAccountByNameRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse, ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ModuleAccountByName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* Query::Stub::AsyncModuleAccountByNameRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncModuleAccountByNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::cosmos::auth::v1beta1::Bech32PrefixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Bech32Prefix_, context, request, response);
}

void Query::Stub::async::Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::cosmos::auth::v1beta1::Bech32PrefixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Bech32Prefix_, context, request, response, std::move(f));
}

void Query::Stub::async::Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Bech32Prefix_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::Bech32PrefixResponse>* Query::Stub::PrepareAsyncBech32PrefixRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::Bech32PrefixResponse, ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Bech32Prefix_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::Bech32PrefixResponse>* Query::Stub::AsyncBech32PrefixRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBech32PrefixRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::cosmos::auth::v1beta1::AddressBytesToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddressBytesToString_, context, request, response);
}

void Query::Stub::async::AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::cosmos::auth::v1beta1::AddressBytesToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddressBytesToString_, context, request, response, std::move(f));
}

void Query::Stub::async::AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddressBytesToString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* Query::Stub::PrepareAsyncAddressBytesToStringRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::AddressBytesToStringResponse, ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddressBytesToString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* Query::Stub::AsyncAddressBytesToStringRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddressBytesToStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::cosmos::auth::v1beta1::AddressStringToBytesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddressStringToBytes_, context, request, response);
}

void Query::Stub::async::AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::cosmos::auth::v1beta1::AddressStringToBytesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddressStringToBytes_, context, request, response, std::move(f));
}

void Query::Stub::async::AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddressStringToBytes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* Query::Stub::PrepareAsyncAddressStringToBytesRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::AddressStringToBytesResponse, ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddressStringToBytes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* Query::Stub::AsyncAddressStringToBytesRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddressStringToBytesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::cosmos::auth::v1beta1::QueryAccountInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AccountInfo_, context, request, response);
}

void Query::Stub::async::AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::cosmos::auth::v1beta1::QueryAccountInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AccountInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* Query::Stub::PrepareAsyncAccountInfoRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::auth::v1beta1::QueryAccountInfoResponse, ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AccountInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* Query::Stub::AsyncAccountInfoRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAccountInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::QueryAccountsRequest, ::cosmos::auth::v1beta1::QueryAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::QueryAccountsRequest* req,
             ::cosmos::auth::v1beta1::QueryAccountsResponse* resp) {
               return service->Accounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::QueryAccountRequest, ::cosmos::auth::v1beta1::QueryAccountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::QueryAccountRequest* req,
             ::cosmos::auth::v1beta1::QueryAccountResponse* resp) {
               return service->Account(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* req,
             ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* resp) {
               return service->AccountAddressByID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::QueryParamsRequest, ::cosmos::auth::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::QueryParamsRequest* req,
             ::cosmos::auth::v1beta1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* req,
             ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* resp) {
               return service->ModuleAccounts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* req,
             ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* resp) {
               return service->ModuleAccountByName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::cosmos::auth::v1beta1::Bech32PrefixResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::Bech32PrefixRequest* req,
             ::cosmos::auth::v1beta1::Bech32PrefixResponse* resp) {
               return service->Bech32Prefix(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::cosmos::auth::v1beta1::AddressBytesToStringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* req,
             ::cosmos::auth::v1beta1::AddressBytesToStringResponse* resp) {
               return service->AddressBytesToString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::cosmos::auth::v1beta1::AddressStringToBytesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* req,
             ::cosmos::auth::v1beta1::AddressStringToBytesResponse* resp) {
               return service->AddressStringToBytes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::cosmos::auth::v1beta1::QueryAccountInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* req,
             ::cosmos::auth::v1beta1::QueryAccountInfoResponse* resp) {
               return service->AccountInfo(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Accounts(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Account(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AccountAddressByID(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ModuleAccounts(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ModuleAccountByName(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Bech32Prefix(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AddressBytesToString(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AddressStringToBytes(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::AccountInfo(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace auth
}  // namespace v1beta1


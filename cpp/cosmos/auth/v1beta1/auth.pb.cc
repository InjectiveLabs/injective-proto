// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/auth/v1beta1/auth.proto

#include "cosmos/auth/v1beta1/auth.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace auth {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR BaseAccount::BaseAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pub_key_)*/nullptr
  , /*decltype(_impl_.account_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}
} {}
struct BaseAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseAccountDefaultTypeInternal() {}
  union {
    BaseAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseAccountDefaultTypeInternal _BaseAccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ModuleAccount::ModuleAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.permissions_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_account_)*/nullptr} {}
struct ModuleAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleAccountDefaultTypeInternal() {}
  union {
    ModuleAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleAccountDefaultTypeInternal _ModuleAccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ModuleCredential::ModuleCredential(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.derivation_keys_)*/{}
  , /*decltype(_impl_.module_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ModuleCredentialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleCredentialDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleCredentialDefaultTypeInternal() {}
  union {
    ModuleCredential _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleCredentialDefaultTypeInternal _ModuleCredential_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_memo_characters_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tx_sig_limit_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.tx_size_cost_per_byte_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sig_verify_cost_ed25519_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.sig_verify_cost_secp256k1_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace auth
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fauth_2fv1beta1_2fauth_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fauth_2fv1beta1_2fauth_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fauth_2fv1beta1_2fauth_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fauth_2fv1beta1_2fauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::BaseAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::BaseAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::BaseAccount, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::BaseAccount, _impl_.pub_key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::BaseAccount, _impl_.account_number_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::BaseAccount, _impl_.sequence_),
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::ModuleAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::ModuleAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::ModuleAccount, _impl_.base_account_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::ModuleAccount, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::ModuleAccount, _impl_.permissions_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::ModuleCredential, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::ModuleCredential, _impl_.module_name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::ModuleCredential, _impl_.derivation_keys_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::Params, _impl_.max_memo_characters_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::Params, _impl_.tx_sig_limit_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::Params, _impl_.tx_size_cost_per_byte_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::Params, _impl_.sig_verify_cost_ed25519_),
    PROTOBUF_FIELD_OFFSET(::cosmos::auth::v1beta1::Params, _impl_.sig_verify_cost_secp256k1_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::cosmos::auth::v1beta1::BaseAccount)},
        { 16, 27, -1, sizeof(::cosmos::auth::v1beta1::ModuleAccount)},
        { 30, -1, -1, sizeof(::cosmos::auth::v1beta1::ModuleCredential)},
        { 40, -1, -1, sizeof(::cosmos::auth::v1beta1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::auth::v1beta1::_BaseAccount_default_instance_._instance,
    &::cosmos::auth::v1beta1::_ModuleAccount_default_instance_._instance,
    &::cosmos::auth::v1beta1::_ModuleCredential_default_instance_._instance,
    &::cosmos::auth::v1beta1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fauth_2fv1beta1_2fauth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036cosmos/auth/v1beta1/auth.proto\022\023cosmos"
    ".auth.v1beta1\032\021amino/amino.proto\032\031cosmos"
    "_proto/cosmos.proto\032\024gogoproto/gogo.prot"
    "o\032\031google/protobuf/any.proto\"\241\002\n\013BaseAcc"
    "ount\0222\n\007address\030\001 \001(\tB\030\322\264-\024cosmos.Addres"
    "sStringR\007address\022V\n\007pub_key\030\002 \001(\0132\024.goog"
    "le.protobuf.AnyB\'\352\336\037\024public_key,omitempt"
    "y\242\347\260*\npublic_keyR\006pubKey\022%\n\016account_numb"
    "er\030\003 \001(\004R\raccountNumber\022\032\n\010sequence\030\004 \001("
    "\004R\010sequence:C\210\240\037\000\350\240\037\000\312\264-\034cosmos.auth.v1b"
    "eta1.AccountI\212\347\260*\026cosmos-sdk/BaseAccount"
    "\"\331\001\n\rModuleAccount\022I\n\014base_account\030\001 \001(\013"
    "2 .cosmos.auth.v1beta1.BaseAccountB\004\320\336\037\001"
    "R\013baseAccount\022\022\n\004name\030\002 \001(\tR\004name\022 \n\013per"
    "missions\030\003 \003(\tR\013permissions:G\210\240\037\000\312\264-\"cos"
    "mos.auth.v1beta1.ModuleAccountI\212\347\260*\030cosm"
    "os-sdk/ModuleAccount\"\\\n\020ModuleCredential"
    "\022\037\n\013module_name\030\001 \001(\tR\nmoduleName\022\'\n\017der"
    "ivation_keys\030\002 \003(\014R\016derivationKeys\"\327\002\n\006P"
    "arams\022.\n\023max_memo_characters\030\001 \001(\004R\021maxM"
    "emoCharacters\022 \n\014tx_sig_limit\030\002 \001(\004R\ntxS"
    "igLimit\0220\n\025tx_size_cost_per_byte\030\003 \001(\004R\021"
    "txSizeCostPerByte\022O\n\027sig_verify_cost_ed2"
    "5519\030\004 \001(\004B\030\342\336\037\024SigVerifyCostED25519R\024si"
    "gVerifyCostEd25519\022U\n\031sig_verify_cost_se"
    "cp256k1\030\005 \001(\004B\032\342\336\037\026SigVerifyCostSecp256k"
    "1R\026sigVerifyCostSecp256k1:!\350\240\037\001\212\347\260*\030cosm"
    "os-sdk/x/auth/ParamsB\275\001\n\027com.cosmos.auth"
    ".v1beta1B\tAuthProtoP\001Z)github.com/cosmos"
    "/cosmos-sdk/x/auth/types\242\002\003CAX\252\002\023Cosmos."
    "Auth.V1beta1\312\002\023Cosmos\\Auth\\V1beta1\342\002\037Cos"
    "mos\\Auth\\V1beta1\\GPBMetadata\352\002\025Cosmos::A"
    "uth::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto = {
    false,
    false,
    1300,
    descriptor_table_protodef_cosmos_2fauth_2fv1beta1_2fauth_2eproto,
    "cosmos/auth/v1beta1/auth.proto",
    &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_once,
    descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fauth_2fv1beta1_2fauth_2eproto::offsets,
    file_level_metadata_cosmos_2fauth_2fv1beta1_2fauth_2eproto,
    file_level_enum_descriptors_cosmos_2fauth_2fv1beta1_2fauth_2eproto,
    file_level_service_descriptors_cosmos_2fauth_2fv1beta1_2fauth_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_getter() {
  return &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fauth_2fv1beta1_2fauth_2eproto(&descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto);
namespace cosmos {
namespace auth {
namespace v1beta1 {
// ===================================================================

class BaseAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BaseAccount, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& pub_key(const BaseAccount* msg);
  static void set_has_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
BaseAccount::_Internal::pub_key(const BaseAccount* msg) {
  return *msg->_impl_.pub_key_;
}
void BaseAccount::clear_pub_key() {
  if (_impl_.pub_key_ != nullptr) _impl_.pub_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BaseAccount::BaseAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.auth.v1beta1.BaseAccount)
}
BaseAccount::BaseAccount(const BaseAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.account_number_) {}

    , decltype(_impl_.sequence_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pub_key_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.pub_key_);
  }
  ::memcpy(&_impl_.account_number_, &from._impl_.account_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sequence_) -
    reinterpret_cast<char*>(&_impl_.account_number_)) + sizeof(_impl_.sequence_));
  // @@protoc_insertion_point(copy_constructor:cosmos.auth.v1beta1.BaseAccount)
}

inline void BaseAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.account_number_) { ::uint64_t{0u} }

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BaseAccount::~BaseAccount() {
  // @@protoc_insertion_point(destructor:cosmos.auth.v1beta1.BaseAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pub_key_;
}

void BaseAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.auth.v1beta1.BaseAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pub_key_ != nullptr);
    _impl_.pub_key_->Clear();
  }
  ::memset(&_impl_.account_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sequence_) -
      reinterpret_cast<char*>(&_impl_.account_number_)) + sizeof(_impl_.sequence_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.auth.v1beta1.BaseAccount.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any pub_key = 2 [json_name = "pubKey", (.gogoproto.jsontag) = "public_key,omitempty", (.amino.field_name) = "public_key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 account_number = 3 [json_name = "accountNumber"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.account_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 4 [json_name = "sequence"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BaseAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.auth.v1beta1.BaseAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.auth.v1beta1.BaseAccount.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any pub_key = 2 [json_name = "pubKey", (.gogoproto.jsontag) = "public_key,omitempty", (.amino.field_name) = "public_key"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  // uint64 account_number = 3 [json_name = "accountNumber"];
  if (this->_internal_account_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_account_number(), target);
  }

  // uint64 sequence = 4 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.auth.v1beta1.BaseAccount)
  return target;
}

::size_t BaseAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.auth.v1beta1.BaseAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .google.protobuf.Any pub_key = 2 [json_name = "pubKey", (.gogoproto.jsontag) = "public_key,omitempty", (.amino.field_name) = "public_key"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_key_);
  }

  // uint64 account_number = 3 [json_name = "accountNumber"];
  if (this->_internal_account_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_account_number());
  }

  // uint64 sequence = 4 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseAccount::GetClassData() const { return &_class_data_; }


void BaseAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseAccount*>(&to_msg);
  auto& from = static_cast<const BaseAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.auth.v1beta1.BaseAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pub_key()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_pub_key());
  }
  if (from._internal_account_number() != 0) {
    _this->_internal_set_account_number(from._internal_account_number());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseAccount::CopyFrom(const BaseAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.auth.v1beta1.BaseAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseAccount::IsInitialized() const {
  return true;
}

void BaseAccount::InternalSwap(BaseAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseAccount, _impl_.sequence_)
      + sizeof(BaseAccount::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(BaseAccount, _impl_.pub_key_)>(
          reinterpret_cast<char*>(&_impl_.pub_key_),
          reinterpret_cast<char*>(&other->_impl_.pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_getter, &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_once,
      file_level_metadata_cosmos_2fauth_2fv1beta1_2fauth_2eproto[0]);
}
// ===================================================================

class ModuleAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<ModuleAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModuleAccount, _impl_._has_bits_);
  static const ::cosmos::auth::v1beta1::BaseAccount& base_account(const ModuleAccount* msg);
  static void set_has_base_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::auth::v1beta1::BaseAccount&
ModuleAccount::_Internal::base_account(const ModuleAccount* msg) {
  return *msg->_impl_.base_account_;
}
ModuleAccount::ModuleAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.auth.v1beta1.ModuleAccount)
}
ModuleAccount::ModuleAccount(const ModuleAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.permissions_){from._impl_.permissions_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.base_account_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_account_ = new ::cosmos::auth::v1beta1::BaseAccount(*from._impl_.base_account_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.auth.v1beta1.ModuleAccount)
}

inline void ModuleAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.permissions_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.base_account_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleAccount::~ModuleAccount() {
  // @@protoc_insertion_point(destructor:cosmos.auth.v1beta1.ModuleAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_permissions()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_account_;
}

void ModuleAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.auth.v1beta1.ModuleAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_permissions()->Clear();
  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_account_ != nullptr);
    _impl_.base_account_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_account(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.auth.v1beta1.ModuleAccount.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string permissions = 3 [json_name = "permissions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_permissions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.auth.v1beta1.ModuleAccount.permissions"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModuleAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.auth.v1beta1.ModuleAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_account(this),
        _Internal::base_account(this).GetCachedSize(), target, stream);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.auth.v1beta1.ModuleAccount.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string permissions = 3 [json_name = "permissions"];
  for (int i = 0, n = this->_internal_permissions_size(); i < n; ++i) {
    const auto& s = this->_internal_permissions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.auth.v1beta1.ModuleAccount.permissions");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.auth.v1beta1.ModuleAccount)
  return target;
}

::size_t ModuleAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.auth.v1beta1.ModuleAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string permissions = 3 [json_name = "permissions"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_permissions().size());
  for (int i = 0, n = _internal_permissions().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_permissions().Get(i));
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleAccount::GetClassData() const { return &_class_data_; }


void ModuleAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleAccount*>(&to_msg);
  auto& from = static_cast<const ModuleAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.auth.v1beta1.ModuleAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_permissions()->MergeFrom(from._internal_permissions());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_base_account()->::cosmos::auth::v1beta1::BaseAccount::MergeFrom(
        from._internal_base_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleAccount::CopyFrom(const ModuleAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.auth.v1beta1.ModuleAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleAccount::IsInitialized() const {
  return true;
}

void ModuleAccount::InternalSwap(ModuleAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_permissions()->InternalSwap(
      other->_internal_mutable_permissions());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.base_account_, other->_impl_.base_account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_getter, &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_once,
      file_level_metadata_cosmos_2fauth_2fv1beta1_2fauth_2eproto[1]);
}
// ===================================================================

class ModuleCredential::_Internal {
 public:
};

ModuleCredential::ModuleCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.auth.v1beta1.ModuleCredential)
}
ModuleCredential::ModuleCredential(const ModuleCredential& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ModuleCredential* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.derivation_keys_){from._impl_.derivation_keys_}
    , decltype(_impl_.module_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_module_name().empty()) {
    _this->_impl_.module_name_.Set(from._internal_module_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.auth.v1beta1.ModuleCredential)
}

inline void ModuleCredential::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.derivation_keys_){arena}
    , decltype(_impl_.module_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.module_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleCredential::~ModuleCredential() {
  // @@protoc_insertion_point(destructor:cosmos.auth.v1beta1.ModuleCredential)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleCredential::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_derivation_keys()->~RepeatedPtrField();
  _impl_.module_name_.Destroy();
}

void ModuleCredential::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ModuleCredential::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.auth.v1beta1.ModuleCredential)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_derivation_keys()->Clear();
  _impl_.module_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleCredential::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string module_name = 1 [json_name = "moduleName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_module_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.auth.v1beta1.ModuleCredential.module_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bytes derivation_keys = 2 [json_name = "derivationKeys"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_derivation_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ModuleCredential::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.auth.v1beta1.ModuleCredential)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string module_name = 1 [json_name = "moduleName"];
  if (!this->_internal_module_name().empty()) {
    const std::string& _s = this->_internal_module_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.auth.v1beta1.ModuleCredential.module_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated bytes derivation_keys = 2 [json_name = "derivationKeys"];
  for (int i = 0, n = this->_internal_derivation_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_derivation_keys(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.auth.v1beta1.ModuleCredential)
  return target;
}

::size_t ModuleCredential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.auth.v1beta1.ModuleCredential)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes derivation_keys = 2 [json_name = "derivationKeys"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_derivation_keys().size());
  for (int i = 0, n = _internal_derivation_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_derivation_keys().Get(i));
  }

  // string module_name = 1 [json_name = "moduleName"];
  if (!this->_internal_module_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_module_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleCredential::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ModuleCredential::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleCredential::GetClassData() const { return &_class_data_; }


void ModuleCredential::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ModuleCredential*>(&to_msg);
  auto& from = static_cast<const ModuleCredential&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.auth.v1beta1.ModuleCredential)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_derivation_keys()->MergeFrom(from._internal_derivation_keys());
  if (!from._internal_module_name().empty()) {
    _this->_internal_set_module_name(from._internal_module_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleCredential::CopyFrom(const ModuleCredential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.auth.v1beta1.ModuleCredential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleCredential::IsInitialized() const {
  return true;
}

void ModuleCredential::InternalSwap(ModuleCredential* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_derivation_keys()->InternalSwap(
      other->_internal_mutable_derivation_keys());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.module_name_, lhs_arena,
                                       &other->_impl_.module_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleCredential::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_getter, &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_once,
      file_level_metadata_cosmos_2fauth_2fv1beta1_2fauth_2eproto[2]);
}
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.auth.v1beta1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.auth.v1beta1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.max_memo_characters_) { ::uint64_t{0u} }

    , decltype(_impl_.tx_sig_limit_) { ::uint64_t{0u} }

    , decltype(_impl_.tx_size_cost_per_byte_) { ::uint64_t{0u} }

    , decltype(_impl_.sig_verify_cost_ed25519_) { ::uint64_t{0u} }

    , decltype(_impl_.sig_verify_cost_secp256k1_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:cosmos.auth.v1beta1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.auth.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_memo_characters_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sig_verify_cost_secp256k1_) -
      reinterpret_cast<char*>(&_impl_.max_memo_characters_)) + sizeof(_impl_.sig_verify_cost_secp256k1_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 max_memo_characters = 1 [json_name = "maxMemoCharacters"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.max_memo_characters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 tx_sig_limit = 2 [json_name = "txSigLimit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.tx_sig_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 tx_size_cost_per_byte = 3 [json_name = "txSizeCostPerByte"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.tx_size_cost_per_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sig_verify_cost_ed25519 = 4 [json_name = "sigVerifyCostEd25519", (.gogoproto.customname) = "SigVerifyCostED25519"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.sig_verify_cost_ed25519_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sig_verify_cost_secp256k1 = 5 [json_name = "sigVerifyCostSecp256k1", (.gogoproto.customname) = "SigVerifyCostSecp256k1"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.sig_verify_cost_secp256k1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.auth.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_memo_characters = 1 [json_name = "maxMemoCharacters"];
  if (this->_internal_max_memo_characters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_max_memo_characters(), target);
  }

  // uint64 tx_sig_limit = 2 [json_name = "txSigLimit"];
  if (this->_internal_tx_sig_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_tx_sig_limit(), target);
  }

  // uint64 tx_size_cost_per_byte = 3 [json_name = "txSizeCostPerByte"];
  if (this->_internal_tx_size_cost_per_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_tx_size_cost_per_byte(), target);
  }

  // uint64 sig_verify_cost_ed25519 = 4 [json_name = "sigVerifyCostEd25519", (.gogoproto.customname) = "SigVerifyCostED25519"];
  if (this->_internal_sig_verify_cost_ed25519() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_sig_verify_cost_ed25519(), target);
  }

  // uint64 sig_verify_cost_secp256k1 = 5 [json_name = "sigVerifyCostSecp256k1", (.gogoproto.customname) = "SigVerifyCostSecp256k1"];
  if (this->_internal_sig_verify_cost_secp256k1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_sig_verify_cost_secp256k1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.auth.v1beta1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.auth.v1beta1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max_memo_characters = 1 [json_name = "maxMemoCharacters"];
  if (this->_internal_max_memo_characters() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_memo_characters());
  }

  // uint64 tx_sig_limit = 2 [json_name = "txSigLimit"];
  if (this->_internal_tx_sig_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_tx_sig_limit());
  }

  // uint64 tx_size_cost_per_byte = 3 [json_name = "txSizeCostPerByte"];
  if (this->_internal_tx_size_cost_per_byte() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_tx_size_cost_per_byte());
  }

  // uint64 sig_verify_cost_ed25519 = 4 [json_name = "sigVerifyCostEd25519", (.gogoproto.customname) = "SigVerifyCostED25519"];
  if (this->_internal_sig_verify_cost_ed25519() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sig_verify_cost_ed25519());
  }

  // uint64 sig_verify_cost_secp256k1 = 5 [json_name = "sigVerifyCostSecp256k1", (.gogoproto.customname) = "SigVerifyCostSecp256k1"];
  if (this->_internal_sig_verify_cost_secp256k1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sig_verify_cost_secp256k1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.auth.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_memo_characters() != 0) {
    _this->_internal_set_max_memo_characters(from._internal_max_memo_characters());
  }
  if (from._internal_tx_sig_limit() != 0) {
    _this->_internal_set_tx_sig_limit(from._internal_tx_sig_limit());
  }
  if (from._internal_tx_size_cost_per_byte() != 0) {
    _this->_internal_set_tx_size_cost_per_byte(from._internal_tx_size_cost_per_byte());
  }
  if (from._internal_sig_verify_cost_ed25519() != 0) {
    _this->_internal_set_sig_verify_cost_ed25519(from._internal_sig_verify_cost_ed25519());
  }
  if (from._internal_sig_verify_cost_secp256k1() != 0) {
    _this->_internal_set_sig_verify_cost_secp256k1(from._internal_sig_verify_cost_secp256k1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.auth.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, _impl_.sig_verify_cost_secp256k1_)
      + sizeof(Params::_impl_.sig_verify_cost_secp256k1_)
      - PROTOBUF_FIELD_OFFSET(Params, _impl_.max_memo_characters_)>(
          reinterpret_cast<char*>(&_impl_.max_memo_characters_),
          reinterpret_cast<char*>(&other->_impl_.max_memo_characters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_getter, &descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto_once,
      file_level_metadata_cosmos_2fauth_2fv1beta1_2fauth_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace auth
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::auth::v1beta1::BaseAccount*
Arena::CreateMaybeMessage< ::cosmos::auth::v1beta1::BaseAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::auth::v1beta1::BaseAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::auth::v1beta1::ModuleAccount*
Arena::CreateMaybeMessage< ::cosmos::auth::v1beta1::ModuleAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::auth::v1beta1::ModuleAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::auth::v1beta1::ModuleCredential*
Arena::CreateMaybeMessage< ::cosmos::auth::v1beta1::ModuleCredential >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::auth::v1beta1::ModuleCredential >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::auth::v1beta1::Params*
Arena::CreateMaybeMessage< ::cosmos::auth::v1beta1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::auth::v1beta1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

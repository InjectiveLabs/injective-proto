// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/auth/v1beta1/auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauth_2fv1beta1_2fauth_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauth_2fv1beta1_2fauth_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "amino/amino.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fauth_2fv1beta1_2fauth_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fauth_2fv1beta1_2fauth_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto;
namespace cosmos {
namespace auth {
namespace v1beta1 {
class BaseAccount;
struct BaseAccountDefaultTypeInternal;
extern BaseAccountDefaultTypeInternal _BaseAccount_default_instance_;
class ModuleAccount;
struct ModuleAccountDefaultTypeInternal;
extern ModuleAccountDefaultTypeInternal _ModuleAccount_default_instance_;
class ModuleCredential;
struct ModuleCredentialDefaultTypeInternal;
extern ModuleCredentialDefaultTypeInternal _ModuleCredential_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace auth
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::auth::v1beta1::BaseAccount* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::BaseAccount>(Arena*);
template <>
::cosmos::auth::v1beta1::ModuleAccount* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::ModuleAccount>(Arena*);
template <>
::cosmos::auth::v1beta1::ModuleCredential* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::ModuleCredential>(Arena*);
template <>
::cosmos::auth::v1beta1::Params* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::Params>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace auth {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class BaseAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.BaseAccount) */ {
 public:
  inline BaseAccount() : BaseAccount(nullptr) {}
  ~BaseAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BaseAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseAccount(const BaseAccount& from);
  BaseAccount(BaseAccount&& from) noexcept
    : BaseAccount() {
    *this = ::std::move(from);
  }

  inline BaseAccount& operator=(const BaseAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseAccount& operator=(BaseAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseAccount* internal_default_instance() {
    return reinterpret_cast<const BaseAccount*>(
               &_BaseAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseAccount& a, BaseAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseAccount& from) {
    BaseAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.BaseAccount";
  }
  protected:
  explicit BaseAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPubKeyFieldNumber = 2,
    kAccountNumberFieldNumber = 3,
    kSequenceFieldNumber = 4,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .google.protobuf.Any pub_key = 2 [json_name = "pubKey", (.gogoproto.jsontag) = "public_key,omitempty", (.amino.field_name) = "public_key"];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& pub_key() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_pub_key();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_pub_key();
  void set_allocated_pub_key(::PROTOBUF_NAMESPACE_ID::Any* pub_key);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_pub_key() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_pub_key();
  public:
  void unsafe_arena_set_allocated_pub_key(
      ::PROTOBUF_NAMESPACE_ID::Any* pub_key);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_pub_key();
  // uint64 account_number = 3 [json_name = "accountNumber"];
  void clear_account_number() ;
  ::uint64_t account_number() const;
  void set_account_number(::uint64_t value);

  private:
  ::uint64_t _internal_account_number() const;
  void _internal_set_account_number(::uint64_t value);

  public:
  // uint64 sequence = 4 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.BaseAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::Any* pub_key_;
    ::uint64_t account_number_;
    ::uint64_t sequence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fauth_2eproto;
};// -------------------------------------------------------------------

class ModuleAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.ModuleAccount) */ {
 public:
  inline ModuleAccount() : ModuleAccount(nullptr) {}
  ~ModuleAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleAccount(const ModuleAccount& from);
  ModuleAccount(ModuleAccount&& from) noexcept
    : ModuleAccount() {
    *this = ::std::move(from);
  }

  inline ModuleAccount& operator=(const ModuleAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleAccount& operator=(ModuleAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleAccount* internal_default_instance() {
    return reinterpret_cast<const ModuleAccount*>(
               &_ModuleAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ModuleAccount& a, ModuleAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModuleAccount& from) {
    ModuleAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.ModuleAccount";
  }
  protected:
  explicit ModuleAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 3,
    kNameFieldNumber = 2,
    kBaseAccountFieldNumber = 1,
  };
  // repeated string permissions = 3 [json_name = "permissions"];
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;

  public:
  void clear_permissions() ;
  const std::string& permissions(int index) const;
  std::string* mutable_permissions(int index);
  void set_permissions(int index, const std::string& value);
  void set_permissions(int index, std::string&& value);
  void set_permissions(int index, const char* value);
  void set_permissions(int index, const char* value, std::size_t size);
  void set_permissions(int index, absl::string_view value);
  std::string* add_permissions();
  void add_permissions(const std::string& value);
  void add_permissions(std::string&& value);
  void add_permissions(const char* value);
  void add_permissions(const char* value, std::size_t size);
  void add_permissions(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_permissions();

  private:
  const std::string& _internal_permissions(int index) const;
  std::string* _internal_add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_permissions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_permissions();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  bool has_base_account() const;
  void clear_base_account() ;
  const ::cosmos::auth::v1beta1::BaseAccount& base_account() const;
  PROTOBUF_NODISCARD ::cosmos::auth::v1beta1::BaseAccount* release_base_account();
  ::cosmos::auth::v1beta1::BaseAccount* mutable_base_account();
  void set_allocated_base_account(::cosmos::auth::v1beta1::BaseAccount* base_account);
  private:
  const ::cosmos::auth::v1beta1::BaseAccount& _internal_base_account() const;
  ::cosmos::auth::v1beta1::BaseAccount* _internal_mutable_base_account();
  public:
  void unsafe_arena_set_allocated_base_account(
      ::cosmos::auth::v1beta1::BaseAccount* base_account);
  ::cosmos::auth::v1beta1::BaseAccount* unsafe_arena_release_base_account();
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.ModuleAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> permissions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::cosmos::auth::v1beta1::BaseAccount* base_account_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fauth_2eproto;
};// -------------------------------------------------------------------

class ModuleCredential final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.ModuleCredential) */ {
 public:
  inline ModuleCredential() : ModuleCredential(nullptr) {}
  ~ModuleCredential() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModuleCredential(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleCredential(const ModuleCredential& from);
  ModuleCredential(ModuleCredential&& from) noexcept
    : ModuleCredential() {
    *this = ::std::move(from);
  }

  inline ModuleCredential& operator=(const ModuleCredential& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleCredential& operator=(ModuleCredential&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleCredential& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleCredential* internal_default_instance() {
    return reinterpret_cast<const ModuleCredential*>(
               &_ModuleCredential_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModuleCredential& a, ModuleCredential& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleCredential* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleCredential* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleCredential* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleCredential>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleCredential& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModuleCredential& from) {
    ModuleCredential::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleCredential* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.ModuleCredential";
  }
  protected:
  explicit ModuleCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDerivationKeysFieldNumber = 2,
    kModuleNameFieldNumber = 1,
  };
  // repeated bytes derivation_keys = 2 [json_name = "derivationKeys"];
  int derivation_keys_size() const;
  private:
  int _internal_derivation_keys_size() const;

  public:
  void clear_derivation_keys() ;
  const std::string& derivation_keys(int index) const;
  std::string* mutable_derivation_keys(int index);
  void set_derivation_keys(int index, const std::string& value);
  void set_derivation_keys(int index, std::string&& value);
  void set_derivation_keys(int index, const char* value);
  void set_derivation_keys(int index, const void* value, std::size_t size);
  void set_derivation_keys(int index, absl::string_view value);
  std::string* add_derivation_keys();
  void add_derivation_keys(const std::string& value);
  void add_derivation_keys(std::string&& value);
  void add_derivation_keys(const char* value);
  void add_derivation_keys(const void* value, std::size_t size);
  void add_derivation_keys(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& derivation_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_derivation_keys();

  private:
  const std::string& _internal_derivation_keys(int index) const;
  std::string* _internal_add_derivation_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_derivation_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_derivation_keys();

  public:
  // string module_name = 1 [json_name = "moduleName"];
  void clear_module_name() ;
  const std::string& module_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_module_name(Arg_&& arg, Args_... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* ptr);

  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(
      const std::string& value);
  std::string* _internal_mutable_module_name();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.ModuleCredential)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> derivation_keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fauth_2eproto;
};// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxMemoCharactersFieldNumber = 1,
    kTxSigLimitFieldNumber = 2,
    kTxSizeCostPerByteFieldNumber = 3,
    kSigVerifyCostEd25519FieldNumber = 4,
    kSigVerifyCostSecp256K1FieldNumber = 5,
  };
  // uint64 max_memo_characters = 1 [json_name = "maxMemoCharacters"];
  void clear_max_memo_characters() ;
  ::uint64_t max_memo_characters() const;
  void set_max_memo_characters(::uint64_t value);

  private:
  ::uint64_t _internal_max_memo_characters() const;
  void _internal_set_max_memo_characters(::uint64_t value);

  public:
  // uint64 tx_sig_limit = 2 [json_name = "txSigLimit"];
  void clear_tx_sig_limit() ;
  ::uint64_t tx_sig_limit() const;
  void set_tx_sig_limit(::uint64_t value);

  private:
  ::uint64_t _internal_tx_sig_limit() const;
  void _internal_set_tx_sig_limit(::uint64_t value);

  public:
  // uint64 tx_size_cost_per_byte = 3 [json_name = "txSizeCostPerByte"];
  void clear_tx_size_cost_per_byte() ;
  ::uint64_t tx_size_cost_per_byte() const;
  void set_tx_size_cost_per_byte(::uint64_t value);

  private:
  ::uint64_t _internal_tx_size_cost_per_byte() const;
  void _internal_set_tx_size_cost_per_byte(::uint64_t value);

  public:
  // uint64 sig_verify_cost_ed25519 = 4 [json_name = "sigVerifyCostEd25519", (.gogoproto.customname) = "SigVerifyCostED25519"];
  void clear_sig_verify_cost_ed25519() ;
  ::uint64_t sig_verify_cost_ed25519() const;
  void set_sig_verify_cost_ed25519(::uint64_t value);

  private:
  ::uint64_t _internal_sig_verify_cost_ed25519() const;
  void _internal_set_sig_verify_cost_ed25519(::uint64_t value);

  public:
  // uint64 sig_verify_cost_secp256k1 = 5 [json_name = "sigVerifyCostSecp256k1", (.gogoproto.customname) = "SigVerifyCostSecp256k1"];
  void clear_sig_verify_cost_secp256k1() ;
  ::uint64_t sig_verify_cost_secp256k1() const;
  void set_sig_verify_cost_secp256k1(::uint64_t value);

  private:
  ::uint64_t _internal_sig_verify_cost_secp256k1() const;
  void _internal_set_sig_verify_cost_secp256k1(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t max_memo_characters_;
    ::uint64_t tx_sig_limit_;
    ::uint64_t tx_size_cost_per_byte_;
    ::uint64_t sig_verify_cost_ed25519_;
    ::uint64_t sig_verify_cost_secp256k1_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fauth_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BaseAccount

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void BaseAccount::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& BaseAccount::address() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.BaseAccount.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaseAccount::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.BaseAccount.address)
}
inline std::string* BaseAccount::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.BaseAccount.address)
  return _s;
}
inline const std::string& BaseAccount::_internal_address() const {
  return _impl_.address_.Get();
}
inline void BaseAccount::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* BaseAccount::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* BaseAccount::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.BaseAccount.address)
  return _impl_.address_.Release();
}
inline void BaseAccount::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.BaseAccount.address)
}

// .google.protobuf.Any pub_key = 2 [json_name = "pubKey", (.gogoproto.jsontag) = "public_key,omitempty", (.amino.field_name) = "public_key"];
inline bool BaseAccount::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& BaseAccount::_internal_pub_key() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& BaseAccount::pub_key() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.BaseAccount.pub_key)
  return _internal_pub_key();
}
inline void BaseAccount::unsafe_arena_set_allocated_pub_key(
    ::PROTOBUF_NAMESPACE_ID::Any* pub_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = pub_key;
  if (pub_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.auth.v1beta1.BaseAccount.pub_key)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* BaseAccount::release_pub_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* BaseAccount::unsafe_arena_release_pub_key() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.BaseAccount.pub_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* BaseAccount::_internal_mutable_pub_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pub_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.pub_key_ = p;
  }
  return _impl_.pub_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* BaseAccount::mutable_pub_key() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.BaseAccount.pub_key)
  return _msg;
}
inline void BaseAccount::set_allocated_pub_key(::PROTOBUF_NAMESPACE_ID::Any* pub_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  if (pub_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_key));
    if (message_arena != submessage_arena) {
      pub_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pub_key_ = pub_key;
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.BaseAccount.pub_key)
}

// uint64 account_number = 3 [json_name = "accountNumber"];
inline void BaseAccount::clear_account_number() {
  _impl_.account_number_ = ::uint64_t{0u};
}
inline ::uint64_t BaseAccount::account_number() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.BaseAccount.account_number)
  return _internal_account_number();
}
inline void BaseAccount::set_account_number(::uint64_t value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.BaseAccount.account_number)
}
inline ::uint64_t BaseAccount::_internal_account_number() const {
  return _impl_.account_number_;
}
inline void BaseAccount::_internal_set_account_number(::uint64_t value) {
  ;
  _impl_.account_number_ = value;
}

// uint64 sequence = 4 [json_name = "sequence"];
inline void BaseAccount::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t BaseAccount::sequence() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.BaseAccount.sequence)
  return _internal_sequence();
}
inline void BaseAccount::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.BaseAccount.sequence)
}
inline ::uint64_t BaseAccount::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void BaseAccount::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// ModuleAccount

// .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
inline bool ModuleAccount::has_base_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_account_ != nullptr);
  return value;
}
inline void ModuleAccount::clear_base_account() {
  if (_impl_.base_account_ != nullptr) _impl_.base_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::auth::v1beta1::BaseAccount& ModuleAccount::_internal_base_account() const {
  const ::cosmos::auth::v1beta1::BaseAccount* p = _impl_.base_account_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::auth::v1beta1::BaseAccount&>(
      ::cosmos::auth::v1beta1::_BaseAccount_default_instance_);
}
inline const ::cosmos::auth::v1beta1::BaseAccount& ModuleAccount::base_account() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.ModuleAccount.base_account)
  return _internal_base_account();
}
inline void ModuleAccount::unsafe_arena_set_allocated_base_account(
    ::cosmos::auth::v1beta1::BaseAccount* base_account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_account_);
  }
  _impl_.base_account_ = base_account;
  if (base_account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.auth.v1beta1.ModuleAccount.base_account)
}
inline ::cosmos::auth::v1beta1::BaseAccount* ModuleAccount::release_base_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* temp = _impl_.base_account_;
  _impl_.base_account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::auth::v1beta1::BaseAccount* ModuleAccount::unsafe_arena_release_base_account() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.ModuleAccount.base_account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* temp = _impl_.base_account_;
  _impl_.base_account_ = nullptr;
  return temp;
}
inline ::cosmos::auth::v1beta1::BaseAccount* ModuleAccount::_internal_mutable_base_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_account_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::auth::v1beta1::BaseAccount>(GetArenaForAllocation());
    _impl_.base_account_ = p;
  }
  return _impl_.base_account_;
}
inline ::cosmos::auth::v1beta1::BaseAccount* ModuleAccount::mutable_base_account() {
  ::cosmos::auth::v1beta1::BaseAccount* _msg = _internal_mutable_base_account();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.ModuleAccount.base_account)
  return _msg;
}
inline void ModuleAccount::set_allocated_base_account(::cosmos::auth::v1beta1::BaseAccount* base_account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_account_;
  }
  if (base_account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_account);
    if (message_arena != submessage_arena) {
      base_account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_account_ = base_account;
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.ModuleAccount.base_account)
}

// string name = 2 [json_name = "name"];
inline void ModuleAccount::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ModuleAccount::name() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.ModuleAccount.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModuleAccount::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.ModuleAccount.name)
}
inline std::string* ModuleAccount::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.ModuleAccount.name)
  return _s;
}
inline const std::string& ModuleAccount::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ModuleAccount::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleAccount::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* ModuleAccount::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.ModuleAccount.name)
  return _impl_.name_.Release();
}
inline void ModuleAccount::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.ModuleAccount.name)
}

// repeated string permissions = 3 [json_name = "permissions"];
inline int ModuleAccount::_internal_permissions_size() const {
  return _impl_.permissions_.size();
}
inline int ModuleAccount::permissions_size() const {
  return _internal_permissions_size();
}
inline void ModuleAccount::clear_permissions() {
  _internal_mutable_permissions()->Clear();
}
inline std::string* ModuleAccount::add_permissions() {
  std::string* _s = _internal_add_permissions();
  // @@protoc_insertion_point(field_add_mutable:cosmos.auth.v1beta1.ModuleAccount.permissions)
  return _s;
}
inline const std::string& ModuleAccount::permissions(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.ModuleAccount.permissions)
  return _internal_permissions(index);
}
inline std::string* ModuleAccount::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.ModuleAccount.permissions)
  return _internal_mutable_permissions()->Mutable(index);
}
inline void ModuleAccount::set_permissions(int index, const std::string& value) {
  _internal_mutable_permissions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::set_permissions(int index, std::string&& value) {
  _internal_mutable_permissions()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::set_permissions(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_permissions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::set_permissions(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_permissions()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::set_permissions(int index, absl::string_view value) {
  _internal_mutable_permissions()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::add_permissions(const std::string& value) {
  _internal_mutable_permissions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::add_permissions(std::string&& value) {
  _internal_mutable_permissions()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::add_permissions(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_permissions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::add_permissions(const char* value, std::size_t size) {
  _internal_mutable_permissions()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline void ModuleAccount::add_permissions(absl::string_view value) {
  _internal_mutable_permissions()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.auth.v1beta1.ModuleAccount.permissions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModuleAccount::permissions() const {
  // @@protoc_insertion_point(field_list:cosmos.auth.v1beta1.ModuleAccount.permissions)
  return _internal_permissions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ModuleAccount::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.auth.v1beta1.ModuleAccount.permissions)
  return _internal_mutable_permissions();
}
inline const std::string& ModuleAccount::_internal_permissions(int index) const {
  return _internal_permissions().Get(index);
}
inline std::string* ModuleAccount::_internal_add_permissions() {
  return _internal_mutable_permissions()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModuleAccount::_internal_permissions() const {
  return _impl_.permissions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModuleAccount::_internal_mutable_permissions() {
  return &_impl_.permissions_;
}

// -------------------------------------------------------------------

// ModuleCredential

// string module_name = 1 [json_name = "moduleName"];
inline void ModuleCredential::clear_module_name() {
  _impl_.module_name_.ClearToEmpty();
}
inline const std::string& ModuleCredential::module_name() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.ModuleCredential.module_name)
  return _internal_module_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ModuleCredential::set_module_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.module_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.ModuleCredential.module_name)
}
inline std::string* ModuleCredential::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.ModuleCredential.module_name)
  return _s;
}
inline const std::string& ModuleCredential::_internal_module_name() const {
  return _impl_.module_name_.Get();
}
inline void ModuleCredential::_internal_set_module_name(const std::string& value) {
  ;


  _impl_.module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleCredential::_internal_mutable_module_name() {
  ;
  return _impl_.module_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ModuleCredential::release_module_name() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.ModuleCredential.module_name)
  return _impl_.module_name_.Release();
}
inline void ModuleCredential::set_allocated_module_name(std::string* value) {
  _impl_.module_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.module_name_.IsDefault()) {
          _impl_.module_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.ModuleCredential.module_name)
}

// repeated bytes derivation_keys = 2 [json_name = "derivationKeys"];
inline int ModuleCredential::_internal_derivation_keys_size() const {
  return _impl_.derivation_keys_.size();
}
inline int ModuleCredential::derivation_keys_size() const {
  return _internal_derivation_keys_size();
}
inline void ModuleCredential::clear_derivation_keys() {
  _internal_mutable_derivation_keys()->Clear();
}
inline std::string* ModuleCredential::add_derivation_keys() {
  std::string* _s = _internal_add_derivation_keys();
  // @@protoc_insertion_point(field_add_mutable:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
  return _s;
}
inline const std::string& ModuleCredential::derivation_keys(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
  return _internal_derivation_keys(index);
}
inline std::string* ModuleCredential::mutable_derivation_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
  return _internal_mutable_derivation_keys()->Mutable(index);
}
inline void ModuleCredential::set_derivation_keys(int index, const std::string& value) {
  _internal_mutable_derivation_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::set_derivation_keys(int index, std::string&& value) {
  _internal_mutable_derivation_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::set_derivation_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_derivation_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::set_derivation_keys(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_derivation_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::set_derivation_keys(int index, absl::string_view value) {
  _internal_mutable_derivation_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::add_derivation_keys(const std::string& value) {
  _internal_mutable_derivation_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::add_derivation_keys(std::string&& value) {
  _internal_mutable_derivation_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::add_derivation_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_derivation_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::add_derivation_keys(const void* value, std::size_t size) {
  _internal_mutable_derivation_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline void ModuleCredential::add_derivation_keys(absl::string_view value) {
  _internal_mutable_derivation_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModuleCredential::derivation_keys() const {
  // @@protoc_insertion_point(field_list:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
  return _internal_derivation_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ModuleCredential::mutable_derivation_keys() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.auth.v1beta1.ModuleCredential.derivation_keys)
  return _internal_mutable_derivation_keys();
}
inline const std::string& ModuleCredential::_internal_derivation_keys(int index) const {
  return _internal_derivation_keys().Get(index);
}
inline std::string* ModuleCredential::_internal_add_derivation_keys() {
  return _internal_mutable_derivation_keys()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModuleCredential::_internal_derivation_keys() const {
  return _impl_.derivation_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModuleCredential::_internal_mutable_derivation_keys() {
  return &_impl_.derivation_keys_;
}

// -------------------------------------------------------------------

// Params

// uint64 max_memo_characters = 1 [json_name = "maxMemoCharacters"];
inline void Params::clear_max_memo_characters() {
  _impl_.max_memo_characters_ = ::uint64_t{0u};
}
inline ::uint64_t Params::max_memo_characters() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.Params.max_memo_characters)
  return _internal_max_memo_characters();
}
inline void Params::set_max_memo_characters(::uint64_t value) {
  _internal_set_max_memo_characters(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.Params.max_memo_characters)
}
inline ::uint64_t Params::_internal_max_memo_characters() const {
  return _impl_.max_memo_characters_;
}
inline void Params::_internal_set_max_memo_characters(::uint64_t value) {
  ;
  _impl_.max_memo_characters_ = value;
}

// uint64 tx_sig_limit = 2 [json_name = "txSigLimit"];
inline void Params::clear_tx_sig_limit() {
  _impl_.tx_sig_limit_ = ::uint64_t{0u};
}
inline ::uint64_t Params::tx_sig_limit() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.Params.tx_sig_limit)
  return _internal_tx_sig_limit();
}
inline void Params::set_tx_sig_limit(::uint64_t value) {
  _internal_set_tx_sig_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.Params.tx_sig_limit)
}
inline ::uint64_t Params::_internal_tx_sig_limit() const {
  return _impl_.tx_sig_limit_;
}
inline void Params::_internal_set_tx_sig_limit(::uint64_t value) {
  ;
  _impl_.tx_sig_limit_ = value;
}

// uint64 tx_size_cost_per_byte = 3 [json_name = "txSizeCostPerByte"];
inline void Params::clear_tx_size_cost_per_byte() {
  _impl_.tx_size_cost_per_byte_ = ::uint64_t{0u};
}
inline ::uint64_t Params::tx_size_cost_per_byte() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.Params.tx_size_cost_per_byte)
  return _internal_tx_size_cost_per_byte();
}
inline void Params::set_tx_size_cost_per_byte(::uint64_t value) {
  _internal_set_tx_size_cost_per_byte(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.Params.tx_size_cost_per_byte)
}
inline ::uint64_t Params::_internal_tx_size_cost_per_byte() const {
  return _impl_.tx_size_cost_per_byte_;
}
inline void Params::_internal_set_tx_size_cost_per_byte(::uint64_t value) {
  ;
  _impl_.tx_size_cost_per_byte_ = value;
}

// uint64 sig_verify_cost_ed25519 = 4 [json_name = "sigVerifyCostEd25519", (.gogoproto.customname) = "SigVerifyCostED25519"];
inline void Params::clear_sig_verify_cost_ed25519() {
  _impl_.sig_verify_cost_ed25519_ = ::uint64_t{0u};
}
inline ::uint64_t Params::sig_verify_cost_ed25519() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.Params.sig_verify_cost_ed25519)
  return _internal_sig_verify_cost_ed25519();
}
inline void Params::set_sig_verify_cost_ed25519(::uint64_t value) {
  _internal_set_sig_verify_cost_ed25519(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.Params.sig_verify_cost_ed25519)
}
inline ::uint64_t Params::_internal_sig_verify_cost_ed25519() const {
  return _impl_.sig_verify_cost_ed25519_;
}
inline void Params::_internal_set_sig_verify_cost_ed25519(::uint64_t value) {
  ;
  _impl_.sig_verify_cost_ed25519_ = value;
}

// uint64 sig_verify_cost_secp256k1 = 5 [json_name = "sigVerifyCostSecp256k1", (.gogoproto.customname) = "SigVerifyCostSecp256k1"];
inline void Params::clear_sig_verify_cost_secp256k1() {
  _impl_.sig_verify_cost_secp256k1_ = ::uint64_t{0u};
}
inline ::uint64_t Params::sig_verify_cost_secp256k1() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.Params.sig_verify_cost_secp256k1)
  return _internal_sig_verify_cost_secp256k1();
}
inline void Params::set_sig_verify_cost_secp256k1(::uint64_t value) {
  _internal_set_sig_verify_cost_secp256k1(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.Params.sig_verify_cost_secp256k1)
}
inline ::uint64_t Params::_internal_sig_verify_cost_secp256k1() const {
  return _impl_.sig_verify_cost_secp256k1_;
}
inline void Params::_internal_set_sig_verify_cost_secp256k1(::uint64_t value) {
  ;
  _impl_.sig_verify_cost_secp256k1_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace auth
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauth_2fv1beta1_2fauth_2eproto_2epb_2eh

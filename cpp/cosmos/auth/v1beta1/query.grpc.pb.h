// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/auth/v1beta1/query.proto
#ifndef GRPC_cosmos_2fauth_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fauth_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/auth/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace auth {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.auth.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Accounts returns all the existing accounts.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    //
    // Since: cosmos-sdk 0.43
    virtual ::grpc::Status Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountsResponse>> AsyncAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountsResponse>>(AsyncAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountsResponse>> PrepareAsyncAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountsResponse>>(PrepareAsyncAccountsRaw(context, request, cq));
    }
    // Account returns account details based on address.
    virtual ::grpc::Status Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::cosmos::auth::v1beta1::QueryAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountResponse>> AsyncAccount(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountResponse>>(AsyncAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountResponse>> PrepareAsyncAccount(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountResponse>>(PrepareAsyncAccountRaw(context, request, cq));
    }
    // AccountAddressByID returns account address based on account number.
    //
    // Since: cosmos-sdk 0.46.2
    virtual ::grpc::Status AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>> AsyncAccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>>(AsyncAccountAddressByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>> PrepareAsyncAccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>>(PrepareAsyncAccountAddressByIDRaw(context, request, cq));
    }
    // Params queries all parameters.
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::cosmos::auth::v1beta1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // ModuleAccounts returns all the existing module accounts.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>> AsyncModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>>(AsyncModuleAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>> PrepareAsyncModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>>(PrepareAsyncModuleAccountsRaw(context, request, cq));
    }
    // ModuleAccountByName returns the module account info by module name
    virtual ::grpc::Status ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>> AsyncModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>>(AsyncModuleAccountByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>> PrepareAsyncModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>>(PrepareAsyncModuleAccountByNameRaw(context, request, cq));
    }
    // Bech32Prefix queries bech32Prefix
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::Bech32PrefixResponse>> AsyncBech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::Bech32PrefixResponse>>(AsyncBech32PrefixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::Bech32PrefixResponse>> PrepareAsyncBech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::Bech32PrefixResponse>>(PrepareAsyncBech32PrefixRaw(context, request, cq));
    }
    // AddressBytesToString converts Account Address bytes to string
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>> AsyncAddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>>(AsyncAddressBytesToStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>> PrepareAsyncAddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>>(PrepareAsyncAddressBytesToStringRaw(context, request, cq));
    }
    // AddressStringToBytes converts Address string to bytes
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>> AsyncAddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>>(AsyncAddressStringToBytesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>> PrepareAsyncAddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>>(PrepareAsyncAddressStringToBytesRaw(context, request, cq));
    }
    // AccountInfo queries account info which is common to all account types.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>> AsyncAccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>>(AsyncAccountInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>> PrepareAsyncAccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>>(PrepareAsyncAccountInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Accounts returns all the existing accounts.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      //
      // Since: cosmos-sdk 0.43
      virtual void Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Account returns account details based on address.
      virtual void Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AccountAddressByID returns account address based on account number.
      //
      // Since: cosmos-sdk 0.46.2
      virtual void AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Params queries all parameters.
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ModuleAccounts returns all the existing module accounts.
      //
      // Since: cosmos-sdk 0.46
      virtual void ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ModuleAccountByName returns the module account info by module name
      virtual void ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Bech32Prefix queries bech32Prefix
      //
      // Since: cosmos-sdk 0.46
      virtual void Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AddressBytesToString converts Account Address bytes to string
      //
      // Since: cosmos-sdk 0.46
      virtual void AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AddressStringToBytes converts Address string to bytes
      //
      // Since: cosmos-sdk 0.46
      virtual void AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AccountInfo queries account info which is common to all account types.
      //
      // Since: cosmos-sdk 0.47
      virtual void AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountsResponse>* AsyncAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountsResponse>* PrepareAsyncAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountResponse>* AsyncAccountRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountResponse>* PrepareAsyncAccountRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* AsyncAccountAddressByIDRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* PrepareAsyncAccountAddressByIDRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* AsyncModuleAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* PrepareAsyncModuleAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* AsyncModuleAccountByNameRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* PrepareAsyncModuleAccountByNameRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::Bech32PrefixResponse>* AsyncBech32PrefixRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::Bech32PrefixResponse>* PrepareAsyncBech32PrefixRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* AsyncAddressBytesToStringRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* PrepareAsyncAddressBytesToStringRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* AsyncAddressStringToBytesRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* PrepareAsyncAddressStringToBytesRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* AsyncAccountInfoRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* PrepareAsyncAccountInfoRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountsResponse>> AsyncAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountsResponse>>(AsyncAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountsResponse>> PrepareAsyncAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountsResponse>>(PrepareAsyncAccountsRaw(context, request, cq));
    }
    ::grpc::Status Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::cosmos::auth::v1beta1::QueryAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountResponse>> AsyncAccount(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountResponse>>(AsyncAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountResponse>> PrepareAsyncAccount(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountResponse>>(PrepareAsyncAccountRaw(context, request, cq));
    }
    ::grpc::Status AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>> AsyncAccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>>(AsyncAccountAddressByIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>> PrepareAsyncAccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>>(PrepareAsyncAccountAddressByIDRaw(context, request, cq));
    }
    ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::cosmos::auth::v1beta1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>> AsyncModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>>(AsyncModuleAccountsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>> PrepareAsyncModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>>(PrepareAsyncModuleAccountsRaw(context, request, cq));
    }
    ::grpc::Status ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>> AsyncModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>>(AsyncModuleAccountByNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>> PrepareAsyncModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>>(PrepareAsyncModuleAccountByNameRaw(context, request, cq));
    }
    ::grpc::Status Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::Bech32PrefixResponse>> AsyncBech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::Bech32PrefixResponse>>(AsyncBech32PrefixRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::Bech32PrefixResponse>> PrepareAsyncBech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::Bech32PrefixResponse>>(PrepareAsyncBech32PrefixRaw(context, request, cq));
    }
    ::grpc::Status AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>> AsyncAddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>>(AsyncAddressBytesToStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>> PrepareAsyncAddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>>(PrepareAsyncAddressBytesToStringRaw(context, request, cq));
    }
    ::grpc::Status AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>> AsyncAddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>>(AsyncAddressStringToBytesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>> PrepareAsyncAddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>>(PrepareAsyncAddressStringToBytesRaw(context, request, cq));
    }
    ::grpc::Status AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>> AsyncAccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>>(AsyncAccountInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>> PrepareAsyncAccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>>(PrepareAsyncAccountInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response, std::function<void(::grpc::Status)>) override;
      void Accounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response, std::function<void(::grpc::Status)>) override;
      void Account(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response, std::function<void(::grpc::Status)>) override;
      void AccountAddressByID(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response, std::function<void(::grpc::Status)>) override;
      void ModuleAccounts(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response, std::function<void(::grpc::Status)>) override;
      void ModuleAccountByName(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response, std::function<void(::grpc::Status)>) override;
      void Bech32Prefix(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response, std::function<void(::grpc::Status)>) override;
      void AddressBytesToString(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response, std::function<void(::grpc::Status)>) override;
      void AddressStringToBytes(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void AccountInfo(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountsResponse>* AsyncAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountsResponse>* PrepareAsyncAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountResponse>* AsyncAccountRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountResponse>* PrepareAsyncAccountRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* AsyncAccountAddressByIDRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* PrepareAsyncAccountAddressByIDRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* AsyncModuleAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* PrepareAsyncModuleAccountsRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* AsyncModuleAccountByNameRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* PrepareAsyncModuleAccountByNameRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::Bech32PrefixResponse>* AsyncBech32PrefixRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::Bech32PrefixResponse>* PrepareAsyncBech32PrefixRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* AsyncAddressBytesToStringRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* PrepareAsyncAddressBytesToStringRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* AsyncAddressStringToBytesRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* PrepareAsyncAddressStringToBytesRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* AsyncAccountInfoRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* PrepareAsyncAccountInfoRaw(::grpc::ClientContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Accounts_;
    const ::grpc::internal::RpcMethod rpcmethod_Account_;
    const ::grpc::internal::RpcMethod rpcmethod_AccountAddressByID_;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_ModuleAccounts_;
    const ::grpc::internal::RpcMethod rpcmethod_ModuleAccountByName_;
    const ::grpc::internal::RpcMethod rpcmethod_Bech32Prefix_;
    const ::grpc::internal::RpcMethod rpcmethod_AddressBytesToString_;
    const ::grpc::internal::RpcMethod rpcmethod_AddressStringToBytes_;
    const ::grpc::internal::RpcMethod rpcmethod_AccountInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Accounts returns all the existing accounts.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    //
    // Since: cosmos-sdk 0.43
    virtual ::grpc::Status Accounts(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response);
    // Account returns account details based on address.
    virtual ::grpc::Status Account(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response);
    // AccountAddressByID returns account address based on account number.
    //
    // Since: cosmos-sdk 0.46.2
    virtual ::grpc::Status AccountAddressByID(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response);
    // Params queries all parameters.
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response);
    // ModuleAccounts returns all the existing module accounts.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status ModuleAccounts(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response);
    // ModuleAccountByName returns the module account info by module name
    virtual ::grpc::Status ModuleAccountByName(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response);
    // Bech32Prefix queries bech32Prefix
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status Bech32Prefix(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response);
    // AddressBytesToString converts Account Address bytes to string
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status AddressBytesToString(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response);
    // AddressStringToBytes converts Address string to bytes
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status AddressStringToBytes(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response);
    // AccountInfo queries account info which is common to all account types.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status AccountInfo(::grpc::ServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Accounts() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccounts(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::QueryAccountsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Account : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Account() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Account() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Account(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccount(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::QueryAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AccountAddressByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AccountAddressByID() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AccountAddressByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountAddressByID(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccountAddressByID(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModuleAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModuleAccounts() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ModuleAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModuleAccounts(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModuleAccountByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModuleAccountByName() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ModuleAccountByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccountByName(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModuleAccountByName(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Bech32Prefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Bech32Prefix() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Bech32Prefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Bech32Prefix(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* /*request*/, ::cosmos::auth::v1beta1::Bech32PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBech32Prefix(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::Bech32PrefixResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddressBytesToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddressBytesToString() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddressBytesToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressBytesToString(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* /*request*/, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddressBytesToString(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddressStringToBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddressStringToBytes() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_AddressStringToBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressStringToBytes(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* /*request*/, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddressStringToBytes(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AccountInfo() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_AccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountInfo(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccountInfo(::grpc::ServerContext* context, ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Accounts<WithAsyncMethod_Account<WithAsyncMethod_AccountAddressByID<WithAsyncMethod_Params<WithAsyncMethod_ModuleAccounts<WithAsyncMethod_ModuleAccountByName<WithAsyncMethod_Bech32Prefix<WithAsyncMethod_AddressBytesToString<WithAsyncMethod_AddressStringToBytes<WithAsyncMethod_AccountInfo<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Accounts() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryAccountsRequest, ::cosmos::auth::v1beta1::QueryAccountsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountsRequest* request, ::cosmos::auth::v1beta1::QueryAccountsResponse* response) { return this->Accounts(context, request, response); }));}
    void SetMessageAllocatorFor_Accounts(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::QueryAccountsRequest, ::cosmos::auth::v1beta1::QueryAccountsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryAccountsRequest, ::cosmos::auth::v1beta1::QueryAccountsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Accounts(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Account : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Account() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryAccountRequest, ::cosmos::auth::v1beta1::QueryAccountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountRequest* request, ::cosmos::auth::v1beta1::QueryAccountResponse* response) { return this->Account(context, request, response); }));}
    void SetMessageAllocatorFor_Account(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::QueryAccountRequest, ::cosmos::auth::v1beta1::QueryAccountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryAccountRequest, ::cosmos::auth::v1beta1::QueryAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Account() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Account(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Account(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AccountAddressByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AccountAddressByID() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* request, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* response) { return this->AccountAddressByID(context, request, response); }));}
    void SetMessageAllocatorFor_AccountAddressByID(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AccountAddressByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountAddressByID(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AccountAddressByID(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryParamsRequest, ::cosmos::auth::v1beta1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::QueryParamsRequest* request, ::cosmos::auth::v1beta1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::QueryParamsRequest, ::cosmos::auth::v1beta1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryParamsRequest, ::cosmos::auth::v1beta1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModuleAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModuleAccounts() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* response) { return this->ModuleAccounts(context, request, response); }));}
    void SetMessageAllocatorFor_ModuleAccounts(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModuleAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModuleAccounts(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ModuleAccountByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ModuleAccountByName() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* request, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* response) { return this->ModuleAccountByName(context, request, response); }));}
    void SetMessageAllocatorFor_ModuleAccountByName(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ModuleAccountByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccountByName(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModuleAccountByName(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Bech32Prefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Bech32Prefix() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::cosmos::auth::v1beta1::Bech32PrefixResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* request, ::cosmos::auth::v1beta1::Bech32PrefixResponse* response) { return this->Bech32Prefix(context, request, response); }));}
    void SetMessageAllocatorFor_Bech32Prefix(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::cosmos::auth::v1beta1::Bech32PrefixResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::cosmos::auth::v1beta1::Bech32PrefixResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Bech32Prefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Bech32Prefix(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* /*request*/, ::cosmos::auth::v1beta1::Bech32PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Bech32Prefix(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* /*request*/, ::cosmos::auth::v1beta1::Bech32PrefixResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddressBytesToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddressBytesToString() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::cosmos::auth::v1beta1::AddressBytesToStringResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* request, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* response) { return this->AddressBytesToString(context, request, response); }));}
    void SetMessageAllocatorFor_AddressBytesToString(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::cosmos::auth::v1beta1::AddressBytesToStringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddressBytesToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressBytesToString(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* /*request*/, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddressBytesToString(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* /*request*/, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddressStringToBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddressStringToBytes() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::cosmos::auth::v1beta1::AddressStringToBytesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* request, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* response) { return this->AddressStringToBytes(context, request, response); }));}
    void SetMessageAllocatorFor_AddressStringToBytes(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::cosmos::auth::v1beta1::AddressStringToBytesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddressStringToBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressStringToBytes(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* /*request*/, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddressStringToBytes(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* /*request*/, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AccountInfo() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::cosmos::auth::v1beta1::QueryAccountInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* request, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* response) { return this->AccountInfo(context, request, response); }));}
    void SetMessageAllocatorFor_AccountInfo(
        ::grpc::MessageAllocator< ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::cosmos::auth::v1beta1::QueryAccountInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountInfo(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AccountInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Accounts<WithCallbackMethod_Account<WithCallbackMethod_AccountAddressByID<WithCallbackMethod_Params<WithCallbackMethod_ModuleAccounts<WithCallbackMethod_ModuleAccountByName<WithCallbackMethod_Bech32Prefix<WithCallbackMethod_AddressBytesToString<WithCallbackMethod_AddressStringToBytes<WithCallbackMethod_AccountInfo<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Accounts() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Account : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Account() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Account() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Account(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AccountAddressByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AccountAddressByID() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AccountAddressByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountAddressByID(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModuleAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModuleAccounts() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ModuleAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModuleAccountByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModuleAccountByName() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ModuleAccountByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccountByName(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Bech32Prefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Bech32Prefix() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Bech32Prefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Bech32Prefix(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* /*request*/, ::cosmos::auth::v1beta1::Bech32PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddressBytesToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddressBytesToString() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddressBytesToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressBytesToString(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* /*request*/, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddressStringToBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddressStringToBytes() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_AddressStringToBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressStringToBytes(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* /*request*/, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AccountInfo() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_AccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountInfo(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Accounts() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccounts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Account : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Account() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Account() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Account(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AccountAddressByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AccountAddressByID() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AccountAddressByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountAddressByID(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccountAddressByID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModuleAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModuleAccounts() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ModuleAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModuleAccounts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModuleAccountByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModuleAccountByName() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ModuleAccountByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccountByName(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModuleAccountByName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Bech32Prefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Bech32Prefix() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Bech32Prefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Bech32Prefix(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* /*request*/, ::cosmos::auth::v1beta1::Bech32PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBech32Prefix(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddressBytesToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddressBytesToString() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddressBytesToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressBytesToString(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* /*request*/, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddressBytesToString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddressStringToBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddressStringToBytes() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_AddressStringToBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressStringToBytes(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* /*request*/, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddressStringToBytes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AccountInfo() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_AccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountInfo(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAccountInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Accounts() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Accounts(context, request, response); }));
    }
    ~WithRawCallbackMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Accounts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Account : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Account() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Account(context, request, response); }));
    }
    ~WithRawCallbackMethod_Account() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Account(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Account(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AccountAddressByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AccountAddressByID() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AccountAddressByID(context, request, response); }));
    }
    ~WithRawCallbackMethod_AccountAddressByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountAddressByID(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AccountAddressByID(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModuleAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModuleAccounts() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModuleAccounts(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModuleAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModuleAccounts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ModuleAccountByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ModuleAccountByName() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModuleAccountByName(context, request, response); }));
    }
    ~WithRawCallbackMethod_ModuleAccountByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModuleAccountByName(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ModuleAccountByName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Bech32Prefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Bech32Prefix() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Bech32Prefix(context, request, response); }));
    }
    ~WithRawCallbackMethod_Bech32Prefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Bech32Prefix(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* /*request*/, ::cosmos::auth::v1beta1::Bech32PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Bech32Prefix(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddressBytesToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddressBytesToString() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddressBytesToString(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddressBytesToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressBytesToString(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* /*request*/, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddressBytesToString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddressStringToBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddressStringToBytes() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddressStringToBytes(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddressStringToBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddressStringToBytes(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* /*request*/, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddressStringToBytes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AccountInfo() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AccountInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_AccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AccountInfo(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AccountInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Accounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Accounts() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::QueryAccountsRequest, ::cosmos::auth::v1beta1::QueryAccountsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::QueryAccountsRequest, ::cosmos::auth::v1beta1::QueryAccountsResponse>* streamer) {
                       return this->StreamedAccounts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Accounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Accounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAccounts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::QueryAccountsRequest,::cosmos::auth::v1beta1::QueryAccountsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Account : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Account() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::QueryAccountRequest, ::cosmos::auth::v1beta1::QueryAccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::QueryAccountRequest, ::cosmos::auth::v1beta1::QueryAccountResponse>* streamer) {
                       return this->StreamedAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Account() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Account(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::QueryAccountRequest,::cosmos::auth::v1beta1::QueryAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AccountAddressByID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AccountAddressByID() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* streamer) {
                       return this->StreamedAccountAddressByID(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AccountAddressByID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AccountAddressByID(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAccountAddressByID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest,::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::QueryParamsRequest, ::cosmos::auth::v1beta1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::QueryParamsRequest, ::cosmos::auth::v1beta1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::QueryParamsRequest,::cosmos::auth::v1beta1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModuleAccounts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModuleAccounts() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::QueryModuleAccountsRequest, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* streamer) {
                       return this->StreamedModuleAccounts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModuleAccounts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModuleAccounts(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountsRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModuleAccounts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::QueryModuleAccountsRequest,::cosmos::auth::v1beta1::QueryModuleAccountsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModuleAccountByName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModuleAccountByName() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* streamer) {
                       return this->StreamedModuleAccountByName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ModuleAccountByName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModuleAccountByName(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* /*request*/, ::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModuleAccountByName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest,::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Bech32Prefix : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Bech32Prefix() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::cosmos::auth::v1beta1::Bech32PrefixResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::Bech32PrefixRequest, ::cosmos::auth::v1beta1::Bech32PrefixResponse>* streamer) {
                       return this->StreamedBech32Prefix(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Bech32Prefix() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Bech32Prefix(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::Bech32PrefixRequest* /*request*/, ::cosmos::auth::v1beta1::Bech32PrefixResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBech32Prefix(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::Bech32PrefixRequest,::cosmos::auth::v1beta1::Bech32PrefixResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddressBytesToString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddressBytesToString() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::cosmos::auth::v1beta1::AddressBytesToStringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::AddressBytesToStringRequest, ::cosmos::auth::v1beta1::AddressBytesToStringResponse>* streamer) {
                       return this->StreamedAddressBytesToString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddressBytesToString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddressBytesToString(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressBytesToStringRequest* /*request*/, ::cosmos::auth::v1beta1::AddressBytesToStringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddressBytesToString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::AddressBytesToStringRequest,::cosmos::auth::v1beta1::AddressBytesToStringResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddressStringToBytes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddressStringToBytes() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::cosmos::auth::v1beta1::AddressStringToBytesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::AddressStringToBytesRequest, ::cosmos::auth::v1beta1::AddressStringToBytesResponse>* streamer) {
                       return this->StreamedAddressStringToBytes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddressStringToBytes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddressStringToBytes(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::AddressStringToBytesRequest* /*request*/, ::cosmos::auth::v1beta1::AddressStringToBytesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddressStringToBytes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::AddressStringToBytesRequest,::cosmos::auth::v1beta1::AddressStringToBytesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AccountInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AccountInfo() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::cosmos::auth::v1beta1::QueryAccountInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::auth::v1beta1::QueryAccountInfoRequest, ::cosmos::auth::v1beta1::QueryAccountInfoResponse>* streamer) {
                       return this->StreamedAccountInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AccountInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AccountInfo(::grpc::ServerContext* /*context*/, const ::cosmos::auth::v1beta1::QueryAccountInfoRequest* /*request*/, ::cosmos::auth::v1beta1::QueryAccountInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAccountInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::auth::v1beta1::QueryAccountInfoRequest,::cosmos::auth::v1beta1::QueryAccountInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Accounts<WithStreamedUnaryMethod_Account<WithStreamedUnaryMethod_AccountAddressByID<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_ModuleAccounts<WithStreamedUnaryMethod_ModuleAccountByName<WithStreamedUnaryMethod_Bech32Prefix<WithStreamedUnaryMethod_AddressBytesToString<WithStreamedUnaryMethod_AddressStringToBytes<WithStreamedUnaryMethod_AccountInfo<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Accounts<WithStreamedUnaryMethod_Account<WithStreamedUnaryMethod_AccountAddressByID<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_ModuleAccounts<WithStreamedUnaryMethod_ModuleAccountByName<WithStreamedUnaryMethod_Bech32Prefix<WithStreamedUnaryMethod_AddressBytesToString<WithStreamedUnaryMethod_AddressStringToBytes<WithStreamedUnaryMethod_AccountInfo<Service > > > > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace auth
}  // namespace cosmos


#endif  // GRPC_cosmos_2fauth_2fv1beta1_2fquery_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/auth/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauth_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauth_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/auth/v1beta1/auth.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/query/v1/query.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fauth_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace auth {
namespace v1beta1 {
class AddressBytesToStringRequest;
struct AddressBytesToStringRequestDefaultTypeInternal;
extern AddressBytesToStringRequestDefaultTypeInternal _AddressBytesToStringRequest_default_instance_;
class AddressBytesToStringResponse;
struct AddressBytesToStringResponseDefaultTypeInternal;
extern AddressBytesToStringResponseDefaultTypeInternal _AddressBytesToStringResponse_default_instance_;
class AddressStringToBytesRequest;
struct AddressStringToBytesRequestDefaultTypeInternal;
extern AddressStringToBytesRequestDefaultTypeInternal _AddressStringToBytesRequest_default_instance_;
class AddressStringToBytesResponse;
struct AddressStringToBytesResponseDefaultTypeInternal;
extern AddressStringToBytesResponseDefaultTypeInternal _AddressStringToBytesResponse_default_instance_;
class Bech32PrefixRequest;
struct Bech32PrefixRequestDefaultTypeInternal;
extern Bech32PrefixRequestDefaultTypeInternal _Bech32PrefixRequest_default_instance_;
class Bech32PrefixResponse;
struct Bech32PrefixResponseDefaultTypeInternal;
extern Bech32PrefixResponseDefaultTypeInternal _Bech32PrefixResponse_default_instance_;
class QueryAccountAddressByIDRequest;
struct QueryAccountAddressByIDRequestDefaultTypeInternal;
extern QueryAccountAddressByIDRequestDefaultTypeInternal _QueryAccountAddressByIDRequest_default_instance_;
class QueryAccountAddressByIDResponse;
struct QueryAccountAddressByIDResponseDefaultTypeInternal;
extern QueryAccountAddressByIDResponseDefaultTypeInternal _QueryAccountAddressByIDResponse_default_instance_;
class QueryAccountInfoRequest;
struct QueryAccountInfoRequestDefaultTypeInternal;
extern QueryAccountInfoRequestDefaultTypeInternal _QueryAccountInfoRequest_default_instance_;
class QueryAccountInfoResponse;
struct QueryAccountInfoResponseDefaultTypeInternal;
extern QueryAccountInfoResponseDefaultTypeInternal _QueryAccountInfoResponse_default_instance_;
class QueryAccountRequest;
struct QueryAccountRequestDefaultTypeInternal;
extern QueryAccountRequestDefaultTypeInternal _QueryAccountRequest_default_instance_;
class QueryAccountResponse;
struct QueryAccountResponseDefaultTypeInternal;
extern QueryAccountResponseDefaultTypeInternal _QueryAccountResponse_default_instance_;
class QueryAccountsRequest;
struct QueryAccountsRequestDefaultTypeInternal;
extern QueryAccountsRequestDefaultTypeInternal _QueryAccountsRequest_default_instance_;
class QueryAccountsResponse;
struct QueryAccountsResponseDefaultTypeInternal;
extern QueryAccountsResponseDefaultTypeInternal _QueryAccountsResponse_default_instance_;
class QueryModuleAccountByNameRequest;
struct QueryModuleAccountByNameRequestDefaultTypeInternal;
extern QueryModuleAccountByNameRequestDefaultTypeInternal _QueryModuleAccountByNameRequest_default_instance_;
class QueryModuleAccountByNameResponse;
struct QueryModuleAccountByNameResponseDefaultTypeInternal;
extern QueryModuleAccountByNameResponseDefaultTypeInternal _QueryModuleAccountByNameResponse_default_instance_;
class QueryModuleAccountsRequest;
struct QueryModuleAccountsRequestDefaultTypeInternal;
extern QueryModuleAccountsRequestDefaultTypeInternal _QueryModuleAccountsRequest_default_instance_;
class QueryModuleAccountsResponse;
struct QueryModuleAccountsResponseDefaultTypeInternal;
extern QueryModuleAccountsResponseDefaultTypeInternal _QueryModuleAccountsResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace auth
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::auth::v1beta1::AddressBytesToStringRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::AddressBytesToStringRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::AddressBytesToStringResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::AddressBytesToStringResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::AddressStringToBytesRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::AddressStringToBytesRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::AddressStringToBytesResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::AddressStringToBytesResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::Bech32PrefixRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::Bech32PrefixRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::Bech32PrefixResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::Bech32PrefixResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryAccountAddressByIDRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryAccountAddressByIDResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryAccountInfoRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryAccountInfoRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryAccountInfoResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryAccountInfoResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryAccountRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryAccountRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryAccountResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryAccountResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryAccountsRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryAccountsRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryAccountsResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryAccountsResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryModuleAccountByNameRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryModuleAccountByNameResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryModuleAccountsRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryModuleAccountsRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryModuleAccountsResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryModuleAccountsResponse>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryParamsRequest* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryParamsRequest>(Arena*);
template <>
::cosmos::auth::v1beta1::QueryParamsResponse* Arena::CreateMaybeMessage<::cosmos::auth::v1beta1::QueryParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace auth {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryAccountsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryAccountsRequest) */ {
 public:
  inline QueryAccountsRequest() : QueryAccountsRequest(nullptr) {}
  ~QueryAccountsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAccountsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAccountsRequest(const QueryAccountsRequest& from);
  QueryAccountsRequest(QueryAccountsRequest&& from) noexcept
    : QueryAccountsRequest() {
    *this = ::std::move(from);
  }

  inline QueryAccountsRequest& operator=(const QueryAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAccountsRequest& operator=(QueryAccountsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAccountsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAccountsRequest*>(
               &_QueryAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryAccountsRequest& a, QueryAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAccountsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAccountsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAccountsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAccountsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAccountsRequest& from) {
    QueryAccountsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAccountsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryAccountsRequest";
  }
  protected:
  explicit QueryAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAccountsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryAccountsResponse) */ {
 public:
  inline QueryAccountsResponse() : QueryAccountsResponse(nullptr) {}
  ~QueryAccountsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAccountsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAccountsResponse(const QueryAccountsResponse& from);
  QueryAccountsResponse(QueryAccountsResponse&& from) noexcept
    : QueryAccountsResponse() {
    *this = ::std::move(from);
  }

  inline QueryAccountsResponse& operator=(const QueryAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAccountsResponse& operator=(QueryAccountsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAccountsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAccountsResponse*>(
               &_QueryAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryAccountsResponse& a, QueryAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAccountsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAccountsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAccountsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAccountsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAccountsResponse& from) {
    QueryAccountsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAccountsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryAccountsResponse";
  }
  protected:
  explicit QueryAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .google.protobuf.Any accounts = 1 [json_name = "accounts", (.cosmos_proto.accepts_interface) = "cosmos.auth.v1beta1.AccountI"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;

  public:
  void clear_accounts() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_accounts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_accounts(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_accounts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& accounts(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      accounts() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > accounts_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAccountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryAccountRequest) */ {
 public:
  inline QueryAccountRequest() : QueryAccountRequest(nullptr) {}
  ~QueryAccountRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAccountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAccountRequest(const QueryAccountRequest& from);
  QueryAccountRequest(QueryAccountRequest&& from) noexcept
    : QueryAccountRequest() {
    *this = ::std::move(from);
  }

  inline QueryAccountRequest& operator=(const QueryAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAccountRequest& operator=(QueryAccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAccountRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAccountRequest*>(
               &_QueryAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAccountRequest& a, QueryAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAccountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAccountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAccountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAccountRequest& from) {
    QueryAccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAccountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryAccountRequest";
  }
  protected:
  explicit QueryAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAccountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryAccountResponse) */ {
 public:
  inline QueryAccountResponse() : QueryAccountResponse(nullptr) {}
  ~QueryAccountResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAccountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAccountResponse(const QueryAccountResponse& from);
  QueryAccountResponse(QueryAccountResponse&& from) noexcept
    : QueryAccountResponse() {
    *this = ::std::move(from);
  }

  inline QueryAccountResponse& operator=(const QueryAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAccountResponse& operator=(QueryAccountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAccountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAccountResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAccountResponse*>(
               &_QueryAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryAccountResponse& a, QueryAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAccountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAccountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAccountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAccountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAccountResponse& from) {
    QueryAccountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAccountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryAccountResponse";
  }
  protected:
  explicit QueryAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // .google.protobuf.Any account = 1 [json_name = "account", (.cosmos_proto.accepts_interface) = "cosmos.auth.v1beta1.AccountI"];
  bool has_account() const;
  void clear_account() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& account() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_account();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_account();
  void set_allocated_account(::PROTOBUF_NAMESPACE_ID::Any* account);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_account() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::PROTOBUF_NAMESPACE_ID::Any* account);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_account();
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryAccountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* account_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .cosmos.auth.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::cosmos::auth::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmos::auth::v1beta1::Params* release_params();
  ::cosmos::auth::v1beta1::Params* mutable_params();
  void set_allocated_params(::cosmos::auth::v1beta1::Params* params);
  private:
  const ::cosmos::auth::v1beta1::Params& _internal_params() const;
  ::cosmos::auth::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmos::auth::v1beta1::Params* params);
  ::cosmos::auth::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::auth::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleAccountsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryModuleAccountsRequest) */ {
 public:
  inline QueryModuleAccountsRequest() : QueryModuleAccountsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleAccountsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleAccountsRequest(const QueryModuleAccountsRequest& from);
  QueryModuleAccountsRequest(QueryModuleAccountsRequest&& from) noexcept
    : QueryModuleAccountsRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleAccountsRequest& operator=(const QueryModuleAccountsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleAccountsRequest& operator=(QueryModuleAccountsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleAccountsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleAccountsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleAccountsRequest*>(
               &_QueryModuleAccountsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryModuleAccountsRequest& a, QueryModuleAccountsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleAccountsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleAccountsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleAccountsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleAccountsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryModuleAccountsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryModuleAccountsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryModuleAccountsRequest";
  }
  protected:
  explicit QueryModuleAccountsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryModuleAccountsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleAccountsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryModuleAccountsResponse) */ {
 public:
  inline QueryModuleAccountsResponse() : QueryModuleAccountsResponse(nullptr) {}
  ~QueryModuleAccountsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleAccountsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleAccountsResponse(const QueryModuleAccountsResponse& from);
  QueryModuleAccountsResponse(QueryModuleAccountsResponse&& from) noexcept
    : QueryModuleAccountsResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleAccountsResponse& operator=(const QueryModuleAccountsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleAccountsResponse& operator=(QueryModuleAccountsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleAccountsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleAccountsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleAccountsResponse*>(
               &_QueryModuleAccountsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryModuleAccountsResponse& a, QueryModuleAccountsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleAccountsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleAccountsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleAccountsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleAccountsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleAccountsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleAccountsResponse& from) {
    QueryModuleAccountsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleAccountsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryModuleAccountsResponse";
  }
  protected:
  explicit QueryModuleAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .google.protobuf.Any accounts = 1 [json_name = "accounts", (.cosmos_proto.accepts_interface) = "cosmos.auth.v1beta1.ModuleAccountI"];
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;

  public:
  void clear_accounts() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_accounts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_accounts(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_accounts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& accounts(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      accounts() const;
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryModuleAccountsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleAccountByNameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryModuleAccountByNameRequest) */ {
 public:
  inline QueryModuleAccountByNameRequest() : QueryModuleAccountByNameRequest(nullptr) {}
  ~QueryModuleAccountByNameRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleAccountByNameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleAccountByNameRequest(const QueryModuleAccountByNameRequest& from);
  QueryModuleAccountByNameRequest(QueryModuleAccountByNameRequest&& from) noexcept
    : QueryModuleAccountByNameRequest() {
    *this = ::std::move(from);
  }

  inline QueryModuleAccountByNameRequest& operator=(const QueryModuleAccountByNameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleAccountByNameRequest& operator=(QueryModuleAccountByNameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleAccountByNameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleAccountByNameRequest* internal_default_instance() {
    return reinterpret_cast<const QueryModuleAccountByNameRequest*>(
               &_QueryModuleAccountByNameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryModuleAccountByNameRequest& a, QueryModuleAccountByNameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleAccountByNameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleAccountByNameRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleAccountByNameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleAccountByNameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleAccountByNameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleAccountByNameRequest& from) {
    QueryModuleAccountByNameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleAccountByNameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryModuleAccountByNameRequest";
  }
  protected:
  explicit QueryModuleAccountByNameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryModuleAccountByNameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryModuleAccountByNameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryModuleAccountByNameResponse) */ {
 public:
  inline QueryModuleAccountByNameResponse() : QueryModuleAccountByNameResponse(nullptr) {}
  ~QueryModuleAccountByNameResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryModuleAccountByNameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryModuleAccountByNameResponse(const QueryModuleAccountByNameResponse& from);
  QueryModuleAccountByNameResponse(QueryModuleAccountByNameResponse&& from) noexcept
    : QueryModuleAccountByNameResponse() {
    *this = ::std::move(from);
  }

  inline QueryModuleAccountByNameResponse& operator=(const QueryModuleAccountByNameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryModuleAccountByNameResponse& operator=(QueryModuleAccountByNameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryModuleAccountByNameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryModuleAccountByNameResponse* internal_default_instance() {
    return reinterpret_cast<const QueryModuleAccountByNameResponse*>(
               &_QueryModuleAccountByNameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryModuleAccountByNameResponse& a, QueryModuleAccountByNameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryModuleAccountByNameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryModuleAccountByNameResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryModuleAccountByNameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryModuleAccountByNameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryModuleAccountByNameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryModuleAccountByNameResponse& from) {
    QueryModuleAccountByNameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryModuleAccountByNameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryModuleAccountByNameResponse";
  }
  protected:
  explicit QueryModuleAccountByNameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // .google.protobuf.Any account = 1 [json_name = "account", (.cosmos_proto.accepts_interface) = "cosmos.auth.v1beta1.ModuleAccountI"];
  bool has_account() const;
  void clear_account() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& account() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_account();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_account();
  void set_allocated_account(::PROTOBUF_NAMESPACE_ID::Any* account);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_account() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::PROTOBUF_NAMESPACE_ID::Any* account);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_account();
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryModuleAccountByNameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* account_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Bech32PrefixRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.Bech32PrefixRequest) */ {
 public:
  inline Bech32PrefixRequest() : Bech32PrefixRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Bech32PrefixRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bech32PrefixRequest(const Bech32PrefixRequest& from);
  Bech32PrefixRequest(Bech32PrefixRequest&& from) noexcept
    : Bech32PrefixRequest() {
    *this = ::std::move(from);
  }

  inline Bech32PrefixRequest& operator=(const Bech32PrefixRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bech32PrefixRequest& operator=(Bech32PrefixRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bech32PrefixRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bech32PrefixRequest* internal_default_instance() {
    return reinterpret_cast<const Bech32PrefixRequest*>(
               &_Bech32PrefixRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Bech32PrefixRequest& a, Bech32PrefixRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(Bech32PrefixRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bech32PrefixRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bech32PrefixRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bech32PrefixRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Bech32PrefixRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Bech32PrefixRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.Bech32PrefixRequest";
  }
  protected:
  explicit Bech32PrefixRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.Bech32PrefixRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Bech32PrefixResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.Bech32PrefixResponse) */ {
 public:
  inline Bech32PrefixResponse() : Bech32PrefixResponse(nullptr) {}
  ~Bech32PrefixResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Bech32PrefixResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bech32PrefixResponse(const Bech32PrefixResponse& from);
  Bech32PrefixResponse(Bech32PrefixResponse&& from) noexcept
    : Bech32PrefixResponse() {
    *this = ::std::move(from);
  }

  inline Bech32PrefixResponse& operator=(const Bech32PrefixResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bech32PrefixResponse& operator=(Bech32PrefixResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bech32PrefixResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bech32PrefixResponse* internal_default_instance() {
    return reinterpret_cast<const Bech32PrefixResponse*>(
               &_Bech32PrefixResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Bech32PrefixResponse& a, Bech32PrefixResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(Bech32PrefixResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bech32PrefixResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bech32PrefixResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bech32PrefixResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bech32PrefixResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bech32PrefixResponse& from) {
    Bech32PrefixResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bech32PrefixResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.Bech32PrefixResponse";
  }
  protected:
  explicit Bech32PrefixResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBech32PrefixFieldNumber = 1,
  };
  // string bech32_prefix = 1 [json_name = "bech32Prefix"];
  void clear_bech32_prefix() ;
  const std::string& bech32_prefix() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bech32_prefix(Arg_&& arg, Args_... args);
  std::string* mutable_bech32_prefix();
  PROTOBUF_NODISCARD std::string* release_bech32_prefix();
  void set_allocated_bech32_prefix(std::string* ptr);

  private:
  const std::string& _internal_bech32_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bech32_prefix(
      const std::string& value);
  std::string* _internal_mutable_bech32_prefix();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.Bech32PrefixResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bech32_prefix_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class AddressBytesToStringRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.AddressBytesToStringRequest) */ {
 public:
  inline AddressBytesToStringRequest() : AddressBytesToStringRequest(nullptr) {}
  ~AddressBytesToStringRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddressBytesToStringRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressBytesToStringRequest(const AddressBytesToStringRequest& from);
  AddressBytesToStringRequest(AddressBytesToStringRequest&& from) noexcept
    : AddressBytesToStringRequest() {
    *this = ::std::move(from);
  }

  inline AddressBytesToStringRequest& operator=(const AddressBytesToStringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressBytesToStringRequest& operator=(AddressBytesToStringRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressBytesToStringRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressBytesToStringRequest* internal_default_instance() {
    return reinterpret_cast<const AddressBytesToStringRequest*>(
               &_AddressBytesToStringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AddressBytesToStringRequest& a, AddressBytesToStringRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressBytesToStringRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressBytesToStringRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressBytesToStringRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressBytesToStringRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressBytesToStringRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddressBytesToStringRequest& from) {
    AddressBytesToStringRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressBytesToStringRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.AddressBytesToStringRequest";
  }
  protected:
  explicit AddressBytesToStringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressBytesFieldNumber = 1,
  };
  // bytes address_bytes = 1 [json_name = "addressBytes"];
  void clear_address_bytes() ;
  const std::string& address_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_address_bytes();
  PROTOBUF_NODISCARD std::string* release_address_bytes();
  void set_allocated_address_bytes(std::string* ptr);

  private:
  const std::string& _internal_address_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_bytes(
      const std::string& value);
  std::string* _internal_mutable_address_bytes();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.AddressBytesToStringRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class AddressBytesToStringResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.AddressBytesToStringResponse) */ {
 public:
  inline AddressBytesToStringResponse() : AddressBytesToStringResponse(nullptr) {}
  ~AddressBytesToStringResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddressBytesToStringResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressBytesToStringResponse(const AddressBytesToStringResponse& from);
  AddressBytesToStringResponse(AddressBytesToStringResponse&& from) noexcept
    : AddressBytesToStringResponse() {
    *this = ::std::move(from);
  }

  inline AddressBytesToStringResponse& operator=(const AddressBytesToStringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressBytesToStringResponse& operator=(AddressBytesToStringResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressBytesToStringResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressBytesToStringResponse* internal_default_instance() {
    return reinterpret_cast<const AddressBytesToStringResponse*>(
               &_AddressBytesToStringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AddressBytesToStringResponse& a, AddressBytesToStringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressBytesToStringResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressBytesToStringResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressBytesToStringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressBytesToStringResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressBytesToStringResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddressBytesToStringResponse& from) {
    AddressBytesToStringResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressBytesToStringResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.AddressBytesToStringResponse";
  }
  protected:
  explicit AddressBytesToStringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressStringFieldNumber = 1,
  };
  // string address_string = 1 [json_name = "addressString"];
  void clear_address_string() ;
  const std::string& address_string() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address_string(Arg_&& arg, Args_... args);
  std::string* mutable_address_string();
  PROTOBUF_NODISCARD std::string* release_address_string();
  void set_allocated_address_string(std::string* ptr);

  private:
  const std::string& _internal_address_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_string(
      const std::string& value);
  std::string* _internal_mutable_address_string();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.AddressBytesToStringResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_string_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class AddressStringToBytesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.AddressStringToBytesRequest) */ {
 public:
  inline AddressStringToBytesRequest() : AddressStringToBytesRequest(nullptr) {}
  ~AddressStringToBytesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddressStringToBytesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressStringToBytesRequest(const AddressStringToBytesRequest& from);
  AddressStringToBytesRequest(AddressStringToBytesRequest&& from) noexcept
    : AddressStringToBytesRequest() {
    *this = ::std::move(from);
  }

  inline AddressStringToBytesRequest& operator=(const AddressStringToBytesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressStringToBytesRequest& operator=(AddressStringToBytesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressStringToBytesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressStringToBytesRequest* internal_default_instance() {
    return reinterpret_cast<const AddressStringToBytesRequest*>(
               &_AddressStringToBytesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AddressStringToBytesRequest& a, AddressStringToBytesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressStringToBytesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressStringToBytesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressStringToBytesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressStringToBytesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressStringToBytesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddressStringToBytesRequest& from) {
    AddressStringToBytesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressStringToBytesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.AddressStringToBytesRequest";
  }
  protected:
  explicit AddressStringToBytesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressStringFieldNumber = 1,
  };
  // string address_string = 1 [json_name = "addressString"];
  void clear_address_string() ;
  const std::string& address_string() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address_string(Arg_&& arg, Args_... args);
  std::string* mutable_address_string();
  PROTOBUF_NODISCARD std::string* release_address_string();
  void set_allocated_address_string(std::string* ptr);

  private:
  const std::string& _internal_address_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_string(
      const std::string& value);
  std::string* _internal_mutable_address_string();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.AddressStringToBytesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_string_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class AddressStringToBytesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.AddressStringToBytesResponse) */ {
 public:
  inline AddressStringToBytesResponse() : AddressStringToBytesResponse(nullptr) {}
  ~AddressStringToBytesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddressStringToBytesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddressStringToBytesResponse(const AddressStringToBytesResponse& from);
  AddressStringToBytesResponse(AddressStringToBytesResponse&& from) noexcept
    : AddressStringToBytesResponse() {
    *this = ::std::move(from);
  }

  inline AddressStringToBytesResponse& operator=(const AddressStringToBytesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressStringToBytesResponse& operator=(AddressStringToBytesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddressStringToBytesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddressStringToBytesResponse* internal_default_instance() {
    return reinterpret_cast<const AddressStringToBytesResponse*>(
               &_AddressStringToBytesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AddressStringToBytesResponse& a, AddressStringToBytesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressStringToBytesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddressStringToBytesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddressStringToBytesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddressStringToBytesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddressStringToBytesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddressStringToBytesResponse& from) {
    AddressStringToBytesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressStringToBytesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.AddressStringToBytesResponse";
  }
  protected:
  explicit AddressStringToBytesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressBytesFieldNumber = 1,
  };
  // bytes address_bytes = 1 [json_name = "addressBytes"];
  void clear_address_bytes() ;
  const std::string& address_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_address_bytes();
  PROTOBUF_NODISCARD std::string* release_address_bytes();
  void set_allocated_address_bytes(std::string* ptr);

  private:
  const std::string& _internal_address_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address_bytes(
      const std::string& value);
  std::string* _internal_mutable_address_bytes();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.AddressStringToBytesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAccountAddressByIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryAccountAddressByIDRequest) */ {
 public:
  inline QueryAccountAddressByIDRequest() : QueryAccountAddressByIDRequest(nullptr) {}
  ~QueryAccountAddressByIDRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAccountAddressByIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAccountAddressByIDRequest(const QueryAccountAddressByIDRequest& from);
  QueryAccountAddressByIDRequest(QueryAccountAddressByIDRequest&& from) noexcept
    : QueryAccountAddressByIDRequest() {
    *this = ::std::move(from);
  }

  inline QueryAccountAddressByIDRequest& operator=(const QueryAccountAddressByIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAccountAddressByIDRequest& operator=(QueryAccountAddressByIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAccountAddressByIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAccountAddressByIDRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAccountAddressByIDRequest*>(
               &_QueryAccountAddressByIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryAccountAddressByIDRequest& a, QueryAccountAddressByIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAccountAddressByIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAccountAddressByIDRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAccountAddressByIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAccountAddressByIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAccountAddressByIDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAccountAddressByIDRequest& from) {
    QueryAccountAddressByIDRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAccountAddressByIDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryAccountAddressByIDRequest";
  }
  protected:
  explicit QueryAccountAddressByIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // int64 id = 1 [json_name = "id", deprecated = true];
  [[deprecated]]  void clear_id() ;
  [[deprecated]] ::int64_t id() const;
  [[deprecated]] void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // uint64 account_id = 2 [json_name = "accountId"];
  void clear_account_id() ;
  ::uint64_t account_id() const;
  void set_account_id(::uint64_t value);

  private:
  ::uint64_t _internal_account_id() const;
  void _internal_set_account_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryAccountAddressByIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t id_;
    ::uint64_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAccountAddressByIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryAccountAddressByIDResponse) */ {
 public:
  inline QueryAccountAddressByIDResponse() : QueryAccountAddressByIDResponse(nullptr) {}
  ~QueryAccountAddressByIDResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAccountAddressByIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAccountAddressByIDResponse(const QueryAccountAddressByIDResponse& from);
  QueryAccountAddressByIDResponse(QueryAccountAddressByIDResponse&& from) noexcept
    : QueryAccountAddressByIDResponse() {
    *this = ::std::move(from);
  }

  inline QueryAccountAddressByIDResponse& operator=(const QueryAccountAddressByIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAccountAddressByIDResponse& operator=(QueryAccountAddressByIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAccountAddressByIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAccountAddressByIDResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAccountAddressByIDResponse*>(
               &_QueryAccountAddressByIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryAccountAddressByIDResponse& a, QueryAccountAddressByIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAccountAddressByIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAccountAddressByIDResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAccountAddressByIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAccountAddressByIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAccountAddressByIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAccountAddressByIDResponse& from) {
    QueryAccountAddressByIDResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAccountAddressByIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryAccountAddressByIDResponse";
  }
  protected:
  explicit QueryAccountAddressByIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountAddressFieldNumber = 1,
  };
  // string account_address = 1 [json_name = "accountAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_account_address() ;
  const std::string& account_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_address(Arg_&& arg, Args_... args);
  std::string* mutable_account_address();
  PROTOBUF_NODISCARD std::string* release_account_address();
  void set_allocated_account_address(std::string* ptr);

  private:
  const std::string& _internal_account_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_address(
      const std::string& value);
  std::string* _internal_mutable_account_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryAccountAddressByIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAccountInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryAccountInfoRequest) */ {
 public:
  inline QueryAccountInfoRequest() : QueryAccountInfoRequest(nullptr) {}
  ~QueryAccountInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAccountInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAccountInfoRequest(const QueryAccountInfoRequest& from);
  QueryAccountInfoRequest(QueryAccountInfoRequest&& from) noexcept
    : QueryAccountInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryAccountInfoRequest& operator=(const QueryAccountInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAccountInfoRequest& operator=(QueryAccountInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAccountInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAccountInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAccountInfoRequest*>(
               &_QueryAccountInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryAccountInfoRequest& a, QueryAccountInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAccountInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAccountInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAccountInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAccountInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAccountInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAccountInfoRequest& from) {
    QueryAccountInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAccountInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryAccountInfoRequest";
  }
  protected:
  explicit QueryAccountInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryAccountInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAccountInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.auth.v1beta1.QueryAccountInfoResponse) */ {
 public:
  inline QueryAccountInfoResponse() : QueryAccountInfoResponse(nullptr) {}
  ~QueryAccountInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAccountInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAccountInfoResponse(const QueryAccountInfoResponse& from);
  QueryAccountInfoResponse(QueryAccountInfoResponse&& from) noexcept
    : QueryAccountInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryAccountInfoResponse& operator=(const QueryAccountInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAccountInfoResponse& operator=(QueryAccountInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAccountInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAccountInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAccountInfoResponse*>(
               &_QueryAccountInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryAccountInfoResponse& a, QueryAccountInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAccountInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAccountInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAccountInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAccountInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAccountInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAccountInfoResponse& from) {
    QueryAccountInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAccountInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.auth.v1beta1.QueryAccountInfoResponse";
  }
  protected:
  explicit QueryAccountInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .cosmos.auth.v1beta1.BaseAccount info = 1 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::cosmos::auth::v1beta1::BaseAccount& info() const;
  PROTOBUF_NODISCARD ::cosmos::auth::v1beta1::BaseAccount* release_info();
  ::cosmos::auth::v1beta1::BaseAccount* mutable_info();
  void set_allocated_info(::cosmos::auth::v1beta1::BaseAccount* info);
  private:
  const ::cosmos::auth::v1beta1::BaseAccount& _internal_info() const;
  ::cosmos::auth::v1beta1::BaseAccount* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::cosmos::auth::v1beta1::BaseAccount* info);
  ::cosmos::auth::v1beta1::BaseAccount* unsafe_arena_release_info();
  // @@protoc_insertion_point(class_scope:cosmos.auth.v1beta1.QueryAccountInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::auth::v1beta1::BaseAccount* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fauth_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryAccountsRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryAccountsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAccountsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAccountsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountsRequest.pagination)
  return _internal_pagination();
}
inline void QueryAccountsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.auth.v1beta1.QueryAccountsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAccountsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAccountsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryAccountsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAccountsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAccountsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryAccountsRequest.pagination)
  return _msg;
}
inline void QueryAccountsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryAccountsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAccountsResponse

// repeated .google.protobuf.Any accounts = 1 [json_name = "accounts", (.cosmos_proto.accepts_interface) = "cosmos.auth.v1beta1.AccountI"];
inline int QueryAccountsResponse::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int QueryAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryAccountsResponse.accounts)
  return _internal_mutable_accounts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
QueryAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.auth.v1beta1.QueryAccountsResponse.accounts)
  return _internal_mutable_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryAccountsResponse::_internal_accounts(int index) const {
  return _internal_accounts().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAccountsResponse::_internal_add_accounts() {
  return _internal_mutable_accounts()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAccountsResponse::add_accounts() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:cosmos.auth.v1beta1.QueryAccountsResponse.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
QueryAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:cosmos.auth.v1beta1.QueryAccountsResponse.accounts)
  return _internal_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
QueryAccountsResponse::_internal_accounts() const {
  return _impl_.accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
QueryAccountsResponse::_internal_mutable_accounts() {
  return &_impl_.accounts_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryAccountsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAccountsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAccountsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountsResponse.pagination)
  return _internal_pagination();
}
inline void QueryAccountsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.auth.v1beta1.QueryAccountsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAccountsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAccountsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryAccountsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAccountsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAccountsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryAccountsResponse.pagination)
  return _msg;
}
inline void QueryAccountsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryAccountsResponse.pagination)
}

// -------------------------------------------------------------------

// QueryAccountRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryAccountRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryAccountRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAccountRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.QueryAccountRequest.address)
}
inline std::string* QueryAccountRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryAccountRequest.address)
  return _s;
}
inline const std::string& QueryAccountRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryAccountRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAccountRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAccountRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryAccountRequest.address)
  return _impl_.address_.Release();
}
inline void QueryAccountRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryAccountRequest.address)
}

// -------------------------------------------------------------------

// QueryAccountResponse

// .google.protobuf.Any account = 1 [json_name = "account", (.cosmos_proto.accepts_interface) = "cosmos.auth.v1beta1.AccountI"];
inline bool QueryAccountResponse::has_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.account_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryAccountResponse::_internal_account() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.account_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryAccountResponse::account() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountResponse.account)
  return _internal_account();
}
inline void QueryAccountResponse::unsafe_arena_set_allocated_account(
    ::PROTOBUF_NAMESPACE_ID::Any* account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  _impl_.account_ = account;
  if (account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.auth.v1beta1.QueryAccountResponse.account)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAccountResponse::release_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.account_;
  _impl_.account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAccountResponse::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryAccountResponse.account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.account_;
  _impl_.account_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAccountResponse::_internal_mutable_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.account_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.account_ = p;
  }
  return _impl_.account_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryAccountResponse::mutable_account() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryAccountResponse.account)
  return _msg;
}
inline void QueryAccountResponse::set_allocated_account(::PROTOBUF_NAMESPACE_ID::Any* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account));
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.account_ = account;
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryAccountResponse.account)
}

// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .cosmos.auth.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmos::auth::v1beta1::Params& QueryParamsResponse::_internal_params() const {
  const ::cosmos::auth::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::auth::v1beta1::Params&>(
      ::cosmos::auth::v1beta1::_Params_default_instance_);
}
inline const ::cosmos::auth::v1beta1::Params& QueryParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(
    ::cosmos::auth::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.auth.v1beta1.QueryParamsResponse.params)
}
inline ::cosmos::auth::v1beta1::Params* QueryParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::auth::v1beta1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmos::auth::v1beta1::Params* QueryParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::auth::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmos::auth::v1beta1::Params* QueryParamsResponse::mutable_params() {
  ::cosmos::auth::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::cosmos::auth::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryModuleAccountsRequest

// -------------------------------------------------------------------

// QueryModuleAccountsResponse

// repeated .google.protobuf.Any accounts = 1 [json_name = "accounts", (.cosmos_proto.accepts_interface) = "cosmos.auth.v1beta1.ModuleAccountI"];
inline int QueryModuleAccountsResponse::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int QueryModuleAccountsResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryModuleAccountsResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryModuleAccountsResponse.accounts)
  return _internal_mutable_accounts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
QueryModuleAccountsResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.auth.v1beta1.QueryModuleAccountsResponse.accounts)
  return _internal_mutable_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryModuleAccountsResponse::_internal_accounts(int index) const {
  return _internal_accounts().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryModuleAccountsResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryModuleAccountsResponse.accounts)
  return _internal_accounts(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryModuleAccountsResponse::_internal_add_accounts() {
  return _internal_mutable_accounts()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryModuleAccountsResponse::add_accounts() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:cosmos.auth.v1beta1.QueryModuleAccountsResponse.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
QueryModuleAccountsResponse::accounts() const {
  // @@protoc_insertion_point(field_list:cosmos.auth.v1beta1.QueryModuleAccountsResponse.accounts)
  return _internal_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
QueryModuleAccountsResponse::_internal_accounts() const {
  return _impl_.accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
QueryModuleAccountsResponse::_internal_mutable_accounts() {
  return &_impl_.accounts_;
}

// -------------------------------------------------------------------

// QueryModuleAccountByNameRequest

// string name = 1 [json_name = "name"];
inline void QueryModuleAccountByNameRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QueryModuleAccountByNameRequest::name() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryModuleAccountByNameRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryModuleAccountByNameRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.QueryModuleAccountByNameRequest.name)
}
inline std::string* QueryModuleAccountByNameRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryModuleAccountByNameRequest.name)
  return _s;
}
inline const std::string& QueryModuleAccountByNameRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QueryModuleAccountByNameRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryModuleAccountByNameRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryModuleAccountByNameRequest::release_name() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryModuleAccountByNameRequest.name)
  return _impl_.name_.Release();
}
inline void QueryModuleAccountByNameRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryModuleAccountByNameRequest.name)
}

// -------------------------------------------------------------------

// QueryModuleAccountByNameResponse

// .google.protobuf.Any account = 1 [json_name = "account", (.cosmos_proto.accepts_interface) = "cosmos.auth.v1beta1.ModuleAccountI"];
inline bool QueryModuleAccountByNameResponse::has_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.account_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryModuleAccountByNameResponse::_internal_account() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.account_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryModuleAccountByNameResponse::account() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryModuleAccountByNameResponse.account)
  return _internal_account();
}
inline void QueryModuleAccountByNameResponse::unsafe_arena_set_allocated_account(
    ::PROTOBUF_NAMESPACE_ID::Any* account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  _impl_.account_ = account;
  if (account) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.auth.v1beta1.QueryModuleAccountByNameResponse.account)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryModuleAccountByNameResponse::release_account() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.account_;
  _impl_.account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryModuleAccountByNameResponse::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryModuleAccountByNameResponse.account)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.account_;
  _impl_.account_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryModuleAccountByNameResponse::_internal_mutable_account() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.account_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.account_ = p;
  }
  return _impl_.account_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryModuleAccountByNameResponse::mutable_account() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryModuleAccountByNameResponse.account)
  return _msg;
}
inline void QueryModuleAccountByNameResponse::set_allocated_account(::PROTOBUF_NAMESPACE_ID::Any* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account));
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.account_ = account;
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryModuleAccountByNameResponse.account)
}

// -------------------------------------------------------------------

// Bech32PrefixRequest

// -------------------------------------------------------------------

// Bech32PrefixResponse

// string bech32_prefix = 1 [json_name = "bech32Prefix"];
inline void Bech32PrefixResponse::clear_bech32_prefix() {
  _impl_.bech32_prefix_.ClearToEmpty();
}
inline const std::string& Bech32PrefixResponse::bech32_prefix() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.Bech32PrefixResponse.bech32_prefix)
  return _internal_bech32_prefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Bech32PrefixResponse::set_bech32_prefix(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bech32_prefix_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.Bech32PrefixResponse.bech32_prefix)
}
inline std::string* Bech32PrefixResponse::mutable_bech32_prefix() {
  std::string* _s = _internal_mutable_bech32_prefix();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.Bech32PrefixResponse.bech32_prefix)
  return _s;
}
inline const std::string& Bech32PrefixResponse::_internal_bech32_prefix() const {
  return _impl_.bech32_prefix_.Get();
}
inline void Bech32PrefixResponse::_internal_set_bech32_prefix(const std::string& value) {
  ;


  _impl_.bech32_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* Bech32PrefixResponse::_internal_mutable_bech32_prefix() {
  ;
  return _impl_.bech32_prefix_.Mutable( GetArenaForAllocation());
}
inline std::string* Bech32PrefixResponse::release_bech32_prefix() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.Bech32PrefixResponse.bech32_prefix)
  return _impl_.bech32_prefix_.Release();
}
inline void Bech32PrefixResponse::set_allocated_bech32_prefix(std::string* value) {
  _impl_.bech32_prefix_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bech32_prefix_.IsDefault()) {
          _impl_.bech32_prefix_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.Bech32PrefixResponse.bech32_prefix)
}

// -------------------------------------------------------------------

// AddressBytesToStringRequest

// bytes address_bytes = 1 [json_name = "addressBytes"];
inline void AddressBytesToStringRequest::clear_address_bytes() {
  _impl_.address_bytes_.ClearToEmpty();
}
inline const std::string& AddressBytesToStringRequest::address_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.AddressBytesToStringRequest.address_bytes)
  return _internal_address_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddressBytesToStringRequest::set_address_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.AddressBytesToStringRequest.address_bytes)
}
inline std::string* AddressBytesToStringRequest::mutable_address_bytes() {
  std::string* _s = _internal_mutable_address_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.AddressBytesToStringRequest.address_bytes)
  return _s;
}
inline const std::string& AddressBytesToStringRequest::_internal_address_bytes() const {
  return _impl_.address_bytes_.Get();
}
inline void AddressBytesToStringRequest::_internal_set_address_bytes(const std::string& value) {
  ;


  _impl_.address_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressBytesToStringRequest::_internal_mutable_address_bytes() {
  ;
  return _impl_.address_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* AddressBytesToStringRequest::release_address_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.AddressBytesToStringRequest.address_bytes)
  return _impl_.address_bytes_.Release();
}
inline void AddressBytesToStringRequest::set_allocated_address_bytes(std::string* value) {
  _impl_.address_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_bytes_.IsDefault()) {
          _impl_.address_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.AddressBytesToStringRequest.address_bytes)
}

// -------------------------------------------------------------------

// AddressBytesToStringResponse

// string address_string = 1 [json_name = "addressString"];
inline void AddressBytesToStringResponse::clear_address_string() {
  _impl_.address_string_.ClearToEmpty();
}
inline const std::string& AddressBytesToStringResponse::address_string() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.AddressBytesToStringResponse.address_string)
  return _internal_address_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddressBytesToStringResponse::set_address_string(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_string_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.AddressBytesToStringResponse.address_string)
}
inline std::string* AddressBytesToStringResponse::mutable_address_string() {
  std::string* _s = _internal_mutable_address_string();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.AddressBytesToStringResponse.address_string)
  return _s;
}
inline const std::string& AddressBytesToStringResponse::_internal_address_string() const {
  return _impl_.address_string_.Get();
}
inline void AddressBytesToStringResponse::_internal_set_address_string(const std::string& value) {
  ;


  _impl_.address_string_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressBytesToStringResponse::_internal_mutable_address_string() {
  ;
  return _impl_.address_string_.Mutable( GetArenaForAllocation());
}
inline std::string* AddressBytesToStringResponse::release_address_string() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.AddressBytesToStringResponse.address_string)
  return _impl_.address_string_.Release();
}
inline void AddressBytesToStringResponse::set_allocated_address_string(std::string* value) {
  _impl_.address_string_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_string_.IsDefault()) {
          _impl_.address_string_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.AddressBytesToStringResponse.address_string)
}

// -------------------------------------------------------------------

// AddressStringToBytesRequest

// string address_string = 1 [json_name = "addressString"];
inline void AddressStringToBytesRequest::clear_address_string() {
  _impl_.address_string_.ClearToEmpty();
}
inline const std::string& AddressStringToBytesRequest::address_string() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.AddressStringToBytesRequest.address_string)
  return _internal_address_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddressStringToBytesRequest::set_address_string(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_string_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.AddressStringToBytesRequest.address_string)
}
inline std::string* AddressStringToBytesRequest::mutable_address_string() {
  std::string* _s = _internal_mutable_address_string();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.AddressStringToBytesRequest.address_string)
  return _s;
}
inline const std::string& AddressStringToBytesRequest::_internal_address_string() const {
  return _impl_.address_string_.Get();
}
inline void AddressStringToBytesRequest::_internal_set_address_string(const std::string& value) {
  ;


  _impl_.address_string_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressStringToBytesRequest::_internal_mutable_address_string() {
  ;
  return _impl_.address_string_.Mutable( GetArenaForAllocation());
}
inline std::string* AddressStringToBytesRequest::release_address_string() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.AddressStringToBytesRequest.address_string)
  return _impl_.address_string_.Release();
}
inline void AddressStringToBytesRequest::set_allocated_address_string(std::string* value) {
  _impl_.address_string_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_string_.IsDefault()) {
          _impl_.address_string_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.AddressStringToBytesRequest.address_string)
}

// -------------------------------------------------------------------

// AddressStringToBytesResponse

// bytes address_bytes = 1 [json_name = "addressBytes"];
inline void AddressStringToBytesResponse::clear_address_bytes() {
  _impl_.address_bytes_.ClearToEmpty();
}
inline const std::string& AddressStringToBytesResponse::address_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.AddressStringToBytesResponse.address_bytes)
  return _internal_address_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddressStringToBytesResponse::set_address_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.AddressStringToBytesResponse.address_bytes)
}
inline std::string* AddressStringToBytesResponse::mutable_address_bytes() {
  std::string* _s = _internal_mutable_address_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.AddressStringToBytesResponse.address_bytes)
  return _s;
}
inline const std::string& AddressStringToBytesResponse::_internal_address_bytes() const {
  return _impl_.address_bytes_.Get();
}
inline void AddressStringToBytesResponse::_internal_set_address_bytes(const std::string& value) {
  ;


  _impl_.address_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* AddressStringToBytesResponse::_internal_mutable_address_bytes() {
  ;
  return _impl_.address_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* AddressStringToBytesResponse::release_address_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.AddressStringToBytesResponse.address_bytes)
  return _impl_.address_bytes_.Release();
}
inline void AddressStringToBytesResponse::set_allocated_address_bytes(std::string* value) {
  _impl_.address_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_bytes_.IsDefault()) {
          _impl_.address_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.AddressStringToBytesResponse.address_bytes)
}

// -------------------------------------------------------------------

// QueryAccountAddressByIDRequest

// int64 id = 1 [json_name = "id", deprecated = true];
inline void QueryAccountAddressByIDRequest::clear_id() {
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t QueryAccountAddressByIDRequest::id() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountAddressByIDRequest.id)
  return _internal_id();
}
inline void QueryAccountAddressByIDRequest::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.QueryAccountAddressByIDRequest.id)
}
inline ::int64_t QueryAccountAddressByIDRequest::_internal_id() const {
  return _impl_.id_;
}
inline void QueryAccountAddressByIDRequest::_internal_set_id(::int64_t value) {
  ;
  _impl_.id_ = value;
}

// uint64 account_id = 2 [json_name = "accountId"];
inline void QueryAccountAddressByIDRequest::clear_account_id() {
  _impl_.account_id_ = ::uint64_t{0u};
}
inline ::uint64_t QueryAccountAddressByIDRequest::account_id() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountAddressByIDRequest.account_id)
  return _internal_account_id();
}
inline void QueryAccountAddressByIDRequest::set_account_id(::uint64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.QueryAccountAddressByIDRequest.account_id)
}
inline ::uint64_t QueryAccountAddressByIDRequest::_internal_account_id() const {
  return _impl_.account_id_;
}
inline void QueryAccountAddressByIDRequest::_internal_set_account_id(::uint64_t value) {
  ;
  _impl_.account_id_ = value;
}

// -------------------------------------------------------------------

// QueryAccountAddressByIDResponse

// string account_address = 1 [json_name = "accountAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryAccountAddressByIDResponse::clear_account_address() {
  _impl_.account_address_.ClearToEmpty();
}
inline const std::string& QueryAccountAddressByIDResponse::account_address() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountAddressByIDResponse.account_address)
  return _internal_account_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAccountAddressByIDResponse::set_account_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.QueryAccountAddressByIDResponse.account_address)
}
inline std::string* QueryAccountAddressByIDResponse::mutable_account_address() {
  std::string* _s = _internal_mutable_account_address();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryAccountAddressByIDResponse.account_address)
  return _s;
}
inline const std::string& QueryAccountAddressByIDResponse::_internal_account_address() const {
  return _impl_.account_address_.Get();
}
inline void QueryAccountAddressByIDResponse::_internal_set_account_address(const std::string& value) {
  ;


  _impl_.account_address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAccountAddressByIDResponse::_internal_mutable_account_address() {
  ;
  return _impl_.account_address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAccountAddressByIDResponse::release_account_address() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryAccountAddressByIDResponse.account_address)
  return _impl_.account_address_.Release();
}
inline void QueryAccountAddressByIDResponse::set_allocated_account_address(std::string* value) {
  _impl_.account_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_address_.IsDefault()) {
          _impl_.account_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryAccountAddressByIDResponse.account_address)
}

// -------------------------------------------------------------------

// QueryAccountInfoRequest

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryAccountInfoRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& QueryAccountInfoRequest::address() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountInfoRequest.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryAccountInfoRequest::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.auth.v1beta1.QueryAccountInfoRequest.address)
}
inline std::string* QueryAccountInfoRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryAccountInfoRequest.address)
  return _s;
}
inline const std::string& QueryAccountInfoRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void QueryAccountInfoRequest::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryAccountInfoRequest::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryAccountInfoRequest::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryAccountInfoRequest.address)
  return _impl_.address_.Release();
}
inline void QueryAccountInfoRequest::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryAccountInfoRequest.address)
}

// -------------------------------------------------------------------

// QueryAccountInfoResponse

// .cosmos.auth.v1beta1.BaseAccount info = 1 [json_name = "info"];
inline bool QueryAccountInfoResponse::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::cosmos::auth::v1beta1::BaseAccount& QueryAccountInfoResponse::_internal_info() const {
  const ::cosmos::auth::v1beta1::BaseAccount* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::auth::v1beta1::BaseAccount&>(
      ::cosmos::auth::v1beta1::_BaseAccount_default_instance_);
}
inline const ::cosmos::auth::v1beta1::BaseAccount& QueryAccountInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:cosmos.auth.v1beta1.QueryAccountInfoResponse.info)
  return _internal_info();
}
inline void QueryAccountInfoResponse::unsafe_arena_set_allocated_info(
    ::cosmos::auth::v1beta1::BaseAccount* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.auth.v1beta1.QueryAccountInfoResponse.info)
}
inline ::cosmos::auth::v1beta1::BaseAccount* QueryAccountInfoResponse::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::auth::v1beta1::BaseAccount* QueryAccountInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:cosmos.auth.v1beta1.QueryAccountInfoResponse.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::auth::v1beta1::BaseAccount* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::cosmos::auth::v1beta1::BaseAccount* QueryAccountInfoResponse::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::auth::v1beta1::BaseAccount>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::cosmos::auth::v1beta1::BaseAccount* QueryAccountInfoResponse::mutable_info() {
  ::cosmos::auth::v1beta1::BaseAccount* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:cosmos.auth.v1beta1.QueryAccountInfoResponse.info)
  return _msg;
}
inline void QueryAccountInfoResponse::set_allocated_info(::cosmos::auth::v1beta1::BaseAccount* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.auth.v1beta1.QueryAccountInfoResponse.info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace auth
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fauth_2fv1beta1_2fquery_2eproto_2epb_2eh

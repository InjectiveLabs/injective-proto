// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/v1beta1/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fv1beta1_2fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fv1beta1_2fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/abci/v1beta1/abci.pb.h"
#include "cosmos/tx/v1beta1/tx.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "tendermint/types/block.pb.h"
#include "tendermint/types/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2ftx_2fv1beta1_2fservice_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
namespace cosmos {
namespace tx {
namespace v1beta1 {
class BroadcastTxRequest;
struct BroadcastTxRequestDefaultTypeInternal;
extern BroadcastTxRequestDefaultTypeInternal _BroadcastTxRequest_default_instance_;
class BroadcastTxResponse;
struct BroadcastTxResponseDefaultTypeInternal;
extern BroadcastTxResponseDefaultTypeInternal _BroadcastTxResponse_default_instance_;
class GetBlockWithTxsRequest;
struct GetBlockWithTxsRequestDefaultTypeInternal;
extern GetBlockWithTxsRequestDefaultTypeInternal _GetBlockWithTxsRequest_default_instance_;
class GetBlockWithTxsResponse;
struct GetBlockWithTxsResponseDefaultTypeInternal;
extern GetBlockWithTxsResponseDefaultTypeInternal _GetBlockWithTxsResponse_default_instance_;
class GetTxRequest;
struct GetTxRequestDefaultTypeInternal;
extern GetTxRequestDefaultTypeInternal _GetTxRequest_default_instance_;
class GetTxResponse;
struct GetTxResponseDefaultTypeInternal;
extern GetTxResponseDefaultTypeInternal _GetTxResponse_default_instance_;
class GetTxsEventRequest;
struct GetTxsEventRequestDefaultTypeInternal;
extern GetTxsEventRequestDefaultTypeInternal _GetTxsEventRequest_default_instance_;
class GetTxsEventResponse;
struct GetTxsEventResponseDefaultTypeInternal;
extern GetTxsEventResponseDefaultTypeInternal _GetTxsEventResponse_default_instance_;
class SimulateRequest;
struct SimulateRequestDefaultTypeInternal;
extern SimulateRequestDefaultTypeInternal _SimulateRequest_default_instance_;
class SimulateResponse;
struct SimulateResponseDefaultTypeInternal;
extern SimulateResponseDefaultTypeInternal _SimulateResponse_default_instance_;
class TxDecodeAminoRequest;
struct TxDecodeAminoRequestDefaultTypeInternal;
extern TxDecodeAminoRequestDefaultTypeInternal _TxDecodeAminoRequest_default_instance_;
class TxDecodeAminoResponse;
struct TxDecodeAminoResponseDefaultTypeInternal;
extern TxDecodeAminoResponseDefaultTypeInternal _TxDecodeAminoResponse_default_instance_;
class TxDecodeRequest;
struct TxDecodeRequestDefaultTypeInternal;
extern TxDecodeRequestDefaultTypeInternal _TxDecodeRequest_default_instance_;
class TxDecodeResponse;
struct TxDecodeResponseDefaultTypeInternal;
extern TxDecodeResponseDefaultTypeInternal _TxDecodeResponse_default_instance_;
class TxEncodeAminoRequest;
struct TxEncodeAminoRequestDefaultTypeInternal;
extern TxEncodeAminoRequestDefaultTypeInternal _TxEncodeAminoRequest_default_instance_;
class TxEncodeAminoResponse;
struct TxEncodeAminoResponseDefaultTypeInternal;
extern TxEncodeAminoResponseDefaultTypeInternal _TxEncodeAminoResponse_default_instance_;
class TxEncodeRequest;
struct TxEncodeRequestDefaultTypeInternal;
extern TxEncodeRequestDefaultTypeInternal _TxEncodeRequest_default_instance_;
class TxEncodeResponse;
struct TxEncodeResponseDefaultTypeInternal;
extern TxEncodeResponseDefaultTypeInternal _TxEncodeResponse_default_instance_;
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::tx::v1beta1::BroadcastTxRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::BroadcastTxRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::BroadcastTxResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::BroadcastTxResponse>(Arena*);
template <>
::cosmos::tx::v1beta1::GetBlockWithTxsRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::GetBlockWithTxsRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::GetBlockWithTxsResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::GetBlockWithTxsResponse>(Arena*);
template <>
::cosmos::tx::v1beta1::GetTxRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::GetTxRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::GetTxResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::GetTxResponse>(Arena*);
template <>
::cosmos::tx::v1beta1::GetTxsEventRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::GetTxsEventRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::GetTxsEventResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::GetTxsEventResponse>(Arena*);
template <>
::cosmos::tx::v1beta1::SimulateRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::SimulateRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::SimulateResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::SimulateResponse>(Arena*);
template <>
::cosmos::tx::v1beta1::TxDecodeAminoRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxDecodeAminoRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::TxDecodeAminoResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxDecodeAminoResponse>(Arena*);
template <>
::cosmos::tx::v1beta1::TxDecodeRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxDecodeRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::TxDecodeResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxDecodeResponse>(Arena*);
template <>
::cosmos::tx::v1beta1::TxEncodeAminoRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxEncodeAminoRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::TxEncodeAminoResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxEncodeAminoResponse>(Arena*);
template <>
::cosmos::tx::v1beta1::TxEncodeRequest* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxEncodeRequest>(Arena*);
template <>
::cosmos::tx::v1beta1::TxEncodeResponse* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxEncodeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace tx {
namespace v1beta1 {
enum OrderBy : int {
  ORDER_BY_UNSPECIFIED = 0,
  ORDER_BY_ASC = 1,
  ORDER_BY_DESC = 2,
  OrderBy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderBy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderBy_IsValid(int value);
constexpr OrderBy OrderBy_MIN = static_cast<OrderBy>(0);
constexpr OrderBy OrderBy_MAX = static_cast<OrderBy>(2);
constexpr int OrderBy_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
OrderBy_descriptor();
template <typename T>
const std::string& OrderBy_Name(T value) {
  static_assert(std::is_same<T, OrderBy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderBy_Name().");
  return OrderBy_Name(static_cast<OrderBy>(value));
}
template <>
inline const std::string& OrderBy_Name(OrderBy value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<OrderBy_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OrderBy_Parse(absl::string_view name, OrderBy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderBy>(
      OrderBy_descriptor(), name, value);
}
enum BroadcastMode : int {
  BROADCAST_MODE_UNSPECIFIED = 0,
  BROADCAST_MODE_BLOCK [[deprecated]] = 1,
  BROADCAST_MODE_SYNC = 2,
  BROADCAST_MODE_ASYNC = 3,
  BroadcastMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BroadcastMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BroadcastMode_IsValid(int value);
constexpr BroadcastMode BroadcastMode_MIN = static_cast<BroadcastMode>(0);
constexpr BroadcastMode BroadcastMode_MAX = static_cast<BroadcastMode>(3);
constexpr int BroadcastMode_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
BroadcastMode_descriptor();
template <typename T>
const std::string& BroadcastMode_Name(T value) {
  static_assert(std::is_same<T, BroadcastMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BroadcastMode_Name().");
  return BroadcastMode_Name(static_cast<BroadcastMode>(value));
}
template <>
inline const std::string& BroadcastMode_Name(BroadcastMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<BroadcastMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool BroadcastMode_Parse(absl::string_view name, BroadcastMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BroadcastMode>(
      BroadcastMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GetTxsEventRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.GetTxsEventRequest) */ {
 public:
  inline GetTxsEventRequest() : GetTxsEventRequest(nullptr) {}
  ~GetTxsEventRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTxsEventRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTxsEventRequest(const GetTxsEventRequest& from);
  GetTxsEventRequest(GetTxsEventRequest&& from) noexcept
    : GetTxsEventRequest() {
    *this = ::std::move(from);
  }

  inline GetTxsEventRequest& operator=(const GetTxsEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxsEventRequest& operator=(GetTxsEventRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTxsEventRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTxsEventRequest* internal_default_instance() {
    return reinterpret_cast<const GetTxsEventRequest*>(
               &_GetTxsEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTxsEventRequest& a, GetTxsEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxsEventRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxsEventRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTxsEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTxsEventRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTxsEventRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTxsEventRequest& from) {
    GetTxsEventRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxsEventRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.GetTxsEventRequest";
  }
  protected:
  explicit GetTxsEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
    kPaginationFieldNumber = 2,
    kPageFieldNumber = 4,
    kLimitFieldNumber = 5,
    kOrderByFieldNumber = 3,
  };
  // repeated string events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  const std::string& events(int index) const;
  std::string* mutable_events(int index);
  void set_events(int index, const std::string& value);
  void set_events(int index, std::string&& value);
  void set_events(int index, const char* value);
  void set_events(int index, const char* value, std::size_t size);
  void set_events(int index, absl::string_view value);
  std::string* add_events();
  void add_events(const std::string& value);
  void add_events(std::string&& value);
  void add_events(const char* value);
  void add_events(const char* value, std::size_t size);
  void add_events(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_events();

  private:
  const std::string& _internal_events(int index) const;
  std::string* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_events();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination", deprecated = true];
  [[deprecated]]  bool has_pagination() const;
  [[deprecated]]  void clear_pagination() ;
  [[deprecated]] const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  [[deprecated]] PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  [[deprecated]] ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  [[deprecated]] void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  [[deprecated]] void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  [[deprecated]] ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 page = 4 [json_name = "page"];
  void clear_page() ;
  ::uint64_t page() const;
  void set_page(::uint64_t value);

  private:
  ::uint64_t _internal_page() const;
  void _internal_set_page(::uint64_t value);

  public:
  // uint64 limit = 5 [json_name = "limit"];
  void clear_limit() ;
  ::uint64_t limit() const;
  void set_limit(::uint64_t value);

  private:
  ::uint64_t _internal_limit() const;
  void _internal_set_limit(::uint64_t value);

  public:
  // .cosmos.tx.v1beta1.OrderBy order_by = 3 [json_name = "orderBy"];
  void clear_order_by() ;
  ::cosmos::tx::v1beta1::OrderBy order_by() const;
  void set_order_by(::cosmos::tx::v1beta1::OrderBy value);

  private:
  ::cosmos::tx::v1beta1::OrderBy _internal_order_by() const;
  void _internal_set_order_by(::cosmos::tx::v1beta1::OrderBy value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.GetTxsEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> events_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t page_;
    ::uint64_t limit_;
    int order_by_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetTxsEventResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.GetTxsEventResponse) */ {
 public:
  inline GetTxsEventResponse() : GetTxsEventResponse(nullptr) {}
  ~GetTxsEventResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTxsEventResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTxsEventResponse(const GetTxsEventResponse& from);
  GetTxsEventResponse(GetTxsEventResponse&& from) noexcept
    : GetTxsEventResponse() {
    *this = ::std::move(from);
  }

  inline GetTxsEventResponse& operator=(const GetTxsEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxsEventResponse& operator=(GetTxsEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTxsEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTxsEventResponse* internal_default_instance() {
    return reinterpret_cast<const GetTxsEventResponse*>(
               &_GetTxsEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetTxsEventResponse& a, GetTxsEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxsEventResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxsEventResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTxsEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTxsEventResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTxsEventResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTxsEventResponse& from) {
    GetTxsEventResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxsEventResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.GetTxsEventResponse";
  }
  protected:
  explicit GetTxsEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 1,
    kTxResponsesFieldNumber = 2,
    kPaginationFieldNumber = 3,
    kTotalFieldNumber = 4,
  };
  // repeated .cosmos.tx.v1beta1.Tx txs = 1 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  ::cosmos::tx::v1beta1::Tx* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx >*
      mutable_txs();
  private:
  const ::cosmos::tx::v1beta1::Tx& _internal_txs(int index) const;
  ::cosmos::tx::v1beta1::Tx* _internal_add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::Tx>& _internal_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::Tx>* _internal_mutable_txs();
  public:
  const ::cosmos::tx::v1beta1::Tx& txs(int index) const;
  ::cosmos::tx::v1beta1::Tx* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx >&
      txs() const;
  // repeated .cosmos.base.abci.v1beta1.TxResponse tx_responses = 2 [json_name = "txResponses"];
  int tx_responses_size() const;
  private:
  int _internal_tx_responses_size() const;

  public:
  void clear_tx_responses() ;
  ::cosmos::base::abci::v1beta1::TxResponse* mutable_tx_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse >*
      mutable_tx_responses();
  private:
  const ::cosmos::base::abci::v1beta1::TxResponse& _internal_tx_responses(int index) const;
  ::cosmos::base::abci::v1beta1::TxResponse* _internal_add_tx_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>& _internal_tx_responses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>* _internal_mutable_tx_responses();
  public:
  const ::cosmos::base::abci::v1beta1::TxResponse& tx_responses(int index) const;
  ::cosmos::base::abci::v1beta1::TxResponse* add_tx_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse >&
      tx_responses() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 3 [json_name = "pagination", deprecated = true];
  [[deprecated]]  bool has_pagination() const;
  [[deprecated]]  void clear_pagination() ;
  [[deprecated]] const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  [[deprecated]] PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  [[deprecated]] ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  [[deprecated]] void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  [[deprecated]] void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  [[deprecated]] ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // uint64 total = 4 [json_name = "total"];
  void clear_total() ;
  ::uint64_t total() const;
  void set_total(::uint64_t value);

  private:
  ::uint64_t _internal_total() const;
  void _internal_set_total(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.GetTxsEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx > txs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse > tx_responses_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    ::uint64_t total_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class BroadcastTxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.BroadcastTxRequest) */ {
 public:
  inline BroadcastTxRequest() : BroadcastTxRequest(nullptr) {}
  ~BroadcastTxRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BroadcastTxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastTxRequest(const BroadcastTxRequest& from);
  BroadcastTxRequest(BroadcastTxRequest&& from) noexcept
    : BroadcastTxRequest() {
    *this = ::std::move(from);
  }

  inline BroadcastTxRequest& operator=(const BroadcastTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastTxRequest& operator=(BroadcastTxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastTxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastTxRequest* internal_default_instance() {
    return reinterpret_cast<const BroadcastTxRequest*>(
               &_BroadcastTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BroadcastTxRequest& a, BroadcastTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastTxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastTxRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastTxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastTxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastTxRequest& from) {
    BroadcastTxRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastTxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.BroadcastTxRequest";
  }
  protected:
  explicit BroadcastTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxBytesFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // bytes tx_bytes = 1 [json_name = "txBytes"];
  void clear_tx_bytes() ;
  const std::string& tx_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tx_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_tx_bytes();
  PROTOBUF_NODISCARD std::string* release_tx_bytes();
  void set_allocated_tx_bytes(std::string* ptr);

  private:
  const std::string& _internal_tx_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_bytes(
      const std::string& value);
  std::string* _internal_mutable_tx_bytes();

  public:
  // .cosmos.tx.v1beta1.BroadcastMode mode = 2 [json_name = "mode"];
  void clear_mode() ;
  ::cosmos::tx::v1beta1::BroadcastMode mode() const;
  void set_mode(::cosmos::tx::v1beta1::BroadcastMode value);

  private:
  ::cosmos::tx::v1beta1::BroadcastMode _internal_mode() const;
  void _internal_set_mode(::cosmos::tx::v1beta1::BroadcastMode value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.BroadcastTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_bytes_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class BroadcastTxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.BroadcastTxResponse) */ {
 public:
  inline BroadcastTxResponse() : BroadcastTxResponse(nullptr) {}
  ~BroadcastTxResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BroadcastTxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastTxResponse(const BroadcastTxResponse& from);
  BroadcastTxResponse(BroadcastTxResponse&& from) noexcept
    : BroadcastTxResponse() {
    *this = ::std::move(from);
  }

  inline BroadcastTxResponse& operator=(const BroadcastTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastTxResponse& operator=(BroadcastTxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastTxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastTxResponse* internal_default_instance() {
    return reinterpret_cast<const BroadcastTxResponse*>(
               &_BroadcastTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BroadcastTxResponse& a, BroadcastTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastTxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastTxResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BroadcastTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BroadcastTxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BroadcastTxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BroadcastTxResponse& from) {
    BroadcastTxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastTxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.BroadcastTxResponse";
  }
  protected:
  explicit BroadcastTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxResponseFieldNumber = 1,
  };
  // .cosmos.base.abci.v1beta1.TxResponse tx_response = 1 [json_name = "txResponse"];
  bool has_tx_response() const;
  void clear_tx_response() ;
  const ::cosmos::base::abci::v1beta1::TxResponse& tx_response() const;
  PROTOBUF_NODISCARD ::cosmos::base::abci::v1beta1::TxResponse* release_tx_response();
  ::cosmos::base::abci::v1beta1::TxResponse* mutable_tx_response();
  void set_allocated_tx_response(::cosmos::base::abci::v1beta1::TxResponse* tx_response);
  private:
  const ::cosmos::base::abci::v1beta1::TxResponse& _internal_tx_response() const;
  ::cosmos::base::abci::v1beta1::TxResponse* _internal_mutable_tx_response();
  public:
  void unsafe_arena_set_allocated_tx_response(
      ::cosmos::base::abci::v1beta1::TxResponse* tx_response);
  ::cosmos::base::abci::v1beta1::TxResponse* unsafe_arena_release_tx_response();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.BroadcastTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::abci::v1beta1::TxResponse* tx_response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class SimulateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.SimulateRequest) */ {
 public:
  inline SimulateRequest() : SimulateRequest(nullptr) {}
  ~SimulateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimulateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulateRequest(const SimulateRequest& from);
  SimulateRequest(SimulateRequest&& from) noexcept
    : SimulateRequest() {
    *this = ::std::move(from);
  }

  inline SimulateRequest& operator=(const SimulateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulateRequest& operator=(SimulateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulateRequest* internal_default_instance() {
    return reinterpret_cast<const SimulateRequest*>(
               &_SimulateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimulateRequest& a, SimulateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimulateRequest& from) {
    SimulateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.SimulateRequest";
  }
  protected:
  explicit SimulateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxBytesFieldNumber = 2,
    kTxFieldNumber = 1,
  };
  // bytes tx_bytes = 2 [json_name = "txBytes"];
  void clear_tx_bytes() ;
  const std::string& tx_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tx_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_tx_bytes();
  PROTOBUF_NODISCARD std::string* release_tx_bytes();
  void set_allocated_tx_bytes(std::string* ptr);

  private:
  const std::string& _internal_tx_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_bytes(
      const std::string& value);
  std::string* _internal_mutable_tx_bytes();

  public:
  // .cosmos.tx.v1beta1.Tx tx = 1 [json_name = "tx", deprecated = true];
  [[deprecated]]  bool has_tx() const;
  [[deprecated]]  void clear_tx() ;
  [[deprecated]] const ::cosmos::tx::v1beta1::Tx& tx() const;
  [[deprecated]] PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Tx* release_tx();
  [[deprecated]] ::cosmos::tx::v1beta1::Tx* mutable_tx();
  [[deprecated]] void set_allocated_tx(::cosmos::tx::v1beta1::Tx* tx);
  private:
  const ::cosmos::tx::v1beta1::Tx& _internal_tx() const;
  ::cosmos::tx::v1beta1::Tx* _internal_mutable_tx();
  public:
  [[deprecated]] void unsafe_arena_set_allocated_tx(
      ::cosmos::tx::v1beta1::Tx* tx);
  [[deprecated]] ::cosmos::tx::v1beta1::Tx* unsafe_arena_release_tx();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.SimulateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_bytes_;
    ::cosmos::tx::v1beta1::Tx* tx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class SimulateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.SimulateResponse) */ {
 public:
  inline SimulateResponse() : SimulateResponse(nullptr) {}
  ~SimulateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimulateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulateResponse(const SimulateResponse& from);
  SimulateResponse(SimulateResponse&& from) noexcept
    : SimulateResponse() {
    *this = ::std::move(from);
  }

  inline SimulateResponse& operator=(const SimulateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulateResponse& operator=(SimulateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulateResponse* internal_default_instance() {
    return reinterpret_cast<const SimulateResponse*>(
               &_SimulateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimulateResponse& a, SimulateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimulateResponse& from) {
    SimulateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.SimulateResponse";
  }
  protected:
  explicit SimulateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasInfoFieldNumber = 1,
    kResultFieldNumber = 2,
  };
  // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [json_name = "gasInfo"];
  bool has_gas_info() const;
  void clear_gas_info() ;
  const ::cosmos::base::abci::v1beta1::GasInfo& gas_info() const;
  PROTOBUF_NODISCARD ::cosmos::base::abci::v1beta1::GasInfo* release_gas_info();
  ::cosmos::base::abci::v1beta1::GasInfo* mutable_gas_info();
  void set_allocated_gas_info(::cosmos::base::abci::v1beta1::GasInfo* gas_info);
  private:
  const ::cosmos::base::abci::v1beta1::GasInfo& _internal_gas_info() const;
  ::cosmos::base::abci::v1beta1::GasInfo* _internal_mutable_gas_info();
  public:
  void unsafe_arena_set_allocated_gas_info(
      ::cosmos::base::abci::v1beta1::GasInfo* gas_info);
  ::cosmos::base::abci::v1beta1::GasInfo* unsafe_arena_release_gas_info();
  // .cosmos.base.abci.v1beta1.Result result = 2 [json_name = "result"];
  bool has_result() const;
  void clear_result() ;
  const ::cosmos::base::abci::v1beta1::Result& result() const;
  PROTOBUF_NODISCARD ::cosmos::base::abci::v1beta1::Result* release_result();
  ::cosmos::base::abci::v1beta1::Result* mutable_result();
  void set_allocated_result(::cosmos::base::abci::v1beta1::Result* result);
  private:
  const ::cosmos::base::abci::v1beta1::Result& _internal_result() const;
  ::cosmos::base::abci::v1beta1::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::cosmos::base::abci::v1beta1::Result* result);
  ::cosmos::base::abci::v1beta1::Result* unsafe_arena_release_result();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.SimulateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::abci::v1beta1::GasInfo* gas_info_;
    ::cosmos::base::abci::v1beta1::Result* result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetTxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.GetTxRequest) */ {
 public:
  inline GetTxRequest() : GetTxRequest(nullptr) {}
  ~GetTxRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTxRequest(const GetTxRequest& from);
  GetTxRequest(GetTxRequest&& from) noexcept
    : GetTxRequest() {
    *this = ::std::move(from);
  }

  inline GetTxRequest& operator=(const GetTxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxRequest& operator=(GetTxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTxRequest* internal_default_instance() {
    return reinterpret_cast<const GetTxRequest*>(
               &_GetTxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetTxRequest& a, GetTxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTxRequest& from) {
    GetTxRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.GetTxRequest";
  }
  protected:
  explicit GetTxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // string hash = 1 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.GetTxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetTxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.GetTxResponse) */ {
 public:
  inline GetTxResponse() : GetTxResponse(nullptr) {}
  ~GetTxResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetTxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTxResponse(const GetTxResponse& from);
  GetTxResponse(GetTxResponse&& from) noexcept
    : GetTxResponse() {
    *this = ::std::move(from);
  }

  inline GetTxResponse& operator=(const GetTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTxResponse& operator=(GetTxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTxResponse* internal_default_instance() {
    return reinterpret_cast<const GetTxResponse*>(
               &_GetTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetTxResponse& a, GetTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTxResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTxResponse& from) {
    GetTxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.GetTxResponse";
  }
  protected:
  explicit GetTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
    kTxResponseFieldNumber = 2,
  };
  // .cosmos.tx.v1beta1.Tx tx = 1 [json_name = "tx"];
  bool has_tx() const;
  void clear_tx() ;
  const ::cosmos::tx::v1beta1::Tx& tx() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Tx* release_tx();
  ::cosmos::tx::v1beta1::Tx* mutable_tx();
  void set_allocated_tx(::cosmos::tx::v1beta1::Tx* tx);
  private:
  const ::cosmos::tx::v1beta1::Tx& _internal_tx() const;
  ::cosmos::tx::v1beta1::Tx* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::cosmos::tx::v1beta1::Tx* tx);
  ::cosmos::tx::v1beta1::Tx* unsafe_arena_release_tx();
  // .cosmos.base.abci.v1beta1.TxResponse tx_response = 2 [json_name = "txResponse"];
  bool has_tx_response() const;
  void clear_tx_response() ;
  const ::cosmos::base::abci::v1beta1::TxResponse& tx_response() const;
  PROTOBUF_NODISCARD ::cosmos::base::abci::v1beta1::TxResponse* release_tx_response();
  ::cosmos::base::abci::v1beta1::TxResponse* mutable_tx_response();
  void set_allocated_tx_response(::cosmos::base::abci::v1beta1::TxResponse* tx_response);
  private:
  const ::cosmos::base::abci::v1beta1::TxResponse& _internal_tx_response() const;
  ::cosmos::base::abci::v1beta1::TxResponse* _internal_mutable_tx_response();
  public:
  void unsafe_arena_set_allocated_tx_response(
      ::cosmos::base::abci::v1beta1::TxResponse* tx_response);
  ::cosmos::base::abci::v1beta1::TxResponse* unsafe_arena_release_tx_response();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.GetTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::tx::v1beta1::Tx* tx_;
    ::cosmos::base::abci::v1beta1::TxResponse* tx_response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetBlockWithTxsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.GetBlockWithTxsRequest) */ {
 public:
  inline GetBlockWithTxsRequest() : GetBlockWithTxsRequest(nullptr) {}
  ~GetBlockWithTxsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBlockWithTxsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockWithTxsRequest(const GetBlockWithTxsRequest& from);
  GetBlockWithTxsRequest(GetBlockWithTxsRequest&& from) noexcept
    : GetBlockWithTxsRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockWithTxsRequest& operator=(const GetBlockWithTxsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockWithTxsRequest& operator=(GetBlockWithTxsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockWithTxsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockWithTxsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockWithTxsRequest*>(
               &_GetBlockWithTxsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetBlockWithTxsRequest& a, GetBlockWithTxsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockWithTxsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockWithTxsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockWithTxsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockWithTxsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockWithTxsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockWithTxsRequest& from) {
    GetBlockWithTxsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockWithTxsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.GetBlockWithTxsRequest";
  }
  protected:
  explicit GetBlockWithTxsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.GetBlockWithTxsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::int64_t height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class GetBlockWithTxsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.GetBlockWithTxsResponse) */ {
 public:
  inline GetBlockWithTxsResponse() : GetBlockWithTxsResponse(nullptr) {}
  ~GetBlockWithTxsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetBlockWithTxsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockWithTxsResponse(const GetBlockWithTxsResponse& from);
  GetBlockWithTxsResponse(GetBlockWithTxsResponse&& from) noexcept
    : GetBlockWithTxsResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockWithTxsResponse& operator=(const GetBlockWithTxsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockWithTxsResponse& operator=(GetBlockWithTxsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBlockWithTxsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockWithTxsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockWithTxsResponse*>(
               &_GetBlockWithTxsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetBlockWithTxsResponse& a, GetBlockWithTxsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockWithTxsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockWithTxsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBlockWithTxsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBlockWithTxsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBlockWithTxsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBlockWithTxsResponse& from) {
    GetBlockWithTxsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockWithTxsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.GetBlockWithTxsResponse";
  }
  protected:
  explicit GetBlockWithTxsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 1,
    kBlockIdFieldNumber = 2,
    kBlockFieldNumber = 3,
    kPaginationFieldNumber = 4,
  };
  // repeated .cosmos.tx.v1beta1.Tx txs = 1 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  ::cosmos::tx::v1beta1::Tx* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx >*
      mutable_txs();
  private:
  const ::cosmos::tx::v1beta1::Tx& _internal_txs(int index) const;
  ::cosmos::tx::v1beta1::Tx* _internal_add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::Tx>& _internal_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::Tx>* _internal_mutable_txs();
  public:
  const ::cosmos::tx::v1beta1::Tx& txs(int index) const;
  ::cosmos::tx::v1beta1::Tx* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx >&
      txs() const;
  // .tendermint.types.BlockID block_id = 2 [json_name = "blockId"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();
  // .tendermint.types.Block block = 3 [json_name = "block"];
  bool has_block() const;
  void clear_block() ;
  const ::tendermint::types::Block& block() const;
  PROTOBUF_NODISCARD ::tendermint::types::Block* release_block();
  ::tendermint::types::Block* mutable_block();
  void set_allocated_block(::tendermint::types::Block* block);
  private:
  const ::tendermint::types::Block& _internal_block() const;
  ::tendermint::types::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tendermint::types::Block* block);
  ::tendermint::types::Block* unsafe_arena_release_block();
  // .cosmos.base.query.v1beta1.PageResponse pagination = 4 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.GetBlockWithTxsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx > txs_;
    ::tendermint::types::BlockID* block_id_;
    ::tendermint::types::Block* block_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class TxDecodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxDecodeRequest) */ {
 public:
  inline TxDecodeRequest() : TxDecodeRequest(nullptr) {}
  ~TxDecodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxDecodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxDecodeRequest(const TxDecodeRequest& from);
  TxDecodeRequest(TxDecodeRequest&& from) noexcept
    : TxDecodeRequest() {
    *this = ::std::move(from);
  }

  inline TxDecodeRequest& operator=(const TxDecodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxDecodeRequest& operator=(TxDecodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxDecodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxDecodeRequest* internal_default_instance() {
    return reinterpret_cast<const TxDecodeRequest*>(
               &_TxDecodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TxDecodeRequest& a, TxDecodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TxDecodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxDecodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxDecodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxDecodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxDecodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxDecodeRequest& from) {
    TxDecodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxDecodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxDecodeRequest";
  }
  protected:
  explicit TxDecodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxBytesFieldNumber = 1,
  };
  // bytes tx_bytes = 1 [json_name = "txBytes"];
  void clear_tx_bytes() ;
  const std::string& tx_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tx_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_tx_bytes();
  PROTOBUF_NODISCARD std::string* release_tx_bytes();
  void set_allocated_tx_bytes(std::string* ptr);

  private:
  const std::string& _internal_tx_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_bytes(
      const std::string& value);
  std::string* _internal_mutable_tx_bytes();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxDecodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class TxDecodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxDecodeResponse) */ {
 public:
  inline TxDecodeResponse() : TxDecodeResponse(nullptr) {}
  ~TxDecodeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxDecodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxDecodeResponse(const TxDecodeResponse& from);
  TxDecodeResponse(TxDecodeResponse&& from) noexcept
    : TxDecodeResponse() {
    *this = ::std::move(from);
  }

  inline TxDecodeResponse& operator=(const TxDecodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxDecodeResponse& operator=(TxDecodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxDecodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxDecodeResponse* internal_default_instance() {
    return reinterpret_cast<const TxDecodeResponse*>(
               &_TxDecodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TxDecodeResponse& a, TxDecodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TxDecodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxDecodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxDecodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxDecodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxDecodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxDecodeResponse& from) {
    TxDecodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxDecodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxDecodeResponse";
  }
  protected:
  explicit TxDecodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
  };
  // .cosmos.tx.v1beta1.Tx tx = 1 [json_name = "tx"];
  bool has_tx() const;
  void clear_tx() ;
  const ::cosmos::tx::v1beta1::Tx& tx() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Tx* release_tx();
  ::cosmos::tx::v1beta1::Tx* mutable_tx();
  void set_allocated_tx(::cosmos::tx::v1beta1::Tx* tx);
  private:
  const ::cosmos::tx::v1beta1::Tx& _internal_tx() const;
  ::cosmos::tx::v1beta1::Tx* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::cosmos::tx::v1beta1::Tx* tx);
  ::cosmos::tx::v1beta1::Tx* unsafe_arena_release_tx();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxDecodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::tx::v1beta1::Tx* tx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class TxEncodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxEncodeRequest) */ {
 public:
  inline TxEncodeRequest() : TxEncodeRequest(nullptr) {}
  ~TxEncodeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxEncodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxEncodeRequest(const TxEncodeRequest& from);
  TxEncodeRequest(TxEncodeRequest&& from) noexcept
    : TxEncodeRequest() {
    *this = ::std::move(from);
  }

  inline TxEncodeRequest& operator=(const TxEncodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxEncodeRequest& operator=(TxEncodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxEncodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxEncodeRequest* internal_default_instance() {
    return reinterpret_cast<const TxEncodeRequest*>(
               &_TxEncodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TxEncodeRequest& a, TxEncodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TxEncodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxEncodeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxEncodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxEncodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxEncodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxEncodeRequest& from) {
    TxEncodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxEncodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxEncodeRequest";
  }
  protected:
  explicit TxEncodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
  };
  // .cosmos.tx.v1beta1.Tx tx = 1 [json_name = "tx"];
  bool has_tx() const;
  void clear_tx() ;
  const ::cosmos::tx::v1beta1::Tx& tx() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Tx* release_tx();
  ::cosmos::tx::v1beta1::Tx* mutable_tx();
  void set_allocated_tx(::cosmos::tx::v1beta1::Tx* tx);
  private:
  const ::cosmos::tx::v1beta1::Tx& _internal_tx() const;
  ::cosmos::tx::v1beta1::Tx* _internal_mutable_tx();
  public:
  void unsafe_arena_set_allocated_tx(
      ::cosmos::tx::v1beta1::Tx* tx);
  ::cosmos::tx::v1beta1::Tx* unsafe_arena_release_tx();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxEncodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::tx::v1beta1::Tx* tx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class TxEncodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxEncodeResponse) */ {
 public:
  inline TxEncodeResponse() : TxEncodeResponse(nullptr) {}
  ~TxEncodeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxEncodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxEncodeResponse(const TxEncodeResponse& from);
  TxEncodeResponse(TxEncodeResponse&& from) noexcept
    : TxEncodeResponse() {
    *this = ::std::move(from);
  }

  inline TxEncodeResponse& operator=(const TxEncodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxEncodeResponse& operator=(TxEncodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxEncodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxEncodeResponse* internal_default_instance() {
    return reinterpret_cast<const TxEncodeResponse*>(
               &_TxEncodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TxEncodeResponse& a, TxEncodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TxEncodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxEncodeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxEncodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxEncodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxEncodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxEncodeResponse& from) {
    TxEncodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxEncodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxEncodeResponse";
  }
  protected:
  explicit TxEncodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxBytesFieldNumber = 1,
  };
  // bytes tx_bytes = 1 [json_name = "txBytes"];
  void clear_tx_bytes() ;
  const std::string& tx_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tx_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_tx_bytes();
  PROTOBUF_NODISCARD std::string* release_tx_bytes();
  void set_allocated_tx_bytes(std::string* ptr);

  private:
  const std::string& _internal_tx_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx_bytes(
      const std::string& value);
  std::string* _internal_mutable_tx_bytes();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxEncodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class TxEncodeAminoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxEncodeAminoRequest) */ {
 public:
  inline TxEncodeAminoRequest() : TxEncodeAminoRequest(nullptr) {}
  ~TxEncodeAminoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxEncodeAminoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxEncodeAminoRequest(const TxEncodeAminoRequest& from);
  TxEncodeAminoRequest(TxEncodeAminoRequest&& from) noexcept
    : TxEncodeAminoRequest() {
    *this = ::std::move(from);
  }

  inline TxEncodeAminoRequest& operator=(const TxEncodeAminoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxEncodeAminoRequest& operator=(TxEncodeAminoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxEncodeAminoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxEncodeAminoRequest* internal_default_instance() {
    return reinterpret_cast<const TxEncodeAminoRequest*>(
               &_TxEncodeAminoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TxEncodeAminoRequest& a, TxEncodeAminoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TxEncodeAminoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxEncodeAminoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxEncodeAminoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxEncodeAminoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxEncodeAminoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxEncodeAminoRequest& from) {
    TxEncodeAminoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxEncodeAminoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxEncodeAminoRequest";
  }
  protected:
  explicit TxEncodeAminoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAminoJsonFieldNumber = 1,
  };
  // string amino_json = 1 [json_name = "aminoJson"];
  void clear_amino_json() ;
  const std::string& amino_json() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amino_json(Arg_&& arg, Args_... args);
  std::string* mutable_amino_json();
  PROTOBUF_NODISCARD std::string* release_amino_json();
  void set_allocated_amino_json(std::string* ptr);

  private:
  const std::string& _internal_amino_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amino_json(
      const std::string& value);
  std::string* _internal_mutable_amino_json();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxEncodeAminoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amino_json_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class TxEncodeAminoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxEncodeAminoResponse) */ {
 public:
  inline TxEncodeAminoResponse() : TxEncodeAminoResponse(nullptr) {}
  ~TxEncodeAminoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxEncodeAminoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxEncodeAminoResponse(const TxEncodeAminoResponse& from);
  TxEncodeAminoResponse(TxEncodeAminoResponse&& from) noexcept
    : TxEncodeAminoResponse() {
    *this = ::std::move(from);
  }

  inline TxEncodeAminoResponse& operator=(const TxEncodeAminoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxEncodeAminoResponse& operator=(TxEncodeAminoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxEncodeAminoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxEncodeAminoResponse* internal_default_instance() {
    return reinterpret_cast<const TxEncodeAminoResponse*>(
               &_TxEncodeAminoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TxEncodeAminoResponse& a, TxEncodeAminoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TxEncodeAminoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxEncodeAminoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxEncodeAminoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxEncodeAminoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxEncodeAminoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxEncodeAminoResponse& from) {
    TxEncodeAminoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxEncodeAminoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxEncodeAminoResponse";
  }
  protected:
  explicit TxEncodeAminoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAminoBinaryFieldNumber = 1,
  };
  // bytes amino_binary = 1 [json_name = "aminoBinary"];
  void clear_amino_binary() ;
  const std::string& amino_binary() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amino_binary(Arg_&& arg, Args_... args);
  std::string* mutable_amino_binary();
  PROTOBUF_NODISCARD std::string* release_amino_binary();
  void set_allocated_amino_binary(std::string* ptr);

  private:
  const std::string& _internal_amino_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amino_binary(
      const std::string& value);
  std::string* _internal_mutable_amino_binary();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxEncodeAminoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amino_binary_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class TxDecodeAminoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxDecodeAminoRequest) */ {
 public:
  inline TxDecodeAminoRequest() : TxDecodeAminoRequest(nullptr) {}
  ~TxDecodeAminoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxDecodeAminoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxDecodeAminoRequest(const TxDecodeAminoRequest& from);
  TxDecodeAminoRequest(TxDecodeAminoRequest&& from) noexcept
    : TxDecodeAminoRequest() {
    *this = ::std::move(from);
  }

  inline TxDecodeAminoRequest& operator=(const TxDecodeAminoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxDecodeAminoRequest& operator=(TxDecodeAminoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxDecodeAminoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxDecodeAminoRequest* internal_default_instance() {
    return reinterpret_cast<const TxDecodeAminoRequest*>(
               &_TxDecodeAminoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TxDecodeAminoRequest& a, TxDecodeAminoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TxDecodeAminoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxDecodeAminoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxDecodeAminoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxDecodeAminoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxDecodeAminoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxDecodeAminoRequest& from) {
    TxDecodeAminoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxDecodeAminoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxDecodeAminoRequest";
  }
  protected:
  explicit TxDecodeAminoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAminoBinaryFieldNumber = 1,
  };
  // bytes amino_binary = 1 [json_name = "aminoBinary"];
  void clear_amino_binary() ;
  const std::string& amino_binary() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amino_binary(Arg_&& arg, Args_... args);
  std::string* mutable_amino_binary();
  PROTOBUF_NODISCARD std::string* release_amino_binary();
  void set_allocated_amino_binary(std::string* ptr);

  private:
  const std::string& _internal_amino_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amino_binary(
      const std::string& value);
  std::string* _internal_mutable_amino_binary();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxDecodeAminoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amino_binary_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};// -------------------------------------------------------------------

class TxDecodeAminoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxDecodeAminoResponse) */ {
 public:
  inline TxDecodeAminoResponse() : TxDecodeAminoResponse(nullptr) {}
  ~TxDecodeAminoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxDecodeAminoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxDecodeAminoResponse(const TxDecodeAminoResponse& from);
  TxDecodeAminoResponse(TxDecodeAminoResponse&& from) noexcept
    : TxDecodeAminoResponse() {
    *this = ::std::move(from);
  }

  inline TxDecodeAminoResponse& operator=(const TxDecodeAminoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxDecodeAminoResponse& operator=(TxDecodeAminoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxDecodeAminoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxDecodeAminoResponse* internal_default_instance() {
    return reinterpret_cast<const TxDecodeAminoResponse*>(
               &_TxDecodeAminoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TxDecodeAminoResponse& a, TxDecodeAminoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TxDecodeAminoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxDecodeAminoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxDecodeAminoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxDecodeAminoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxDecodeAminoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxDecodeAminoResponse& from) {
    TxDecodeAminoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxDecodeAminoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxDecodeAminoResponse";
  }
  protected:
  explicit TxDecodeAminoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAminoJsonFieldNumber = 1,
  };
  // string amino_json = 1 [json_name = "aminoJson"];
  void clear_amino_json() ;
  const std::string& amino_json() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amino_json(Arg_&& arg, Args_... args);
  std::string* mutable_amino_json();
  PROTOBUF_NODISCARD std::string* release_amino_json();
  void set_allocated_amino_json(std::string* ptr);

  private:
  const std::string& _internal_amino_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amino_json(
      const std::string& value);
  std::string* _internal_mutable_amino_json();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxDecodeAminoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amino_json_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetTxsEventRequest

// repeated string events = 1 [json_name = "events"];
inline int GetTxsEventRequest::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int GetTxsEventRequest::events_size() const {
  return _internal_events_size();
}
inline void GetTxsEventRequest::clear_events() {
  _internal_mutable_events()->Clear();
}
inline std::string* GetTxsEventRequest::add_events() {
  std::string* _s = _internal_add_events();
  // @@protoc_insertion_point(field_add_mutable:cosmos.tx.v1beta1.GetTxsEventRequest.events)
  return _s;
}
inline const std::string& GetTxsEventRequest::events(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventRequest.events)
  return _internal_events(index);
}
inline std::string* GetTxsEventRequest::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetTxsEventRequest.events)
  return _internal_mutable_events()->Mutable(index);
}
inline void GetTxsEventRequest::set_events(int index, const std::string& value) {
  _internal_mutable_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::set_events(int index, std::string&& value) {
  _internal_mutable_events()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::set_events(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_events()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::set_events(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_events()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::set_events(int index, absl::string_view value) {
  _internal_mutable_events()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::add_events(const std::string& value) {
  _internal_mutable_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::add_events(std::string&& value) {
  _internal_mutable_events()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::add_events(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_events()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::add_events(const char* value, std::size_t size) {
  _internal_mutable_events()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline void GetTxsEventRequest::add_events(absl::string_view value) {
  _internal_mutable_events()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.tx.v1beta1.GetTxsEventRequest.events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxsEventRequest::events() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.GetTxsEventRequest.events)
  return _internal_events();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GetTxsEventRequest::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.GetTxsEventRequest.events)
  return _internal_mutable_events();
}
inline const std::string& GetTxsEventRequest::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline std::string* GetTxsEventRequest::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTxsEventRequest::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTxsEventRequest::_internal_mutable_events() {
  return &_impl_.events_;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination", deprecated = true];
inline bool GetTxsEventRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& GetTxsEventRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& GetTxsEventRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventRequest.pagination)
  return _internal_pagination();
}
inline void GetTxsEventRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.GetTxsEventRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetTxsEventRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetTxsEventRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetTxsEventRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetTxsEventRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetTxsEventRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetTxsEventRequest.pagination)
  return _msg;
}
inline void GetTxsEventRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetTxsEventRequest.pagination)
}

// .cosmos.tx.v1beta1.OrderBy order_by = 3 [json_name = "orderBy"];
inline void GetTxsEventRequest::clear_order_by() {
  _impl_.order_by_ = 0;
}
inline ::cosmos::tx::v1beta1::OrderBy GetTxsEventRequest::order_by() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventRequest.order_by)
  return _internal_order_by();
}
inline void GetTxsEventRequest::set_order_by(::cosmos::tx::v1beta1::OrderBy value) {
   _internal_set_order_by(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.GetTxsEventRequest.order_by)
}
inline ::cosmos::tx::v1beta1::OrderBy GetTxsEventRequest::_internal_order_by() const {
  return static_cast<::cosmos::tx::v1beta1::OrderBy>(_impl_.order_by_);
}
inline void GetTxsEventRequest::_internal_set_order_by(::cosmos::tx::v1beta1::OrderBy value) {
  ;
  _impl_.order_by_ = value;
}

// uint64 page = 4 [json_name = "page"];
inline void GetTxsEventRequest::clear_page() {
  _impl_.page_ = ::uint64_t{0u};
}
inline ::uint64_t GetTxsEventRequest::page() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventRequest.page)
  return _internal_page();
}
inline void GetTxsEventRequest::set_page(::uint64_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.GetTxsEventRequest.page)
}
inline ::uint64_t GetTxsEventRequest::_internal_page() const {
  return _impl_.page_;
}
inline void GetTxsEventRequest::_internal_set_page(::uint64_t value) {
  ;
  _impl_.page_ = value;
}

// uint64 limit = 5 [json_name = "limit"];
inline void GetTxsEventRequest::clear_limit() {
  _impl_.limit_ = ::uint64_t{0u};
}
inline ::uint64_t GetTxsEventRequest::limit() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventRequest.limit)
  return _internal_limit();
}
inline void GetTxsEventRequest::set_limit(::uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.GetTxsEventRequest.limit)
}
inline ::uint64_t GetTxsEventRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline void GetTxsEventRequest::_internal_set_limit(::uint64_t value) {
  ;
  _impl_.limit_ = value;
}

// -------------------------------------------------------------------

// GetTxsEventResponse

// repeated .cosmos.tx.v1beta1.Tx txs = 1 [json_name = "txs"];
inline int GetTxsEventResponse::_internal_txs_size() const {
  return _impl_.txs_.size();
}
inline int GetTxsEventResponse::txs_size() const {
  return _internal_txs_size();
}
inline ::cosmos::tx::v1beta1::Tx* GetTxsEventResponse::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetTxsEventResponse.txs)
  return _internal_mutable_txs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx >*
GetTxsEventResponse::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.GetTxsEventResponse.txs)
  return _internal_mutable_txs();
}
inline const ::cosmos::tx::v1beta1::Tx& GetTxsEventResponse::_internal_txs(int index) const {
  return _internal_txs().Get(index);
}
inline const ::cosmos::tx::v1beta1::Tx& GetTxsEventResponse::txs(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventResponse.txs)
  return _internal_txs(index);
}
inline ::cosmos::tx::v1beta1::Tx* GetTxsEventResponse::_internal_add_txs() {
  return _internal_mutable_txs()->Add();
}
inline ::cosmos::tx::v1beta1::Tx* GetTxsEventResponse::add_txs() {
  ::cosmos::tx::v1beta1::Tx* _add = _internal_add_txs();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.GetTxsEventResponse.txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx >&
GetTxsEventResponse::txs() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.GetTxsEventResponse.txs)
  return _internal_txs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::Tx>&
GetTxsEventResponse::_internal_txs() const {
  return _impl_.txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::Tx>*
GetTxsEventResponse::_internal_mutable_txs() {
  return &_impl_.txs_;
}

// repeated .cosmos.base.abci.v1beta1.TxResponse tx_responses = 2 [json_name = "txResponses"];
inline int GetTxsEventResponse::_internal_tx_responses_size() const {
  return _impl_.tx_responses_.size();
}
inline int GetTxsEventResponse::tx_responses_size() const {
  return _internal_tx_responses_size();
}
inline ::cosmos::base::abci::v1beta1::TxResponse* GetTxsEventResponse::mutable_tx_responses(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetTxsEventResponse.tx_responses)
  return _internal_mutable_tx_responses()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse >*
GetTxsEventResponse::mutable_tx_responses() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.GetTxsEventResponse.tx_responses)
  return _internal_mutable_tx_responses();
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& GetTxsEventResponse::_internal_tx_responses(int index) const {
  return _internal_tx_responses().Get(index);
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& GetTxsEventResponse::tx_responses(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventResponse.tx_responses)
  return _internal_tx_responses(index);
}
inline ::cosmos::base::abci::v1beta1::TxResponse* GetTxsEventResponse::_internal_add_tx_responses() {
  return _internal_mutable_tx_responses()->Add();
}
inline ::cosmos::base::abci::v1beta1::TxResponse* GetTxsEventResponse::add_tx_responses() {
  ::cosmos::base::abci::v1beta1::TxResponse* _add = _internal_add_tx_responses();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.GetTxsEventResponse.tx_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::abci::v1beta1::TxResponse >&
GetTxsEventResponse::tx_responses() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.GetTxsEventResponse.tx_responses)
  return _internal_tx_responses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>&
GetTxsEventResponse::_internal_tx_responses() const {
  return _impl_.tx_responses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::abci::v1beta1::TxResponse>*
GetTxsEventResponse::_internal_mutable_tx_responses() {
  return &_impl_.tx_responses_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 3 [json_name = "pagination", deprecated = true];
inline bool GetTxsEventResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& GetTxsEventResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& GetTxsEventResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventResponse.pagination)
  return _internal_pagination();
}
inline void GetTxsEventResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.GetTxsEventResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetTxsEventResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetTxsEventResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetTxsEventResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetTxsEventResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetTxsEventResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetTxsEventResponse.pagination)
  return _msg;
}
inline void GetTxsEventResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetTxsEventResponse.pagination)
}

// uint64 total = 4 [json_name = "total"];
inline void GetTxsEventResponse::clear_total() {
  _impl_.total_ = ::uint64_t{0u};
}
inline ::uint64_t GetTxsEventResponse::total() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxsEventResponse.total)
  return _internal_total();
}
inline void GetTxsEventResponse::set_total(::uint64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.GetTxsEventResponse.total)
}
inline ::uint64_t GetTxsEventResponse::_internal_total() const {
  return _impl_.total_;
}
inline void GetTxsEventResponse::_internal_set_total(::uint64_t value) {
  ;
  _impl_.total_ = value;
}

// -------------------------------------------------------------------

// BroadcastTxRequest

// bytes tx_bytes = 1 [json_name = "txBytes"];
inline void BroadcastTxRequest::clear_tx_bytes() {
  _impl_.tx_bytes_.ClearToEmpty();
}
inline const std::string& BroadcastTxRequest::tx_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.BroadcastTxRequest.tx_bytes)
  return _internal_tx_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BroadcastTxRequest::set_tx_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tx_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.BroadcastTxRequest.tx_bytes)
}
inline std::string* BroadcastTxRequest::mutable_tx_bytes() {
  std::string* _s = _internal_mutable_tx_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.BroadcastTxRequest.tx_bytes)
  return _s;
}
inline const std::string& BroadcastTxRequest::_internal_tx_bytes() const {
  return _impl_.tx_bytes_.Get();
}
inline void BroadcastTxRequest::_internal_set_tx_bytes(const std::string& value) {
  ;


  _impl_.tx_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* BroadcastTxRequest::_internal_mutable_tx_bytes() {
  ;
  return _impl_.tx_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* BroadcastTxRequest::release_tx_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.BroadcastTxRequest.tx_bytes)
  return _impl_.tx_bytes_.Release();
}
inline void BroadcastTxRequest::set_allocated_tx_bytes(std::string* value) {
  _impl_.tx_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tx_bytes_.IsDefault()) {
          _impl_.tx_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.BroadcastTxRequest.tx_bytes)
}

// .cosmos.tx.v1beta1.BroadcastMode mode = 2 [json_name = "mode"];
inline void BroadcastTxRequest::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::cosmos::tx::v1beta1::BroadcastMode BroadcastTxRequest::mode() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.BroadcastTxRequest.mode)
  return _internal_mode();
}
inline void BroadcastTxRequest::set_mode(::cosmos::tx::v1beta1::BroadcastMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.BroadcastTxRequest.mode)
}
inline ::cosmos::tx::v1beta1::BroadcastMode BroadcastTxRequest::_internal_mode() const {
  return static_cast<::cosmos::tx::v1beta1::BroadcastMode>(_impl_.mode_);
}
inline void BroadcastTxRequest::_internal_set_mode(::cosmos::tx::v1beta1::BroadcastMode value) {
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// BroadcastTxResponse

// .cosmos.base.abci.v1beta1.TxResponse tx_response = 1 [json_name = "txResponse"];
inline bool BroadcastTxResponse::has_tx_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_response_ != nullptr);
  return value;
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& BroadcastTxResponse::_internal_tx_response() const {
  const ::cosmos::base::abci::v1beta1::TxResponse* p = _impl_.tx_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::abci::v1beta1::TxResponse&>(
      ::cosmos::base::abci::v1beta1::_TxResponse_default_instance_);
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& BroadcastTxResponse::tx_response() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.BroadcastTxResponse.tx_response)
  return _internal_tx_response();
}
inline void BroadcastTxResponse::unsafe_arena_set_allocated_tx_response(
    ::cosmos::base::abci::v1beta1::TxResponse* tx_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_response_);
  }
  _impl_.tx_response_ = tx_response;
  if (tx_response) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.BroadcastTxResponse.tx_response)
}
inline ::cosmos::base::abci::v1beta1::TxResponse* BroadcastTxResponse::release_tx_response() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::abci::v1beta1::TxResponse* temp = _impl_.tx_response_;
  _impl_.tx_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::abci::v1beta1::TxResponse* BroadcastTxResponse::unsafe_arena_release_tx_response() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.BroadcastTxResponse.tx_response)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::abci::v1beta1::TxResponse* temp = _impl_.tx_response_;
  _impl_.tx_response_ = nullptr;
  return temp;
}
inline ::cosmos::base::abci::v1beta1::TxResponse* BroadcastTxResponse::_internal_mutable_tx_response() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tx_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::abci::v1beta1::TxResponse>(GetArenaForAllocation());
    _impl_.tx_response_ = p;
  }
  return _impl_.tx_response_;
}
inline ::cosmos::base::abci::v1beta1::TxResponse* BroadcastTxResponse::mutable_tx_response() {
  ::cosmos::base::abci::v1beta1::TxResponse* _msg = _internal_mutable_tx_response();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.BroadcastTxResponse.tx_response)
  return _msg;
}
inline void BroadcastTxResponse::set_allocated_tx_response(::cosmos::base::abci::v1beta1::TxResponse* tx_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_response_);
  }
  if (tx_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_response));
    if (message_arena != submessage_arena) {
      tx_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tx_response_ = tx_response;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.BroadcastTxResponse.tx_response)
}

// -------------------------------------------------------------------

// SimulateRequest

// .cosmos.tx.v1beta1.Tx tx = 1 [json_name = "tx", deprecated = true];
inline bool SimulateRequest::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline const ::cosmos::tx::v1beta1::Tx& SimulateRequest::_internal_tx() const {
  const ::cosmos::tx::v1beta1::Tx* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Tx&>(
      ::cosmos::tx::v1beta1::_Tx_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Tx& SimulateRequest::tx() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SimulateRequest.tx)
  return _internal_tx();
}
inline void SimulateRequest::unsafe_arena_set_allocated_tx(
    ::cosmos::tx::v1beta1::Tx* tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = tx;
  if (tx) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SimulateRequest.tx)
}
inline ::cosmos::tx::v1beta1::Tx* SimulateRequest::release_tx() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Tx* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::Tx* SimulateRequest::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SimulateRequest.tx)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Tx* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Tx* SimulateRequest::_internal_mutable_tx() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::Tx>(GetArenaForAllocation());
    _impl_.tx_ = p;
  }
  return _impl_.tx_;
}
inline ::cosmos::tx::v1beta1::Tx* SimulateRequest::mutable_tx() {
  ::cosmos::tx::v1beta1::Tx* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SimulateRequest.tx)
  return _msg;
}
inline void SimulateRequest::set_allocated_tx(::cosmos::tx::v1beta1::Tx* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx));
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SimulateRequest.tx)
}

// bytes tx_bytes = 2 [json_name = "txBytes"];
inline void SimulateRequest::clear_tx_bytes() {
  _impl_.tx_bytes_.ClearToEmpty();
}
inline const std::string& SimulateRequest::tx_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SimulateRequest.tx_bytes)
  return _internal_tx_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimulateRequest::set_tx_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tx_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SimulateRequest.tx_bytes)
}
inline std::string* SimulateRequest::mutable_tx_bytes() {
  std::string* _s = _internal_mutable_tx_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SimulateRequest.tx_bytes)
  return _s;
}
inline const std::string& SimulateRequest::_internal_tx_bytes() const {
  return _impl_.tx_bytes_.Get();
}
inline void SimulateRequest::_internal_set_tx_bytes(const std::string& value) {
  ;


  _impl_.tx_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* SimulateRequest::_internal_mutable_tx_bytes() {
  ;
  return _impl_.tx_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* SimulateRequest::release_tx_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SimulateRequest.tx_bytes)
  return _impl_.tx_bytes_.Release();
}
inline void SimulateRequest::set_allocated_tx_bytes(std::string* value) {
  _impl_.tx_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tx_bytes_.IsDefault()) {
          _impl_.tx_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SimulateRequest.tx_bytes)
}

// -------------------------------------------------------------------

// SimulateResponse

// .cosmos.base.abci.v1beta1.GasInfo gas_info = 1 [json_name = "gasInfo"];
inline bool SimulateResponse::has_gas_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gas_info_ != nullptr);
  return value;
}
inline const ::cosmos::base::abci::v1beta1::GasInfo& SimulateResponse::_internal_gas_info() const {
  const ::cosmos::base::abci::v1beta1::GasInfo* p = _impl_.gas_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::abci::v1beta1::GasInfo&>(
      ::cosmos::base::abci::v1beta1::_GasInfo_default_instance_);
}
inline const ::cosmos::base::abci::v1beta1::GasInfo& SimulateResponse::gas_info() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SimulateResponse.gas_info)
  return _internal_gas_info();
}
inline void SimulateResponse::unsafe_arena_set_allocated_gas_info(
    ::cosmos::base::abci::v1beta1::GasInfo* gas_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gas_info_);
  }
  _impl_.gas_info_ = gas_info;
  if (gas_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SimulateResponse.gas_info)
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulateResponse::release_gas_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::abci::v1beta1::GasInfo* temp = _impl_.gas_info_;
  _impl_.gas_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulateResponse::unsafe_arena_release_gas_info() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SimulateResponse.gas_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::abci::v1beta1::GasInfo* temp = _impl_.gas_info_;
  _impl_.gas_info_ = nullptr;
  return temp;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulateResponse::_internal_mutable_gas_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.gas_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::abci::v1beta1::GasInfo>(GetArenaForAllocation());
    _impl_.gas_info_ = p;
  }
  return _impl_.gas_info_;
}
inline ::cosmos::base::abci::v1beta1::GasInfo* SimulateResponse::mutable_gas_info() {
  ::cosmos::base::abci::v1beta1::GasInfo* _msg = _internal_mutable_gas_info();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SimulateResponse.gas_info)
  return _msg;
}
inline void SimulateResponse::set_allocated_gas_info(::cosmos::base::abci::v1beta1::GasInfo* gas_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gas_info_);
  }
  if (gas_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gas_info));
    if (message_arena != submessage_arena) {
      gas_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gas_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.gas_info_ = gas_info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SimulateResponse.gas_info)
}

// .cosmos.base.abci.v1beta1.Result result = 2 [json_name = "result"];
inline bool SimulateResponse::has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline const ::cosmos::base::abci::v1beta1::Result& SimulateResponse::_internal_result() const {
  const ::cosmos::base::abci::v1beta1::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::abci::v1beta1::Result&>(
      ::cosmos::base::abci::v1beta1::_Result_default_instance_);
}
inline const ::cosmos::base::abci::v1beta1::Result& SimulateResponse::result() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SimulateResponse.result)
  return _internal_result();
}
inline void SimulateResponse::unsafe_arena_set_allocated_result(
    ::cosmos::base::abci::v1beta1::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SimulateResponse.result)
}
inline ::cosmos::base::abci::v1beta1::Result* SimulateResponse::release_result() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::abci::v1beta1::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulateResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SimulateResponse.result)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::abci::v1beta1::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulateResponse::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::abci::v1beta1::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::cosmos::base::abci::v1beta1::Result* SimulateResponse::mutable_result() {
  ::cosmos::base::abci::v1beta1::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SimulateResponse.result)
  return _msg;
}
inline void SimulateResponse::set_allocated_result(::cosmos::base::abci::v1beta1::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SimulateResponse.result)
}

// -------------------------------------------------------------------

// GetTxRequest

// string hash = 1 [json_name = "hash"];
inline void GetTxRequest::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& GetTxRequest::hash() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxRequest.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTxRequest::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.GetTxRequest.hash)
}
inline std::string* GetTxRequest::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetTxRequest.hash)
  return _s;
}
inline const std::string& GetTxRequest::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void GetTxRequest::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTxRequest::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* GetTxRequest::release_hash() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetTxRequest.hash)
  return _impl_.hash_.Release();
}
inline void GetTxRequest::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetTxRequest.hash)
}

// -------------------------------------------------------------------

// GetTxResponse

// .cosmos.tx.v1beta1.Tx tx = 1 [json_name = "tx"];
inline bool GetTxResponse::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline const ::cosmos::tx::v1beta1::Tx& GetTxResponse::_internal_tx() const {
  const ::cosmos::tx::v1beta1::Tx* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Tx&>(
      ::cosmos::tx::v1beta1::_Tx_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Tx& GetTxResponse::tx() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxResponse.tx)
  return _internal_tx();
}
inline void GetTxResponse::unsafe_arena_set_allocated_tx(
    ::cosmos::tx::v1beta1::Tx* tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = tx;
  if (tx) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.GetTxResponse.tx)
}
inline ::cosmos::tx::v1beta1::Tx* GetTxResponse::release_tx() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Tx* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::Tx* GetTxResponse::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetTxResponse.tx)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Tx* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Tx* GetTxResponse::_internal_mutable_tx() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::Tx>(GetArenaForAllocation());
    _impl_.tx_ = p;
  }
  return _impl_.tx_;
}
inline ::cosmos::tx::v1beta1::Tx* GetTxResponse::mutable_tx() {
  ::cosmos::tx::v1beta1::Tx* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetTxResponse.tx)
  return _msg;
}
inline void GetTxResponse::set_allocated_tx(::cosmos::tx::v1beta1::Tx* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx));
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetTxResponse.tx)
}

// .cosmos.base.abci.v1beta1.TxResponse tx_response = 2 [json_name = "txResponse"];
inline bool GetTxResponse::has_tx_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_response_ != nullptr);
  return value;
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& GetTxResponse::_internal_tx_response() const {
  const ::cosmos::base::abci::v1beta1::TxResponse* p = _impl_.tx_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::abci::v1beta1::TxResponse&>(
      ::cosmos::base::abci::v1beta1::_TxResponse_default_instance_);
}
inline const ::cosmos::base::abci::v1beta1::TxResponse& GetTxResponse::tx_response() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetTxResponse.tx_response)
  return _internal_tx_response();
}
inline void GetTxResponse::unsafe_arena_set_allocated_tx_response(
    ::cosmos::base::abci::v1beta1::TxResponse* tx_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_response_);
  }
  _impl_.tx_response_ = tx_response;
  if (tx_response) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.GetTxResponse.tx_response)
}
inline ::cosmos::base::abci::v1beta1::TxResponse* GetTxResponse::release_tx_response() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::abci::v1beta1::TxResponse* temp = _impl_.tx_response_;
  _impl_.tx_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::abci::v1beta1::TxResponse* GetTxResponse::unsafe_arena_release_tx_response() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetTxResponse.tx_response)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::base::abci::v1beta1::TxResponse* temp = _impl_.tx_response_;
  _impl_.tx_response_ = nullptr;
  return temp;
}
inline ::cosmos::base::abci::v1beta1::TxResponse* GetTxResponse::_internal_mutable_tx_response() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tx_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::abci::v1beta1::TxResponse>(GetArenaForAllocation());
    _impl_.tx_response_ = p;
  }
  return _impl_.tx_response_;
}
inline ::cosmos::base::abci::v1beta1::TxResponse* GetTxResponse::mutable_tx_response() {
  ::cosmos::base::abci::v1beta1::TxResponse* _msg = _internal_mutable_tx_response();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetTxResponse.tx_response)
  return _msg;
}
inline void GetTxResponse::set_allocated_tx_response(::cosmos::base::abci::v1beta1::TxResponse* tx_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_response_);
  }
  if (tx_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx_response));
    if (message_arena != submessage_arena) {
      tx_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tx_response_ = tx_response;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetTxResponse.tx_response)
}

// -------------------------------------------------------------------

// GetBlockWithTxsRequest

// int64 height = 1 [json_name = "height"];
inline void GetBlockWithTxsRequest::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t GetBlockWithTxsRequest::height() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetBlockWithTxsRequest.height)
  return _internal_height();
}
inline void GetBlockWithTxsRequest::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.GetBlockWithTxsRequest.height)
}
inline ::int64_t GetBlockWithTxsRequest::_internal_height() const {
  return _impl_.height_;
}
inline void GetBlockWithTxsRequest::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool GetBlockWithTxsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& GetBlockWithTxsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& GetBlockWithTxsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetBlockWithTxsRequest.pagination)
  return _internal_pagination();
}
inline void GetBlockWithTxsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.GetBlockWithTxsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetBlockWithTxsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetBlockWithTxsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetBlockWithTxsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetBlockWithTxsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* GetBlockWithTxsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetBlockWithTxsRequest.pagination)
  return _msg;
}
inline void GetBlockWithTxsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetBlockWithTxsRequest.pagination)
}

// -------------------------------------------------------------------

// GetBlockWithTxsResponse

// repeated .cosmos.tx.v1beta1.Tx txs = 1 [json_name = "txs"];
inline int GetBlockWithTxsResponse::_internal_txs_size() const {
  return _impl_.txs_.size();
}
inline int GetBlockWithTxsResponse::txs_size() const {
  return _internal_txs_size();
}
inline ::cosmos::tx::v1beta1::Tx* GetBlockWithTxsResponse::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetBlockWithTxsResponse.txs)
  return _internal_mutable_txs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx >*
GetBlockWithTxsResponse::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.GetBlockWithTxsResponse.txs)
  return _internal_mutable_txs();
}
inline const ::cosmos::tx::v1beta1::Tx& GetBlockWithTxsResponse::_internal_txs(int index) const {
  return _internal_txs().Get(index);
}
inline const ::cosmos::tx::v1beta1::Tx& GetBlockWithTxsResponse::txs(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetBlockWithTxsResponse.txs)
  return _internal_txs(index);
}
inline ::cosmos::tx::v1beta1::Tx* GetBlockWithTxsResponse::_internal_add_txs() {
  return _internal_mutable_txs()->Add();
}
inline ::cosmos::tx::v1beta1::Tx* GetBlockWithTxsResponse::add_txs() {
  ::cosmos::tx::v1beta1::Tx* _add = _internal_add_txs();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.GetBlockWithTxsResponse.txs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::Tx >&
GetBlockWithTxsResponse::txs() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.GetBlockWithTxsResponse.txs)
  return _internal_txs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::Tx>&
GetBlockWithTxsResponse::_internal_txs() const {
  return _impl_.txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::Tx>*
GetBlockWithTxsResponse::_internal_mutable_txs() {
  return &_impl_.txs_;
}

// .tendermint.types.BlockID block_id = 2 [json_name = "blockId"];
inline bool GetBlockWithTxsResponse::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline const ::tendermint::types::BlockID& GetBlockWithTxsResponse::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& GetBlockWithTxsResponse::block_id() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block_id)
  return _internal_block_id();
}
inline void GetBlockWithTxsResponse::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block_id)
}
inline ::tendermint::types::BlockID* GetBlockWithTxsResponse::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* GetBlockWithTxsResponse::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* GetBlockWithTxsResponse::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::BlockID* GetBlockWithTxsResponse::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block_id)
  return _msg;
}
inline void GetBlockWithTxsResponse::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id));
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block_id)
}

// .tendermint.types.Block block = 3 [json_name = "block"];
inline bool GetBlockWithTxsResponse::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_ != nullptr);
  return value;
}
inline const ::tendermint::types::Block& GetBlockWithTxsResponse::_internal_block() const {
  const ::tendermint::types::Block* p = _impl_.block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Block&>(
      ::tendermint::types::_Block_default_instance_);
}
inline const ::tendermint::types::Block& GetBlockWithTxsResponse::block() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block)
  return _internal_block();
}
inline void GetBlockWithTxsResponse::unsafe_arena_set_allocated_block(
    ::tendermint::types::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  _impl_.block_ = block;
  if (block) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block)
}
inline ::tendermint::types::Block* GetBlockWithTxsResponse::release_block() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Block* GetBlockWithTxsResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
  return temp;
}
inline ::tendermint::types::Block* GetBlockWithTxsResponse::_internal_mutable_block() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Block>(GetArenaForAllocation());
    _impl_.block_ = p;
  }
  return _impl_.block_;
}
inline ::tendermint::types::Block* GetBlockWithTxsResponse::mutable_block() {
  ::tendermint::types::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block)
  return _msg;
}
inline void GetBlockWithTxsResponse::set_allocated_block(::tendermint::types::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.block_ = block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetBlockWithTxsResponse.block)
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 4 [json_name = "pagination"];
inline bool GetBlockWithTxsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& GetBlockWithTxsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& GetBlockWithTxsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.GetBlockWithTxsResponse.pagination)
  return _internal_pagination();
}
inline void GetBlockWithTxsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.GetBlockWithTxsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetBlockWithTxsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetBlockWithTxsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.GetBlockWithTxsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetBlockWithTxsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* GetBlockWithTxsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.GetBlockWithTxsResponse.pagination)
  return _msg;
}
inline void GetBlockWithTxsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.GetBlockWithTxsResponse.pagination)
}

// -------------------------------------------------------------------

// TxDecodeRequest

// bytes tx_bytes = 1 [json_name = "txBytes"];
inline void TxDecodeRequest::clear_tx_bytes() {
  _impl_.tx_bytes_.ClearToEmpty();
}
inline const std::string& TxDecodeRequest::tx_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxDecodeRequest.tx_bytes)
  return _internal_tx_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxDecodeRequest::set_tx_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tx_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxDecodeRequest.tx_bytes)
}
inline std::string* TxDecodeRequest::mutable_tx_bytes() {
  std::string* _s = _internal_mutable_tx_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxDecodeRequest.tx_bytes)
  return _s;
}
inline const std::string& TxDecodeRequest::_internal_tx_bytes() const {
  return _impl_.tx_bytes_.Get();
}
inline void TxDecodeRequest::_internal_set_tx_bytes(const std::string& value) {
  ;


  _impl_.tx_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TxDecodeRequest::_internal_mutable_tx_bytes() {
  ;
  return _impl_.tx_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* TxDecodeRequest::release_tx_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxDecodeRequest.tx_bytes)
  return _impl_.tx_bytes_.Release();
}
inline void TxDecodeRequest::set_allocated_tx_bytes(std::string* value) {
  _impl_.tx_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tx_bytes_.IsDefault()) {
          _impl_.tx_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxDecodeRequest.tx_bytes)
}

// -------------------------------------------------------------------

// TxDecodeResponse

// .cosmos.tx.v1beta1.Tx tx = 1 [json_name = "tx"];
inline bool TxDecodeResponse::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline const ::cosmos::tx::v1beta1::Tx& TxDecodeResponse::_internal_tx() const {
  const ::cosmos::tx::v1beta1::Tx* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Tx&>(
      ::cosmos::tx::v1beta1::_Tx_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Tx& TxDecodeResponse::tx() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxDecodeResponse.tx)
  return _internal_tx();
}
inline void TxDecodeResponse::unsafe_arena_set_allocated_tx(
    ::cosmos::tx::v1beta1::Tx* tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = tx;
  if (tx) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.TxDecodeResponse.tx)
}
inline ::cosmos::tx::v1beta1::Tx* TxDecodeResponse::release_tx() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Tx* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::Tx* TxDecodeResponse::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxDecodeResponse.tx)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Tx* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Tx* TxDecodeResponse::_internal_mutable_tx() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::Tx>(GetArenaForAllocation());
    _impl_.tx_ = p;
  }
  return _impl_.tx_;
}
inline ::cosmos::tx::v1beta1::Tx* TxDecodeResponse::mutable_tx() {
  ::cosmos::tx::v1beta1::Tx* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxDecodeResponse.tx)
  return _msg;
}
inline void TxDecodeResponse::set_allocated_tx(::cosmos::tx::v1beta1::Tx* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx));
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxDecodeResponse.tx)
}

// -------------------------------------------------------------------

// TxEncodeRequest

// .cosmos.tx.v1beta1.Tx tx = 1 [json_name = "tx"];
inline bool TxEncodeRequest::has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tx_ != nullptr);
  return value;
}
inline const ::cosmos::tx::v1beta1::Tx& TxEncodeRequest::_internal_tx() const {
  const ::cosmos::tx::v1beta1::Tx* p = _impl_.tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Tx&>(
      ::cosmos::tx::v1beta1::_Tx_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Tx& TxEncodeRequest::tx() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxEncodeRequest.tx)
  return _internal_tx();
}
inline void TxEncodeRequest::unsafe_arena_set_allocated_tx(
    ::cosmos::tx::v1beta1::Tx* tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  _impl_.tx_ = tx;
  if (tx) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.TxEncodeRequest.tx)
}
inline ::cosmos::tx::v1beta1::Tx* TxEncodeRequest::release_tx() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Tx* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::Tx* TxEncodeRequest::unsafe_arena_release_tx() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxEncodeRequest.tx)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Tx* temp = _impl_.tx_;
  _impl_.tx_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Tx* TxEncodeRequest::_internal_mutable_tx() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::Tx>(GetArenaForAllocation());
    _impl_.tx_ = p;
  }
  return _impl_.tx_;
}
inline ::cosmos::tx::v1beta1::Tx* TxEncodeRequest::mutable_tx() {
  ::cosmos::tx::v1beta1::Tx* _msg = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxEncodeRequest.tx)
  return _msg;
}
inline void TxEncodeRequest::set_allocated_tx(::cosmos::tx::v1beta1::Tx* tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tx_);
  }
  if (tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tx));
    if (message_arena != submessage_arena) {
      tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tx_ = tx;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxEncodeRequest.tx)
}

// -------------------------------------------------------------------

// TxEncodeResponse

// bytes tx_bytes = 1 [json_name = "txBytes"];
inline void TxEncodeResponse::clear_tx_bytes() {
  _impl_.tx_bytes_.ClearToEmpty();
}
inline const std::string& TxEncodeResponse::tx_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxEncodeResponse.tx_bytes)
  return _internal_tx_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxEncodeResponse::set_tx_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tx_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxEncodeResponse.tx_bytes)
}
inline std::string* TxEncodeResponse::mutable_tx_bytes() {
  std::string* _s = _internal_mutable_tx_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxEncodeResponse.tx_bytes)
  return _s;
}
inline const std::string& TxEncodeResponse::_internal_tx_bytes() const {
  return _impl_.tx_bytes_.Get();
}
inline void TxEncodeResponse::_internal_set_tx_bytes(const std::string& value) {
  ;


  _impl_.tx_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TxEncodeResponse::_internal_mutable_tx_bytes() {
  ;
  return _impl_.tx_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* TxEncodeResponse::release_tx_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxEncodeResponse.tx_bytes)
  return _impl_.tx_bytes_.Release();
}
inline void TxEncodeResponse::set_allocated_tx_bytes(std::string* value) {
  _impl_.tx_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tx_bytes_.IsDefault()) {
          _impl_.tx_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxEncodeResponse.tx_bytes)
}

// -------------------------------------------------------------------

// TxEncodeAminoRequest

// string amino_json = 1 [json_name = "aminoJson"];
inline void TxEncodeAminoRequest::clear_amino_json() {
  _impl_.amino_json_.ClearToEmpty();
}
inline const std::string& TxEncodeAminoRequest::amino_json() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxEncodeAminoRequest.amino_json)
  return _internal_amino_json();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxEncodeAminoRequest::set_amino_json(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amino_json_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxEncodeAminoRequest.amino_json)
}
inline std::string* TxEncodeAminoRequest::mutable_amino_json() {
  std::string* _s = _internal_mutable_amino_json();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxEncodeAminoRequest.amino_json)
  return _s;
}
inline const std::string& TxEncodeAminoRequest::_internal_amino_json() const {
  return _impl_.amino_json_.Get();
}
inline void TxEncodeAminoRequest::_internal_set_amino_json(const std::string& value) {
  ;


  _impl_.amino_json_.Set(value, GetArenaForAllocation());
}
inline std::string* TxEncodeAminoRequest::_internal_mutable_amino_json() {
  ;
  return _impl_.amino_json_.Mutable( GetArenaForAllocation());
}
inline std::string* TxEncodeAminoRequest::release_amino_json() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxEncodeAminoRequest.amino_json)
  return _impl_.amino_json_.Release();
}
inline void TxEncodeAminoRequest::set_allocated_amino_json(std::string* value) {
  _impl_.amino_json_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amino_json_.IsDefault()) {
          _impl_.amino_json_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxEncodeAminoRequest.amino_json)
}

// -------------------------------------------------------------------

// TxEncodeAminoResponse

// bytes amino_binary = 1 [json_name = "aminoBinary"];
inline void TxEncodeAminoResponse::clear_amino_binary() {
  _impl_.amino_binary_.ClearToEmpty();
}
inline const std::string& TxEncodeAminoResponse::amino_binary() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxEncodeAminoResponse.amino_binary)
  return _internal_amino_binary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxEncodeAminoResponse::set_amino_binary(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amino_binary_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxEncodeAminoResponse.amino_binary)
}
inline std::string* TxEncodeAminoResponse::mutable_amino_binary() {
  std::string* _s = _internal_mutable_amino_binary();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxEncodeAminoResponse.amino_binary)
  return _s;
}
inline const std::string& TxEncodeAminoResponse::_internal_amino_binary() const {
  return _impl_.amino_binary_.Get();
}
inline void TxEncodeAminoResponse::_internal_set_amino_binary(const std::string& value) {
  ;


  _impl_.amino_binary_.Set(value, GetArenaForAllocation());
}
inline std::string* TxEncodeAminoResponse::_internal_mutable_amino_binary() {
  ;
  return _impl_.amino_binary_.Mutable( GetArenaForAllocation());
}
inline std::string* TxEncodeAminoResponse::release_amino_binary() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxEncodeAminoResponse.amino_binary)
  return _impl_.amino_binary_.Release();
}
inline void TxEncodeAminoResponse::set_allocated_amino_binary(std::string* value) {
  _impl_.amino_binary_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amino_binary_.IsDefault()) {
          _impl_.amino_binary_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxEncodeAminoResponse.amino_binary)
}

// -------------------------------------------------------------------

// TxDecodeAminoRequest

// bytes amino_binary = 1 [json_name = "aminoBinary"];
inline void TxDecodeAminoRequest::clear_amino_binary() {
  _impl_.amino_binary_.ClearToEmpty();
}
inline const std::string& TxDecodeAminoRequest::amino_binary() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxDecodeAminoRequest.amino_binary)
  return _internal_amino_binary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxDecodeAminoRequest::set_amino_binary(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amino_binary_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxDecodeAminoRequest.amino_binary)
}
inline std::string* TxDecodeAminoRequest::mutable_amino_binary() {
  std::string* _s = _internal_mutable_amino_binary();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxDecodeAminoRequest.amino_binary)
  return _s;
}
inline const std::string& TxDecodeAminoRequest::_internal_amino_binary() const {
  return _impl_.amino_binary_.Get();
}
inline void TxDecodeAminoRequest::_internal_set_amino_binary(const std::string& value) {
  ;


  _impl_.amino_binary_.Set(value, GetArenaForAllocation());
}
inline std::string* TxDecodeAminoRequest::_internal_mutable_amino_binary() {
  ;
  return _impl_.amino_binary_.Mutable( GetArenaForAllocation());
}
inline std::string* TxDecodeAminoRequest::release_amino_binary() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxDecodeAminoRequest.amino_binary)
  return _impl_.amino_binary_.Release();
}
inline void TxDecodeAminoRequest::set_allocated_amino_binary(std::string* value) {
  _impl_.amino_binary_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amino_binary_.IsDefault()) {
          _impl_.amino_binary_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxDecodeAminoRequest.amino_binary)
}

// -------------------------------------------------------------------

// TxDecodeAminoResponse

// string amino_json = 1 [json_name = "aminoJson"];
inline void TxDecodeAminoResponse::clear_amino_json() {
  _impl_.amino_json_.ClearToEmpty();
}
inline const std::string& TxDecodeAminoResponse::amino_json() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxDecodeAminoResponse.amino_json)
  return _internal_amino_json();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxDecodeAminoResponse::set_amino_json(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amino_json_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxDecodeAminoResponse.amino_json)
}
inline std::string* TxDecodeAminoResponse::mutable_amino_json() {
  std::string* _s = _internal_mutable_amino_json();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxDecodeAminoResponse.amino_json)
  return _s;
}
inline const std::string& TxDecodeAminoResponse::_internal_amino_json() const {
  return _impl_.amino_json_.Get();
}
inline void TxDecodeAminoResponse::_internal_set_amino_json(const std::string& value) {
  ;


  _impl_.amino_json_.Set(value, GetArenaForAllocation());
}
inline std::string* TxDecodeAminoResponse::_internal_mutable_amino_json() {
  ;
  return _impl_.amino_json_.Mutable( GetArenaForAllocation());
}
inline std::string* TxDecodeAminoResponse::release_amino_json() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxDecodeAminoResponse.amino_json)
  return _impl_.amino_json_.Release();
}
inline void TxDecodeAminoResponse::set_allocated_amino_json(std::string* value) {
  _impl_.amino_json_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amino_json_.IsDefault()) {
          _impl_.amino_json_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxDecodeAminoResponse.amino_json)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cosmos::tx::v1beta1::OrderBy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::tx::v1beta1::OrderBy>() {
  return ::cosmos::tx::v1beta1::OrderBy_descriptor();
}
template <>
struct is_proto_enum<::cosmos::tx::v1beta1::BroadcastMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::tx::v1beta1::BroadcastMode>() {
  return ::cosmos::tx::v1beta1::BroadcastMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fv1beta1_2fservice_2eproto_2epb_2eh

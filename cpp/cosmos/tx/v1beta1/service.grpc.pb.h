// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/tx/v1beta1/service.proto
#ifndef GRPC_cosmos_2ftx_2fv1beta1_2fservice_2eproto__INCLUDED
#define GRPC_cosmos_2ftx_2fv1beta1_2fservice_2eproto__INCLUDED

#include "cosmos/tx/v1beta1/service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace tx {
namespace v1beta1 {

// Service defines a gRPC service for interacting with transactions.
class Service final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.tx.v1beta1.Service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Simulate simulates executing a transaction for estimating gas usage.
    virtual ::grpc::Status Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::cosmos::tx::v1beta1::SimulateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::SimulateResponse>> AsyncSimulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::SimulateResponse>>(AsyncSimulateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::SimulateResponse>> PrepareAsyncSimulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::SimulateResponse>>(PrepareAsyncSimulateRaw(context, request, cq));
    }
    // GetTx fetches a tx by hash.
    virtual ::grpc::Status GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::cosmos::tx::v1beta1::GetTxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxResponse>> AsyncGetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxResponse>>(AsyncGetTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxResponse>> PrepareAsyncGetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxResponse>>(PrepareAsyncGetTxRaw(context, request, cq));
    }
    // BroadcastTx broadcast transaction.
    virtual ::grpc::Status BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::BroadcastTxResponse>> AsyncBroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::BroadcastTxResponse>>(AsyncBroadcastTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::BroadcastTxResponse>> PrepareAsyncBroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::BroadcastTxResponse>>(PrepareAsyncBroadcastTxRaw(context, request, cq));
    }
    // GetTxsEvent fetches txs by event.
    virtual ::grpc::Status GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxsEventResponse>> AsyncGetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxsEventResponse>>(AsyncGetTxsEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxsEventResponse>> PrepareAsyncGetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxsEventResponse>>(PrepareAsyncGetTxsEventRaw(context, request, cq));
    }
    // GetBlockWithTxs fetches a block with decoded txs.
    //
    // Since: cosmos-sdk 0.45.2
    virtual ::grpc::Status GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>> AsyncGetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>>(AsyncGetBlockWithTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>> PrepareAsyncGetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>>(PrepareAsyncGetBlockWithTxsRaw(context, request, cq));
    }
    // TxDecode decodes the transaction.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::cosmos::tx::v1beta1::TxDecodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeResponse>> AsyncTxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeResponse>>(AsyncTxDecodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeResponse>> PrepareAsyncTxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeResponse>>(PrepareAsyncTxDecodeRaw(context, request, cq));
    }
    // TxEncode encodes the transaction.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::cosmos::tx::v1beta1::TxEncodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeResponse>> AsyncTxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeResponse>>(AsyncTxEncodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeResponse>> PrepareAsyncTxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeResponse>>(PrepareAsyncTxEncodeRaw(context, request, cq));
    }
    // TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>> AsyncTxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>>(AsyncTxEncodeAminoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>> PrepareAsyncTxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>>(PrepareAsyncTxEncodeAminoRaw(context, request, cq));
    }
    // TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>> AsyncTxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>>(AsyncTxDecodeAminoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>> PrepareAsyncTxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>>(PrepareAsyncTxDecodeAminoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Simulate simulates executing a transaction for estimating gas usage.
      virtual void Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetTx fetches a tx by hash.
      virtual void GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BroadcastTx broadcast transaction.
      virtual void BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetTxsEvent fetches txs by event.
      virtual void GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetBlockWithTxs fetches a block with decoded txs.
      //
      // Since: cosmos-sdk 0.45.2
      virtual void GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TxDecode decodes the transaction.
      //
      // Since: cosmos-sdk 0.47
      virtual void TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TxEncode encodes the transaction.
      //
      // Since: cosmos-sdk 0.47
      virtual void TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
      //
      // Since: cosmos-sdk 0.47
      virtual void TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
      //
      // Since: cosmos-sdk 0.47
      virtual void TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::SimulateResponse>* AsyncSimulateRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::SimulateResponse>* PrepareAsyncSimulateRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxResponse>* AsyncGetTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxResponse>* PrepareAsyncGetTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::BroadcastTxResponse>* AsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::BroadcastTxResponse>* PrepareAsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxsEventResponse>* AsyncGetTxsEventRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetTxsEventResponse>* PrepareAsyncGetTxsEventRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* AsyncGetBlockWithTxsRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* PrepareAsyncGetBlockWithTxsRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeResponse>* AsyncTxDecodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeResponse>* PrepareAsyncTxDecodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeResponse>* AsyncTxEncodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeResponse>* PrepareAsyncTxEncodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* AsyncTxEncodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* PrepareAsyncTxEncodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* AsyncTxDecodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* PrepareAsyncTxDecodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::cosmos::tx::v1beta1::SimulateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::SimulateResponse>> AsyncSimulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::SimulateResponse>>(AsyncSimulateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::SimulateResponse>> PrepareAsyncSimulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::SimulateResponse>>(PrepareAsyncSimulateRaw(context, request, cq));
    }
    ::grpc::Status GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::cosmos::tx::v1beta1::GetTxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxResponse>> AsyncGetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxResponse>>(AsyncGetTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxResponse>> PrepareAsyncGetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxResponse>>(PrepareAsyncGetTxRaw(context, request, cq));
    }
    ::grpc::Status BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::BroadcastTxResponse>> AsyncBroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::BroadcastTxResponse>>(AsyncBroadcastTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::BroadcastTxResponse>> PrepareAsyncBroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::BroadcastTxResponse>>(PrepareAsyncBroadcastTxRaw(context, request, cq));
    }
    ::grpc::Status GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxsEventResponse>> AsyncGetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxsEventResponse>>(AsyncGetTxsEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxsEventResponse>> PrepareAsyncGetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxsEventResponse>>(PrepareAsyncGetTxsEventRaw(context, request, cq));
    }
    ::grpc::Status GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>> AsyncGetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>>(AsyncGetBlockWithTxsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>> PrepareAsyncGetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>>(PrepareAsyncGetBlockWithTxsRaw(context, request, cq));
    }
    ::grpc::Status TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::cosmos::tx::v1beta1::TxDecodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeResponse>> AsyncTxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeResponse>>(AsyncTxDecodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeResponse>> PrepareAsyncTxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeResponse>>(PrepareAsyncTxDecodeRaw(context, request, cq));
    }
    ::grpc::Status TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::cosmos::tx::v1beta1::TxEncodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeResponse>> AsyncTxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeResponse>>(AsyncTxEncodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeResponse>> PrepareAsyncTxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeResponse>>(PrepareAsyncTxEncodeRaw(context, request, cq));
    }
    ::grpc::Status TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>> AsyncTxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>>(AsyncTxEncodeAminoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>> PrepareAsyncTxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>>(PrepareAsyncTxEncodeAminoRaw(context, request, cq));
    }
    ::grpc::Status TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>> AsyncTxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>>(AsyncTxDecodeAminoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>> PrepareAsyncTxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>>(PrepareAsyncTxDecodeAminoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response, std::function<void(::grpc::Status)>) override;
      void Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response, std::function<void(::grpc::Status)>) override;
      void BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response, std::function<void(::grpc::Status)>) override;
      void TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response, std::function<void(::grpc::Status)>) override;
      void TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response, std::function<void(::grpc::Status)>) override;
      void TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response, std::function<void(::grpc::Status)>) override;
      void TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::SimulateResponse>* AsyncSimulateRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::SimulateResponse>* PrepareAsyncSimulateRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxResponse>* AsyncGetTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxResponse>* PrepareAsyncGetTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::BroadcastTxResponse>* AsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::BroadcastTxResponse>* PrepareAsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxsEventResponse>* AsyncGetTxsEventRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxsEventResponse>* PrepareAsyncGetTxsEventRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* AsyncGetBlockWithTxsRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* PrepareAsyncGetBlockWithTxsRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeResponse>* AsyncTxDecodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeResponse>* PrepareAsyncTxDecodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeResponse>* AsyncTxEncodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeResponse>* PrepareAsyncTxEncodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* AsyncTxEncodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* PrepareAsyncTxEncodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* AsyncTxDecodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* PrepareAsyncTxDecodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Simulate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTx_;
    const ::grpc::internal::RpcMethod rpcmethod_BroadcastTx_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTxsEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockWithTxs_;
    const ::grpc::internal::RpcMethod rpcmethod_TxDecode_;
    const ::grpc::internal::RpcMethod rpcmethod_TxEncode_;
    const ::grpc::internal::RpcMethod rpcmethod_TxEncodeAmino_;
    const ::grpc::internal::RpcMethod rpcmethod_TxDecodeAmino_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Simulate simulates executing a transaction for estimating gas usage.
    virtual ::grpc::Status Simulate(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response);
    // GetTx fetches a tx by hash.
    virtual ::grpc::Status GetTx(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response);
    // BroadcastTx broadcast transaction.
    virtual ::grpc::Status BroadcastTx(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response);
    // GetTxsEvent fetches txs by event.
    virtual ::grpc::Status GetTxsEvent(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response);
    // GetBlockWithTxs fetches a block with decoded txs.
    //
    // Since: cosmos-sdk 0.45.2
    virtual ::grpc::Status GetBlockWithTxs(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response);
    // TxDecode decodes the transaction.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status TxDecode(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response);
    // TxEncode encodes the transaction.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status TxEncode(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response);
    // TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status TxEncodeAmino(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response);
    // TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status TxDecodeAmino(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Simulate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Simulate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Simulate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Simulate(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::SimulateRequest* /*request*/, ::cosmos::tx::v1beta1::SimulateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimulate(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::SimulateRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::SimulateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTx() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTx(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::GetTxRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::GetTxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::BroadcastTxRequest* /*request*/, ::cosmos::tx::v1beta1::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastTx(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::BroadcastTxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTxsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTxsEvent() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTxsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxsEvent(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxsEventRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxsEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxsEvent(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::GetTxsEventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockWithTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockWithTxs() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetBlockWithTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockWithTxs(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* /*request*/, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockWithTxs(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TxDecode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TxDecode() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_TxDecode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxDecode(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::TxDecodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TxEncode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TxEncode() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_TxEncode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxEncode(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::TxEncodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TxEncodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TxEncodeAmino() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_TxEncodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxEncodeAmino(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TxDecodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TxDecodeAmino() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_TxDecodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxDecodeAmino(::grpc::ServerContext* context, ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Simulate<WithAsyncMethod_GetTx<WithAsyncMethod_BroadcastTx<WithAsyncMethod_GetTxsEvent<WithAsyncMethod_GetBlockWithTxs<WithAsyncMethod_TxDecode<WithAsyncMethod_TxEncode<WithAsyncMethod_TxEncodeAmino<WithAsyncMethod_TxDecodeAmino<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Simulate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Simulate() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::SimulateRequest, ::cosmos::tx::v1beta1::SimulateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response) { return this->Simulate(context, request, response); }));}
    void SetMessageAllocatorFor_Simulate(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::SimulateRequest, ::cosmos::tx::v1beta1::SimulateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::SimulateRequest, ::cosmos::tx::v1beta1::SimulateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Simulate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Simulate(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::SimulateRequest* /*request*/, ::cosmos::tx::v1beta1::SimulateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Simulate(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::SimulateRequest* /*request*/, ::cosmos::tx::v1beta1::SimulateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTx() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::GetTxRequest, ::cosmos::tx::v1beta1::GetTxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response) { return this->GetTx(context, request, response); }));}
    void SetMessageAllocatorFor_GetTx(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::GetTxRequest, ::cosmos::tx::v1beta1::GetTxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::GetTxRequest, ::cosmos::tx::v1beta1::GetTxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTx(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::BroadcastTxRequest, ::cosmos::tx::v1beta1::BroadcastTxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response) { return this->BroadcastTx(context, request, response); }));}
    void SetMessageAllocatorFor_BroadcastTx(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::BroadcastTxRequest, ::cosmos::tx::v1beta1::BroadcastTxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::BroadcastTxRequest, ::cosmos::tx::v1beta1::BroadcastTxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::BroadcastTxRequest* /*request*/, ::cosmos::tx::v1beta1::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastTx(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::BroadcastTxRequest* /*request*/, ::cosmos::tx::v1beta1::BroadcastTxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTxsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTxsEvent() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::GetTxsEventRequest, ::cosmos::tx::v1beta1::GetTxsEventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response) { return this->GetTxsEvent(context, request, response); }));}
    void SetMessageAllocatorFor_GetTxsEvent(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::GetTxsEventRequest, ::cosmos::tx::v1beta1::GetTxsEventResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::GetTxsEventRequest, ::cosmos::tx::v1beta1::GetTxsEventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTxsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxsEvent(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxsEventRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxsEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTxsEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxsEventRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxsEventResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBlockWithTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBlockWithTxs() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response) { return this->GetBlockWithTxs(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockWithTxs(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBlockWithTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockWithTxs(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* /*request*/, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockWithTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* /*request*/, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TxDecode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TxDecode() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::TxDecodeRequest, ::cosmos::tx::v1beta1::TxDecodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response) { return this->TxDecode(context, request, response); }));}
    void SetMessageAllocatorFor_TxDecode(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::TxDecodeRequest, ::cosmos::tx::v1beta1::TxDecodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::TxDecodeRequest, ::cosmos::tx::v1beta1::TxDecodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TxDecode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TxDecode(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TxEncode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TxEncode() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::TxEncodeRequest, ::cosmos::tx::v1beta1::TxEncodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response) { return this->TxEncode(context, request, response); }));}
    void SetMessageAllocatorFor_TxEncode(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::TxEncodeRequest, ::cosmos::tx::v1beta1::TxEncodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::TxEncodeRequest, ::cosmos::tx::v1beta1::TxEncodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TxEncode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TxEncode(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TxEncodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TxEncodeAmino() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::cosmos::tx::v1beta1::TxEncodeAminoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response) { return this->TxEncodeAmino(context, request, response); }));}
    void SetMessageAllocatorFor_TxEncodeAmino(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::cosmos::tx::v1beta1::TxEncodeAminoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TxEncodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TxEncodeAmino(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TxDecodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TxDecodeAmino() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::cosmos::tx::v1beta1::TxDecodeAminoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response) { return this->TxDecodeAmino(context, request, response); }));}
    void SetMessageAllocatorFor_TxDecodeAmino(
        ::grpc::MessageAllocator< ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::cosmos::tx::v1beta1::TxDecodeAminoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TxDecodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TxDecodeAmino(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Simulate<WithCallbackMethod_GetTx<WithCallbackMethod_BroadcastTx<WithCallbackMethod_GetTxsEvent<WithCallbackMethod_GetBlockWithTxs<WithCallbackMethod_TxDecode<WithCallbackMethod_TxEncode<WithCallbackMethod_TxEncodeAmino<WithCallbackMethod_TxDecodeAmino<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Simulate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Simulate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Simulate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Simulate(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::SimulateRequest* /*request*/, ::cosmos::tx::v1beta1::SimulateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTx() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::BroadcastTxRequest* /*request*/, ::cosmos::tx::v1beta1::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTxsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTxsEvent() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTxsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxsEvent(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxsEventRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxsEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockWithTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockWithTxs() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetBlockWithTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockWithTxs(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* /*request*/, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TxDecode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TxDecode() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_TxDecode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TxEncode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TxEncode() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_TxEncode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TxEncodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TxEncodeAmino() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_TxEncodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TxDecodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TxDecodeAmino() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_TxDecodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Simulate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Simulate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Simulate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Simulate(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::SimulateRequest* /*request*/, ::cosmos::tx::v1beta1::SimulateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimulate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTx() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::BroadcastTxRequest* /*request*/, ::cosmos::tx::v1beta1::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBroadcastTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTxsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTxsEvent() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTxsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxsEvent(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxsEventRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxsEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTxsEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockWithTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockWithTxs() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetBlockWithTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockWithTxs(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* /*request*/, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockWithTxs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TxDecode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TxDecode() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_TxDecode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxDecode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TxEncode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TxEncode() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_TxEncode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxEncode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TxEncodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TxEncodeAmino() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_TxEncodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxEncodeAmino(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TxDecodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TxDecodeAmino() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_TxDecodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTxDecodeAmino(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Simulate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Simulate() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Simulate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Simulate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Simulate(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::SimulateRequest* /*request*/, ::cosmos::tx::v1beta1::SimulateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Simulate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTx() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BroadcastTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::BroadcastTxRequest* /*request*/, ::cosmos::tx::v1beta1::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BroadcastTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTxsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTxsEvent() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTxsEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTxsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTxsEvent(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxsEventRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxsEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTxsEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBlockWithTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBlockWithTxs() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockWithTxs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBlockWithTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockWithTxs(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* /*request*/, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBlockWithTxs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TxDecode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TxDecode() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TxDecode(context, request, response); }));
    }
    ~WithRawCallbackMethod_TxDecode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TxDecode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TxEncode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TxEncode() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TxEncode(context, request, response); }));
    }
    ~WithRawCallbackMethod_TxEncode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TxEncode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TxEncodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TxEncodeAmino() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TxEncodeAmino(context, request, response); }));
    }
    ~WithRawCallbackMethod_TxEncodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxEncodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TxEncodeAmino(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TxDecodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TxDecodeAmino() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TxDecodeAmino(context, request, response); }));
    }
    ~WithRawCallbackMethod_TxDecodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TxDecodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TxDecodeAmino(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Simulate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Simulate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::SimulateRequest, ::cosmos::tx::v1beta1::SimulateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::SimulateRequest, ::cosmos::tx::v1beta1::SimulateResponse>* streamer) {
                       return this->StreamedSimulate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Simulate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Simulate(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::SimulateRequest* /*request*/, ::cosmos::tx::v1beta1::SimulateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimulate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::SimulateRequest,::cosmos::tx::v1beta1::SimulateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTx() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::GetTxRequest, ::cosmos::tx::v1beta1::GetTxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::GetTxRequest, ::cosmos::tx::v1beta1::GetTxResponse>* streamer) {
                       return this->StreamedGetTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::GetTxRequest,::cosmos::tx::v1beta1::GetTxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BroadcastTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BroadcastTx() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::BroadcastTxRequest, ::cosmos::tx::v1beta1::BroadcastTxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::BroadcastTxRequest, ::cosmos::tx::v1beta1::BroadcastTxResponse>* streamer) {
                       return this->StreamedBroadcastTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BroadcastTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BroadcastTx(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::BroadcastTxRequest* /*request*/, ::cosmos::tx::v1beta1::BroadcastTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBroadcastTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::BroadcastTxRequest,::cosmos::tx::v1beta1::BroadcastTxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTxsEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTxsEvent() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::GetTxsEventRequest, ::cosmos::tx::v1beta1::GetTxsEventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::GetTxsEventRequest, ::cosmos::tx::v1beta1::GetTxsEventResponse>* streamer) {
                       return this->StreamedGetTxsEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTxsEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTxsEvent(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetTxsEventRequest* /*request*/, ::cosmos::tx::v1beta1::GetTxsEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTxsEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::GetTxsEventRequest,::cosmos::tx::v1beta1::GetTxsEventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockWithTxs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockWithTxs() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* streamer) {
                       return this->StreamedGetBlockWithTxs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockWithTxs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockWithTxs(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* /*request*/, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockWithTxs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::GetBlockWithTxsRequest,::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TxDecode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TxDecode() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::TxDecodeRequest, ::cosmos::tx::v1beta1::TxDecodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::TxDecodeRequest, ::cosmos::tx::v1beta1::TxDecodeResponse>* streamer) {
                       return this->StreamedTxDecode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TxDecode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TxDecode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTxDecode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::TxDecodeRequest,::cosmos::tx::v1beta1::TxDecodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TxEncode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TxEncode() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::TxEncodeRequest, ::cosmos::tx::v1beta1::TxEncodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::TxEncodeRequest, ::cosmos::tx::v1beta1::TxEncodeResponse>* streamer) {
                       return this->StreamedTxEncode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TxEncode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TxEncode(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTxEncode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::TxEncodeRequest,::cosmos::tx::v1beta1::TxEncodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TxEncodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TxEncodeAmino() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::cosmos::tx::v1beta1::TxEncodeAminoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* streamer) {
                       return this->StreamedTxEncodeAmino(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TxEncodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TxEncodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTxEncodeAmino(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::TxEncodeAminoRequest,::cosmos::tx::v1beta1::TxEncodeAminoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TxDecodeAmino : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TxDecodeAmino() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::cosmos::tx::v1beta1::TxDecodeAminoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* streamer) {
                       return this->StreamedTxDecodeAmino(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TxDecodeAmino() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TxDecodeAmino(::grpc::ServerContext* /*context*/, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* /*request*/, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTxDecodeAmino(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::tx::v1beta1::TxDecodeAminoRequest,::cosmos::tx::v1beta1::TxDecodeAminoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Simulate<WithStreamedUnaryMethod_GetTx<WithStreamedUnaryMethod_BroadcastTx<WithStreamedUnaryMethod_GetTxsEvent<WithStreamedUnaryMethod_GetBlockWithTxs<WithStreamedUnaryMethod_TxDecode<WithStreamedUnaryMethod_TxEncode<WithStreamedUnaryMethod_TxEncodeAmino<WithStreamedUnaryMethod_TxDecodeAmino<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Simulate<WithStreamedUnaryMethod_GetTx<WithStreamedUnaryMethod_BroadcastTx<WithStreamedUnaryMethod_GetTxsEvent<WithStreamedUnaryMethod_GetBlockWithTxs<WithStreamedUnaryMethod_TxDecode<WithStreamedUnaryMethod_TxEncode<WithStreamedUnaryMethod_TxEncodeAmino<WithStreamedUnaryMethod_TxDecodeAmino<Service > > > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos


#endif  // GRPC_cosmos_2ftx_2fv1beta1_2fservice_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/v1beta1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fv1beta1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fv1beta1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/crypto/multisig/v1beta1/multisig.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/tx/signing/v1beta1/signing.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2ftx_2fv1beta1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
namespace cosmos {
namespace tx {
namespace v1beta1 {
class AuthInfo;
struct AuthInfoDefaultTypeInternal;
extern AuthInfoDefaultTypeInternal _AuthInfo_default_instance_;
class AuxSignerData;
struct AuxSignerDataDefaultTypeInternal;
extern AuxSignerDataDefaultTypeInternal _AuxSignerData_default_instance_;
class Fee;
struct FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class ModeInfo;
struct ModeInfoDefaultTypeInternal;
extern ModeInfoDefaultTypeInternal _ModeInfo_default_instance_;
class ModeInfo_Multi;
struct ModeInfo_MultiDefaultTypeInternal;
extern ModeInfo_MultiDefaultTypeInternal _ModeInfo_Multi_default_instance_;
class ModeInfo_Single;
struct ModeInfo_SingleDefaultTypeInternal;
extern ModeInfo_SingleDefaultTypeInternal _ModeInfo_Single_default_instance_;
class SignDoc;
struct SignDocDefaultTypeInternal;
extern SignDocDefaultTypeInternal _SignDoc_default_instance_;
class SignDocDirectAux;
struct SignDocDirectAuxDefaultTypeInternal;
extern SignDocDirectAuxDefaultTypeInternal _SignDocDirectAux_default_instance_;
class SignerInfo;
struct SignerInfoDefaultTypeInternal;
extern SignerInfoDefaultTypeInternal _SignerInfo_default_instance_;
class Tip;
struct TipDefaultTypeInternal;
extern TipDefaultTypeInternal _Tip_default_instance_;
class Tx;
struct TxDefaultTypeInternal;
extern TxDefaultTypeInternal _Tx_default_instance_;
class TxBody;
struct TxBodyDefaultTypeInternal;
extern TxBodyDefaultTypeInternal _TxBody_default_instance_;
class TxRaw;
struct TxRawDefaultTypeInternal;
extern TxRawDefaultTypeInternal _TxRaw_default_instance_;
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::tx::v1beta1::AuthInfo* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::AuthInfo>(Arena*);
template <>
::cosmos::tx::v1beta1::AuxSignerData* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::AuxSignerData>(Arena*);
template <>
::cosmos::tx::v1beta1::Fee* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::Fee>(Arena*);
template <>
::cosmos::tx::v1beta1::ModeInfo* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::ModeInfo>(Arena*);
template <>
::cosmos::tx::v1beta1::ModeInfo_Multi* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::ModeInfo_Multi>(Arena*);
template <>
::cosmos::tx::v1beta1::ModeInfo_Single* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::ModeInfo_Single>(Arena*);
template <>
::cosmos::tx::v1beta1::SignDoc* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::SignDoc>(Arena*);
template <>
::cosmos::tx::v1beta1::SignDocDirectAux* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::SignDocDirectAux>(Arena*);
template <>
::cosmos::tx::v1beta1::SignerInfo* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::SignerInfo>(Arena*);
template <>
::cosmos::tx::v1beta1::Tip* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::Tip>(Arena*);
template <>
::cosmos::tx::v1beta1::Tx* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::Tx>(Arena*);
template <>
::cosmos::tx::v1beta1::TxBody* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxBody>(Arena*);
template <>
::cosmos::tx::v1beta1::TxRaw* Arena::CreateMaybeMessage<::cosmos::tx::v1beta1::TxRaw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace tx {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class Tx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.Tx) */ {
 public:
  inline Tx() : Tx(nullptr) {}
  ~Tx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Tx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tx(const Tx& from);
  Tx(Tx&& from) noexcept
    : Tx() {
    *this = ::std::move(from);
  }

  inline Tx& operator=(const Tx& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tx& operator=(Tx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tx& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tx* internal_default_instance() {
    return reinterpret_cast<const Tx*>(
               &_Tx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tx& a, Tx& b) {
    a.Swap(&b);
  }
  inline void Swap(Tx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tx& from) {
    Tx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.Tx";
  }
  protected:
  explicit Tx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 3,
    kBodyFieldNumber = 1,
    kAuthInfoFieldNumber = 2,
  };
  // repeated bytes signatures = 3 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, std::size_t size);
  void set_signatures(int index, absl::string_view value);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, std::size_t size);
  void add_signatures(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();

  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_signatures();

  public:
  // .cosmos.tx.v1beta1.TxBody body = 1 [json_name = "body"];
  bool has_body() const;
  void clear_body() ;
  const ::cosmos::tx::v1beta1::TxBody& body() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::TxBody* release_body();
  ::cosmos::tx::v1beta1::TxBody* mutable_body();
  void set_allocated_body(::cosmos::tx::v1beta1::TxBody* body);
  private:
  const ::cosmos::tx::v1beta1::TxBody& _internal_body() const;
  ::cosmos::tx::v1beta1::TxBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::cosmos::tx::v1beta1::TxBody* body);
  ::cosmos::tx::v1beta1::TxBody* unsafe_arena_release_body();
  // .cosmos.tx.v1beta1.AuthInfo auth_info = 2 [json_name = "authInfo"];
  bool has_auth_info() const;
  void clear_auth_info() ;
  const ::cosmos::tx::v1beta1::AuthInfo& auth_info() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::AuthInfo* release_auth_info();
  ::cosmos::tx::v1beta1::AuthInfo* mutable_auth_info();
  void set_allocated_auth_info(::cosmos::tx::v1beta1::AuthInfo* auth_info);
  private:
  const ::cosmos::tx::v1beta1::AuthInfo& _internal_auth_info() const;
  ::cosmos::tx::v1beta1::AuthInfo* _internal_mutable_auth_info();
  public:
  void unsafe_arena_set_allocated_auth_info(
      ::cosmos::tx::v1beta1::AuthInfo* auth_info);
  ::cosmos::tx::v1beta1::AuthInfo* unsafe_arena_release_auth_info();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.Tx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
    ::cosmos::tx::v1beta1::TxBody* body_;
    ::cosmos::tx::v1beta1::AuthInfo* auth_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class TxRaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxRaw) */ {
 public:
  inline TxRaw() : TxRaw(nullptr) {}
  ~TxRaw() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxRaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxRaw(const TxRaw& from);
  TxRaw(TxRaw&& from) noexcept
    : TxRaw() {
    *this = ::std::move(from);
  }

  inline TxRaw& operator=(const TxRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxRaw& operator=(TxRaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxRaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxRaw* internal_default_instance() {
    return reinterpret_cast<const TxRaw*>(
               &_TxRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxRaw& a, TxRaw& b) {
    a.Swap(&b);
  }
  inline void Swap(TxRaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxRaw* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxRaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxRaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxRaw& from) {
    TxRaw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxRaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxRaw";
  }
  protected:
  explicit TxRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 3,
    kBodyBytesFieldNumber = 1,
    kAuthInfoBytesFieldNumber = 2,
  };
  // repeated bytes signatures = 3 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  const std::string& signatures(int index) const;
  std::string* mutable_signatures(int index);
  void set_signatures(int index, const std::string& value);
  void set_signatures(int index, std::string&& value);
  void set_signatures(int index, const char* value);
  void set_signatures(int index, const void* value, std::size_t size);
  void set_signatures(int index, absl::string_view value);
  std::string* add_signatures();
  void add_signatures(const std::string& value);
  void add_signatures(std::string&& value);
  void add_signatures(const char* value);
  void add_signatures(const void* value, std::size_t size);
  void add_signatures(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signatures();

  private:
  const std::string& _internal_signatures(int index) const;
  std::string* _internal_add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_signatures();

  public:
  // bytes body_bytes = 1 [json_name = "bodyBytes"];
  void clear_body_bytes() ;
  const std::string& body_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_body_bytes();
  PROTOBUF_NODISCARD std::string* release_body_bytes();
  void set_allocated_body_bytes(std::string* ptr);

  private:
  const std::string& _internal_body_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_bytes(
      const std::string& value);
  std::string* _internal_mutable_body_bytes();

  public:
  // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
  void clear_auth_info_bytes() ;
  const std::string& auth_info_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_auth_info_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_auth_info_bytes();
  PROTOBUF_NODISCARD std::string* release_auth_info_bytes();
  void set_allocated_auth_info_bytes(std::string* ptr);

  private:
  const std::string& _internal_auth_info_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_info_bytes(
      const std::string& value);
  std::string* _internal_mutable_auth_info_bytes();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxRaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signatures_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_info_bytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class SignDoc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.SignDoc) */ {
 public:
  inline SignDoc() : SignDoc(nullptr) {}
  ~SignDoc() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignDoc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignDoc(const SignDoc& from);
  SignDoc(SignDoc&& from) noexcept
    : SignDoc() {
    *this = ::std::move(from);
  }

  inline SignDoc& operator=(const SignDoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignDoc& operator=(SignDoc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignDoc& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignDoc* internal_default_instance() {
    return reinterpret_cast<const SignDoc*>(
               &_SignDoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SignDoc& a, SignDoc& b) {
    a.Swap(&b);
  }
  inline void Swap(SignDoc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignDoc* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignDoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignDoc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignDoc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignDoc& from) {
    SignDoc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignDoc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.SignDoc";
  }
  protected:
  explicit SignDoc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyBytesFieldNumber = 1,
    kAuthInfoBytesFieldNumber = 2,
    kChainIdFieldNumber = 3,
    kAccountNumberFieldNumber = 4,
  };
  // bytes body_bytes = 1 [json_name = "bodyBytes"];
  void clear_body_bytes() ;
  const std::string& body_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_body_bytes();
  PROTOBUF_NODISCARD std::string* release_body_bytes();
  void set_allocated_body_bytes(std::string* ptr);

  private:
  const std::string& _internal_body_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_bytes(
      const std::string& value);
  std::string* _internal_mutable_body_bytes();

  public:
  // bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
  void clear_auth_info_bytes() ;
  const std::string& auth_info_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_auth_info_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_auth_info_bytes();
  PROTOBUF_NODISCARD std::string* release_auth_info_bytes();
  void set_allocated_auth_info_bytes(std::string* ptr);

  private:
  const std::string& _internal_auth_info_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_info_bytes(
      const std::string& value);
  std::string* _internal_mutable_auth_info_bytes();

  public:
  // string chain_id = 3 [json_name = "chainId"];
  void clear_chain_id() ;
  const std::string& chain_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* ptr);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // uint64 account_number = 4 [json_name = "accountNumber"];
  void clear_account_number() ;
  ::uint64_t account_number() const;
  void set_account_number(::uint64_t value);

  private:
  ::uint64_t _internal_account_number() const;
  void _internal_set_account_number(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.SignDoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_info_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
    ::uint64_t account_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class SignDocDirectAux final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.SignDocDirectAux) */ {
 public:
  inline SignDocDirectAux() : SignDocDirectAux(nullptr) {}
  ~SignDocDirectAux() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignDocDirectAux(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignDocDirectAux(const SignDocDirectAux& from);
  SignDocDirectAux(SignDocDirectAux&& from) noexcept
    : SignDocDirectAux() {
    *this = ::std::move(from);
  }

  inline SignDocDirectAux& operator=(const SignDocDirectAux& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignDocDirectAux& operator=(SignDocDirectAux&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignDocDirectAux& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignDocDirectAux* internal_default_instance() {
    return reinterpret_cast<const SignDocDirectAux*>(
               &_SignDocDirectAux_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SignDocDirectAux& a, SignDocDirectAux& b) {
    a.Swap(&b);
  }
  inline void Swap(SignDocDirectAux* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignDocDirectAux* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignDocDirectAux* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignDocDirectAux>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignDocDirectAux& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignDocDirectAux& from) {
    SignDocDirectAux::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignDocDirectAux* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.SignDocDirectAux";
  }
  protected:
  explicit SignDocDirectAux(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyBytesFieldNumber = 1,
    kChainIdFieldNumber = 3,
    kPublicKeyFieldNumber = 2,
    kTipFieldNumber = 6,
    kAccountNumberFieldNumber = 4,
    kSequenceFieldNumber = 5,
  };
  // bytes body_bytes = 1 [json_name = "bodyBytes"];
  void clear_body_bytes() ;
  const std::string& body_bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_body_bytes();
  PROTOBUF_NODISCARD std::string* release_body_bytes();
  void set_allocated_body_bytes(std::string* ptr);

  private:
  const std::string& _internal_body_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body_bytes(
      const std::string& value);
  std::string* _internal_mutable_body_bytes();

  public:
  // string chain_id = 3 [json_name = "chainId"];
  void clear_chain_id() ;
  const std::string& chain_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* ptr);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // .google.protobuf.Any public_key = 2 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& public_key() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_public_key();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_public_key();
  void set_allocated_public_key(::PROTOBUF_NAMESPACE_ID::Any* public_key);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_public_key() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::PROTOBUF_NAMESPACE_ID::Any* public_key);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_public_key();
  // .cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip"];
  bool has_tip() const;
  void clear_tip() ;
  const ::cosmos::tx::v1beta1::Tip& tip() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Tip* release_tip();
  ::cosmos::tx::v1beta1::Tip* mutable_tip();
  void set_allocated_tip(::cosmos::tx::v1beta1::Tip* tip);
  private:
  const ::cosmos::tx::v1beta1::Tip& _internal_tip() const;
  ::cosmos::tx::v1beta1::Tip* _internal_mutable_tip();
  public:
  void unsafe_arena_set_allocated_tip(
      ::cosmos::tx::v1beta1::Tip* tip);
  ::cosmos::tx::v1beta1::Tip* unsafe_arena_release_tip();
  // uint64 account_number = 4 [json_name = "accountNumber"];
  void clear_account_number() ;
  ::uint64_t account_number() const;
  void set_account_number(::uint64_t value);

  private:
  ::uint64_t _internal_account_number() const;
  void _internal_set_account_number(::uint64_t value);

  public:
  // uint64 sequence = 5 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.SignDocDirectAux)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
    ::PROTOBUF_NAMESPACE_ID::Any* public_key_;
    ::cosmos::tx::v1beta1::Tip* tip_;
    ::uint64_t account_number_;
    ::uint64_t sequence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class TxBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.TxBody) */ {
 public:
  inline TxBody() : TxBody(nullptr) {}
  ~TxBody() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxBody(const TxBody& from);
  TxBody(TxBody&& from) noexcept
    : TxBody() {
    *this = ::std::move(from);
  }

  inline TxBody& operator=(const TxBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxBody& operator=(TxBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxBody* internal_default_instance() {
    return reinterpret_cast<const TxBody*>(
               &_TxBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TxBody& a, TxBody& b) {
    a.Swap(&b);
  }
  inline void Swap(TxBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxBody& from) {
    TxBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.TxBody";
  }
  protected:
  explicit TxBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kExtensionOptionsFieldNumber = 1023,
    kNonCriticalExtensionOptionsFieldNumber = 2047,
    kMemoFieldNumber = 2,
    kTimeoutHeightFieldNumber = 3,
  };
  // repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_messages();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_messages(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_messages();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& messages(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      messages() const;
  // repeated .google.protobuf.Any extension_options = 1023 [json_name = "extensionOptions"];
  int extension_options_size() const;
  private:
  int _internal_extension_options_size() const;

  public:
  void clear_extension_options() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_extension_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_extension_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_extension_options(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_extension_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_extension_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_extension_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& extension_options(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_extension_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      extension_options() const;
  // repeated .google.protobuf.Any non_critical_extension_options = 2047 [json_name = "nonCriticalExtensionOptions"];
  int non_critical_extension_options_size() const;
  private:
  int _internal_non_critical_extension_options_size() const;

  public:
  void clear_non_critical_extension_options() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_non_critical_extension_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_non_critical_extension_options();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_non_critical_extension_options(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_non_critical_extension_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_non_critical_extension_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_non_critical_extension_options();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& non_critical_extension_options(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_non_critical_extension_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      non_critical_extension_options() const;
  // string memo = 2 [json_name = "memo"];
  void clear_memo() ;
  const std::string& memo() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_memo(Arg_&& arg, Args_... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* ptr);

  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(
      const std::string& value);
  std::string* _internal_mutable_memo();

  public:
  // uint64 timeout_height = 3 [json_name = "timeoutHeight"];
  void clear_timeout_height() ;
  ::uint64_t timeout_height() const;
  void set_timeout_height(::uint64_t value);

  private:
  ::uint64_t _internal_timeout_height() const;
  void _internal_set_timeout_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.TxBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > extension_options_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > non_critical_extension_options_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    ::uint64_t timeout_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class AuthInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.AuthInfo) */ {
 public:
  inline AuthInfo() : AuthInfo(nullptr) {}
  ~AuthInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AuthInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthInfo(const AuthInfo& from);
  AuthInfo(AuthInfo&& from) noexcept
    : AuthInfo() {
    *this = ::std::move(from);
  }

  inline AuthInfo& operator=(const AuthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthInfo& operator=(AuthInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthInfo* internal_default_instance() {
    return reinterpret_cast<const AuthInfo*>(
               &_AuthInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthInfo& a, AuthInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthInfo& from) {
    AuthInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.AuthInfo";
  }
  protected:
  explicit AuthInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignerInfosFieldNumber = 1,
    kFeeFieldNumber = 2,
    kTipFieldNumber = 3,
  };
  // repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];
  int signer_infos_size() const;
  private:
  int _internal_signer_infos_size() const;

  public:
  void clear_signer_infos() ;
  ::cosmos::tx::v1beta1::SignerInfo* mutable_signer_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::SignerInfo >*
      mutable_signer_infos();
  private:
  const ::cosmos::tx::v1beta1::SignerInfo& _internal_signer_infos(int index) const;
  ::cosmos::tx::v1beta1::SignerInfo* _internal_add_signer_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>& _internal_signer_infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>* _internal_mutable_signer_infos();
  public:
  const ::cosmos::tx::v1beta1::SignerInfo& signer_infos(int index) const;
  ::cosmos::tx::v1beta1::SignerInfo* add_signer_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::SignerInfo >&
      signer_infos() const;
  // .cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];
  bool has_fee() const;
  void clear_fee() ;
  const ::cosmos::tx::v1beta1::Fee& fee() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Fee* release_fee();
  ::cosmos::tx::v1beta1::Fee* mutable_fee();
  void set_allocated_fee(::cosmos::tx::v1beta1::Fee* fee);
  private:
  const ::cosmos::tx::v1beta1::Fee& _internal_fee() const;
  ::cosmos::tx::v1beta1::Fee* _internal_mutable_fee();
  public:
  void unsafe_arena_set_allocated_fee(
      ::cosmos::tx::v1beta1::Fee* fee);
  ::cosmos::tx::v1beta1::Fee* unsafe_arena_release_fee();
  // .cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];
  bool has_tip() const;
  void clear_tip() ;
  const ::cosmos::tx::v1beta1::Tip& tip() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::Tip* release_tip();
  ::cosmos::tx::v1beta1::Tip* mutable_tip();
  void set_allocated_tip(::cosmos::tx::v1beta1::Tip* tip);
  private:
  const ::cosmos::tx::v1beta1::Tip& _internal_tip() const;
  ::cosmos::tx::v1beta1::Tip* _internal_mutable_tip();
  public:
  void unsafe_arena_set_allocated_tip(
      ::cosmos::tx::v1beta1::Tip* tip);
  ::cosmos::tx::v1beta1::Tip* unsafe_arena_release_tip();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.AuthInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::SignerInfo > signer_infos_;
    ::cosmos::tx::v1beta1::Fee* fee_;
    ::cosmos::tx::v1beta1::Tip* tip_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class SignerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.SignerInfo) */ {
 public:
  inline SignerInfo() : SignerInfo(nullptr) {}
  ~SignerInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignerInfo(const SignerInfo& from);
  SignerInfo(SignerInfo&& from) noexcept
    : SignerInfo() {
    *this = ::std::move(from);
  }

  inline SignerInfo& operator=(const SignerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignerInfo& operator=(SignerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignerInfo* internal_default_instance() {
    return reinterpret_cast<const SignerInfo*>(
               &_SignerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SignerInfo& a, SignerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SignerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignerInfo& from) {
    SignerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.SignerInfo";
  }
  protected:
  explicit SignerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kModeInfoFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& public_key() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_public_key();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_public_key();
  void set_allocated_public_key(::PROTOBUF_NAMESPACE_ID::Any* public_key);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_public_key() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::PROTOBUF_NAMESPACE_ID::Any* public_key);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_public_key();
  // .cosmos.tx.v1beta1.ModeInfo mode_info = 2 [json_name = "modeInfo"];
  bool has_mode_info() const;
  void clear_mode_info() ;
  const ::cosmos::tx::v1beta1::ModeInfo& mode_info() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::ModeInfo* release_mode_info();
  ::cosmos::tx::v1beta1::ModeInfo* mutable_mode_info();
  void set_allocated_mode_info(::cosmos::tx::v1beta1::ModeInfo* mode_info);
  private:
  const ::cosmos::tx::v1beta1::ModeInfo& _internal_mode_info() const;
  ::cosmos::tx::v1beta1::ModeInfo* _internal_mutable_mode_info();
  public:
  void unsafe_arena_set_allocated_mode_info(
      ::cosmos::tx::v1beta1::ModeInfo* mode_info);
  ::cosmos::tx::v1beta1::ModeInfo* unsafe_arena_release_mode_info();
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.SignerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* public_key_;
    ::cosmos::tx::v1beta1::ModeInfo* mode_info_;
    ::uint64_t sequence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class ModeInfo_Single final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.ModeInfo.Single) */ {
 public:
  inline ModeInfo_Single() : ModeInfo_Single(nullptr) {}
  ~ModeInfo_Single() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModeInfo_Single(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeInfo_Single(const ModeInfo_Single& from);
  ModeInfo_Single(ModeInfo_Single&& from) noexcept
    : ModeInfo_Single() {
    *this = ::std::move(from);
  }

  inline ModeInfo_Single& operator=(const ModeInfo_Single& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeInfo_Single& operator=(ModeInfo_Single&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeInfo_Single& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeInfo_Single* internal_default_instance() {
    return reinterpret_cast<const ModeInfo_Single*>(
               &_ModeInfo_Single_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ModeInfo_Single& a, ModeInfo_Single& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeInfo_Single* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeInfo_Single* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeInfo_Single* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeInfo_Single>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeInfo_Single& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModeInfo_Single& from) {
    ModeInfo_Single::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeInfo_Single* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.ModeInfo.Single";
  }
  protected:
  explicit ModeInfo_Single(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
  void clear_mode() ;
  ::cosmos::tx::signing::v1beta1::SignMode mode() const;
  void set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  private:
  ::cosmos::tx::signing::v1beta1::SignMode _internal_mode() const;
  void _internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo.Single)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class ModeInfo_Multi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.ModeInfo.Multi) */ {
 public:
  inline ModeInfo_Multi() : ModeInfo_Multi(nullptr) {}
  ~ModeInfo_Multi() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModeInfo_Multi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeInfo_Multi(const ModeInfo_Multi& from);
  ModeInfo_Multi(ModeInfo_Multi&& from) noexcept
    : ModeInfo_Multi() {
    *this = ::std::move(from);
  }

  inline ModeInfo_Multi& operator=(const ModeInfo_Multi& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeInfo_Multi& operator=(ModeInfo_Multi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeInfo_Multi& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeInfo_Multi* internal_default_instance() {
    return reinterpret_cast<const ModeInfo_Multi*>(
               &_ModeInfo_Multi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ModeInfo_Multi& a, ModeInfo_Multi& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeInfo_Multi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeInfo_Multi* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeInfo_Multi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeInfo_Multi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeInfo_Multi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModeInfo_Multi& from) {
    ModeInfo_Multi::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeInfo_Multi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.ModeInfo.Multi";
  }
  protected:
  explicit ModeInfo_Multi(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeInfosFieldNumber = 2,
    kBitarrayFieldNumber = 1,
  };
  // repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];
  int mode_infos_size() const;
  private:
  int _internal_mode_infos_size() const;

  public:
  void clear_mode_infos() ;
  ::cosmos::tx::v1beta1::ModeInfo* mutable_mode_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::ModeInfo >*
      mutable_mode_infos();
  private:
  const ::cosmos::tx::v1beta1::ModeInfo& _internal_mode_infos(int index) const;
  ::cosmos::tx::v1beta1::ModeInfo* _internal_add_mode_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>& _internal_mode_infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>* _internal_mutable_mode_infos();
  public:
  const ::cosmos::tx::v1beta1::ModeInfo& mode_infos(int index) const;
  ::cosmos::tx::v1beta1::ModeInfo* add_mode_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::ModeInfo >&
      mode_infos() const;
  // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
  bool has_bitarray() const;
  void clear_bitarray() ;
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& bitarray() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::multisig::v1beta1::CompactBitArray* release_bitarray();
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* mutable_bitarray();
  void set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray);
  private:
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& _internal_bitarray() const;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* _internal_mutable_bitarray();
  public:
  void unsafe_arena_set_allocated_bitarray(
      ::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray);
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* unsafe_arena_release_bitarray();
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo.Multi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::ModeInfo > mode_infos_;
    ::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class ModeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.ModeInfo) */ {
 public:
  inline ModeInfo() : ModeInfo(nullptr) {}
  ~ModeInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ModeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModeInfo(const ModeInfo& from);
  ModeInfo(ModeInfo&& from) noexcept
    : ModeInfo() {
    *this = ::std::move(from);
  }

  inline ModeInfo& operator=(const ModeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeInfo& operator=(ModeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeInfo& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kSingle = 1,
    kMulti = 2,
    SUM_NOT_SET = 0,
  };

  static inline const ModeInfo* internal_default_instance() {
    return reinterpret_cast<const ModeInfo*>(
               &_ModeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ModeInfo& a, ModeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ModeInfo& from) {
    ModeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.ModeInfo";
  }
  protected:
  explicit ModeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModeInfo_Single Single;
  typedef ModeInfo_Multi Multi;

  // accessors -------------------------------------------------------

  enum : int {
    kSingleFieldNumber = 1,
    kMultiFieldNumber = 2,
  };
  // .cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];
  bool has_single() const;
  private:
  bool _internal_has_single() const;

  public:
  void clear_single() ;
  const ::cosmos::tx::v1beta1::ModeInfo_Single& single() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::ModeInfo_Single* release_single();
  ::cosmos::tx::v1beta1::ModeInfo_Single* mutable_single();
  void set_allocated_single(::cosmos::tx::v1beta1::ModeInfo_Single* single);
  private:
  const ::cosmos::tx::v1beta1::ModeInfo_Single& _internal_single() const;
  ::cosmos::tx::v1beta1::ModeInfo_Single* _internal_mutable_single();
  public:
  void unsafe_arena_set_allocated_single(
      ::cosmos::tx::v1beta1::ModeInfo_Single* single);
  ::cosmos::tx::v1beta1::ModeInfo_Single* unsafe_arena_release_single();
  // .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];
  bool has_multi() const;
  private:
  bool _internal_has_multi() const;

  public:
  void clear_multi() ;
  const ::cosmos::tx::v1beta1::ModeInfo_Multi& multi() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::ModeInfo_Multi* release_multi();
  ::cosmos::tx::v1beta1::ModeInfo_Multi* mutable_multi();
  void set_allocated_multi(::cosmos::tx::v1beta1::ModeInfo_Multi* multi);
  private:
  const ::cosmos::tx::v1beta1::ModeInfo_Multi& _internal_multi() const;
  ::cosmos::tx::v1beta1::ModeInfo_Multi* _internal_mutable_multi();
  public:
  void unsafe_arena_set_allocated_multi(
      ::cosmos::tx::v1beta1::ModeInfo_Multi* multi);
  ::cosmos::tx::v1beta1::ModeInfo_Multi* unsafe_arena_release_multi();
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.ModeInfo)
 private:
  class _Internal;
  void set_has_single();
  void set_has_multi();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::cosmos::tx::v1beta1::ModeInfo_Single* single_;
      ::cosmos::tx::v1beta1::ModeInfo_Multi* multi_;
    } sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class Fee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.Fee) */ {
 public:
  inline Fee() : Fee(nullptr) {}
  ~Fee() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Fee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fee(const Fee& from);
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }
  inline void Swap(Fee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Fee& from) {
    Fee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.Fee";
  }
  protected:
  explicit Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kPayerFieldNumber = 3,
    kGranterFieldNumber = 4,
    kGasLimitFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_amount();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      amount() const;
  // string payer = 3 [json_name = "payer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_payer() ;
  const std::string& payer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payer(Arg_&& arg, Args_... args);
  std::string* mutable_payer();
  PROTOBUF_NODISCARD std::string* release_payer();
  void set_allocated_payer(std::string* ptr);

  private:
  const std::string& _internal_payer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payer(
      const std::string& value);
  std::string* _internal_mutable_payer();

  public:
  // string granter = 4 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_granter() ;
  const std::string& granter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_granter(Arg_&& arg, Args_... args);
  std::string* mutable_granter();
  PROTOBUF_NODISCARD std::string* release_granter();
  void set_allocated_granter(std::string* ptr);

  private:
  const std::string& _internal_granter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_granter(
      const std::string& value);
  std::string* _internal_mutable_granter();

  public:
  // uint64 gas_limit = 2 [json_name = "gasLimit"];
  void clear_gas_limit() ;
  ::uint64_t gas_limit() const;
  void set_gas_limit(::uint64_t value);

  private:
  ::uint64_t _internal_gas_limit() const;
  void _internal_set_gas_limit(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.Fee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr granter_;
    ::uint64_t gas_limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class Tip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.Tip) */ {
 public:
  inline Tip() : Tip(nullptr) {}
  ~Tip() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Tip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tip(const Tip& from);
  Tip(Tip&& from) noexcept
    : Tip() {
    *this = ::std::move(from);
  }

  inline Tip& operator=(const Tip& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tip& operator=(Tip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tip& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tip* internal_default_instance() {
    return reinterpret_cast<const Tip*>(
               &_Tip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Tip& a, Tip& b) {
    a.Swap(&b);
  }
  inline void Swap(Tip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tip* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tip& from) {
    Tip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.Tip";
  }
  protected:
  explicit Tip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kTipperFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_amount();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      amount() const;
  // string tipper = 2 [json_name = "tipper", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_tipper() ;
  const std::string& tipper() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tipper(Arg_&& arg, Args_... args);
  std::string* mutable_tipper();
  PROTOBUF_NODISCARD std::string* release_tipper();
  void set_allocated_tipper(std::string* ptr);

  private:
  const std::string& _internal_tipper() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tipper(
      const std::string& value);
  std::string* _internal_mutable_tipper();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.Tip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tipper_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class AuxSignerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.v1beta1.AuxSignerData) */ {
 public:
  inline AuxSignerData() : AuxSignerData(nullptr) {}
  ~AuxSignerData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AuxSignerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuxSignerData(const AuxSignerData& from);
  AuxSignerData(AuxSignerData&& from) noexcept
    : AuxSignerData() {
    *this = ::std::move(from);
  }

  inline AuxSignerData& operator=(const AuxSignerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuxSignerData& operator=(AuxSignerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuxSignerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuxSignerData* internal_default_instance() {
    return reinterpret_cast<const AuxSignerData*>(
               &_AuxSignerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AuxSignerData& a, AuxSignerData& b) {
    a.Swap(&b);
  }
  inline void Swap(AuxSignerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuxSignerData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuxSignerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuxSignerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuxSignerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuxSignerData& from) {
    AuxSignerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuxSignerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.v1beta1.AuxSignerData";
  }
  protected:
  explicit AuxSignerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kSigFieldNumber = 4,
    kSignDocFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // bytes sig = 4 [json_name = "sig"];
  void clear_sig() ;
  const std::string& sig() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sig(Arg_&& arg, Args_... args);
  std::string* mutable_sig();
  PROTOBUF_NODISCARD std::string* release_sig();
  void set_allocated_sig(std::string* ptr);

  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(
      const std::string& value);
  std::string* _internal_mutable_sig();

  public:
  // .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];
  bool has_sign_doc() const;
  void clear_sign_doc() ;
  const ::cosmos::tx::v1beta1::SignDocDirectAux& sign_doc() const;
  PROTOBUF_NODISCARD ::cosmos::tx::v1beta1::SignDocDirectAux* release_sign_doc();
  ::cosmos::tx::v1beta1::SignDocDirectAux* mutable_sign_doc();
  void set_allocated_sign_doc(::cosmos::tx::v1beta1::SignDocDirectAux* sign_doc);
  private:
  const ::cosmos::tx::v1beta1::SignDocDirectAux& _internal_sign_doc() const;
  ::cosmos::tx::v1beta1::SignDocDirectAux* _internal_mutable_sign_doc();
  public:
  void unsafe_arena_set_allocated_sign_doc(
      ::cosmos::tx::v1beta1::SignDocDirectAux* sign_doc);
  ::cosmos::tx::v1beta1::SignDocDirectAux* unsafe_arena_release_sign_doc();
  // .cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];
  void clear_mode() ;
  ::cosmos::tx::signing::v1beta1::SignMode mode() const;
  void set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  private:
  ::cosmos::tx::signing::v1beta1::SignMode _internal_mode() const;
  void _internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.AuxSignerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
    ::cosmos::tx::v1beta1::SignDocDirectAux* sign_doc_;
    int mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fv1beta1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Tx

// .cosmos.tx.v1beta1.TxBody body = 1 [json_name = "body"];
inline bool Tx::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.body_ != nullptr);
  return value;
}
inline void Tx::clear_body() {
  if (_impl_.body_ != nullptr) _impl_.body_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::tx::v1beta1::TxBody& Tx::_internal_body() const {
  const ::cosmos::tx::v1beta1::TxBody* p = _impl_.body_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::TxBody&>(
      ::cosmos::tx::v1beta1::_TxBody_default_instance_);
}
inline const ::cosmos::tx::v1beta1::TxBody& Tx::body() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tx.body)
  return _internal_body();
}
inline void Tx::unsafe_arena_set_allocated_body(
    ::cosmos::tx::v1beta1::TxBody* body) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.body_);
  }
  _impl_.body_ = body;
  if (body) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.Tx.body)
}
inline ::cosmos::tx::v1beta1::TxBody* Tx::release_body() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::TxBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::TxBody* Tx::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Tx.body)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::TxBody* temp = _impl_.body_;
  _impl_.body_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::TxBody* Tx::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.body_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::TxBody>(GetArenaForAllocation());
    _impl_.body_ = p;
  }
  return _impl_.body_;
}
inline ::cosmos::tx::v1beta1::TxBody* Tx::mutable_body() {
  ::cosmos::tx::v1beta1::TxBody* _msg = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tx.body)
  return _msg;
}
inline void Tx::set_allocated_body(::cosmos::tx::v1beta1::TxBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_ = body;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Tx.body)
}

// .cosmos.tx.v1beta1.AuthInfo auth_info = 2 [json_name = "authInfo"];
inline bool Tx::has_auth_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.auth_info_ != nullptr);
  return value;
}
inline void Tx::clear_auth_info() {
  if (_impl_.auth_info_ != nullptr) _impl_.auth_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::v1beta1::AuthInfo& Tx::_internal_auth_info() const {
  const ::cosmos::tx::v1beta1::AuthInfo* p = _impl_.auth_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::AuthInfo&>(
      ::cosmos::tx::v1beta1::_AuthInfo_default_instance_);
}
inline const ::cosmos::tx::v1beta1::AuthInfo& Tx::auth_info() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tx.auth_info)
  return _internal_auth_info();
}
inline void Tx::unsafe_arena_set_allocated_auth_info(
    ::cosmos::tx::v1beta1::AuthInfo* auth_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.auth_info_);
  }
  _impl_.auth_info_ = auth_info;
  if (auth_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.Tx.auth_info)
}
inline ::cosmos::tx::v1beta1::AuthInfo* Tx::release_auth_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::AuthInfo* temp = _impl_.auth_info_;
  _impl_.auth_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::AuthInfo* Tx::unsafe_arena_release_auth_info() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Tx.auth_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::AuthInfo* temp = _impl_.auth_info_;
  _impl_.auth_info_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::AuthInfo* Tx::_internal_mutable_auth_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.auth_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::AuthInfo>(GetArenaForAllocation());
    _impl_.auth_info_ = p;
  }
  return _impl_.auth_info_;
}
inline ::cosmos::tx::v1beta1::AuthInfo* Tx::mutable_auth_info() {
  ::cosmos::tx::v1beta1::AuthInfo* _msg = _internal_mutable_auth_info();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tx.auth_info)
  return _msg;
}
inline void Tx::set_allocated_auth_info(::cosmos::tx::v1beta1::AuthInfo* auth_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.auth_info_;
  }
  if (auth_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(auth_info);
    if (message_arena != submessage_arena) {
      auth_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.auth_info_ = auth_info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Tx.auth_info)
}

// repeated bytes signatures = 3 [json_name = "signatures"];
inline int Tx::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int Tx::signatures_size() const {
  return _internal_signatures_size();
}
inline void Tx::clear_signatures() {
  _internal_mutable_signatures()->Clear();
}
inline std::string* Tx::add_signatures() {
  std::string* _s = _internal_add_signatures();
  // @@protoc_insertion_point(field_add_mutable:cosmos.tx.v1beta1.Tx.signatures)
  return _s;
}
inline const std::string& Tx::signatures(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tx.signatures)
  return _internal_signatures(index);
}
inline std::string* Tx::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tx.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline void Tx::set_signatures(int index, const std::string& value) {
  _internal_mutable_signatures()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::set_signatures(int index, std::string&& value) {
  _internal_mutable_signatures()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::set_signatures(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_signatures()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::set_signatures(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_signatures()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::set_signatures(int index, absl::string_view value) {
  _internal_mutable_signatures()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::add_signatures(const std::string& value) {
  _internal_mutable_signatures()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::add_signatures(std::string&& value) {
  _internal_mutable_signatures()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::add_signatures(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_signatures()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::add_signatures(const void* value, std::size_t size) {
  _internal_mutable_signatures()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.tx.v1beta1.Tx.signatures)
}
inline void Tx::add_signatures(absl::string_view value) {
  _internal_mutable_signatures()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.tx.v1beta1.Tx.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Tx::signatures() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.Tx.signatures)
  return _internal_signatures();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Tx::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.Tx.signatures)
  return _internal_mutable_signatures();
}
inline const std::string& Tx::_internal_signatures(int index) const {
  return _internal_signatures().Get(index);
}
inline std::string* Tx::_internal_add_signatures() {
  return _internal_mutable_signatures()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Tx::_internal_signatures() const {
  return _impl_.signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Tx::_internal_mutable_signatures() {
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// TxRaw

// bytes body_bytes = 1 [json_name = "bodyBytes"];
inline void TxRaw::clear_body_bytes() {
  _impl_.body_bytes_.ClearToEmpty();
}
inline const std::string& TxRaw::body_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxRaw.body_bytes)
  return _internal_body_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxRaw::set_body_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.body_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxRaw.body_bytes)
}
inline std::string* TxRaw::mutable_body_bytes() {
  std::string* _s = _internal_mutable_body_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxRaw.body_bytes)
  return _s;
}
inline const std::string& TxRaw::_internal_body_bytes() const {
  return _impl_.body_bytes_.Get();
}
inline void TxRaw::_internal_set_body_bytes(const std::string& value) {
  ;


  _impl_.body_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TxRaw::_internal_mutable_body_bytes() {
  ;
  return _impl_.body_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* TxRaw::release_body_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxRaw.body_bytes)
  return _impl_.body_bytes_.Release();
}
inline void TxRaw::set_allocated_body_bytes(std::string* value) {
  _impl_.body_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_bytes_.IsDefault()) {
          _impl_.body_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxRaw.body_bytes)
}

// bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
inline void TxRaw::clear_auth_info_bytes() {
  _impl_.auth_info_bytes_.ClearToEmpty();
}
inline const std::string& TxRaw::auth_info_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
  return _internal_auth_info_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxRaw::set_auth_info_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.auth_info_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
}
inline std::string* TxRaw::mutable_auth_info_bytes() {
  std::string* _s = _internal_mutable_auth_info_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
  return _s;
}
inline const std::string& TxRaw::_internal_auth_info_bytes() const {
  return _impl_.auth_info_bytes_.Get();
}
inline void TxRaw::_internal_set_auth_info_bytes(const std::string& value) {
  ;


  _impl_.auth_info_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* TxRaw::_internal_mutable_auth_info_bytes() {
  ;
  return _impl_.auth_info_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* TxRaw::release_auth_info_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
  return _impl_.auth_info_bytes_.Release();
}
inline void TxRaw::set_allocated_auth_info_bytes(std::string* value) {
  _impl_.auth_info_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.auth_info_bytes_.IsDefault()) {
          _impl_.auth_info_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxRaw.auth_info_bytes)
}

// repeated bytes signatures = 3 [json_name = "signatures"];
inline int TxRaw::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int TxRaw::signatures_size() const {
  return _internal_signatures_size();
}
inline void TxRaw::clear_signatures() {
  _internal_mutable_signatures()->Clear();
}
inline std::string* TxRaw::add_signatures() {
  std::string* _s = _internal_add_signatures();
  // @@protoc_insertion_point(field_add_mutable:cosmos.tx.v1beta1.TxRaw.signatures)
  return _s;
}
inline const std::string& TxRaw::signatures(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxRaw.signatures)
  return _internal_signatures(index);
}
inline std::string* TxRaw::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxRaw.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline void TxRaw::set_signatures(int index, const std::string& value) {
  _internal_mutable_signatures()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::set_signatures(int index, std::string&& value) {
  _internal_mutable_signatures()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::set_signatures(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_signatures()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::set_signatures(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_signatures()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::set_signatures(int index, absl::string_view value) {
  _internal_mutable_signatures()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::add_signatures(const std::string& value) {
  _internal_mutable_signatures()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::add_signatures(std::string&& value) {
  _internal_mutable_signatures()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::add_signatures(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_signatures()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::add_signatures(const void* value, std::size_t size) {
  _internal_mutable_signatures()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline void TxRaw::add_signatures(absl::string_view value) {
  _internal_mutable_signatures()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.tx.v1beta1.TxRaw.signatures)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxRaw::signatures() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.TxRaw.signatures)
  return _internal_signatures();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* TxRaw::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.TxRaw.signatures)
  return _internal_mutable_signatures();
}
inline const std::string& TxRaw::_internal_signatures(int index) const {
  return _internal_signatures().Get(index);
}
inline std::string* TxRaw::_internal_add_signatures() {
  return _internal_mutable_signatures()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TxRaw::_internal_signatures() const {
  return _impl_.signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TxRaw::_internal_mutable_signatures() {
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// SignDoc

// bytes body_bytes = 1 [json_name = "bodyBytes"];
inline void SignDoc::clear_body_bytes() {
  _impl_.body_bytes_.ClearToEmpty();
}
inline const std::string& SignDoc::body_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDoc.body_bytes)
  return _internal_body_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDoc::set_body_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.body_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDoc.body_bytes)
}
inline std::string* SignDoc::mutable_body_bytes() {
  std::string* _s = _internal_mutable_body_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDoc.body_bytes)
  return _s;
}
inline const std::string& SignDoc::_internal_body_bytes() const {
  return _impl_.body_bytes_.Get();
}
inline void SignDoc::_internal_set_body_bytes(const std::string& value) {
  ;


  _impl_.body_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* SignDoc::_internal_mutable_body_bytes() {
  ;
  return _impl_.body_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* SignDoc::release_body_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDoc.body_bytes)
  return _impl_.body_bytes_.Release();
}
inline void SignDoc::set_allocated_body_bytes(std::string* value) {
  _impl_.body_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_bytes_.IsDefault()) {
          _impl_.body_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDoc.body_bytes)
}

// bytes auth_info_bytes = 2 [json_name = "authInfoBytes"];
inline void SignDoc::clear_auth_info_bytes() {
  _impl_.auth_info_bytes_.ClearToEmpty();
}
inline const std::string& SignDoc::auth_info_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
  return _internal_auth_info_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDoc::set_auth_info_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.auth_info_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
}
inline std::string* SignDoc::mutable_auth_info_bytes() {
  std::string* _s = _internal_mutable_auth_info_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
  return _s;
}
inline const std::string& SignDoc::_internal_auth_info_bytes() const {
  return _impl_.auth_info_bytes_.Get();
}
inline void SignDoc::_internal_set_auth_info_bytes(const std::string& value) {
  ;


  _impl_.auth_info_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* SignDoc::_internal_mutable_auth_info_bytes() {
  ;
  return _impl_.auth_info_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* SignDoc::release_auth_info_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
  return _impl_.auth_info_bytes_.Release();
}
inline void SignDoc::set_allocated_auth_info_bytes(std::string* value) {
  _impl_.auth_info_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.auth_info_bytes_.IsDefault()) {
          _impl_.auth_info_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDoc.auth_info_bytes)
}

// string chain_id = 3 [json_name = "chainId"];
inline void SignDoc::clear_chain_id() {
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& SignDoc::chain_id() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDoc.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDoc::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDoc.chain_id)
}
inline std::string* SignDoc::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDoc.chain_id)
  return _s;
}
inline const std::string& SignDoc::_internal_chain_id() const {
  return _impl_.chain_id_.Get();
}
inline void SignDoc::_internal_set_chain_id(const std::string& value) {
  ;


  _impl_.chain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignDoc::_internal_mutable_chain_id() {
  ;
  return _impl_.chain_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SignDoc::release_chain_id() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDoc.chain_id)
  return _impl_.chain_id_.Release();
}
inline void SignDoc::set_allocated_chain_id(std::string* value) {
  _impl_.chain_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chain_id_.IsDefault()) {
          _impl_.chain_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDoc.chain_id)
}

// uint64 account_number = 4 [json_name = "accountNumber"];
inline void SignDoc::clear_account_number() {
  _impl_.account_number_ = ::uint64_t{0u};
}
inline ::uint64_t SignDoc::account_number() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDoc.account_number)
  return _internal_account_number();
}
inline void SignDoc::set_account_number(::uint64_t value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDoc.account_number)
}
inline ::uint64_t SignDoc::_internal_account_number() const {
  return _impl_.account_number_;
}
inline void SignDoc::_internal_set_account_number(::uint64_t value) {
  ;
  _impl_.account_number_ = value;
}

// -------------------------------------------------------------------

// SignDocDirectAux

// bytes body_bytes = 1 [json_name = "bodyBytes"];
inline void SignDocDirectAux::clear_body_bytes() {
  _impl_.body_bytes_.ClearToEmpty();
}
inline const std::string& SignDocDirectAux::body_bytes() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
  return _internal_body_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDocDirectAux::set_body_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.body_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
}
inline std::string* SignDocDirectAux::mutable_body_bytes() {
  std::string* _s = _internal_mutable_body_bytes();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
  return _s;
}
inline const std::string& SignDocDirectAux::_internal_body_bytes() const {
  return _impl_.body_bytes_.Get();
}
inline void SignDocDirectAux::_internal_set_body_bytes(const std::string& value) {
  ;


  _impl_.body_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* SignDocDirectAux::_internal_mutable_body_bytes() {
  ;
  return _impl_.body_bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* SignDocDirectAux::release_body_bytes() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
  return _impl_.body_bytes_.Release();
}
inline void SignDocDirectAux::set_allocated_body_bytes(std::string* value) {
  _impl_.body_bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_bytes_.IsDefault()) {
          _impl_.body_bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.body_bytes)
}

// .google.protobuf.Any public_key = 2 [json_name = "publicKey"];
inline bool SignDocDirectAux::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SignDocDirectAux::_internal_public_key() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SignDocDirectAux::public_key() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
  return _internal_public_key();
}
inline void SignDocDirectAux::unsafe_arena_set_allocated_public_key(
    ::PROTOBUF_NAMESPACE_ID::Any* public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = public_key;
  if (public_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignDocDirectAux::release_public_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignDocDirectAux::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignDocDirectAux::_internal_mutable_public_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.public_key_ = p;
  }
  return _impl_.public_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignDocDirectAux::mutable_public_key() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
  return _msg;
}
inline void SignDocDirectAux::set_allocated_public_key(::PROTOBUF_NAMESPACE_ID::Any* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_key_);
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key));
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.public_key)
}

// string chain_id = 3 [json_name = "chainId"];
inline void SignDocDirectAux::clear_chain_id() {
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& SignDocDirectAux::chain_id() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignDocDirectAux::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
}
inline std::string* SignDocDirectAux::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
  return _s;
}
inline const std::string& SignDocDirectAux::_internal_chain_id() const {
  return _impl_.chain_id_.Get();
}
inline void SignDocDirectAux::_internal_set_chain_id(const std::string& value) {
  ;


  _impl_.chain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SignDocDirectAux::_internal_mutable_chain_id() {
  ;
  return _impl_.chain_id_.Mutable( GetArenaForAllocation());
}
inline std::string* SignDocDirectAux::release_chain_id() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
  return _impl_.chain_id_.Release();
}
inline void SignDocDirectAux::set_allocated_chain_id(std::string* value) {
  _impl_.chain_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chain_id_.IsDefault()) {
          _impl_.chain_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.chain_id)
}

// uint64 account_number = 4 [json_name = "accountNumber"];
inline void SignDocDirectAux::clear_account_number() {
  _impl_.account_number_ = ::uint64_t{0u};
}
inline ::uint64_t SignDocDirectAux::account_number() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.account_number)
  return _internal_account_number();
}
inline void SignDocDirectAux::set_account_number(::uint64_t value) {
  _internal_set_account_number(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDocDirectAux.account_number)
}
inline ::uint64_t SignDocDirectAux::_internal_account_number() const {
  return _impl_.account_number_;
}
inline void SignDocDirectAux::_internal_set_account_number(::uint64_t value) {
  ;
  _impl_.account_number_ = value;
}

// uint64 sequence = 5 [json_name = "sequence"];
inline void SignDocDirectAux::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t SignDocDirectAux::sequence() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.sequence)
  return _internal_sequence();
}
inline void SignDocDirectAux::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignDocDirectAux.sequence)
}
inline ::uint64_t SignDocDirectAux::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void SignDocDirectAux::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// .cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip"];
inline bool SignDocDirectAux::has_tip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tip_ != nullptr);
  return value;
}
inline void SignDocDirectAux::clear_tip() {
  if (_impl_.tip_ != nullptr) _impl_.tip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::v1beta1::Tip& SignDocDirectAux::_internal_tip() const {
  const ::cosmos::tx::v1beta1::Tip* p = _impl_.tip_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Tip&>(
      ::cosmos::tx::v1beta1::_Tip_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Tip& SignDocDirectAux::tip() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignDocDirectAux.tip)
  return _internal_tip();
}
inline void SignDocDirectAux::unsafe_arena_set_allocated_tip(
    ::cosmos::tx::v1beta1::Tip* tip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tip_);
  }
  _impl_.tip_ = tip;
  if (tip) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.tip)
}
inline ::cosmos::tx::v1beta1::Tip* SignDocDirectAux::release_tip() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::Tip* temp = _impl_.tip_;
  _impl_.tip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::Tip* SignDocDirectAux::unsafe_arena_release_tip() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignDocDirectAux.tip)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::Tip* temp = _impl_.tip_;
  _impl_.tip_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Tip* SignDocDirectAux::_internal_mutable_tip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tip_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::Tip>(GetArenaForAllocation());
    _impl_.tip_ = p;
  }
  return _impl_.tip_;
}
inline ::cosmos::tx::v1beta1::Tip* SignDocDirectAux::mutable_tip() {
  ::cosmos::tx::v1beta1::Tip* _msg = _internal_mutable_tip();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignDocDirectAux.tip)
  return _msg;
}
inline void SignDocDirectAux::set_allocated_tip(::cosmos::tx::v1beta1::Tip* tip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tip_;
  }
  if (tip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tip);
    if (message_arena != submessage_arena) {
      tip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tip, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tip_ = tip;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignDocDirectAux.tip)
}

// -------------------------------------------------------------------

// TxBody

// repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
inline int TxBody::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int TxBody::messages_size() const {
  return _internal_messages_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
TxBody::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.TxBody.messages)
  return _internal_mutable_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxBody::_internal_messages(int index) const {
  return _internal_messages().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxBody::messages(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.messages)
  return _internal_messages(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::_internal_add_messages() {
  return _internal_mutable_messages()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::add_messages() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxBody.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
TxBody::messages() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.TxBody.messages)
  return _internal_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
TxBody::_internal_messages() const {
  return _impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
TxBody::_internal_mutable_messages() {
  return &_impl_.messages_;
}

// string memo = 2 [json_name = "memo"];
inline void TxBody::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& TxBody::memo() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.memo)
  return _internal_memo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxBody::set_memo(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.memo_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxBody.memo)
}
inline std::string* TxBody::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.memo)
  return _s;
}
inline const std::string& TxBody::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void TxBody::_internal_set_memo(const std::string& value) {
  ;


  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* TxBody::_internal_mutable_memo() {
  ;
  return _impl_.memo_.Mutable( GetArenaForAllocation());
}
inline std::string* TxBody::release_memo() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.TxBody.memo)
  return _impl_.memo_.Release();
}
inline void TxBody::set_allocated_memo(std::string* value) {
  _impl_.memo_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.memo_.IsDefault()) {
          _impl_.memo_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.TxBody.memo)
}

// uint64 timeout_height = 3 [json_name = "timeoutHeight"];
inline void TxBody::clear_timeout_height() {
  _impl_.timeout_height_ = ::uint64_t{0u};
}
inline ::uint64_t TxBody::timeout_height() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.timeout_height)
  return _internal_timeout_height();
}
inline void TxBody::set_timeout_height(::uint64_t value) {
  _internal_set_timeout_height(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.TxBody.timeout_height)
}
inline ::uint64_t TxBody::_internal_timeout_height() const {
  return _impl_.timeout_height_;
}
inline void TxBody::_internal_set_timeout_height(::uint64_t value) {
  ;
  _impl_.timeout_height_ = value;
}

// repeated .google.protobuf.Any extension_options = 1023 [json_name = "extensionOptions"];
inline int TxBody::_internal_extension_options_size() const {
  return _impl_.extension_options_.size();
}
inline int TxBody::extension_options_size() const {
  return _internal_extension_options_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::mutable_extension_options(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.extension_options)
  return _internal_mutable_extension_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
TxBody::mutable_extension_options() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.TxBody.extension_options)
  return _internal_mutable_extension_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxBody::_internal_extension_options(int index) const {
  return _internal_extension_options().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxBody::extension_options(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.extension_options)
  return _internal_extension_options(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::_internal_add_extension_options() {
  return _internal_mutable_extension_options()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::add_extension_options() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_extension_options();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxBody.extension_options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
TxBody::extension_options() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.TxBody.extension_options)
  return _internal_extension_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
TxBody::_internal_extension_options() const {
  return _impl_.extension_options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
TxBody::_internal_mutable_extension_options() {
  return &_impl_.extension_options_;
}

// repeated .google.protobuf.Any non_critical_extension_options = 2047 [json_name = "nonCriticalExtensionOptions"];
inline int TxBody::_internal_non_critical_extension_options_size() const {
  return _impl_.non_critical_extension_options_.size();
}
inline int TxBody::non_critical_extension_options_size() const {
  return _internal_non_critical_extension_options_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::mutable_non_critical_extension_options(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _internal_mutable_non_critical_extension_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
TxBody::mutable_non_critical_extension_options() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _internal_mutable_non_critical_extension_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxBody::_internal_non_critical_extension_options(int index) const {
  return _internal_non_critical_extension_options().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& TxBody::non_critical_extension_options(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _internal_non_critical_extension_options(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::_internal_add_non_critical_extension_options() {
  return _internal_mutable_non_critical_extension_options()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* TxBody::add_non_critical_extension_options() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_non_critical_extension_options();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
TxBody::non_critical_extension_options() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.TxBody.non_critical_extension_options)
  return _internal_non_critical_extension_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
TxBody::_internal_non_critical_extension_options() const {
  return _impl_.non_critical_extension_options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
TxBody::_internal_mutable_non_critical_extension_options() {
  return &_impl_.non_critical_extension_options_;
}

// -------------------------------------------------------------------

// AuthInfo

// repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];
inline int AuthInfo::_internal_signer_infos_size() const {
  return _impl_.signer_infos_.size();
}
inline int AuthInfo::signer_infos_size() const {
  return _internal_signer_infos_size();
}
inline void AuthInfo::clear_signer_infos() {
  _internal_mutable_signer_infos()->Clear();
}
inline ::cosmos::tx::v1beta1::SignerInfo* AuthInfo::mutable_signer_infos(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _internal_mutable_signer_infos()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::SignerInfo >*
AuthInfo::mutable_signer_infos() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _internal_mutable_signer_infos();
}
inline const ::cosmos::tx::v1beta1::SignerInfo& AuthInfo::_internal_signer_infos(int index) const {
  return _internal_signer_infos().Get(index);
}
inline const ::cosmos::tx::v1beta1::SignerInfo& AuthInfo::signer_infos(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _internal_signer_infos(index);
}
inline ::cosmos::tx::v1beta1::SignerInfo* AuthInfo::_internal_add_signer_infos() {
  return _internal_mutable_signer_infos()->Add();
}
inline ::cosmos::tx::v1beta1::SignerInfo* AuthInfo::add_signer_infos() {
  ::cosmos::tx::v1beta1::SignerInfo* _add = _internal_add_signer_infos();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::SignerInfo >&
AuthInfo::signer_infos() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.AuthInfo.signer_infos)
  return _internal_signer_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>&
AuthInfo::_internal_signer_infos() const {
  return _impl_.signer_infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::SignerInfo>*
AuthInfo::_internal_mutable_signer_infos() {
  return &_impl_.signer_infos_;
}

// .cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];
inline bool AuthInfo::has_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fee_ != nullptr);
  return value;
}
inline void AuthInfo::clear_fee() {
  if (_impl_.fee_ != nullptr) _impl_.fee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::tx::v1beta1::Fee& AuthInfo::_internal_fee() const {
  const ::cosmos::tx::v1beta1::Fee* p = _impl_.fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Fee&>(
      ::cosmos::tx::v1beta1::_Fee_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Fee& AuthInfo::fee() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuthInfo.fee)
  return _internal_fee();
}
inline void AuthInfo::unsafe_arena_set_allocated_fee(
    ::cosmos::tx::v1beta1::Fee* fee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_);
  }
  _impl_.fee_ = fee;
  if (fee) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.AuthInfo.fee)
}
inline ::cosmos::tx::v1beta1::Fee* AuthInfo::release_fee() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Fee* temp = _impl_.fee_;
  _impl_.fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::Fee* AuthInfo::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuthInfo.fee)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::Fee* temp = _impl_.fee_;
  _impl_.fee_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Fee* AuthInfo::_internal_mutable_fee() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::Fee>(GetArenaForAllocation());
    _impl_.fee_ = p;
  }
  return _impl_.fee_;
}
inline ::cosmos::tx::v1beta1::Fee* AuthInfo::mutable_fee() {
  ::cosmos::tx::v1beta1::Fee* _msg = _internal_mutable_fee();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuthInfo.fee)
  return _msg;
}
inline void AuthInfo::set_allocated_fee(::cosmos::tx::v1beta1::Fee* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fee_;
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fee);
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuthInfo.fee)
}

// .cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];
inline bool AuthInfo::has_tip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tip_ != nullptr);
  return value;
}
inline void AuthInfo::clear_tip() {
  if (_impl_.tip_ != nullptr) _impl_.tip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::v1beta1::Tip& AuthInfo::_internal_tip() const {
  const ::cosmos::tx::v1beta1::Tip* p = _impl_.tip_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::Tip&>(
      ::cosmos::tx::v1beta1::_Tip_default_instance_);
}
inline const ::cosmos::tx::v1beta1::Tip& AuthInfo::tip() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuthInfo.tip)
  return _internal_tip();
}
inline void AuthInfo::unsafe_arena_set_allocated_tip(
    ::cosmos::tx::v1beta1::Tip* tip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tip_);
  }
  _impl_.tip_ = tip;
  if (tip) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.AuthInfo.tip)
}
inline ::cosmos::tx::v1beta1::Tip* AuthInfo::release_tip() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::Tip* temp = _impl_.tip_;
  _impl_.tip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::Tip* AuthInfo::unsafe_arena_release_tip() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuthInfo.tip)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::Tip* temp = _impl_.tip_;
  _impl_.tip_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::Tip* AuthInfo::_internal_mutable_tip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.tip_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::Tip>(GetArenaForAllocation());
    _impl_.tip_ = p;
  }
  return _impl_.tip_;
}
inline ::cosmos::tx::v1beta1::Tip* AuthInfo::mutable_tip() {
  ::cosmos::tx::v1beta1::Tip* _msg = _internal_mutable_tip();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuthInfo.tip)
  return _msg;
}
inline void AuthInfo::set_allocated_tip(::cosmos::tx::v1beta1::Tip* tip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tip_;
  }
  if (tip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tip);
    if (message_arena != submessage_arena) {
      tip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tip, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.tip_ = tip;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuthInfo.tip)
}

// -------------------------------------------------------------------

// SignerInfo

// .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
inline bool SignerInfo::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SignerInfo::_internal_public_key() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SignerInfo::public_key() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignerInfo.public_key)
  return _internal_public_key();
}
inline void SignerInfo::unsafe_arena_set_allocated_public_key(
    ::PROTOBUF_NAMESPACE_ID::Any* public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = public_key;
  if (public_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SignerInfo.public_key)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignerInfo::release_public_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignerInfo::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignerInfo.public_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignerInfo::_internal_mutable_public_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.public_key_ = p;
  }
  return _impl_.public_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignerInfo::mutable_public_key() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignerInfo.public_key)
  return _msg;
}
inline void SignerInfo::set_allocated_public_key(::PROTOBUF_NAMESPACE_ID::Any* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_key_);
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key));
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignerInfo.public_key)
}

// .cosmos.tx.v1beta1.ModeInfo mode_info = 2 [json_name = "modeInfo"];
inline bool SignerInfo::has_mode_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mode_info_ != nullptr);
  return value;
}
inline void SignerInfo::clear_mode_info() {
  if (_impl_.mode_info_ != nullptr) _impl_.mode_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::v1beta1::ModeInfo& SignerInfo::_internal_mode_info() const {
  const ::cosmos::tx::v1beta1::ModeInfo* p = _impl_.mode_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::ModeInfo&>(
      ::cosmos::tx::v1beta1::_ModeInfo_default_instance_);
}
inline const ::cosmos::tx::v1beta1::ModeInfo& SignerInfo::mode_info() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignerInfo.mode_info)
  return _internal_mode_info();
}
inline void SignerInfo::unsafe_arena_set_allocated_mode_info(
    ::cosmos::tx::v1beta1::ModeInfo* mode_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_info_);
  }
  _impl_.mode_info_ = mode_info;
  if (mode_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.SignerInfo.mode_info)
}
inline ::cosmos::tx::v1beta1::ModeInfo* SignerInfo::release_mode_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::ModeInfo* temp = _impl_.mode_info_;
  _impl_.mode_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::ModeInfo* SignerInfo::unsafe_arena_release_mode_info() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.SignerInfo.mode_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::v1beta1::ModeInfo* temp = _impl_.mode_info_;
  _impl_.mode_info_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::ModeInfo* SignerInfo::_internal_mutable_mode_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mode_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::ModeInfo>(GetArenaForAllocation());
    _impl_.mode_info_ = p;
  }
  return _impl_.mode_info_;
}
inline ::cosmos::tx::v1beta1::ModeInfo* SignerInfo::mutable_mode_info() {
  ::cosmos::tx::v1beta1::ModeInfo* _msg = _internal_mutable_mode_info();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.SignerInfo.mode_info)
  return _msg;
}
inline void SignerInfo::set_allocated_mode_info(::cosmos::tx::v1beta1::ModeInfo* mode_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mode_info_;
  }
  if (mode_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mode_info);
    if (message_arena != submessage_arena) {
      mode_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mode_info_ = mode_info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.SignerInfo.mode_info)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void SignerInfo::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t SignerInfo::sequence() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.SignerInfo.sequence)
  return _internal_sequence();
}
inline void SignerInfo::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.SignerInfo.sequence)
}
inline ::uint64_t SignerInfo::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void SignerInfo::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// ModeInfo_Single

// .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
inline void ModeInfo_Single::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::cosmos::tx::signing::v1beta1::SignMode ModeInfo_Single::mode() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.Single.mode)
  return _internal_mode();
}
inline void ModeInfo_Single::set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.ModeInfo.Single.mode)
}
inline ::cosmos::tx::signing::v1beta1::SignMode ModeInfo_Single::_internal_mode() const {
  return static_cast<::cosmos::tx::signing::v1beta1::SignMode>(_impl_.mode_);
}
inline void ModeInfo_Single::_internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// ModeInfo_Multi

// .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
inline bool ModeInfo_Multi::has_bitarray() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bitarray_ != nullptr);
  return value;
}
inline const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& ModeInfo_Multi::_internal_bitarray() const {
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray* p = _impl_.bitarray_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::crypto::multisig::v1beta1::CompactBitArray&>(
      ::cosmos::crypto::multisig::v1beta1::_CompactBitArray_default_instance_);
}
inline const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& ModeInfo_Multi::bitarray() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
  return _internal_bitarray();
}
inline void ModeInfo_Multi::unsafe_arena_set_allocated_bitarray(
    ::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bitarray_);
  }
  _impl_.bitarray_ = bitarray;
  if (bitarray) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* ModeInfo_Multi::release_bitarray() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* temp = _impl_.bitarray_;
  _impl_.bitarray_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* ModeInfo_Multi::unsafe_arena_release_bitarray() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* temp = _impl_.bitarray_;
  _impl_.bitarray_ = nullptr;
  return temp;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* ModeInfo_Multi::_internal_mutable_bitarray() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bitarray_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(GetArenaForAllocation());
    _impl_.bitarray_ = p;
  }
  return _impl_.bitarray_;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* ModeInfo_Multi::mutable_bitarray() {
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* _msg = _internal_mutable_bitarray();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
  return _msg;
}
inline void ModeInfo_Multi::set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bitarray_);
  }
  if (bitarray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitarray));
    if (message_arena != submessage_arena) {
      bitarray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitarray, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bitarray_ = bitarray;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.ModeInfo.Multi.bitarray)
}

// repeated .cosmos.tx.v1beta1.ModeInfo mode_infos = 2 [json_name = "modeInfos"];
inline int ModeInfo_Multi::_internal_mode_infos_size() const {
  return _impl_.mode_infos_.size();
}
inline int ModeInfo_Multi::mode_infos_size() const {
  return _internal_mode_infos_size();
}
inline void ModeInfo_Multi::clear_mode_infos() {
  _internal_mutable_mode_infos()->Clear();
}
inline ::cosmos::tx::v1beta1::ModeInfo* ModeInfo_Multi::mutable_mode_infos(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _internal_mutable_mode_infos()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::ModeInfo >*
ModeInfo_Multi::mutable_mode_infos() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _internal_mutable_mode_infos();
}
inline const ::cosmos::tx::v1beta1::ModeInfo& ModeInfo_Multi::_internal_mode_infos(int index) const {
  return _internal_mode_infos().Get(index);
}
inline const ::cosmos::tx::v1beta1::ModeInfo& ModeInfo_Multi::mode_infos(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _internal_mode_infos(index);
}
inline ::cosmos::tx::v1beta1::ModeInfo* ModeInfo_Multi::_internal_add_mode_infos() {
  return _internal_mutable_mode_infos()->Add();
}
inline ::cosmos::tx::v1beta1::ModeInfo* ModeInfo_Multi::add_mode_infos() {
  ::cosmos::tx::v1beta1::ModeInfo* _add = _internal_add_mode_infos();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::v1beta1::ModeInfo >&
ModeInfo_Multi::mode_infos() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.ModeInfo.Multi.mode_infos)
  return _internal_mode_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>&
ModeInfo_Multi::_internal_mode_infos() const {
  return _impl_.mode_infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::v1beta1::ModeInfo>*
ModeInfo_Multi::_internal_mutable_mode_infos() {
  return &_impl_.mode_infos_;
}

// -------------------------------------------------------------------

// ModeInfo

// .cosmos.tx.v1beta1.ModeInfo.Single single = 1 [json_name = "single"];
inline bool ModeInfo::has_single() const {
  return sum_case() == kSingle;
}
inline bool ModeInfo::_internal_has_single() const {
  return sum_case() == kSingle;
}
inline void ModeInfo::set_has_single() {
  _impl_._oneof_case_[0] = kSingle;
}
inline void ModeInfo::clear_single() {
  if (sum_case() == kSingle) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.single_;
    }
    clear_has_sum();
  }
}
inline ::cosmos::tx::v1beta1::ModeInfo_Single* ModeInfo::release_single() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.ModeInfo.single)
  if (sum_case() == kSingle) {
    clear_has_sum();
    ::cosmos::tx::v1beta1::ModeInfo_Single* temp = _impl_.sum_.single_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::tx::v1beta1::ModeInfo_Single& ModeInfo::_internal_single() const {
  return sum_case() == kSingle
      ? *_impl_.sum_.single_
      : reinterpret_cast<::cosmos::tx::v1beta1::ModeInfo_Single&>(::cosmos::tx::v1beta1::_ModeInfo_Single_default_instance_);
}
inline const ::cosmos::tx::v1beta1::ModeInfo_Single& ModeInfo::single() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.single)
  return _internal_single();
}
inline ::cosmos::tx::v1beta1::ModeInfo_Single* ModeInfo::unsafe_arena_release_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.tx.v1beta1.ModeInfo.single)
  if (sum_case() == kSingle) {
    clear_has_sum();
    ::cosmos::tx::v1beta1::ModeInfo_Single* temp = _impl_.sum_.single_;
    _impl_.sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModeInfo::unsafe_arena_set_allocated_single(::cosmos::tx::v1beta1::ModeInfo_Single* single) {
  clear_sum();
  if (single) {
    set_has_single();
    _impl_.sum_.single_ = single;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.ModeInfo.single)
}
inline ::cosmos::tx::v1beta1::ModeInfo_Single* ModeInfo::_internal_mutable_single() {
  if (sum_case() != kSingle) {
    clear_sum();
    set_has_single();
    _impl_.sum_.single_ = CreateMaybeMessage< ::cosmos::tx::v1beta1::ModeInfo_Single >(GetArenaForAllocation());
  }
  return _impl_.sum_.single_;
}
inline ::cosmos::tx::v1beta1::ModeInfo_Single* ModeInfo::mutable_single() {
  ::cosmos::tx::v1beta1::ModeInfo_Single* _msg = _internal_mutable_single();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.ModeInfo.single)
  return _msg;
}

// .cosmos.tx.v1beta1.ModeInfo.Multi multi = 2 [json_name = "multi"];
inline bool ModeInfo::has_multi() const {
  return sum_case() == kMulti;
}
inline bool ModeInfo::_internal_has_multi() const {
  return sum_case() == kMulti;
}
inline void ModeInfo::set_has_multi() {
  _impl_._oneof_case_[0] = kMulti;
}
inline void ModeInfo::clear_multi() {
  if (sum_case() == kMulti) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.multi_;
    }
    clear_has_sum();
  }
}
inline ::cosmos::tx::v1beta1::ModeInfo_Multi* ModeInfo::release_multi() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.ModeInfo.multi)
  if (sum_case() == kMulti) {
    clear_has_sum();
    ::cosmos::tx::v1beta1::ModeInfo_Multi* temp = _impl_.sum_.multi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::tx::v1beta1::ModeInfo_Multi& ModeInfo::_internal_multi() const {
  return sum_case() == kMulti
      ? *_impl_.sum_.multi_
      : reinterpret_cast<::cosmos::tx::v1beta1::ModeInfo_Multi&>(::cosmos::tx::v1beta1::_ModeInfo_Multi_default_instance_);
}
inline const ::cosmos::tx::v1beta1::ModeInfo_Multi& ModeInfo::multi() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.ModeInfo.multi)
  return _internal_multi();
}
inline ::cosmos::tx::v1beta1::ModeInfo_Multi* ModeInfo::unsafe_arena_release_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.tx.v1beta1.ModeInfo.multi)
  if (sum_case() == kMulti) {
    clear_has_sum();
    ::cosmos::tx::v1beta1::ModeInfo_Multi* temp = _impl_.sum_.multi_;
    _impl_.sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ModeInfo::unsafe_arena_set_allocated_multi(::cosmos::tx::v1beta1::ModeInfo_Multi* multi) {
  clear_sum();
  if (multi) {
    set_has_multi();
    _impl_.sum_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.ModeInfo.multi)
}
inline ::cosmos::tx::v1beta1::ModeInfo_Multi* ModeInfo::_internal_mutable_multi() {
  if (sum_case() != kMulti) {
    clear_sum();
    set_has_multi();
    _impl_.sum_.multi_ = CreateMaybeMessage< ::cosmos::tx::v1beta1::ModeInfo_Multi >(GetArenaForAllocation());
  }
  return _impl_.sum_.multi_;
}
inline ::cosmos::tx::v1beta1::ModeInfo_Multi* ModeInfo::mutable_multi() {
  ::cosmos::tx::v1beta1::ModeInfo_Multi* _msg = _internal_mutable_multi();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.ModeInfo.multi)
  return _msg;
}

inline bool ModeInfo::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void ModeInfo::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline ModeInfo::SumCase ModeInfo::sum_case() const {
  return ModeInfo::SumCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Fee

// repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int Fee::_internal_amount_size() const {
  return _impl_.amount_.size();
}
inline int Fee::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* Fee::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Fee.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Fee::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.Fee.amount)
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& Fee::_internal_amount(int index) const {
  return _internal_amount().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Fee::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Fee.amount)
  return _internal_amount(index);
}
inline ::cosmos::base::v1beta1::Coin* Fee::_internal_add_amount() {
  return _internal_mutable_amount()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Fee::add_amount() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_amount();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.Fee.amount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Fee::amount() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.Fee.amount)
  return _internal_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Fee::_internal_amount() const {
  return _impl_.amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Fee::_internal_mutable_amount() {
  return &_impl_.amount_;
}

// uint64 gas_limit = 2 [json_name = "gasLimit"];
inline void Fee::clear_gas_limit() {
  _impl_.gas_limit_ = ::uint64_t{0u};
}
inline ::uint64_t Fee::gas_limit() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Fee.gas_limit)
  return _internal_gas_limit();
}
inline void Fee::set_gas_limit(::uint64_t value) {
  _internal_set_gas_limit(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Fee.gas_limit)
}
inline ::uint64_t Fee::_internal_gas_limit() const {
  return _impl_.gas_limit_;
}
inline void Fee::_internal_set_gas_limit(::uint64_t value) {
  ;
  _impl_.gas_limit_ = value;
}

// string payer = 3 [json_name = "payer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Fee::clear_payer() {
  _impl_.payer_.ClearToEmpty();
}
inline const std::string& Fee::payer() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Fee.payer)
  return _internal_payer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Fee::set_payer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Fee.payer)
}
inline std::string* Fee::mutable_payer() {
  std::string* _s = _internal_mutable_payer();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Fee.payer)
  return _s;
}
inline const std::string& Fee::_internal_payer() const {
  return _impl_.payer_.Get();
}
inline void Fee::_internal_set_payer(const std::string& value) {
  ;


  _impl_.payer_.Set(value, GetArenaForAllocation());
}
inline std::string* Fee::_internal_mutable_payer() {
  ;
  return _impl_.payer_.Mutable( GetArenaForAllocation());
}
inline std::string* Fee::release_payer() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Fee.payer)
  return _impl_.payer_.Release();
}
inline void Fee::set_allocated_payer(std::string* value) {
  _impl_.payer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payer_.IsDefault()) {
          _impl_.payer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Fee.payer)
}

// string granter = 4 [json_name = "granter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Fee::clear_granter() {
  _impl_.granter_.ClearToEmpty();
}
inline const std::string& Fee::granter() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Fee.granter)
  return _internal_granter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Fee::set_granter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.granter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Fee.granter)
}
inline std::string* Fee::mutable_granter() {
  std::string* _s = _internal_mutable_granter();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Fee.granter)
  return _s;
}
inline const std::string& Fee::_internal_granter() const {
  return _impl_.granter_.Get();
}
inline void Fee::_internal_set_granter(const std::string& value) {
  ;


  _impl_.granter_.Set(value, GetArenaForAllocation());
}
inline std::string* Fee::_internal_mutable_granter() {
  ;
  return _impl_.granter_.Mutable( GetArenaForAllocation());
}
inline std::string* Fee::release_granter() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Fee.granter)
  return _impl_.granter_.Release();
}
inline void Fee::set_allocated_granter(std::string* value) {
  _impl_.granter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.granter_.IsDefault()) {
          _impl_.granter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Fee.granter)
}

// -------------------------------------------------------------------

// Tip

// repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int Tip::_internal_amount_size() const {
  return _impl_.amount_.size();
}
inline int Tip::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* Tip::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tip.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Tip::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.v1beta1.Tip.amount)
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& Tip::_internal_amount(int index) const {
  return _internal_amount().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Tip::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tip.amount)
  return _internal_amount(index);
}
inline ::cosmos::base::v1beta1::Coin* Tip::_internal_add_amount() {
  return _internal_mutable_amount()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Tip::add_amount() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_amount();
  // @@protoc_insertion_point(field_add:cosmos.tx.v1beta1.Tip.amount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Tip::amount() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.v1beta1.Tip.amount)
  return _internal_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Tip::_internal_amount() const {
  return _impl_.amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Tip::_internal_mutable_amount() {
  return &_impl_.amount_;
}

// string tipper = 2 [json_name = "tipper", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Tip::clear_tipper() {
  _impl_.tipper_.ClearToEmpty();
}
inline const std::string& Tip::tipper() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.Tip.tipper)
  return _internal_tipper();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Tip::set_tipper(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tipper_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.Tip.tipper)
}
inline std::string* Tip::mutable_tipper() {
  std::string* _s = _internal_mutable_tipper();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.Tip.tipper)
  return _s;
}
inline const std::string& Tip::_internal_tipper() const {
  return _impl_.tipper_.Get();
}
inline void Tip::_internal_set_tipper(const std::string& value) {
  ;


  _impl_.tipper_.Set(value, GetArenaForAllocation());
}
inline std::string* Tip::_internal_mutable_tipper() {
  ;
  return _impl_.tipper_.Mutable( GetArenaForAllocation());
}
inline std::string* Tip::release_tipper() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.Tip.tipper)
  return _impl_.tipper_.Release();
}
inline void Tip::set_allocated_tipper(std::string* value) {
  _impl_.tipper_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tipper_.IsDefault()) {
          _impl_.tipper_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.Tip.tipper)
}

// -------------------------------------------------------------------

// AuxSignerData

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void AuxSignerData::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& AuxSignerData::address() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuxSignerData.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuxSignerData::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.AuxSignerData.address)
}
inline std::string* AuxSignerData::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuxSignerData.address)
  return _s;
}
inline const std::string& AuxSignerData::_internal_address() const {
  return _impl_.address_.Get();
}
inline void AuxSignerData::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* AuxSignerData::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* AuxSignerData::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuxSignerData.address)
  return _impl_.address_.Release();
}
inline void AuxSignerData::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuxSignerData.address)
}

// .cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];
inline bool AuxSignerData::has_sign_doc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sign_doc_ != nullptr);
  return value;
}
inline void AuxSignerData::clear_sign_doc() {
  if (_impl_.sign_doc_ != nullptr) _impl_.sign_doc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::tx::v1beta1::SignDocDirectAux& AuxSignerData::_internal_sign_doc() const {
  const ::cosmos::tx::v1beta1::SignDocDirectAux* p = _impl_.sign_doc_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::v1beta1::SignDocDirectAux&>(
      ::cosmos::tx::v1beta1::_SignDocDirectAux_default_instance_);
}
inline const ::cosmos::tx::v1beta1::SignDocDirectAux& AuxSignerData::sign_doc() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
  return _internal_sign_doc();
}
inline void AuxSignerData::unsafe_arena_set_allocated_sign_doc(
    ::cosmos::tx::v1beta1::SignDocDirectAux* sign_doc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sign_doc_);
  }
  _impl_.sign_doc_ = sign_doc;
  if (sign_doc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
}
inline ::cosmos::tx::v1beta1::SignDocDirectAux* AuxSignerData::release_sign_doc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::SignDocDirectAux* temp = _impl_.sign_doc_;
  _impl_.sign_doc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::v1beta1::SignDocDirectAux* AuxSignerData::unsafe_arena_release_sign_doc() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::tx::v1beta1::SignDocDirectAux* temp = _impl_.sign_doc_;
  _impl_.sign_doc_ = nullptr;
  return temp;
}
inline ::cosmos::tx::v1beta1::SignDocDirectAux* AuxSignerData::_internal_mutable_sign_doc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sign_doc_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::v1beta1::SignDocDirectAux>(GetArenaForAllocation());
    _impl_.sign_doc_ = p;
  }
  return _impl_.sign_doc_;
}
inline ::cosmos::tx::v1beta1::SignDocDirectAux* AuxSignerData::mutable_sign_doc() {
  ::cosmos::tx::v1beta1::SignDocDirectAux* _msg = _internal_mutable_sign_doc();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
  return _msg;
}
inline void AuxSignerData::set_allocated_sign_doc(::cosmos::tx::v1beta1::SignDocDirectAux* sign_doc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sign_doc_;
  }
  if (sign_doc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sign_doc);
    if (message_arena != submessage_arena) {
      sign_doc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign_doc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sign_doc_ = sign_doc;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuxSignerData.sign_doc)
}

// .cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];
inline void AuxSignerData::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::cosmos::tx::signing::v1beta1::SignMode AuxSignerData::mode() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuxSignerData.mode)
  return _internal_mode();
}
inline void AuxSignerData::set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.AuxSignerData.mode)
}
inline ::cosmos::tx::signing::v1beta1::SignMode AuxSignerData::_internal_mode() const {
  return static_cast<::cosmos::tx::signing::v1beta1::SignMode>(_impl_.mode_);
}
inline void AuxSignerData::_internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  ;
  _impl_.mode_ = value;
}

// bytes sig = 4 [json_name = "sig"];
inline void AuxSignerData::clear_sig() {
  _impl_.sig_.ClearToEmpty();
}
inline const std::string& AuxSignerData::sig() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.v1beta1.AuxSignerData.sig)
  return _internal_sig();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuxSignerData::set_sig(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sig_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.v1beta1.AuxSignerData.sig)
}
inline std::string* AuxSignerData::mutable_sig() {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.v1beta1.AuxSignerData.sig)
  return _s;
}
inline const std::string& AuxSignerData::_internal_sig() const {
  return _impl_.sig_.Get();
}
inline void AuxSignerData::_internal_set_sig(const std::string& value) {
  ;


  _impl_.sig_.Set(value, GetArenaForAllocation());
}
inline std::string* AuxSignerData::_internal_mutable_sig() {
  ;
  return _impl_.sig_.Mutable( GetArenaForAllocation());
}
inline std::string* AuxSignerData::release_sig() {
  // @@protoc_insertion_point(field_release:cosmos.tx.v1beta1.AuxSignerData.sig)
  return _impl_.sig_.Release();
}
inline void AuxSignerData::set_allocated_sig(std::string* value) {
  _impl_.sig_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sig_.IsDefault()) {
          _impl_.sig_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.v1beta1.AuxSignerData.sig)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace tx
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fv1beta1_2ftx_2eproto_2epb_2eh

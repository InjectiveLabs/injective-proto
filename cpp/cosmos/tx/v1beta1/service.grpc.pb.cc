// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/tx/v1beta1/service.proto

#include "cosmos/tx/v1beta1/service.pb.h"
#include "cosmos/tx/v1beta1/service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace tx {
namespace v1beta1 {

static const char* Service_method_names[] = {
  "/cosmos.tx.v1beta1.Service/Simulate",
  "/cosmos.tx.v1beta1.Service/GetTx",
  "/cosmos.tx.v1beta1.Service/BroadcastTx",
  "/cosmos.tx.v1beta1.Service/GetTxsEvent",
  "/cosmos.tx.v1beta1.Service/GetBlockWithTxs",
  "/cosmos.tx.v1beta1.Service/TxDecode",
  "/cosmos.tx.v1beta1.Service/TxEncode",
  "/cosmos.tx.v1beta1.Service/TxEncodeAmino",
  "/cosmos.tx.v1beta1.Service/TxDecodeAmino",
};

std::unique_ptr< Service::Stub> Service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Service::Stub> stub(new Service::Stub(channel, options));
  return stub;
}

Service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Simulate_(Service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTx_(Service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BroadcastTx_(Service_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxsEvent_(Service_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockWithTxs_(Service_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TxDecode_(Service_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TxEncode_(Service_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TxEncodeAmino_(Service_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TxDecodeAmino_(Service_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Service::Stub::Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::cosmos::tx::v1beta1::SimulateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::SimulateRequest, ::cosmos::tx::v1beta1::SimulateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Simulate_, context, request, response);
}

void Service::Stub::async::Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::SimulateRequest, ::cosmos::tx::v1beta1::SimulateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Simulate_, context, request, response, std::move(f));
}

void Service::Stub::async::Simulate(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Simulate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::SimulateResponse>* Service::Stub::PrepareAsyncSimulateRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::SimulateResponse, ::cosmos::tx::v1beta1::SimulateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Simulate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::SimulateResponse>* Service::Stub::AsyncSimulateRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::SimulateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSimulateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::cosmos::tx::v1beta1::GetTxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::GetTxRequest, ::cosmos::tx::v1beta1::GetTxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTx_, context, request, response);
}

void Service::Stub::async::GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::GetTxRequest, ::cosmos::tx::v1beta1::GetTxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTx_, context, request, response, std::move(f));
}

void Service::Stub::async::GetTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxResponse>* Service::Stub::PrepareAsyncGetTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::GetTxResponse, ::cosmos::tx::v1beta1::GetTxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxResponse>* Service::Stub::AsyncGetTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::BroadcastTxRequest, ::cosmos::tx::v1beta1::BroadcastTxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BroadcastTx_, context, request, response);
}

void Service::Stub::async::BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::BroadcastTxRequest, ::cosmos::tx::v1beta1::BroadcastTxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BroadcastTx_, context, request, response, std::move(f));
}

void Service::Stub::async::BroadcastTx(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BroadcastTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::BroadcastTxResponse>* Service::Stub::PrepareAsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::BroadcastTxResponse, ::cosmos::tx::v1beta1::BroadcastTxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BroadcastTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::BroadcastTxResponse>* Service::Stub::AsyncBroadcastTxRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBroadcastTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::GetTxsEventRequest, ::cosmos::tx::v1beta1::GetTxsEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTxsEvent_, context, request, response);
}

void Service::Stub::async::GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::GetTxsEventRequest, ::cosmos::tx::v1beta1::GetTxsEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxsEvent_, context, request, response, std::move(f));
}

void Service::Stub::async::GetTxsEvent(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTxsEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxsEventResponse>* Service::Stub::PrepareAsyncGetTxsEventRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::GetTxsEventResponse, ::cosmos::tx::v1beta1::GetTxsEventRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTxsEvent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetTxsEventResponse>* Service::Stub::AsyncGetTxsEventRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTxsEventRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockWithTxs_, context, request, response);
}

void Service::Stub::async::GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockWithTxs_, context, request, response, std::move(f));
}

void Service::Stub::async::GetBlockWithTxs(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockWithTxs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* Service::Stub::PrepareAsyncGetBlockWithTxsRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse, ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockWithTxs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::GetBlockWithTxsResponse>* Service::Stub::AsyncGetBlockWithTxsRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockWithTxsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::cosmos::tx::v1beta1::TxDecodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::TxDecodeRequest, ::cosmos::tx::v1beta1::TxDecodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TxDecode_, context, request, response);
}

void Service::Stub::async::TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::TxDecodeRequest, ::cosmos::tx::v1beta1::TxDecodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TxDecode_, context, request, response, std::move(f));
}

void Service::Stub::async::TxDecode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TxDecode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeResponse>* Service::Stub::PrepareAsyncTxDecodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::TxDecodeResponse, ::cosmos::tx::v1beta1::TxDecodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TxDecode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeResponse>* Service::Stub::AsyncTxDecodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTxDecodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::cosmos::tx::v1beta1::TxEncodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::TxEncodeRequest, ::cosmos::tx::v1beta1::TxEncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TxEncode_, context, request, response);
}

void Service::Stub::async::TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::TxEncodeRequest, ::cosmos::tx::v1beta1::TxEncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TxEncode_, context, request, response, std::move(f));
}

void Service::Stub::async::TxEncode(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TxEncode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeResponse>* Service::Stub::PrepareAsyncTxEncodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::TxEncodeResponse, ::cosmos::tx::v1beta1::TxEncodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TxEncode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeResponse>* Service::Stub::AsyncTxEncodeRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTxEncodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::cosmos::tx::v1beta1::TxEncodeAminoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TxEncodeAmino_, context, request, response);
}

void Service::Stub::async::TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::cosmos::tx::v1beta1::TxEncodeAminoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TxEncodeAmino_, context, request, response, std::move(f));
}

void Service::Stub::async::TxEncodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TxEncodeAmino_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* Service::Stub::PrepareAsyncTxEncodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::TxEncodeAminoResponse, ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TxEncodeAmino_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxEncodeAminoResponse>* Service::Stub::AsyncTxEncodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTxEncodeAminoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Service::Stub::TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::cosmos::tx::v1beta1::TxDecodeAminoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TxDecodeAmino_, context, request, response);
}

void Service::Stub::async::TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::cosmos::tx::v1beta1::TxDecodeAminoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TxDecodeAmino_, context, request, response, std::move(f));
}

void Service::Stub::async::TxDecodeAmino(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TxDecodeAmino_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* Service::Stub::PrepareAsyncTxDecodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::tx::v1beta1::TxDecodeAminoResponse, ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TxDecodeAmino_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::tx::v1beta1::TxDecodeAminoResponse>* Service::Stub::AsyncTxDecodeAminoRaw(::grpc::ClientContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTxDecodeAminoRaw(context, request, cq);
  result->StartCall();
  return result;
}

Service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::SimulateRequest, ::cosmos::tx::v1beta1::SimulateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::SimulateRequest* req,
             ::cosmos::tx::v1beta1::SimulateResponse* resp) {
               return service->Simulate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::GetTxRequest, ::cosmos::tx::v1beta1::GetTxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::GetTxRequest* req,
             ::cosmos::tx::v1beta1::GetTxResponse* resp) {
               return service->GetTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::BroadcastTxRequest, ::cosmos::tx::v1beta1::BroadcastTxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::BroadcastTxRequest* req,
             ::cosmos::tx::v1beta1::BroadcastTxResponse* resp) {
               return service->BroadcastTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::GetTxsEventRequest, ::cosmos::tx::v1beta1::GetTxsEventResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::GetTxsEventRequest* req,
             ::cosmos::tx::v1beta1::GetTxsEventResponse* resp) {
               return service->GetTxsEvent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::GetBlockWithTxsRequest, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* req,
             ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* resp) {
               return service->GetBlockWithTxs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::TxDecodeRequest, ::cosmos::tx::v1beta1::TxDecodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::TxDecodeRequest* req,
             ::cosmos::tx::v1beta1::TxDecodeResponse* resp) {
               return service->TxDecode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::TxEncodeRequest, ::cosmos::tx::v1beta1::TxEncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::TxEncodeRequest* req,
             ::cosmos::tx::v1beta1::TxEncodeResponse* resp) {
               return service->TxEncode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::TxEncodeAminoRequest, ::cosmos::tx::v1beta1::TxEncodeAminoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* req,
             ::cosmos::tx::v1beta1::TxEncodeAminoResponse* resp) {
               return service->TxEncodeAmino(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Service_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Service::Service, ::cosmos::tx::v1beta1::TxDecodeAminoRequest, ::cosmos::tx::v1beta1::TxDecodeAminoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* req,
             ::cosmos::tx::v1beta1::TxDecodeAminoResponse* resp) {
               return service->TxDecodeAmino(ctx, req, resp);
             }, this)));
}

Service::Service::~Service() {
}

::grpc::Status Service::Service::Simulate(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::SimulateRequest* request, ::cosmos::tx::v1beta1::SimulateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::GetTx(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::GetTxRequest* request, ::cosmos::tx::v1beta1::GetTxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::BroadcastTx(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::BroadcastTxRequest* request, ::cosmos::tx::v1beta1::BroadcastTxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::GetTxsEvent(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::GetTxsEventRequest* request, ::cosmos::tx::v1beta1::GetTxsEventResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::GetBlockWithTxs(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::GetBlockWithTxsRequest* request, ::cosmos::tx::v1beta1::GetBlockWithTxsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::TxDecode(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::TxDecodeRequest* request, ::cosmos::tx::v1beta1::TxDecodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::TxEncode(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::TxEncodeRequest* request, ::cosmos::tx::v1beta1::TxEncodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::TxEncodeAmino(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::TxEncodeAminoRequest* request, ::cosmos::tx::v1beta1::TxEncodeAminoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Service::Service::TxDecodeAmino(::grpc::ServerContext* context, const ::cosmos::tx::v1beta1::TxDecodeAminoRequest* request, ::cosmos::tx::v1beta1::TxDecodeAminoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace tx
}  // namespace v1beta1


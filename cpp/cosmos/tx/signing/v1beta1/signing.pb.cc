// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/signing/v1beta1/signing.proto

#include "cosmos/tx/signing/v1beta1/signing.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace tx {
namespace signing {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptors::SignatureDescriptors(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signatures_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignatureDescriptorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptorsDefaultTypeInternal() {}
  union {
    SignatureDescriptors _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptorsDefaultTypeInternal _SignatureDescriptors_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptor_Data_Single::SignatureDescriptor_Data_Single(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignatureDescriptor_Data_SingleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptor_Data_SingleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptor_Data_SingleDefaultTypeInternal() {}
  union {
    SignatureDescriptor_Data_Single _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptor_Data_SingleDefaultTypeInternal _SignatureDescriptor_Data_Single_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptor_Data_Multi::SignatureDescriptor_Data_Multi(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signatures_)*/{}
  , /*decltype(_impl_.bitarray_)*/nullptr} {}
struct SignatureDescriptor_Data_MultiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptor_Data_MultiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptor_Data_MultiDefaultTypeInternal() {}
  union {
    SignatureDescriptor_Data_Multi _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptor_Data_MultiDefaultTypeInternal _SignatureDescriptor_Data_Multi_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptor_Data::SignatureDescriptor_Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SignatureDescriptor_DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptor_DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptor_DataDefaultTypeInternal() {}
  union {
    SignatureDescriptor_Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptor_DataDefaultTypeInternal _SignatureDescriptor_Data_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignatureDescriptor::SignatureDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.public_key_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}
} {}
struct SignatureDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureDescriptorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureDescriptorDefaultTypeInternal() {}
  union {
    SignatureDescriptor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureDescriptorDefaultTypeInternal _SignatureDescriptor_default_instance_;
}  // namespace v1beta1
}  // namespace signing
}  // namespace tx
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptors, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptors, _impl_.signatures_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi, _impl_.bitarray_),
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi, _impl_.signatures_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data, _impl_.sum_),
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _impl_.public_key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor, _impl_.sequence_),
    0,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptors)},
        { 9, -1, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single)},
        { 19, 29, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi)},
        { 31, -1, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data)},
        { 42, 53, -1, sizeof(::cosmos::tx::signing::v1beta1::SignatureDescriptor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptors_default_instance_._instance,
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_Single_default_instance_._instance,
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_Multi_default_instance_._instance,
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_default_instance_._instance,
    &::cosmos::tx::signing::v1beta1::_SignatureDescriptor_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'cosmos/tx/signing/v1beta1/signing.prot"
    "o\022\031cosmos.tx.signing.v1beta1\032-cosmos/cry"
    "pto/multisig/v1beta1/multisig.proto\032\031goo"
    "gle/protobuf/any.proto\"f\n\024SignatureDescr"
    "iptors\022N\n\nsignatures\030\001 \003(\0132..cosmos.tx.s"
    "igning.v1beta1.SignatureDescriptorR\nsign"
    "atures\"\365\004\n\023SignatureDescriptor\0223\n\npublic"
    "_key\030\001 \001(\0132\024.google.protobuf.AnyR\tpublic"
    "Key\022G\n\004data\030\002 \001(\01323.cosmos.tx.signing.v1"
    "beta1.SignatureDescriptor.DataR\004data\022\032\n\010"
    "sequence\030\003 \001(\004R\010sequence\032\303\003\n\004Data\022T\n\006sin"
    "gle\030\001 \001(\0132:.cosmos.tx.signing.v1beta1.Si"
    "gnatureDescriptor.Data.SingleH\000R\006single\022"
    "Q\n\005multi\030\002 \001(\01329.cosmos.tx.signing.v1bet"
    "a1.SignatureDescriptor.Data.MultiH\000R\005mul"
    "ti\032_\n\006Single\0227\n\004mode\030\001 \001(\0162#.cosmos.tx.s"
    "igning.v1beta1.SignModeR\004mode\022\034\n\tsignatu"
    "re\030\002 \001(\014R\tsignature\032\251\001\n\005Multi\022K\n\010bitarra"
    "y\030\001 \001(\0132/.cosmos.crypto.multisig.v1beta1"
    ".CompactBitArrayR\010bitarray\022S\n\nsignatures"
    "\030\002 \003(\01323.cosmos.tx.signing.v1beta1.Signa"
    "tureDescriptor.DataR\nsignaturesB\005\n\003sum*\245"
    "\001\n\010SignMode\022\031\n\025SIGN_MODE_UNSPECIFIED\020\000\022\024"
    "\n\020SIGN_MODE_DIRECT\020\001\022\025\n\021SIGN_MODE_TEXTUA"
    "L\020\002\022\030\n\024SIGN_MODE_DIRECT_AUX\020\003\022\037\n\033SIGN_MO"
    "DE_LEGACY_AMINO_JSON\020\177\022\026\n\021SIGN_MODE_EIP_"
    "191\020\277\001B\343\001\n\035com.cosmos.tx.signing.v1beta1"
    "B\014SigningProtoP\001Z-github.com/cosmos/cosm"
    "os-sdk/types/tx/signing\242\002\003CTS\252\002\031Cosmos.T"
    "x.Signing.V1beta1\312\002\031Cosmos\\Tx\\Signing\\V1"
    "beta1\342\002%Cosmos\\Tx\\Signing\\V1beta1\\GPBMet"
    "adata\352\002\034Cosmos::Tx::Signing::V1beta1b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fcrypto_2fmultisig_2fv1beta1_2fmultisig_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto = {
    false,
    false,
    1284,
    descriptor_table_protodef_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    "cosmos/tx/signing/v1beta1/signing.proto",
    &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once,
    descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto::offsets,
    file_level_metadata_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    file_level_enum_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
    file_level_service_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_getter() {
  return &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto(&descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto);
namespace cosmos {
namespace tx {
namespace signing {
namespace v1beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto);
  return file_level_enum_descriptors_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[0];
}
bool SignMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 127:
    case 191:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class SignatureDescriptors::_Internal {
 public:
};

SignatureDescriptors::SignatureDescriptors(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptors)
}
SignatureDescriptors::SignatureDescriptors(const SignatureDescriptors& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureDescriptors* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signatures_){from._impl_.signatures_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptors)
}

inline void SignatureDescriptors::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signatures_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SignatureDescriptors::~SignatureDescriptors() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureDescriptors::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_signatures()->~RepeatedPtrField();
}

void SignatureDescriptors::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureDescriptors::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signatures()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptors::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignatureDescriptors::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_signatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  return target;
}

::size_t SignatureDescriptors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->_internal_signatures()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureDescriptors::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureDescriptors::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureDescriptors::GetClassData() const { return &_class_data_; }


void SignatureDescriptors::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureDescriptors*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptors&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(from._internal_signatures());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptors::CopyFrom(const SignatureDescriptors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptors::IsInitialized() const {
  return true;
}

void SignatureDescriptors::InternalSwap(SignatureDescriptors* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_signatures()->InternalSwap(other->_internal_mutable_signatures());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptors::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_getter, &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[0]);
}
// ===================================================================

class SignatureDescriptor_Data_Single::_Internal {
 public:
};

SignatureDescriptor_Data_Single::SignatureDescriptor_Data_Single(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
}
SignatureDescriptor_Data_Single::SignatureDescriptor_Data_Single(const SignatureDescriptor_Data_Single& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureDescriptor_Data_Single* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_) {}

    , decltype(_impl_.mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
}

inline void SignatureDescriptor_Data_Single::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_) {}

    , decltype(_impl_.mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignatureDescriptor_Data_Single::~SignatureDescriptor_Data_Single() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureDescriptor_Data_Single::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
}

void SignatureDescriptor_Data_Single::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureDescriptor_Data_Single::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptor_Data_Single::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::cosmos::tx::signing::v1beta1::SignMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes signature = 2 [json_name = "signature"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignatureDescriptor_Data_Single::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_mode(), target);
  }

  // bytes signature = 2 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  return target;
}

::size_t SignatureDescriptor_Data_Single::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 2 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureDescriptor_Data_Single::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureDescriptor_Data_Single::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureDescriptor_Data_Single::GetClassData() const { return &_class_data_; }


void SignatureDescriptor_Data_Single::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureDescriptor_Data_Single*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptor_Data_Single&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptor_Data_Single::CopyFrom(const SignatureDescriptor_Data_Single& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptor_Data_Single::IsInitialized() const {
  return true;
}

void SignatureDescriptor_Data_Single::InternalSwap(SignatureDescriptor_Data_Single* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptor_Data_Single::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_getter, &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[1]);
}
// ===================================================================

class SignatureDescriptor_Data_Multi::_Internal {
 public:
  using HasBits = decltype(std::declval<SignatureDescriptor_Data_Multi>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignatureDescriptor_Data_Multi, _impl_._has_bits_);
  static const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& bitarray(const SignatureDescriptor_Data_Multi* msg);
  static void set_has_bitarray(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::crypto::multisig::v1beta1::CompactBitArray&
SignatureDescriptor_Data_Multi::_Internal::bitarray(const SignatureDescriptor_Data_Multi* msg) {
  return *msg->_impl_.bitarray_;
}
void SignatureDescriptor_Data_Multi::clear_bitarray() {
  if (_impl_.bitarray_ != nullptr) _impl_.bitarray_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignatureDescriptor_Data_Multi::SignatureDescriptor_Data_Multi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
}
SignatureDescriptor_Data_Multi::SignatureDescriptor_Data_Multi(const SignatureDescriptor_Data_Multi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureDescriptor_Data_Multi* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signatures_){from._impl_.signatures_}
    , decltype(_impl_.bitarray_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.bitarray_ = new ::cosmos::crypto::multisig::v1beta1::CompactBitArray(*from._impl_.bitarray_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
}

inline void SignatureDescriptor_Data_Multi::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signatures_){arena}
    , decltype(_impl_.bitarray_){nullptr}
  };
}

SignatureDescriptor_Data_Multi::~SignatureDescriptor_Data_Multi() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureDescriptor_Data_Multi::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_signatures()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.bitarray_;
}

void SignatureDescriptor_Data_Multi::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureDescriptor_Data_Multi::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signatures()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bitarray_ != nullptr);
    _impl_.bitarray_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptor_Data_Multi::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitarray(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignatureDescriptor_Data_Multi::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bitarray(this),
        _Internal::bitarray(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_signatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  return target;
}

::size_t SignatureDescriptor_Data_Multi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->_internal_signatures()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bitarray_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureDescriptor_Data_Multi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureDescriptor_Data_Multi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureDescriptor_Data_Multi::GetClassData() const { return &_class_data_; }


void SignatureDescriptor_Data_Multi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureDescriptor_Data_Multi*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptor_Data_Multi&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(from._internal_signatures());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_bitarray()->::cosmos::crypto::multisig::v1beta1::CompactBitArray::MergeFrom(
        from._internal_bitarray());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptor_Data_Multi::CopyFrom(const SignatureDescriptor_Data_Multi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptor_Data_Multi::IsInitialized() const {
  return true;
}

void SignatureDescriptor_Data_Multi::InternalSwap(SignatureDescriptor_Data_Multi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_signatures()->InternalSwap(other->_internal_mutable_signatures());
  swap(_impl_.bitarray_, other->_impl_.bitarray_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptor_Data_Multi::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_getter, &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[2]);
}
// ===================================================================

class SignatureDescriptor_Data::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data, _impl_._oneof_case_);
  static const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& single(const SignatureDescriptor_Data* msg);
  static const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& multi(const SignatureDescriptor_Data* msg);
};

const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single&
SignatureDescriptor_Data::_Internal::single(const SignatureDescriptor_Data* msg) {
  return *msg->_impl_.sum_.single_;
}
const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi&
SignatureDescriptor_Data::_Internal::multi(const SignatureDescriptor_Data* msg) {
  return *msg->_impl_.sum_.multi_;
}
void SignatureDescriptor_Data::set_allocated_single(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* single) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (single) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(single);
    if (message_arena != submessage_arena) {
      single = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single, submessage_arena);
    }
    set_has_single();
    _impl_.sum_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
}
void SignatureDescriptor_Data::set_allocated_multi(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multi);
    if (message_arena != submessage_arena) {
      multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi, submessage_arena);
    }
    set_has_multi();
    _impl_.sum_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
}
SignatureDescriptor_Data::SignatureDescriptor_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
}
SignatureDescriptor_Data::SignatureDescriptor_Data(const SignatureDescriptor_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureDescriptor_Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kSingle: {
      _this->_internal_mutable_single()->::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single::MergeFrom(
          from._internal_single());
      break;
    }
    case kMulti: {
      _this->_internal_mutable_multi()->::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi::MergeFrom(
          from._internal_multi());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
}

inline void SignatureDescriptor_Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

SignatureDescriptor_Data::~SignatureDescriptor_Data() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureDescriptor_Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void SignatureDescriptor_Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureDescriptor_Data::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  switch (sum_case()) {
    case kSingle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.single_;
      }
      break;
    }
    case kMulti: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.multi_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void SignatureDescriptor_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptor_Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignatureDescriptor_Data::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kSingle: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::single(this),
          _Internal::single(this).GetCachedSize(), target, stream);
      break;
    }
    case kMulti: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::multi(this),
          _Internal::multi(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  return target;
}

::size_t SignatureDescriptor_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];
    case kSingle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.single_);
      break;
    }
    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];
    case kMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.multi_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureDescriptor_Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureDescriptor_Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureDescriptor_Data::GetClassData() const { return &_class_data_; }


void SignatureDescriptor_Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureDescriptor_Data*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptor_Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kSingle: {
      _this->_internal_mutable_single()->::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single::MergeFrom(
          from._internal_single());
      break;
    }
    case kMulti: {
      _this->_internal_mutable_multi()->::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi::MergeFrom(
          from._internal_multi());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptor_Data::CopyFrom(const SignatureDescriptor_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptor_Data::IsInitialized() const {
  return true;
}

void SignatureDescriptor_Data::InternalSwap(SignatureDescriptor_Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptor_Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_getter, &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[3]);
}
// ===================================================================

class SignatureDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<SignatureDescriptor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& public_key(const SignatureDescriptor* msg);
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& data(const SignatureDescriptor* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
SignatureDescriptor::_Internal::public_key(const SignatureDescriptor* msg) {
  return *msg->_impl_.public_key_;
}
const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data&
SignatureDescriptor::_Internal::data(const SignatureDescriptor* msg) {
  return *msg->_impl_.data_;
}
void SignatureDescriptor::clear_public_key() {
  if (_impl_.public_key_ != nullptr) _impl_.public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignatureDescriptor::SignatureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor)
}
SignatureDescriptor::SignatureDescriptor(const SignatureDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_key_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.sequence_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.public_key_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.public_key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.data_ = new ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data(*from._impl_.data_);
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:cosmos.tx.signing.v1beta1.SignatureDescriptor)
}

inline void SignatureDescriptor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_key_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

  };
}

SignatureDescriptor::~SignatureDescriptor() {
  // @@protoc_insertion_point(destructor:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureDescriptor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.public_key_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void SignatureDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.public_key_ != nullptr);
      _impl_.public_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.data_ != nullptr);
      _impl_.data_->Clear();
    }
  }
  _impl_.sequence_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignatureDescriptor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::public_key(this),
        _Internal::public_key(this).GetCachedSize(), target, stream);
  }

  // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  return target;
}

::size_t SignatureDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.public_key_);
    }

    // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_);
    }

  }
  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureDescriptor::GetClassData() const { return &_class_data_; }


void SignatureDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureDescriptor*>(&to_msg);
  auto& from = static_cast<const SignatureDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_public_key()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_public_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_data()->::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data::MergeFrom(
          from._internal_data());
    }
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureDescriptor::CopyFrom(const SignatureDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.tx.signing.v1beta1.SignatureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureDescriptor::IsInitialized() const {
  return true;
}

void SignatureDescriptor::InternalSwap(SignatureDescriptor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.sequence_)
      + sizeof(SignatureDescriptor::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(SignatureDescriptor, _impl_.public_key_)>(
          reinterpret_cast<char*>(&_impl_.public_key_),
          reinterpret_cast<char*>(&other->_impl_.public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_getter, &descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_once,
      file_level_metadata_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace signing
}  // namespace tx
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::tx::signing::v1beta1::SignatureDescriptors*
Arena::CreateMaybeMessage< ::cosmos::tx::signing::v1beta1::SignatureDescriptors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::signing::v1beta1::SignatureDescriptors >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single*
Arena::CreateMaybeMessage< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi*
Arena::CreateMaybeMessage< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data*
Arena::CreateMaybeMessage< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::tx::signing::v1beta1::SignatureDescriptor*
Arena::CreateMaybeMessage< ::cosmos::tx::signing::v1beta1::SignatureDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::tx::signing::v1beta1::SignatureDescriptor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

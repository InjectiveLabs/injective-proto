// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/signing/v1beta1/signing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/crypto/multisig/v1beta1/multisig.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
namespace cosmos {
namespace tx {
namespace signing {
namespace v1beta1 {
class SignatureDescriptor;
struct SignatureDescriptorDefaultTypeInternal;
extern SignatureDescriptorDefaultTypeInternal _SignatureDescriptor_default_instance_;
class SignatureDescriptor_Data;
struct SignatureDescriptor_DataDefaultTypeInternal;
extern SignatureDescriptor_DataDefaultTypeInternal _SignatureDescriptor_Data_default_instance_;
class SignatureDescriptor_Data_Multi;
struct SignatureDescriptor_Data_MultiDefaultTypeInternal;
extern SignatureDescriptor_Data_MultiDefaultTypeInternal _SignatureDescriptor_Data_Multi_default_instance_;
class SignatureDescriptor_Data_Single;
struct SignatureDescriptor_Data_SingleDefaultTypeInternal;
extern SignatureDescriptor_Data_SingleDefaultTypeInternal _SignatureDescriptor_Data_Single_default_instance_;
class SignatureDescriptors;
struct SignatureDescriptorsDefaultTypeInternal;
extern SignatureDescriptorsDefaultTypeInternal _SignatureDescriptors_default_instance_;
}  // namespace v1beta1
}  // namespace signing
}  // namespace tx
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::tx::signing::v1beta1::SignatureDescriptor* Arena::CreateMaybeMessage<::cosmos::tx::signing::v1beta1::SignatureDescriptor>(Arena*);
template <>
::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* Arena::CreateMaybeMessage<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>(Arena*);
template <>
::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* Arena::CreateMaybeMessage<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi>(Arena*);
template <>
::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* Arena::CreateMaybeMessage<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single>(Arena*);
template <>
::cosmos::tx::signing::v1beta1::SignatureDescriptors* Arena::CreateMaybeMessage<::cosmos::tx::signing::v1beta1::SignatureDescriptors>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace tx {
namespace signing {
namespace v1beta1 {
enum SignMode : int {
  SIGN_MODE_UNSPECIFIED = 0,
  SIGN_MODE_DIRECT = 1,
  SIGN_MODE_TEXTUAL = 2,
  SIGN_MODE_DIRECT_AUX = 3,
  SIGN_MODE_LEGACY_AMINO_JSON = 127,
  SIGN_MODE_EIP_191 = 191,
  SignMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SignMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SignMode_IsValid(int value);
constexpr SignMode SignMode_MIN = static_cast<SignMode>(0);
constexpr SignMode SignMode_MAX = static_cast<SignMode>(191);
constexpr int SignMode_ARRAYSIZE = 191 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SignMode_descriptor();
template <typename T>
const std::string& SignMode_Name(T value) {
  static_assert(std::is_same<T, SignMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignMode_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(SignMode_descriptor(), value);
}
inline bool SignMode_Parse(absl::string_view name, SignMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignMode>(
      SignMode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SignatureDescriptors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptors) */ {
 public:
  inline SignatureDescriptors() : SignatureDescriptors(nullptr) {}
  ~SignatureDescriptors() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignatureDescriptors(const SignatureDescriptors& from);
  SignatureDescriptors(SignatureDescriptors&& from) noexcept
    : SignatureDescriptors() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptors& operator=(const SignatureDescriptors& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptors& operator=(SignatureDescriptors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptors& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureDescriptors* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptors*>(
               &_SignatureDescriptors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SignatureDescriptors& a, SignatureDescriptors& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptors* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptors* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignatureDescriptors>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptors& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignatureDescriptors& from) {
    SignatureDescriptors::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptors* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.signing.v1beta1.SignatureDescriptors";
  }
  protected:
  explicit SignatureDescriptors(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 1,
  };
  // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor >*
      mutable_signatures();
  private:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor& _internal_signatures(int index) const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor* _internal_add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>& _internal_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>* _internal_mutable_signatures();
  public:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor& signatures(int index) const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor >&
      signatures() const;
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor > signatures_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};// -------------------------------------------------------------------

class SignatureDescriptor_Data_Single final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single) */ {
 public:
  inline SignatureDescriptor_Data_Single() : SignatureDescriptor_Data_Single(nullptr) {}
  ~SignatureDescriptor_Data_Single() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptor_Data_Single(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignatureDescriptor_Data_Single(const SignatureDescriptor_Data_Single& from);
  SignatureDescriptor_Data_Single(SignatureDescriptor_Data_Single&& from) noexcept
    : SignatureDescriptor_Data_Single() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptor_Data_Single& operator=(const SignatureDescriptor_Data_Single& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data_Single& operator=(SignatureDescriptor_Data_Single&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptor_Data_Single& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureDescriptor_Data_Single* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data_Single*>(
               &_SignatureDescriptor_Data_Single_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignatureDescriptor_Data_Single& a, SignatureDescriptor_Data_Single& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptor_Data_Single* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data_Single* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptor_Data_Single* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignatureDescriptor_Data_Single>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptor_Data_Single& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignatureDescriptor_Data_Single& from) {
    SignatureDescriptor_Data_Single::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptor_Data_Single* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single";
  }
  protected:
  explicit SignatureDescriptor_Data_Single(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // bytes signature = 2 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
  void clear_mode() ;
  ::cosmos::tx::signing::v1beta1::SignMode mode() const;
  void set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  private:
  ::cosmos::tx::signing::v1beta1::SignMode _internal_mode() const;
  void _internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};// -------------------------------------------------------------------

class SignatureDescriptor_Data_Multi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi) */ {
 public:
  inline SignatureDescriptor_Data_Multi() : SignatureDescriptor_Data_Multi(nullptr) {}
  ~SignatureDescriptor_Data_Multi() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptor_Data_Multi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignatureDescriptor_Data_Multi(const SignatureDescriptor_Data_Multi& from);
  SignatureDescriptor_Data_Multi(SignatureDescriptor_Data_Multi&& from) noexcept
    : SignatureDescriptor_Data_Multi() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptor_Data_Multi& operator=(const SignatureDescriptor_Data_Multi& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data_Multi& operator=(SignatureDescriptor_Data_Multi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptor_Data_Multi& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureDescriptor_Data_Multi* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data_Multi*>(
               &_SignatureDescriptor_Data_Multi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SignatureDescriptor_Data_Multi& a, SignatureDescriptor_Data_Multi& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptor_Data_Multi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data_Multi* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptor_Data_Multi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignatureDescriptor_Data_Multi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptor_Data_Multi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignatureDescriptor_Data_Multi& from) {
    SignatureDescriptor_Data_Multi::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptor_Data_Multi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi";
  }
  protected:
  explicit SignatureDescriptor_Data_Multi(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 2,
    kBitarrayFieldNumber = 1,
  };
  // repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data >*
      mutable_signatures();
  private:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& _internal_signatures(int index) const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* _internal_add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>& _internal_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>* _internal_mutable_signatures();
  public:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& signatures(int index) const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data >&
      signatures() const;
  // .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
  bool has_bitarray() const;
  void clear_bitarray() ;
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& bitarray() const;
  PROTOBUF_NODISCARD ::cosmos::crypto::multisig::v1beta1::CompactBitArray* release_bitarray();
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* mutable_bitarray();
  void set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray);
  private:
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& _internal_bitarray() const;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* _internal_mutable_bitarray();
  public:
  void unsafe_arena_set_allocated_bitarray(
      ::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray);
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* unsafe_arena_release_bitarray();
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data > signatures_;
    ::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};// -------------------------------------------------------------------

class SignatureDescriptor_Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data) */ {
 public:
  inline SignatureDescriptor_Data() : SignatureDescriptor_Data(nullptr) {}
  ~SignatureDescriptor_Data() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptor_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignatureDescriptor_Data(const SignatureDescriptor_Data& from);
  SignatureDescriptor_Data(SignatureDescriptor_Data&& from) noexcept
    : SignatureDescriptor_Data() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptor_Data& operator=(const SignatureDescriptor_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor_Data& operator=(SignatureDescriptor_Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptor_Data& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kSingle = 1,
    kMulti = 2,
    SUM_NOT_SET = 0,
  };

  static inline const SignatureDescriptor_Data* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor_Data*>(
               &_SignatureDescriptor_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SignatureDescriptor_Data& a, SignatureDescriptor_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptor_Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor_Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptor_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignatureDescriptor_Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptor_Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignatureDescriptor_Data& from) {
    SignatureDescriptor_Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptor_Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.signing.v1beta1.SignatureDescriptor.Data";
  }
  protected:
  explicit SignatureDescriptor_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SignatureDescriptor_Data_Single Single;
  typedef SignatureDescriptor_Data_Multi Multi;

  // accessors -------------------------------------------------------

  enum : int {
    kSingleFieldNumber = 1,
    kMultiFieldNumber = 2,
  };
  // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];
  bool has_single() const;
  private:
  bool _internal_has_single() const;

  public:
  void clear_single() ;
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& single() const;
  PROTOBUF_NODISCARD ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* release_single();
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* mutable_single();
  void set_allocated_single(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* single);
  private:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& _internal_single() const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* _internal_mutable_single();
  public:
  void unsafe_arena_set_allocated_single(
      ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* single);
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* unsafe_arena_release_single();
  // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];
  bool has_multi() const;
  private:
  bool _internal_has_multi() const;

  public:
  void clear_multi() ;
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& multi() const;
  PROTOBUF_NODISCARD ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* release_multi();
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* mutable_multi();
  void set_allocated_multi(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* multi);
  private:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& _internal_multi() const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* _internal_mutable_multi();
  public:
  void unsafe_arena_set_allocated_multi(
      ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* multi);
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* unsafe_arena_release_multi();
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data)
 private:
  class _Internal;
  void set_has_single();
  void set_has_multi();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* single_;
      ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* multi_;
    } sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};// -------------------------------------------------------------------

class SignatureDescriptor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.tx.signing.v1beta1.SignatureDescriptor) */ {
 public:
  inline SignatureDescriptor() : SignatureDescriptor(nullptr) {}
  ~SignatureDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureDescriptor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignatureDescriptor(const SignatureDescriptor& from);
  SignatureDescriptor(SignatureDescriptor&& from) noexcept
    : SignatureDescriptor() {
    *this = ::std::move(from);
  }

  inline SignatureDescriptor& operator=(const SignatureDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureDescriptor& operator=(SignatureDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureDescriptor* internal_default_instance() {
    return reinterpret_cast<const SignatureDescriptor*>(
               &_SignatureDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SignatureDescriptor& a, SignatureDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignatureDescriptor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignatureDescriptor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignatureDescriptor& from) {
    SignatureDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureDescriptor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.tx.signing.v1beta1.SignatureDescriptor";
  }
  protected:
  explicit SignatureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SignatureDescriptor_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kDataFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& public_key() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_public_key();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_public_key();
  void set_allocated_public_key(::PROTOBUF_NAMESPACE_ID::Any* public_key);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_public_key() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::PROTOBUF_NAMESPACE_ID::Any* public_key);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_public_key();
  // .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
  bool has_data() const;
  void clear_data() ;
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& data() const;
  PROTOBUF_NODISCARD ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* release_data();
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* mutable_data();
  void set_allocated_data(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* data);
  private:
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& _internal_data() const;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* data);
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* unsafe_arena_release_data();
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.tx.signing.v1beta1.SignatureDescriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* public_key_;
    ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* data_;
    ::uint64_t sequence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SignatureDescriptors

// repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor signatures = 1 [json_name = "signatures"];
inline int SignatureDescriptors::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int SignatureDescriptors::signatures_size() const {
  return _internal_signatures_size();
}
inline void SignatureDescriptors::clear_signatures() {
  _internal_mutable_signatures()->Clear();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor* SignatureDescriptors::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor >*
SignatureDescriptors::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_mutable_signatures();
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor& SignatureDescriptors::_internal_signatures(int index) const {
  return _internal_signatures().Get(index);
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor& SignatureDescriptors::signatures(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_signatures(index);
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor* SignatureDescriptors::_internal_add_signatures() {
  return _internal_mutable_signatures()->Add();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor* SignatureDescriptors::add_signatures() {
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor* _add = _internal_add_signatures();
  // @@protoc_insertion_point(field_add:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor >&
SignatureDescriptors::signatures() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.signing.v1beta1.SignatureDescriptors.signatures)
  return _internal_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>&
SignatureDescriptors::_internal_signatures() const {
  return _impl_.signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor>*
SignatureDescriptors::_internal_mutable_signatures() {
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data_Single

// .cosmos.tx.signing.v1beta1.SignMode mode = 1 [json_name = "mode"];
inline void SignatureDescriptor_Data_Single::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::cosmos::tx::signing::v1beta1::SignMode SignatureDescriptor_Data_Single::mode() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.mode)
  return _internal_mode();
}
inline void SignatureDescriptor_Data_Single::set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.mode)
}
inline ::cosmos::tx::signing::v1beta1::SignMode SignatureDescriptor_Data_Single::_internal_mode() const {
  return static_cast<::cosmos::tx::signing::v1beta1::SignMode>(_impl_.mode_);
}
inline void SignatureDescriptor_Data_Single::_internal_set_mode(::cosmos::tx::signing::v1beta1::SignMode value) {
  ;
  _impl_.mode_ = value;
}

// bytes signature = 2 [json_name = "signature"];
inline void SignatureDescriptor_Data_Single::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SignatureDescriptor_Data_Single::signature() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignatureDescriptor_Data_Single::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}
inline std::string* SignatureDescriptor_Data_Single::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return _s;
}
inline const std::string& SignatureDescriptor_Data_Single::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void SignatureDescriptor_Data_Single::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SignatureDescriptor_Data_Single::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* SignatureDescriptor_Data_Single::release_signature() {
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
  return _impl_.signature_.Release();
}
inline void SignatureDescriptor_Data_Single::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single.signature)
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data_Multi

// .cosmos.crypto.multisig.v1beta1.CompactBitArray bitarray = 1 [json_name = "bitarray"];
inline bool SignatureDescriptor_Data_Multi::has_bitarray() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bitarray_ != nullptr);
  return value;
}
inline const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& SignatureDescriptor_Data_Multi::_internal_bitarray() const {
  const ::cosmos::crypto::multisig::v1beta1::CompactBitArray* p = _impl_.bitarray_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::crypto::multisig::v1beta1::CompactBitArray&>(
      ::cosmos::crypto::multisig::v1beta1::_CompactBitArray_default_instance_);
}
inline const ::cosmos::crypto::multisig::v1beta1::CompactBitArray& SignatureDescriptor_Data_Multi::bitarray() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
  return _internal_bitarray();
}
inline void SignatureDescriptor_Data_Multi::unsafe_arena_set_allocated_bitarray(
    ::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bitarray_);
  }
  _impl_.bitarray_ = bitarray;
  if (bitarray) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::release_bitarray() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* temp = _impl_.bitarray_;
  _impl_.bitarray_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::unsafe_arena_release_bitarray() {
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* temp = _impl_.bitarray_;
  _impl_.bitarray_ = nullptr;
  return temp;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::_internal_mutable_bitarray() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bitarray_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::crypto::multisig::v1beta1::CompactBitArray>(GetArenaForAllocation());
    _impl_.bitarray_ = p;
  }
  return _impl_.bitarray_;
}
inline ::cosmos::crypto::multisig::v1beta1::CompactBitArray* SignatureDescriptor_Data_Multi::mutable_bitarray() {
  ::cosmos::crypto::multisig::v1beta1::CompactBitArray* _msg = _internal_mutable_bitarray();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
  return _msg;
}
inline void SignatureDescriptor_Data_Multi::set_allocated_bitarray(::cosmos::crypto::multisig::v1beta1::CompactBitArray* bitarray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bitarray_);
  }
  if (bitarray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitarray));
    if (message_arena != submessage_arena) {
      bitarray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitarray, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bitarray_ = bitarray;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.bitarray)
}

// repeated .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data signatures = 2 [json_name = "signatures"];
inline int SignatureDescriptor_Data_Multi::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int SignatureDescriptor_Data_Multi::signatures_size() const {
  return _internal_signatures_size();
}
inline void SignatureDescriptor_Data_Multi::clear_signatures() {
  _internal_mutable_signatures()->Clear();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor_Data_Multi::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data >*
SignatureDescriptor_Data_Multi::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_mutable_signatures();
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor_Data_Multi::_internal_signatures(int index) const {
  return _internal_signatures().Get(index);
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor_Data_Multi::signatures(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_signatures(index);
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor_Data_Multi::_internal_add_signatures() {
  return _internal_mutable_signatures()->Add();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor_Data_Multi::add_signatures() {
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* _add = _internal_add_signatures();
  // @@protoc_insertion_point(field_add:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data >&
SignatureDescriptor_Data_Multi::signatures() const {
  // @@protoc_insertion_point(field_list:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi.signatures)
  return _internal_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>&
SignatureDescriptor_Data_Multi::_internal_signatures() const {
  return _impl_.signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>*
SignatureDescriptor_Data_Multi::_internal_mutable_signatures() {
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// SignatureDescriptor_Data

// .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Single single = 1 [json_name = "single"];
inline bool SignatureDescriptor_Data::has_single() const {
  return sum_case() == kSingle;
}
inline bool SignatureDescriptor_Data::_internal_has_single() const {
  return sum_case() == kSingle;
}
inline void SignatureDescriptor_Data::set_has_single() {
  _impl_._oneof_case_[0] = kSingle;
}
inline void SignatureDescriptor_Data::clear_single() {
  if (sum_case() == kSingle) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.single_;
    }
    clear_has_sum();
  }
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::release_single() {
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
  if (sum_case() == kSingle) {
    clear_has_sum();
    ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* temp = _impl_.sum_.single_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& SignatureDescriptor_Data::_internal_single() const {
  return sum_case() == kSingle
      ? *_impl_.sum_.single_
      : reinterpret_cast<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single&>(::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_Single_default_instance_);
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single& SignatureDescriptor_Data::single() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
  return _internal_single();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::unsafe_arena_release_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
  if (sum_case() == kSingle) {
    clear_has_sum();
    ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* temp = _impl_.sum_.single_;
    _impl_.sum_.single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignatureDescriptor_Data::unsafe_arena_set_allocated_single(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* single) {
  clear_sum();
  if (single) {
    set_has_single();
    _impl_.sum_.single_ = single;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::_internal_mutable_single() {
  if (sum_case() != kSingle) {
    clear_sum();
    set_has_single();
    _impl_.sum_.single_ = CreateMaybeMessage< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single >(GetArenaForAllocation());
  }
  return _impl_.sum_.single_;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* SignatureDescriptor_Data::mutable_single() {
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Single* _msg = _internal_mutable_single();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.single)
  return _msg;
}

// .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.Multi multi = 2 [json_name = "multi"];
inline bool SignatureDescriptor_Data::has_multi() const {
  return sum_case() == kMulti;
}
inline bool SignatureDescriptor_Data::_internal_has_multi() const {
  return sum_case() == kMulti;
}
inline void SignatureDescriptor_Data::set_has_multi() {
  _impl_._oneof_case_[0] = kMulti;
}
inline void SignatureDescriptor_Data::clear_multi() {
  if (sum_case() == kMulti) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.multi_;
    }
    clear_has_sum();
  }
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::release_multi() {
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
  if (sum_case() == kMulti) {
    clear_has_sum();
    ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* temp = _impl_.sum_.multi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& SignatureDescriptor_Data::_internal_multi() const {
  return sum_case() == kMulti
      ? *_impl_.sum_.multi_
      : reinterpret_cast<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi&>(::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_Multi_default_instance_);
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi& SignatureDescriptor_Data::multi() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
  return _internal_multi();
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::unsafe_arena_release_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
  if (sum_case() == kMulti) {
    clear_has_sum();
    ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* temp = _impl_.sum_.multi_;
    _impl_.sum_.multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SignatureDescriptor_Data::unsafe_arena_set_allocated_multi(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* multi) {
  clear_sum();
  if (multi) {
    set_has_multi();
    _impl_.sum_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::_internal_mutable_multi() {
  if (sum_case() != kMulti) {
    clear_sum();
    set_has_multi();
    _impl_.sum_.multi_ = CreateMaybeMessage< ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi >(GetArenaForAllocation());
  }
  return _impl_.sum_.multi_;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* SignatureDescriptor_Data::mutable_multi() {
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data_Multi* _msg = _internal_mutable_multi();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.Data.multi)
  return _msg;
}

inline bool SignatureDescriptor_Data::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void SignatureDescriptor_Data::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline SignatureDescriptor_Data::SumCase SignatureDescriptor_Data::sum_case() const {
  return SignatureDescriptor_Data::SumCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SignatureDescriptor

// .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
inline bool SignatureDescriptor::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SignatureDescriptor::_internal_public_key() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& SignatureDescriptor::public_key() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
  return _internal_public_key();
}
inline void SignatureDescriptor::unsafe_arena_set_allocated_public_key(
    ::PROTOBUF_NAMESPACE_ID::Any* public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = public_key;
  if (public_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignatureDescriptor::release_public_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignatureDescriptor::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignatureDescriptor::_internal_mutable_public_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.public_key_ = p;
  }
  return _impl_.public_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* SignatureDescriptor::mutable_public_key() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
  return _msg;
}
inline void SignatureDescriptor::set_allocated_public_key(::PROTOBUF_NAMESPACE_ID::Any* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_key_);
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key));
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.public_key)
}

// .cosmos.tx.signing.v1beta1.SignatureDescriptor.Data data = 2 [json_name = "data"];
inline bool SignatureDescriptor::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void SignatureDescriptor::clear_data() {
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor::_internal_data() const {
  const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data&>(
      ::cosmos::tx::signing::v1beta1::_SignatureDescriptor_Data_default_instance_);
}
inline const ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data& SignatureDescriptor::data() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
  return _internal_data();
}
inline void SignatureDescriptor::unsafe_arena_set_allocated_data(
    ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::release_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* SignatureDescriptor::mutable_data() {
  ::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
  return _msg;
}
inline void SignatureDescriptor::set_allocated_data(::cosmos::tx::signing::v1beta1::SignatureDescriptor_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:cosmos.tx.signing.v1beta1.SignatureDescriptor.data)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void SignatureDescriptor::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t SignatureDescriptor::sequence() const {
  // @@protoc_insertion_point(field_get:cosmos.tx.signing.v1beta1.SignatureDescriptor.sequence)
  return _internal_sequence();
}
inline void SignatureDescriptor::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:cosmos.tx.signing.v1beta1.SignatureDescriptor.sequence)
}
inline ::uint64_t SignatureDescriptor::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void SignatureDescriptor::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace signing
}  // namespace tx
}  // namespace cosmos


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cosmos::tx::signing::v1beta1::SignMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::tx::signing::v1beta1::SignMode>() {
  return ::cosmos::tx::signing::v1beta1::SignMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2ftx_2fsigning_2fv1beta1_2fsigning_2eproto_2epb_2eh

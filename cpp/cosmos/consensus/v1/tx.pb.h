// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/consensus/v1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fconsensus_2fv1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fconsensus_2fv1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "tendermint/types/params.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fconsensus_2fv1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fconsensus_2fv1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fconsensus_2fv1_2ftx_2eproto;
namespace cosmos {
namespace consensus {
namespace v1 {
class MsgUpdateParams;
struct MsgUpdateParamsDefaultTypeInternal;
extern MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
class MsgUpdateParamsResponse;
struct MsgUpdateParamsResponseDefaultTypeInternal;
extern MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
}  // namespace v1
}  // namespace consensus
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::consensus::v1::MsgUpdateParams* Arena::CreateMaybeMessage<::cosmos::consensus::v1::MsgUpdateParams>(Arena*);
template <>
::cosmos::consensus::v1::MsgUpdateParamsResponse* Arena::CreateMaybeMessage<::cosmos::consensus::v1::MsgUpdateParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace consensus {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgUpdateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.consensus.v1.MsgUpdateParams) */ {
 public:
  inline MsgUpdateParams() : MsgUpdateParams(nullptr) {}
  ~MsgUpdateParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParams(const MsgUpdateParams& from);
  MsgUpdateParams(MsgUpdateParams&& from) noexcept
    : MsgUpdateParams() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParams& operator=(const MsgUpdateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParams& operator=(MsgUpdateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParams* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParams*>(
               &_MsgUpdateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgUpdateParams& a, MsgUpdateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateParams& from) {
    MsgUpdateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.consensus.v1.MsgUpdateParams";
  }
  protected:
  explicit MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kBlockFieldNumber = 2,
    kEvidenceFieldNumber = 3,
    kValidatorFieldNumber = 4,
  };
  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .tendermint.types.BlockParams block = 2 [json_name = "block"];
  bool has_block() const;
  void clear_block() ;
  const ::tendermint::types::BlockParams& block() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockParams* release_block();
  ::tendermint::types::BlockParams* mutable_block();
  void set_allocated_block(::tendermint::types::BlockParams* block);
  private:
  const ::tendermint::types::BlockParams& _internal_block() const;
  ::tendermint::types::BlockParams* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tendermint::types::BlockParams* block);
  ::tendermint::types::BlockParams* unsafe_arena_release_block();
  // .tendermint.types.EvidenceParams evidence = 3 [json_name = "evidence"];
  bool has_evidence() const;
  void clear_evidence() ;
  const ::tendermint::types::EvidenceParams& evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::EvidenceParams* release_evidence();
  ::tendermint::types::EvidenceParams* mutable_evidence();
  void set_allocated_evidence(::tendermint::types::EvidenceParams* evidence);
  private:
  const ::tendermint::types::EvidenceParams& _internal_evidence() const;
  ::tendermint::types::EvidenceParams* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::tendermint::types::EvidenceParams* evidence);
  ::tendermint::types::EvidenceParams* unsafe_arena_release_evidence();
  // .tendermint.types.ValidatorParams validator = 4 [json_name = "validator"];
  bool has_validator() const;
  void clear_validator() ;
  const ::tendermint::types::ValidatorParams& validator() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorParams* release_validator();
  ::tendermint::types::ValidatorParams* mutable_validator();
  void set_allocated_validator(::tendermint::types::ValidatorParams* validator);
  private:
  const ::tendermint::types::ValidatorParams& _internal_validator() const;
  ::tendermint::types::ValidatorParams* _internal_mutable_validator();
  public:
  void unsafe_arena_set_allocated_validator(
      ::tendermint::types::ValidatorParams* validator);
  ::tendermint::types::ValidatorParams* unsafe_arena_release_validator();
  // @@protoc_insertion_point(class_scope:cosmos.consensus.v1.MsgUpdateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::tendermint::types::BlockParams* block_;
    ::tendermint::types::EvidenceParams* evidence_;
    ::tendermint::types::ValidatorParams* validator_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fconsensus_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.consensus.v1.MsgUpdateParamsResponse) */ {
 public:
  inline MsgUpdateParamsResponse() : MsgUpdateParamsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from);
  MsgUpdateParamsResponse(MsgUpdateParamsResponse&& from) noexcept
    : MsgUpdateParamsResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParamsResponse& operator=(const MsgUpdateParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParamsResponse& operator=(MsgUpdateParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParamsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParamsResponse*>(
               &_MsgUpdateParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgUpdateParamsResponse& a, MsgUpdateParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.consensus.v1.MsgUpdateParamsResponse";
  }
  protected:
  explicit MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.consensus.v1.MsgUpdateParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fconsensus_2fv1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgUpdateParams

// string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateParams::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateParams::authority() const {
  // @@protoc_insertion_point(field_get:cosmos.consensus.v1.MsgUpdateParams.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateParams::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.consensus.v1.MsgUpdateParams.authority)
}
inline std::string* MsgUpdateParams::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:cosmos.consensus.v1.MsgUpdateParams.authority)
  return _s;
}
inline const std::string& MsgUpdateParams::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateParams::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::release_authority() {
  // @@protoc_insertion_point(field_release:cosmos.consensus.v1.MsgUpdateParams.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateParams::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.consensus.v1.MsgUpdateParams.authority)
}

// .tendermint.types.BlockParams block = 2 [json_name = "block"];
inline bool MsgUpdateParams::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_ != nullptr);
  return value;
}
inline const ::tendermint::types::BlockParams& MsgUpdateParams::_internal_block() const {
  const ::tendermint::types::BlockParams* p = _impl_.block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockParams&>(
      ::tendermint::types::_BlockParams_default_instance_);
}
inline const ::tendermint::types::BlockParams& MsgUpdateParams::block() const {
  // @@protoc_insertion_point(field_get:cosmos.consensus.v1.MsgUpdateParams.block)
  return _internal_block();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_block(
    ::tendermint::types::BlockParams* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  _impl_.block_ = block;
  if (block) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.consensus.v1.MsgUpdateParams.block)
}
inline ::tendermint::types::BlockParams* MsgUpdateParams::release_block() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockParams* temp = _impl_.block_;
  _impl_.block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockParams* MsgUpdateParams::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:cosmos.consensus.v1.MsgUpdateParams.block)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockParams* temp = _impl_.block_;
  _impl_.block_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockParams* MsgUpdateParams::_internal_mutable_block() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockParams>(GetArenaForAllocation());
    _impl_.block_ = p;
  }
  return _impl_.block_;
}
inline ::tendermint::types::BlockParams* MsgUpdateParams::mutable_block() {
  ::tendermint::types::BlockParams* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:cosmos.consensus.v1.MsgUpdateParams.block)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_block(::tendermint::types::BlockParams* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_ = block;
  // @@protoc_insertion_point(field_set_allocated:cosmos.consensus.v1.MsgUpdateParams.block)
}

// .tendermint.types.EvidenceParams evidence = 3 [json_name = "evidence"];
inline bool MsgUpdateParams::has_evidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evidence_ != nullptr);
  return value;
}
inline const ::tendermint::types::EvidenceParams& MsgUpdateParams::_internal_evidence() const {
  const ::tendermint::types::EvidenceParams* p = _impl_.evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::EvidenceParams&>(
      ::tendermint::types::_EvidenceParams_default_instance_);
}
inline const ::tendermint::types::EvidenceParams& MsgUpdateParams::evidence() const {
  // @@protoc_insertion_point(field_get:cosmos.consensus.v1.MsgUpdateParams.evidence)
  return _internal_evidence();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_evidence(
    ::tendermint::types::EvidenceParams* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.evidence_);
  }
  _impl_.evidence_ = evidence;
  if (evidence) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.consensus.v1.MsgUpdateParams.evidence)
}
inline ::tendermint::types::EvidenceParams* MsgUpdateParams::release_evidence() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::EvidenceParams* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::EvidenceParams* MsgUpdateParams::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:cosmos.consensus.v1.MsgUpdateParams.evidence)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::EvidenceParams* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  return temp;
}
inline ::tendermint::types::EvidenceParams* MsgUpdateParams::_internal_mutable_evidence() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::EvidenceParams>(GetArenaForAllocation());
    _impl_.evidence_ = p;
  }
  return _impl_.evidence_;
}
inline ::tendermint::types::EvidenceParams* MsgUpdateParams::mutable_evidence() {
  ::tendermint::types::EvidenceParams* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:cosmos.consensus.v1.MsgUpdateParams.evidence)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_evidence(::tendermint::types::EvidenceParams* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.evidence_);
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(evidence));
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:cosmos.consensus.v1.MsgUpdateParams.evidence)
}

// .tendermint.types.ValidatorParams validator = 4 [json_name = "validator"];
inline bool MsgUpdateParams::has_validator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_ != nullptr);
  return value;
}
inline const ::tendermint::types::ValidatorParams& MsgUpdateParams::_internal_validator() const {
  const ::tendermint::types::ValidatorParams* p = _impl_.validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorParams&>(
      ::tendermint::types::_ValidatorParams_default_instance_);
}
inline const ::tendermint::types::ValidatorParams& MsgUpdateParams::validator() const {
  // @@protoc_insertion_point(field_get:cosmos.consensus.v1.MsgUpdateParams.validator)
  return _internal_validator();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_validator(
    ::tendermint::types::ValidatorParams* validator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_);
  }
  _impl_.validator_ = validator;
  if (validator) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.consensus.v1.MsgUpdateParams.validator)
}
inline ::tendermint::types::ValidatorParams* MsgUpdateParams::release_validator() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::ValidatorParams* temp = _impl_.validator_;
  _impl_.validator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorParams* MsgUpdateParams::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_release:cosmos.consensus.v1.MsgUpdateParams.validator)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::ValidatorParams* temp = _impl_.validator_;
  _impl_.validator_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorParams* MsgUpdateParams::_internal_mutable_validator() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.validator_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorParams>(GetArenaForAllocation());
    _impl_.validator_ = p;
  }
  return _impl_.validator_;
}
inline ::tendermint::types::ValidatorParams* MsgUpdateParams::mutable_validator() {
  ::tendermint::types::ValidatorParams* _msg = _internal_mutable_validator();
  // @@protoc_insertion_point(field_mutable:cosmos.consensus.v1.MsgUpdateParams.validator)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_validator(::tendermint::types::ValidatorParams* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_);
  }
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator));
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.validator_ = validator;
  // @@protoc_insertion_point(field_set_allocated:cosmos.consensus.v1.MsgUpdateParams.validator)
}

// -------------------------------------------------------------------

// MsgUpdateParamsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace consensus
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fconsensus_2fv1_2ftx_2eproto_2epb_2eh

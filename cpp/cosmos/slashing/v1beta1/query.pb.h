// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/slashing/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/slashing/v1beta1/slashing.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fslashing_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fslashing_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fslashing_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace slashing {
namespace v1beta1 {
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
class QuerySigningInfoRequest;
struct QuerySigningInfoRequestDefaultTypeInternal;
extern QuerySigningInfoRequestDefaultTypeInternal _QuerySigningInfoRequest_default_instance_;
class QuerySigningInfoResponse;
struct QuerySigningInfoResponseDefaultTypeInternal;
extern QuerySigningInfoResponseDefaultTypeInternal _QuerySigningInfoResponse_default_instance_;
class QuerySigningInfosRequest;
struct QuerySigningInfosRequestDefaultTypeInternal;
extern QuerySigningInfosRequestDefaultTypeInternal _QuerySigningInfosRequest_default_instance_;
class QuerySigningInfosResponse;
struct QuerySigningInfosResponseDefaultTypeInternal;
extern QuerySigningInfosResponseDefaultTypeInternal _QuerySigningInfosResponse_default_instance_;
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::slashing::v1beta1::QueryParamsRequest* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::QueryParamsRequest>(Arena*);
template <>
::cosmos::slashing::v1beta1::QueryParamsResponse* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::QueryParamsResponse>(Arena*);
template <>
::cosmos::slashing::v1beta1::QuerySigningInfoRequest* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::QuerySigningInfoRequest>(Arena*);
template <>
::cosmos::slashing::v1beta1::QuerySigningInfoResponse* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::QuerySigningInfoResponse>(Arena*);
template <>
::cosmos::slashing::v1beta1::QuerySigningInfosRequest* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::QuerySigningInfosRequest>(Arena*);
template <>
::cosmos::slashing::v1beta1::QuerySigningInfosResponse* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::QuerySigningInfosResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace slashing {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .cosmos.slashing.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmos::slashing::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmos::slashing::v1beta1::Params* release_params();
  ::cosmos::slashing::v1beta1::Params* mutable_params();
  void set_allocated_params(::cosmos::slashing::v1beta1::Params* params);
  private:
  const ::cosmos::slashing::v1beta1::Params& _internal_params() const;
  ::cosmos::slashing::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmos::slashing::v1beta1::Params* params);
  ::cosmos::slashing::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::slashing::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySigningInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.QuerySigningInfoRequest) */ {
 public:
  inline QuerySigningInfoRequest() : QuerySigningInfoRequest(nullptr) {}
  ~QuerySigningInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySigningInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySigningInfoRequest(const QuerySigningInfoRequest& from);
  QuerySigningInfoRequest(QuerySigningInfoRequest&& from) noexcept
    : QuerySigningInfoRequest() {
    *this = ::std::move(from);
  }

  inline QuerySigningInfoRequest& operator=(const QuerySigningInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySigningInfoRequest& operator=(QuerySigningInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySigningInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySigningInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySigningInfoRequest*>(
               &_QuerySigningInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuerySigningInfoRequest& a, QuerySigningInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySigningInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySigningInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySigningInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySigningInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySigningInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySigningInfoRequest& from) {
    QuerySigningInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySigningInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.QuerySigningInfoRequest";
  }
  protected:
  explicit QuerySigningInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsAddressFieldNumber = 1,
  };
  // string cons_address = 1 [json_name = "consAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_cons_address() ;
  const std::string& cons_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cons_address(Arg_&& arg, Args_... args);
  std::string* mutable_cons_address();
  PROTOBUF_NODISCARD std::string* release_cons_address();
  void set_allocated_cons_address(std::string* ptr);

  private:
  const std::string& _internal_cons_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cons_address(
      const std::string& value);
  std::string* _internal_mutable_cons_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.QuerySigningInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cons_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySigningInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.QuerySigningInfoResponse) */ {
 public:
  inline QuerySigningInfoResponse() : QuerySigningInfoResponse(nullptr) {}
  ~QuerySigningInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySigningInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySigningInfoResponse(const QuerySigningInfoResponse& from);
  QuerySigningInfoResponse(QuerySigningInfoResponse&& from) noexcept
    : QuerySigningInfoResponse() {
    *this = ::std::move(from);
  }

  inline QuerySigningInfoResponse& operator=(const QuerySigningInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySigningInfoResponse& operator=(QuerySigningInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySigningInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySigningInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySigningInfoResponse*>(
               &_QuerySigningInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QuerySigningInfoResponse& a, QuerySigningInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySigningInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySigningInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySigningInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySigningInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySigningInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySigningInfoResponse& from) {
    QuerySigningInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySigningInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.QuerySigningInfoResponse";
  }
  protected:
  explicit QuerySigningInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValSigningInfoFieldNumber = 1,
  };
  // .cosmos.slashing.v1beta1.ValidatorSigningInfo val_signing_info = 1 [json_name = "valSigningInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_val_signing_info() const;
  void clear_val_signing_info() ;
  const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& val_signing_info() const;
  PROTOBUF_NODISCARD ::cosmos::slashing::v1beta1::ValidatorSigningInfo* release_val_signing_info();
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* mutable_val_signing_info();
  void set_allocated_val_signing_info(::cosmos::slashing::v1beta1::ValidatorSigningInfo* val_signing_info);
  private:
  const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& _internal_val_signing_info() const;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* _internal_mutable_val_signing_info();
  public:
  void unsafe_arena_set_allocated_val_signing_info(
      ::cosmos::slashing::v1beta1::ValidatorSigningInfo* val_signing_info);
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* unsafe_arena_release_val_signing_info();
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.QuerySigningInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::slashing::v1beta1::ValidatorSigningInfo* val_signing_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySigningInfosRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.QuerySigningInfosRequest) */ {
 public:
  inline QuerySigningInfosRequest() : QuerySigningInfosRequest(nullptr) {}
  ~QuerySigningInfosRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySigningInfosRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySigningInfosRequest(const QuerySigningInfosRequest& from);
  QuerySigningInfosRequest(QuerySigningInfosRequest&& from) noexcept
    : QuerySigningInfosRequest() {
    *this = ::std::move(from);
  }

  inline QuerySigningInfosRequest& operator=(const QuerySigningInfosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySigningInfosRequest& operator=(QuerySigningInfosRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySigningInfosRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySigningInfosRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySigningInfosRequest*>(
               &_QuerySigningInfosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QuerySigningInfosRequest& a, QuerySigningInfosRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySigningInfosRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySigningInfosRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySigningInfosRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySigningInfosRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySigningInfosRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySigningInfosRequest& from) {
    QuerySigningInfosRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySigningInfosRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.QuerySigningInfosRequest";
  }
  protected:
  explicit QuerySigningInfosRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.QuerySigningInfosRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySigningInfosResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.QuerySigningInfosResponse) */ {
 public:
  inline QuerySigningInfosResponse() : QuerySigningInfosResponse(nullptr) {}
  ~QuerySigningInfosResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySigningInfosResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySigningInfosResponse(const QuerySigningInfosResponse& from);
  QuerySigningInfosResponse(QuerySigningInfosResponse&& from) noexcept
    : QuerySigningInfosResponse() {
    *this = ::std::move(from);
  }

  inline QuerySigningInfosResponse& operator=(const QuerySigningInfosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySigningInfosResponse& operator=(QuerySigningInfosResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySigningInfosResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySigningInfosResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySigningInfosResponse*>(
               &_QuerySigningInfosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QuerySigningInfosResponse& a, QuerySigningInfosResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySigningInfosResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySigningInfosResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySigningInfosResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySigningInfosResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySigningInfosResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySigningInfosResponse& from) {
    QuerySigningInfosResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySigningInfosResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.QuerySigningInfosResponse";
  }
  protected:
  explicit QuerySigningInfosResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .cosmos.slashing.v1beta1.ValidatorSigningInfo info = 1 [json_name = "info", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int info_size() const;
  private:
  int _internal_info_size() const;

  public:
  void clear_info() ;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* mutable_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorSigningInfo >*
      mutable_info();
  private:
  const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& _internal_info(int index) const;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* _internal_add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::ValidatorSigningInfo>& _internal_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::ValidatorSigningInfo>* _internal_mutable_info();
  public:
  const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& info(int index) const;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* add_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorSigningInfo >&
      info() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.QuerySigningInfosResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorSigningInfo > info_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .cosmos.slashing.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmos::slashing::v1beta1::Params& QueryParamsResponse::_internal_params() const {
  const ::cosmos::slashing::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::slashing::v1beta1::Params&>(
      ::cosmos::slashing::v1beta1::_Params_default_instance_);
}
inline const ::cosmos::slashing::v1beta1::Params& QueryParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(
    ::cosmos::slashing::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.slashing.v1beta1.QueryParamsResponse.params)
}
inline ::cosmos::slashing::v1beta1::Params* QueryParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::slashing::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::slashing::v1beta1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.QueryParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::slashing::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmos::slashing::v1beta1::Params* QueryParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::slashing::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmos::slashing::v1beta1::Params* QueryParamsResponse::mutable_params() {
  ::cosmos::slashing::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::cosmos::slashing::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QuerySigningInfoRequest

// string cons_address = 1 [json_name = "consAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QuerySigningInfoRequest::clear_cons_address() {
  _impl_.cons_address_.ClearToEmpty();
}
inline const std::string& QuerySigningInfoRequest::cons_address() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.QuerySigningInfoRequest.cons_address)
  return _internal_cons_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuerySigningInfoRequest::set_cons_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.cons_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.QuerySigningInfoRequest.cons_address)
}
inline std::string* QuerySigningInfoRequest::mutable_cons_address() {
  std::string* _s = _internal_mutable_cons_address();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.QuerySigningInfoRequest.cons_address)
  return _s;
}
inline const std::string& QuerySigningInfoRequest::_internal_cons_address() const {
  return _impl_.cons_address_.Get();
}
inline void QuerySigningInfoRequest::_internal_set_cons_address(const std::string& value) {
  ;


  _impl_.cons_address_.Set(value, GetArenaForAllocation());
}
inline std::string* QuerySigningInfoRequest::_internal_mutable_cons_address() {
  ;
  return _impl_.cons_address_.Mutable( GetArenaForAllocation());
}
inline std::string* QuerySigningInfoRequest::release_cons_address() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.QuerySigningInfoRequest.cons_address)
  return _impl_.cons_address_.Release();
}
inline void QuerySigningInfoRequest::set_allocated_cons_address(std::string* value) {
  _impl_.cons_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cons_address_.IsDefault()) {
          _impl_.cons_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.QuerySigningInfoRequest.cons_address)
}

// -------------------------------------------------------------------

// QuerySigningInfoResponse

// .cosmos.slashing.v1beta1.ValidatorSigningInfo val_signing_info = 1 [json_name = "valSigningInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QuerySigningInfoResponse::has_val_signing_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.val_signing_info_ != nullptr);
  return value;
}
inline const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& QuerySigningInfoResponse::_internal_val_signing_info() const {
  const ::cosmos::slashing::v1beta1::ValidatorSigningInfo* p = _impl_.val_signing_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::slashing::v1beta1::ValidatorSigningInfo&>(
      ::cosmos::slashing::v1beta1::_ValidatorSigningInfo_default_instance_);
}
inline const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& QuerySigningInfoResponse::val_signing_info() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.QuerySigningInfoResponse.val_signing_info)
  return _internal_val_signing_info();
}
inline void QuerySigningInfoResponse::unsafe_arena_set_allocated_val_signing_info(
    ::cosmos::slashing::v1beta1::ValidatorSigningInfo* val_signing_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.val_signing_info_);
  }
  _impl_.val_signing_info_ = val_signing_info;
  if (val_signing_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.slashing.v1beta1.QuerySigningInfoResponse.val_signing_info)
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* QuerySigningInfoResponse::release_val_signing_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* temp = _impl_.val_signing_info_;
  _impl_.val_signing_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* QuerySigningInfoResponse::unsafe_arena_release_val_signing_info() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.QuerySigningInfoResponse.val_signing_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* temp = _impl_.val_signing_info_;
  _impl_.val_signing_info_ = nullptr;
  return temp;
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* QuerySigningInfoResponse::_internal_mutable_val_signing_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.val_signing_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::slashing::v1beta1::ValidatorSigningInfo>(GetArenaForAllocation());
    _impl_.val_signing_info_ = p;
  }
  return _impl_.val_signing_info_;
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* QuerySigningInfoResponse::mutable_val_signing_info() {
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* _msg = _internal_mutable_val_signing_info();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.QuerySigningInfoResponse.val_signing_info)
  return _msg;
}
inline void QuerySigningInfoResponse::set_allocated_val_signing_info(::cosmos::slashing::v1beta1::ValidatorSigningInfo* val_signing_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.val_signing_info_);
  }
  if (val_signing_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(val_signing_info));
    if (message_arena != submessage_arena) {
      val_signing_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, val_signing_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.val_signing_info_ = val_signing_info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.QuerySigningInfoResponse.val_signing_info)
}

// -------------------------------------------------------------------

// QuerySigningInfosRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QuerySigningInfosRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QuerySigningInfosRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QuerySigningInfosRequest::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.QuerySigningInfosRequest.pagination)
  return _internal_pagination();
}
inline void QuerySigningInfosRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.slashing.v1beta1.QuerySigningInfosRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySigningInfosRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySigningInfosRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.QuerySigningInfosRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySigningInfosRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QuerySigningInfosRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.QuerySigningInfosRequest.pagination)
  return _msg;
}
inline void QuerySigningInfosRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.QuerySigningInfosRequest.pagination)
}

// -------------------------------------------------------------------

// QuerySigningInfosResponse

// repeated .cosmos.slashing.v1beta1.ValidatorSigningInfo info = 1 [json_name = "info", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int QuerySigningInfosResponse::_internal_info_size() const {
  return _impl_.info_.size();
}
inline int QuerySigningInfosResponse::info_size() const {
  return _internal_info_size();
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* QuerySigningInfosResponse::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.QuerySigningInfosResponse.info)
  return _internal_mutable_info()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorSigningInfo >*
QuerySigningInfosResponse::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.slashing.v1beta1.QuerySigningInfosResponse.info)
  return _internal_mutable_info();
}
inline const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& QuerySigningInfosResponse::_internal_info(int index) const {
  return _internal_info().Get(index);
}
inline const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& QuerySigningInfosResponse::info(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.QuerySigningInfosResponse.info)
  return _internal_info(index);
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* QuerySigningInfosResponse::_internal_add_info() {
  return _internal_mutable_info()->Add();
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* QuerySigningInfosResponse::add_info() {
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* _add = _internal_add_info();
  // @@protoc_insertion_point(field_add:cosmos.slashing.v1beta1.QuerySigningInfosResponse.info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorSigningInfo >&
QuerySigningInfosResponse::info() const {
  // @@protoc_insertion_point(field_list:cosmos.slashing.v1beta1.QuerySigningInfosResponse.info)
  return _internal_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::ValidatorSigningInfo>&
QuerySigningInfosResponse::_internal_info() const {
  return _impl_.info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::ValidatorSigningInfo>*
QuerySigningInfosResponse::_internal_mutable_info() {
  return &_impl_.info_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QuerySigningInfosResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QuerySigningInfosResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QuerySigningInfosResponse::pagination() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.QuerySigningInfosResponse.pagination)
  return _internal_pagination();
}
inline void QuerySigningInfosResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.slashing.v1beta1.QuerySigningInfosResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySigningInfosResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySigningInfosResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.QuerySigningInfosResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySigningInfosResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySigningInfosResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.QuerySigningInfosResponse.pagination)
  return _msg;
}
inline void QuerySigningInfosResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.QuerySigningInfosResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fquery_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/slashing/v1beta1/slashing.proto

#include "cosmos/slashing/v1beta1/slashing.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace slashing {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR ValidatorSigningInfo::ValidatorSigningInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.jailed_until_)*/nullptr
  , /*decltype(_impl_.start_height_)*/ ::int64_t{0}

  , /*decltype(_impl_.index_offset_)*/ ::int64_t{0}

  , /*decltype(_impl_.missed_blocks_counter_)*/ ::int64_t{0}

  , /*decltype(_impl_.tombstoned_)*/ false
} {}
struct ValidatorSigningInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorSigningInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorSigningInfoDefaultTypeInternal() {}
  union {
    ValidatorSigningInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorSigningInfoDefaultTypeInternal _ValidatorSigningInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_signed_per_window_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.slash_fraction_double_sign_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.slash_fraction_downtime_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.downtime_jail_duration_)*/nullptr
  , /*decltype(_impl_.signed_blocks_window_)*/ ::int64_t{0}
} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorSigningInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorSigningInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorSigningInfo, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorSigningInfo, _impl_.start_height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorSigningInfo, _impl_.index_offset_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorSigningInfo, _impl_.jailed_until_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorSigningInfo, _impl_.tombstoned_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorSigningInfo, _impl_.missed_blocks_counter_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::Params, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::Params, _impl_.signed_blocks_window_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::Params, _impl_.min_signed_per_window_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::Params, _impl_.downtime_jail_duration_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::Params, _impl_.slash_fraction_double_sign_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::Params, _impl_.slash_fraction_downtime_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 14, -1, sizeof(::cosmos::slashing::v1beta1::ValidatorSigningInfo)},
        { 20, 33, -1, sizeof(::cosmos::slashing::v1beta1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::slashing::v1beta1::_ValidatorSigningInfo_default_instance_._instance,
    &::cosmos::slashing::v1beta1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&cosmos/slashing/v1beta1/slashing.proto"
    "\022\027cosmos.slashing.v1beta1\032\024gogoproto/gog"
    "o.proto\032\036google/protobuf/duration.proto\032"
    "\037google/protobuf/timestamp.proto\032\031cosmos"
    "_proto/cosmos.proto\032\021amino/amino.proto\"\274"
    "\002\n\024ValidatorSigningInfo\0222\n\007address\030\001 \001(\t"
    "B\030\322\264-\024cosmos.AddressStringR\007address\022!\n\014s"
    "tart_height\030\002 \001(\003R\013startHeight\022!\n\014index_"
    "offset\030\003 \001(\003R\013indexOffset\022L\n\014jailed_unti"
    "l\030\004 \001(\0132\032.google.protobuf.TimestampB\r\310\336\037"
    "\000\220\337\037\001\250\347\260*\001R\013jailedUntil\022\036\n\ntombstoned\030\005 "
    "\001(\010R\ntombstoned\0222\n\025missed_blocks_counter"
    "\030\006 \001(\003R\023missedBlocksCounter:\010\230\240\037\000\350\240\037\001\"\204\004"
    "\n\006Params\0220\n\024signed_blocks_window\030\001 \001(\003R\022"
    "signedBlocksWindow\022f\n\025min_signed_per_win"
    "dow\030\002 \001(\014B3\310\336\037\000\332\336\037&github.com/cosmos/cos"
    "mos-sdk/types.Dec\250\347\260*\001R\022minSignedPerWind"
    "ow\022^\n\026downtime_jail_duration\030\003 \001(\0132\031.goo"
    "gle.protobuf.DurationB\r\310\336\037\000\230\337\037\001\250\347\260*\001R\024do"
    "wntimeJailDuration\022p\n\032slash_fraction_dou"
    "ble_sign\030\004 \001(\014B3\310\336\037\000\332\336\037&github.com/cosmo"
    "s/cosmos-sdk/types.Dec\250\347\260*\001R\027slashFracti"
    "onDoubleSign\022k\n\027slash_fraction_downtime\030"
    "\005 \001(\014B3\310\336\037\000\332\336\037&github.com/cosmos/cosmos-"
    "sdk/types.Dec\250\347\260*\001R\025slashFractionDowntim"
    "e:!\212\347\260*\034cosmos-sdk/x/slashing/ParamsB\335\001\n"
    "\033com.cosmos.slashing.v1beta1B\rSlashingPr"
    "otoP\001Z-github.com/cosmos/cosmos-sdk/x/sl"
    "ashing/types\242\002\003CSX\252\002\027Cosmos.Slashing.V1b"
    "eta1\312\002\027Cosmos\\Slashing\\V1beta1\342\002#Cosmos\\"
    "Slashing\\V1beta1\\GPBMetadata\352\002\031Cosmos::S"
    "lashing::V1beta1\250\342\036\001b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_deps[5] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto = {
    false,
    false,
    1268,
    descriptor_table_protodef_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto,
    "cosmos/slashing/v1beta1/slashing.proto",
    &descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_once,
    descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_deps,
    5,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto::offsets,
    file_level_metadata_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto,
    file_level_enum_descriptors_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto,
    file_level_service_descriptors_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_getter() {
  return &descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto(&descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto);
namespace cosmos {
namespace slashing {
namespace v1beta1 {
// ===================================================================

class ValidatorSigningInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidatorSigningInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValidatorSigningInfo, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& jailed_until(const ValidatorSigningInfo* msg);
  static void set_has_jailed_until(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ValidatorSigningInfo::_Internal::jailed_until(const ValidatorSigningInfo* msg) {
  return *msg->_impl_.jailed_until_;
}
void ValidatorSigningInfo::clear_jailed_until() {
  if (_impl_.jailed_until_ != nullptr) _impl_.jailed_until_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ValidatorSigningInfo::ValidatorSigningInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.slashing.v1beta1.ValidatorSigningInfo)
}
ValidatorSigningInfo::ValidatorSigningInfo(const ValidatorSigningInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorSigningInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.jailed_until_){nullptr}
    , decltype(_impl_.start_height_) {}

    , decltype(_impl_.index_offset_) {}

    , decltype(_impl_.missed_blocks_counter_) {}

    , decltype(_impl_.tombstoned_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.jailed_until_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.jailed_until_);
  }
  ::memcpy(&_impl_.start_height_, &from._impl_.start_height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.tombstoned_) -
    reinterpret_cast<char*>(&_impl_.start_height_)) + sizeof(_impl_.tombstoned_));
  // @@protoc_insertion_point(copy_constructor:cosmos.slashing.v1beta1.ValidatorSigningInfo)
}

inline void ValidatorSigningInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.jailed_until_){nullptr}
    , decltype(_impl_.start_height_) { ::int64_t{0} }

    , decltype(_impl_.index_offset_) { ::int64_t{0} }

    , decltype(_impl_.missed_blocks_counter_) { ::int64_t{0} }

    , decltype(_impl_.tombstoned_) { false }

  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorSigningInfo::~ValidatorSigningInfo() {
  // @@protoc_insertion_point(destructor:cosmos.slashing.v1beta1.ValidatorSigningInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorSigningInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.jailed_until_;
}

void ValidatorSigningInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorSigningInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.slashing.v1beta1.ValidatorSigningInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.jailed_until_ != nullptr);
    _impl_.jailed_until_->Clear();
  }
  ::memset(&_impl_.start_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.tombstoned_) -
      reinterpret_cast<char*>(&_impl_.start_height_)) + sizeof(_impl_.tombstoned_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorSigningInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.slashing.v1beta1.ValidatorSigningInfo.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 start_height = 2 [json_name = "startHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 index_offset = 3 [json_name = "indexOffset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.index_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp jailed_until = 4 [json_name = "jailedUntil", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_jailed_until(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool tombstoned = 5 [json_name = "tombstoned"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.tombstoned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 missed_blocks_counter = 6 [json_name = "missedBlocksCounter"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.missed_blocks_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorSigningInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.slashing.v1beta1.ValidatorSigningInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.slashing.v1beta1.ValidatorSigningInfo.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 start_height = 2 [json_name = "startHeight"];
  if (this->_internal_start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_start_height(), target);
  }

  // int64 index_offset = 3 [json_name = "indexOffset"];
  if (this->_internal_index_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_index_offset(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp jailed_until = 4 [json_name = "jailedUntil", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::jailed_until(this),
        _Internal::jailed_until(this).GetCachedSize(), target, stream);
  }

  // bool tombstoned = 5 [json_name = "tombstoned"];
  if (this->_internal_tombstoned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_tombstoned(), target);
  }

  // int64 missed_blocks_counter = 6 [json_name = "missedBlocksCounter"];
  if (this->_internal_missed_blocks_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_missed_blocks_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.slashing.v1beta1.ValidatorSigningInfo)
  return target;
}

::size_t ValidatorSigningInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.slashing.v1beta1.ValidatorSigningInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .google.protobuf.Timestamp jailed_until = 4 [json_name = "jailedUntil", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.jailed_until_);
  }

  // int64 start_height = 2 [json_name = "startHeight"];
  if (this->_internal_start_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_height());
  }

  // int64 index_offset = 3 [json_name = "indexOffset"];
  if (this->_internal_index_offset() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index_offset());
  }

  // int64 missed_blocks_counter = 6 [json_name = "missedBlocksCounter"];
  if (this->_internal_missed_blocks_counter() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_missed_blocks_counter());
  }

  // bool tombstoned = 5 [json_name = "tombstoned"];
  if (this->_internal_tombstoned() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorSigningInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorSigningInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorSigningInfo::GetClassData() const { return &_class_data_; }


void ValidatorSigningInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorSigningInfo*>(&to_msg);
  auto& from = static_cast<const ValidatorSigningInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.slashing.v1beta1.ValidatorSigningInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_jailed_until()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_jailed_until());
  }
  if (from._internal_start_height() != 0) {
    _this->_internal_set_start_height(from._internal_start_height());
  }
  if (from._internal_index_offset() != 0) {
    _this->_internal_set_index_offset(from._internal_index_offset());
  }
  if (from._internal_missed_blocks_counter() != 0) {
    _this->_internal_set_missed_blocks_counter(from._internal_missed_blocks_counter());
  }
  if (from._internal_tombstoned() != 0) {
    _this->_internal_set_tombstoned(from._internal_tombstoned());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorSigningInfo::CopyFrom(const ValidatorSigningInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.slashing.v1beta1.ValidatorSigningInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorSigningInfo::IsInitialized() const {
  return true;
}

void ValidatorSigningInfo::InternalSwap(ValidatorSigningInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValidatorSigningInfo, _impl_.tombstoned_)
      + sizeof(ValidatorSigningInfo::_impl_.tombstoned_)
      - PROTOBUF_FIELD_OFFSET(ValidatorSigningInfo, _impl_.jailed_until_)>(
          reinterpret_cast<char*>(&_impl_.jailed_until_),
          reinterpret_cast<char*>(&other->_impl_.jailed_until_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorSigningInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_getter, &descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_once,
      file_level_metadata_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto[0]);
}
// ===================================================================

class Params::_Internal {
 public:
  using HasBits = decltype(std::declval<Params>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Params, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& downtime_jail_duration(const Params* msg);
  static void set_has_downtime_jail_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
Params::_Internal::downtime_jail_duration(const Params* msg) {
  return *msg->_impl_.downtime_jail_duration_;
}
void Params::clear_downtime_jail_duration() {
  if (_impl_.downtime_jail_duration_ != nullptr) _impl_.downtime_jail_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.slashing.v1beta1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_signed_per_window_) {}

    , decltype(_impl_.slash_fraction_double_sign_) {}

    , decltype(_impl_.slash_fraction_downtime_) {}

    , decltype(_impl_.downtime_jail_duration_){nullptr}
    , decltype(_impl_.signed_blocks_window_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.min_signed_per_window_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_signed_per_window_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_signed_per_window().empty()) {
    _this->_impl_.min_signed_per_window_.Set(from._internal_min_signed_per_window(), _this->GetArenaForAllocation());
  }
  _impl_.slash_fraction_double_sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_double_sign_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slash_fraction_double_sign().empty()) {
    _this->_impl_.slash_fraction_double_sign_.Set(from._internal_slash_fraction_double_sign(), _this->GetArenaForAllocation());
  }
  _impl_.slash_fraction_downtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_downtime_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slash_fraction_downtime().empty()) {
    _this->_impl_.slash_fraction_downtime_.Set(from._internal_slash_fraction_downtime(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.downtime_jail_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.downtime_jail_duration_);
  }
  _this->_impl_.signed_blocks_window_ = from._impl_.signed_blocks_window_;
  // @@protoc_insertion_point(copy_constructor:cosmos.slashing.v1beta1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_signed_per_window_) {}

    , decltype(_impl_.slash_fraction_double_sign_) {}

    , decltype(_impl_.slash_fraction_downtime_) {}

    , decltype(_impl_.downtime_jail_duration_){nullptr}
    , decltype(_impl_.signed_blocks_window_) { ::int64_t{0} }

  };
  _impl_.min_signed_per_window_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_signed_per_window_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slash_fraction_double_sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_double_sign_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.slash_fraction_downtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.slash_fraction_downtime_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:cosmos.slashing.v1beta1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.min_signed_per_window_.Destroy();
  _impl_.slash_fraction_double_sign_.Destroy();
  _impl_.slash_fraction_downtime_.Destroy();
  if (this != internal_default_instance()) delete _impl_.downtime_jail_duration_;
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.slashing.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_signed_per_window_.ClearToEmpty();
  _impl_.slash_fraction_double_sign_.ClearToEmpty();
  _impl_.slash_fraction_downtime_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.downtime_jail_duration_ != nullptr);
    _impl_.downtime_jail_duration_->Clear();
  }
  _impl_.signed_blocks_window_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 signed_blocks_window = 1 [json_name = "signedBlocksWindow"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.signed_blocks_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes min_signed_per_window = 2 [json_name = "minSignedPerWindow", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_min_signed_per_window();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration downtime_jail_duration = 3 [json_name = "downtimeJailDuration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_downtime_jail_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes slash_fraction_double_sign = 4 [json_name = "slashFractionDoubleSign", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_slash_fraction_double_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes slash_fraction_downtime = 5 [json_name = "slashFractionDowntime", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_slash_fraction_downtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.slashing.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 signed_blocks_window = 1 [json_name = "signedBlocksWindow"];
  if (this->_internal_signed_blocks_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_signed_blocks_window(), target);
  }

  // bytes min_signed_per_window = 2 [json_name = "minSignedPerWindow", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  if (!this->_internal_min_signed_per_window().empty()) {
    const std::string& _s = this->_internal_min_signed_per_window();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration downtime_jail_duration = 3 [json_name = "downtimeJailDuration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::downtime_jail_duration(this),
        _Internal::downtime_jail_duration(this).GetCachedSize(), target, stream);
  }

  // bytes slash_fraction_double_sign = 4 [json_name = "slashFractionDoubleSign", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  if (!this->_internal_slash_fraction_double_sign().empty()) {
    const std::string& _s = this->_internal_slash_fraction_double_sign();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bytes slash_fraction_downtime = 5 [json_name = "slashFractionDowntime", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  if (!this->_internal_slash_fraction_downtime().empty()) {
    const std::string& _s = this->_internal_slash_fraction_downtime();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.slashing.v1beta1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.slashing.v1beta1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes min_signed_per_window = 2 [json_name = "minSignedPerWindow", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  if (!this->_internal_min_signed_per_window().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_min_signed_per_window());
  }

  // bytes slash_fraction_double_sign = 4 [json_name = "slashFractionDoubleSign", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  if (!this->_internal_slash_fraction_double_sign().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_slash_fraction_double_sign());
  }

  // bytes slash_fraction_downtime = 5 [json_name = "slashFractionDowntime", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  if (!this->_internal_slash_fraction_downtime().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_slash_fraction_downtime());
  }

  // .google.protobuf.Duration downtime_jail_duration = 3 [json_name = "downtimeJailDuration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.downtime_jail_duration_);
  }

  // int64 signed_blocks_window = 1 [json_name = "signedBlocksWindow"];
  if (this->_internal_signed_blocks_window() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_signed_blocks_window());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.slashing.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_min_signed_per_window().empty()) {
    _this->_internal_set_min_signed_per_window(from._internal_min_signed_per_window());
  }
  if (!from._internal_slash_fraction_double_sign().empty()) {
    _this->_internal_set_slash_fraction_double_sign(from._internal_slash_fraction_double_sign());
  }
  if (!from._internal_slash_fraction_downtime().empty()) {
    _this->_internal_set_slash_fraction_downtime(from._internal_slash_fraction_downtime());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_downtime_jail_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_downtime_jail_duration());
  }
  if (from._internal_signed_blocks_window() != 0) {
    _this->_internal_set_signed_blocks_window(from._internal_signed_blocks_window());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.slashing.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_signed_per_window_, lhs_arena,
                                       &other->_impl_.min_signed_per_window_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slash_fraction_double_sign_, lhs_arena,
                                       &other->_impl_.slash_fraction_double_sign_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slash_fraction_downtime_, lhs_arena,
                                       &other->_impl_.slash_fraction_downtime_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, _impl_.signed_blocks_window_)
      + sizeof(Params::_impl_.signed_blocks_window_)
      - PROTOBUF_FIELD_OFFSET(Params, _impl_.downtime_jail_duration_)>(
          reinterpret_cast<char*>(&_impl_.downtime_jail_duration_),
          reinterpret_cast<char*>(&other->_impl_.downtime_jail_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_getter, &descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_once,
      file_level_metadata_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::slashing::v1beta1::ValidatorSigningInfo*
Arena::CreateMaybeMessage< ::cosmos::slashing::v1beta1::ValidatorSigningInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::slashing::v1beta1::ValidatorSigningInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::slashing::v1beta1::Params*
Arena::CreateMaybeMessage< ::cosmos::slashing::v1beta1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::slashing::v1beta1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

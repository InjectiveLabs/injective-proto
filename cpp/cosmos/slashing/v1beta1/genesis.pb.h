// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/slashing/v1beta1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/slashing/v1beta1/slashing.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto;
namespace cosmos {
namespace slashing {
namespace v1beta1 {
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class MissedBlock;
struct MissedBlockDefaultTypeInternal;
extern MissedBlockDefaultTypeInternal _MissedBlock_default_instance_;
class SigningInfo;
struct SigningInfoDefaultTypeInternal;
extern SigningInfoDefaultTypeInternal _SigningInfo_default_instance_;
class ValidatorMissedBlocks;
struct ValidatorMissedBlocksDefaultTypeInternal;
extern ValidatorMissedBlocksDefaultTypeInternal _ValidatorMissedBlocks_default_instance_;
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::slashing::v1beta1::GenesisState* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::GenesisState>(Arena*);
template <>
::cosmos::slashing::v1beta1::MissedBlock* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::MissedBlock>(Arena*);
template <>
::cosmos::slashing::v1beta1::SigningInfo* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::SigningInfo>(Arena*);
template <>
::cosmos::slashing::v1beta1::ValidatorMissedBlocks* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::ValidatorMissedBlocks>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace slashing {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigningInfosFieldNumber = 2,
    kMissedBlocksFieldNumber = 3,
    kParamsFieldNumber = 1,
  };
  // repeated .cosmos.slashing.v1beta1.SigningInfo signing_infos = 2 [json_name = "signingInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int signing_infos_size() const;
  private:
  int _internal_signing_infos_size() const;

  public:
  void clear_signing_infos() ;
  ::cosmos::slashing::v1beta1::SigningInfo* mutable_signing_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::SigningInfo >*
      mutable_signing_infos();
  private:
  const ::cosmos::slashing::v1beta1::SigningInfo& _internal_signing_infos(int index) const;
  ::cosmos::slashing::v1beta1::SigningInfo* _internal_add_signing_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::SigningInfo>& _internal_signing_infos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::SigningInfo>* _internal_mutable_signing_infos();
  public:
  const ::cosmos::slashing::v1beta1::SigningInfo& signing_infos(int index) const;
  ::cosmos::slashing::v1beta1::SigningInfo* add_signing_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::SigningInfo >&
      signing_infos() const;
  // repeated .cosmos.slashing.v1beta1.ValidatorMissedBlocks missed_blocks = 3 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int missed_blocks_size() const;
  private:
  int _internal_missed_blocks_size() const;

  public:
  void clear_missed_blocks() ;
  ::cosmos::slashing::v1beta1::ValidatorMissedBlocks* mutable_missed_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorMissedBlocks >*
      mutable_missed_blocks();
  private:
  const ::cosmos::slashing::v1beta1::ValidatorMissedBlocks& _internal_missed_blocks(int index) const;
  ::cosmos::slashing::v1beta1::ValidatorMissedBlocks* _internal_add_missed_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::ValidatorMissedBlocks>& _internal_missed_blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::ValidatorMissedBlocks>* _internal_mutable_missed_blocks();
  public:
  const ::cosmos::slashing::v1beta1::ValidatorMissedBlocks& missed_blocks(int index) const;
  ::cosmos::slashing::v1beta1::ValidatorMissedBlocks* add_missed_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorMissedBlocks >&
      missed_blocks() const;
  // .cosmos.slashing.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmos::slashing::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmos::slashing::v1beta1::Params* release_params();
  ::cosmos::slashing::v1beta1::Params* mutable_params();
  void set_allocated_params(::cosmos::slashing::v1beta1::Params* params);
  private:
  const ::cosmos::slashing::v1beta1::Params& _internal_params() const;
  ::cosmos::slashing::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmos::slashing::v1beta1::Params* params);
  ::cosmos::slashing::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::SigningInfo > signing_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorMissedBlocks > missed_blocks_;
    ::cosmos::slashing::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class SigningInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.SigningInfo) */ {
 public:
  inline SigningInfo() : SigningInfo(nullptr) {}
  ~SigningInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SigningInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigningInfo(const SigningInfo& from);
  SigningInfo(SigningInfo&& from) noexcept
    : SigningInfo() {
    *this = ::std::move(from);
  }

  inline SigningInfo& operator=(const SigningInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigningInfo& operator=(SigningInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SigningInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigningInfo* internal_default_instance() {
    return reinterpret_cast<const SigningInfo*>(
               &_SigningInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigningInfo& a, SigningInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SigningInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigningInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigningInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigningInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SigningInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SigningInfo& from) {
    SigningInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SigningInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.SigningInfo";
  }
  protected:
  explicit SigningInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kValidatorSigningInfoFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .cosmos.slashing.v1beta1.ValidatorSigningInfo validator_signing_info = 2 [json_name = "validatorSigningInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_validator_signing_info() const;
  void clear_validator_signing_info() ;
  const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& validator_signing_info() const;
  PROTOBUF_NODISCARD ::cosmos::slashing::v1beta1::ValidatorSigningInfo* release_validator_signing_info();
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* mutable_validator_signing_info();
  void set_allocated_validator_signing_info(::cosmos::slashing::v1beta1::ValidatorSigningInfo* validator_signing_info);
  private:
  const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& _internal_validator_signing_info() const;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* _internal_mutable_validator_signing_info();
  public:
  void unsafe_arena_set_allocated_validator_signing_info(
      ::cosmos::slashing::v1beta1::ValidatorSigningInfo* validator_signing_info);
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* unsafe_arena_release_validator_signing_info();
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.SigningInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::cosmos::slashing::v1beta1::ValidatorSigningInfo* validator_signing_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class ValidatorMissedBlocks final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.ValidatorMissedBlocks) */ {
 public:
  inline ValidatorMissedBlocks() : ValidatorMissedBlocks(nullptr) {}
  ~ValidatorMissedBlocks() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorMissedBlocks(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorMissedBlocks(const ValidatorMissedBlocks& from);
  ValidatorMissedBlocks(ValidatorMissedBlocks&& from) noexcept
    : ValidatorMissedBlocks() {
    *this = ::std::move(from);
  }

  inline ValidatorMissedBlocks& operator=(const ValidatorMissedBlocks& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorMissedBlocks& operator=(ValidatorMissedBlocks&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorMissedBlocks& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorMissedBlocks* internal_default_instance() {
    return reinterpret_cast<const ValidatorMissedBlocks*>(
               &_ValidatorMissedBlocks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ValidatorMissedBlocks& a, ValidatorMissedBlocks& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorMissedBlocks* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorMissedBlocks* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorMissedBlocks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidatorMissedBlocks>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorMissedBlocks& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidatorMissedBlocks& from) {
    ValidatorMissedBlocks::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorMissedBlocks* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.ValidatorMissedBlocks";
  }
  protected:
  explicit ValidatorMissedBlocks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissedBlocksFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .cosmos.slashing.v1beta1.MissedBlock missed_blocks = 2 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int missed_blocks_size() const;
  private:
  int _internal_missed_blocks_size() const;

  public:
  void clear_missed_blocks() ;
  ::cosmos::slashing::v1beta1::MissedBlock* mutable_missed_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::MissedBlock >*
      mutable_missed_blocks();
  private:
  const ::cosmos::slashing::v1beta1::MissedBlock& _internal_missed_blocks(int index) const;
  ::cosmos::slashing::v1beta1::MissedBlock* _internal_add_missed_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::MissedBlock>& _internal_missed_blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::MissedBlock>* _internal_mutable_missed_blocks();
  public:
  const ::cosmos::slashing::v1beta1::MissedBlock& missed_blocks(int index) const;
  ::cosmos::slashing::v1beta1::MissedBlock* add_missed_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::MissedBlock >&
      missed_blocks() const;
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::MissedBlock > missed_blocks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class MissedBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.MissedBlock) */ {
 public:
  inline MissedBlock() : MissedBlock(nullptr) {}
  ~MissedBlock() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MissedBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MissedBlock(const MissedBlock& from);
  MissedBlock(MissedBlock&& from) noexcept
    : MissedBlock() {
    *this = ::std::move(from);
  }

  inline MissedBlock& operator=(const MissedBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissedBlock& operator=(MissedBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MissedBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const MissedBlock* internal_default_instance() {
    return reinterpret_cast<const MissedBlock*>(
               &_MissedBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MissedBlock& a, MissedBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(MissedBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissedBlock* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MissedBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MissedBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MissedBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MissedBlock& from) {
    MissedBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissedBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.MissedBlock";
  }
  protected:
  explicit MissedBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kMissedFieldNumber = 2,
  };
  // int64 index = 1 [json_name = "index"];
  void clear_index() ;
  ::int64_t index() const;
  void set_index(::int64_t value);

  private:
  ::int64_t _internal_index() const;
  void _internal_set_index(::int64_t value);

  public:
  // bool missed = 2 [json_name = "missed"];
  void clear_missed() ;
  bool missed() const;
  void set_missed(bool value);

  private:
  bool _internal_missed() const;
  void _internal_set_missed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.MissedBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t index_;
    bool missed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .cosmos.slashing.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool GenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmos::slashing::v1beta1::Params& GenesisState::_internal_params() const {
  const ::cosmos::slashing::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::slashing::v1beta1::Params&>(
      ::cosmos::slashing::v1beta1::_Params_default_instance_);
}
inline const ::cosmos::slashing::v1beta1::Params& GenesisState::params() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.GenesisState.params)
  return _internal_params();
}
inline void GenesisState::unsafe_arena_set_allocated_params(
    ::cosmos::slashing::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.slashing.v1beta1.GenesisState.params)
}
inline ::cosmos::slashing::v1beta1::Params* GenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::slashing::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::slashing::v1beta1::Params* GenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.GenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::slashing::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmos::slashing::v1beta1::Params* GenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::slashing::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmos::slashing::v1beta1::Params* GenesisState::mutable_params() {
  ::cosmos::slashing::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.GenesisState.params)
  return _msg;
}
inline void GenesisState::set_allocated_params(::cosmos::slashing::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.GenesisState.params)
}

// repeated .cosmos.slashing.v1beta1.SigningInfo signing_infos = 2 [json_name = "signingInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_signing_infos_size() const {
  return _impl_.signing_infos_.size();
}
inline int GenesisState::signing_infos_size() const {
  return _internal_signing_infos_size();
}
inline void GenesisState::clear_signing_infos() {
  _internal_mutable_signing_infos()->Clear();
}
inline ::cosmos::slashing::v1beta1::SigningInfo* GenesisState::mutable_signing_infos(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.GenesisState.signing_infos)
  return _internal_mutable_signing_infos()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::SigningInfo >*
GenesisState::mutable_signing_infos() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.slashing.v1beta1.GenesisState.signing_infos)
  return _internal_mutable_signing_infos();
}
inline const ::cosmos::slashing::v1beta1::SigningInfo& GenesisState::_internal_signing_infos(int index) const {
  return _internal_signing_infos().Get(index);
}
inline const ::cosmos::slashing::v1beta1::SigningInfo& GenesisState::signing_infos(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.GenesisState.signing_infos)
  return _internal_signing_infos(index);
}
inline ::cosmos::slashing::v1beta1::SigningInfo* GenesisState::_internal_add_signing_infos() {
  return _internal_mutable_signing_infos()->Add();
}
inline ::cosmos::slashing::v1beta1::SigningInfo* GenesisState::add_signing_infos() {
  ::cosmos::slashing::v1beta1::SigningInfo* _add = _internal_add_signing_infos();
  // @@protoc_insertion_point(field_add:cosmos.slashing.v1beta1.GenesisState.signing_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::SigningInfo >&
GenesisState::signing_infos() const {
  // @@protoc_insertion_point(field_list:cosmos.slashing.v1beta1.GenesisState.signing_infos)
  return _internal_signing_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::SigningInfo>&
GenesisState::_internal_signing_infos() const {
  return _impl_.signing_infos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::SigningInfo>*
GenesisState::_internal_mutable_signing_infos() {
  return &_impl_.signing_infos_;
}

// repeated .cosmos.slashing.v1beta1.ValidatorMissedBlocks missed_blocks = 3 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_missed_blocks_size() const {
  return _impl_.missed_blocks_.size();
}
inline int GenesisState::missed_blocks_size() const {
  return _internal_missed_blocks_size();
}
inline void GenesisState::clear_missed_blocks() {
  _internal_mutable_missed_blocks()->Clear();
}
inline ::cosmos::slashing::v1beta1::ValidatorMissedBlocks* GenesisState::mutable_missed_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.GenesisState.missed_blocks)
  return _internal_mutable_missed_blocks()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorMissedBlocks >*
GenesisState::mutable_missed_blocks() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.slashing.v1beta1.GenesisState.missed_blocks)
  return _internal_mutable_missed_blocks();
}
inline const ::cosmos::slashing::v1beta1::ValidatorMissedBlocks& GenesisState::_internal_missed_blocks(int index) const {
  return _internal_missed_blocks().Get(index);
}
inline const ::cosmos::slashing::v1beta1::ValidatorMissedBlocks& GenesisState::missed_blocks(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.GenesisState.missed_blocks)
  return _internal_missed_blocks(index);
}
inline ::cosmos::slashing::v1beta1::ValidatorMissedBlocks* GenesisState::_internal_add_missed_blocks() {
  return _internal_mutable_missed_blocks()->Add();
}
inline ::cosmos::slashing::v1beta1::ValidatorMissedBlocks* GenesisState::add_missed_blocks() {
  ::cosmos::slashing::v1beta1::ValidatorMissedBlocks* _add = _internal_add_missed_blocks();
  // @@protoc_insertion_point(field_add:cosmos.slashing.v1beta1.GenesisState.missed_blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::ValidatorMissedBlocks >&
GenesisState::missed_blocks() const {
  // @@protoc_insertion_point(field_list:cosmos.slashing.v1beta1.GenesisState.missed_blocks)
  return _internal_missed_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::ValidatorMissedBlocks>&
GenesisState::_internal_missed_blocks() const {
  return _impl_.missed_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::ValidatorMissedBlocks>*
GenesisState::_internal_mutable_missed_blocks() {
  return &_impl_.missed_blocks_;
}

// -------------------------------------------------------------------

// SigningInfo

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void SigningInfo::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SigningInfo::address() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.SigningInfo.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SigningInfo::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.SigningInfo.address)
}
inline std::string* SigningInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.SigningInfo.address)
  return _s;
}
inline const std::string& SigningInfo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void SigningInfo::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SigningInfo::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* SigningInfo::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.SigningInfo.address)
  return _impl_.address_.Release();
}
inline void SigningInfo::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.SigningInfo.address)
}

// .cosmos.slashing.v1beta1.ValidatorSigningInfo validator_signing_info = 2 [json_name = "validatorSigningInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool SigningInfo::has_validator_signing_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_signing_info_ != nullptr);
  return value;
}
inline const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& SigningInfo::_internal_validator_signing_info() const {
  const ::cosmos::slashing::v1beta1::ValidatorSigningInfo* p = _impl_.validator_signing_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::slashing::v1beta1::ValidatorSigningInfo&>(
      ::cosmos::slashing::v1beta1::_ValidatorSigningInfo_default_instance_);
}
inline const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& SigningInfo::validator_signing_info() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.SigningInfo.validator_signing_info)
  return _internal_validator_signing_info();
}
inline void SigningInfo::unsafe_arena_set_allocated_validator_signing_info(
    ::cosmos::slashing::v1beta1::ValidatorSigningInfo* validator_signing_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_signing_info_);
  }
  _impl_.validator_signing_info_ = validator_signing_info;
  if (validator_signing_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.slashing.v1beta1.SigningInfo.validator_signing_info)
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* SigningInfo::release_validator_signing_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* temp = _impl_.validator_signing_info_;
  _impl_.validator_signing_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* SigningInfo::unsafe_arena_release_validator_signing_info() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.SigningInfo.validator_signing_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* temp = _impl_.validator_signing_info_;
  _impl_.validator_signing_info_ = nullptr;
  return temp;
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* SigningInfo::_internal_mutable_validator_signing_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.validator_signing_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::slashing::v1beta1::ValidatorSigningInfo>(GetArenaForAllocation());
    _impl_.validator_signing_info_ = p;
  }
  return _impl_.validator_signing_info_;
}
inline ::cosmos::slashing::v1beta1::ValidatorSigningInfo* SigningInfo::mutable_validator_signing_info() {
  ::cosmos::slashing::v1beta1::ValidatorSigningInfo* _msg = _internal_mutable_validator_signing_info();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.SigningInfo.validator_signing_info)
  return _msg;
}
inline void SigningInfo::set_allocated_validator_signing_info(::cosmos::slashing::v1beta1::ValidatorSigningInfo* validator_signing_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_signing_info_);
  }
  if (validator_signing_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_signing_info));
    if (message_arena != submessage_arena) {
      validator_signing_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_signing_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.validator_signing_info_ = validator_signing_info;
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.SigningInfo.validator_signing_info)
}

// -------------------------------------------------------------------

// ValidatorMissedBlocks

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void ValidatorMissedBlocks::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ValidatorMissedBlocks::address() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.ValidatorMissedBlocks.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ValidatorMissedBlocks::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.ValidatorMissedBlocks.address)
}
inline std::string* ValidatorMissedBlocks::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.ValidatorMissedBlocks.address)
  return _s;
}
inline const std::string& ValidatorMissedBlocks::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ValidatorMissedBlocks::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidatorMissedBlocks::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* ValidatorMissedBlocks::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.ValidatorMissedBlocks.address)
  return _impl_.address_.Release();
}
inline void ValidatorMissedBlocks::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.ValidatorMissedBlocks.address)
}

// repeated .cosmos.slashing.v1beta1.MissedBlock missed_blocks = 2 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int ValidatorMissedBlocks::_internal_missed_blocks_size() const {
  return _impl_.missed_blocks_.size();
}
inline int ValidatorMissedBlocks::missed_blocks_size() const {
  return _internal_missed_blocks_size();
}
inline void ValidatorMissedBlocks::clear_missed_blocks() {
  _internal_mutable_missed_blocks()->Clear();
}
inline ::cosmos::slashing::v1beta1::MissedBlock* ValidatorMissedBlocks::mutable_missed_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.ValidatorMissedBlocks.missed_blocks)
  return _internal_mutable_missed_blocks()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::MissedBlock >*
ValidatorMissedBlocks::mutable_missed_blocks() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.slashing.v1beta1.ValidatorMissedBlocks.missed_blocks)
  return _internal_mutable_missed_blocks();
}
inline const ::cosmos::slashing::v1beta1::MissedBlock& ValidatorMissedBlocks::_internal_missed_blocks(int index) const {
  return _internal_missed_blocks().Get(index);
}
inline const ::cosmos::slashing::v1beta1::MissedBlock& ValidatorMissedBlocks::missed_blocks(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.ValidatorMissedBlocks.missed_blocks)
  return _internal_missed_blocks(index);
}
inline ::cosmos::slashing::v1beta1::MissedBlock* ValidatorMissedBlocks::_internal_add_missed_blocks() {
  return _internal_mutable_missed_blocks()->Add();
}
inline ::cosmos::slashing::v1beta1::MissedBlock* ValidatorMissedBlocks::add_missed_blocks() {
  ::cosmos::slashing::v1beta1::MissedBlock* _add = _internal_add_missed_blocks();
  // @@protoc_insertion_point(field_add:cosmos.slashing.v1beta1.ValidatorMissedBlocks.missed_blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::slashing::v1beta1::MissedBlock >&
ValidatorMissedBlocks::missed_blocks() const {
  // @@protoc_insertion_point(field_list:cosmos.slashing.v1beta1.ValidatorMissedBlocks.missed_blocks)
  return _internal_missed_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::MissedBlock>&
ValidatorMissedBlocks::_internal_missed_blocks() const {
  return _impl_.missed_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::slashing::v1beta1::MissedBlock>*
ValidatorMissedBlocks::_internal_mutable_missed_blocks() {
  return &_impl_.missed_blocks_;
}

// -------------------------------------------------------------------

// MissedBlock

// int64 index = 1 [json_name = "index"];
inline void MissedBlock::clear_index() {
  _impl_.index_ = ::int64_t{0};
}
inline ::int64_t MissedBlock::index() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.MissedBlock.index)
  return _internal_index();
}
inline void MissedBlock::set_index(::int64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.MissedBlock.index)
}
inline ::int64_t MissedBlock::_internal_index() const {
  return _impl_.index_;
}
inline void MissedBlock::_internal_set_index(::int64_t value) {
  ;
  _impl_.index_ = value;
}

// bool missed = 2 [json_name = "missed"];
inline void MissedBlock::clear_missed() {
  _impl_.missed_ = false;
}
inline bool MissedBlock::missed() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.MissedBlock.missed)
  return _internal_missed();
}
inline void MissedBlock::set_missed(bool value) {
  _internal_set_missed(value);
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.MissedBlock.missed)
}
inline bool MissedBlock::_internal_missed() const {
  return _impl_.missed_;
}
inline void MissedBlock::_internal_set_missed(bool value) {
  ;
  _impl_.missed_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_2epb_2eh

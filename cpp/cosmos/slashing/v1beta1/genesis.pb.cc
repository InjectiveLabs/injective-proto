// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/slashing/v1beta1/genesis.proto

#include "cosmos/slashing/v1beta1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace slashing {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signing_infos_)*/{}
  , /*decltype(_impl_.missed_blocks_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SigningInfo::SigningInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_signing_info_)*/nullptr} {}
struct SigningInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SigningInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SigningInfoDefaultTypeInternal() {}
  union {
    SigningInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SigningInfoDefaultTypeInternal _SigningInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorMissedBlocks::ValidatorMissedBlocks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.missed_blocks_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorMissedBlocksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorMissedBlocksDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorMissedBlocksDefaultTypeInternal() {}
  union {
    ValidatorMissedBlocks _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorMissedBlocksDefaultTypeInternal _ValidatorMissedBlocks_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MissedBlock::MissedBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/ ::int64_t{0}

  , /*decltype(_impl_.missed_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MissedBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MissedBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MissedBlockDefaultTypeInternal() {}
  union {
    MissedBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MissedBlockDefaultTypeInternal _MissedBlock_default_instance_;
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::GenesisState, _impl_.signing_infos_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::GenesisState, _impl_.missed_blocks_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::SigningInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::SigningInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::SigningInfo, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::SigningInfo, _impl_.validator_signing_info_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorMissedBlocks, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorMissedBlocks, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::ValidatorMissedBlocks, _impl_.missed_blocks_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::MissedBlock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::MissedBlock, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::cosmos::slashing::v1beta1::MissedBlock, _impl_.missed_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::cosmos::slashing::v1beta1::GenesisState)},
        { 14, 24, -1, sizeof(::cosmos::slashing::v1beta1::SigningInfo)},
        { 26, -1, -1, sizeof(::cosmos::slashing::v1beta1::ValidatorMissedBlocks)},
        { 36, -1, -1, sizeof(::cosmos::slashing::v1beta1::MissedBlock)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::slashing::v1beta1::_GenesisState_default_instance_._instance,
    &::cosmos::slashing::v1beta1::_SigningInfo_default_instance_._instance,
    &::cosmos::slashing::v1beta1::_ValidatorMissedBlocks_default_instance_._instance,
    &::cosmos::slashing::v1beta1::_MissedBlock_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%cosmos/slashing/v1beta1/genesis.proto\022"
    "\027cosmos.slashing.v1beta1\032\024gogoproto/gogo"
    ".proto\032&cosmos/slashing/v1beta1/slashing"
    ".proto\032\031cosmos_proto/cosmos.proto\032\021amino"
    "/amino.proto\"\210\002\n\014GenesisState\022B\n\006params\030"
    "\001 \001(\0132\037.cosmos.slashing.v1beta1.ParamsB\t"
    "\310\336\037\000\250\347\260*\001R\006params\022T\n\rsigning_infos\030\002 \003(\013"
    "2$.cosmos.slashing.v1beta1.SigningInfoB\t"
    "\310\336\037\000\250\347\260*\001R\014signingInfos\022^\n\rmissed_blocks"
    "\030\003 \003(\0132..cosmos.slashing.v1beta1.Validat"
    "orMissedBlocksB\t\310\336\037\000\250\347\260*\001R\014missedBlocks\""
    "\261\001\n\013SigningInfo\0222\n\007address\030\001 \001(\tB\030\322\264-\024co"
    "smos.AddressStringR\007address\022n\n\026validator"
    "_signing_info\030\002 \001(\0132-.cosmos.slashing.v1"
    "beta1.ValidatorSigningInfoB\t\310\336\037\000\250\347\260*\001R\024v"
    "alidatorSigningInfo\"\241\001\n\025ValidatorMissedB"
    "locks\0222\n\007address\030\001 \001(\tB\030\322\264-\024cosmos.Addre"
    "ssStringR\007address\022T\n\rmissed_blocks\030\002 \003(\013"
    "2$.cosmos.slashing.v1beta1.MissedBlockB\t"
    "\310\336\037\000\250\347\260*\001R\014missedBlocks\";\n\013MissedBlock\022\024"
    "\n\005index\030\001 \001(\003R\005index\022\026\n\006missed\030\002 \001(\010R\006mi"
    "ssedB\330\001\n\033com.cosmos.slashing.v1beta1B\014Ge"
    "nesisProtoP\001Z-github.com/cosmos/cosmos-s"
    "dk/x/slashing/types\242\002\003CSX\252\002\027Cosmos.Slash"
    "ing.V1beta1\312\002\027Cosmos\\Slashing\\V1beta1\342\002#"
    "Cosmos\\Slashing\\V1beta1\\GPBMetadata\352\002\031Co"
    "smos::Slashing::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto = {
    false,
    false,
    1071,
    descriptor_table_protodef_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto,
    "cosmos/slashing/v1beta1/genesis.proto",
    &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_once,
    descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto::offsets,
    file_level_metadata_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto,
    file_level_enum_descriptors_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto,
    file_level_service_descriptors_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_getter() {
  return &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto(&descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto);
namespace cosmos {
namespace slashing {
namespace v1beta1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::cosmos::slashing::v1beta1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::slashing::v1beta1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.slashing.v1beta1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signing_infos_){from._impl_.signing_infos_}
    , decltype(_impl_.missed_blocks_){from._impl_.missed_blocks_}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::cosmos::slashing::v1beta1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.slashing.v1beta1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signing_infos_){arena}
    , decltype(_impl_.missed_blocks_){arena}
    , decltype(_impl_.params_){nullptr}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:cosmos.slashing.v1beta1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_signing_infos()->~RepeatedPtrField();
  _internal_mutable_missed_blocks()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.slashing.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signing_infos()->Clear();
  _internal_mutable_missed_blocks()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.slashing.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.slashing.v1beta1.SigningInfo signing_infos = 2 [json_name = "signingInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signing_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.slashing.v1beta1.ValidatorMissedBlocks missed_blocks = 3 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missed_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.slashing.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.slashing.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.slashing.v1beta1.SigningInfo signing_infos = 2 [json_name = "signingInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signing_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_signing_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.slashing.v1beta1.ValidatorMissedBlocks missed_blocks = 3 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_missed_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_missed_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.slashing.v1beta1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.slashing.v1beta1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.slashing.v1beta1.SigningInfo signing_infos = 2 [json_name = "signingInfos", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_signing_infos_size();
  for (const auto& msg : this->_internal_signing_infos()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.slashing.v1beta1.ValidatorMissedBlocks missed_blocks = 3 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_missed_blocks_size();
  for (const auto& msg : this->_internal_missed_blocks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.slashing.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.slashing.v1beta1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signing_infos()->MergeFrom(from._internal_signing_infos());
  _this->_internal_mutable_missed_blocks()->MergeFrom(from._internal_missed_blocks());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::cosmos::slashing::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.slashing.v1beta1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_signing_infos()->InternalSwap(other->_internal_mutable_signing_infos());
  _internal_mutable_missed_blocks()->InternalSwap(other->_internal_mutable_missed_blocks());
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto[0]);
}
// ===================================================================

class SigningInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SigningInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SigningInfo, _impl_._has_bits_);
  static const ::cosmos::slashing::v1beta1::ValidatorSigningInfo& validator_signing_info(const SigningInfo* msg);
  static void set_has_validator_signing_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::slashing::v1beta1::ValidatorSigningInfo&
SigningInfo::_Internal::validator_signing_info(const SigningInfo* msg) {
  return *msg->_impl_.validator_signing_info_;
}
void SigningInfo::clear_validator_signing_info() {
  if (_impl_.validator_signing_info_ != nullptr) _impl_.validator_signing_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SigningInfo::SigningInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.slashing.v1beta1.SigningInfo)
}
SigningInfo::SigningInfo(const SigningInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SigningInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.validator_signing_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.validator_signing_info_ = new ::cosmos::slashing::v1beta1::ValidatorSigningInfo(*from._impl_.validator_signing_info_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.slashing.v1beta1.SigningInfo)
}

inline void SigningInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.validator_signing_info_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SigningInfo::~SigningInfo() {
  // @@protoc_insertion_point(destructor:cosmos.slashing.v1beta1.SigningInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SigningInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.validator_signing_info_;
}

void SigningInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SigningInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.slashing.v1beta1.SigningInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.validator_signing_info_ != nullptr);
    _impl_.validator_signing_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SigningInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.slashing.v1beta1.SigningInfo.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.slashing.v1beta1.ValidatorSigningInfo validator_signing_info = 2 [json_name = "validatorSigningInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_signing_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SigningInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.slashing.v1beta1.SigningInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.slashing.v1beta1.SigningInfo.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.slashing.v1beta1.ValidatorSigningInfo validator_signing_info = 2 [json_name = "validatorSigningInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::validator_signing_info(this),
        _Internal::validator_signing_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.slashing.v1beta1.SigningInfo)
  return target;
}

::size_t SigningInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.slashing.v1beta1.SigningInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .cosmos.slashing.v1beta1.ValidatorSigningInfo validator_signing_info = 2 [json_name = "validatorSigningInfo", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.validator_signing_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SigningInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SigningInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SigningInfo::GetClassData() const { return &_class_data_; }


void SigningInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SigningInfo*>(&to_msg);
  auto& from = static_cast<const SigningInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.slashing.v1beta1.SigningInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_validator_signing_info()->::cosmos::slashing::v1beta1::ValidatorSigningInfo::MergeFrom(
        from._internal_validator_signing_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SigningInfo::CopyFrom(const SigningInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.slashing.v1beta1.SigningInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SigningInfo::IsInitialized() const {
  return true;
}

void SigningInfo::InternalSwap(SigningInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  swap(_impl_.validator_signing_info_, other->_impl_.validator_signing_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SigningInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto[1]);
}
// ===================================================================

class ValidatorMissedBlocks::_Internal {
 public:
};

ValidatorMissedBlocks::ValidatorMissedBlocks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
}
ValidatorMissedBlocks::ValidatorMissedBlocks(const ValidatorMissedBlocks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorMissedBlocks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.missed_blocks_){from._impl_.missed_blocks_}
    , decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
}

inline void ValidatorMissedBlocks::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.missed_blocks_){arena}
    , decltype(_impl_.address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValidatorMissedBlocks::~ValidatorMissedBlocks() {
  // @@protoc_insertion_point(destructor:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorMissedBlocks::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_missed_blocks()->~RepeatedPtrField();
  _impl_.address_.Destroy();
}

void ValidatorMissedBlocks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorMissedBlocks::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_missed_blocks()->Clear();
  _impl_.address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorMissedBlocks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.slashing.v1beta1.ValidatorMissedBlocks.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.slashing.v1beta1.MissedBlock missed_blocks = 2 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missed_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorMissedBlocks::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.slashing.v1beta1.ValidatorMissedBlocks.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .cosmos.slashing.v1beta1.MissedBlock missed_blocks = 2 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_missed_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_missed_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
  return target;
}

::size_t ValidatorMissedBlocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.slashing.v1beta1.MissedBlock missed_blocks = 2 [json_name = "missedBlocks", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_missed_blocks_size();
  for (const auto& msg : this->_internal_missed_blocks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorMissedBlocks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorMissedBlocks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorMissedBlocks::GetClassData() const { return &_class_data_; }


void ValidatorMissedBlocks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorMissedBlocks*>(&to_msg);
  auto& from = static_cast<const ValidatorMissedBlocks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_missed_blocks()->MergeFrom(from._internal_missed_blocks());
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorMissedBlocks::CopyFrom(const ValidatorMissedBlocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.slashing.v1beta1.ValidatorMissedBlocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorMissedBlocks::IsInitialized() const {
  return true;
}

void ValidatorMissedBlocks::InternalSwap(ValidatorMissedBlocks* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_missed_blocks()->InternalSwap(other->_internal_mutable_missed_blocks());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorMissedBlocks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto[2]);
}
// ===================================================================

class MissedBlock::_Internal {
 public:
};

MissedBlock::MissedBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.slashing.v1beta1.MissedBlock)
}
MissedBlock::MissedBlock(const MissedBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.slashing.v1beta1.MissedBlock)
}

inline void MissedBlock::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.index_) { ::int64_t{0} }

    , decltype(_impl_.missed_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MissedBlock::~MissedBlock() {
  // @@protoc_insertion_point(destructor:cosmos.slashing.v1beta1.MissedBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MissedBlock::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MissedBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MissedBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.slashing.v1beta1.MissedBlock)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.missed_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.missed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissedBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool missed = 2 [json_name = "missed"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.missed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MissedBlock::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.slashing.v1beta1.MissedBlock)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_index(), target);
  }

  // bool missed = 2 [json_name = "missed"];
  if (this->_internal_missed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_missed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.slashing.v1beta1.MissedBlock)
  return target;
}

::size_t MissedBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.slashing.v1beta1.MissedBlock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index());
  }

  // bool missed = 2 [json_name = "missed"];
  if (this->_internal_missed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MissedBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MissedBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MissedBlock::GetClassData() const { return &_class_data_; }


void MissedBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MissedBlock*>(&to_msg);
  auto& from = static_cast<const MissedBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.slashing.v1beta1.MissedBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_missed() != 0) {
    _this->_internal_set_missed(from._internal_missed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MissedBlock::CopyFrom(const MissedBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.slashing.v1beta1.MissedBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissedBlock::IsInitialized() const {
  return true;
}

void MissedBlock::InternalSwap(MissedBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissedBlock, _impl_.missed_)
      + sizeof(MissedBlock::_impl_.missed_)
      - PROTOBUF_FIELD_OFFSET(MissedBlock, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissedBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fslashing_2fv1beta1_2fgenesis_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::slashing::v1beta1::GenesisState*
Arena::CreateMaybeMessage< ::cosmos::slashing::v1beta1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::slashing::v1beta1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::slashing::v1beta1::SigningInfo*
Arena::CreateMaybeMessage< ::cosmos::slashing::v1beta1::SigningInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::slashing::v1beta1::SigningInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::slashing::v1beta1::ValidatorMissedBlocks*
Arena::CreateMaybeMessage< ::cosmos::slashing::v1beta1::ValidatorMissedBlocks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::slashing::v1beta1::ValidatorMissedBlocks >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::slashing::v1beta1::MissedBlock*
Arena::CreateMaybeMessage< ::cosmos::slashing::v1beta1::MissedBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::slashing::v1beta1::MissedBlock >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/slashing/v1beta1/query.proto
#ifndef GRPC_cosmos_2fslashing_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fslashing_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/slashing/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace slashing {
namespace v1beta1 {

// Query provides defines the gRPC querier service
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.slashing.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Params queries the parameters of slashing module
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::cosmos::slashing::v1beta1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // SigningInfo queries the signing info of given cons address
    virtual ::grpc::Status SigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>> AsyncSigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>>(AsyncSigningInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>> PrepareAsyncSigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>>(PrepareAsyncSigningInfoRaw(context, request, cq));
    }
    // SigningInfos queries signing info of all validators
    virtual ::grpc::Status SigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>> AsyncSigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>>(AsyncSigningInfosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>> PrepareAsyncSigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>>(PrepareAsyncSigningInfosRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Params queries the parameters of slashing module
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest* request, ::cosmos::slashing::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest* request, ::cosmos::slashing::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SigningInfo queries the signing info of given cons address
      virtual void SigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SigningInfos queries signing info of all validators
      virtual void SigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>* AsyncSigningInfoRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>* PrepareAsyncSigningInfoRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>* AsyncSigningInfosRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>* PrepareAsyncSigningInfosRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::cosmos::slashing::v1beta1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status SigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>> AsyncSigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>>(AsyncSigningInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>> PrepareAsyncSigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>>(PrepareAsyncSigningInfoRaw(context, request, cq));
    }
    ::grpc::Status SigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>> AsyncSigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>>(AsyncSigningInfosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>> PrepareAsyncSigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>>(PrepareAsyncSigningInfosRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Params(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest* request, ::cosmos::slashing::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest* request, ::cosmos::slashing::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void SigningInfo(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* response, std::function<void(::grpc::Status)>) override;
      void SigningInfos(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>* AsyncSigningInfoRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>* PrepareAsyncSigningInfoRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>* AsyncSigningInfosRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>* PrepareAsyncSigningInfosRaw(::grpc::ClientContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_SigningInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SigningInfos_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Params queries the parameters of slashing module
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest* request, ::cosmos::slashing::v1beta1::QueryParamsResponse* response);
    // SigningInfo queries the signing info of given cons address
    virtual ::grpc::Status SigningInfo(::grpc::ServerContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* response);
    // SigningInfos queries signing info of all validators
    virtual ::grpc::Status SigningInfos(::grpc::ServerContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::slashing::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::cosmos::slashing::v1beta1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::slashing::v1beta1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SigningInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SigningInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SigningInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfo(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSigningInfo(::grpc::ServerContext* context, ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SigningInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SigningInfos() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SigningInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfos(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSigningInfos(::grpc::ServerContext* context, ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Params<WithAsyncMethod_SigningInfo<WithAsyncMethod_SigningInfos<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::slashing::v1beta1::QueryParamsRequest, ::cosmos::slashing::v1beta1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::slashing::v1beta1::QueryParamsRequest* request, ::cosmos::slashing::v1beta1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::cosmos::slashing::v1beta1::QueryParamsRequest, ::cosmos::slashing::v1beta1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::slashing::v1beta1::QueryParamsRequest, ::cosmos::slashing::v1beta1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::slashing::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::slashing::v1beta1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SigningInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SigningInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::slashing::v1beta1::QuerySigningInfoRequest, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* response) { return this->SigningInfo(context, request, response); }));}
    void SetMessageAllocatorFor_SigningInfo(
        ::grpc::MessageAllocator< ::cosmos::slashing::v1beta1::QuerySigningInfoRequest, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::slashing::v1beta1::QuerySigningInfoRequest, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SigningInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfo(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SigningInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SigningInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SigningInfos() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::slashing::v1beta1::QuerySigningInfosRequest, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* request, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* response) { return this->SigningInfos(context, request, response); }));}
    void SetMessageAllocatorFor_SigningInfos(
        ::grpc::MessageAllocator< ::cosmos::slashing::v1beta1::QuerySigningInfosRequest, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::slashing::v1beta1::QuerySigningInfosRequest, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SigningInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfos(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SigningInfos(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Params<WithCallbackMethod_SigningInfo<WithCallbackMethod_SigningInfos<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::slashing::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SigningInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SigningInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SigningInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfo(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SigningInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SigningInfos() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SigningInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfos(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::slashing::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SigningInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SigningInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SigningInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfo(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSigningInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SigningInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SigningInfos() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SigningInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfos(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSigningInfos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::slashing::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SigningInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SigningInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SigningInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_SigningInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfo(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SigningInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SigningInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SigningInfos() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SigningInfos(context, request, response); }));
    }
    ~WithRawCallbackMethod_SigningInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SigningInfos(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SigningInfos(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::slashing::v1beta1::QueryParamsRequest, ::cosmos::slashing::v1beta1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::slashing::v1beta1::QueryParamsRequest, ::cosmos::slashing::v1beta1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::slashing::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::slashing::v1beta1::QueryParamsRequest,::cosmos::slashing::v1beta1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SigningInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SigningInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::slashing::v1beta1::QuerySigningInfoRequest, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::slashing::v1beta1::QuerySigningInfoRequest, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse>* streamer) {
                       return this->StreamedSigningInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SigningInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SigningInfo(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfoRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSigningInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::slashing::v1beta1::QuerySigningInfoRequest,::cosmos::slashing::v1beta1::QuerySigningInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SigningInfos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SigningInfos() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::slashing::v1beta1::QuerySigningInfosRequest, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::slashing::v1beta1::QuerySigningInfosRequest, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse>* streamer) {
                       return this->StreamedSigningInfos(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SigningInfos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SigningInfos(::grpc::ServerContext* /*context*/, const ::cosmos::slashing::v1beta1::QuerySigningInfosRequest* /*request*/, ::cosmos::slashing::v1beta1::QuerySigningInfosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSigningInfos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::slashing::v1beta1::QuerySigningInfosRequest,::cosmos::slashing::v1beta1::QuerySigningInfosResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_SigningInfo<WithStreamedUnaryMethod_SigningInfos<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_SigningInfo<WithStreamedUnaryMethod_SigningInfos<Service > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos


#endif  // GRPC_cosmos_2fslashing_2fv1beta1_2fquery_2eproto__INCLUDED

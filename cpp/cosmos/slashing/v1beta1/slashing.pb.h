// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/slashing/v1beta1/slashing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto;
namespace cosmos {
namespace slashing {
namespace v1beta1 {
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class ValidatorSigningInfo;
struct ValidatorSigningInfoDefaultTypeInternal;
extern ValidatorSigningInfoDefaultTypeInternal _ValidatorSigningInfo_default_instance_;
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::slashing::v1beta1::Params* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::Params>(Arena*);
template <>
::cosmos::slashing::v1beta1::ValidatorSigningInfo* Arena::CreateMaybeMessage<::cosmos::slashing::v1beta1::ValidatorSigningInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace slashing {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class ValidatorSigningInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.ValidatorSigningInfo) */ {
 public:
  inline ValidatorSigningInfo() : ValidatorSigningInfo(nullptr) {}
  ~ValidatorSigningInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorSigningInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorSigningInfo(const ValidatorSigningInfo& from);
  ValidatorSigningInfo(ValidatorSigningInfo&& from) noexcept
    : ValidatorSigningInfo() {
    *this = ::std::move(from);
  }

  inline ValidatorSigningInfo& operator=(const ValidatorSigningInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorSigningInfo& operator=(ValidatorSigningInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorSigningInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorSigningInfo* internal_default_instance() {
    return reinterpret_cast<const ValidatorSigningInfo*>(
               &_ValidatorSigningInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ValidatorSigningInfo& a, ValidatorSigningInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorSigningInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorSigningInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorSigningInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidatorSigningInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorSigningInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidatorSigningInfo& from) {
    ValidatorSigningInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorSigningInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.ValidatorSigningInfo";
  }
  protected:
  explicit ValidatorSigningInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kJailedUntilFieldNumber = 4,
    kStartHeightFieldNumber = 2,
    kIndexOffsetFieldNumber = 3,
    kMissedBlocksCounterFieldNumber = 6,
    kTombstonedFieldNumber = 5,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .google.protobuf.Timestamp jailed_until = 4 [json_name = "jailedUntil", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_jailed_until() const;
  void clear_jailed_until() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& jailed_until() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_jailed_until();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_jailed_until();
  void set_allocated_jailed_until(::PROTOBUF_NAMESPACE_ID::Timestamp* jailed_until);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_jailed_until() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_jailed_until();
  public:
  void unsafe_arena_set_allocated_jailed_until(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* jailed_until);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_jailed_until();
  // int64 start_height = 2 [json_name = "startHeight"];
  void clear_start_height() ;
  ::int64_t start_height() const;
  void set_start_height(::int64_t value);

  private:
  ::int64_t _internal_start_height() const;
  void _internal_set_start_height(::int64_t value);

  public:
  // int64 index_offset = 3 [json_name = "indexOffset"];
  void clear_index_offset() ;
  ::int64_t index_offset() const;
  void set_index_offset(::int64_t value);

  private:
  ::int64_t _internal_index_offset() const;
  void _internal_set_index_offset(::int64_t value);

  public:
  // int64 missed_blocks_counter = 6 [json_name = "missedBlocksCounter"];
  void clear_missed_blocks_counter() ;
  ::int64_t missed_blocks_counter() const;
  void set_missed_blocks_counter(::int64_t value);

  private:
  ::int64_t _internal_missed_blocks_counter() const;
  void _internal_set_missed_blocks_counter(::int64_t value);

  public:
  // bool tombstoned = 5 [json_name = "tombstoned"];
  void clear_tombstoned() ;
  bool tombstoned() const;
  void set_tombstoned(bool value);

  private:
  bool _internal_tombstoned() const;
  void _internal_set_tombstoned(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.ValidatorSigningInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* jailed_until_;
    ::int64_t start_height_;
    ::int64_t index_offset_;
    ::int64_t missed_blocks_counter_;
    bool tombstoned_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto;
};// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.slashing.v1beta1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.slashing.v1beta1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinSignedPerWindowFieldNumber = 2,
    kSlashFractionDoubleSignFieldNumber = 4,
    kSlashFractionDowntimeFieldNumber = 5,
    kDowntimeJailDurationFieldNumber = 3,
    kSignedBlocksWindowFieldNumber = 1,
  };
  // bytes min_signed_per_window = 2 [json_name = "minSignedPerWindow", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  void clear_min_signed_per_window() ;
  const std::string& min_signed_per_window() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_min_signed_per_window(Arg_&& arg, Args_... args);
  std::string* mutable_min_signed_per_window();
  PROTOBUF_NODISCARD std::string* release_min_signed_per_window();
  void set_allocated_min_signed_per_window(std::string* ptr);

  private:
  const std::string& _internal_min_signed_per_window() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_signed_per_window(
      const std::string& value);
  std::string* _internal_mutable_min_signed_per_window();

  public:
  // bytes slash_fraction_double_sign = 4 [json_name = "slashFractionDoubleSign", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  void clear_slash_fraction_double_sign() ;
  const std::string& slash_fraction_double_sign() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slash_fraction_double_sign(Arg_&& arg, Args_... args);
  std::string* mutable_slash_fraction_double_sign();
  PROTOBUF_NODISCARD std::string* release_slash_fraction_double_sign();
  void set_allocated_slash_fraction_double_sign(std::string* ptr);

  private:
  const std::string& _internal_slash_fraction_double_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slash_fraction_double_sign(
      const std::string& value);
  std::string* _internal_mutable_slash_fraction_double_sign();

  public:
  // bytes slash_fraction_downtime = 5 [json_name = "slashFractionDowntime", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
  void clear_slash_fraction_downtime() ;
  const std::string& slash_fraction_downtime() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slash_fraction_downtime(Arg_&& arg, Args_... args);
  std::string* mutable_slash_fraction_downtime();
  PROTOBUF_NODISCARD std::string* release_slash_fraction_downtime();
  void set_allocated_slash_fraction_downtime(std::string* ptr);

  private:
  const std::string& _internal_slash_fraction_downtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slash_fraction_downtime(
      const std::string& value);
  std::string* _internal_mutable_slash_fraction_downtime();

  public:
  // .google.protobuf.Duration downtime_jail_duration = 3 [json_name = "downtimeJailDuration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  bool has_downtime_jail_duration() const;
  void clear_downtime_jail_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& downtime_jail_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_downtime_jail_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_downtime_jail_duration();
  void set_allocated_downtime_jail_duration(::PROTOBUF_NAMESPACE_ID::Duration* downtime_jail_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_downtime_jail_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_downtime_jail_duration();
  public:
  void unsafe_arena_set_allocated_downtime_jail_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* downtime_jail_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_downtime_jail_duration();
  // int64 signed_blocks_window = 1 [json_name = "signedBlocksWindow"];
  void clear_signed_blocks_window() ;
  ::int64_t signed_blocks_window() const;
  void set_signed_blocks_window(::int64_t value);

  private:
  ::int64_t _internal_signed_blocks_window() const;
  void _internal_set_signed_blocks_window(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.slashing.v1beta1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_signed_per_window_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slash_fraction_double_sign_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slash_fraction_downtime_;
    ::PROTOBUF_NAMESPACE_ID::Duration* downtime_jail_duration_;
    ::int64_t signed_blocks_window_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ValidatorSigningInfo

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void ValidatorSigningInfo::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ValidatorSigningInfo::address() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.ValidatorSigningInfo.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ValidatorSigningInfo::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.ValidatorSigningInfo.address)
}
inline std::string* ValidatorSigningInfo::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.ValidatorSigningInfo.address)
  return _s;
}
inline const std::string& ValidatorSigningInfo::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ValidatorSigningInfo::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ValidatorSigningInfo::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* ValidatorSigningInfo::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.ValidatorSigningInfo.address)
  return _impl_.address_.Release();
}
inline void ValidatorSigningInfo::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.ValidatorSigningInfo.address)
}

// int64 start_height = 2 [json_name = "startHeight"];
inline void ValidatorSigningInfo::clear_start_height() {
  _impl_.start_height_ = ::int64_t{0};
}
inline ::int64_t ValidatorSigningInfo::start_height() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.ValidatorSigningInfo.start_height)
  return _internal_start_height();
}
inline void ValidatorSigningInfo::set_start_height(::int64_t value) {
  _internal_set_start_height(value);
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.ValidatorSigningInfo.start_height)
}
inline ::int64_t ValidatorSigningInfo::_internal_start_height() const {
  return _impl_.start_height_;
}
inline void ValidatorSigningInfo::_internal_set_start_height(::int64_t value) {
  ;
  _impl_.start_height_ = value;
}

// int64 index_offset = 3 [json_name = "indexOffset"];
inline void ValidatorSigningInfo::clear_index_offset() {
  _impl_.index_offset_ = ::int64_t{0};
}
inline ::int64_t ValidatorSigningInfo::index_offset() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.ValidatorSigningInfo.index_offset)
  return _internal_index_offset();
}
inline void ValidatorSigningInfo::set_index_offset(::int64_t value) {
  _internal_set_index_offset(value);
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.ValidatorSigningInfo.index_offset)
}
inline ::int64_t ValidatorSigningInfo::_internal_index_offset() const {
  return _impl_.index_offset_;
}
inline void ValidatorSigningInfo::_internal_set_index_offset(::int64_t value) {
  ;
  _impl_.index_offset_ = value;
}

// .google.protobuf.Timestamp jailed_until = 4 [json_name = "jailedUntil", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool ValidatorSigningInfo::has_jailed_until() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.jailed_until_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ValidatorSigningInfo::_internal_jailed_until() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.jailed_until_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ValidatorSigningInfo::jailed_until() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.ValidatorSigningInfo.jailed_until)
  return _internal_jailed_until();
}
inline void ValidatorSigningInfo::unsafe_arena_set_allocated_jailed_until(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* jailed_until) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jailed_until_);
  }
  _impl_.jailed_until_ = jailed_until;
  if (jailed_until) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.slashing.v1beta1.ValidatorSigningInfo.jailed_until)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ValidatorSigningInfo::release_jailed_until() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.jailed_until_;
  _impl_.jailed_until_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ValidatorSigningInfo::unsafe_arena_release_jailed_until() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.ValidatorSigningInfo.jailed_until)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.jailed_until_;
  _impl_.jailed_until_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ValidatorSigningInfo::_internal_mutable_jailed_until() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.jailed_until_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.jailed_until_ = p;
  }
  return _impl_.jailed_until_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ValidatorSigningInfo::mutable_jailed_until() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_jailed_until();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.ValidatorSigningInfo.jailed_until)
  return _msg;
}
inline void ValidatorSigningInfo::set_allocated_jailed_until(::PROTOBUF_NAMESPACE_ID::Timestamp* jailed_until) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jailed_until_);
  }
  if (jailed_until) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jailed_until));
    if (message_arena != submessage_arena) {
      jailed_until = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jailed_until, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.jailed_until_ = jailed_until;
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.ValidatorSigningInfo.jailed_until)
}

// bool tombstoned = 5 [json_name = "tombstoned"];
inline void ValidatorSigningInfo::clear_tombstoned() {
  _impl_.tombstoned_ = false;
}
inline bool ValidatorSigningInfo::tombstoned() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.ValidatorSigningInfo.tombstoned)
  return _internal_tombstoned();
}
inline void ValidatorSigningInfo::set_tombstoned(bool value) {
  _internal_set_tombstoned(value);
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.ValidatorSigningInfo.tombstoned)
}
inline bool ValidatorSigningInfo::_internal_tombstoned() const {
  return _impl_.tombstoned_;
}
inline void ValidatorSigningInfo::_internal_set_tombstoned(bool value) {
  ;
  _impl_.tombstoned_ = value;
}

// int64 missed_blocks_counter = 6 [json_name = "missedBlocksCounter"];
inline void ValidatorSigningInfo::clear_missed_blocks_counter() {
  _impl_.missed_blocks_counter_ = ::int64_t{0};
}
inline ::int64_t ValidatorSigningInfo::missed_blocks_counter() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.ValidatorSigningInfo.missed_blocks_counter)
  return _internal_missed_blocks_counter();
}
inline void ValidatorSigningInfo::set_missed_blocks_counter(::int64_t value) {
  _internal_set_missed_blocks_counter(value);
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.ValidatorSigningInfo.missed_blocks_counter)
}
inline ::int64_t ValidatorSigningInfo::_internal_missed_blocks_counter() const {
  return _impl_.missed_blocks_counter_;
}
inline void ValidatorSigningInfo::_internal_set_missed_blocks_counter(::int64_t value) {
  ;
  _impl_.missed_blocks_counter_ = value;
}

// -------------------------------------------------------------------

// Params

// int64 signed_blocks_window = 1 [json_name = "signedBlocksWindow"];
inline void Params::clear_signed_blocks_window() {
  _impl_.signed_blocks_window_ = ::int64_t{0};
}
inline ::int64_t Params::signed_blocks_window() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.Params.signed_blocks_window)
  return _internal_signed_blocks_window();
}
inline void Params::set_signed_blocks_window(::int64_t value) {
  _internal_set_signed_blocks_window(value);
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.Params.signed_blocks_window)
}
inline ::int64_t Params::_internal_signed_blocks_window() const {
  return _impl_.signed_blocks_window_;
}
inline void Params::_internal_set_signed_blocks_window(::int64_t value) {
  ;
  _impl_.signed_blocks_window_ = value;
}

// bytes min_signed_per_window = 2 [json_name = "minSignedPerWindow", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_min_signed_per_window() {
  _impl_.min_signed_per_window_.ClearToEmpty();
}
inline const std::string& Params::min_signed_per_window() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.Params.min_signed_per_window)
  return _internal_min_signed_per_window();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_min_signed_per_window(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.min_signed_per_window_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.Params.min_signed_per_window)
}
inline std::string* Params::mutable_min_signed_per_window() {
  std::string* _s = _internal_mutable_min_signed_per_window();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.Params.min_signed_per_window)
  return _s;
}
inline const std::string& Params::_internal_min_signed_per_window() const {
  return _impl_.min_signed_per_window_.Get();
}
inline void Params::_internal_set_min_signed_per_window(const std::string& value) {
  ;


  _impl_.min_signed_per_window_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_min_signed_per_window() {
  ;
  return _impl_.min_signed_per_window_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_min_signed_per_window() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.Params.min_signed_per_window)
  return _impl_.min_signed_per_window_.Release();
}
inline void Params::set_allocated_min_signed_per_window(std::string* value) {
  _impl_.min_signed_per_window_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.min_signed_per_window_.IsDefault()) {
          _impl_.min_signed_per_window_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.Params.min_signed_per_window)
}

// .google.protobuf.Duration downtime_jail_duration = 3 [json_name = "downtimeJailDuration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
inline bool Params::has_downtime_jail_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.downtime_jail_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Params::_internal_downtime_jail_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.downtime_jail_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Params::downtime_jail_duration() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.Params.downtime_jail_duration)
  return _internal_downtime_jail_duration();
}
inline void Params::unsafe_arena_set_allocated_downtime_jail_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* downtime_jail_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.downtime_jail_duration_);
  }
  _impl_.downtime_jail_duration_ = downtime_jail_duration;
  if (downtime_jail_duration) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.slashing.v1beta1.Params.downtime_jail_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::release_downtime_jail_duration() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.downtime_jail_duration_;
  _impl_.downtime_jail_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::unsafe_arena_release_downtime_jail_duration() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.Params.downtime_jail_duration)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.downtime_jail_duration_;
  _impl_.downtime_jail_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::_internal_mutable_downtime_jail_duration() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.downtime_jail_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.downtime_jail_duration_ = p;
  }
  return _impl_.downtime_jail_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::mutable_downtime_jail_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_downtime_jail_duration();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.Params.downtime_jail_duration)
  return _msg;
}
inline void Params::set_allocated_downtime_jail_duration(::PROTOBUF_NAMESPACE_ID::Duration* downtime_jail_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.downtime_jail_duration_);
  }
  if (downtime_jail_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(downtime_jail_duration));
    if (message_arena != submessage_arena) {
      downtime_jail_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, downtime_jail_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.downtime_jail_duration_ = downtime_jail_duration;
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.Params.downtime_jail_duration)
}

// bytes slash_fraction_double_sign = 4 [json_name = "slashFractionDoubleSign", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_slash_fraction_double_sign() {
  _impl_.slash_fraction_double_sign_.ClearToEmpty();
}
inline const std::string& Params::slash_fraction_double_sign() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.Params.slash_fraction_double_sign)
  return _internal_slash_fraction_double_sign();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_slash_fraction_double_sign(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.slash_fraction_double_sign_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.Params.slash_fraction_double_sign)
}
inline std::string* Params::mutable_slash_fraction_double_sign() {
  std::string* _s = _internal_mutable_slash_fraction_double_sign();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.Params.slash_fraction_double_sign)
  return _s;
}
inline const std::string& Params::_internal_slash_fraction_double_sign() const {
  return _impl_.slash_fraction_double_sign_.Get();
}
inline void Params::_internal_set_slash_fraction_double_sign(const std::string& value) {
  ;


  _impl_.slash_fraction_double_sign_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_slash_fraction_double_sign() {
  ;
  return _impl_.slash_fraction_double_sign_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_slash_fraction_double_sign() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.Params.slash_fraction_double_sign)
  return _impl_.slash_fraction_double_sign_.Release();
}
inline void Params::set_allocated_slash_fraction_double_sign(std::string* value) {
  _impl_.slash_fraction_double_sign_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slash_fraction_double_sign_.IsDefault()) {
          _impl_.slash_fraction_double_sign_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.Params.slash_fraction_double_sign)
}

// bytes slash_fraction_downtime = 5 [json_name = "slashFractionDowntime", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.amino.dont_omitempty) = true];
inline void Params::clear_slash_fraction_downtime() {
  _impl_.slash_fraction_downtime_.ClearToEmpty();
}
inline const std::string& Params::slash_fraction_downtime() const {
  // @@protoc_insertion_point(field_get:cosmos.slashing.v1beta1.Params.slash_fraction_downtime)
  return _internal_slash_fraction_downtime();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_slash_fraction_downtime(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.slash_fraction_downtime_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.slashing.v1beta1.Params.slash_fraction_downtime)
}
inline std::string* Params::mutable_slash_fraction_downtime() {
  std::string* _s = _internal_mutable_slash_fraction_downtime();
  // @@protoc_insertion_point(field_mutable:cosmos.slashing.v1beta1.Params.slash_fraction_downtime)
  return _s;
}
inline const std::string& Params::_internal_slash_fraction_downtime() const {
  return _impl_.slash_fraction_downtime_.Get();
}
inline void Params::_internal_set_slash_fraction_downtime(const std::string& value) {
  ;


  _impl_.slash_fraction_downtime_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_slash_fraction_downtime() {
  ;
  return _impl_.slash_fraction_downtime_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_slash_fraction_downtime() {
  // @@protoc_insertion_point(field_release:cosmos.slashing.v1beta1.Params.slash_fraction_downtime)
  return _impl_.slash_fraction_downtime_.Release();
}
inline void Params::set_allocated_slash_fraction_downtime(std::string* value) {
  _impl_.slash_fraction_downtime_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slash_fraction_downtime_.IsDefault()) {
          _impl_.slash_fraction_downtime_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.slashing.v1beta1.Params.slash_fraction_downtime)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace slashing
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fslashing_2fv1beta1_2fslashing_2eproto_2epb_2eh

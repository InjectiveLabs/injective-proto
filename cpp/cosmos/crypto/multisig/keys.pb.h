// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/crypto/multisig/keys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto;
namespace cosmos {
namespace crypto {
namespace multisig {
class LegacyAminoPubKey;
struct LegacyAminoPubKeyDefaultTypeInternal;
extern LegacyAminoPubKeyDefaultTypeInternal _LegacyAminoPubKey_default_instance_;
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::crypto::multisig::LegacyAminoPubKey* Arena::CreateMaybeMessage<::cosmos::crypto::multisig::LegacyAminoPubKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace crypto {
namespace multisig {

// ===================================================================


// -------------------------------------------------------------------

class LegacyAminoPubKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.crypto.multisig.LegacyAminoPubKey) */ {
 public:
  inline LegacyAminoPubKey() : LegacyAminoPubKey(nullptr) {}
  ~LegacyAminoPubKey() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LegacyAminoPubKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LegacyAminoPubKey(const LegacyAminoPubKey& from);
  LegacyAminoPubKey(LegacyAminoPubKey&& from) noexcept
    : LegacyAminoPubKey() {
    *this = ::std::move(from);
  }

  inline LegacyAminoPubKey& operator=(const LegacyAminoPubKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline LegacyAminoPubKey& operator=(LegacyAminoPubKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LegacyAminoPubKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const LegacyAminoPubKey* internal_default_instance() {
    return reinterpret_cast<const LegacyAminoPubKey*>(
               &_LegacyAminoPubKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LegacyAminoPubKey& a, LegacyAminoPubKey& b) {
    a.Swap(&b);
  }
  inline void Swap(LegacyAminoPubKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LegacyAminoPubKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LegacyAminoPubKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LegacyAminoPubKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LegacyAminoPubKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LegacyAminoPubKey& from) {
    LegacyAminoPubKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegacyAminoPubKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.crypto.multisig.LegacyAminoPubKey";
  }
  protected:
  explicit LegacyAminoPubKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeysFieldNumber = 2,
    kThresholdFieldNumber = 1,
  };
  // repeated .google.protobuf.Any public_keys = 2 [json_name = "publicKeys", (.gogoproto.customname) = "PubKeys", (.amino.field_name) = "pubkeys"];
  int public_keys_size() const;
  private:
  int _internal_public_keys_size() const;

  public:
  void clear_public_keys() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_public_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_public_keys();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_public_keys(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_public_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_public_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_public_keys();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& public_keys(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_public_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      public_keys() const;
  // uint32 threshold = 1 [json_name = "threshold"];
  void clear_threshold() ;
  ::uint32_t threshold() const;
  void set_threshold(::uint32_t value);

  private:
  ::uint32_t _internal_threshold() const;
  void _internal_set_threshold(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.crypto.multisig.LegacyAminoPubKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > public_keys_;
    ::uint32_t threshold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LegacyAminoPubKey

// uint32 threshold = 1 [json_name = "threshold"];
inline void LegacyAminoPubKey::clear_threshold() {
  _impl_.threshold_ = 0u;
}
inline ::uint32_t LegacyAminoPubKey::threshold() const {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.LegacyAminoPubKey.threshold)
  return _internal_threshold();
}
inline void LegacyAminoPubKey::set_threshold(::uint32_t value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:cosmos.crypto.multisig.LegacyAminoPubKey.threshold)
}
inline ::uint32_t LegacyAminoPubKey::_internal_threshold() const {
  return _impl_.threshold_;
}
inline void LegacyAminoPubKey::_internal_set_threshold(::uint32_t value) {
  ;
  _impl_.threshold_ = value;
}

// repeated .google.protobuf.Any public_keys = 2 [json_name = "publicKeys", (.gogoproto.customname) = "PubKeys", (.amino.field_name) = "pubkeys"];
inline int LegacyAminoPubKey::_internal_public_keys_size() const {
  return _impl_.public_keys_.size();
}
inline int LegacyAminoPubKey::public_keys_size() const {
  return _internal_public_keys_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* LegacyAminoPubKey::mutable_public_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _internal_mutable_public_keys()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
LegacyAminoPubKey::mutable_public_keys() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _internal_mutable_public_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& LegacyAminoPubKey::_internal_public_keys(int index) const {
  return _internal_public_keys().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& LegacyAminoPubKey::public_keys(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _internal_public_keys(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* LegacyAminoPubKey::_internal_add_public_keys() {
  return _internal_mutable_public_keys()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* LegacyAminoPubKey::add_public_keys() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_public_keys();
  // @@protoc_insertion_point(field_add:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
LegacyAminoPubKey::public_keys() const {
  // @@protoc_insertion_point(field_list:cosmos.crypto.multisig.LegacyAminoPubKey.public_keys)
  return _internal_public_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
LegacyAminoPubKey::_internal_public_keys() const {
  return _impl_.public_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
LegacyAminoPubKey::_internal_mutable_public_keys() {
  return &_impl_.public_keys_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace multisig
}  // namespace crypto
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fcrypto_2fmultisig_2fkeys_2eproto_2epb_2eh

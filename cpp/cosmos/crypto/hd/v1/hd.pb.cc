// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/crypto/hd/v1/hd.proto

#include "cosmos/crypto/hd/v1/hd.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace crypto {
namespace hd {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR BIP44Params::BIP44Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.purpose_)*/ 0u

  , /*decltype(_impl_.coin_type_)*/ 0u

  , /*decltype(_impl_.account_)*/ 0u

  , /*decltype(_impl_.change_)*/ false

  , /*decltype(_impl_.address_index_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BIP44ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BIP44ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BIP44ParamsDefaultTypeInternal() {}
  union {
    BIP44Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BIP44ParamsDefaultTypeInternal _BIP44Params_default_instance_;
}  // namespace v1
}  // namespace hd
}  // namespace crypto
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::hd::v1::BIP44Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::hd::v1::BIP44Params, _impl_.purpose_),
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::hd::v1::BIP44Params, _impl_.coin_type_),
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::hd::v1::BIP44Params, _impl_.account_),
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::hd::v1::BIP44Params, _impl_.change_),
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::hd::v1::BIP44Params, _impl_.address_index_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::crypto::hd::v1::BIP44Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::crypto::hd::v1::_BIP44Params_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034cosmos/crypto/hd/v1/hd.proto\022\023cosmos.c"
    "rypto.hd.v1\032\021amino/amino.proto\032\024gogoprot"
    "o/gogo.proto\"\300\001\n\013BIP44Params\022\030\n\007purpose\030"
    "\001 \001(\rR\007purpose\022\033\n\tcoin_type\030\002 \001(\rR\010coinT"
    "ype\022\030\n\007account\030\003 \001(\rR\007account\022\026\n\006change\030"
    "\004 \001(\010R\006change\022#\n\raddress_index\030\005 \001(\rR\014ad"
    "dressIndex:#\230\240\037\000\212\347\260*\032crypto/keys/hd/BIP4"
    "4ParamsB\275\001\n\027com.cosmos.crypto.hd.v1B\007HdP"
    "rotoP\001Z&github.com/cosmos/cosmos-sdk/cry"
    "pto/hd\242\002\003CCH\252\002\023Cosmos.Crypto.Hd.V1\312\002\023Cos"
    "mos\\Crypto\\Hd\\V1\342\002\037Cosmos\\Crypto\\Hd\\V1\\G"
    "PBMetadata\352\002\026Cosmos::Crypto::Hd::V1\310\341\036\000b"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto_deps[2] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto = {
    false,
    false,
    487,
    descriptor_table_protodef_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto,
    "cosmos/crypto/hd/v1/hd.proto",
    &descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto_once,
    descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto::offsets,
    file_level_metadata_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto,
    file_level_enum_descriptors_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto,
    file_level_service_descriptors_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto_getter() {
  return &descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto(&descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto);
namespace cosmos {
namespace crypto {
namespace hd {
namespace v1 {
// ===================================================================

class BIP44Params::_Internal {
 public:
};

BIP44Params::BIP44Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.hd.v1.BIP44Params)
}
BIP44Params::BIP44Params(const BIP44Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.hd.v1.BIP44Params)
}

inline void BIP44Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.purpose_) { 0u }

    , decltype(_impl_.coin_type_) { 0u }

    , decltype(_impl_.account_) { 0u }

    , decltype(_impl_.change_) { false }

    , decltype(_impl_.address_index_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BIP44Params::~BIP44Params() {
  // @@protoc_insertion_point(destructor:cosmos.crypto.hd.v1.BIP44Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BIP44Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void BIP44Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BIP44Params::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.crypto.hd.v1.BIP44Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.purpose_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.address_index_) -
      reinterpret_cast<char*>(&_impl_.purpose_)) + sizeof(_impl_.address_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BIP44Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 purpose = 1 [json_name = "purpose"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.purpose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 coin_type = 2 [json_name = "coinType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.coin_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 account = 3 [json_name = "account"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool change = 4 [json_name = "change"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 address_index = 5 [json_name = "addressIndex"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.address_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BIP44Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.crypto.hd.v1.BIP44Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 purpose = 1 [json_name = "purpose"];
  if (this->_internal_purpose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_purpose(), target);
  }

  // uint32 coin_type = 2 [json_name = "coinType"];
  if (this->_internal_coin_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_coin_type(), target);
  }

  // uint32 account = 3 [json_name = "account"];
  if (this->_internal_account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_account(), target);
  }

  // bool change = 4 [json_name = "change"];
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_change(), target);
  }

  // uint32 address_index = 5 [json_name = "addressIndex"];
  if (this->_internal_address_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_address_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.crypto.hd.v1.BIP44Params)
  return target;
}

::size_t BIP44Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.crypto.hd.v1.BIP44Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 purpose = 1 [json_name = "purpose"];
  if (this->_internal_purpose() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_purpose());
  }

  // uint32 coin_type = 2 [json_name = "coinType"];
  if (this->_internal_coin_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_coin_type());
  }

  // uint32 account = 3 [json_name = "account"];
  if (this->_internal_account() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_account());
  }

  // bool change = 4 [json_name = "change"];
  if (this->_internal_change() != 0) {
    total_size += 2;
  }

  // uint32 address_index = 5 [json_name = "addressIndex"];
  if (this->_internal_address_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_address_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BIP44Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BIP44Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BIP44Params::GetClassData() const { return &_class_data_; }


void BIP44Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BIP44Params*>(&to_msg);
  auto& from = static_cast<const BIP44Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.crypto.hd.v1.BIP44Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_purpose() != 0) {
    _this->_internal_set_purpose(from._internal_purpose());
  }
  if (from._internal_coin_type() != 0) {
    _this->_internal_set_coin_type(from._internal_coin_type());
  }
  if (from._internal_account() != 0) {
    _this->_internal_set_account(from._internal_account());
  }
  if (from._internal_change() != 0) {
    _this->_internal_set_change(from._internal_change());
  }
  if (from._internal_address_index() != 0) {
    _this->_internal_set_address_index(from._internal_address_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BIP44Params::CopyFrom(const BIP44Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.crypto.hd.v1.BIP44Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BIP44Params::IsInitialized() const {
  return true;
}

void BIP44Params::InternalSwap(BIP44Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BIP44Params, _impl_.address_index_)
      + sizeof(BIP44Params::_impl_.address_index_)
      - PROTOBUF_FIELD_OFFSET(BIP44Params, _impl_.purpose_)>(
          reinterpret_cast<char*>(&_impl_.purpose_),
          reinterpret_cast<char*>(&other->_impl_.purpose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BIP44Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto_getter, &descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto_once,
      file_level_metadata_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace hd
}  // namespace crypto
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::crypto::hd::v1::BIP44Params*
Arena::CreateMaybeMessage< ::cosmos::crypto::hd::v1::BIP44Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::crypto::hd::v1::BIP44Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/crypto/keyring/v1/record.proto

#include "cosmos/crypto/keyring/v1/record.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace crypto {
namespace keyring {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Record_Local::Record_Local(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.priv_key_)*/nullptr} {}
struct Record_LocalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Record_LocalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Record_LocalDefaultTypeInternal() {}
  union {
    Record_Local _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Record_LocalDefaultTypeInternal _Record_Local_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Record_Ledger::Record_Ledger(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/nullptr} {}
struct Record_LedgerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Record_LedgerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Record_LedgerDefaultTypeInternal() {}
  union {
    Record_Ledger _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Record_LedgerDefaultTypeInternal _Record_Ledger_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Record_Multi::Record_Multi(
    ::_pbi::ConstantInitialized) {}
struct Record_MultiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Record_MultiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Record_MultiDefaultTypeInternal() {}
  union {
    Record_Multi _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Record_MultiDefaultTypeInternal _Record_Multi_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Record_Offline::Record_Offline(
    ::_pbi::ConstantInitialized) {}
struct Record_OfflineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Record_OfflineDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Record_OfflineDefaultTypeInternal() {}
  union {
    Record_Offline _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Record_OfflineDefaultTypeInternal _Record_Offline_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Record::Record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pub_key_)*/nullptr
  , /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordDefaultTypeInternal() {}
  union {
    Record _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordDefaultTypeInternal _Record_default_instance_;
}  // namespace v1
}  // namespace keyring
}  // namespace crypto
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record_Local, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record_Local, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record_Local, _impl_.priv_key_),
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record_Ledger, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record_Ledger, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record_Ledger, _impl_.path_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record_Multi, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record_Offline, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record, _impl_.pub_key_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record, _impl_.item_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::cosmos::crypto::keyring::v1::Record_Local)},
        { 10, 19, -1, sizeof(::cosmos::crypto::keyring::v1::Record_Ledger)},
        { 20, -1, -1, sizeof(::cosmos::crypto::keyring::v1::Record_Multi)},
        { 28, -1, -1, sizeof(::cosmos::crypto::keyring::v1::Record_Offline)},
        { 36, 51, -1, sizeof(::cosmos::crypto::keyring::v1::Record)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::crypto::keyring::v1::_Record_Local_default_instance_._instance,
    &::cosmos::crypto::keyring::v1::_Record_Ledger_default_instance_._instance,
    &::cosmos::crypto::keyring::v1::_Record_Multi_default_instance_._instance,
    &::cosmos::crypto::keyring::v1::_Record_Offline_default_instance_._instance,
    &::cosmos::crypto::keyring::v1::_Record_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%cosmos/crypto/keyring/v1/record.proto\022"
    "\030cosmos.crypto.keyring.v1\032\024gogoproto/gog"
    "o.proto\032\031google/protobuf/any.proto\032\034cosm"
    "os/crypto/hd/v1/hd.proto\"\352\003\n\006Record\022\022\n\004n"
    "ame\030\001 \001(\tR\004name\022-\n\007pub_key\030\002 \001(\0132\024.googl"
    "e.protobuf.AnyR\006pubKey\022>\n\005local\030\003 \001(\0132&."
    "cosmos.crypto.keyring.v1.Record.LocalH\000R"
    "\005local\022A\n\006ledger\030\004 \001(\0132\'.cosmos.crypto.k"
    "eyring.v1.Record.LedgerH\000R\006ledger\022>\n\005mul"
    "ti\030\005 \001(\0132&.cosmos.crypto.keyring.v1.Reco"
    "rd.MultiH\000R\005multi\022D\n\007offline\030\006 \001(\0132(.cos"
    "mos.crypto.keyring.v1.Record.OfflineH\000R\007"
    "offline\0328\n\005Local\022/\n\010priv_key\030\001 \001(\0132\024.goo"
    "gle.protobuf.AnyR\007privKey\032>\n\006Ledger\0224\n\004p"
    "ath\030\001 \001(\0132 .cosmos.crypto.hd.v1.BIP44Par"
    "amsR\004path\032\007\n\005Multi\032\t\n\007OfflineB\006\n\004itemB\343\001"
    "\n\034com.cosmos.crypto.keyring.v1B\013RecordPr"
    "otoP\001Z+github.com/cosmos/cosmos-sdk/cryp"
    "to/keyring\242\002\003CCK\252\002\030Cosmos.Crypto.Keyring"
    ".V1\312\002\030Cosmos\\Crypto\\Keyring\\V1\342\002$Cosmos\\"
    "Crypto\\Keyring\\V1\\GPBMetadata\352\002\033Cosmos::"
    "Crypto::Keyring::V1\310\341\036\000\230\343\036\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fcrypto_2fhd_2fv1_2fhd_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto = {
    false,
    false,
    875,
    descriptor_table_protodef_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto,
    "cosmos/crypto/keyring/v1/record.proto",
    &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_once,
    descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto::offsets,
    file_level_metadata_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto,
    file_level_enum_descriptors_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto,
    file_level_service_descriptors_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_getter() {
  return &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto(&descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto);
namespace cosmos {
namespace crypto {
namespace keyring {
namespace v1 {
// ===================================================================

class Record_Local::_Internal {
 public:
  using HasBits = decltype(std::declval<Record_Local>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Record_Local, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& priv_key(const Record_Local* msg);
  static void set_has_priv_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Record_Local::_Internal::priv_key(const Record_Local* msg) {
  return *msg->_impl_.priv_key_;
}
void Record_Local::clear_priv_key() {
  if (_impl_.priv_key_ != nullptr) _impl_.priv_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Record_Local::Record_Local(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.keyring.v1.Record.Local)
}
Record_Local::Record_Local(const Record_Local& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Record_Local* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.priv_key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.priv_key_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.priv_key_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.keyring.v1.Record.Local)
}

inline void Record_Local::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.priv_key_){nullptr}
  };
}

Record_Local::~Record_Local() {
  // @@protoc_insertion_point(destructor:cosmos.crypto.keyring.v1.Record.Local)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Record_Local::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.priv_key_;
}

void Record_Local::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Record_Local::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.crypto.keyring.v1.Record.Local)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.priv_key_ != nullptr);
    _impl_.priv_key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Record_Local::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any priv_key = 1 [json_name = "privKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_priv_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Record_Local::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.crypto.keyring.v1.Record.Local)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any priv_key = 1 [json_name = "privKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::priv_key(this),
        _Internal::priv_key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.crypto.keyring.v1.Record.Local)
  return target;
}

::size_t Record_Local::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.crypto.keyring.v1.Record.Local)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Any priv_key = 1 [json_name = "privKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.priv_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Record_Local::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Record_Local::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Record_Local::GetClassData() const { return &_class_data_; }


void Record_Local::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Record_Local*>(&to_msg);
  auto& from = static_cast<const Record_Local&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.crypto.keyring.v1.Record.Local)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_priv_key()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_priv_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Record_Local::CopyFrom(const Record_Local& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.crypto.keyring.v1.Record.Local)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_Local::IsInitialized() const {
  return true;
}

void Record_Local::InternalSwap(Record_Local* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.priv_key_, other->_impl_.priv_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Record_Local::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_getter, &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_once,
      file_level_metadata_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto[0]);
}
// ===================================================================

class Record_Ledger::_Internal {
 public:
  using HasBits = decltype(std::declval<Record_Ledger>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Record_Ledger, _impl_._has_bits_);
  static const ::cosmos::crypto::hd::v1::BIP44Params& path(const Record_Ledger* msg);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::crypto::hd::v1::BIP44Params&
Record_Ledger::_Internal::path(const Record_Ledger* msg) {
  return *msg->_impl_.path_;
}
void Record_Ledger::clear_path() {
  if (_impl_.path_ != nullptr) _impl_.path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Record_Ledger::Record_Ledger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.keyring.v1.Record.Ledger)
}
Record_Ledger::Record_Ledger(const Record_Ledger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Record_Ledger* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.path_ = new ::cosmos::crypto::hd::v1::BIP44Params(*from._impl_.path_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.keyring.v1.Record.Ledger)
}

inline void Record_Ledger::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_){nullptr}
  };
}

Record_Ledger::~Record_Ledger() {
  // @@protoc_insertion_point(destructor:cosmos.crypto.keyring.v1.Record.Ledger)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Record_Ledger::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.path_;
}

void Record_Ledger::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Record_Ledger::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.crypto.keyring.v1.Record.Ledger)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.path_ != nullptr);
    _impl_.path_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Record_Ledger::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.crypto.hd.v1.BIP44Params path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Record_Ledger::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.crypto.keyring.v1.Record.Ledger)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.crypto.hd.v1.BIP44Params path = 1 [json_name = "path"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.crypto.keyring.v1.Record.Ledger)
  return target;
}

::size_t Record_Ledger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.crypto.keyring.v1.Record.Ledger)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.crypto.hd.v1.BIP44Params path = 1 [json_name = "path"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.path_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Record_Ledger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Record_Ledger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Record_Ledger::GetClassData() const { return &_class_data_; }


void Record_Ledger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Record_Ledger*>(&to_msg);
  auto& from = static_cast<const Record_Ledger&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.crypto.keyring.v1.Record.Ledger)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_path()->::cosmos::crypto::hd::v1::BIP44Params::MergeFrom(
        from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Record_Ledger::CopyFrom(const Record_Ledger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.crypto.keyring.v1.Record.Ledger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record_Ledger::IsInitialized() const {
  return true;
}

void Record_Ledger::InternalSwap(Record_Ledger* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.path_, other->_impl_.path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Record_Ledger::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_getter, &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_once,
      file_level_metadata_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto[1]);
}
// ===================================================================

class Record_Multi::_Internal {
 public:
};

Record_Multi::Record_Multi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.keyring.v1.Record.Multi)
}
Record_Multi::Record_Multi(const Record_Multi& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Record_Multi* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.keyring.v1.Record.Multi)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Record_Multi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Record_Multi::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Record_Multi::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_getter, &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_once,
      file_level_metadata_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto[2]);
}
// ===================================================================

class Record_Offline::_Internal {
 public:
};

Record_Offline::Record_Offline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.keyring.v1.Record.Offline)
}
Record_Offline::Record_Offline(const Record_Offline& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Record_Offline* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.keyring.v1.Record.Offline)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Record_Offline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Record_Offline::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Record_Offline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_getter, &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_once,
      file_level_metadata_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto[3]);
}
// ===================================================================

class Record::_Internal {
 public:
  using HasBits = decltype(std::declval<Record>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Record, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cosmos::crypto::keyring::v1::Record, _impl_._oneof_case_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& pub_key(const Record* msg);
  static void set_has_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::crypto::keyring::v1::Record_Local& local(const Record* msg);
  static const ::cosmos::crypto::keyring::v1::Record_Ledger& ledger(const Record* msg);
  static const ::cosmos::crypto::keyring::v1::Record_Multi& multi(const Record* msg);
  static const ::cosmos::crypto::keyring::v1::Record_Offline& offline(const Record* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Record::_Internal::pub_key(const Record* msg) {
  return *msg->_impl_.pub_key_;
}
const ::cosmos::crypto::keyring::v1::Record_Local&
Record::_Internal::local(const Record* msg) {
  return *msg->_impl_.item_.local_;
}
const ::cosmos::crypto::keyring::v1::Record_Ledger&
Record::_Internal::ledger(const Record* msg) {
  return *msg->_impl_.item_.ledger_;
}
const ::cosmos::crypto::keyring::v1::Record_Multi&
Record::_Internal::multi(const Record* msg) {
  return *msg->_impl_.item_.multi_;
}
const ::cosmos::crypto::keyring::v1::Record_Offline&
Record::_Internal::offline(const Record* msg) {
  return *msg->_impl_.item_.offline_;
}
void Record::clear_pub_key() {
  if (_impl_.pub_key_ != nullptr) _impl_.pub_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Record::set_allocated_local(::cosmos::crypto::keyring::v1::Record_Local* local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local);
    if (message_arena != submessage_arena) {
      local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local, submessage_arena);
    }
    set_has_local();
    _impl_.item_.local_ = local;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.keyring.v1.Record.local)
}
void Record::set_allocated_ledger(::cosmos::crypto::keyring::v1::Record_Ledger* ledger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (ledger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ledger);
    if (message_arena != submessage_arena) {
      ledger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ledger, submessage_arena);
    }
    set_has_ledger();
    _impl_.item_.ledger_ = ledger;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.keyring.v1.Record.ledger)
}
void Record::set_allocated_multi(::cosmos::crypto::keyring::v1::Record_Multi* multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multi);
    if (message_arena != submessage_arena) {
      multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi, submessage_arena);
    }
    set_has_multi();
    _impl_.item_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.keyring.v1.Record.multi)
}
void Record::set_allocated_offline(::cosmos::crypto::keyring::v1::Record_Offline* offline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (offline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(offline);
    if (message_arena != submessage_arena) {
      offline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offline, submessage_arena);
    }
    set_has_offline();
    _impl_.item_.offline_ = offline;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.crypto.keyring.v1.Record.offline)
}
Record::Record(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.crypto.keyring.v1.Record)
}
Record::Record(const Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.item_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pub_key_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.pub_key_);
  }
  clear_has_item();
  switch (from.item_case()) {
    case kLocal: {
      _this->_internal_mutable_local()->::cosmos::crypto::keyring::v1::Record_Local::MergeFrom(
          from._internal_local());
      break;
    }
    case kLedger: {
      _this->_internal_mutable_ledger()->::cosmos::crypto::keyring::v1::Record_Ledger::MergeFrom(
          from._internal_ledger());
      break;
    }
    case kMulti: {
      _this->_internal_mutable_multi()->::cosmos::crypto::keyring::v1::Record_Multi::MergeFrom(
          from._internal_multi());
      break;
    }
    case kOffline: {
      _this->_internal_mutable_offline()->::cosmos::crypto::keyring::v1::Record_Offline::MergeFrom(
          from._internal_offline());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.crypto.keyring.v1.Record)
}

inline void Record::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.item_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_item();
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:cosmos.crypto.keyring.v1.Record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Record::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pub_key_;
  if (has_item()) {
    clear_item();
  }
}

void Record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Record::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.crypto.keyring.v1.Record)
  switch (item_case()) {
    case kLocal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.local_;
      }
      break;
    }
    case kLedger: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.ledger_;
      }
      break;
    }
    case kMulti: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.multi_;
      }
      break;
    }
    case kOffline: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.offline_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}


void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.crypto.keyring.v1.Record)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pub_key_ != nullptr);
    _impl_.pub_key_->Clear();
  }
  clear_item();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.crypto.keyring.v1.Record.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any pub_key = 2 [json_name = "pubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ledger(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_offline(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Record::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.crypto.keyring.v1.Record)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.crypto.keyring.v1.Record.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any pub_key = 2 [json_name = "pubKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  switch (item_case()) {
    case kLocal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::local(this),
          _Internal::local(this).GetCachedSize(), target, stream);
      break;
    }
    case kLedger: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::ledger(this),
          _Internal::ledger(this).GetCachedSize(), target, stream);
      break;
    }
    case kMulti: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::multi(this),
          _Internal::multi(this).GetCachedSize(), target, stream);
      break;
    }
    case kOffline: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::offline(this),
          _Internal::offline(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.crypto.keyring.v1.Record)
  return target;
}

::size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.crypto.keyring.v1.Record)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // .google.protobuf.Any pub_key = 2 [json_name = "pubKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_key_);
  }

  switch (item_case()) {
    // .cosmos.crypto.keyring.v1.Record.Local local = 3 [json_name = "local"];
    case kLocal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.local_);
      break;
    }
    // .cosmos.crypto.keyring.v1.Record.Ledger ledger = 4 [json_name = "ledger"];
    case kLedger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.ledger_);
      break;
    }
    // .cosmos.crypto.keyring.v1.Record.Multi multi = 5 [json_name = "multi"];
    case kMulti: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.multi_);
      break;
    }
    // .cosmos.crypto.keyring.v1.Record.Offline offline = 6 [json_name = "offline"];
    case kOffline: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.offline_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Record::GetClassData() const { return &_class_data_; }


void Record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Record*>(&to_msg);
  auto& from = static_cast<const Record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.crypto.keyring.v1.Record)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pub_key()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_pub_key());
  }
  switch (from.item_case()) {
    case kLocal: {
      _this->_internal_mutable_local()->::cosmos::crypto::keyring::v1::Record_Local::MergeFrom(
          from._internal_local());
      break;
    }
    case kLedger: {
      _this->_internal_mutable_ledger()->::cosmos::crypto::keyring::v1::Record_Ledger::MergeFrom(
          from._internal_ledger());
      break;
    }
    case kMulti: {
      _this->_internal_mutable_multi()->::cosmos::crypto::keyring::v1::Record_Multi::MergeFrom(
          from._internal_multi());
      break;
    }
    case kOffline: {
      _this->_internal_mutable_offline()->::cosmos::crypto::keyring::v1::Record_Offline::MergeFrom(
          from._internal_offline());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.crypto.keyring.v1.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::InternalSwap(Record* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  swap(_impl_.pub_key_, other->_impl_.pub_key_);
  swap(_impl_.item_, other->_impl_.item_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_getter, &descriptor_table_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto_once,
      file_level_metadata_cosmos_2fcrypto_2fkeyring_2fv1_2frecord_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace keyring
}  // namespace crypto
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::crypto::keyring::v1::Record_Local*
Arena::CreateMaybeMessage< ::cosmos::crypto::keyring::v1::Record_Local >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::crypto::keyring::v1::Record_Local >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::crypto::keyring::v1::Record_Ledger*
Arena::CreateMaybeMessage< ::cosmos::crypto::keyring::v1::Record_Ledger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::crypto::keyring::v1::Record_Ledger >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::crypto::keyring::v1::Record_Multi*
Arena::CreateMaybeMessage< ::cosmos::crypto::keyring::v1::Record_Multi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::crypto::keyring::v1::Record_Multi >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::crypto::keyring::v1::Record_Offline*
Arena::CreateMaybeMessage< ::cosmos::crypto::keyring::v1::Record_Offline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::crypto::keyring::v1::Record_Offline >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::crypto::keyring::v1::Record*
Arena::CreateMaybeMessage< ::cosmos::crypto::keyring::v1::Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::crypto::keyring::v1::Record >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/staking/v1beta1/staking.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto;
namespace cosmos {
namespace staking {
namespace v1beta1 {
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class LastValidatorPower;
struct LastValidatorPowerDefaultTypeInternal;
extern LastValidatorPowerDefaultTypeInternal _LastValidatorPower_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::staking::v1beta1::GenesisState* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::GenesisState>(Arena*);
template <>
::cosmos::staking::v1beta1::LastValidatorPower* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::LastValidatorPower>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace staking {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastValidatorPowersFieldNumber = 3,
    kValidatorsFieldNumber = 4,
    kDelegationsFieldNumber = 5,
    kUnbondingDelegationsFieldNumber = 6,
    kRedelegationsFieldNumber = 7,
    kLastTotalPowerFieldNumber = 2,
    kParamsFieldNumber = 1,
    kExportedFieldNumber = 8,
  };
  // repeated .cosmos.staking.v1beta1.LastValidatorPower last_validator_powers = 3 [json_name = "lastValidatorPowers", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int last_validator_powers_size() const;
  private:
  int _internal_last_validator_powers_size() const;

  public:
  void clear_last_validator_powers() ;
  ::cosmos::staking::v1beta1::LastValidatorPower* mutable_last_validator_powers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::LastValidatorPower >*
      mutable_last_validator_powers();
  private:
  const ::cosmos::staking::v1beta1::LastValidatorPower& _internal_last_validator_powers(int index) const;
  ::cosmos::staking::v1beta1::LastValidatorPower* _internal_add_last_validator_powers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::LastValidatorPower>& _internal_last_validator_powers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::LastValidatorPower>* _internal_mutable_last_validator_powers();
  public:
  const ::cosmos::staking::v1beta1::LastValidatorPower& last_validator_powers(int index) const;
  ::cosmos::staking::v1beta1::LastValidatorPower* add_last_validator_powers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::LastValidatorPower >&
      last_validator_powers() const;
  // repeated .cosmos.staking.v1beta1.Validator validators = 4 [json_name = "validators", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int validators_size() const;
  private:
  int _internal_validators_size() const;

  public:
  void clear_validators() ;
  ::cosmos::staking::v1beta1::Validator* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Validator >*
      mutable_validators();
  private:
  const ::cosmos::staking::v1beta1::Validator& _internal_validators(int index) const;
  ::cosmos::staking::v1beta1::Validator* _internal_add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Validator>& _internal_validators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Validator>* _internal_mutable_validators();
  public:
  const ::cosmos::staking::v1beta1::Validator& validators(int index) const;
  ::cosmos::staking::v1beta1::Validator* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Validator >&
      validators() const;
  // repeated .cosmos.staking.v1beta1.Delegation delegations = 5 [json_name = "delegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int delegations_size() const;
  private:
  int _internal_delegations_size() const;

  public:
  void clear_delegations() ;
  ::cosmos::staking::v1beta1::Delegation* mutable_delegations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Delegation >*
      mutable_delegations();
  private:
  const ::cosmos::staking::v1beta1::Delegation& _internal_delegations(int index) const;
  ::cosmos::staking::v1beta1::Delegation* _internal_add_delegations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Delegation>& _internal_delegations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Delegation>* _internal_mutable_delegations();
  public:
  const ::cosmos::staking::v1beta1::Delegation& delegations(int index) const;
  ::cosmos::staking::v1beta1::Delegation* add_delegations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Delegation >&
      delegations() const;
  // repeated .cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations = 6 [json_name = "unbondingDelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int unbonding_delegations_size() const;
  private:
  int _internal_unbonding_delegations_size() const;

  public:
  void clear_unbonding_delegations() ;
  ::cosmos::staking::v1beta1::UnbondingDelegation* mutable_unbonding_delegations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::UnbondingDelegation >*
      mutable_unbonding_delegations();
  private:
  const ::cosmos::staking::v1beta1::UnbondingDelegation& _internal_unbonding_delegations(int index) const;
  ::cosmos::staking::v1beta1::UnbondingDelegation* _internal_add_unbonding_delegations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::UnbondingDelegation>& _internal_unbonding_delegations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::UnbondingDelegation>* _internal_mutable_unbonding_delegations();
  public:
  const ::cosmos::staking::v1beta1::UnbondingDelegation& unbonding_delegations(int index) const;
  ::cosmos::staking::v1beta1::UnbondingDelegation* add_unbonding_delegations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::UnbondingDelegation >&
      unbonding_delegations() const;
  // repeated .cosmos.staking.v1beta1.Redelegation redelegations = 7 [json_name = "redelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int redelegations_size() const;
  private:
  int _internal_redelegations_size() const;

  public:
  void clear_redelegations() ;
  ::cosmos::staking::v1beta1::Redelegation* mutable_redelegations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Redelegation >*
      mutable_redelegations();
  private:
  const ::cosmos::staking::v1beta1::Redelegation& _internal_redelegations(int index) const;
  ::cosmos::staking::v1beta1::Redelegation* _internal_add_redelegations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Redelegation>& _internal_redelegations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Redelegation>* _internal_mutable_redelegations();
  public:
  const ::cosmos::staking::v1beta1::Redelegation& redelegations(int index) const;
  ::cosmos::staking::v1beta1::Redelegation* add_redelegations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Redelegation >&
      redelegations() const;
  // bytes last_total_power = 2 [json_name = "lastTotalPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.amino.dont_omitempty) = true];
  void clear_last_total_power() ;
  const std::string& last_total_power() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_total_power(Arg_&& arg, Args_... args);
  std::string* mutable_last_total_power();
  PROTOBUF_NODISCARD std::string* release_last_total_power();
  void set_allocated_last_total_power(std::string* ptr);

  private:
  const std::string& _internal_last_total_power() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_total_power(
      const std::string& value);
  std::string* _internal_mutable_last_total_power();

  public:
  // .cosmos.staking.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmos::staking::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::Params* release_params();
  ::cosmos::staking::v1beta1::Params* mutable_params();
  void set_allocated_params(::cosmos::staking::v1beta1::Params* params);
  private:
  const ::cosmos::staking::v1beta1::Params& _internal_params() const;
  ::cosmos::staking::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmos::staking::v1beta1::Params* params);
  ::cosmos::staking::v1beta1::Params* unsafe_arena_release_params();
  // bool exported = 8 [json_name = "exported"];
  void clear_exported() ;
  bool exported() const;
  void set_exported(bool value);

  private:
  bool _internal_exported() const;
  void _internal_set_exported(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::LastValidatorPower > last_validator_powers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Validator > validators_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Delegation > delegations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::UnbondingDelegation > unbonding_delegations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Redelegation > redelegations_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_total_power_;
    ::cosmos::staking::v1beta1::Params* params_;
    bool exported_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class LastValidatorPower final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.LastValidatorPower) */ {
 public:
  inline LastValidatorPower() : LastValidatorPower(nullptr) {}
  ~LastValidatorPower() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LastValidatorPower(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LastValidatorPower(const LastValidatorPower& from);
  LastValidatorPower(LastValidatorPower&& from) noexcept
    : LastValidatorPower() {
    *this = ::std::move(from);
  }

  inline LastValidatorPower& operator=(const LastValidatorPower& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastValidatorPower& operator=(LastValidatorPower&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LastValidatorPower& default_instance() {
    return *internal_default_instance();
  }
  static inline const LastValidatorPower* internal_default_instance() {
    return reinterpret_cast<const LastValidatorPower*>(
               &_LastValidatorPower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LastValidatorPower& a, LastValidatorPower& b) {
    a.Swap(&b);
  }
  inline void Swap(LastValidatorPower* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastValidatorPower* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LastValidatorPower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LastValidatorPower>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LastValidatorPower& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LastValidatorPower& from) {
    LastValidatorPower::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastValidatorPower* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.LastValidatorPower";
  }
  protected:
  explicit LastValidatorPower(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPowerFieldNumber = 2,
  };
  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // int64 power = 2 [json_name = "power"];
  void clear_power() ;
  ::int64_t power() const;
  void set_power(::int64_t value);

  private:
  ::int64_t _internal_power() const;
  void _internal_set_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.LastValidatorPower)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::int64_t power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .cosmos.staking.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool GenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmos::staking::v1beta1::Params& GenesisState::_internal_params() const {
  const ::cosmos::staking::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::staking::v1beta1::Params&>(
      ::cosmos::staking::v1beta1::_Params_default_instance_);
}
inline const ::cosmos::staking::v1beta1::Params& GenesisState::params() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.GenesisState.params)
  return _internal_params();
}
inline void GenesisState::unsafe_arena_set_allocated_params(
    ::cosmos::staking::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.GenesisState.params)
}
inline ::cosmos::staking::v1beta1::Params* GenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::staking::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::staking::v1beta1::Params* GenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.GenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::staking::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmos::staking::v1beta1::Params* GenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::staking::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmos::staking::v1beta1::Params* GenesisState::mutable_params() {
  ::cosmos::staking::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.GenesisState.params)
  return _msg;
}
inline void GenesisState::set_allocated_params(::cosmos::staking::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.GenesisState.params)
}

// bytes last_total_power = 2 [json_name = "lastTotalPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.amino.dont_omitempty) = true];
inline void GenesisState::clear_last_total_power() {
  _impl_.last_total_power_.ClearToEmpty();
}
inline const std::string& GenesisState::last_total_power() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.GenesisState.last_total_power)
  return _internal_last_total_power();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GenesisState::set_last_total_power(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.last_total_power_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.GenesisState.last_total_power)
}
inline std::string* GenesisState::mutable_last_total_power() {
  std::string* _s = _internal_mutable_last_total_power();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.GenesisState.last_total_power)
  return _s;
}
inline const std::string& GenesisState::_internal_last_total_power() const {
  return _impl_.last_total_power_.Get();
}
inline void GenesisState::_internal_set_last_total_power(const std::string& value) {
  ;


  _impl_.last_total_power_.Set(value, GetArenaForAllocation());
}
inline std::string* GenesisState::_internal_mutable_last_total_power() {
  ;
  return _impl_.last_total_power_.Mutable( GetArenaForAllocation());
}
inline std::string* GenesisState::release_last_total_power() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.GenesisState.last_total_power)
  return _impl_.last_total_power_.Release();
}
inline void GenesisState::set_allocated_last_total_power(std::string* value) {
  _impl_.last_total_power_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_total_power_.IsDefault()) {
          _impl_.last_total_power_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.GenesisState.last_total_power)
}

// repeated .cosmos.staking.v1beta1.LastValidatorPower last_validator_powers = 3 [json_name = "lastValidatorPowers", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_last_validator_powers_size() const {
  return _impl_.last_validator_powers_.size();
}
inline int GenesisState::last_validator_powers_size() const {
  return _internal_last_validator_powers_size();
}
inline void GenesisState::clear_last_validator_powers() {
  _internal_mutable_last_validator_powers()->Clear();
}
inline ::cosmos::staking::v1beta1::LastValidatorPower* GenesisState::mutable_last_validator_powers(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.GenesisState.last_validator_powers)
  return _internal_mutable_last_validator_powers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::LastValidatorPower >*
GenesisState::mutable_last_validator_powers() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.staking.v1beta1.GenesisState.last_validator_powers)
  return _internal_mutable_last_validator_powers();
}
inline const ::cosmos::staking::v1beta1::LastValidatorPower& GenesisState::_internal_last_validator_powers(int index) const {
  return _internal_last_validator_powers().Get(index);
}
inline const ::cosmos::staking::v1beta1::LastValidatorPower& GenesisState::last_validator_powers(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.GenesisState.last_validator_powers)
  return _internal_last_validator_powers(index);
}
inline ::cosmos::staking::v1beta1::LastValidatorPower* GenesisState::_internal_add_last_validator_powers() {
  return _internal_mutable_last_validator_powers()->Add();
}
inline ::cosmos::staking::v1beta1::LastValidatorPower* GenesisState::add_last_validator_powers() {
  ::cosmos::staking::v1beta1::LastValidatorPower* _add = _internal_add_last_validator_powers();
  // @@protoc_insertion_point(field_add:cosmos.staking.v1beta1.GenesisState.last_validator_powers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::LastValidatorPower >&
GenesisState::last_validator_powers() const {
  // @@protoc_insertion_point(field_list:cosmos.staking.v1beta1.GenesisState.last_validator_powers)
  return _internal_last_validator_powers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::LastValidatorPower>&
GenesisState::_internal_last_validator_powers() const {
  return _impl_.last_validator_powers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::LastValidatorPower>*
GenesisState::_internal_mutable_last_validator_powers() {
  return &_impl_.last_validator_powers_;
}

// repeated .cosmos.staking.v1beta1.Validator validators = 4 [json_name = "validators", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_validators_size() const {
  return _impl_.validators_.size();
}
inline int GenesisState::validators_size() const {
  return _internal_validators_size();
}
inline ::cosmos::staking::v1beta1::Validator* GenesisState::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.GenesisState.validators)
  return _internal_mutable_validators()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Validator >*
GenesisState::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.staking.v1beta1.GenesisState.validators)
  return _internal_mutable_validators();
}
inline const ::cosmos::staking::v1beta1::Validator& GenesisState::_internal_validators(int index) const {
  return _internal_validators().Get(index);
}
inline const ::cosmos::staking::v1beta1::Validator& GenesisState::validators(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.GenesisState.validators)
  return _internal_validators(index);
}
inline ::cosmos::staking::v1beta1::Validator* GenesisState::_internal_add_validators() {
  return _internal_mutable_validators()->Add();
}
inline ::cosmos::staking::v1beta1::Validator* GenesisState::add_validators() {
  ::cosmos::staking::v1beta1::Validator* _add = _internal_add_validators();
  // @@protoc_insertion_point(field_add:cosmos.staking.v1beta1.GenesisState.validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Validator >&
GenesisState::validators() const {
  // @@protoc_insertion_point(field_list:cosmos.staking.v1beta1.GenesisState.validators)
  return _internal_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Validator>&
GenesisState::_internal_validators() const {
  return _impl_.validators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Validator>*
GenesisState::_internal_mutable_validators() {
  return &_impl_.validators_;
}

// repeated .cosmos.staking.v1beta1.Delegation delegations = 5 [json_name = "delegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_delegations_size() const {
  return _impl_.delegations_.size();
}
inline int GenesisState::delegations_size() const {
  return _internal_delegations_size();
}
inline ::cosmos::staking::v1beta1::Delegation* GenesisState::mutable_delegations(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.GenesisState.delegations)
  return _internal_mutable_delegations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Delegation >*
GenesisState::mutable_delegations() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.staking.v1beta1.GenesisState.delegations)
  return _internal_mutable_delegations();
}
inline const ::cosmos::staking::v1beta1::Delegation& GenesisState::_internal_delegations(int index) const {
  return _internal_delegations().Get(index);
}
inline const ::cosmos::staking::v1beta1::Delegation& GenesisState::delegations(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.GenesisState.delegations)
  return _internal_delegations(index);
}
inline ::cosmos::staking::v1beta1::Delegation* GenesisState::_internal_add_delegations() {
  return _internal_mutable_delegations()->Add();
}
inline ::cosmos::staking::v1beta1::Delegation* GenesisState::add_delegations() {
  ::cosmos::staking::v1beta1::Delegation* _add = _internal_add_delegations();
  // @@protoc_insertion_point(field_add:cosmos.staking.v1beta1.GenesisState.delegations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Delegation >&
GenesisState::delegations() const {
  // @@protoc_insertion_point(field_list:cosmos.staking.v1beta1.GenesisState.delegations)
  return _internal_delegations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Delegation>&
GenesisState::_internal_delegations() const {
  return _impl_.delegations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Delegation>*
GenesisState::_internal_mutable_delegations() {
  return &_impl_.delegations_;
}

// repeated .cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations = 6 [json_name = "unbondingDelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_unbonding_delegations_size() const {
  return _impl_.unbonding_delegations_.size();
}
inline int GenesisState::unbonding_delegations_size() const {
  return _internal_unbonding_delegations_size();
}
inline ::cosmos::staking::v1beta1::UnbondingDelegation* GenesisState::mutable_unbonding_delegations(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.GenesisState.unbonding_delegations)
  return _internal_mutable_unbonding_delegations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::UnbondingDelegation >*
GenesisState::mutable_unbonding_delegations() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.staking.v1beta1.GenesisState.unbonding_delegations)
  return _internal_mutable_unbonding_delegations();
}
inline const ::cosmos::staking::v1beta1::UnbondingDelegation& GenesisState::_internal_unbonding_delegations(int index) const {
  return _internal_unbonding_delegations().Get(index);
}
inline const ::cosmos::staking::v1beta1::UnbondingDelegation& GenesisState::unbonding_delegations(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.GenesisState.unbonding_delegations)
  return _internal_unbonding_delegations(index);
}
inline ::cosmos::staking::v1beta1::UnbondingDelegation* GenesisState::_internal_add_unbonding_delegations() {
  return _internal_mutable_unbonding_delegations()->Add();
}
inline ::cosmos::staking::v1beta1::UnbondingDelegation* GenesisState::add_unbonding_delegations() {
  ::cosmos::staking::v1beta1::UnbondingDelegation* _add = _internal_add_unbonding_delegations();
  // @@protoc_insertion_point(field_add:cosmos.staking.v1beta1.GenesisState.unbonding_delegations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::UnbondingDelegation >&
GenesisState::unbonding_delegations() const {
  // @@protoc_insertion_point(field_list:cosmos.staking.v1beta1.GenesisState.unbonding_delegations)
  return _internal_unbonding_delegations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::UnbondingDelegation>&
GenesisState::_internal_unbonding_delegations() const {
  return _impl_.unbonding_delegations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::UnbondingDelegation>*
GenesisState::_internal_mutable_unbonding_delegations() {
  return &_impl_.unbonding_delegations_;
}

// repeated .cosmos.staking.v1beta1.Redelegation redelegations = 7 [json_name = "redelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int GenesisState::_internal_redelegations_size() const {
  return _impl_.redelegations_.size();
}
inline int GenesisState::redelegations_size() const {
  return _internal_redelegations_size();
}
inline ::cosmos::staking::v1beta1::Redelegation* GenesisState::mutable_redelegations(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.GenesisState.redelegations)
  return _internal_mutable_redelegations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Redelegation >*
GenesisState::mutable_redelegations() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.staking.v1beta1.GenesisState.redelegations)
  return _internal_mutable_redelegations();
}
inline const ::cosmos::staking::v1beta1::Redelegation& GenesisState::_internal_redelegations(int index) const {
  return _internal_redelegations().Get(index);
}
inline const ::cosmos::staking::v1beta1::Redelegation& GenesisState::redelegations(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.GenesisState.redelegations)
  return _internal_redelegations(index);
}
inline ::cosmos::staking::v1beta1::Redelegation* GenesisState::_internal_add_redelegations() {
  return _internal_mutable_redelegations()->Add();
}
inline ::cosmos::staking::v1beta1::Redelegation* GenesisState::add_redelegations() {
  ::cosmos::staking::v1beta1::Redelegation* _add = _internal_add_redelegations();
  // @@protoc_insertion_point(field_add:cosmos.staking.v1beta1.GenesisState.redelegations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::staking::v1beta1::Redelegation >&
GenesisState::redelegations() const {
  // @@protoc_insertion_point(field_list:cosmos.staking.v1beta1.GenesisState.redelegations)
  return _internal_redelegations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Redelegation>&
GenesisState::_internal_redelegations() const {
  return _impl_.redelegations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::staking::v1beta1::Redelegation>*
GenesisState::_internal_mutable_redelegations() {
  return &_impl_.redelegations_;
}

// bool exported = 8 [json_name = "exported"];
inline void GenesisState::clear_exported() {
  _impl_.exported_ = false;
}
inline bool GenesisState::exported() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.GenesisState.exported)
  return _internal_exported();
}
inline void GenesisState::set_exported(bool value) {
  _internal_set_exported(value);
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.GenesisState.exported)
}
inline bool GenesisState::_internal_exported() const {
  return _impl_.exported_;
}
inline void GenesisState::_internal_set_exported(bool value) {
  ;
  _impl_.exported_ = value;
}

// -------------------------------------------------------------------

// LastValidatorPower

// string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void LastValidatorPower::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& LastValidatorPower::address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.LastValidatorPower.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastValidatorPower::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.LastValidatorPower.address)
}
inline std::string* LastValidatorPower::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.LastValidatorPower.address)
  return _s;
}
inline const std::string& LastValidatorPower::_internal_address() const {
  return _impl_.address_.Get();
}
inline void LastValidatorPower::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* LastValidatorPower::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* LastValidatorPower::release_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.LastValidatorPower.address)
  return _impl_.address_.Release();
}
inline void LastValidatorPower::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.LastValidatorPower.address)
}

// int64 power = 2 [json_name = "power"];
inline void LastValidatorPower::clear_power() {
  _impl_.power_ = ::int64_t{0};
}
inline ::int64_t LastValidatorPower::power() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.LastValidatorPower.power)
  return _internal_power();
}
inline void LastValidatorPower::set_power(::int64_t value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.LastValidatorPower.power)
}
inline ::int64_t LastValidatorPower::_internal_power() const {
  return _impl_.power_;
}
inline void LastValidatorPower::_internal_set_power(::int64_t value) {
  ;
  _impl_.power_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_2epb_2eh

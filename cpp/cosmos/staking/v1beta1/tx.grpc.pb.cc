// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/staking/v1beta1/tx.proto

#include "cosmos/staking/v1beta1/tx.pb.h"
#include "cosmos/staking/v1beta1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace staking {
namespace v1beta1 {

static const char* Msg_method_names[] = {
  "/cosmos.staking.v1beta1.Msg/CreateValidator",
  "/cosmos.staking.v1beta1.Msg/EditValidator",
  "/cosmos.staking.v1beta1.Msg/Delegate",
  "/cosmos.staking.v1beta1.Msg/BeginRedelegate",
  "/cosmos.staking.v1beta1.Msg/Undelegate",
  "/cosmos.staking.v1beta1.Msg/CancelUnbondingDelegation",
  "/cosmos.staking.v1beta1.Msg/UpdateParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateValidator_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditValidator_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delegate_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BeginRedelegate_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Undelegate_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelUnbondingDelegation_(Msg_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateParams_(Msg_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::MsgCreateValidator, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateValidator_, context, request, response);
}

void Msg::Stub::async::CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::MsgCreateValidator, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateValidator_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateValidator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* Msg::Stub::PrepareAsyncCreateValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse, ::cosmos::staking::v1beta1::MsgCreateValidator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateValidator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* Msg::Stub::AsyncCreateValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateValidatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::MsgEditValidator, ::cosmos::staking::v1beta1::MsgEditValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditValidator_, context, request, response);
}

void Msg::Stub::async::EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::MsgEditValidator, ::cosmos::staking::v1beta1::MsgEditValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditValidator_, context, request, response, std::move(f));
}

void Msg::Stub::async::EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditValidator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* Msg::Stub::PrepareAsyncEditValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::MsgEditValidatorResponse, ::cosmos::staking::v1beta1::MsgEditValidator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditValidator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* Msg::Stub::AsyncEditValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditValidatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::MsgDelegate, ::cosmos::staking::v1beta1::MsgDelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delegate_, context, request, response);
}

void Msg::Stub::async::Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::MsgDelegate, ::cosmos::staking::v1beta1::MsgDelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delegate_, context, request, response, std::move(f));
}

void Msg::Stub::async::Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delegate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgDelegateResponse>* Msg::Stub::PrepareAsyncDelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::MsgDelegateResponse, ::cosmos::staking::v1beta1::MsgDelegate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delegate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgDelegateResponse>* Msg::Stub::AsyncDelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BeginRedelegate_, context, request, response);
}

void Msg::Stub::async::BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BeginRedelegate_, context, request, response, std::move(f));
}

void Msg::Stub::async::BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BeginRedelegate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* Msg::Stub::PrepareAsyncBeginRedelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse, ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BeginRedelegate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* Msg::Stub::AsyncBeginRedelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBeginRedelegateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::MsgUndelegate, ::cosmos::staking::v1beta1::MsgUndelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Undelegate_, context, request, response);
}

void Msg::Stub::async::Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::MsgUndelegate, ::cosmos::staking::v1beta1::MsgUndelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Undelegate_, context, request, response, std::move(f));
}

void Msg::Stub::async::Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Undelegate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUndelegateResponse>* Msg::Stub::PrepareAsyncUndelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::MsgUndelegateResponse, ::cosmos::staking::v1beta1::MsgUndelegate, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Undelegate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUndelegateResponse>* Msg::Stub::AsyncUndelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUndelegateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelUnbondingDelegation_, context, request, response);
}

void Msg::Stub::async::CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelUnbondingDelegation_, context, request, response, std::move(f));
}

void Msg::Stub::async::CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelUnbondingDelegation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* Msg::Stub::PrepareAsyncCancelUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelUnbondingDelegation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* Msg::Stub::AsyncCancelUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelUnbondingDelegationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::MsgUpdateParams, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateParams_, context, request, response);
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::MsgUpdateParams, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse, ::cosmos::staking::v1beta1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::staking::v1beta1::MsgCreateValidator, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::MsgCreateValidator* req,
             ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* resp) {
               return service->CreateValidator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::staking::v1beta1::MsgEditValidator, ::cosmos::staking::v1beta1::MsgEditValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::MsgEditValidator* req,
             ::cosmos::staking::v1beta1::MsgEditValidatorResponse* resp) {
               return service->EditValidator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::staking::v1beta1::MsgDelegate, ::cosmos::staking::v1beta1::MsgDelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::MsgDelegate* req,
             ::cosmos::staking::v1beta1::MsgDelegateResponse* resp) {
               return service->Delegate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::MsgBeginRedelegate* req,
             ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* resp) {
               return service->BeginRedelegate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::staking::v1beta1::MsgUndelegate, ::cosmos::staking::v1beta1::MsgUndelegateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::MsgUndelegate* req,
             ::cosmos::staking::v1beta1::MsgUndelegateResponse* resp) {
               return service->Undelegate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* req,
             ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* resp) {
               return service->CancelUnbondingDelegation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::cosmos::staking::v1beta1::MsgUpdateParams, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::MsgUpdateParams* req,
             ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* resp) {
               return service->UpdateParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::CreateValidator(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::EditValidator(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Delegate(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::BeginRedelegate(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::Undelegate(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::CancelUnbondingDelegation(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateParams(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace staking
}  // namespace v1beta1


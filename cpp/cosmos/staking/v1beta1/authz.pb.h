// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/authz.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto;
namespace cosmos {
namespace staking {
namespace v1beta1 {
class StakeAuthorization;
struct StakeAuthorizationDefaultTypeInternal;
extern StakeAuthorizationDefaultTypeInternal _StakeAuthorization_default_instance_;
class StakeAuthorization_Validators;
struct StakeAuthorization_ValidatorsDefaultTypeInternal;
extern StakeAuthorization_ValidatorsDefaultTypeInternal _StakeAuthorization_Validators_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::staking::v1beta1::StakeAuthorization* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::StakeAuthorization>(Arena*);
template <>
::cosmos::staking::v1beta1::StakeAuthorization_Validators* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::StakeAuthorization_Validators>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace staking {
namespace v1beta1 {
enum AuthorizationType : int {
  AUTHORIZATION_TYPE_UNSPECIFIED = 0,
  AUTHORIZATION_TYPE_DELEGATE = 1,
  AUTHORIZATION_TYPE_UNDELEGATE = 2,
  AUTHORIZATION_TYPE_REDELEGATE = 3,
  AuthorizationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AuthorizationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AuthorizationType_IsValid(int value);
constexpr AuthorizationType AuthorizationType_MIN = static_cast<AuthorizationType>(0);
constexpr AuthorizationType AuthorizationType_MAX = static_cast<AuthorizationType>(3);
constexpr int AuthorizationType_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
AuthorizationType_descriptor();
template <typename T>
const std::string& AuthorizationType_Name(T value) {
  static_assert(std::is_same<T, AuthorizationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AuthorizationType_Name().");
  return AuthorizationType_Name(static_cast<AuthorizationType>(value));
}
template <>
inline const std::string& AuthorizationType_Name(AuthorizationType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<AuthorizationType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool AuthorizationType_Parse(absl::string_view name, AuthorizationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthorizationType>(
      AuthorizationType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StakeAuthorization_Validators final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.StakeAuthorization.Validators) */ {
 public:
  inline StakeAuthorization_Validators() : StakeAuthorization_Validators(nullptr) {}
  ~StakeAuthorization_Validators() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StakeAuthorization_Validators(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StakeAuthorization_Validators(const StakeAuthorization_Validators& from);
  StakeAuthorization_Validators(StakeAuthorization_Validators&& from) noexcept
    : StakeAuthorization_Validators() {
    *this = ::std::move(from);
  }

  inline StakeAuthorization_Validators& operator=(const StakeAuthorization_Validators& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeAuthorization_Validators& operator=(StakeAuthorization_Validators&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StakeAuthorization_Validators& default_instance() {
    return *internal_default_instance();
  }
  static inline const StakeAuthorization_Validators* internal_default_instance() {
    return reinterpret_cast<const StakeAuthorization_Validators*>(
               &_StakeAuthorization_Validators_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StakeAuthorization_Validators& a, StakeAuthorization_Validators& b) {
    a.Swap(&b);
  }
  inline void Swap(StakeAuthorization_Validators* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeAuthorization_Validators* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StakeAuthorization_Validators* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StakeAuthorization_Validators>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StakeAuthorization_Validators& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StakeAuthorization_Validators& from) {
    StakeAuthorization_Validators::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakeAuthorization_Validators* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.StakeAuthorization.Validators";
  }
  protected:
  explicit StakeAuthorization_Validators(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  int address_size() const;
  private:
  int _internal_address_size() const;

  public:
  void clear_address() ;
  const std::string& address(int index) const;
  std::string* mutable_address(int index);
  void set_address(int index, const std::string& value);
  void set_address(int index, std::string&& value);
  void set_address(int index, const char* value);
  void set_address(int index, const char* value, std::size_t size);
  void set_address(int index, absl::string_view value);
  std::string* add_address();
  void add_address(const std::string& value);
  void add_address(std::string&& value);
  void add_address(const char* value);
  void add_address(const char* value, std::size_t size);
  void add_address(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_address();

  private:
  const std::string& _internal_address(int index) const;
  std::string* _internal_add_address();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_address() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_address();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.StakeAuthorization.Validators)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto;
};// -------------------------------------------------------------------

class StakeAuthorization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.StakeAuthorization) */ {
 public:
  inline StakeAuthorization() : StakeAuthorization(nullptr) {}
  ~StakeAuthorization() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StakeAuthorization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StakeAuthorization(const StakeAuthorization& from);
  StakeAuthorization(StakeAuthorization&& from) noexcept
    : StakeAuthorization() {
    *this = ::std::move(from);
  }

  inline StakeAuthorization& operator=(const StakeAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  inline StakeAuthorization& operator=(StakeAuthorization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StakeAuthorization& default_instance() {
    return *internal_default_instance();
  }
  enum ValidatorsCase {
    kAllowList = 2,
    kDenyList = 3,
    VALIDATORS_NOT_SET = 0,
  };

  static inline const StakeAuthorization* internal_default_instance() {
    return reinterpret_cast<const StakeAuthorization*>(
               &_StakeAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StakeAuthorization& a, StakeAuthorization& b) {
    a.Swap(&b);
  }
  inline void Swap(StakeAuthorization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StakeAuthorization* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StakeAuthorization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StakeAuthorization>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StakeAuthorization& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StakeAuthorization& from) {
    StakeAuthorization::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StakeAuthorization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.StakeAuthorization";
  }
  protected:
  explicit StakeAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StakeAuthorization_Validators Validators;

  // accessors -------------------------------------------------------

  enum : int {
    kMaxTokensFieldNumber = 1,
    kAuthorizationTypeFieldNumber = 4,
    kAllowListFieldNumber = 2,
    kDenyListFieldNumber = 3,
  };
  // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  bool has_max_tokens() const;
  void clear_max_tokens() ;
  const ::cosmos::base::v1beta1::Coin& max_tokens() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_max_tokens();
  ::cosmos::base::v1beta1::Coin* mutable_max_tokens();
  void set_allocated_max_tokens(::cosmos::base::v1beta1::Coin* max_tokens);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_max_tokens() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_max_tokens();
  public:
  void unsafe_arena_set_allocated_max_tokens(
      ::cosmos::base::v1beta1::Coin* max_tokens);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_max_tokens();
  // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
  void clear_authorization_type() ;
  ::cosmos::staking::v1beta1::AuthorizationType authorization_type() const;
  void set_authorization_type(::cosmos::staking::v1beta1::AuthorizationType value);

  private:
  ::cosmos::staking::v1beta1::AuthorizationType _internal_authorization_type() const;
  void _internal_set_authorization_type(::cosmos::staking::v1beta1::AuthorizationType value);

  public:
  // .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];
  bool has_allow_list() const;
  private:
  bool _internal_has_allow_list() const;

  public:
  void clear_allow_list() ;
  const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& allow_list() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::StakeAuthorization_Validators* release_allow_list();
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* mutable_allow_list();
  void set_allocated_allow_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* allow_list);
  private:
  const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& _internal_allow_list() const;
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* _internal_mutable_allow_list();
  public:
  void unsafe_arena_set_allocated_allow_list(
      ::cosmos::staking::v1beta1::StakeAuthorization_Validators* allow_list);
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* unsafe_arena_release_allow_list();
  // .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];
  bool has_deny_list() const;
  private:
  bool _internal_has_deny_list() const;

  public:
  void clear_deny_list() ;
  const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& deny_list() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::StakeAuthorization_Validators* release_deny_list();
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* mutable_deny_list();
  void set_allocated_deny_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* deny_list);
  private:
  const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& _internal_deny_list() const;
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* _internal_mutable_deny_list();
  public:
  void unsafe_arena_set_allocated_deny_list(
      ::cosmos::staking::v1beta1::StakeAuthorization_Validators* deny_list);
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* unsafe_arena_release_deny_list();
  void clear_validators();
  ValidatorsCase validators_case() const;
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.StakeAuthorization)
 private:
  class _Internal;
  void set_has_allow_list();
  void set_has_deny_list();

  inline bool has_validators() const;
  inline void clear_has_validators();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::v1beta1::Coin* max_tokens_;
    int authorization_type_;
    union ValidatorsUnion {
      constexpr ValidatorsUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::cosmos::staking::v1beta1::StakeAuthorization_Validators* allow_list_;
      ::cosmos::staking::v1beta1::StakeAuthorization_Validators* deny_list_;
    } validators_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StakeAuthorization_Validators

// repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline int StakeAuthorization_Validators::_internal_address_size() const {
  return _impl_.address_.size();
}
inline int StakeAuthorization_Validators::address_size() const {
  return _internal_address_size();
}
inline void StakeAuthorization_Validators::clear_address() {
  _internal_mutable_address()->Clear();
}
inline std::string* StakeAuthorization_Validators::add_address() {
  std::string* _s = _internal_add_address();
  // @@protoc_insertion_point(field_add_mutable:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _s;
}
inline const std::string& StakeAuthorization_Validators::address(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _internal_address(index);
}
inline std::string* StakeAuthorization_Validators::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _internal_mutable_address()->Mutable(index);
}
inline void StakeAuthorization_Validators::set_address(int index, const std::string& value) {
  _internal_mutable_address()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::set_address(int index, std::string&& value) {
  _internal_mutable_address()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::set_address(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_address()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::set_address(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_address()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::set_address(int index, absl::string_view value) {
  _internal_mutable_address()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::add_address(const std::string& value) {
  _internal_mutable_address()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::add_address(std::string&& value) {
  _internal_mutable_address()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::add_address(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_address()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::add_address(const char* value, std::size_t size) {
  _internal_mutable_address()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline void StakeAuthorization_Validators::add_address(absl::string_view value) {
  _internal_mutable_address()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StakeAuthorization_Validators::address() const {
  // @@protoc_insertion_point(field_list:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _internal_address();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* StakeAuthorization_Validators::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.staking.v1beta1.StakeAuthorization.Validators.address)
  return _internal_mutable_address();
}
inline const std::string& StakeAuthorization_Validators::_internal_address(int index) const {
  return _internal_address().Get(index);
}
inline std::string* StakeAuthorization_Validators::_internal_add_address() {
  return _internal_mutable_address()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StakeAuthorization_Validators::_internal_address() const {
  return _impl_.address_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StakeAuthorization_Validators::_internal_mutable_address() {
  return &_impl_.address_;
}

// -------------------------------------------------------------------

// StakeAuthorization

// .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
inline bool StakeAuthorization::has_max_tokens() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_tokens_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& StakeAuthorization::_internal_max_tokens() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.max_tokens_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& StakeAuthorization::max_tokens() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
  return _internal_max_tokens();
}
inline void StakeAuthorization::unsafe_arena_set_allocated_max_tokens(
    ::cosmos::base::v1beta1::Coin* max_tokens) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_tokens_);
  }
  _impl_.max_tokens_ = max_tokens;
  if (max_tokens) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
}
inline ::cosmos::base::v1beta1::Coin* StakeAuthorization::release_max_tokens() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.max_tokens_;
  _impl_.max_tokens_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* StakeAuthorization::unsafe_arena_release_max_tokens() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.max_tokens_;
  _impl_.max_tokens_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* StakeAuthorization::_internal_mutable_max_tokens() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.max_tokens_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.max_tokens_ = p;
  }
  return _impl_.max_tokens_;
}
inline ::cosmos::base::v1beta1::Coin* StakeAuthorization::mutable_max_tokens() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_max_tokens();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
  return _msg;
}
inline void StakeAuthorization::set_allocated_max_tokens(::cosmos::base::v1beta1::Coin* max_tokens) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_tokens_);
  }
  if (max_tokens) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_tokens));
    if (message_arena != submessage_arena) {
      max_tokens = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_tokens, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.max_tokens_ = max_tokens;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.max_tokens)
}

// .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];
inline bool StakeAuthorization::has_allow_list() const {
  return validators_case() == kAllowList;
}
inline bool StakeAuthorization::_internal_has_allow_list() const {
  return validators_case() == kAllowList;
}
inline void StakeAuthorization::set_has_allow_list() {
  _impl_._oneof_case_[0] = kAllowList;
}
inline void StakeAuthorization::clear_allow_list() {
  if (validators_case() == kAllowList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.validators_.allow_list_;
    }
    clear_has_validators();
  }
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::release_allow_list() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
  if (validators_case() == kAllowList) {
    clear_has_validators();
    ::cosmos::staking::v1beta1::StakeAuthorization_Validators* temp = _impl_.validators_.allow_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.validators_.allow_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& StakeAuthorization::_internal_allow_list() const {
  return validators_case() == kAllowList
      ? *_impl_.validators_.allow_list_
      : reinterpret_cast<::cosmos::staking::v1beta1::StakeAuthorization_Validators&>(::cosmos::staking::v1beta1::_StakeAuthorization_Validators_default_instance_);
}
inline const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& StakeAuthorization::allow_list() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
  return _internal_allow_list();
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::unsafe_arena_release_allow_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
  if (validators_case() == kAllowList) {
    clear_has_validators();
    ::cosmos::staking::v1beta1::StakeAuthorization_Validators* temp = _impl_.validators_.allow_list_;
    _impl_.validators_.allow_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakeAuthorization::unsafe_arena_set_allocated_allow_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* allow_list) {
  clear_validators();
  if (allow_list) {
    set_has_allow_list();
    _impl_.validators_.allow_list_ = allow_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::_internal_mutable_allow_list() {
  if (validators_case() != kAllowList) {
    clear_validators();
    set_has_allow_list();
    _impl_.validators_.allow_list_ = CreateMaybeMessage< ::cosmos::staking::v1beta1::StakeAuthorization_Validators >(GetArenaForAllocation());
  }
  return _impl_.validators_.allow_list_;
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::mutable_allow_list() {
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* _msg = _internal_mutable_allow_list();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
  return _msg;
}

// .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];
inline bool StakeAuthorization::has_deny_list() const {
  return validators_case() == kDenyList;
}
inline bool StakeAuthorization::_internal_has_deny_list() const {
  return validators_case() == kDenyList;
}
inline void StakeAuthorization::set_has_deny_list() {
  _impl_._oneof_case_[0] = kDenyList;
}
inline void StakeAuthorization::clear_deny_list() {
  if (validators_case() == kDenyList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.validators_.deny_list_;
    }
    clear_has_validators();
  }
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::release_deny_list() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
  if (validators_case() == kDenyList) {
    clear_has_validators();
    ::cosmos::staking::v1beta1::StakeAuthorization_Validators* temp = _impl_.validators_.deny_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.validators_.deny_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& StakeAuthorization::_internal_deny_list() const {
  return validators_case() == kDenyList
      ? *_impl_.validators_.deny_list_
      : reinterpret_cast<::cosmos::staking::v1beta1::StakeAuthorization_Validators&>(::cosmos::staking::v1beta1::_StakeAuthorization_Validators_default_instance_);
}
inline const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& StakeAuthorization::deny_list() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
  return _internal_deny_list();
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::unsafe_arena_release_deny_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
  if (validators_case() == kDenyList) {
    clear_has_validators();
    ::cosmos::staking::v1beta1::StakeAuthorization_Validators* temp = _impl_.validators_.deny_list_;
    _impl_.validators_.deny_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StakeAuthorization::unsafe_arena_set_allocated_deny_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* deny_list) {
  clear_validators();
  if (deny_list) {
    set_has_deny_list();
    _impl_.validators_.deny_list_ = deny_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::_internal_mutable_deny_list() {
  if (validators_case() != kDenyList) {
    clear_validators();
    set_has_deny_list();
    _impl_.validators_.deny_list_ = CreateMaybeMessage< ::cosmos::staking::v1beta1::StakeAuthorization_Validators >(GetArenaForAllocation());
  }
  return _impl_.validators_.deny_list_;
}
inline ::cosmos::staking::v1beta1::StakeAuthorization_Validators* StakeAuthorization::mutable_deny_list() {
  ::cosmos::staking::v1beta1::StakeAuthorization_Validators* _msg = _internal_mutable_deny_list();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
  return _msg;
}

// .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
inline void StakeAuthorization::clear_authorization_type() {
  _impl_.authorization_type_ = 0;
}
inline ::cosmos::staking::v1beta1::AuthorizationType StakeAuthorization::authorization_type() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.StakeAuthorization.authorization_type)
  return _internal_authorization_type();
}
inline void StakeAuthorization::set_authorization_type(::cosmos::staking::v1beta1::AuthorizationType value) {
   _internal_set_authorization_type(value);
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.StakeAuthorization.authorization_type)
}
inline ::cosmos::staking::v1beta1::AuthorizationType StakeAuthorization::_internal_authorization_type() const {
  return static_cast<::cosmos::staking::v1beta1::AuthorizationType>(_impl_.authorization_type_);
}
inline void StakeAuthorization::_internal_set_authorization_type(::cosmos::staking::v1beta1::AuthorizationType value) {
  ;
  _impl_.authorization_type_ = value;
}

inline bool StakeAuthorization::has_validators() const {
  return validators_case() != VALIDATORS_NOT_SET;
}
inline void StakeAuthorization::clear_has_validators() {
  _impl_._oneof_case_[0] = VALIDATORS_NOT_SET;
}
inline StakeAuthorization::ValidatorsCase StakeAuthorization::validators_case() const {
  return StakeAuthorization::ValidatorsCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cosmos::staking::v1beta1::AuthorizationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::staking::v1beta1::AuthorizationType>() {
  return ::cosmos::staking::v1beta1::AuthorizationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_2epb_2eh

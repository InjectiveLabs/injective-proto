// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/staking/v1beta1/query.proto

#include "cosmos/staking/v1beta1/query.pb.h"
#include "cosmos/staking/v1beta1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace cosmos {
namespace staking {
namespace v1beta1 {

static const char* Query_method_names[] = {
  "/cosmos.staking.v1beta1.Query/Validators",
  "/cosmos.staking.v1beta1.Query/Validator",
  "/cosmos.staking.v1beta1.Query/ValidatorDelegations",
  "/cosmos.staking.v1beta1.Query/ValidatorUnbondingDelegations",
  "/cosmos.staking.v1beta1.Query/Delegation",
  "/cosmos.staking.v1beta1.Query/UnbondingDelegation",
  "/cosmos.staking.v1beta1.Query/DelegatorDelegations",
  "/cosmos.staking.v1beta1.Query/DelegatorUnbondingDelegations",
  "/cosmos.staking.v1beta1.Query/Redelegations",
  "/cosmos.staking.v1beta1.Query/DelegatorValidators",
  "/cosmos.staking.v1beta1.Query/DelegatorValidator",
  "/cosmos.staking.v1beta1.Query/HistoricalInfo",
  "/cosmos.staking.v1beta1.Query/Pool",
  "/cosmos.staking.v1beta1.Query/Params",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Validators_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Validator_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatorDelegations_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidatorUnbondingDelegations_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delegation_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnbondingDelegation_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelegatorDelegations_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelegatorUnbondingDelegations_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Redelegations_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelegatorValidators_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DelegatorValidator_(Query_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HistoricalInfo_(Query_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pool_(Query_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Params_(Query_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::cosmos::staking::v1beta1::QueryValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Validators_, context, request, response);
}

void Query::Stub::async::Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::cosmos::staking::v1beta1::QueryValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Validators_, context, request, response, std::move(f));
}

void Query::Stub::async::Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Validators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorsResponse>* Query::Stub::PrepareAsyncValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryValidatorsResponse, ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Validators_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorsResponse>* Query::Stub::AsyncValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryValidatorRequest, ::cosmos::staking::v1beta1::QueryValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Validator_, context, request, response);
}

void Query::Stub::async::Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryValidatorRequest, ::cosmos::staking::v1beta1::QueryValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Validator_, context, request, response, std::move(f));
}

void Query::Stub::async::Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Validator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorResponse>* Query::Stub::PrepareAsyncValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryValidatorResponse, ::cosmos::staking::v1beta1::QueryValidatorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Validator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorResponse>* Query::Stub::AsyncValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidatorDelegations_, context, request, response);
}

void Query::Stub::async::ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorDelegations_, context, request, response, std::move(f));
}

void Query::Stub::async::ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorDelegations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* Query::Stub::PrepareAsyncValidatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse, ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidatorDelegations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* Query::Stub::AsyncValidatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatorDelegationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidatorUnbondingDelegations_, context, request, response);
}

void Query::Stub::async::ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorUnbondingDelegations_, context, request, response, std::move(f));
}

void Query::Stub::async::ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidatorUnbondingDelegations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* Query::Stub::PrepareAsyncValidatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidatorUnbondingDelegations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* Query::Stub::AsyncValidatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidatorUnbondingDelegationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryDelegationRequest, ::cosmos::staking::v1beta1::QueryDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delegation_, context, request, response);
}

void Query::Stub::async::Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryDelegationRequest, ::cosmos::staking::v1beta1::QueryDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delegation_, context, request, response, std::move(f));
}

void Query::Stub::async::Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delegation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegationResponse>* Query::Stub::PrepareAsyncDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryDelegationResponse, ::cosmos::staking::v1beta1::QueryDelegationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delegation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegationResponse>* Query::Stub::AsyncDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnbondingDelegation_, context, request, response);
}

void Query::Stub::async::UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnbondingDelegation_, context, request, response, std::move(f));
}

void Query::Stub::async::UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnbondingDelegation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* Query::Stub::PrepareAsyncUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse, ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnbondingDelegation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* Query::Stub::AsyncUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnbondingDelegationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelegatorDelegations_, context, request, response);
}

void Query::Stub::async::DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorDelegations_, context, request, response, std::move(f));
}

void Query::Stub::async::DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorDelegations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* Query::Stub::PrepareAsyncDelegatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelegatorDelegations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* Query::Stub::AsyncDelegatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegatorDelegationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelegatorUnbondingDelegations_, context, request, response);
}

void Query::Stub::async::DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorUnbondingDelegations_, context, request, response, std::move(f));
}

void Query::Stub::async::DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorUnbondingDelegations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* Query::Stub::PrepareAsyncDelegatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelegatorUnbondingDelegations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* Query::Stub::AsyncDelegatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegatorUnbondingDelegationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::cosmos::staking::v1beta1::QueryRedelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Redelegations_, context, request, response);
}

void Query::Stub::async::Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::cosmos::staking::v1beta1::QueryRedelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Redelegations_, context, request, response, std::move(f));
}

void Query::Stub::async::Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Redelegations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* Query::Stub::PrepareAsyncRedelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryRedelegationsResponse, ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Redelegations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* Query::Stub::AsyncRedelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRedelegationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelegatorValidators_, context, request, response);
}

void Query::Stub::async::DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorValidators_, context, request, response, std::move(f));
}

void Query::Stub::async::DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorValidators_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* Query::Stub::PrepareAsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelegatorValidators_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* Query::Stub::AsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegatorValidatorsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DelegatorValidator_, context, request, response);
}

void Query::Stub::async::DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorValidator_, context, request, response, std::move(f));
}

void Query::Stub::async::DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DelegatorValidator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* Query::Stub::PrepareAsyncDelegatorValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse, ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DelegatorValidator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* Query::Stub::AsyncDelegatorValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDelegatorValidatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HistoricalInfo_, context, request, response);
}

void Query::Stub::async::HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistoricalInfo_, context, request, response, std::move(f));
}

void Query::Stub::async::HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HistoricalInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* Query::Stub::PrepareAsyncHistoricalInfoRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse, ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HistoricalInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* Query::Stub::AsyncHistoricalInfoRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHistoricalInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::cosmos::staking::v1beta1::QueryPoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryPoolRequest, ::cosmos::staking::v1beta1::QueryPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Pool_, context, request, response);
}

void Query::Stub::async::Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryPoolRequest, ::cosmos::staking::v1beta1::QueryPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pool_, context, request, response, std::move(f));
}

void Query::Stub::async::Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryPoolResponse>* Query::Stub::PrepareAsyncPoolRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryPoolResponse, ::cosmos::staking::v1beta1::QueryPoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Pool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryPoolResponse>* Query::Stub::AsyncPoolRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::cosmos::staking::v1beta1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::cosmos::staking::v1beta1::QueryParamsRequest, ::cosmos::staking::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::cosmos::staking::v1beta1::QueryParamsRequest, ::cosmos::staking::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::cosmos::staking::v1beta1::QueryParamsResponse, ::cosmos::staking::v1beta1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::cosmos::staking::v1beta1::QueryValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryValidatorsRequest* req,
             ::cosmos::staking::v1beta1::QueryValidatorsResponse* resp) {
               return service->Validators(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryValidatorRequest, ::cosmos::staking::v1beta1::QueryValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryValidatorRequest* req,
             ::cosmos::staking::v1beta1::QueryValidatorResponse* resp) {
               return service->Validator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* req,
             ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* resp) {
               return service->ValidatorDelegations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* req,
             ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* resp) {
               return service->ValidatorUnbondingDelegations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryDelegationRequest, ::cosmos::staking::v1beta1::QueryDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryDelegationRequest* req,
             ::cosmos::staking::v1beta1::QueryDelegationResponse* resp) {
               return service->Delegation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* req,
             ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* resp) {
               return service->UnbondingDelegation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* req,
             ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* resp) {
               return service->DelegatorDelegations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* req,
             ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* resp) {
               return service->DelegatorUnbondingDelegations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::cosmos::staking::v1beta1::QueryRedelegationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* req,
             ::cosmos::staking::v1beta1::QueryRedelegationsResponse* resp) {
               return service->Redelegations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* req,
             ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* resp) {
               return service->DelegatorValidators(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* req,
             ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* resp) {
               return service->DelegatorValidator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* req,
             ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* resp) {
               return service->HistoricalInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryPoolRequest, ::cosmos::staking::v1beta1::QueryPoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryPoolRequest* req,
             ::cosmos::staking::v1beta1::QueryPoolResponse* resp) {
               return service->Pool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::cosmos::staking::v1beta1::QueryParamsRequest, ::cosmos::staking::v1beta1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::cosmos::staking::v1beta1::QueryParamsRequest* req,
             ::cosmos::staking::v1beta1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Validators(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Validator(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValidatorDelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ValidatorUnbondingDelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Delegation(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::UnbondingDelegation(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DelegatorDelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DelegatorUnbondingDelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Redelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DelegatorValidators(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DelegatorValidator(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::HistoricalInfo(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Pool(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cosmos
}  // namespace staking
}  // namespace v1beta1


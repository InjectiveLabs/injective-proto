// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/authz.proto

#include "cosmos/staking/v1beta1/authz.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace staking {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR StakeAuthorization_Validators::StakeAuthorization_Validators(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StakeAuthorization_ValidatorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StakeAuthorization_ValidatorsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StakeAuthorization_ValidatorsDefaultTypeInternal() {}
  union {
    StakeAuthorization_Validators _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StakeAuthorization_ValidatorsDefaultTypeInternal _StakeAuthorization_Validators_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StakeAuthorization::StakeAuthorization(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_tokens_)*/nullptr
  , /*decltype(_impl_.authorization_type_)*/ 0

  , /*decltype(_impl_.validators_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct StakeAuthorizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StakeAuthorizationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StakeAuthorizationDefaultTypeInternal() {}
  union {
    StakeAuthorization _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StakeAuthorizationDefaultTypeInternal _StakeAuthorization_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization_Validators, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization_Validators, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_.max_tokens_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_.authorization_type_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_.validators_),
    0,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::staking::v1beta1::StakeAuthorization_Validators)},
        { 9, 22, -1, sizeof(::cosmos::staking::v1beta1::StakeAuthorization)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::staking::v1beta1::_StakeAuthorization_Validators_default_instance_._instance,
    &::cosmos::staking::v1beta1::_StakeAuthorization_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\"cosmos/staking/v1beta1/authz.proto\022\026co"
    "smos.staking.v1beta1\032\024gogoproto/gogo.pro"
    "to\032\031cosmos_proto/cosmos.proto\032\036cosmos/ba"
    "se/v1beta1/coin.proto\032\021amino/amino.proto"
    "\"\235\004\n\022StakeAuthorization\022e\n\nmax_tokens\030\001 "
    "\001(\0132\031.cosmos.base.v1beta1.CoinB+\252\337\037\'gith"
    "ub.com/cosmos/cosmos-sdk/types.CoinR\tmax"
    "Tokens\022V\n\nallow_list\030\002 \001(\01325.cosmos.stak"
    "ing.v1beta1.StakeAuthorization.Validator"
    "sH\000R\tallowList\022T\n\tdeny_list\030\003 \001(\01325.cosm"
    "os.staking.v1beta1.StakeAuthorization.Va"
    "lidatorsH\000R\010denyList\022X\n\022authorization_ty"
    "pe\030\004 \001(\0162).cosmos.staking.v1beta1.Author"
    "izationTypeR\021authorizationType\032@\n\nValida"
    "tors\0222\n\007address\030\001 \003(\tB\030\322\264-\024cosmos.Addres"
    "sStringR\007address:H\312\264-\"cosmos.authz.v1bet"
    "a1.Authorization\212\347\260*\035cosmos-sdk/StakeAut"
    "horizationB\014\n\nvalidators*\236\001\n\021Authorizati"
    "onType\022\"\n\036AUTHORIZATION_TYPE_UNSPECIFIED"
    "\020\000\022\037\n\033AUTHORIZATION_TYPE_DELEGATE\020\001\022!\n\035A"
    "UTHORIZATION_TYPE_UNDELEGATE\020\002\022!\n\035AUTHOR"
    "IZATION_TYPE_REDELEGATE\020\003B\320\001\n\032com.cosmos"
    ".staking.v1beta1B\nAuthzProtoP\001Z,github.c"
    "om/cosmos/cosmos-sdk/x/staking/types\242\002\003C"
    "SX\252\002\026Cosmos.Staking.V1beta1\312\002\026Cosmos\\Sta"
    "king\\V1beta1\342\002\"Cosmos\\Staking\\V1beta1\\GP"
    "BMetadata\352\002\030Cosmos::Staking::V1beta1b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto = {
    false,
    false,
    1084,
    descriptor_table_protodef_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
    "cosmos/staking/v1beta1/authz.proto",
    &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_once,
    descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_deps,
    4,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto::offsets,
    file_level_metadata_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
    file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
    file_level_service_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_getter() {
  return &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto(&descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto);
namespace cosmos {
namespace staking {
namespace v1beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthorizationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto);
  return file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[0];
}
bool AuthorizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class StakeAuthorization_Validators::_Internal {
 public:
};

StakeAuthorization_Validators::StakeAuthorization_Validators(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.StakeAuthorization.Validators)
}
StakeAuthorization_Validators::StakeAuthorization_Validators(const StakeAuthorization_Validators& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StakeAuthorization_Validators* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){from._impl_.address_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.StakeAuthorization.Validators)
}

inline void StakeAuthorization_Validators::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StakeAuthorization_Validators::~StakeAuthorization_Validators() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StakeAuthorization_Validators::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_address()->~RepeatedPtrField();
}

void StakeAuthorization_Validators::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StakeAuthorization_Validators::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_address()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakeAuthorization_Validators::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_address();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.StakeAuthorization.Validators.address"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StakeAuthorization_Validators::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  for (int i = 0, n = this->_internal_address_size(); i < n; ++i) {
    const auto& s = this->_internal_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.StakeAuthorization.Validators.address");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  return target;
}

::size_t StakeAuthorization_Validators::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_address().size());
  for (int i = 0, n = _internal_address().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_address().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StakeAuthorization_Validators::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StakeAuthorization_Validators::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StakeAuthorization_Validators::GetClassData() const { return &_class_data_; }


void StakeAuthorization_Validators::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StakeAuthorization_Validators*>(&to_msg);
  auto& from = static_cast<const StakeAuthorization_Validators&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_address()->MergeFrom(from._internal_address());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StakeAuthorization_Validators::CopyFrom(const StakeAuthorization_Validators& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.StakeAuthorization.Validators)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakeAuthorization_Validators::IsInitialized() const {
  return true;
}

void StakeAuthorization_Validators::InternalSwap(StakeAuthorization_Validators* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_address()->InternalSwap(
      other->_internal_mutable_address());
}

::PROTOBUF_NAMESPACE_ID::Metadata StakeAuthorization_Validators::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[0]);
}
// ===================================================================

class StakeAuthorization::_Internal {
 public:
  using HasBits = decltype(std::declval<StakeAuthorization>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::StakeAuthorization, _impl_._oneof_case_);
  static const ::cosmos::base::v1beta1::Coin& max_tokens(const StakeAuthorization* msg);
  static void set_has_max_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& allow_list(const StakeAuthorization* msg);
  static const ::cosmos::staking::v1beta1::StakeAuthorization_Validators& deny_list(const StakeAuthorization* msg);
};

const ::cosmos::base::v1beta1::Coin&
StakeAuthorization::_Internal::max_tokens(const StakeAuthorization* msg) {
  return *msg->_impl_.max_tokens_;
}
const ::cosmos::staking::v1beta1::StakeAuthorization_Validators&
StakeAuthorization::_Internal::allow_list(const StakeAuthorization* msg) {
  return *msg->_impl_.validators_.allow_list_;
}
const ::cosmos::staking::v1beta1::StakeAuthorization_Validators&
StakeAuthorization::_Internal::deny_list(const StakeAuthorization* msg) {
  return *msg->_impl_.validators_.deny_list_;
}
void StakeAuthorization::clear_max_tokens() {
  if (_impl_.max_tokens_ != nullptr) _impl_.max_tokens_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StakeAuthorization::set_allocated_allow_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* allow_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_validators();
  if (allow_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(allow_list);
    if (message_arena != submessage_arena) {
      allow_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_list, submessage_arena);
    }
    set_has_allow_list();
    _impl_.validators_.allow_list_ = allow_list;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.allow_list)
}
void StakeAuthorization::set_allocated_deny_list(::cosmos::staking::v1beta1::StakeAuthorization_Validators* deny_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_validators();
  if (deny_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(deny_list);
    if (message_arena != submessage_arena) {
      deny_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deny_list, submessage_arena);
    }
    set_has_deny_list();
    _impl_.validators_.deny_list_ = deny_list;
  }
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.StakeAuthorization.deny_list)
}
StakeAuthorization::StakeAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.StakeAuthorization)
}
StakeAuthorization::StakeAuthorization(const StakeAuthorization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StakeAuthorization* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_tokens_){nullptr}
    , decltype(_impl_.authorization_type_) {}

    , decltype(_impl_.validators_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.max_tokens_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.max_tokens_);
  }
  _this->_impl_.authorization_type_ = from._impl_.authorization_type_;
  clear_has_validators();
  switch (from.validators_case()) {
    case kAllowList: {
      _this->_internal_mutable_allow_list()->::cosmos::staking::v1beta1::StakeAuthorization_Validators::MergeFrom(
          from._internal_allow_list());
      break;
    }
    case kDenyList: {
      _this->_internal_mutable_deny_list()->::cosmos::staking::v1beta1::StakeAuthorization_Validators::MergeFrom(
          from._internal_deny_list());
      break;
    }
    case VALIDATORS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.StakeAuthorization)
}

inline void StakeAuthorization::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_tokens_){nullptr}
    , decltype(_impl_.authorization_type_) { 0 }

    , decltype(_impl_.validators_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_validators();
}

StakeAuthorization::~StakeAuthorization() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.StakeAuthorization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StakeAuthorization::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.max_tokens_;
  if (has_validators()) {
    clear_validators();
  }
}

void StakeAuthorization::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StakeAuthorization::clear_validators() {
// @@protoc_insertion_point(one_of_clear_start:cosmos.staking.v1beta1.StakeAuthorization)
  switch (validators_case()) {
    case kAllowList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.validators_.allow_list_;
      }
      break;
    }
    case kDenyList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.validators_.deny_list_;
      }
      break;
    }
    case VALIDATORS_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALIDATORS_NOT_SET;
}


void StakeAuthorization::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.StakeAuthorization)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.max_tokens_ != nullptr);
    _impl_.max_tokens_->Clear();
  }
  _impl_.authorization_type_ = 0;
  clear_validators();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StakeAuthorization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_tokens(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_allow_list(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deny_list(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_authorization_type(static_cast<::cosmos::staking::v1beta1::AuthorizationType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StakeAuthorization::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.StakeAuthorization)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::max_tokens(this),
        _Internal::max_tokens(this).GetCachedSize(), target, stream);
  }

  switch (validators_case()) {
    case kAllowList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::allow_list(this),
          _Internal::allow_list(this).GetCachedSize(), target, stream);
      break;
    }
    case kDenyList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::deny_list(this),
          _Internal::deny_list(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
  if (this->_internal_authorization_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_authorization_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.StakeAuthorization)
  return target;
}

::size_t StakeAuthorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.StakeAuthorization)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_tokens_);
  }

  // .cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];
  if (this->_internal_authorization_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_authorization_type());
  }

  switch (validators_case()) {
    // .cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList"];
    case kAllowList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.validators_.allow_list_);
      break;
    }
    // .cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList"];
    case kDenyList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.validators_.deny_list_);
      break;
    }
    case VALIDATORS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StakeAuthorization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StakeAuthorization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StakeAuthorization::GetClassData() const { return &_class_data_; }


void StakeAuthorization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StakeAuthorization*>(&to_msg);
  auto& from = static_cast<const StakeAuthorization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.StakeAuthorization)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_max_tokens()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_max_tokens());
  }
  if (from._internal_authorization_type() != 0) {
    _this->_internal_set_authorization_type(from._internal_authorization_type());
  }
  switch (from.validators_case()) {
    case kAllowList: {
      _this->_internal_mutable_allow_list()->::cosmos::staking::v1beta1::StakeAuthorization_Validators::MergeFrom(
          from._internal_allow_list());
      break;
    }
    case kDenyList: {
      _this->_internal_mutable_deny_list()->::cosmos::staking::v1beta1::StakeAuthorization_Validators::MergeFrom(
          from._internal_deny_list());
      break;
    }
    case VALIDATORS_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StakeAuthorization::CopyFrom(const StakeAuthorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.StakeAuthorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StakeAuthorization::IsInitialized() const {
  return true;
}

void StakeAuthorization::InternalSwap(StakeAuthorization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.authorization_type_)
      + sizeof(StakeAuthorization::_impl_.authorization_type_)
      - PROTOBUF_FIELD_OFFSET(StakeAuthorization, _impl_.max_tokens_)>(
          reinterpret_cast<char*>(&_impl_.max_tokens_),
          reinterpret_cast<char*>(&other->_impl_.max_tokens_));
  swap(_impl_.validators_, other->_impl_.validators_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StakeAuthorization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fauthz_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::StakeAuthorization_Validators*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::StakeAuthorization_Validators >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::StakeAuthorization_Validators >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::StakeAuthorization*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::StakeAuthorization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::StakeAuthorization >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/staking/v1beta1/staking.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fstaking_2fv1beta1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
namespace cosmos {
namespace staking {
namespace v1beta1 {
class MsgBeginRedelegate;
struct MsgBeginRedelegateDefaultTypeInternal;
extern MsgBeginRedelegateDefaultTypeInternal _MsgBeginRedelegate_default_instance_;
class MsgBeginRedelegateResponse;
struct MsgBeginRedelegateResponseDefaultTypeInternal;
extern MsgBeginRedelegateResponseDefaultTypeInternal _MsgBeginRedelegateResponse_default_instance_;
class MsgCancelUnbondingDelegation;
struct MsgCancelUnbondingDelegationDefaultTypeInternal;
extern MsgCancelUnbondingDelegationDefaultTypeInternal _MsgCancelUnbondingDelegation_default_instance_;
class MsgCancelUnbondingDelegationResponse;
struct MsgCancelUnbondingDelegationResponseDefaultTypeInternal;
extern MsgCancelUnbondingDelegationResponseDefaultTypeInternal _MsgCancelUnbondingDelegationResponse_default_instance_;
class MsgCreateValidator;
struct MsgCreateValidatorDefaultTypeInternal;
extern MsgCreateValidatorDefaultTypeInternal _MsgCreateValidator_default_instance_;
class MsgCreateValidatorResponse;
struct MsgCreateValidatorResponseDefaultTypeInternal;
extern MsgCreateValidatorResponseDefaultTypeInternal _MsgCreateValidatorResponse_default_instance_;
class MsgDelegate;
struct MsgDelegateDefaultTypeInternal;
extern MsgDelegateDefaultTypeInternal _MsgDelegate_default_instance_;
class MsgDelegateResponse;
struct MsgDelegateResponseDefaultTypeInternal;
extern MsgDelegateResponseDefaultTypeInternal _MsgDelegateResponse_default_instance_;
class MsgEditValidator;
struct MsgEditValidatorDefaultTypeInternal;
extern MsgEditValidatorDefaultTypeInternal _MsgEditValidator_default_instance_;
class MsgEditValidatorResponse;
struct MsgEditValidatorResponseDefaultTypeInternal;
extern MsgEditValidatorResponseDefaultTypeInternal _MsgEditValidatorResponse_default_instance_;
class MsgUndelegate;
struct MsgUndelegateDefaultTypeInternal;
extern MsgUndelegateDefaultTypeInternal _MsgUndelegate_default_instance_;
class MsgUndelegateResponse;
struct MsgUndelegateResponseDefaultTypeInternal;
extern MsgUndelegateResponseDefaultTypeInternal _MsgUndelegateResponse_default_instance_;
class MsgUpdateParams;
struct MsgUpdateParamsDefaultTypeInternal;
extern MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
class MsgUpdateParamsResponse;
struct MsgUpdateParamsResponseDefaultTypeInternal;
extern MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::staking::v1beta1::MsgBeginRedelegate* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgBeginRedelegate>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgCreateValidator* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgCreateValidator>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgCreateValidatorResponse* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgCreateValidatorResponse>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgDelegate* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgDelegate>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgDelegateResponse* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgDelegateResponse>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgEditValidator* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgEditValidator>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgEditValidatorResponse* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgEditValidatorResponse>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgUndelegate* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgUndelegate>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgUndelegateResponse* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgUndelegateResponse>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgUpdateParams* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgUpdateParams>(Arena*);
template <>
::cosmos::staking::v1beta1::MsgUpdateParamsResponse* Arena::CreateMaybeMessage<::cosmos::staking::v1beta1::MsgUpdateParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace staking {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgCreateValidator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgCreateValidator) */ {
 public:
  inline MsgCreateValidator() : MsgCreateValidator(nullptr) {}
  ~MsgCreateValidator() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateValidator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateValidator(const MsgCreateValidator& from);
  MsgCreateValidator(MsgCreateValidator&& from) noexcept
    : MsgCreateValidator() {
    *this = ::std::move(from);
  }

  inline MsgCreateValidator& operator=(const MsgCreateValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateValidator& operator=(MsgCreateValidator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateValidator& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateValidator* internal_default_instance() {
    return reinterpret_cast<const MsgCreateValidator*>(
               &_MsgCreateValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgCreateValidator& a, MsgCreateValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateValidator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateValidator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateValidator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateValidator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateValidator& from) {
    MsgCreateValidator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateValidator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgCreateValidator";
  }
  protected:
  explicit MsgCreateValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinSelfDelegationFieldNumber = 3,
    kDelegatorAddressFieldNumber = 4,
    kValidatorAddressFieldNumber = 5,
    kDescriptionFieldNumber = 1,
    kCommissionFieldNumber = 2,
    kPubkeyFieldNumber = 6,
    kValueFieldNumber = 7,
  };
  // string min_self_delegation = 3 [json_name = "minSelfDelegation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_min_self_delegation() ;
  const std::string& min_self_delegation() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_min_self_delegation(Arg_&& arg, Args_... args);
  std::string* mutable_min_self_delegation();
  PROTOBUF_NODISCARD std::string* release_min_self_delegation();
  void set_allocated_min_self_delegation(std::string* ptr);

  private:
  const std::string& _internal_min_self_delegation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_self_delegation(
      const std::string& value);
  std::string* _internal_mutable_min_self_delegation();

  public:
  // string delegator_address = 4 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_delegator_address() ;
  const std::string& delegator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delegator_address(Arg_&& arg, Args_... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* ptr);

  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(
      const std::string& value);
  std::string* _internal_mutable_delegator_address();

  public:
  // string validator_address = 5 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_validator_address() ;
  const std::string& validator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* ptr);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // .cosmos.staking.v1beta1.Description description = 1 [json_name = "description", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_description() const;
  void clear_description() ;
  const ::cosmos::staking::v1beta1::Description& description() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::Description* release_description();
  ::cosmos::staking::v1beta1::Description* mutable_description();
  void set_allocated_description(::cosmos::staking::v1beta1::Description* description);
  private:
  const ::cosmos::staking::v1beta1::Description& _internal_description() const;
  ::cosmos::staking::v1beta1::Description* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::cosmos::staking::v1beta1::Description* description);
  ::cosmos::staking::v1beta1::Description* unsafe_arena_release_description();
  // .cosmos.staking.v1beta1.CommissionRates commission = 2 [json_name = "commission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_commission() const;
  void clear_commission() ;
  const ::cosmos::staking::v1beta1::CommissionRates& commission() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::CommissionRates* release_commission();
  ::cosmos::staking::v1beta1::CommissionRates* mutable_commission();
  void set_allocated_commission(::cosmos::staking::v1beta1::CommissionRates* commission);
  private:
  const ::cosmos::staking::v1beta1::CommissionRates& _internal_commission() const;
  ::cosmos::staking::v1beta1::CommissionRates* _internal_mutable_commission();
  public:
  void unsafe_arena_set_allocated_commission(
      ::cosmos::staking::v1beta1::CommissionRates* commission);
  ::cosmos::staking::v1beta1::CommissionRates* unsafe_arena_release_commission();
  // .google.protobuf.Any pubkey = 6 [json_name = "pubkey", (.cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
  bool has_pubkey() const;
  void clear_pubkey() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& pubkey() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_pubkey();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_pubkey();
  void set_allocated_pubkey(::PROTOBUF_NAMESPACE_ID::Any* pubkey);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_pubkey() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_pubkey();
  public:
  void unsafe_arena_set_allocated_pubkey(
      ::PROTOBUF_NAMESPACE_ID::Any* pubkey);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_pubkey();
  // .cosmos.base.v1beta1.Coin value = 7 [json_name = "value", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_value() const;
  void clear_value() ;
  const ::cosmos::base::v1beta1::Coin& value() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_value();
  ::cosmos::base::v1beta1::Coin* mutable_value();
  void set_allocated_value(::cosmos::base::v1beta1::Coin* value);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_value() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::cosmos::base::v1beta1::Coin* value);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_value();
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgCreateValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_self_delegation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
    ::cosmos::staking::v1beta1::Description* description_;
    ::cosmos::staking::v1beta1::CommissionRates* commission_;
    ::PROTOBUF_NAMESPACE_ID::Any* pubkey_;
    ::cosmos::base::v1beta1::Coin* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCreateValidatorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgCreateValidatorResponse) */ {
 public:
  inline MsgCreateValidatorResponse() : MsgCreateValidatorResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateValidatorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateValidatorResponse(const MsgCreateValidatorResponse& from);
  MsgCreateValidatorResponse(MsgCreateValidatorResponse&& from) noexcept
    : MsgCreateValidatorResponse() {
    *this = ::std::move(from);
  }

  inline MsgCreateValidatorResponse& operator=(const MsgCreateValidatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateValidatorResponse& operator=(MsgCreateValidatorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateValidatorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateValidatorResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateValidatorResponse*>(
               &_MsgCreateValidatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgCreateValidatorResponse& a, MsgCreateValidatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateValidatorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateValidatorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateValidatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateValidatorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgCreateValidatorResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgCreateValidatorResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgCreateValidatorResponse";
  }
  protected:
  explicit MsgCreateValidatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgCreateValidatorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgEditValidator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgEditValidator) */ {
 public:
  inline MsgEditValidator() : MsgEditValidator(nullptr) {}
  ~MsgEditValidator() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgEditValidator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgEditValidator(const MsgEditValidator& from);
  MsgEditValidator(MsgEditValidator&& from) noexcept
    : MsgEditValidator() {
    *this = ::std::move(from);
  }

  inline MsgEditValidator& operator=(const MsgEditValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgEditValidator& operator=(MsgEditValidator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgEditValidator& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgEditValidator* internal_default_instance() {
    return reinterpret_cast<const MsgEditValidator*>(
               &_MsgEditValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgEditValidator& a, MsgEditValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgEditValidator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgEditValidator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgEditValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgEditValidator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgEditValidator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgEditValidator& from) {
    MsgEditValidator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgEditValidator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgEditValidator";
  }
  protected:
  explicit MsgEditValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorAddressFieldNumber = 2,
    kCommissionRateFieldNumber = 3,
    kMinSelfDelegationFieldNumber = 4,
    kDescriptionFieldNumber = 1,
  };
  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_validator_address() ;
  const std::string& validator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* ptr);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // string commission_rate = 3 [json_name = "commissionRate", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_commission_rate() ;
  const std::string& commission_rate() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_commission_rate(Arg_&& arg, Args_... args);
  std::string* mutable_commission_rate();
  PROTOBUF_NODISCARD std::string* release_commission_rate();
  void set_allocated_commission_rate(std::string* ptr);

  private:
  const std::string& _internal_commission_rate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commission_rate(
      const std::string& value);
  std::string* _internal_mutable_commission_rate();

  public:
  // string min_self_delegation = 4 [json_name = "minSelfDelegation", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_min_self_delegation() ;
  const std::string& min_self_delegation() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_min_self_delegation(Arg_&& arg, Args_... args);
  std::string* mutable_min_self_delegation();
  PROTOBUF_NODISCARD std::string* release_min_self_delegation();
  void set_allocated_min_self_delegation(std::string* ptr);

  private:
  const std::string& _internal_min_self_delegation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_self_delegation(
      const std::string& value);
  std::string* _internal_mutable_min_self_delegation();

  public:
  // .cosmos.staking.v1beta1.Description description = 1 [json_name = "description", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_description() const;
  void clear_description() ;
  const ::cosmos::staking::v1beta1::Description& description() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::Description* release_description();
  ::cosmos::staking::v1beta1::Description* mutable_description();
  void set_allocated_description(::cosmos::staking::v1beta1::Description* description);
  private:
  const ::cosmos::staking::v1beta1::Description& _internal_description() const;
  ::cosmos::staking::v1beta1::Description* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      ::cosmos::staking::v1beta1::Description* description);
  ::cosmos::staking::v1beta1::Description* unsafe_arena_release_description();
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgEditValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commission_rate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_self_delegation_;
    ::cosmos::staking::v1beta1::Description* description_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgEditValidatorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgEditValidatorResponse) */ {
 public:
  inline MsgEditValidatorResponse() : MsgEditValidatorResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgEditValidatorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgEditValidatorResponse(const MsgEditValidatorResponse& from);
  MsgEditValidatorResponse(MsgEditValidatorResponse&& from) noexcept
    : MsgEditValidatorResponse() {
    *this = ::std::move(from);
  }

  inline MsgEditValidatorResponse& operator=(const MsgEditValidatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgEditValidatorResponse& operator=(MsgEditValidatorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgEditValidatorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgEditValidatorResponse* internal_default_instance() {
    return reinterpret_cast<const MsgEditValidatorResponse*>(
               &_MsgEditValidatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgEditValidatorResponse& a, MsgEditValidatorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgEditValidatorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgEditValidatorResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgEditValidatorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgEditValidatorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgEditValidatorResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgEditValidatorResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgEditValidatorResponse";
  }
  protected:
  explicit MsgEditValidatorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgEditValidatorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgDelegate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgDelegate) */ {
 public:
  inline MsgDelegate() : MsgDelegate(nullptr) {}
  ~MsgDelegate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgDelegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDelegate(const MsgDelegate& from);
  MsgDelegate(MsgDelegate&& from) noexcept
    : MsgDelegate() {
    *this = ::std::move(from);
  }

  inline MsgDelegate& operator=(const MsgDelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDelegate& operator=(MsgDelegate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDelegate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDelegate* internal_default_instance() {
    return reinterpret_cast<const MsgDelegate*>(
               &_MsgDelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgDelegate& a, MsgDelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDelegate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDelegate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDelegate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgDelegate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgDelegate& from) {
    MsgDelegate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDelegate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgDelegate";
  }
  protected:
  explicit MsgDelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_delegator_address() ;
  const std::string& delegator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delegator_address(Arg_&& arg, Args_... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* ptr);

  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(
      const std::string& value);
  std::string* _internal_mutable_delegator_address();

  public:
  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_validator_address() ;
  const std::string& validator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* ptr);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgDelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgDelegateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgDelegateResponse) */ {
 public:
  inline MsgDelegateResponse() : MsgDelegateResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgDelegateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDelegateResponse(const MsgDelegateResponse& from);
  MsgDelegateResponse(MsgDelegateResponse&& from) noexcept
    : MsgDelegateResponse() {
    *this = ::std::move(from);
  }

  inline MsgDelegateResponse& operator=(const MsgDelegateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDelegateResponse& operator=(MsgDelegateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDelegateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDelegateResponse* internal_default_instance() {
    return reinterpret_cast<const MsgDelegateResponse*>(
               &_MsgDelegateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgDelegateResponse& a, MsgDelegateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDelegateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDelegateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDelegateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDelegateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgDelegateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgDelegateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgDelegateResponse";
  }
  protected:
  explicit MsgDelegateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgDelegateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgBeginRedelegate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgBeginRedelegate) */ {
 public:
  inline MsgBeginRedelegate() : MsgBeginRedelegate(nullptr) {}
  ~MsgBeginRedelegate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgBeginRedelegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgBeginRedelegate(const MsgBeginRedelegate& from);
  MsgBeginRedelegate(MsgBeginRedelegate&& from) noexcept
    : MsgBeginRedelegate() {
    *this = ::std::move(from);
  }

  inline MsgBeginRedelegate& operator=(const MsgBeginRedelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBeginRedelegate& operator=(MsgBeginRedelegate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBeginRedelegate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgBeginRedelegate* internal_default_instance() {
    return reinterpret_cast<const MsgBeginRedelegate*>(
               &_MsgBeginRedelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgBeginRedelegate& a, MsgBeginRedelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBeginRedelegate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBeginRedelegate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBeginRedelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgBeginRedelegate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgBeginRedelegate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgBeginRedelegate& from) {
    MsgBeginRedelegate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBeginRedelegate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgBeginRedelegate";
  }
  protected:
  explicit MsgBeginRedelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorSrcAddressFieldNumber = 2,
    kValidatorDstAddressFieldNumber = 3,
    kAmountFieldNumber = 4,
  };
  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_delegator_address() ;
  const std::string& delegator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delegator_address(Arg_&& arg, Args_... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* ptr);

  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(
      const std::string& value);
  std::string* _internal_mutable_delegator_address();

  public:
  // string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_validator_src_address() ;
  const std::string& validator_src_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_src_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_src_address();
  PROTOBUF_NODISCARD std::string* release_validator_src_address();
  void set_allocated_validator_src_address(std::string* ptr);

  private:
  const std::string& _internal_validator_src_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_src_address(
      const std::string& value);
  std::string* _internal_mutable_validator_src_address();

  public:
  // string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_validator_dst_address() ;
  const std::string& validator_dst_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_dst_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_dst_address();
  PROTOBUF_NODISCARD std::string* release_validator_dst_address();
  void set_allocated_validator_dst_address(std::string* ptr);

  private:
  const std::string& _internal_validator_dst_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_dst_address(
      const std::string& value);
  std::string* _internal_mutable_validator_dst_address();

  public:
  // .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgBeginRedelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_src_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_dst_address_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgBeginRedelegateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgBeginRedelegateResponse) */ {
 public:
  inline MsgBeginRedelegateResponse() : MsgBeginRedelegateResponse(nullptr) {}
  ~MsgBeginRedelegateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgBeginRedelegateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgBeginRedelegateResponse(const MsgBeginRedelegateResponse& from);
  MsgBeginRedelegateResponse(MsgBeginRedelegateResponse&& from) noexcept
    : MsgBeginRedelegateResponse() {
    *this = ::std::move(from);
  }

  inline MsgBeginRedelegateResponse& operator=(const MsgBeginRedelegateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBeginRedelegateResponse& operator=(MsgBeginRedelegateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBeginRedelegateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgBeginRedelegateResponse* internal_default_instance() {
    return reinterpret_cast<const MsgBeginRedelegateResponse*>(
               &_MsgBeginRedelegateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgBeginRedelegateResponse& a, MsgBeginRedelegateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBeginRedelegateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBeginRedelegateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBeginRedelegateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgBeginRedelegateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgBeginRedelegateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgBeginRedelegateResponse& from) {
    MsgBeginRedelegateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBeginRedelegateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgBeginRedelegateResponse";
  }
  protected:
  explicit MsgBeginRedelegateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletionTimeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp completion_time = 1 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_completion_time() const;
  void clear_completion_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& completion_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_completion_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_completion_time();
  void set_allocated_completion_time(::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_completion_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_completion_time();
  public:
  void unsafe_arena_set_allocated_completion_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_completion_time();
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgBeginRedelegateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUndelegate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgUndelegate) */ {
 public:
  inline MsgUndelegate() : MsgUndelegate(nullptr) {}
  ~MsgUndelegate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUndelegate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUndelegate(const MsgUndelegate& from);
  MsgUndelegate(MsgUndelegate&& from) noexcept
    : MsgUndelegate() {
    *this = ::std::move(from);
  }

  inline MsgUndelegate& operator=(const MsgUndelegate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUndelegate& operator=(MsgUndelegate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUndelegate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUndelegate* internal_default_instance() {
    return reinterpret_cast<const MsgUndelegate*>(
               &_MsgUndelegate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgUndelegate& a, MsgUndelegate& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUndelegate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUndelegate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUndelegate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUndelegate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUndelegate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUndelegate& from) {
    MsgUndelegate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUndelegate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgUndelegate";
  }
  protected:
  explicit MsgUndelegate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_delegator_address() ;
  const std::string& delegator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delegator_address(Arg_&& arg, Args_... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* ptr);

  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(
      const std::string& value);
  std::string* _internal_mutable_delegator_address();

  public:
  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_validator_address() ;
  const std::string& validator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* ptr);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgUndelegate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUndelegateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgUndelegateResponse) */ {
 public:
  inline MsgUndelegateResponse() : MsgUndelegateResponse(nullptr) {}
  ~MsgUndelegateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUndelegateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUndelegateResponse(const MsgUndelegateResponse& from);
  MsgUndelegateResponse(MsgUndelegateResponse&& from) noexcept
    : MsgUndelegateResponse() {
    *this = ::std::move(from);
  }

  inline MsgUndelegateResponse& operator=(const MsgUndelegateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUndelegateResponse& operator=(MsgUndelegateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUndelegateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUndelegateResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUndelegateResponse*>(
               &_MsgUndelegateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgUndelegateResponse& a, MsgUndelegateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUndelegateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUndelegateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUndelegateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUndelegateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUndelegateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUndelegateResponse& from) {
    MsgUndelegateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUndelegateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgUndelegateResponse";
  }
  protected:
  explicit MsgUndelegateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletionTimeFieldNumber = 1,
  };
  // .google.protobuf.Timestamp completion_time = 1 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  bool has_completion_time() const;
  void clear_completion_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& completion_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_completion_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_completion_time();
  void set_allocated_completion_time(::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_completion_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_completion_time();
  public:
  void unsafe_arena_set_allocated_completion_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_completion_time();
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgUndelegateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCancelUnbondingDelegation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation) */ {
 public:
  inline MsgCancelUnbondingDelegation() : MsgCancelUnbondingDelegation(nullptr) {}
  ~MsgCancelUnbondingDelegation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCancelUnbondingDelegation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelUnbondingDelegation(const MsgCancelUnbondingDelegation& from);
  MsgCancelUnbondingDelegation(MsgCancelUnbondingDelegation&& from) noexcept
    : MsgCancelUnbondingDelegation() {
    *this = ::std::move(from);
  }

  inline MsgCancelUnbondingDelegation& operator=(const MsgCancelUnbondingDelegation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelUnbondingDelegation& operator=(MsgCancelUnbondingDelegation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelUnbondingDelegation& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCancelUnbondingDelegation* internal_default_instance() {
    return reinterpret_cast<const MsgCancelUnbondingDelegation*>(
               &_MsgCancelUnbondingDelegation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MsgCancelUnbondingDelegation& a, MsgCancelUnbondingDelegation& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelUnbondingDelegation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelUnbondingDelegation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelUnbondingDelegation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelUnbondingDelegation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCancelUnbondingDelegation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCancelUnbondingDelegation& from) {
    MsgCancelUnbondingDelegation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCancelUnbondingDelegation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgCancelUnbondingDelegation";
  }
  protected:
  explicit MsgCancelUnbondingDelegation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelegatorAddressFieldNumber = 1,
    kValidatorAddressFieldNumber = 2,
    kAmountFieldNumber = 3,
    kCreationHeightFieldNumber = 4,
  };
  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_delegator_address() ;
  const std::string& delegator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delegator_address(Arg_&& arg, Args_... args);
  std::string* mutable_delegator_address();
  PROTOBUF_NODISCARD std::string* release_delegator_address();
  void set_allocated_delegator_address(std::string* ptr);

  private:
  const std::string& _internal_delegator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delegator_address(
      const std::string& value);
  std::string* _internal_mutable_delegator_address();

  public:
  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_validator_address() ;
  const std::string& validator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* ptr);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // int64 creation_height = 4 [json_name = "creationHeight"];
  void clear_creation_height() ;
  ::int64_t creation_height() const;
  void set_creation_height(::int64_t value);

  private:
  ::int64_t _internal_creation_height() const;
  void _internal_set_creation_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegator_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
    ::cosmos::base::v1beta1::Coin* amount_;
    ::int64_t creation_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCancelUnbondingDelegationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgCancelUnbondingDelegationResponse) */ {
 public:
  inline MsgCancelUnbondingDelegationResponse() : MsgCancelUnbondingDelegationResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCancelUnbondingDelegationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelUnbondingDelegationResponse(const MsgCancelUnbondingDelegationResponse& from);
  MsgCancelUnbondingDelegationResponse(MsgCancelUnbondingDelegationResponse&& from) noexcept
    : MsgCancelUnbondingDelegationResponse() {
    *this = ::std::move(from);
  }

  inline MsgCancelUnbondingDelegationResponse& operator=(const MsgCancelUnbondingDelegationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelUnbondingDelegationResponse& operator=(MsgCancelUnbondingDelegationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelUnbondingDelegationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCancelUnbondingDelegationResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCancelUnbondingDelegationResponse*>(
               &_MsgCancelUnbondingDelegationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MsgCancelUnbondingDelegationResponse& a, MsgCancelUnbondingDelegationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelUnbondingDelegationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelUnbondingDelegationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelUnbondingDelegationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelUnbondingDelegationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgCancelUnbondingDelegationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgCancelUnbondingDelegationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgCancelUnbondingDelegationResponse";
  }
  protected:
  explicit MsgCancelUnbondingDelegationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgCancelUnbondingDelegationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgUpdateParams) */ {
 public:
  inline MsgUpdateParams() : MsgUpdateParams(nullptr) {}
  ~MsgUpdateParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParams(const MsgUpdateParams& from);
  MsgUpdateParams(MsgUpdateParams&& from) noexcept
    : MsgUpdateParams() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParams& operator=(const MsgUpdateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParams& operator=(MsgUpdateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParams* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParams*>(
               &_MsgUpdateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MsgUpdateParams& a, MsgUpdateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateParams& from) {
    MsgUpdateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgUpdateParams";
  }
  protected:
  explicit MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .cosmos.staking.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_params() const;
  void clear_params() ;
  const ::cosmos::staking::v1beta1::Params& params() const;
  PROTOBUF_NODISCARD ::cosmos::staking::v1beta1::Params* release_params();
  ::cosmos::staking::v1beta1::Params* mutable_params();
  void set_allocated_params(::cosmos::staking::v1beta1::Params* params);
  private:
  const ::cosmos::staking::v1beta1::Params& _internal_params() const;
  ::cosmos::staking::v1beta1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::cosmos::staking::v1beta1::Params* params);
  ::cosmos::staking::v1beta1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgUpdateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::cosmos::staking::v1beta1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.staking.v1beta1.MsgUpdateParamsResponse) */ {
 public:
  inline MsgUpdateParamsResponse() : MsgUpdateParamsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from);
  MsgUpdateParamsResponse(MsgUpdateParamsResponse&& from) noexcept
    : MsgUpdateParamsResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParamsResponse& operator=(const MsgUpdateParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParamsResponse& operator=(MsgUpdateParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParamsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParamsResponse*>(
               &_MsgUpdateParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MsgUpdateParamsResponse& a, MsgUpdateParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.staking.v1beta1.MsgUpdateParamsResponse";
  }
  protected:
  explicit MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.staking.v1beta1.MsgUpdateParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fstaking_2fv1beta1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgCreateValidator

// .cosmos.staking.v1beta1.Description description = 1 [json_name = "description", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgCreateValidator::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.description_ != nullptr);
  return value;
}
inline const ::cosmos::staking::v1beta1::Description& MsgCreateValidator::_internal_description() const {
  const ::cosmos::staking::v1beta1::Description* p = _impl_.description_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::staking::v1beta1::Description&>(
      ::cosmos::staking::v1beta1::_Description_default_instance_);
}
inline const ::cosmos::staking::v1beta1::Description& MsgCreateValidator::description() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCreateValidator.description)
  return _internal_description();
}
inline void MsgCreateValidator::unsafe_arena_set_allocated_description(
    ::cosmos::staking::v1beta1::Description* description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.description_);
  }
  _impl_.description_ = description;
  if (description) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.description)
}
inline ::cosmos::staking::v1beta1::Description* MsgCreateValidator::release_description() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::staking::v1beta1::Description* temp = _impl_.description_;
  _impl_.description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::staking::v1beta1::Description* MsgCreateValidator::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCreateValidator.description)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::staking::v1beta1::Description* temp = _impl_.description_;
  _impl_.description_ = nullptr;
  return temp;
}
inline ::cosmos::staking::v1beta1::Description* MsgCreateValidator::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.description_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::staking::v1beta1::Description>(GetArenaForAllocation());
    _impl_.description_ = p;
  }
  return _impl_.description_;
}
inline ::cosmos::staking::v1beta1::Description* MsgCreateValidator::mutable_description() {
  ::cosmos::staking::v1beta1::Description* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCreateValidator.description)
  return _msg;
}
inline void MsgCreateValidator::set_allocated_description(::cosmos::staking::v1beta1::Description* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description));
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_ = description;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.description)
}

// .cosmos.staking.v1beta1.CommissionRates commission = 2 [json_name = "commission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgCreateValidator::has_commission() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.commission_ != nullptr);
  return value;
}
inline const ::cosmos::staking::v1beta1::CommissionRates& MsgCreateValidator::_internal_commission() const {
  const ::cosmos::staking::v1beta1::CommissionRates* p = _impl_.commission_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::staking::v1beta1::CommissionRates&>(
      ::cosmos::staking::v1beta1::_CommissionRates_default_instance_);
}
inline const ::cosmos::staking::v1beta1::CommissionRates& MsgCreateValidator::commission() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCreateValidator.commission)
  return _internal_commission();
}
inline void MsgCreateValidator::unsafe_arena_set_allocated_commission(
    ::cosmos::staking::v1beta1::CommissionRates* commission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commission_);
  }
  _impl_.commission_ = commission;
  if (commission) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.commission)
}
inline ::cosmos::staking::v1beta1::CommissionRates* MsgCreateValidator::release_commission() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::staking::v1beta1::CommissionRates* temp = _impl_.commission_;
  _impl_.commission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::staking::v1beta1::CommissionRates* MsgCreateValidator::unsafe_arena_release_commission() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCreateValidator.commission)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cosmos::staking::v1beta1::CommissionRates* temp = _impl_.commission_;
  _impl_.commission_ = nullptr;
  return temp;
}
inline ::cosmos::staking::v1beta1::CommissionRates* MsgCreateValidator::_internal_mutable_commission() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.commission_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::staking::v1beta1::CommissionRates>(GetArenaForAllocation());
    _impl_.commission_ = p;
  }
  return _impl_.commission_;
}
inline ::cosmos::staking::v1beta1::CommissionRates* MsgCreateValidator::mutable_commission() {
  ::cosmos::staking::v1beta1::CommissionRates* _msg = _internal_mutable_commission();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCreateValidator.commission)
  return _msg;
}
inline void MsgCreateValidator::set_allocated_commission(::cosmos::staking::v1beta1::CommissionRates* commission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commission_);
  }
  if (commission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commission));
    if (message_arena != submessage_arena) {
      commission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commission, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.commission_ = commission;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.commission)
}

// string min_self_delegation = 3 [json_name = "minSelfDelegation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void MsgCreateValidator::clear_min_self_delegation() {
  _impl_.min_self_delegation_.ClearToEmpty();
}
inline const std::string& MsgCreateValidator::min_self_delegation() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCreateValidator.min_self_delegation)
  return _internal_min_self_delegation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateValidator::set_min_self_delegation(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.min_self_delegation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgCreateValidator.min_self_delegation)
}
inline std::string* MsgCreateValidator::mutable_min_self_delegation() {
  std::string* _s = _internal_mutable_min_self_delegation();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCreateValidator.min_self_delegation)
  return _s;
}
inline const std::string& MsgCreateValidator::_internal_min_self_delegation() const {
  return _impl_.min_self_delegation_.Get();
}
inline void MsgCreateValidator::_internal_set_min_self_delegation(const std::string& value) {
  ;


  _impl_.min_self_delegation_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateValidator::_internal_mutable_min_self_delegation() {
  ;
  return _impl_.min_self_delegation_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateValidator::release_min_self_delegation() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCreateValidator.min_self_delegation)
  return _impl_.min_self_delegation_.Release();
}
inline void MsgCreateValidator::set_allocated_min_self_delegation(std::string* value) {
  _impl_.min_self_delegation_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.min_self_delegation_.IsDefault()) {
          _impl_.min_self_delegation_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.min_self_delegation)
}

// string delegator_address = 4 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateValidator::clear_delegator_address() {
  _impl_.delegator_address_.ClearToEmpty();
}
inline const std::string& MsgCreateValidator::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCreateValidator.delegator_address)
  return _internal_delegator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateValidator::set_delegator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.delegator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgCreateValidator.delegator_address)
}
inline std::string* MsgCreateValidator::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCreateValidator.delegator_address)
  return _s;
}
inline const std::string& MsgCreateValidator::_internal_delegator_address() const {
  return _impl_.delegator_address_.Get();
}
inline void MsgCreateValidator::_internal_set_delegator_address(const std::string& value) {
  ;


  _impl_.delegator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateValidator::_internal_mutable_delegator_address() {
  ;
  return _impl_.delegator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateValidator::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCreateValidator.delegator_address)
  return _impl_.delegator_address_.Release();
}
inline void MsgCreateValidator::set_allocated_delegator_address(std::string* value) {
  _impl_.delegator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delegator_address_.IsDefault()) {
          _impl_.delegator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.delegator_address)
}

// string validator_address = 5 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateValidator::clear_validator_address() {
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& MsgCreateValidator::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCreateValidator.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateValidator::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgCreateValidator.validator_address)
}
inline std::string* MsgCreateValidator::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCreateValidator.validator_address)
  return _s;
}
inline const std::string& MsgCreateValidator::_internal_validator_address() const {
  return _impl_.validator_address_.Get();
}
inline void MsgCreateValidator::_internal_set_validator_address(const std::string& value) {
  ;


  _impl_.validator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateValidator::_internal_mutable_validator_address() {
  ;
  return _impl_.validator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateValidator::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCreateValidator.validator_address)
  return _impl_.validator_address_.Release();
}
inline void MsgCreateValidator::set_allocated_validator_address(std::string* value) {
  _impl_.validator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_address_.IsDefault()) {
          _impl_.validator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.validator_address)
}

// .google.protobuf.Any pubkey = 6 [json_name = "pubkey", (.cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
inline bool MsgCreateValidator::has_pubkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pubkey_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgCreateValidator::_internal_pubkey() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.pubkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgCreateValidator::pubkey() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCreateValidator.pubkey)
  return _internal_pubkey();
}
inline void MsgCreateValidator::unsafe_arena_set_allocated_pubkey(
    ::PROTOBUF_NAMESPACE_ID::Any* pubkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pubkey_);
  }
  _impl_.pubkey_ = pubkey;
  if (pubkey) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.pubkey)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateValidator::release_pubkey() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.pubkey_;
  _impl_.pubkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateValidator::unsafe_arena_release_pubkey() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCreateValidator.pubkey)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.pubkey_;
  _impl_.pubkey_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateValidator::_internal_mutable_pubkey() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.pubkey_ = p;
  }
  return _impl_.pubkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgCreateValidator::mutable_pubkey() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_pubkey();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCreateValidator.pubkey)
  return _msg;
}
inline void MsgCreateValidator::set_allocated_pubkey(::PROTOBUF_NAMESPACE_ID::Any* pubkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pubkey_);
  }
  if (pubkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pubkey));
    if (message_arena != submessage_arena) {
      pubkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pubkey, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pubkey_ = pubkey;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.pubkey)
}

// .cosmos.base.v1beta1.Coin value = 7 [json_name = "value", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgCreateValidator::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgCreateValidator::_internal_value() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgCreateValidator::value() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCreateValidator.value)
  return _internal_value();
}
inline void MsgCreateValidator::unsafe_arena_set_allocated_value(
    ::cosmos::base::v1beta1::Coin* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.value)
}
inline ::cosmos::base::v1beta1::Coin* MsgCreateValidator::release_value() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgCreateValidator::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCreateValidator.value)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgCreateValidator::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::cosmos::base::v1beta1::Coin* MsgCreateValidator::mutable_value() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCreateValidator.value)
  return _msg;
}
inline void MsgCreateValidator::set_allocated_value(::cosmos::base::v1beta1::Coin* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCreateValidator.value)
}

// -------------------------------------------------------------------

// MsgCreateValidatorResponse

// -------------------------------------------------------------------

// MsgEditValidator

// .cosmos.staking.v1beta1.Description description = 1 [json_name = "description", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgEditValidator::has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.description_ != nullptr);
  return value;
}
inline const ::cosmos::staking::v1beta1::Description& MsgEditValidator::_internal_description() const {
  const ::cosmos::staking::v1beta1::Description* p = _impl_.description_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::staking::v1beta1::Description&>(
      ::cosmos::staking::v1beta1::_Description_default_instance_);
}
inline const ::cosmos::staking::v1beta1::Description& MsgEditValidator::description() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgEditValidator.description)
  return _internal_description();
}
inline void MsgEditValidator::unsafe_arena_set_allocated_description(
    ::cosmos::staking::v1beta1::Description* description) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.description_);
  }
  _impl_.description_ = description;
  if (description) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgEditValidator.description)
}
inline ::cosmos::staking::v1beta1::Description* MsgEditValidator::release_description() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::staking::v1beta1::Description* temp = _impl_.description_;
  _impl_.description_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::staking::v1beta1::Description* MsgEditValidator::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgEditValidator.description)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::staking::v1beta1::Description* temp = _impl_.description_;
  _impl_.description_ = nullptr;
  return temp;
}
inline ::cosmos::staking::v1beta1::Description* MsgEditValidator::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.description_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::staking::v1beta1::Description>(GetArenaForAllocation());
    _impl_.description_ = p;
  }
  return _impl_.description_;
}
inline ::cosmos::staking::v1beta1::Description* MsgEditValidator::mutable_description() {
  ::cosmos::staking::v1beta1::Description* _msg = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgEditValidator.description)
  return _msg;
}
inline void MsgEditValidator::set_allocated_description(::cosmos::staking::v1beta1::Description* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description));
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_ = description;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgEditValidator.description)
}

// string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgEditValidator::clear_validator_address() {
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& MsgEditValidator::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgEditValidator.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgEditValidator::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgEditValidator.validator_address)
}
inline std::string* MsgEditValidator::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgEditValidator.validator_address)
  return _s;
}
inline const std::string& MsgEditValidator::_internal_validator_address() const {
  return _impl_.validator_address_.Get();
}
inline void MsgEditValidator::_internal_set_validator_address(const std::string& value) {
  ;


  _impl_.validator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgEditValidator::_internal_mutable_validator_address() {
  ;
  return _impl_.validator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgEditValidator::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgEditValidator.validator_address)
  return _impl_.validator_address_.Release();
}
inline void MsgEditValidator::set_allocated_validator_address(std::string* value) {
  _impl_.validator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_address_.IsDefault()) {
          _impl_.validator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgEditValidator.validator_address)
}

// string commission_rate = 3 [json_name = "commissionRate", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void MsgEditValidator::clear_commission_rate() {
  _impl_.commission_rate_.ClearToEmpty();
}
inline const std::string& MsgEditValidator::commission_rate() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgEditValidator.commission_rate)
  return _internal_commission_rate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgEditValidator::set_commission_rate(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.commission_rate_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgEditValidator.commission_rate)
}
inline std::string* MsgEditValidator::mutable_commission_rate() {
  std::string* _s = _internal_mutable_commission_rate();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgEditValidator.commission_rate)
  return _s;
}
inline const std::string& MsgEditValidator::_internal_commission_rate() const {
  return _impl_.commission_rate_.Get();
}
inline void MsgEditValidator::_internal_set_commission_rate(const std::string& value) {
  ;


  _impl_.commission_rate_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgEditValidator::_internal_mutable_commission_rate() {
  ;
  return _impl_.commission_rate_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgEditValidator::release_commission_rate() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgEditValidator.commission_rate)
  return _impl_.commission_rate_.Release();
}
inline void MsgEditValidator::set_allocated_commission_rate(std::string* value) {
  _impl_.commission_rate_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.commission_rate_.IsDefault()) {
          _impl_.commission_rate_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgEditValidator.commission_rate)
}

// string min_self_delegation = 4 [json_name = "minSelfDelegation", (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void MsgEditValidator::clear_min_self_delegation() {
  _impl_.min_self_delegation_.ClearToEmpty();
}
inline const std::string& MsgEditValidator::min_self_delegation() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgEditValidator.min_self_delegation)
  return _internal_min_self_delegation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgEditValidator::set_min_self_delegation(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.min_self_delegation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgEditValidator.min_self_delegation)
}
inline std::string* MsgEditValidator::mutable_min_self_delegation() {
  std::string* _s = _internal_mutable_min_self_delegation();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgEditValidator.min_self_delegation)
  return _s;
}
inline const std::string& MsgEditValidator::_internal_min_self_delegation() const {
  return _impl_.min_self_delegation_.Get();
}
inline void MsgEditValidator::_internal_set_min_self_delegation(const std::string& value) {
  ;


  _impl_.min_self_delegation_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgEditValidator::_internal_mutable_min_self_delegation() {
  ;
  return _impl_.min_self_delegation_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgEditValidator::release_min_self_delegation() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgEditValidator.min_self_delegation)
  return _impl_.min_self_delegation_.Release();
}
inline void MsgEditValidator::set_allocated_min_self_delegation(std::string* value) {
  _impl_.min_self_delegation_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.min_self_delegation_.IsDefault()) {
          _impl_.min_self_delegation_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgEditValidator.min_self_delegation)
}

// -------------------------------------------------------------------

// MsgEditValidatorResponse

// -------------------------------------------------------------------

// MsgDelegate

// string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgDelegate::clear_delegator_address() {
  _impl_.delegator_address_.ClearToEmpty();
}
inline const std::string& MsgDelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
  return _internal_delegator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDelegate::set_delegator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.delegator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
}
inline std::string* MsgDelegate::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
  return _s;
}
inline const std::string& MsgDelegate::_internal_delegator_address() const {
  return _impl_.delegator_address_.Get();
}
inline void MsgDelegate::_internal_set_delegator_address(const std::string& value) {
  ;


  _impl_.delegator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDelegate::_internal_mutable_delegator_address() {
  ;
  return _impl_.delegator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
  return _impl_.delegator_address_.Release();
}
inline void MsgDelegate::set_allocated_delegator_address(std::string* value) {
  _impl_.delegator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delegator_address_.IsDefault()) {
          _impl_.delegator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgDelegate.delegator_address)
}

// string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgDelegate::clear_validator_address() {
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& MsgDelegate::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgDelegate.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDelegate::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgDelegate.validator_address)
}
inline std::string* MsgDelegate::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgDelegate.validator_address)
  return _s;
}
inline const std::string& MsgDelegate::_internal_validator_address() const {
  return _impl_.validator_address_.Get();
}
inline void MsgDelegate::_internal_set_validator_address(const std::string& value) {
  ;


  _impl_.validator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDelegate::_internal_mutable_validator_address() {
  ;
  return _impl_.validator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDelegate::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgDelegate.validator_address)
  return _impl_.validator_address_.Release();
}
inline void MsgDelegate::set_allocated_validator_address(std::string* value) {
  _impl_.validator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_address_.IsDefault()) {
          _impl_.validator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgDelegate.validator_address)
}

// .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgDelegate::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgDelegate::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgDelegate::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgDelegate.amount)
  return _internal_amount();
}
inline void MsgDelegate::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgDelegate.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgDelegate::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgDelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgDelegate.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgDelegate::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgDelegate::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgDelegate.amount)
  return _msg;
}
inline void MsgDelegate::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgDelegate.amount)
}

// -------------------------------------------------------------------

// MsgDelegateResponse

// -------------------------------------------------------------------

// MsgBeginRedelegate

// string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgBeginRedelegate::clear_delegator_address() {
  _impl_.delegator_address_.ClearToEmpty();
}
inline const std::string& MsgBeginRedelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
  return _internal_delegator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgBeginRedelegate::set_delegator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.delegator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
}
inline std::string* MsgBeginRedelegate::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
  return _s;
}
inline const std::string& MsgBeginRedelegate::_internal_delegator_address() const {
  return _impl_.delegator_address_.Get();
}
inline void MsgBeginRedelegate::_internal_set_delegator_address(const std::string& value) {
  ;


  _impl_.delegator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::_internal_mutable_delegator_address() {
  ;
  return _impl_.delegator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
  return _impl_.delegator_address_.Release();
}
inline void MsgBeginRedelegate::set_allocated_delegator_address(std::string* value) {
  _impl_.delegator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delegator_address_.IsDefault()) {
          _impl_.delegator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.delegator_address)
}

// string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgBeginRedelegate::clear_validator_src_address() {
  _impl_.validator_src_address_.ClearToEmpty();
}
inline const std::string& MsgBeginRedelegate::validator_src_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
  return _internal_validator_src_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgBeginRedelegate::set_validator_src_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_src_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
}
inline std::string* MsgBeginRedelegate::mutable_validator_src_address() {
  std::string* _s = _internal_mutable_validator_src_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
  return _s;
}
inline const std::string& MsgBeginRedelegate::_internal_validator_src_address() const {
  return _impl_.validator_src_address_.Get();
}
inline void MsgBeginRedelegate::_internal_set_validator_src_address(const std::string& value) {
  ;


  _impl_.validator_src_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::_internal_mutable_validator_src_address() {
  ;
  return _impl_.validator_src_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::release_validator_src_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
  return _impl_.validator_src_address_.Release();
}
inline void MsgBeginRedelegate::set_allocated_validator_src_address(std::string* value) {
  _impl_.validator_src_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_src_address_.IsDefault()) {
          _impl_.validator_src_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_src_address)
}

// string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgBeginRedelegate::clear_validator_dst_address() {
  _impl_.validator_dst_address_.ClearToEmpty();
}
inline const std::string& MsgBeginRedelegate::validator_dst_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
  return _internal_validator_dst_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgBeginRedelegate::set_validator_dst_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_dst_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
}
inline std::string* MsgBeginRedelegate::mutable_validator_dst_address() {
  std::string* _s = _internal_mutable_validator_dst_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
  return _s;
}
inline const std::string& MsgBeginRedelegate::_internal_validator_dst_address() const {
  return _impl_.validator_dst_address_.Get();
}
inline void MsgBeginRedelegate::_internal_set_validator_dst_address(const std::string& value) {
  ;


  _impl_.validator_dst_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::_internal_mutable_validator_dst_address() {
  ;
  return _impl_.validator_dst_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgBeginRedelegate::release_validator_dst_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
  return _impl_.validator_dst_address_.Release();
}
inline void MsgBeginRedelegate::set_allocated_validator_dst_address(std::string* value) {
  _impl_.validator_dst_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_dst_address_.IsDefault()) {
          _impl_.validator_dst_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.validator_dst_address)
}

// .cosmos.base.v1beta1.Coin amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgBeginRedelegate::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgBeginRedelegate::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgBeginRedelegate::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
  return _internal_amount();
}
inline void MsgBeginRedelegate::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgBeginRedelegate::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgBeginRedelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgBeginRedelegate::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgBeginRedelegate::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
  return _msg;
}
inline void MsgBeginRedelegate::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegate.amount)
}

// -------------------------------------------------------------------

// MsgBeginRedelegateResponse

// .google.protobuf.Timestamp completion_time = 1 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool MsgBeginRedelegateResponse::has_completion_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.completion_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MsgBeginRedelegateResponse::_internal_completion_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.completion_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MsgBeginRedelegateResponse::completion_time() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.completion_time)
  return _internal_completion_time();
}
inline void MsgBeginRedelegateResponse::unsafe_arena_set_allocated_completion_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.completion_time_);
  }
  _impl_.completion_time_ = completion_time;
  if (completion_time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.completion_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MsgBeginRedelegateResponse::release_completion_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.completion_time_;
  _impl_.completion_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MsgBeginRedelegateResponse::unsafe_arena_release_completion_time() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.completion_time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.completion_time_;
  _impl_.completion_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MsgBeginRedelegateResponse::_internal_mutable_completion_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.completion_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.completion_time_ = p;
  }
  return _impl_.completion_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MsgBeginRedelegateResponse::mutable_completion_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_completion_time();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.completion_time)
  return _msg;
}
inline void MsgBeginRedelegateResponse::set_allocated_completion_time(::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.completion_time_);
  }
  if (completion_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(completion_time));
    if (message_arena != submessage_arena) {
      completion_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completion_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.completion_time_ = completion_time;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgBeginRedelegateResponse.completion_time)
}

// -------------------------------------------------------------------

// MsgUndelegate

// string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUndelegate::clear_delegator_address() {
  _impl_.delegator_address_.ClearToEmpty();
}
inline const std::string& MsgUndelegate::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
  return _internal_delegator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUndelegate::set_delegator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.delegator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
}
inline std::string* MsgUndelegate::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
  return _s;
}
inline const std::string& MsgUndelegate::_internal_delegator_address() const {
  return _impl_.delegator_address_.Get();
}
inline void MsgUndelegate::_internal_set_delegator_address(const std::string& value) {
  ;


  _impl_.delegator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUndelegate::_internal_mutable_delegator_address() {
  ;
  return _impl_.delegator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUndelegate::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
  return _impl_.delegator_address_.Release();
}
inline void MsgUndelegate::set_allocated_delegator_address(std::string* value) {
  _impl_.delegator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delegator_address_.IsDefault()) {
          _impl_.delegator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUndelegate.delegator_address)
}

// string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUndelegate::clear_validator_address() {
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& MsgUndelegate::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUndelegate::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
}
inline std::string* MsgUndelegate::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
  return _s;
}
inline const std::string& MsgUndelegate::_internal_validator_address() const {
  return _impl_.validator_address_.Get();
}
inline void MsgUndelegate::_internal_set_validator_address(const std::string& value) {
  ;


  _impl_.validator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUndelegate::_internal_mutable_validator_address() {
  ;
  return _impl_.validator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUndelegate::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
  return _impl_.validator_address_.Release();
}
inline void MsgUndelegate::set_allocated_validator_address(std::string* value) {
  _impl_.validator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_address_.IsDefault()) {
          _impl_.validator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUndelegate.validator_address)
}

// .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgUndelegate::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgUndelegate::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgUndelegate::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUndelegate.amount)
  return _internal_amount();
}
inline void MsgUndelegate::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgUndelegate.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgUndelegate::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgUndelegate::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUndelegate.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgUndelegate::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgUndelegate::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUndelegate.amount)
  return _msg;
}
inline void MsgUndelegate::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUndelegate.amount)
}

// -------------------------------------------------------------------

// MsgUndelegateResponse

// .google.protobuf.Timestamp completion_time = 1 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
inline bool MsgUndelegateResponse::has_completion_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.completion_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MsgUndelegateResponse::_internal_completion_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.completion_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MsgUndelegateResponse::completion_time() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUndelegateResponse.completion_time)
  return _internal_completion_time();
}
inline void MsgUndelegateResponse::unsafe_arena_set_allocated_completion_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.completion_time_);
  }
  _impl_.completion_time_ = completion_time;
  if (completion_time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgUndelegateResponse.completion_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MsgUndelegateResponse::release_completion_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.completion_time_;
  _impl_.completion_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MsgUndelegateResponse::unsafe_arena_release_completion_time() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUndelegateResponse.completion_time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.completion_time_;
  _impl_.completion_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MsgUndelegateResponse::_internal_mutable_completion_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.completion_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.completion_time_ = p;
  }
  return _impl_.completion_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MsgUndelegateResponse::mutable_completion_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_completion_time();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUndelegateResponse.completion_time)
  return _msg;
}
inline void MsgUndelegateResponse::set_allocated_completion_time(::PROTOBUF_NAMESPACE_ID::Timestamp* completion_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.completion_time_);
  }
  if (completion_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(completion_time));
    if (message_arena != submessage_arena) {
      completion_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completion_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.completion_time_ = completion_time;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUndelegateResponse.completion_time)
}

// -------------------------------------------------------------------

// MsgCancelUnbondingDelegation

// string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCancelUnbondingDelegation::clear_delegator_address() {
  _impl_.delegator_address_.ClearToEmpty();
}
inline const std::string& MsgCancelUnbondingDelegation::delegator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.delegator_address)
  return _internal_delegator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCancelUnbondingDelegation::set_delegator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.delegator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.delegator_address)
}
inline std::string* MsgCancelUnbondingDelegation::mutable_delegator_address() {
  std::string* _s = _internal_mutable_delegator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.delegator_address)
  return _s;
}
inline const std::string& MsgCancelUnbondingDelegation::_internal_delegator_address() const {
  return _impl_.delegator_address_.Get();
}
inline void MsgCancelUnbondingDelegation::_internal_set_delegator_address(const std::string& value) {
  ;


  _impl_.delegator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCancelUnbondingDelegation::_internal_mutable_delegator_address() {
  ;
  return _impl_.delegator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCancelUnbondingDelegation::release_delegator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.delegator_address)
  return _impl_.delegator_address_.Release();
}
inline void MsgCancelUnbondingDelegation::set_allocated_delegator_address(std::string* value) {
  _impl_.delegator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delegator_address_.IsDefault()) {
          _impl_.delegator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.delegator_address)
}

// string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCancelUnbondingDelegation::clear_validator_address() {
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& MsgCancelUnbondingDelegation::validator_address() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCancelUnbondingDelegation::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.validator_address)
}
inline std::string* MsgCancelUnbondingDelegation::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.validator_address)
  return _s;
}
inline const std::string& MsgCancelUnbondingDelegation::_internal_validator_address() const {
  return _impl_.validator_address_.Get();
}
inline void MsgCancelUnbondingDelegation::_internal_set_validator_address(const std::string& value) {
  ;


  _impl_.validator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCancelUnbondingDelegation::_internal_mutable_validator_address() {
  ;
  return _impl_.validator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCancelUnbondingDelegation::release_validator_address() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.validator_address)
  return _impl_.validator_address_.Release();
}
inline void MsgCancelUnbondingDelegation::set_allocated_validator_address(std::string* value) {
  _impl_.validator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_address_.IsDefault()) {
          _impl_.validator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.validator_address)
}

// .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgCancelUnbondingDelegation::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgCancelUnbondingDelegation::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgCancelUnbondingDelegation::amount() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.amount)
  return _internal_amount();
}
inline void MsgCancelUnbondingDelegation::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.amount)
}
inline ::cosmos::base::v1beta1::Coin* MsgCancelUnbondingDelegation::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgCancelUnbondingDelegation::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgCancelUnbondingDelegation::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* MsgCancelUnbondingDelegation::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.amount)
  return _msg;
}
inline void MsgCancelUnbondingDelegation::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.amount)
}

// int64 creation_height = 4 [json_name = "creationHeight"];
inline void MsgCancelUnbondingDelegation::clear_creation_height() {
  _impl_.creation_height_ = ::int64_t{0};
}
inline ::int64_t MsgCancelUnbondingDelegation::creation_height() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.creation_height)
  return _internal_creation_height();
}
inline void MsgCancelUnbondingDelegation::set_creation_height(::int64_t value) {
  _internal_set_creation_height(value);
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgCancelUnbondingDelegation.creation_height)
}
inline ::int64_t MsgCancelUnbondingDelegation::_internal_creation_height() const {
  return _impl_.creation_height_;
}
inline void MsgCancelUnbondingDelegation::_internal_set_creation_height(::int64_t value) {
  ;
  _impl_.creation_height_ = value;
}

// -------------------------------------------------------------------

// MsgCancelUnbondingDelegationResponse

// -------------------------------------------------------------------

// MsgUpdateParams

// string authority = 1 [json_name = "authority", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateParams::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateParams::authority() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUpdateParams.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateParams::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.staking.v1beta1.MsgUpdateParams.authority)
}
inline std::string* MsgUpdateParams::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUpdateParams.authority)
  return _s;
}
inline const std::string& MsgUpdateParams::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateParams::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::release_authority() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUpdateParams.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateParams::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUpdateParams.authority)
}

// .cosmos.staking.v1beta1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool MsgUpdateParams::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::cosmos::staking::v1beta1::Params& MsgUpdateParams::_internal_params() const {
  const ::cosmos::staking::v1beta1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::staking::v1beta1::Params&>(
      ::cosmos::staking::v1beta1::_Params_default_instance_);
}
inline const ::cosmos::staking::v1beta1::Params& MsgUpdateParams::params() const {
  // @@protoc_insertion_point(field_get:cosmos.staking.v1beta1.MsgUpdateParams.params)
  return _internal_params();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_params(
    ::cosmos::staking::v1beta1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.staking.v1beta1.MsgUpdateParams.params)
}
inline ::cosmos::staking::v1beta1::Params* MsgUpdateParams::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::staking::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::staking::v1beta1::Params* MsgUpdateParams::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:cosmos.staking.v1beta1.MsgUpdateParams.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::staking::v1beta1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::cosmos::staking::v1beta1::Params* MsgUpdateParams::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::staking::v1beta1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::cosmos::staking::v1beta1::Params* MsgUpdateParams::mutable_params() {
  ::cosmos::staking::v1beta1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:cosmos.staking.v1beta1.MsgUpdateParams.params)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_params(::cosmos::staking::v1beta1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:cosmos.staking.v1beta1.MsgUpdateParams.params)
}

// -------------------------------------------------------------------

// MsgUpdateParamsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fstaking_2fv1beta1_2ftx_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/staking/v1beta1/tx.proto
#ifndef GRPC_cosmos_2fstaking_2fv1beta1_2ftx_2eproto__INCLUDED
#define GRPC_cosmos_2fstaking_2fv1beta1_2ftx_2eproto__INCLUDED

#include "cosmos/staking/v1beta1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace staking {
namespace v1beta1 {

// Msg defines the staking Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.staking.v1beta1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CreateValidator defines a method for creating a new validator.
    virtual ::grpc::Status CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>> AsyncCreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>>(AsyncCreateValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>> PrepareAsyncCreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>>(PrepareAsyncCreateValidatorRaw(context, request, cq));
    }
    // EditValidator defines a method for editing an existing validator.
    virtual ::grpc::Status EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>> AsyncEditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>>(AsyncEditValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>> PrepareAsyncEditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>>(PrepareAsyncEditValidatorRaw(context, request, cq));
    }
    // Delegate defines a method for performing a delegation of coins
    // from a delegator to a validator.
    virtual ::grpc::Status Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgDelegateResponse>> AsyncDelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgDelegateResponse>>(AsyncDelegateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgDelegateResponse>> PrepareAsyncDelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgDelegateResponse>>(PrepareAsyncDelegateRaw(context, request, cq));
    }
    // BeginRedelegate defines a method for performing a redelegation
    // of coins from a delegator and source validator to a destination validator.
    virtual ::grpc::Status BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>> AsyncBeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>>(AsyncBeginRedelegateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>> PrepareAsyncBeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>>(PrepareAsyncBeginRedelegateRaw(context, request, cq));
    }
    // Undelegate defines a method for performing an undelegation from a
    // delegate and a validator.
    virtual ::grpc::Status Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUndelegateResponse>> AsyncUndelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUndelegateResponse>>(AsyncUndelegateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUndelegateResponse>> PrepareAsyncUndelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUndelegateResponse>>(PrepareAsyncUndelegateRaw(context, request, cq));
    }
    // CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
    // and delegate back to previous validator.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>> AsyncCancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>>(AsyncCancelUnbondingDelegationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>> PrepareAsyncCancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>>(PrepareAsyncCancelUnbondingDelegationRaw(context, request, cq));
    }
    // UpdateParams defines an operation for updating the x/staking module
    // parameters.
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // CreateValidator defines a method for creating a new validator.
      virtual void CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // EditValidator defines a method for editing an existing validator.
      virtual void EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delegate defines a method for performing a delegation of coins
      // from a delegator to a validator.
      virtual void Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // BeginRedelegate defines a method for performing a redelegation
      // of coins from a delegator and source validator to a destination validator.
      virtual void BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Undelegate defines a method for performing an undelegation from a
      // delegate and a validator.
      virtual void Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
      // and delegate back to previous validator.
      //
      // Since: cosmos-sdk 0.46
      virtual void CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateParams defines an operation for updating the x/staking module
      // parameters.
      // Since: cosmos-sdk 0.47
      virtual void UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* AsyncCreateValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* PrepareAsyncCreateValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* AsyncEditValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* PrepareAsyncEditValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgDelegateResponse>* AsyncDelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgDelegateResponse>* PrepareAsyncDelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* AsyncBeginRedelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* PrepareAsyncBeginRedelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUndelegateResponse>* AsyncUndelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUndelegateResponse>* PrepareAsyncUndelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* AsyncCancelUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* PrepareAsyncCancelUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>> AsyncCreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>>(AsyncCreateValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>> PrepareAsyncCreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>>(PrepareAsyncCreateValidatorRaw(context, request, cq));
    }
    ::grpc::Status EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>> AsyncEditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>>(AsyncEditValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>> PrepareAsyncEditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>>(PrepareAsyncEditValidatorRaw(context, request, cq));
    }
    ::grpc::Status Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgDelegateResponse>> AsyncDelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgDelegateResponse>>(AsyncDelegateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgDelegateResponse>> PrepareAsyncDelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgDelegateResponse>>(PrepareAsyncDelegateRaw(context, request, cq));
    }
    ::grpc::Status BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>> AsyncBeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>>(AsyncBeginRedelegateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>> PrepareAsyncBeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>>(PrepareAsyncBeginRedelegateRaw(context, request, cq));
    }
    ::grpc::Status Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUndelegateResponse>> AsyncUndelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUndelegateResponse>>(AsyncUndelegateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUndelegateResponse>> PrepareAsyncUndelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUndelegateResponse>>(PrepareAsyncUndelegateRaw(context, request, cq));
    }
    ::grpc::Status CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>> AsyncCancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>>(AsyncCancelUnbondingDelegationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>> PrepareAsyncCancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>>(PrepareAsyncCancelUnbondingDelegationRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response, std::function<void(::grpc::Status)>) override;
      void EditValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response, std::function<void(::grpc::Status)>) override;
      void Delegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response, std::function<void(::grpc::Status)>) override;
      void BeginRedelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response, std::function<void(::grpc::Status)>) override;
      void Undelegate(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* AsyncCreateValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* PrepareAsyncCreateValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* AsyncEditValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* PrepareAsyncEditValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgDelegateResponse>* AsyncDelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgDelegateResponse>* PrepareAsyncDelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgDelegate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* AsyncBeginRedelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* PrepareAsyncBeginRedelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUndelegateResponse>* AsyncUndelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUndelegateResponse>* PrepareAsyncUndelegateRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* AsyncCancelUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* PrepareAsyncCancelUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateValidator_;
    const ::grpc::internal::RpcMethod rpcmethod_EditValidator_;
    const ::grpc::internal::RpcMethod rpcmethod_Delegate_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginRedelegate_;
    const ::grpc::internal::RpcMethod rpcmethod_Undelegate_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelUnbondingDelegation_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CreateValidator defines a method for creating a new validator.
    virtual ::grpc::Status CreateValidator(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response);
    // EditValidator defines a method for editing an existing validator.
    virtual ::grpc::Status EditValidator(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response);
    // Delegate defines a method for performing a delegation of coins
    // from a delegator to a validator.
    virtual ::grpc::Status Delegate(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response);
    // BeginRedelegate defines a method for performing a redelegation
    // of coins from a delegator and source validator to a destination validator.
    virtual ::grpc::Status BeginRedelegate(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response);
    // Undelegate defines a method for performing an undelegation from a
    // delegate and a validator.
    virtual ::grpc::Status Undelegate(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response);
    // CancelUnbondingDelegation defines a method for performing canceling the unbonding delegation
    // and delegate back to previous validator.
    //
    // Since: cosmos-sdk 0.46
    virtual ::grpc::Status CancelUnbondingDelegation(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response);
    // UpdateParams defines an operation for updating the x/staking module
    // parameters.
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateValidator() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCreateValidator* /*request*/, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateValidator(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditValidator() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EditValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgEditValidator* /*request*/, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditValidator(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::MsgEditValidator* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delegate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Delegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgDelegate* /*request*/, ::cosmos::staking::v1beta1::MsgDelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegate(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::MsgDelegate* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::MsgDelegateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginRedelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BeginRedelegate() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BeginRedelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginRedelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* /*request*/, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginRedelegate(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Undelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Undelegate() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Undelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Undelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUndelegate* /*request*/, ::cosmos::staking::v1beta1::MsgUndelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndelegate(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::MsgUndelegate* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::MsgUndelegateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelUnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelUnbondingDelegation() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CancelUnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* /*request*/, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelUnbondingDelegation(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateValidator<WithAsyncMethod_EditValidator<WithAsyncMethod_Delegate<WithAsyncMethod_BeginRedelegate<WithAsyncMethod_Undelegate<WithAsyncMethod_CancelUnbondingDelegation<WithAsyncMethod_UpdateParams<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateValidator() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgCreateValidator, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::MsgCreateValidator* request, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* response) { return this->CreateValidator(context, request, response); }));}
    void SetMessageAllocatorFor_CreateValidator(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::MsgCreateValidator, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgCreateValidator, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCreateValidator* /*request*/, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCreateValidator* /*request*/, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditValidator() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgEditValidator, ::cosmos::staking::v1beta1::MsgEditValidatorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::MsgEditValidator* request, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* response) { return this->EditValidator(context, request, response); }));}
    void SetMessageAllocatorFor_EditValidator(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::MsgEditValidator, ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgEditValidator, ::cosmos::staking::v1beta1::MsgEditValidatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgEditValidator* /*request*/, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgEditValidator* /*request*/, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delegate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgDelegate, ::cosmos::staking::v1beta1::MsgDelegateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::MsgDelegate* request, ::cosmos::staking::v1beta1::MsgDelegateResponse* response) { return this->Delegate(context, request, response); }));}
    void SetMessageAllocatorFor_Delegate(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::MsgDelegate, ::cosmos::staking::v1beta1::MsgDelegateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgDelegate, ::cosmos::staking::v1beta1::MsgDelegateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgDelegate* /*request*/, ::cosmos::staking::v1beta1::MsgDelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delegate(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgDelegate* /*request*/, ::cosmos::staking::v1beta1::MsgDelegateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BeginRedelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BeginRedelegate() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* request, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* response) { return this->BeginRedelegate(context, request, response); }));}
    void SetMessageAllocatorFor_BeginRedelegate(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BeginRedelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginRedelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* /*request*/, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginRedelegate(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* /*request*/, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Undelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Undelegate() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgUndelegate, ::cosmos::staking::v1beta1::MsgUndelegateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::MsgUndelegate* request, ::cosmos::staking::v1beta1::MsgUndelegateResponse* response) { return this->Undelegate(context, request, response); }));}
    void SetMessageAllocatorFor_Undelegate(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::MsgUndelegate, ::cosmos::staking::v1beta1::MsgUndelegateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgUndelegate, ::cosmos::staking::v1beta1::MsgUndelegateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Undelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Undelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUndelegate* /*request*/, ::cosmos::staking::v1beta1::MsgUndelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Undelegate(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUndelegate* /*request*/, ::cosmos::staking::v1beta1::MsgUndelegateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelUnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelUnbondingDelegation() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* request, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* response) { return this->CancelUnbondingDelegation(context, request, response); }));}
    void SetMessageAllocatorFor_CancelUnbondingDelegation(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelUnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* /*request*/, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelUnbondingDelegation(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* /*request*/, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgUpdateParams, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::MsgUpdateParams* request, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::MsgUpdateParams, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::MsgUpdateParams, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateValidator<WithCallbackMethod_EditValidator<WithCallbackMethod_Delegate<WithCallbackMethod_BeginRedelegate<WithCallbackMethod_Undelegate<WithCallbackMethod_CancelUnbondingDelegation<WithCallbackMethod_UpdateParams<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateValidator() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCreateValidator* /*request*/, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditValidator() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EditValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgEditValidator* /*request*/, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delegate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Delegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgDelegate* /*request*/, ::cosmos::staking::v1beta1::MsgDelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginRedelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BeginRedelegate() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BeginRedelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginRedelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* /*request*/, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Undelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Undelegate() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Undelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Undelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUndelegate* /*request*/, ::cosmos::staking::v1beta1::MsgUndelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelUnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelUnbondingDelegation() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CancelUnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* /*request*/, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateValidator() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCreateValidator* /*request*/, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateValidator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditValidator() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EditValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgEditValidator* /*request*/, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditValidator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delegate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Delegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgDelegate* /*request*/, ::cosmos::staking::v1beta1::MsgDelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginRedelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BeginRedelegate() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BeginRedelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginRedelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* /*request*/, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginRedelegate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Undelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Undelegate() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Undelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Undelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUndelegate* /*request*/, ::cosmos::staking::v1beta1::MsgUndelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndelegate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelUnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelUnbondingDelegation() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CancelUnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* /*request*/, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelUnbondingDelegation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateValidator() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateValidator(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCreateValidator* /*request*/, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditValidator() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditValidator(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgEditValidator* /*request*/, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delegate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delegate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgDelegate* /*request*/, ::cosmos::staking::v1beta1::MsgDelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delegate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BeginRedelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BeginRedelegate() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BeginRedelegate(context, request, response); }));
    }
    ~WithRawCallbackMethod_BeginRedelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginRedelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* /*request*/, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginRedelegate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Undelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Undelegate() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Undelegate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Undelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Undelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUndelegate* /*request*/, ::cosmos::staking::v1beta1::MsgUndelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Undelegate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelUnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelUnbondingDelegation() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelUnbondingDelegation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelUnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelUnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* /*request*/, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelUnbondingDelegation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateValidator() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::MsgCreateValidator, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::MsgCreateValidator, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* streamer) {
                       return this->StreamedCreateValidator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCreateValidator* /*request*/, ::cosmos::staking::v1beta1::MsgCreateValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateValidator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::MsgCreateValidator,::cosmos::staking::v1beta1::MsgCreateValidatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditValidator() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::MsgEditValidator, ::cosmos::staking::v1beta1::MsgEditValidatorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::MsgEditValidator, ::cosmos::staking::v1beta1::MsgEditValidatorResponse>* streamer) {
                       return this->StreamedEditValidator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgEditValidator* /*request*/, ::cosmos::staking::v1beta1::MsgEditValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditValidator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::MsgEditValidator,::cosmos::staking::v1beta1::MsgEditValidatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delegate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::MsgDelegate, ::cosmos::staking::v1beta1::MsgDelegateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::MsgDelegate, ::cosmos::staking::v1beta1::MsgDelegateResponse>* streamer) {
                       return this->StreamedDelegate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgDelegate* /*request*/, ::cosmos::staking::v1beta1::MsgDelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::MsgDelegate,::cosmos::staking::v1beta1::MsgDelegateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginRedelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BeginRedelegate() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::MsgBeginRedelegate, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* streamer) {
                       return this->StreamedBeginRedelegate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BeginRedelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginRedelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgBeginRedelegate* /*request*/, ::cosmos::staking::v1beta1::MsgBeginRedelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginRedelegate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::MsgBeginRedelegate,::cosmos::staking::v1beta1::MsgBeginRedelegateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Undelegate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Undelegate() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::MsgUndelegate, ::cosmos::staking::v1beta1::MsgUndelegateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::MsgUndelegate, ::cosmos::staking::v1beta1::MsgUndelegateResponse>* streamer) {
                       return this->StreamedUndelegate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Undelegate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Undelegate(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUndelegate* /*request*/, ::cosmos::staking::v1beta1::MsgUndelegateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUndelegate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::MsgUndelegate,::cosmos::staking::v1beta1::MsgUndelegateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelUnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelUnbondingDelegation() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* streamer) {
                       return this->StreamedCancelUnbondingDelegation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelUnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelUnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation* /*request*/, ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelUnbondingDelegation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::MsgCancelUnbondingDelegation,::cosmos::staking::v1beta1::MsgCancelUnbondingDelegationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::MsgUpdateParams, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::MsgUpdateParams, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::MsgUpdateParams* /*request*/, ::cosmos::staking::v1beta1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::MsgUpdateParams,::cosmos::staking::v1beta1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateValidator<WithStreamedUnaryMethod_EditValidator<WithStreamedUnaryMethod_Delegate<WithStreamedUnaryMethod_BeginRedelegate<WithStreamedUnaryMethod_Undelegate<WithStreamedUnaryMethod_CancelUnbondingDelegation<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateValidator<WithStreamedUnaryMethod_EditValidator<WithStreamedUnaryMethod_Delegate<WithStreamedUnaryMethod_BeginRedelegate<WithStreamedUnaryMethod_Undelegate<WithStreamedUnaryMethod_CancelUnbondingDelegation<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos


#endif  // GRPC_cosmos_2fstaking_2fv1beta1_2ftx_2eproto__INCLUDED

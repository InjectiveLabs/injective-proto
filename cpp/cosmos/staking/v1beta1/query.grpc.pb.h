// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/staking/v1beta1/query.proto
#ifndef GRPC_cosmos_2fstaking_2fv1beta1_2fquery_2eproto__INCLUDED
#define GRPC_cosmos_2fstaking_2fv1beta1_2fquery_2eproto__INCLUDED

#include "cosmos/staking/v1beta1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace staking {
namespace v1beta1 {

// Query defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.staking.v1beta1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Validators queries all validators that match the given status.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorsResponse>> AsyncValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorsResponse>>(AsyncValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorsResponse>> PrepareAsyncValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorsResponse>>(PrepareAsyncValidatorsRaw(context, request, cq));
    }
    // Validator queries validator info for given validator address.
    virtual ::grpc::Status Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorResponse>> AsyncValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorResponse>>(AsyncValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorResponse>> PrepareAsyncValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorResponse>>(PrepareAsyncValidatorRaw(context, request, cq));
    }
    // ValidatorDelegations queries delegate info for given validator.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>> AsyncValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>>(AsyncValidatorDelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>> PrepareAsyncValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>>(PrepareAsyncValidatorDelegationsRaw(context, request, cq));
    }
    // ValidatorUnbondingDelegations queries unbonding delegations of a validator.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>> AsyncValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>>(AsyncValidatorUnbondingDelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>> PrepareAsyncValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>>(PrepareAsyncValidatorUnbondingDelegationsRaw(context, request, cq));
    }
    // Delegation queries delegate info for given validator delegator pair.
    virtual ::grpc::Status Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegationResponse>> AsyncDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegationResponse>>(AsyncDelegationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegationResponse>> PrepareAsyncDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegationResponse>>(PrepareAsyncDelegationRaw(context, request, cq));
    }
    // UnbondingDelegation queries unbonding info for given validator delegator
    // pair.
    virtual ::grpc::Status UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>> AsyncUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>>(AsyncUnbondingDelegationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>> PrepareAsyncUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>>(PrepareAsyncUnbondingDelegationRaw(context, request, cq));
    }
    // DelegatorDelegations queries all delegations of a given delegator address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>> AsyncDelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>>(AsyncDelegatorDelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>> PrepareAsyncDelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>>(PrepareAsyncDelegatorDelegationsRaw(context, request, cq));
    }
    // DelegatorUnbondingDelegations queries all unbonding delegations of a given
    // delegator address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>> AsyncDelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>>(AsyncDelegatorUnbondingDelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>> PrepareAsyncDelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>>(PrepareAsyncDelegatorUnbondingDelegationsRaw(context, request, cq));
    }
    // Redelegations queries redelegations of given address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>> AsyncRedelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>>(AsyncRedelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>> PrepareAsyncRedelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>>(PrepareAsyncRedelegationsRaw(context, request, cq));
    }
    // DelegatorValidators queries all validators info for given delegator
    // address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>> AsyncDelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>>(AsyncDelegatorValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>> PrepareAsyncDelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>>(PrepareAsyncDelegatorValidatorsRaw(context, request, cq));
    }
    // DelegatorValidator queries validator info for given delegator validator
    // pair.
    virtual ::grpc::Status DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>> AsyncDelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>>(AsyncDelegatorValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>> PrepareAsyncDelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>>(PrepareAsyncDelegatorValidatorRaw(context, request, cq));
    }
    // HistoricalInfo queries the historical info for given height.
    virtual ::grpc::Status HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>> AsyncHistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>>(AsyncHistoricalInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>> PrepareAsyncHistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>>(PrepareAsyncHistoricalInfoRaw(context, request, cq));
    }
    // Pool queries the pool info.
    virtual ::grpc::Status Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::cosmos::staking::v1beta1::QueryPoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryPoolResponse>> AsyncPool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryPoolResponse>>(AsyncPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryPoolResponse>> PrepareAsyncPool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryPoolResponse>>(PrepareAsyncPoolRaw(context, request, cq));
    }
    // Parameters queries the staking parameters.
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::cosmos::staking::v1beta1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Validators queries all validators that match the given status.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Validator queries validator info for given validator address.
      virtual void Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ValidatorDelegations queries delegate info for given validator.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ValidatorUnbondingDelegations queries unbonding delegations of a validator.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delegation queries delegate info for given validator delegator pair.
      virtual void Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UnbondingDelegation queries unbonding info for given validator delegator
      // pair.
      virtual void UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DelegatorDelegations queries all delegations of a given delegator address.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DelegatorUnbondingDelegations queries all unbonding delegations of a given
      // delegator address.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Redelegations queries redelegations of given address.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DelegatorValidators queries all validators info for given delegator
      // address.
      //
      // When called from another module, this query might consume a high amount of
      // gas if the pagination field is incorrectly set.
      virtual void DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DelegatorValidator queries validator info for given delegator validator
      // pair.
      virtual void DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // HistoricalInfo queries the historical info for given height.
      virtual void HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Pool queries the pool info.
      virtual void Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Parameters queries the staking parameters.
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorsResponse>* AsyncValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorsResponse>* PrepareAsyncValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorResponse>* AsyncValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorResponse>* PrepareAsyncValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* AsyncValidatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* PrepareAsyncValidatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* AsyncValidatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* PrepareAsyncValidatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegationResponse>* AsyncDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegationResponse>* PrepareAsyncDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* AsyncUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* PrepareAsyncUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* AsyncDelegatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* PrepareAsyncDelegatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* AsyncDelegatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* PrepareAsyncDelegatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* AsyncRedelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* PrepareAsyncRedelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* AsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* PrepareAsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* AsyncDelegatorValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* PrepareAsyncDelegatorValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* AsyncHistoricalInfoRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* PrepareAsyncHistoricalInfoRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryPoolResponse>* AsyncPoolRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryPoolResponse>* PrepareAsyncPoolRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::staking::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorsResponse>> AsyncValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorsResponse>>(AsyncValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorsResponse>> PrepareAsyncValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorsResponse>>(PrepareAsyncValidatorsRaw(context, request, cq));
    }
    ::grpc::Status Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorResponse>> AsyncValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorResponse>>(AsyncValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorResponse>> PrepareAsyncValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorResponse>>(PrepareAsyncValidatorRaw(context, request, cq));
    }
    ::grpc::Status ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>> AsyncValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>>(AsyncValidatorDelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>> PrepareAsyncValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>>(PrepareAsyncValidatorDelegationsRaw(context, request, cq));
    }
    ::grpc::Status ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>> AsyncValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>>(AsyncValidatorUnbondingDelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>> PrepareAsyncValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>>(PrepareAsyncValidatorUnbondingDelegationsRaw(context, request, cq));
    }
    ::grpc::Status Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegationResponse>> AsyncDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegationResponse>>(AsyncDelegationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegationResponse>> PrepareAsyncDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegationResponse>>(PrepareAsyncDelegationRaw(context, request, cq));
    }
    ::grpc::Status UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>> AsyncUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>>(AsyncUnbondingDelegationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>> PrepareAsyncUnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>>(PrepareAsyncUnbondingDelegationRaw(context, request, cq));
    }
    ::grpc::Status DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>> AsyncDelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>>(AsyncDelegatorDelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>> PrepareAsyncDelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>>(PrepareAsyncDelegatorDelegationsRaw(context, request, cq));
    }
    ::grpc::Status DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>> AsyncDelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>>(AsyncDelegatorUnbondingDelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>> PrepareAsyncDelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>>(PrepareAsyncDelegatorUnbondingDelegationsRaw(context, request, cq));
    }
    ::grpc::Status Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>> AsyncRedelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>>(AsyncRedelegationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>> PrepareAsyncRedelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>>(PrepareAsyncRedelegationsRaw(context, request, cq));
    }
    ::grpc::Status DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>> AsyncDelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>>(AsyncDelegatorValidatorsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>> PrepareAsyncDelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>>(PrepareAsyncDelegatorValidatorsRaw(context, request, cq));
    }
    ::grpc::Status DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>> AsyncDelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>>(AsyncDelegatorValidatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>> PrepareAsyncDelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>>(PrepareAsyncDelegatorValidatorRaw(context, request, cq));
    }
    ::grpc::Status HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>> AsyncHistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>>(AsyncHistoricalInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>> PrepareAsyncHistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>>(PrepareAsyncHistoricalInfoRaw(context, request, cq));
    }
    ::grpc::Status Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::cosmos::staking::v1beta1::QueryPoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryPoolResponse>> AsyncPool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryPoolResponse>>(AsyncPoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryPoolResponse>> PrepareAsyncPool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryPoolResponse>>(PrepareAsyncPoolRaw(context, request, cq));
    }
    ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::cosmos::staking::v1beta1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response, std::function<void(::grpc::Status)>) override;
      void Validators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response, std::function<void(::grpc::Status)>) override;
      void Validator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response, std::function<void(::grpc::Status)>) override;
      void Delegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response, std::function<void(::grpc::Status)>) override;
      void UnbondingDelegation(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response, std::function<void(::grpc::Status)>) override;
      void DelegatorDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response, std::function<void(::grpc::Status)>) override;
      void DelegatorUnbondingDelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response, std::function<void(::grpc::Status)>) override;
      void Redelegations(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response, std::function<void(::grpc::Status)>) override;
      void DelegatorValidators(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response, std::function<void(::grpc::Status)>) override;
      void DelegatorValidator(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void HistoricalInfo(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response, std::function<void(::grpc::Status)>) override;
      void Pool(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorsResponse>* AsyncValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorsResponse>* PrepareAsyncValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorResponse>* AsyncValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorResponse>* PrepareAsyncValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* AsyncValidatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* PrepareAsyncValidatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* AsyncValidatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* PrepareAsyncValidatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegationResponse>* AsyncDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegationResponse>* PrepareAsyncDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* AsyncUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* PrepareAsyncUnbondingDelegationRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* AsyncDelegatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* PrepareAsyncDelegatorDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* AsyncDelegatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* PrepareAsyncDelegatorUnbondingDelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* AsyncRedelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* PrepareAsyncRedelegationsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* AsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* PrepareAsyncDelegatorValidatorsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* AsyncDelegatorValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* PrepareAsyncDelegatorValidatorRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* AsyncHistoricalInfoRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* PrepareAsyncHistoricalInfoRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryPoolResponse>* AsyncPoolRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryPoolResponse>* PrepareAsyncPoolRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::staking::v1beta1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Validators_;
    const ::grpc::internal::RpcMethod rpcmethod_Validator_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidatorDelegations_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidatorUnbondingDelegations_;
    const ::grpc::internal::RpcMethod rpcmethod_Delegation_;
    const ::grpc::internal::RpcMethod rpcmethod_UnbondingDelegation_;
    const ::grpc::internal::RpcMethod rpcmethod_DelegatorDelegations_;
    const ::grpc::internal::RpcMethod rpcmethod_DelegatorUnbondingDelegations_;
    const ::grpc::internal::RpcMethod rpcmethod_Redelegations_;
    const ::grpc::internal::RpcMethod rpcmethod_DelegatorValidators_;
    const ::grpc::internal::RpcMethod rpcmethod_DelegatorValidator_;
    const ::grpc::internal::RpcMethod rpcmethod_HistoricalInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_Pool_;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Validators queries all validators that match the given status.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status Validators(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response);
    // Validator queries validator info for given validator address.
    virtual ::grpc::Status Validator(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response);
    // ValidatorDelegations queries delegate info for given validator.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status ValidatorDelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response);
    // ValidatorUnbondingDelegations queries unbonding delegations of a validator.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status ValidatorUnbondingDelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response);
    // Delegation queries delegate info for given validator delegator pair.
    virtual ::grpc::Status Delegation(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response);
    // UnbondingDelegation queries unbonding info for given validator delegator
    // pair.
    virtual ::grpc::Status UnbondingDelegation(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response);
    // DelegatorDelegations queries all delegations of a given delegator address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status DelegatorDelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response);
    // DelegatorUnbondingDelegations queries all unbonding delegations of a given
    // delegator address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status DelegatorUnbondingDelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response);
    // Redelegations queries redelegations of given address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status Redelegations(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response);
    // DelegatorValidators queries all validators info for given delegator
    // address.
    //
    // When called from another module, this query might consume a high amount of
    // gas if the pagination field is incorrectly set.
    virtual ::grpc::Status DelegatorValidators(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response);
    // DelegatorValidator queries validator info for given delegator validator
    // pair.
    virtual ::grpc::Status DelegatorValidator(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response);
    // HistoricalInfo queries the historical info for given height.
    virtual ::grpc::Status HistoricalInfo(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response);
    // Pool queries the pool info.
    virtual ::grpc::Status Pool(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response);
    // Parameters queries the staking parameters.
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Validators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Validators() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Validators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidators(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryValidatorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Validator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Validator() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Validator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidator(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryValidatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidatorDelegations() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ValidatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorDelegations(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ValidatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorUnbondingDelegations(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delegation() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Delegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegation(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryDelegationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnbondingDelegation() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnbondingDelegation(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelegatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelegatorDelegations() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DelegatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorDelegations(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelegatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelegatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DelegatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorUnbondingDelegations(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Redelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Redelegations() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Redelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Redelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRedelegations(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorValidators(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelegatorValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DelegatorValidator() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DelegatorValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorValidator(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_HistoricalInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_HistoricalInfo() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_HistoricalInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalInfo(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* /*request*/, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHistoricalInfo(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Pool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Pool() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_Pool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pool(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryPoolRequest* /*request*/, ::cosmos::staking::v1beta1::QueryPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPool(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryPoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::staking::v1beta1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Validators<WithAsyncMethod_Validator<WithAsyncMethod_ValidatorDelegations<WithAsyncMethod_ValidatorUnbondingDelegations<WithAsyncMethod_Delegation<WithAsyncMethod_UnbondingDelegation<WithAsyncMethod_DelegatorDelegations<WithAsyncMethod_DelegatorUnbondingDelegations<WithAsyncMethod_Redelegations<WithAsyncMethod_DelegatorValidators<WithAsyncMethod_DelegatorValidator<WithAsyncMethod_HistoricalInfo<WithAsyncMethod_Pool<WithAsyncMethod_Params<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Validators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Validators() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::cosmos::staking::v1beta1::QueryValidatorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorsResponse* response) { return this->Validators(context, request, response); }));}
    void SetMessageAllocatorFor_Validators(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::cosmos::staking::v1beta1::QueryValidatorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::cosmos::staking::v1beta1::QueryValidatorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Validators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Validators(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Validator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Validator() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryValidatorRequest, ::cosmos::staking::v1beta1::QueryValidatorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorRequest* request, ::cosmos::staking::v1beta1::QueryValidatorResponse* response) { return this->Validator(context, request, response); }));}
    void SetMessageAllocatorFor_Validator(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryValidatorRequest, ::cosmos::staking::v1beta1::QueryValidatorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryValidatorRequest, ::cosmos::staking::v1beta1::QueryValidatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Validator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Validator(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidatorDelegations() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* response) { return this->ValidatorDelegations(context, request, response); }));}
    void SetMessageAllocatorFor_ValidatorDelegations(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorDelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* response) { return this->ValidatorUnbondingDelegations(context, request, response); }));}
    void SetMessageAllocatorFor_ValidatorUnbondingDelegations(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorUnbondingDelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delegation() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegationRequest, ::cosmos::staking::v1beta1::QueryDelegationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegationRequest* request, ::cosmos::staking::v1beta1::QueryDelegationResponse* response) { return this->Delegation(context, request, response); }));}
    void SetMessageAllocatorFor_Delegation(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryDelegationRequest, ::cosmos::staking::v1beta1::QueryDelegationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegationRequest, ::cosmos::staking::v1beta1::QueryDelegationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delegation(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnbondingDelegation() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* request, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* response) { return this->UnbondingDelegation(context, request, response); }));}
    void SetMessageAllocatorFor_UnbondingDelegation(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnbondingDelegation(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelegatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelegatorDelegations() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* response) { return this->DelegatorDelegations(context, request, response); }));}
    void SetMessageAllocatorFor_DelegatorDelegations(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DelegatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorDelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelegatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelegatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* response) { return this->DelegatorUnbondingDelegations(context, request, response); }));}
    void SetMessageAllocatorFor_DelegatorUnbondingDelegations(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DelegatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorUnbondingDelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Redelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Redelegations() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::cosmos::staking::v1beta1::QueryRedelegationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* request, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* response) { return this->Redelegations(context, request, response); }));}
    void SetMessageAllocatorFor_Redelegations(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::cosmos::staking::v1beta1::QueryRedelegationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Redelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Redelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Redelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* response) { return this->DelegatorValidators(context, request, response); }));}
    void SetMessageAllocatorFor_DelegatorValidators(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorValidators(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DelegatorValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DelegatorValidator() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* request, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* response) { return this->DelegatorValidator(context, request, response); }));}
    void SetMessageAllocatorFor_DelegatorValidator(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DelegatorValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_HistoricalInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_HistoricalInfo() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* request, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* response) { return this->HistoricalInfo(context, request, response); }));}
    void SetMessageAllocatorFor_HistoricalInfo(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_HistoricalInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalInfo(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* /*request*/, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HistoricalInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* /*request*/, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Pool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Pool() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryPoolRequest, ::cosmos::staking::v1beta1::QueryPoolResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryPoolRequest* request, ::cosmos::staking::v1beta1::QueryPoolResponse* response) { return this->Pool(context, request, response); }));}
    void SetMessageAllocatorFor_Pool(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryPoolRequest, ::cosmos::staking::v1beta1::QueryPoolResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryPoolRequest, ::cosmos::staking::v1beta1::QueryPoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Pool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pool(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryPoolRequest* /*request*/, ::cosmos::staking::v1beta1::QueryPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Pool(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryPoolRequest* /*request*/, ::cosmos::staking::v1beta1::QueryPoolResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryParamsRequest, ::cosmos::staking::v1beta1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::staking::v1beta1::QueryParamsRequest* request, ::cosmos::staking::v1beta1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::cosmos::staking::v1beta1::QueryParamsRequest, ::cosmos::staking::v1beta1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::staking::v1beta1::QueryParamsRequest, ::cosmos::staking::v1beta1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Validators<WithCallbackMethod_Validator<WithCallbackMethod_ValidatorDelegations<WithCallbackMethod_ValidatorUnbondingDelegations<WithCallbackMethod_Delegation<WithCallbackMethod_UnbondingDelegation<WithCallbackMethod_DelegatorDelegations<WithCallbackMethod_DelegatorUnbondingDelegations<WithCallbackMethod_Redelegations<WithCallbackMethod_DelegatorValidators<WithCallbackMethod_DelegatorValidator<WithCallbackMethod_HistoricalInfo<WithCallbackMethod_Pool<WithCallbackMethod_Params<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Validators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Validators() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Validators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Validator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Validator() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Validator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidatorDelegations() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ValidatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ValidatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delegation() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Delegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnbondingDelegation() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelegatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelegatorDelegations() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DelegatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelegatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelegatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DelegatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Redelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Redelegations() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Redelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Redelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelegatorValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DelegatorValidator() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DelegatorValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_HistoricalInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_HistoricalInfo() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_HistoricalInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalInfo(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* /*request*/, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Pool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Pool() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_Pool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pool(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryPoolRequest* /*request*/, ::cosmos::staking::v1beta1::QueryPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Validators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Validators() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Validators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Validator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Validator() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Validator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidatorDelegations() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ValidatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorDelegations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ValidatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidatorUnbondingDelegations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delegation() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Delegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnbondingDelegation() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnbondingDelegation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelegatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelegatorDelegations() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DelegatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorDelegations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelegatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelegatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DelegatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorUnbondingDelegations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Redelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Redelegations() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Redelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Redelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRedelegations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorValidators(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DelegatorValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DelegatorValidator() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DelegatorValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelegatorValidator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_HistoricalInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_HistoricalInfo() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_HistoricalInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalInfo(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* /*request*/, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHistoricalInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Pool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Pool() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_Pool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pool(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryPoolRequest* /*request*/, ::cosmos::staking::v1beta1::QueryPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Validators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Validators() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Validators(context, request, response); }));
    }
    ~WithRawCallbackMethod_Validators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Validators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Validator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Validator() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Validator(context, request, response); }));
    }
    ~WithRawCallbackMethod_Validator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Validator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Validator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidatorDelegations() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidatorDelegations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorDelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidatorUnbondingDelegations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidatorUnbondingDelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delegation() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delegation(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delegation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnbondingDelegation() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnbondingDelegation(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnbondingDelegation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelegatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelegatorDelegations() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelegatorDelegations(context, request, response); }));
    }
    ~WithRawCallbackMethod_DelegatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorDelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelegatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelegatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelegatorUnbondingDelegations(context, request, response); }));
    }
    ~WithRawCallbackMethod_DelegatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorUnbondingDelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Redelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Redelegations() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Redelegations(context, request, response); }));
    }
    ~WithRawCallbackMethod_Redelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Redelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Redelegations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelegatorValidators(context, request, response); }));
    }
    ~WithRawCallbackMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorValidators(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DelegatorValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DelegatorValidator() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DelegatorValidator(context, request, response); }));
    }
    ~WithRawCallbackMethod_DelegatorValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelegatorValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DelegatorValidator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_HistoricalInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_HistoricalInfo() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->HistoricalInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_HistoricalInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status HistoricalInfo(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* /*request*/, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* HistoricalInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Pool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Pool() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Pool(context, request, response); }));
    }
    ~WithRawCallbackMethod_Pool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Pool(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryPoolRequest* /*request*/, ::cosmos::staking::v1beta1::QueryPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Pool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Validators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Validators() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::cosmos::staking::v1beta1::QueryValidatorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryValidatorsRequest, ::cosmos::staking::v1beta1::QueryValidatorsResponse>* streamer) {
                       return this->StreamedValidators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Validators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Validators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryValidatorsRequest,::cosmos::staking::v1beta1::QueryValidatorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Validator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Validator() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryValidatorRequest, ::cosmos::staking::v1beta1::QueryValidatorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryValidatorRequest, ::cosmos::staking::v1beta1::QueryValidatorResponse>* streamer) {
                       return this->StreamedValidator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Validator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Validator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryValidatorRequest,::cosmos::staking::v1beta1::QueryValidatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidatorDelegations() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* streamer) {
                       return this->StreamedValidatorDelegations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidatorDelegations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryValidatorDelegationsRequest,::cosmos::staking::v1beta1::QueryValidatorDelegationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* streamer) {
                       return this->StreamedValidatorUnbondingDelegations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidatorUnbondingDelegations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsRequest,::cosmos::staking::v1beta1::QueryValidatorUnbondingDelegationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delegation() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryDelegationRequest, ::cosmos::staking::v1beta1::QueryDelegationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryDelegationRequest, ::cosmos::staking::v1beta1::QueryDelegationResponse>* streamer) {
                       return this->StreamedDelegation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryDelegationRequest,::cosmos::staking::v1beta1::QueryDelegationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnbondingDelegation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnbondingDelegation() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* streamer) {
                       return this->StreamedUnbondingDelegation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnbondingDelegation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnbondingDelegation(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest* /*request*/, ::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnbondingDelegation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryUnbondingDelegationRequest,::cosmos::staking::v1beta1::QueryUnbondingDelegationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelegatorDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelegatorDelegations() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* streamer) {
                       return this->StreamedDelegatorDelegations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelegatorDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelegatorDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegatorDelegations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryDelegatorDelegationsRequest,::cosmos::staking::v1beta1::QueryDelegatorDelegationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelegatorUnbondingDelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelegatorUnbondingDelegations() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* streamer) {
                       return this->StreamedDelegatorUnbondingDelegations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelegatorUnbondingDelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelegatorUnbondingDelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegatorUnbondingDelegations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsRequest,::cosmos::staking::v1beta1::QueryDelegatorUnbondingDelegationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Redelegations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Redelegations() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::cosmos::staking::v1beta1::QueryRedelegationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryRedelegationsRequest, ::cosmos::staking::v1beta1::QueryRedelegationsResponse>* streamer) {
                       return this->StreamedRedelegations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Redelegations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Redelegations(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryRedelegationsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryRedelegationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRedelegations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryRedelegationsRequest,::cosmos::staking::v1beta1::QueryRedelegationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelegatorValidators : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelegatorValidators() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* streamer) {
                       return this->StreamedDelegatorValidators(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelegatorValidators() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelegatorValidators(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegatorValidators(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryDelegatorValidatorsRequest,::cosmos::staking::v1beta1::QueryDelegatorValidatorsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelegatorValidator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DelegatorValidator() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* streamer) {
                       return this->StreamedDelegatorValidator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DelegatorValidator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelegatorValidator(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest* /*request*/, ::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelegatorValidator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryDelegatorValidatorRequest,::cosmos::staking::v1beta1::QueryDelegatorValidatorResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_HistoricalInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_HistoricalInfo() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* streamer) {
                       return this->StreamedHistoricalInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_HistoricalInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status HistoricalInfo(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest* /*request*/, ::cosmos::staking::v1beta1::QueryHistoricalInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHistoricalInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryHistoricalInfoRequest,::cosmos::staking::v1beta1::QueryHistoricalInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Pool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Pool() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryPoolRequest, ::cosmos::staking::v1beta1::QueryPoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryPoolRequest, ::cosmos::staking::v1beta1::QueryPoolResponse>* streamer) {
                       return this->StreamedPool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Pool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Pool(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryPoolRequest* /*request*/, ::cosmos::staking::v1beta1::QueryPoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryPoolRequest,::cosmos::staking::v1beta1::QueryPoolResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::staking::v1beta1::QueryParamsRequest, ::cosmos::staking::v1beta1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::staking::v1beta1::QueryParamsRequest, ::cosmos::staking::v1beta1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmos::staking::v1beta1::QueryParamsRequest* /*request*/, ::cosmos::staking::v1beta1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::staking::v1beta1::QueryParamsRequest,::cosmos::staking::v1beta1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Validators<WithStreamedUnaryMethod_Validator<WithStreamedUnaryMethod_ValidatorDelegations<WithStreamedUnaryMethod_ValidatorUnbondingDelegations<WithStreamedUnaryMethod_Delegation<WithStreamedUnaryMethod_UnbondingDelegation<WithStreamedUnaryMethod_DelegatorDelegations<WithStreamedUnaryMethod_DelegatorUnbondingDelegations<WithStreamedUnaryMethod_Redelegations<WithStreamedUnaryMethod_DelegatorValidators<WithStreamedUnaryMethod_DelegatorValidator<WithStreamedUnaryMethod_HistoricalInfo<WithStreamedUnaryMethod_Pool<WithStreamedUnaryMethod_Params<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Validators<WithStreamedUnaryMethod_Validator<WithStreamedUnaryMethod_ValidatorDelegations<WithStreamedUnaryMethod_ValidatorUnbondingDelegations<WithStreamedUnaryMethod_Delegation<WithStreamedUnaryMethod_UnbondingDelegation<WithStreamedUnaryMethod_DelegatorDelegations<WithStreamedUnaryMethod_DelegatorUnbondingDelegations<WithStreamedUnaryMethod_Redelegations<WithStreamedUnaryMethod_DelegatorValidators<WithStreamedUnaryMethod_DelegatorValidator<WithStreamedUnaryMethod_HistoricalInfo<WithStreamedUnaryMethod_Pool<WithStreamedUnaryMethod_Params<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos


#endif  // GRPC_cosmos_2fstaking_2fv1beta1_2fquery_2eproto__INCLUDED

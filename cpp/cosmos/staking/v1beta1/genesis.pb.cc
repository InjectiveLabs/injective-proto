// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/genesis.proto

#include "cosmos/staking/v1beta1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace staking {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.last_validator_powers_)*/{}
  , /*decltype(_impl_.validators_)*/{}
  , /*decltype(_impl_.delegations_)*/{}
  , /*decltype(_impl_.unbonding_delegations_)*/{}
  , /*decltype(_impl_.redelegations_)*/{}
  , /*decltype(_impl_.last_total_power_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.exported_)*/ false
} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LastValidatorPower::LastValidatorPower(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.power_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LastValidatorPowerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LastValidatorPowerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LastValidatorPowerDefaultTypeInternal() {}
  union {
    LastValidatorPower _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LastValidatorPowerDefaultTypeInternal _LastValidatorPower_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_.last_total_power_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_.last_validator_powers_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_.validators_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_.delegations_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_.unbonding_delegations_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_.redelegations_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::GenesisState, _impl_.exported_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::LastValidatorPower, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::LastValidatorPower, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::LastValidatorPower, _impl_.power_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::cosmos::staking::v1beta1::GenesisState)},
        { 24, -1, -1, sizeof(::cosmos::staking::v1beta1::LastValidatorPower)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::staking::v1beta1::_GenesisState_default_instance_._instance,
    &::cosmos::staking::v1beta1::_LastValidatorPower_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$cosmos/staking/v1beta1/genesis.proto\022\026"
    "cosmos.staking.v1beta1\032\024gogoproto/gogo.p"
    "roto\032$cosmos/staking/v1beta1/staking.pro"
    "to\032\031cosmos_proto/cosmos.proto\032\021amino/ami"
    "no.proto\"\232\005\n\014GenesisState\022A\n\006params\030\001 \001("
    "\0132\036.cosmos.staking.v1beta1.ParamsB\t\310\336\037\000\250"
    "\347\260*\001R\006params\022]\n\020last_total_power\030\002 \001(\014B3"
    "\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/typ"
    "es.Int\250\347\260*\001R\016lastTotalPower\022i\n\025last_vali"
    "dator_powers\030\003 \003(\0132*.cosmos.staking.v1be"
    "ta1.LastValidatorPowerB\t\310\336\037\000\250\347\260*\001R\023lastV"
    "alidatorPowers\022L\n\nvalidators\030\004 \003(\0132!.cos"
    "mos.staking.v1beta1.ValidatorB\t\310\336\037\000\250\347\260*\001"
    "R\nvalidators\022O\n\013delegations\030\005 \003(\0132\".cosm"
    "os.staking.v1beta1.DelegationB\t\310\336\037\000\250\347\260*\001"
    "R\013delegations\022k\n\025unbonding_delegations\030\006"
    " \003(\0132+.cosmos.staking.v1beta1.UnbondingD"
    "elegationB\t\310\336\037\000\250\347\260*\001R\024unbondingDelegatio"
    "ns\022U\n\rredelegations\030\007 \003(\0132$.cosmos.staki"
    "ng.v1beta1.RedelegationB\t\310\336\037\000\250\347\260*\001R\rrede"
    "legations\022\032\n\010exported\030\010 \001(\010R\010exported\"h\n"
    "\022LastValidatorPower\0222\n\007address\030\001 \001(\tB\030\322\264"
    "-\024cosmos.AddressStringR\007address\022\024\n\005power"
    "\030\002 \001(\003R\005power:\010\210\240\037\000\350\240\037\000B\322\001\n\032com.cosmos.s"
    "taking.v1beta1B\014GenesisProtoP\001Z,github.c"
    "om/cosmos/cosmos-sdk/x/staking/types\242\002\003C"
    "SX\252\002\026Cosmos.Staking.V1beta1\312\002\026Cosmos\\Sta"
    "king\\V1beta1\342\002\"Cosmos\\Staking\\V1beta1\\GP"
    "BMetadata\352\002\030Cosmos::Staking::V1beta1b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto = {
    false,
    false,
    1164,
    descriptor_table_protodef_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto,
    "cosmos/staking/v1beta1/genesis.proto",
    &descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_once,
    descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_deps,
    4,
    2,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto::offsets,
    file_level_metadata_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto,
    file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto,
    file_level_service_descriptors_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_getter() {
  return &descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto(&descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto);
namespace cosmos {
namespace staking {
namespace v1beta1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::cosmos::staking::v1beta1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::staking::v1beta1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GenesisState::clear_validators() {
  _internal_mutable_validators()->Clear();
}
void GenesisState::clear_delegations() {
  _internal_mutable_delegations()->Clear();
}
void GenesisState::clear_unbonding_delegations() {
  _internal_mutable_unbonding_delegations()->Clear();
}
void GenesisState::clear_redelegations() {
  _internal_mutable_redelegations()->Clear();
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_validator_powers_){from._impl_.last_validator_powers_}
    , decltype(_impl_.validators_){from._impl_.validators_}
    , decltype(_impl_.delegations_){from._impl_.delegations_}
    , decltype(_impl_.unbonding_delegations_){from._impl_.unbonding_delegations_}
    , decltype(_impl_.redelegations_){from._impl_.redelegations_}
    , decltype(_impl_.last_total_power_) {}

    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.exported_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.last_total_power_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_total_power_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_total_power().empty()) {
    _this->_impl_.last_total_power_.Set(from._internal_last_total_power(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::cosmos::staking::v1beta1::Params(*from._impl_.params_);
  }
  _this->_impl_.exported_ = from._impl_.exported_;
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.last_validator_powers_){arena}
    , decltype(_impl_.validators_){arena}
    , decltype(_impl_.delegations_){arena}
    , decltype(_impl_.unbonding_delegations_){arena}
    , decltype(_impl_.redelegations_){arena}
    , decltype(_impl_.last_total_power_) {}

    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.exported_) { false }

  };
  _impl_.last_total_power_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_total_power_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_last_validator_powers()->~RepeatedPtrField();
  _internal_mutable_validators()->~RepeatedPtrField();
  _internal_mutable_delegations()->~RepeatedPtrField();
  _internal_mutable_unbonding_delegations()->~RepeatedPtrField();
  _internal_mutable_redelegations()->~RepeatedPtrField();
  _impl_.last_total_power_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_last_validator_powers()->Clear();
  _internal_mutable_validators()->Clear();
  _internal_mutable_delegations()->Clear();
  _internal_mutable_unbonding_delegations()->Clear();
  _internal_mutable_redelegations()->Clear();
  _impl_.last_total_power_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_.exported_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.staking.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes last_total_power = 2 [json_name = "lastTotalPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_last_total_power();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.LastValidatorPower last_validator_powers = 3 [json_name = "lastValidatorPowers", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_last_validator_powers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.Validator validators = 4 [json_name = "validators", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.Delegation delegations = 5 [json_name = "delegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_delegations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations = 6 [json_name = "unbondingDelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unbonding_delegations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.Redelegation redelegations = 7 [json_name = "redelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redelegations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool exported = 8 [json_name = "exported"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.exported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.staking.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // bytes last_total_power = 2 [json_name = "lastTotalPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.amino.dont_omitempty) = true];
  if (!this->_internal_last_total_power().empty()) {
    const std::string& _s = this->_internal_last_total_power();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // repeated .cosmos.staking.v1beta1.LastValidatorPower last_validator_powers = 3 [json_name = "lastValidatorPowers", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_last_validator_powers_size()); i < n; i++) {
    const auto& repfield = this->_internal_last_validator_powers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.staking.v1beta1.Validator validators = 4 [json_name = "validators", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_validators_size()); i < n; i++) {
    const auto& repfield = this->_internal_validators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.staking.v1beta1.Delegation delegations = 5 [json_name = "delegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_delegations_size()); i < n; i++) {
    const auto& repfield = this->_internal_delegations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations = 6 [json_name = "unbondingDelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unbonding_delegations_size()); i < n; i++) {
    const auto& repfield = this->_internal_unbonding_delegations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.staking.v1beta1.Redelegation redelegations = 7 [json_name = "redelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_redelegations_size()); i < n; i++) {
    const auto& repfield = this->_internal_redelegations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool exported = 8 [json_name = "exported"];
  if (this->_internal_exported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_exported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.LastValidatorPower last_validator_powers = 3 [json_name = "lastValidatorPowers", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_last_validator_powers_size();
  for (const auto& msg : this->_internal_last_validator_powers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.staking.v1beta1.Validator validators = 4 [json_name = "validators", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_validators_size();
  for (const auto& msg : this->_internal_validators()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.staking.v1beta1.Delegation delegations = 5 [json_name = "delegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_delegations_size();
  for (const auto& msg : this->_internal_delegations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations = 6 [json_name = "unbondingDelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_unbonding_delegations_size();
  for (const auto& msg : this->_internal_unbonding_delegations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.staking.v1beta1.Redelegation redelegations = 7 [json_name = "redelegations", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_redelegations_size();
  for (const auto& msg : this->_internal_redelegations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes last_total_power = 2 [json_name = "lastTotalPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.amino.dont_omitempty) = true];
  if (!this->_internal_last_total_power().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_last_total_power());
  }

  // .cosmos.staking.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  // bool exported = 8 [json_name = "exported"];
  if (this->_internal_exported() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_last_validator_powers()->MergeFrom(from._internal_last_validator_powers());
  _this->_internal_mutable_validators()->MergeFrom(from._internal_validators());
  _this->_internal_mutable_delegations()->MergeFrom(from._internal_delegations());
  _this->_internal_mutable_unbonding_delegations()->MergeFrom(from._internal_unbonding_delegations());
  _this->_internal_mutable_redelegations()->MergeFrom(from._internal_redelegations());
  if (!from._internal_last_total_power().empty()) {
    _this->_internal_set_last_total_power(from._internal_last_total_power());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::cosmos::staking::v1beta1::Params::MergeFrom(
        from._internal_params());
  }
  if (from._internal_exported() != 0) {
    _this->_internal_set_exported(from._internal_exported());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_last_validator_powers()->InternalSwap(other->_internal_mutable_last_validator_powers());
  _internal_mutable_validators()->InternalSwap(other->_internal_mutable_validators());
  _internal_mutable_delegations()->InternalSwap(other->_internal_mutable_delegations());
  _internal_mutable_unbonding_delegations()->InternalSwap(other->_internal_mutable_unbonding_delegations());
  _internal_mutable_redelegations()->InternalSwap(other->_internal_mutable_redelegations());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_total_power_, lhs_arena,
                                       &other->_impl_.last_total_power_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.exported_)
      + sizeof(GenesisState::_impl_.exported_)
      - PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.params_)>(
          reinterpret_cast<char*>(&_impl_.params_),
          reinterpret_cast<char*>(&other->_impl_.params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto[0]);
}
// ===================================================================

class LastValidatorPower::_Internal {
 public:
};

LastValidatorPower::LastValidatorPower(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.LastValidatorPower)
}
LastValidatorPower::LastValidatorPower(const LastValidatorPower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LastValidatorPower* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.power_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.power_ = from._impl_.power_;
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.LastValidatorPower)
}

inline void LastValidatorPower::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.power_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LastValidatorPower::~LastValidatorPower() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.LastValidatorPower)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LastValidatorPower::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
}

void LastValidatorPower::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LastValidatorPower::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.LastValidatorPower)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.power_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LastValidatorPower::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.LastValidatorPower.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 power = 2 [json_name = "power"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LastValidatorPower::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.LastValidatorPower)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.LastValidatorPower.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 power = 2 [json_name = "power"];
  if (this->_internal_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.LastValidatorPower)
  return target;
}

::size_t LastValidatorPower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.LastValidatorPower)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // int64 power = 2 [json_name = "power"];
  if (this->_internal_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LastValidatorPower::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LastValidatorPower::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LastValidatorPower::GetClassData() const { return &_class_data_; }


void LastValidatorPower::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LastValidatorPower*>(&to_msg);
  auto& from = static_cast<const LastValidatorPower&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.LastValidatorPower)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_power() != 0) {
    _this->_internal_set_power(from._internal_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LastValidatorPower::CopyFrom(const LastValidatorPower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.LastValidatorPower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LastValidatorPower::IsInitialized() const {
  return true;
}

void LastValidatorPower::InternalSwap(LastValidatorPower* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);

  swap(_impl_.power_, other->_impl_.power_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LastValidatorPower::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fgenesis_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::GenesisState*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::LastValidatorPower*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::LastValidatorPower >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::LastValidatorPower >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

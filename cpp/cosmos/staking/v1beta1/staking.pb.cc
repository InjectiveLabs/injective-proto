// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/staking.proto

#include "cosmos/staking/v1beta1/staking.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace staking {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR HistoricalInfo::HistoricalInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.valset_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct HistoricalInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoricalInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoricalInfoDefaultTypeInternal() {}
  union {
    HistoricalInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoricalInfoDefaultTypeInternal _HistoricalInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CommissionRates::CommissionRates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.max_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.max_change_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommissionRatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommissionRatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommissionRatesDefaultTypeInternal() {}
  union {
    CommissionRates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommissionRatesDefaultTypeInternal _CommissionRates_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Commission::Commission(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commission_rates_)*/nullptr
  , /*decltype(_impl_.update_time_)*/nullptr} {}
struct CommissionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommissionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommissionDefaultTypeInternal() {}
  union {
    Commission _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommissionDefaultTypeInternal _Commission_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Description::Description(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.moniker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.identity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.website_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.security_contact_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.details_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescriptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DescriptionDefaultTypeInternal() {}
  union {
    Description _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DescriptionDefaultTypeInternal _Description_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Validator::Validator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unbonding_ids_)*/ {}
  ,/* _impl_._unbonding_ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.operator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tokens_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.delegator_shares_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_self_delegation_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.consensus_pubkey_)*/nullptr
  , /*decltype(_impl_.description_)*/nullptr
  , /*decltype(_impl_.unbonding_time_)*/nullptr
  , /*decltype(_impl_.commission_)*/nullptr
  , /*decltype(_impl_.jailed_)*/ false

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.unbonding_height_)*/ ::int64_t{0}

  , /*decltype(_impl_.unbonding_on_hold_ref_count_)*/ ::int64_t{0}
} {}
struct ValidatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorDefaultTypeInternal() {}
  union {
    Validator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorDefaultTypeInternal _Validator_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValAddresses::ValAddresses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addresses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValAddressesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValAddressesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValAddressesDefaultTypeInternal() {}
  union {
    ValAddresses _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValAddressesDefaultTypeInternal _ValAddresses_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DVPair::DVPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.delegator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DVPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DVPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DVPairDefaultTypeInternal() {}
  union {
    DVPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DVPairDefaultTypeInternal _DVPair_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DVPairs::DVPairs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pairs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DVPairsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DVPairsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DVPairsDefaultTypeInternal() {}
  union {
    DVPairs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DVPairsDefaultTypeInternal _DVPairs_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DVVTriplet::DVVTriplet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.delegator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_src_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_dst_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DVVTripletDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DVVTripletDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DVVTripletDefaultTypeInternal() {}
  union {
    DVVTriplet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DVVTripletDefaultTypeInternal _DVVTriplet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DVVTriplets::DVVTriplets(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.triplets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DVVTripletsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DVVTripletsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DVVTripletsDefaultTypeInternal() {}
  union {
    DVVTriplets _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DVVTripletsDefaultTypeInternal _DVVTriplets_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Delegation::Delegation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.delegator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.shares_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DelegationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelegationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelegationDefaultTypeInternal() {}
  union {
    Delegation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelegationDefaultTypeInternal _Delegation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UnbondingDelegation::UnbondingDelegation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.delegator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnbondingDelegationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnbondingDelegationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnbondingDelegationDefaultTypeInternal() {}
  union {
    UnbondingDelegation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnbondingDelegationDefaultTypeInternal _UnbondingDelegation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UnbondingDelegationEntry::UnbondingDelegationEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.initial_balance_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.balance_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.completion_time_)*/nullptr
  , /*decltype(_impl_.creation_height_)*/ ::int64_t{0}

  , /*decltype(_impl_.unbonding_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.unbonding_on_hold_ref_count_)*/ ::int64_t{0}
} {}
struct UnbondingDelegationEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnbondingDelegationEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnbondingDelegationEntryDefaultTypeInternal() {}
  union {
    UnbondingDelegationEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnbondingDelegationEntryDefaultTypeInternal _UnbondingDelegationEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RedelegationEntry::RedelegationEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.initial_balance_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.shares_dst_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.completion_time_)*/nullptr
  , /*decltype(_impl_.creation_height_)*/ ::int64_t{0}

  , /*decltype(_impl_.unbonding_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.unbonding_on_hold_ref_count_)*/ ::int64_t{0}
} {}
struct RedelegationEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedelegationEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedelegationEntryDefaultTypeInternal() {}
  union {
    RedelegationEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedelegationEntryDefaultTypeInternal _RedelegationEntry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Redelegation::Redelegation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.delegator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_src_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validator_dst_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RedelegationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedelegationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedelegationDefaultTypeInternal() {}
  union {
    Redelegation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedelegationDefaultTypeInternal _Redelegation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bond_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_commission_rate_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.unbonding_time_)*/nullptr
  , /*decltype(_impl_.max_validators_)*/ 0u

  , /*decltype(_impl_.max_entries_)*/ 0u

  , /*decltype(_impl_.historical_entries_)*/ 0u
} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DelegationResponse::DelegationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delegation_)*/nullptr
  , /*decltype(_impl_.balance_)*/nullptr} {}
struct DelegationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DelegationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DelegationResponseDefaultTypeInternal() {}
  union {
    DelegationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DelegationResponseDefaultTypeInternal _DelegationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RedelegationEntryResponse::RedelegationEntryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balance_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.redelegation_entry_)*/nullptr} {}
struct RedelegationEntryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedelegationEntryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedelegationEntryResponseDefaultTypeInternal() {}
  union {
    RedelegationEntryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedelegationEntryResponseDefaultTypeInternal _RedelegationEntryResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RedelegationResponse::RedelegationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.redelegation_)*/nullptr} {}
struct RedelegationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedelegationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedelegationResponseDefaultTypeInternal() {}
  union {
    RedelegationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedelegationResponseDefaultTypeInternal _RedelegationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Pool::Pool(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.not_bonded_tokens_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bonded_tokens_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoolDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoolDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoolDefaultTypeInternal() {}
  union {
    Pool _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoolDefaultTypeInternal _Pool_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorUpdates::ValidatorUpdates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.updates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorUpdatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorUpdatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorUpdatesDefaultTypeInternal() {}
  union {
    ValidatorUpdates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorUpdatesDefaultTypeInternal _ValidatorUpdates_default_instance_;
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::HistoricalInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::HistoricalInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::HistoricalInfo, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::HistoricalInfo, _impl_.valset_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::CommissionRates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::CommissionRates, _impl_.rate_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::CommissionRates, _impl_.max_rate_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::CommissionRates, _impl_.max_change_rate_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Commission, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Commission, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Commission, _impl_.commission_rates_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Commission, _impl_.update_time_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Description, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Description, _impl_.moniker_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Description, _impl_.identity_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Description, _impl_.website_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Description, _impl_.security_contact_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Description, _impl_.details_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.operator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.consensus_pubkey_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.jailed_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.tokens_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.delegator_shares_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.unbonding_height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.unbonding_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.commission_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.min_self_delegation_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.unbonding_on_hold_ref_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Validator, _impl_.unbonding_ids_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,
    2,
    3,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::ValAddresses, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::ValAddresses, _impl_.addresses_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVPair, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVPair, _impl_.delegator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVPair, _impl_.validator_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVPairs, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVPairs, _impl_.pairs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVVTriplet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVVTriplet, _impl_.delegator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVVTriplet, _impl_.validator_src_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVVTriplet, _impl_.validator_dst_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVVTriplets, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DVVTriplets, _impl_.triplets_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Delegation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Delegation, _impl_.delegator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Delegation, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Delegation, _impl_.shares_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegation, _impl_.delegator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegation, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegation, _impl_.entries_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegationEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegationEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegationEntry, _impl_.creation_height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegationEntry, _impl_.completion_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegationEntry, _impl_.initial_balance_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegationEntry, _impl_.balance_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegationEntry, _impl_.unbonding_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::UnbondingDelegationEntry, _impl_.unbonding_on_hold_ref_count_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntry, _impl_.creation_height_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntry, _impl_.completion_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntry, _impl_.initial_balance_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntry, _impl_.shares_dst_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntry, _impl_.unbonding_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntry, _impl_.unbonding_on_hold_ref_count_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Redelegation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Redelegation, _impl_.delegator_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Redelegation, _impl_.validator_src_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Redelegation, _impl_.validator_dst_address_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Redelegation, _impl_.entries_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Params, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Params, _impl_.unbonding_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Params, _impl_.max_validators_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Params, _impl_.max_entries_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Params, _impl_.historical_entries_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Params, _impl_.bond_denom_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Params, _impl_.min_commission_rate_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DelegationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DelegationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DelegationResponse, _impl_.delegation_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::DelegationResponse, _impl_.balance_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntryResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntryResponse, _impl_.redelegation_entry_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationEntryResponse, _impl_.balance_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationResponse, _impl_.redelegation_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::RedelegationResponse, _impl_.entries_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Pool, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Pool, _impl_.not_bonded_tokens_),
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::Pool, _impl_.bonded_tokens_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::ValidatorUpdates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::staking::v1beta1::ValidatorUpdates, _impl_.updates_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::cosmos::staking::v1beta1::HistoricalInfo)},
        { 12, -1, -1, sizeof(::cosmos::staking::v1beta1::CommissionRates)},
        { 23, 33, -1, sizeof(::cosmos::staking::v1beta1::Commission)},
        { 35, -1, -1, sizeof(::cosmos::staking::v1beta1::Description)},
        { 48, 69, -1, sizeof(::cosmos::staking::v1beta1::Validator)},
        { 82, -1, -1, sizeof(::cosmos::staking::v1beta1::ValAddresses)},
        { 91, -1, -1, sizeof(::cosmos::staking::v1beta1::DVPair)},
        { 101, -1, -1, sizeof(::cosmos::staking::v1beta1::DVPairs)},
        { 110, -1, -1, sizeof(::cosmos::staking::v1beta1::DVVTriplet)},
        { 121, -1, -1, sizeof(::cosmos::staking::v1beta1::DVVTriplets)},
        { 130, -1, -1, sizeof(::cosmos::staking::v1beta1::Delegation)},
        { 141, -1, -1, sizeof(::cosmos::staking::v1beta1::UnbondingDelegation)},
        { 152, 166, -1, sizeof(::cosmos::staking::v1beta1::UnbondingDelegationEntry)},
        { 172, 186, -1, sizeof(::cosmos::staking::v1beta1::RedelegationEntry)},
        { 192, -1, -1, sizeof(::cosmos::staking::v1beta1::Redelegation)},
        { 204, 218, -1, sizeof(::cosmos::staking::v1beta1::Params)},
        { 224, 234, -1, sizeof(::cosmos::staking::v1beta1::DelegationResponse)},
        { 236, 246, -1, sizeof(::cosmos::staking::v1beta1::RedelegationEntryResponse)},
        { 248, 258, -1, sizeof(::cosmos::staking::v1beta1::RedelegationResponse)},
        { 260, -1, -1, sizeof(::cosmos::staking::v1beta1::Pool)},
        { 270, -1, -1, sizeof(::cosmos::staking::v1beta1::ValidatorUpdates)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::staking::v1beta1::_HistoricalInfo_default_instance_._instance,
    &::cosmos::staking::v1beta1::_CommissionRates_default_instance_._instance,
    &::cosmos::staking::v1beta1::_Commission_default_instance_._instance,
    &::cosmos::staking::v1beta1::_Description_default_instance_._instance,
    &::cosmos::staking::v1beta1::_Validator_default_instance_._instance,
    &::cosmos::staking::v1beta1::_ValAddresses_default_instance_._instance,
    &::cosmos::staking::v1beta1::_DVPair_default_instance_._instance,
    &::cosmos::staking::v1beta1::_DVPairs_default_instance_._instance,
    &::cosmos::staking::v1beta1::_DVVTriplet_default_instance_._instance,
    &::cosmos::staking::v1beta1::_DVVTriplets_default_instance_._instance,
    &::cosmos::staking::v1beta1::_Delegation_default_instance_._instance,
    &::cosmos::staking::v1beta1::_UnbondingDelegation_default_instance_._instance,
    &::cosmos::staking::v1beta1::_UnbondingDelegationEntry_default_instance_._instance,
    &::cosmos::staking::v1beta1::_RedelegationEntry_default_instance_._instance,
    &::cosmos::staking::v1beta1::_Redelegation_default_instance_._instance,
    &::cosmos::staking::v1beta1::_Params_default_instance_._instance,
    &::cosmos::staking::v1beta1::_DelegationResponse_default_instance_._instance,
    &::cosmos::staking::v1beta1::_RedelegationEntryResponse_default_instance_._instance,
    &::cosmos::staking::v1beta1::_RedelegationResponse_default_instance_._instance,
    &::cosmos::staking::v1beta1::_Pool_default_instance_._instance,
    &::cosmos::staking::v1beta1::_ValidatorUpdates_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$cosmos/staking/v1beta1/staking.proto\022\026"
    "cosmos.staking.v1beta1\032\024gogoproto/gogo.p"
    "roto\032\031google/protobuf/any.proto\032\036google/"
    "protobuf/duration.proto\032\037google/protobuf"
    "/timestamp.proto\032\031cosmos_proto/cosmos.pr"
    "oto\032\036cosmos/base/v1beta1/coin.proto\032\021ami"
    "no/amino.proto\032\034tendermint/types/types.p"
    "roto\032\033tendermint/abci/types.proto\"\223\001\n\016Hi"
    "storicalInfo\022;\n\006header\030\001 \001(\0132\030.tendermin"
    "t.types.HeaderB\t\310\336\037\000\250\347\260*\001R\006header\022D\n\006val"
    "set\030\002 \003(\0132!.cosmos.staking.v1beta1.Valid"
    "atorB\t\310\336\037\000\250\347\260*\001R\006valset\"\254\002\n\017CommissionRa"
    "tes\022P\n\004rate\030\001 \001(\tB<\310\336\037\000\332\336\037&github.com/co"
    "smos/cosmos-sdk/types.Dec\322\264-\ncosmos.DecR"
    "\004rate\022W\n\010max_rate\030\002 \001(\tB<\310\336\037\000\332\336\037&github."
    "com/cosmos/cosmos-sdk/types.Dec\322\264-\ncosmo"
    "s.DecR\007maxRate\022d\n\017max_change_rate\030\003 \001(\tB"
    "<\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/ty"
    "pes.Dec\322\264-\ncosmos.DecR\rmaxChangeRate:\010\230\240"
    "\037\000\350\240\037\001\"\305\001\n\nCommission\022a\n\020commission_rate"
    "s\030\001 \001(\0132\'.cosmos.staking.v1beta1.Commiss"
    "ionRatesB\r\310\336\037\000\320\336\037\001\250\347\260*\001R\017commissionRates"
    "\022J\n\013update_time\030\002 \001(\0132\032.google.protobuf."
    "TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\nupdateTime:\010\230\240"
    "\037\000\350\240\037\001\"\254\001\n\013Description\022\030\n\007moniker\030\001 \001(\tR"
    "\007moniker\022\032\n\010identity\030\002 \001(\tR\010identity\022\030\n\007"
    "website\030\003 \001(\tR\007website\022)\n\020security_conta"
    "ct\030\004 \001(\tR\017securityContact\022\030\n\007details\030\005 \001"
    "(\tR\007details:\010\230\240\037\000\350\240\037\001\"\273\007\n\tValidator\022C\n\020o"
    "perator_address\030\001 \001(\tB\030\322\264-\024cosmos.Addres"
    "sStringR\017operatorAddress\022Y\n\020consensus_pu"
    "bkey\030\002 \001(\0132\024.google.protobuf.AnyB\030\312\264-\024co"
    "smos.crypto.PubKeyR\017consensusPubkey\022\026\n\006j"
    "ailed\030\003 \001(\010R\006jailed\022:\n\006status\030\004 \001(\0162\".co"
    "smos.staking.v1beta1.BondStatusR\006status\022"
    "T\n\006tokens\030\005 \001(\tB<\310\336\037\000\332\336\037&github.com/cosm"
    "os/cosmos-sdk/types.Int\322\264-\ncosmos.IntR\006t"
    "okens\022g\n\020delegator_shares\030\006 \001(\tB<\310\336\037\000\332\336\037"
    "&github.com/cosmos/cosmos-sdk/types.Dec\322"
    "\264-\ncosmos.DecR\017delegatorShares\022P\n\013descri"
    "ption\030\007 \001(\0132#.cosmos.staking.v1beta1.Des"
    "criptionB\t\310\336\037\000\250\347\260*\001R\013description\022)\n\020unbo"
    "nding_height\030\010 \001(\003R\017unbondingHeight\022P\n\016u"
    "nbonding_time\030\t \001(\0132\032.google.protobuf.Ti"
    "mestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\runbondingTime\022M\n"
    "\ncommission\030\n \001(\0132\".cosmos.staking.v1bet"
    "a1.CommissionB\t\310\336\037\000\250\347\260*\001R\ncommission\022l\n\023"
    "min_self_delegation\030\013 \001(\tB<\310\336\037\000\332\336\037&githu"
    "b.com/cosmos/cosmos-sdk/types.Int\322\264-\ncos"
    "mos.IntR\021minSelfDelegation\022<\n\033unbonding_"
    "on_hold_ref_count\030\014 \001(\003R\027unbondingOnHold"
    "RefCount\022#\n\runbonding_ids\030\r \003(\004R\014unbondi"
    "ngIds:\014\210\240\037\000\230\240\037\000\350\240\037\000\"P\n\014ValAddresses\0226\n\ta"
    "ddresses\030\001 \003(\tB\030\322\264-\024cosmos.AddressString"
    "R\taddresses:\010\230\240\037\000\200\334 \001\"\244\001\n\006DVPair\022E\n\021dele"
    "gator_address\030\001 \001(\tB\030\322\264-\024cosmos.AddressS"
    "tringR\020delegatorAddress\022E\n\021validator_add"
    "ress\030\002 \001(\tB\030\322\264-\024cosmos.AddressStringR\020va"
    "lidatorAddress:\014\210\240\037\000\230\240\037\000\350\240\037\000\"J\n\007DVPairs\022"
    "\?\n\005pairs\030\001 \003(\0132\036.cosmos.staking.v1beta1."
    "DVPairB\t\310\336\037\000\250\347\260*\001R\005pairs\"\375\001\n\nDVVTriplet\022"
    "E\n\021delegator_address\030\001 \001(\tB\030\322\264-\024cosmos.A"
    "ddressStringR\020delegatorAddress\022L\n\025valida"
    "tor_src_address\030\002 \001(\tB\030\322\264-\024cosmos.Addres"
    "sStringR\023validatorSrcAddress\022L\n\025validato"
    "r_dst_address\030\003 \001(\tB\030\322\264-\024cosmos.AddressS"
    "tringR\023validatorDstAddress:\014\210\240\037\000\230\240\037\000\350\240\037\000"
    "\"X\n\013DVVTriplets\022I\n\010triplets\030\001 \003(\0132\".cosm"
    "os.staking.v1beta1.DVVTripletB\t\310\336\037\000\250\347\260*\001"
    "R\010triplets\"\376\001\n\nDelegation\022E\n\021delegator_a"
    "ddress\030\001 \001(\tB\030\322\264-\024cosmos.AddressStringR\020"
    "delegatorAddress\022E\n\021validator_address\030\002 "
    "\001(\tB\030\322\264-\024cosmos.AddressStringR\020validator"
    "Address\022T\n\006shares\030\003 \001(\tB<\310\336\037\000\332\336\037&github."
    "com/cosmos/cosmos-sdk/types.Dec\322\264-\ncosmo"
    "s.DecR\006shares:\014\210\240\037\000\230\240\037\000\350\240\037\000\"\210\002\n\023Unbondin"
    "gDelegation\022E\n\021delegator_address\030\001 \001(\tB\030"
    "\322\264-\024cosmos.AddressStringR\020delegatorAddre"
    "ss\022E\n\021validator_address\030\002 \001(\tB\030\322\264-\024cosmo"
    "s.AddressStringR\020validatorAddress\022U\n\007ent"
    "ries\030\003 \003(\01320.cosmos.staking.v1beta1.Unbo"
    "ndingDelegationEntryB\t\310\336\037\000\250\347\260*\001R\007entries"
    ":\014\210\240\037\000\230\240\037\000\350\240\037\000\"\301\003\n\030UnbondingDelegationEn"
    "try\022\'\n\017creation_height\030\001 \001(\003R\016creationHe"
    "ight\022R\n\017completion_time\030\002 \001(\0132\032.google.p"
    "rotobuf.TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\016comple"
    "tionTime\022e\n\017initial_balance\030\003 \001(\tB<\310\336\037\000\332"
    "\336\037&github.com/cosmos/cosmos-sdk/types.In"
    "t\322\264-\ncosmos.IntR\016initialBalance\022V\n\007balan"
    "ce\030\004 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos/cosm"
    "os-sdk/types.Int\322\264-\ncosmos.IntR\007balance\022"
    "!\n\014unbonding_id\030\005 \001(\004R\013unbondingId\022<\n\033un"
    "bonding_on_hold_ref_count\030\006 \001(\003R\027unbondi"
    "ngOnHoldRefCount:\010\230\240\037\000\350\240\037\001\"\277\003\n\021Redelegat"
    "ionEntry\022\'\n\017creation_height\030\001 \001(\003R\016creat"
    "ionHeight\022R\n\017completion_time\030\002 \001(\0132\032.goo"
    "gle.protobuf.TimestampB\r\310\336\037\000\220\337\037\001\250\347\260*\001R\016c"
    "ompletionTime\022e\n\017initial_balance\030\003 \001(\tB<"
    "\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/typ"
    "es.Int\322\264-\ncosmos.IntR\016initialBalance\022[\n\n"
    "shares_dst\030\004 \001(\tB<\310\336\037\000\332\336\037&github.com/cos"
    "mos/cosmos-sdk/types.Dec\322\264-\ncosmos.DecR\t"
    "sharesDst\022!\n\014unbonding_id\030\005 \001(\004R\013unbondi"
    "ngId\022<\n\033unbonding_on_hold_ref_count\030\006 \001("
    "\003R\027unbondingOnHoldRefCount:\010\230\240\037\000\350\240\037\001\"\317\002\n"
    "\014Redelegation\022E\n\021delegator_address\030\001 \001(\t"
    "B\030\322\264-\024cosmos.AddressStringR\020delegatorAdd"
    "ress\022L\n\025validator_src_address\030\002 \001(\tB\030\322\264-"
    "\024cosmos.AddressStringR\023validatorSrcAddre"
    "ss\022L\n\025validator_dst_address\030\003 \001(\tB\030\322\264-\024c"
    "osmos.AddressStringR\023validatorDstAddress"
    "\022N\n\007entries\030\004 \003(\0132).cosmos.staking.v1bet"
    "a1.RedelegationEntryB\t\310\336\037\000\250\347\260*\001R\007entries"
    ":\014\210\240\037\000\230\240\037\000\350\240\037\000\"\227\003\n\006Params\022O\n\016unbonding_t"
    "ime\030\001 \001(\0132\031.google.protobuf.DurationB\r\310\336"
    "\037\000\230\337\037\001\250\347\260*\001R\runbondingTime\022%\n\016max_valida"
    "tors\030\002 \001(\rR\rmaxValidators\022\037\n\013max_entries"
    "\030\003 \001(\rR\nmaxEntries\022-\n\022historical_entries"
    "\030\004 \001(\rR\021historicalEntries\022\035\n\nbond_denom\030"
    "\005 \001(\tR\tbondDenom\022|\n\023min_commission_rate\030"
    "\006 \001(\tBL\310\336\037\000\332\336\037&github.com/cosmos/cosmos-"
    "sdk/types.Dec\362\336\037\032yaml:\"min_commission_ra"
    "te\"R\021minCommissionRate:(\230\240\037\000\350\240\037\001\212\347\260*\033cos"
    "mos-sdk/x/staking/Params\"\255\001\n\022DelegationR"
    "esponse\022M\n\ndelegation\030\001 \001(\0132\".cosmos.sta"
    "king.v1beta1.DelegationB\t\310\336\037\000\250\347\260*\001R\ndele"
    "gation\022>\n\007balance\030\002 \001(\0132\031.cosmos.base.v1"
    "beta1.CoinB\t\310\336\037\000\250\347\260*\001R\007balance:\010\230\240\037\000\350\240\037\000"
    "\"\336\001\n\031RedelegationEntryResponse\022c\n\022redele"
    "gation_entry\030\001 \001(\0132).cosmos.staking.v1be"
    "ta1.RedelegationEntryB\t\310\336\037\000\250\347\260*\001R\021redele"
    "gationEntry\022V\n\007balance\030\004 \001(\tB<\310\336\037\000\332\336\037&gi"
    "thub.com/cosmos/cosmos-sdk/types.Int\322\264-\n"
    "cosmos.IntR\007balance:\004\350\240\037\001\"\311\001\n\024Redelegati"
    "onResponse\022S\n\014redelegation\030\001 \001(\0132$.cosmo"
    "s.staking.v1beta1.RedelegationB\t\310\336\037\000\250\347\260*"
    "\001R\014redelegation\022V\n\007entries\030\002 \003(\01321.cosmo"
    "s.staking.v1beta1.RedelegationEntryRespo"
    "nseB\t\310\336\037\000\250\347\260*\001R\007entries:\004\350\240\037\000\"\216\002\n\004Pool\022\202"
    "\001\n\021not_bonded_tokens\030\001 \001(\tBV\310\336\037\000\332\336\037&gith"
    "ub.com/cosmos/cosmos-sdk/types.Int\352\336\037\021no"
    "t_bonded_tokens\322\264-\ncosmos.Int\250\347\260*\001R\017notB"
    "ondedTokens\022w\n\rbonded_tokens\030\002 \001(\tBR\310\336\037\000"
    "\332\336\037&github.com/cosmos/cosmos-sdk/types.I"
    "nt\352\336\037\rbonded_tokens\322\264-\ncosmos.Int\250\347\260*\001R\014"
    "bondedTokens:\010\350\240\037\001\360\240\037\001\"Y\n\020ValidatorUpdat"
    "es\022E\n\007updates\030\001 \003(\0132 .tendermint.abci.Va"
    "lidatorUpdateB\t\310\336\037\000\250\347\260*\001R\007updates*\266\001\n\nBo"
    "ndStatus\022,\n\027BOND_STATUS_UNSPECIFIED\020\000\032\017\212"
    "\235 \013Unspecified\022&\n\024BOND_STATUS_UNBONDED\020\001"
    "\032\014\212\235 \010Unbonded\022(\n\025BOND_STATUS_UNBONDING\020"
    "\002\032\r\212\235 \tUnbonding\022\"\n\022BOND_STATUS_BONDED\020\003"
    "\032\n\212\235 \006Bonded\032\004\210\243\036\000*]\n\nInfraction\022\032\n\026INFR"
    "ACTION_UNSPECIFIED\020\000\022\032\n\026INFRACTION_DOUBL"
    "E_SIGN\020\001\022\027\n\023INFRACTION_DOWNTIME\020\002B\322\001\n\032co"
    "m.cosmos.staking.v1beta1B\014StakingProtoP\001"
    "Z,github.com/cosmos/cosmos-sdk/x/staking"
    "/types\242\002\003CSX\252\002\026Cosmos.Staking.V1beta1\312\002\026"
    "Cosmos\\Staking\\V1beta1\342\002\"Cosmos\\Staking\\"
    "V1beta1\\GPBMetadata\352\002\030Cosmos::Staking::V"
    "1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_deps[9] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2fabci_2ftypes_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto = {
    false,
    false,
    6414,
    descriptor_table_protodef_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto,
    "cosmos/staking/v1beta1/staking.proto",
    &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
    descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_deps,
    9,
    21,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto::offsets,
    file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto,
    file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto,
    file_level_service_descriptors_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter() {
  return &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto(&descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto);
namespace cosmos {
namespace staking {
namespace v1beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BondStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto);
  return file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[0];
}
bool BondStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Infraction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto);
  return file_level_enum_descriptors_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[1];
}
bool Infraction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class HistoricalInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<HistoricalInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HistoricalInfo, _impl_._has_bits_);
  static const ::tendermint::types::Header& header(const HistoricalInfo* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::Header&
HistoricalInfo::_Internal::header(const HistoricalInfo* msg) {
  return *msg->_impl_.header_;
}
void HistoricalInfo::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HistoricalInfo::HistoricalInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.HistoricalInfo)
}
HistoricalInfo::HistoricalInfo(const HistoricalInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistoricalInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.valset_){from._impl_.valset_}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::tendermint::types::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.HistoricalInfo)
}

inline void HistoricalInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.valset_){arena}
    , decltype(_impl_.header_){nullptr}
  };
}

HistoricalInfo::~HistoricalInfo() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.HistoricalInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoricalInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_valset()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void HistoricalInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistoricalInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.HistoricalInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_valset()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoricalInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.Validator valset = 2 [json_name = "valset", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_valset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HistoricalInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.HistoricalInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.staking.v1beta1.Validator valset = 2 [json_name = "valset", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_valset_size()); i < n; i++) {
    const auto& repfield = this->_internal_valset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.HistoricalInfo)
  return target;
}

::size_t HistoricalInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.HistoricalInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.Validator valset = 2 [json_name = "valset", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_valset_size();
  for (const auto& msg : this->_internal_valset()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.types.Header header = 1 [json_name = "header", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistoricalInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistoricalInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistoricalInfo::GetClassData() const { return &_class_data_; }


void HistoricalInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistoricalInfo*>(&to_msg);
  auto& from = static_cast<const HistoricalInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.HistoricalInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_valset()->MergeFrom(from._internal_valset());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_header()->::tendermint::types::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistoricalInfo::CopyFrom(const HistoricalInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.HistoricalInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalInfo::IsInitialized() const {
  return true;
}

void HistoricalInfo::InternalSwap(HistoricalInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_valset()->InternalSwap(other->_internal_mutable_valset());
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoricalInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[0]);
}
// ===================================================================

class CommissionRates::_Internal {
 public:
};

CommissionRates::CommissionRates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.CommissionRates)
}
CommissionRates::CommissionRates(const CommissionRates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommissionRates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rate_) {}

    , decltype(_impl_.max_rate_) {}

    , decltype(_impl_.max_change_rate_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rate().empty()) {
    _this->_impl_.rate_.Set(from._internal_rate(), _this->GetArenaForAllocation());
  }
  _impl_.max_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.max_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_max_rate().empty()) {
    _this->_impl_.max_rate_.Set(from._internal_max_rate(), _this->GetArenaForAllocation());
  }
  _impl_.max_change_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.max_change_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_max_change_rate().empty()) {
    _this->_impl_.max_change_rate_.Set(from._internal_max_change_rate(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.CommissionRates)
}

inline void CommissionRates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rate_) {}

    , decltype(_impl_.max_rate_) {}

    , decltype(_impl_.max_change_rate_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.max_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.max_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.max_change_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.max_change_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommissionRates::~CommissionRates() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.CommissionRates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommissionRates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rate_.Destroy();
  _impl_.max_rate_.Destroy();
  _impl_.max_change_rate_.Destroy();
}

void CommissionRates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommissionRates::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.CommissionRates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rate_.ClearToEmpty();
  _impl_.max_rate_.ClearToEmpty();
  _impl_.max_change_rate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommissionRates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rate = 1 [json_name = "rate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.CommissionRates.rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string max_rate = 2 [json_name = "maxRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_max_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.CommissionRates.max_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string max_change_rate = 3 [json_name = "maxChangeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_max_change_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.CommissionRates.max_change_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommissionRates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.CommissionRates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rate = 1 [json_name = "rate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_rate().empty()) {
    const std::string& _s = this->_internal_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.CommissionRates.rate");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string max_rate = 2 [json_name = "maxRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_max_rate().empty()) {
    const std::string& _s = this->_internal_max_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.CommissionRates.max_rate");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string max_change_rate = 3 [json_name = "maxChangeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_max_change_rate().empty()) {
    const std::string& _s = this->_internal_max_change_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.CommissionRates.max_change_rate");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.CommissionRates)
  return target;
}

::size_t CommissionRates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.CommissionRates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rate = 1 [json_name = "rate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_rate());
  }

  // string max_rate = 2 [json_name = "maxRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_max_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_max_rate());
  }

  // string max_change_rate = 3 [json_name = "maxChangeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_max_change_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_max_change_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommissionRates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommissionRates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommissionRates::GetClassData() const { return &_class_data_; }


void CommissionRates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommissionRates*>(&to_msg);
  auto& from = static_cast<const CommissionRates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.CommissionRates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rate().empty()) {
    _this->_internal_set_rate(from._internal_rate());
  }
  if (!from._internal_max_rate().empty()) {
    _this->_internal_set_max_rate(from._internal_max_rate());
  }
  if (!from._internal_max_change_rate().empty()) {
    _this->_internal_set_max_change_rate(from._internal_max_change_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommissionRates::CopyFrom(const CommissionRates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.CommissionRates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommissionRates::IsInitialized() const {
  return true;
}

void CommissionRates::InternalSwap(CommissionRates* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rate_, lhs_arena,
                                       &other->_impl_.rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.max_rate_, lhs_arena,
                                       &other->_impl_.max_rate_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.max_change_rate_, lhs_arena,
                                       &other->_impl_.max_change_rate_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommissionRates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[1]);
}
// ===================================================================

class Commission::_Internal {
 public:
  using HasBits = decltype(std::declval<Commission>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Commission, _impl_._has_bits_);
  static const ::cosmos::staking::v1beta1::CommissionRates& commission_rates(const Commission* msg);
  static void set_has_commission_rates(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const Commission* msg);
  static void set_has_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::staking::v1beta1::CommissionRates&
Commission::_Internal::commission_rates(const Commission* msg) {
  return *msg->_impl_.commission_rates_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Commission::_Internal::update_time(const Commission* msg) {
  return *msg->_impl_.update_time_;
}
void Commission::clear_update_time() {
  if (_impl_.update_time_ != nullptr) _impl_.update_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Commission::Commission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.Commission)
}
Commission::Commission(const Commission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Commission* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commission_rates_){nullptr}
    , decltype(_impl_.update_time_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.commission_rates_ = new ::cosmos::staking::v1beta1::CommissionRates(*from._impl_.commission_rates_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.update_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.update_time_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.Commission)
}

inline void Commission::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commission_rates_){nullptr}
    , decltype(_impl_.update_time_){nullptr}
  };
}

Commission::~Commission() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.Commission)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Commission::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.commission_rates_;
  if (this != internal_default_instance()) delete _impl_.update_time_;
}

void Commission::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Commission::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.Commission)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.commission_rates_ != nullptr);
      _impl_.commission_rates_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.update_time_ != nullptr);
      _impl_.update_time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Commission::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.staking.v1beta1.CommissionRates commission_rates = 1 [json_name = "commissionRates", (.gogoproto.nullable) = false, (.gogoproto.embed) = true, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_commission_rates(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp update_time = 2 [json_name = "updateTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Commission::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.Commission)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.staking.v1beta1.CommissionRates commission_rates = 1 [json_name = "commissionRates", (.gogoproto.nullable) = false, (.gogoproto.embed) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::commission_rates(this),
        _Internal::commission_rates(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 2 [json_name = "updateTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update_time(this),
        _Internal::update_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.Commission)
  return target;
}

::size_t Commission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.Commission)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.staking.v1beta1.CommissionRates commission_rates = 1 [json_name = "commissionRates", (.gogoproto.nullable) = false, (.gogoproto.embed) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commission_rates_);
    }

    // .google.protobuf.Timestamp update_time = 2 [json_name = "updateTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Commission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Commission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Commission::GetClassData() const { return &_class_data_; }


void Commission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Commission*>(&to_msg);
  auto& from = static_cast<const Commission&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.Commission)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_commission_rates()->::cosmos::staking::v1beta1::CommissionRates::MergeFrom(
          from._internal_commission_rates());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_update_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Commission::CopyFrom(const Commission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.Commission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commission::IsInitialized() const {
  return true;
}

void Commission::InternalSwap(Commission* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Commission, _impl_.update_time_)
      + sizeof(Commission::_impl_.update_time_)
      - PROTOBUF_FIELD_OFFSET(Commission, _impl_.commission_rates_)>(
          reinterpret_cast<char*>(&_impl_.commission_rates_),
          reinterpret_cast<char*>(&other->_impl_.commission_rates_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Commission::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[2]);
}
// ===================================================================

class Description::_Internal {
 public:
};

Description::Description(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.Description)
}
Description::Description(const Description& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Description* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.moniker_) {}

    , decltype(_impl_.identity_) {}

    , decltype(_impl_.website_) {}

    , decltype(_impl_.security_contact_) {}

    , decltype(_impl_.details_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_moniker().empty()) {
    _this->_impl_.moniker_.Set(from._internal_moniker(), _this->GetArenaForAllocation());
  }
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identity().empty()) {
    _this->_impl_.identity_.Set(from._internal_identity(), _this->GetArenaForAllocation());
  }
  _impl_.website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.website_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_website().empty()) {
    _this->_impl_.website_.Set(from._internal_website(), _this->GetArenaForAllocation());
  }
  _impl_.security_contact_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.security_contact_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_security_contact().empty()) {
    _this->_impl_.security_contact_.Set(from._internal_security_contact(), _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.Description)
}

inline void Description::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.moniker_) {}

    , decltype(_impl_.identity_) {}

    , decltype(_impl_.website_) {}

    , decltype(_impl_.security_contact_) {}

    , decltype(_impl_.details_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.moniker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.moniker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.website_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.website_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.security_contact_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.security_contact_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Description::~Description() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.Description)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Description::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.moniker_.Destroy();
  _impl_.identity_.Destroy();
  _impl_.website_.Destroy();
  _impl_.security_contact_.Destroy();
  _impl_.details_.Destroy();
}

void Description::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Description::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.Description)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.moniker_.ClearToEmpty();
  _impl_.identity_.ClearToEmpty();
  _impl_.website_.ClearToEmpty();
  _impl_.security_contact_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Description::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string moniker = 1 [json_name = "moniker"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_moniker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Description.moniker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string identity = 2 [json_name = "identity"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Description.identity"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string website = 3 [json_name = "website"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_website();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Description.website"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string security_contact = 4 [json_name = "securityContact"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_security_contact();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Description.security_contact"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string details = 5 [json_name = "details"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Description.details"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Description::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.Description)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string moniker = 1 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    const std::string& _s = this->_internal_moniker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Description.moniker");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string identity = 2 [json_name = "identity"];
  if (!this->_internal_identity().empty()) {
    const std::string& _s = this->_internal_identity();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Description.identity");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string website = 3 [json_name = "website"];
  if (!this->_internal_website().empty()) {
    const std::string& _s = this->_internal_website();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Description.website");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string security_contact = 4 [json_name = "securityContact"];
  if (!this->_internal_security_contact().empty()) {
    const std::string& _s = this->_internal_security_contact();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Description.security_contact");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string details = 5 [json_name = "details"];
  if (!this->_internal_details().empty()) {
    const std::string& _s = this->_internal_details();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Description.details");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.Description)
  return target;
}

::size_t Description::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.Description)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string moniker = 1 [json_name = "moniker"];
  if (!this->_internal_moniker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_moniker());
  }

  // string identity = 2 [json_name = "identity"];
  if (!this->_internal_identity().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identity());
  }

  // string website = 3 [json_name = "website"];
  if (!this->_internal_website().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_website());
  }

  // string security_contact = 4 [json_name = "securityContact"];
  if (!this->_internal_security_contact().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_security_contact());
  }

  // string details = 5 [json_name = "details"];
  if (!this->_internal_details().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_details());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Description::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Description::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Description::GetClassData() const { return &_class_data_; }


void Description::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Description*>(&to_msg);
  auto& from = static_cast<const Description&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.Description)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_moniker().empty()) {
    _this->_internal_set_moniker(from._internal_moniker());
  }
  if (!from._internal_identity().empty()) {
    _this->_internal_set_identity(from._internal_identity());
  }
  if (!from._internal_website().empty()) {
    _this->_internal_set_website(from._internal_website());
  }
  if (!from._internal_security_contact().empty()) {
    _this->_internal_set_security_contact(from._internal_security_contact());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Description::CopyFrom(const Description& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.Description)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Description::IsInitialized() const {
  return true;
}

void Description::InternalSwap(Description* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.moniker_, lhs_arena,
                                       &other->_impl_.moniker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_, lhs_arena,
                                       &other->_impl_.identity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.website_, lhs_arena,
                                       &other->_impl_.website_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.security_contact_, lhs_arena,
                                       &other->_impl_.security_contact_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.details_, lhs_arena,
                                       &other->_impl_.details_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Description::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[3]);
}
// ===================================================================

class Validator::_Internal {
 public:
  using HasBits = decltype(std::declval<Validator>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Validator, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& consensus_pubkey(const Validator* msg);
  static void set_has_consensus_pubkey(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::staking::v1beta1::Description& description(const Validator* msg);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& unbonding_time(const Validator* msg);
  static void set_has_unbonding_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cosmos::staking::v1beta1::Commission& commission(const Validator* msg);
  static void set_has_commission(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Validator::_Internal::consensus_pubkey(const Validator* msg) {
  return *msg->_impl_.consensus_pubkey_;
}
const ::cosmos::staking::v1beta1::Description&
Validator::_Internal::description(const Validator* msg) {
  return *msg->_impl_.description_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Validator::_Internal::unbonding_time(const Validator* msg) {
  return *msg->_impl_.unbonding_time_;
}
const ::cosmos::staking::v1beta1::Commission&
Validator::_Internal::commission(const Validator* msg) {
  return *msg->_impl_.commission_;
}
void Validator::clear_consensus_pubkey() {
  if (_impl_.consensus_pubkey_ != nullptr) _impl_.consensus_pubkey_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Validator::clear_unbonding_time() {
  if (_impl_.unbonding_time_ != nullptr) _impl_.unbonding_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
Validator::Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.Validator)
}
Validator::Validator(const Validator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Validator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unbonding_ids_) { from._impl_.unbonding_ids_ }
    ,/* _impl_._unbonding_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.operator_address_) {}

    , decltype(_impl_.tokens_) {}

    , decltype(_impl_.delegator_shares_) {}

    , decltype(_impl_.min_self_delegation_) {}

    , decltype(_impl_.consensus_pubkey_){nullptr}
    , decltype(_impl_.description_){nullptr}
    , decltype(_impl_.unbonding_time_){nullptr}
    , decltype(_impl_.commission_){nullptr}
    , decltype(_impl_.jailed_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.unbonding_height_) {}

    , decltype(_impl_.unbonding_on_hold_ref_count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.operator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operator_address().empty()) {
    _this->_impl_.operator_address_.Set(from._internal_operator_address(), _this->GetArenaForAllocation());
  }
  _impl_.tokens_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tokens_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tokens().empty()) {
    _this->_impl_.tokens_.Set(from._internal_tokens(), _this->GetArenaForAllocation());
  }
  _impl_.delegator_shares_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_shares_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_shares().empty()) {
    _this->_impl_.delegator_shares_.Set(from._internal_delegator_shares(), _this->GetArenaForAllocation());
  }
  _impl_.min_self_delegation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_self_delegation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_self_delegation().empty()) {
    _this->_impl_.min_self_delegation_.Set(from._internal_min_self_delegation(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.consensus_pubkey_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.consensus_pubkey_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.description_ = new ::cosmos::staking::v1beta1::Description(*from._impl_.description_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.unbonding_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.unbonding_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.commission_ = new ::cosmos::staking::v1beta1::Commission(*from._impl_.commission_);
  }
  ::memcpy(&_impl_.jailed_, &from._impl_.jailed_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.unbonding_on_hold_ref_count_) -
    reinterpret_cast<char*>(&_impl_.jailed_)) + sizeof(_impl_.unbonding_on_hold_ref_count_));
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.Validator)
}

inline void Validator::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unbonding_ids_) { arena }
    ,/* _impl_._unbonding_ids_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.operator_address_) {}

    , decltype(_impl_.tokens_) {}

    , decltype(_impl_.delegator_shares_) {}

    , decltype(_impl_.min_self_delegation_) {}

    , decltype(_impl_.consensus_pubkey_){nullptr}
    , decltype(_impl_.description_){nullptr}
    , decltype(_impl_.unbonding_time_){nullptr}
    , decltype(_impl_.commission_){nullptr}
    , decltype(_impl_.jailed_) { false }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.unbonding_height_) { ::int64_t{0} }

    , decltype(_impl_.unbonding_on_hold_ref_count_) { ::int64_t{0} }

  };
  _impl_.operator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.operator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tokens_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tokens_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.delegator_shares_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_shares_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_self_delegation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_self_delegation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Validator::~Validator() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.Validator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Validator::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unbonding_ids_.~RepeatedField();
  _impl_.operator_address_.Destroy();
  _impl_.tokens_.Destroy();
  _impl_.delegator_shares_.Destroy();
  _impl_.min_self_delegation_.Destroy();
  if (this != internal_default_instance()) delete _impl_.consensus_pubkey_;
  if (this != internal_default_instance()) delete _impl_.description_;
  if (this != internal_default_instance()) delete _impl_.unbonding_time_;
  if (this != internal_default_instance()) delete _impl_.commission_;
}

void Validator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Validator::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.Validator)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_unbonding_ids()->Clear();
  _impl_.operator_address_.ClearToEmpty();
  _impl_.tokens_.ClearToEmpty();
  _impl_.delegator_shares_.ClearToEmpty();
  _impl_.min_self_delegation_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.consensus_pubkey_ != nullptr);
      _impl_.consensus_pubkey_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.description_ != nullptr);
      _impl_.description_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.unbonding_time_ != nullptr);
      _impl_.unbonding_time_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.commission_ != nullptr);
      _impl_.commission_->Clear();
    }
  }
  ::memset(&_impl_.jailed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unbonding_on_hold_ref_count_) -
      reinterpret_cast<char*>(&_impl_.jailed_)) + sizeof(_impl_.unbonding_on_hold_ref_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Validator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string operator_address = 1 [json_name = "operatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_operator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Validator.operator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any consensus_pubkey = 2 [json_name = "consensusPubkey", (.cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_pubkey(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool jailed = 3 [json_name = "jailed"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.jailed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.staking.v1beta1.BondStatus status = 4 [json_name = "status"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::cosmos::staking::v1beta1::BondStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tokens = 5 [json_name = "tokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tokens();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Validator.tokens"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string delegator_shares = 6 [json_name = "delegatorShares", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_delegator_shares();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Validator.delegator_shares"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.staking.v1beta1.Description description = 7 [json_name = "description", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 unbonding_height = 8 [json_name = "unbondingHeight"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.unbonding_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp unbonding_time = 9 [json_name = "unbondingTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbonding_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.staking.v1beta1.Commission commission = 10 [json_name = "commission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_commission(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_self_delegation = 11 [json_name = "minSelfDelegation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_min_self_delegation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Validator.min_self_delegation"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 unbonding_on_hold_ref_count = 12 [json_name = "unbondingOnHoldRefCount"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.unbonding_on_hold_ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 unbonding_ids = 13 [json_name = "unbondingIds"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_unbonding_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 104) {
          _internal_add_unbonding_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Validator::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.Validator)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string operator_address = 1 [json_name = "operatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_operator_address().empty()) {
    const std::string& _s = this->_internal_operator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Validator.operator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any consensus_pubkey = 2 [json_name = "consensusPubkey", (.cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consensus_pubkey(this),
        _Internal::consensus_pubkey(this).GetCachedSize(), target, stream);
  }

  // bool jailed = 3 [json_name = "jailed"];
  if (this->_internal_jailed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_jailed(), target);
  }

  // .cosmos.staking.v1beta1.BondStatus status = 4 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_status(), target);
  }

  // string tokens = 5 [json_name = "tokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_tokens().empty()) {
    const std::string& _s = this->_internal_tokens();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Validator.tokens");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string delegator_shares = 6 [json_name = "delegatorShares", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_delegator_shares().empty()) {
    const std::string& _s = this->_internal_delegator_shares();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Validator.delegator_shares");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .cosmos.staking.v1beta1.Description description = 7 [json_name = "description", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::description(this),
        _Internal::description(this).GetCachedSize(), target, stream);
  }

  // int64 unbonding_height = 8 [json_name = "unbondingHeight"];
  if (this->_internal_unbonding_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        8, this->_internal_unbonding_height(), target);
  }

  // .google.protobuf.Timestamp unbonding_time = 9 [json_name = "unbondingTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::unbonding_time(this),
        _Internal::unbonding_time(this).GetCachedSize(), target, stream);
  }

  // .cosmos.staking.v1beta1.Commission commission = 10 [json_name = "commission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::commission(this),
        _Internal::commission(this).GetCachedSize(), target, stream);
  }

  // string min_self_delegation = 11 [json_name = "minSelfDelegation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_min_self_delegation().empty()) {
    const std::string& _s = this->_internal_min_self_delegation();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Validator.min_self_delegation");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // int64 unbonding_on_hold_ref_count = 12 [json_name = "unbondingOnHoldRefCount"];
  if (this->_internal_unbonding_on_hold_ref_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        12, this->_internal_unbonding_on_hold_ref_count(), target);
  }

  // repeated uint64 unbonding_ids = 13 [json_name = "unbondingIds"];
  {
    int byte_size = _impl_._unbonding_ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(13, _internal_unbonding_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.Validator)
  return target;
}

::size_t Validator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.Validator)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 unbonding_ids = 13 [json_name = "unbondingIds"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_unbonding_ids())
    ;
    _impl_._unbonding_ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string operator_address = 1 [json_name = "operatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_operator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_operator_address());
  }

  // string tokens = 5 [json_name = "tokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_tokens().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tokens());
  }

  // string delegator_shares = 6 [json_name = "delegatorShares", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_delegator_shares().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_shares());
  }

  // string min_self_delegation = 11 [json_name = "minSelfDelegation", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_min_self_delegation().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_self_delegation());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .google.protobuf.Any consensus_pubkey = 2 [json_name = "consensusPubkey", (.cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.consensus_pubkey_);
    }

    // .cosmos.staking.v1beta1.Description description = 7 [json_name = "description", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.description_);
    }

    // .google.protobuf.Timestamp unbonding_time = 9 [json_name = "unbondingTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unbonding_time_);
    }

    // .cosmos.staking.v1beta1.Commission commission = 10 [json_name = "commission", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commission_);
    }

  }
  // bool jailed = 3 [json_name = "jailed"];
  if (this->_internal_jailed() != 0) {
    total_size += 2;
  }

  // .cosmos.staking.v1beta1.BondStatus status = 4 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 unbonding_height = 8 [json_name = "unbondingHeight"];
  if (this->_internal_unbonding_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_unbonding_height());
  }

  // int64 unbonding_on_hold_ref_count = 12 [json_name = "unbondingOnHoldRefCount"];
  if (this->_internal_unbonding_on_hold_ref_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_unbonding_on_hold_ref_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Validator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Validator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Validator::GetClassData() const { return &_class_data_; }


void Validator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Validator*>(&to_msg);
  auto& from = static_cast<const Validator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.Validator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unbonding_ids_.MergeFrom(from._impl_.unbonding_ids_);
  if (!from._internal_operator_address().empty()) {
    _this->_internal_set_operator_address(from._internal_operator_address());
  }
  if (!from._internal_tokens().empty()) {
    _this->_internal_set_tokens(from._internal_tokens());
  }
  if (!from._internal_delegator_shares().empty()) {
    _this->_internal_set_delegator_shares(from._internal_delegator_shares());
  }
  if (!from._internal_min_self_delegation().empty()) {
    _this->_internal_set_min_self_delegation(from._internal_min_self_delegation());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_consensus_pubkey()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_consensus_pubkey());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_description()->::cosmos::staking::v1beta1::Description::MergeFrom(
          from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_unbonding_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_unbonding_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_commission()->::cosmos::staking::v1beta1::Commission::MergeFrom(
          from._internal_commission());
    }
  }
  if (from._internal_jailed() != 0) {
    _this->_internal_set_jailed(from._internal_jailed());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_unbonding_height() != 0) {
    _this->_internal_set_unbonding_height(from._internal_unbonding_height());
  }
  if (from._internal_unbonding_on_hold_ref_count() != 0) {
    _this->_internal_set_unbonding_on_hold_ref_count(from._internal_unbonding_on_hold_ref_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Validator::CopyFrom(const Validator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.Validator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Validator::IsInitialized() const {
  return true;
}

void Validator::InternalSwap(Validator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.unbonding_ids_.InternalSwap(&other->_impl_.unbonding_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operator_address_, lhs_arena,
                                       &other->_impl_.operator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tokens_, lhs_arena,
                                       &other->_impl_.tokens_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_shares_, lhs_arena,
                                       &other->_impl_.delegator_shares_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_self_delegation_, lhs_arena,
                                       &other->_impl_.min_self_delegation_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Validator, _impl_.unbonding_on_hold_ref_count_)
      + sizeof(Validator::_impl_.unbonding_on_hold_ref_count_)
      - PROTOBUF_FIELD_OFFSET(Validator, _impl_.consensus_pubkey_)>(
          reinterpret_cast<char*>(&_impl_.consensus_pubkey_),
          reinterpret_cast<char*>(&other->_impl_.consensus_pubkey_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Validator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[4]);
}
// ===================================================================

class ValAddresses::_Internal {
 public:
};

ValAddresses::ValAddresses(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.ValAddresses)
}
ValAddresses::ValAddresses(const ValAddresses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValAddresses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){from._impl_.addresses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.ValAddresses)
}

inline void ValAddresses::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.addresses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValAddresses::~ValAddresses() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.ValAddresses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValAddresses::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_addresses()->~RepeatedPtrField();
}

void ValAddresses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValAddresses::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.ValAddresses)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_addresses()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValAddresses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string addresses = 1 [json_name = "addresses", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.ValAddresses.addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValAddresses::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.ValAddresses)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1 [json_name = "addresses", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  for (int i = 0, n = this->_internal_addresses_size(); i < n; ++i) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.ValAddresses.addresses");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.ValAddresses)
  return target;
}

::size_t ValAddresses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.ValAddresses)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1 [json_name = "addresses", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_addresses().size());
  for (int i = 0, n = _internal_addresses().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_addresses().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValAddresses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValAddresses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValAddresses::GetClassData() const { return &_class_data_; }


void ValAddresses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValAddresses*>(&to_msg);
  auto& from = static_cast<const ValAddresses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.ValAddresses)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_addresses()->MergeFrom(from._internal_addresses());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValAddresses::CopyFrom(const ValAddresses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.ValAddresses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValAddresses::IsInitialized() const {
  return true;
}

void ValAddresses::InternalSwap(ValAddresses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_addresses()->InternalSwap(
      other->_internal_mutable_addresses());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValAddresses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[5]);
}
// ===================================================================

class DVPair::_Internal {
 public:
};

DVPair::DVPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.DVPair)
}
DVPair::DVPair(const DVPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DVPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_address().empty()) {
    _this->_impl_.delegator_address_.Set(from._internal_delegator_address(), _this->GetArenaForAllocation());
  }
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.DVPair)
}

inline void DVPair::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DVPair::~DVPair() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.DVPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DVPair::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delegator_address_.Destroy();
  _impl_.validator_address_.Destroy();
}

void DVPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DVPair::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.DVPair)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delegator_address_.ClearToEmpty();
  _impl_.validator_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DVPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.DVPair.delegator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.DVPair.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DVPair::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.DVPair)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    const std::string& _s = this->_internal_delegator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.DVPair.delegator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.DVPair.validator_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.DVPair)
  return target;
}

::size_t DVPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.DVPair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_address());
  }

  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DVPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DVPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DVPair::GetClassData() const { return &_class_data_; }


void DVPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DVPair*>(&to_msg);
  auto& from = static_cast<const DVPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.DVPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delegator_address().empty()) {
    _this->_internal_set_delegator_address(from._internal_delegator_address());
  }
  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DVPair::CopyFrom(const DVPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.DVPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DVPair::IsInitialized() const {
  return true;
}

void DVPair::InternalSwap(DVPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_address_, lhs_arena,
                                       &other->_impl_.delegator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DVPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[6]);
}
// ===================================================================

class DVPairs::_Internal {
 public:
};

DVPairs::DVPairs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.DVPairs)
}
DVPairs::DVPairs(const DVPairs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DVPairs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pairs_){from._impl_.pairs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.DVPairs)
}

inline void DVPairs::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pairs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DVPairs::~DVPairs() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.DVPairs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DVPairs::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_pairs()->~RepeatedPtrField();
}

void DVPairs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DVPairs::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.DVPairs)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_pairs()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DVPairs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.staking.v1beta1.DVPair pairs = 1 [json_name = "pairs", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DVPairs::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.DVPairs)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.DVPair pairs = 1 [json_name = "pairs", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.DVPairs)
  return target;
}

::size_t DVPairs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.DVPairs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.DVPair pairs = 1 [json_name = "pairs", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->_internal_pairs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DVPairs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DVPairs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DVPairs::GetClassData() const { return &_class_data_; }


void DVPairs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DVPairs*>(&to_msg);
  auto& from = static_cast<const DVPairs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.DVPairs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pairs()->MergeFrom(from._internal_pairs());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DVPairs::CopyFrom(const DVPairs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.DVPairs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DVPairs::IsInitialized() const {
  return true;
}

void DVPairs::InternalSwap(DVPairs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_pairs()->InternalSwap(other->_internal_mutable_pairs());
}

::PROTOBUF_NAMESPACE_ID::Metadata DVPairs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[7]);
}
// ===================================================================

class DVVTriplet::_Internal {
 public:
};

DVVTriplet::DVVTriplet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.DVVTriplet)
}
DVVTriplet::DVVTriplet(const DVVTriplet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DVVTriplet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_src_address_) {}

    , decltype(_impl_.validator_dst_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_address().empty()) {
    _this->_impl_.delegator_address_.Set(from._internal_delegator_address(), _this->GetArenaForAllocation());
  }
  _impl_.validator_src_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_src_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_src_address().empty()) {
    _this->_impl_.validator_src_address_.Set(from._internal_validator_src_address(), _this->GetArenaForAllocation());
  }
  _impl_.validator_dst_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_dst_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_dst_address().empty()) {
    _this->_impl_.validator_dst_address_.Set(from._internal_validator_dst_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.DVVTriplet)
}

inline void DVVTriplet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_src_address_) {}

    , decltype(_impl_.validator_dst_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validator_src_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_src_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validator_dst_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_dst_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DVVTriplet::~DVVTriplet() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.DVVTriplet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DVVTriplet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delegator_address_.Destroy();
  _impl_.validator_src_address_.Destroy();
  _impl_.validator_dst_address_.Destroy();
}

void DVVTriplet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DVVTriplet::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.DVVTriplet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delegator_address_.ClearToEmpty();
  _impl_.validator_src_address_.ClearToEmpty();
  _impl_.validator_dst_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DVVTriplet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.DVVTriplet.delegator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_validator_src_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.DVVTriplet.validator_src_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_validator_dst_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.DVVTriplet.validator_dst_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DVVTriplet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.DVVTriplet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    const std::string& _s = this->_internal_delegator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.DVVTriplet.delegator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_src_address().empty()) {
    const std::string& _s = this->_internal_validator_src_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.DVVTriplet.validator_src_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_dst_address().empty()) {
    const std::string& _s = this->_internal_validator_dst_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.DVVTriplet.validator_dst_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.DVVTriplet)
  return target;
}

::size_t DVVTriplet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.DVVTriplet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_address());
  }

  // string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_src_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_src_address());
  }

  // string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_dst_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_dst_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DVVTriplet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DVVTriplet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DVVTriplet::GetClassData() const { return &_class_data_; }


void DVVTriplet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DVVTriplet*>(&to_msg);
  auto& from = static_cast<const DVVTriplet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.DVVTriplet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delegator_address().empty()) {
    _this->_internal_set_delegator_address(from._internal_delegator_address());
  }
  if (!from._internal_validator_src_address().empty()) {
    _this->_internal_set_validator_src_address(from._internal_validator_src_address());
  }
  if (!from._internal_validator_dst_address().empty()) {
    _this->_internal_set_validator_dst_address(from._internal_validator_dst_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DVVTriplet::CopyFrom(const DVVTriplet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.DVVTriplet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DVVTriplet::IsInitialized() const {
  return true;
}

void DVVTriplet::InternalSwap(DVVTriplet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_address_, lhs_arena,
                                       &other->_impl_.delegator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_src_address_, lhs_arena,
                                       &other->_impl_.validator_src_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_dst_address_, lhs_arena,
                                       &other->_impl_.validator_dst_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DVVTriplet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[8]);
}
// ===================================================================

class DVVTriplets::_Internal {
 public:
};

DVVTriplets::DVVTriplets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.DVVTriplets)
}
DVVTriplets::DVVTriplets(const DVVTriplets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DVVTriplets* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.triplets_){from._impl_.triplets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.DVVTriplets)
}

inline void DVVTriplets::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.triplets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DVVTriplets::~DVVTriplets() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.DVVTriplets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DVVTriplets::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_triplets()->~RepeatedPtrField();
}

void DVVTriplets::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DVVTriplets::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.DVVTriplets)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_triplets()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DVVTriplets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.staking.v1beta1.DVVTriplet triplets = 1 [json_name = "triplets", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triplets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DVVTriplets::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.DVVTriplets)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.DVVTriplet triplets = 1 [json_name = "triplets", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triplets_size()); i < n; i++) {
    const auto& repfield = this->_internal_triplets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.DVVTriplets)
  return target;
}

::size_t DVVTriplets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.DVVTriplets)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.DVVTriplet triplets = 1 [json_name = "triplets", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_triplets_size();
  for (const auto& msg : this->_internal_triplets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DVVTriplets::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DVVTriplets::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DVVTriplets::GetClassData() const { return &_class_data_; }


void DVVTriplets::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DVVTriplets*>(&to_msg);
  auto& from = static_cast<const DVVTriplets&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.DVVTriplets)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_triplets()->MergeFrom(from._internal_triplets());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DVVTriplets::CopyFrom(const DVVTriplets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.DVVTriplets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DVVTriplets::IsInitialized() const {
  return true;
}

void DVVTriplets::InternalSwap(DVVTriplets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_triplets()->InternalSwap(other->_internal_mutable_triplets());
}

::PROTOBUF_NAMESPACE_ID::Metadata DVVTriplets::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[9]);
}
// ===================================================================

class Delegation::_Internal {
 public:
};

Delegation::Delegation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.Delegation)
}
Delegation::Delegation(const Delegation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Delegation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.shares_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_address().empty()) {
    _this->_impl_.delegator_address_.Set(from._internal_delegator_address(), _this->GetArenaForAllocation());
  }
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  _impl_.shares_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shares_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shares().empty()) {
    _this->_impl_.shares_.Set(from._internal_shares(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.Delegation)
}

inline void Delegation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.shares_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shares_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shares_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Delegation::~Delegation() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.Delegation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Delegation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.delegator_address_.Destroy();
  _impl_.validator_address_.Destroy();
  _impl_.shares_.Destroy();
}

void Delegation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Delegation::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.Delegation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delegator_address_.ClearToEmpty();
  _impl_.validator_address_.ClearToEmpty();
  _impl_.shares_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Delegation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Delegation.delegator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Delegation.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string shares = 3 [json_name = "shares", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_shares();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Delegation.shares"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Delegation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.Delegation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    const std::string& _s = this->_internal_delegator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Delegation.delegator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Delegation.validator_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string shares = 3 [json_name = "shares", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_shares().empty()) {
    const std::string& _s = this->_internal_shares();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Delegation.shares");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.Delegation)
  return target;
}

::size_t Delegation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.Delegation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_address());
  }

  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  // string shares = 3 [json_name = "shares", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_shares().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_shares());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Delegation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Delegation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Delegation::GetClassData() const { return &_class_data_; }


void Delegation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Delegation*>(&to_msg);
  auto& from = static_cast<const Delegation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.Delegation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_delegator_address().empty()) {
    _this->_internal_set_delegator_address(from._internal_delegator_address());
  }
  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_shares().empty()) {
    _this->_internal_set_shares(from._internal_shares());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Delegation::CopyFrom(const Delegation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.Delegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delegation::IsInitialized() const {
  return true;
}

void Delegation::InternalSwap(Delegation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_address_, lhs_arena,
                                       &other->_impl_.delegator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shares_, lhs_arena,
                                       &other->_impl_.shares_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Delegation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[10]);
}
// ===================================================================

class UnbondingDelegation::_Internal {
 public:
};

UnbondingDelegation::UnbondingDelegation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.UnbondingDelegation)
}
UnbondingDelegation::UnbondingDelegation(const UnbondingDelegation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnbondingDelegation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_address().empty()) {
    _this->_impl_.delegator_address_.Set(from._internal_delegator_address(), _this->GetArenaForAllocation());
  }
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.UnbondingDelegation)
}

inline void UnbondingDelegation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnbondingDelegation::~UnbondingDelegation() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.UnbondingDelegation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnbondingDelegation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_entries()->~RepeatedPtrField();
  _impl_.delegator_address_.Destroy();
  _impl_.validator_address_.Destroy();
}

void UnbondingDelegation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnbondingDelegation::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.UnbondingDelegation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_entries()->Clear();
  _impl_.delegator_address_.ClearToEmpty();
  _impl_.validator_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnbondingDelegation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.UnbondingDelegation.delegator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.UnbondingDelegation.validator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnbondingDelegation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.UnbondingDelegation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    const std::string& _s = this->_internal_delegator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.UnbondingDelegation.delegator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.UnbondingDelegation.validator_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.UnbondingDelegation)
  return target;
}

::size_t UnbondingDelegation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.UnbondingDelegation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.UnbondingDelegationEntry entries = 3 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_address());
  }

  // string validator_address = 2 [json_name = "validatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnbondingDelegation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnbondingDelegation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnbondingDelegation::GetClassData() const { return &_class_data_; }


void UnbondingDelegation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnbondingDelegation*>(&to_msg);
  auto& from = static_cast<const UnbondingDelegation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.UnbondingDelegation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
  if (!from._internal_delegator_address().empty()) {
    _this->_internal_set_delegator_address(from._internal_delegator_address());
  }
  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnbondingDelegation::CopyFrom(const UnbondingDelegation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.UnbondingDelegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnbondingDelegation::IsInitialized() const {
  return true;
}

void UnbondingDelegation::InternalSwap(UnbondingDelegation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_entries()->InternalSwap(other->_internal_mutable_entries());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_address_, lhs_arena,
                                       &other->_impl_.delegator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnbondingDelegation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[11]);
}
// ===================================================================

class UnbondingDelegationEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<UnbondingDelegationEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnbondingDelegationEntry, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& completion_time(const UnbondingDelegationEntry* msg);
  static void set_has_completion_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UnbondingDelegationEntry::_Internal::completion_time(const UnbondingDelegationEntry* msg) {
  return *msg->_impl_.completion_time_;
}
void UnbondingDelegationEntry::clear_completion_time() {
  if (_impl_.completion_time_ != nullptr) _impl_.completion_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UnbondingDelegationEntry::UnbondingDelegationEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.UnbondingDelegationEntry)
}
UnbondingDelegationEntry::UnbondingDelegationEntry(const UnbondingDelegationEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnbondingDelegationEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initial_balance_) {}

    , decltype(_impl_.balance_) {}

    , decltype(_impl_.completion_time_){nullptr}
    , decltype(_impl_.creation_height_) {}

    , decltype(_impl_.unbonding_id_) {}

    , decltype(_impl_.unbonding_on_hold_ref_count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.initial_balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_balance().empty()) {
    _this->_impl_.initial_balance_.Set(from._internal_initial_balance(), _this->GetArenaForAllocation());
  }
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.completion_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.completion_time_);
  }
  ::memcpy(&_impl_.creation_height_, &from._impl_.creation_height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.unbonding_on_hold_ref_count_) -
    reinterpret_cast<char*>(&_impl_.creation_height_)) + sizeof(_impl_.unbonding_on_hold_ref_count_));
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.UnbondingDelegationEntry)
}

inline void UnbondingDelegationEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initial_balance_) {}

    , decltype(_impl_.balance_) {}

    , decltype(_impl_.completion_time_){nullptr}
    , decltype(_impl_.creation_height_) { ::int64_t{0} }

    , decltype(_impl_.unbonding_id_) { ::uint64_t{0u} }

    , decltype(_impl_.unbonding_on_hold_ref_count_) { ::int64_t{0} }

  };
  _impl_.initial_balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UnbondingDelegationEntry::~UnbondingDelegationEntry() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.UnbondingDelegationEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnbondingDelegationEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.initial_balance_.Destroy();
  _impl_.balance_.Destroy();
  if (this != internal_default_instance()) delete _impl_.completion_time_;
}

void UnbondingDelegationEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnbondingDelegationEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.UnbondingDelegationEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initial_balance_.ClearToEmpty();
  _impl_.balance_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.completion_time_ != nullptr);
    _impl_.completion_time_->Clear();
  }
  ::memset(&_impl_.creation_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unbonding_on_hold_ref_count_) -
      reinterpret_cast<char*>(&_impl_.creation_height_)) + sizeof(_impl_.unbonding_on_hold_ref_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnbondingDelegationEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 creation_height = 1 [json_name = "creationHeight"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.creation_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp completion_time = 2 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_completion_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string initial_balance = 3 [json_name = "initialBalance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_initial_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.UnbondingDelegationEntry.initial_balance"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.UnbondingDelegationEntry.balance"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 unbonding_id = 5 [json_name = "unbondingId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.unbonding_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 unbonding_on_hold_ref_count = 6 [json_name = "unbondingOnHoldRefCount"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.unbonding_on_hold_ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnbondingDelegationEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.UnbondingDelegationEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 creation_height = 1 [json_name = "creationHeight"];
  if (this->_internal_creation_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_creation_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp completion_time = 2 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::completion_time(this),
        _Internal::completion_time(this).GetCachedSize(), target, stream);
  }

  // string initial_balance = 3 [json_name = "initialBalance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_initial_balance().empty()) {
    const std::string& _s = this->_internal_initial_balance();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.UnbondingDelegationEntry.initial_balance");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_balance().empty()) {
    const std::string& _s = this->_internal_balance();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.UnbondingDelegationEntry.balance");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 unbonding_id = 5 [json_name = "unbondingId"];
  if (this->_internal_unbonding_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_unbonding_id(), target);
  }

  // int64 unbonding_on_hold_ref_count = 6 [json_name = "unbondingOnHoldRefCount"];
  if (this->_internal_unbonding_on_hold_ref_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_unbonding_on_hold_ref_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.UnbondingDelegationEntry)
  return target;
}

::size_t UnbondingDelegationEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.UnbondingDelegationEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string initial_balance = 3 [json_name = "initialBalance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_initial_balance().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initial_balance());
  }

  // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_balance().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_balance());
  }

  // .google.protobuf.Timestamp completion_time = 2 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.completion_time_);
  }

  // int64 creation_height = 1 [json_name = "creationHeight"];
  if (this->_internal_creation_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_creation_height());
  }

  // uint64 unbonding_id = 5 [json_name = "unbondingId"];
  if (this->_internal_unbonding_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_unbonding_id());
  }

  // int64 unbonding_on_hold_ref_count = 6 [json_name = "unbondingOnHoldRefCount"];
  if (this->_internal_unbonding_on_hold_ref_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_unbonding_on_hold_ref_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnbondingDelegationEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnbondingDelegationEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnbondingDelegationEntry::GetClassData() const { return &_class_data_; }


void UnbondingDelegationEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnbondingDelegationEntry*>(&to_msg);
  auto& from = static_cast<const UnbondingDelegationEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.UnbondingDelegationEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_initial_balance().empty()) {
    _this->_internal_set_initial_balance(from._internal_initial_balance());
  }
  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_completion_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_completion_time());
  }
  if (from._internal_creation_height() != 0) {
    _this->_internal_set_creation_height(from._internal_creation_height());
  }
  if (from._internal_unbonding_id() != 0) {
    _this->_internal_set_unbonding_id(from._internal_unbonding_id());
  }
  if (from._internal_unbonding_on_hold_ref_count() != 0) {
    _this->_internal_set_unbonding_on_hold_ref_count(from._internal_unbonding_on_hold_ref_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnbondingDelegationEntry::CopyFrom(const UnbondingDelegationEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.UnbondingDelegationEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnbondingDelegationEntry::IsInitialized() const {
  return true;
}

void UnbondingDelegationEntry::InternalSwap(UnbondingDelegationEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initial_balance_, lhs_arena,
                                       &other->_impl_.initial_balance_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.balance_, lhs_arena,
                                       &other->_impl_.balance_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnbondingDelegationEntry, _impl_.unbonding_on_hold_ref_count_)
      + sizeof(UnbondingDelegationEntry::_impl_.unbonding_on_hold_ref_count_)
      - PROTOBUF_FIELD_OFFSET(UnbondingDelegationEntry, _impl_.completion_time_)>(
          reinterpret_cast<char*>(&_impl_.completion_time_),
          reinterpret_cast<char*>(&other->_impl_.completion_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnbondingDelegationEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[12]);
}
// ===================================================================

class RedelegationEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<RedelegationEntry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedelegationEntry, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& completion_time(const RedelegationEntry* msg);
  static void set_has_completion_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RedelegationEntry::_Internal::completion_time(const RedelegationEntry* msg) {
  return *msg->_impl_.completion_time_;
}
void RedelegationEntry::clear_completion_time() {
  if (_impl_.completion_time_ != nullptr) _impl_.completion_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RedelegationEntry::RedelegationEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.RedelegationEntry)
}
RedelegationEntry::RedelegationEntry(const RedelegationEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedelegationEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initial_balance_) {}

    , decltype(_impl_.shares_dst_) {}

    , decltype(_impl_.completion_time_){nullptr}
    , decltype(_impl_.creation_height_) {}

    , decltype(_impl_.unbonding_id_) {}

    , decltype(_impl_.unbonding_on_hold_ref_count_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.initial_balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_balance().empty()) {
    _this->_impl_.initial_balance_.Set(from._internal_initial_balance(), _this->GetArenaForAllocation());
  }
  _impl_.shares_dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shares_dst_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shares_dst().empty()) {
    _this->_impl_.shares_dst_.Set(from._internal_shares_dst(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.completion_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.completion_time_);
  }
  ::memcpy(&_impl_.creation_height_, &from._impl_.creation_height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.unbonding_on_hold_ref_count_) -
    reinterpret_cast<char*>(&_impl_.creation_height_)) + sizeof(_impl_.unbonding_on_hold_ref_count_));
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.RedelegationEntry)
}

inline void RedelegationEntry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initial_balance_) {}

    , decltype(_impl_.shares_dst_) {}

    , decltype(_impl_.completion_time_){nullptr}
    , decltype(_impl_.creation_height_) { ::int64_t{0} }

    , decltype(_impl_.unbonding_id_) { ::uint64_t{0u} }

    , decltype(_impl_.unbonding_on_hold_ref_count_) { ::int64_t{0} }

  };
  _impl_.initial_balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.initial_balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.shares_dst_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.shares_dst_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RedelegationEntry::~RedelegationEntry() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.RedelegationEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedelegationEntry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.initial_balance_.Destroy();
  _impl_.shares_dst_.Destroy();
  if (this != internal_default_instance()) delete _impl_.completion_time_;
}

void RedelegationEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedelegationEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.RedelegationEntry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initial_balance_.ClearToEmpty();
  _impl_.shares_dst_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.completion_time_ != nullptr);
    _impl_.completion_time_->Clear();
  }
  ::memset(&_impl_.creation_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unbonding_on_hold_ref_count_) -
      reinterpret_cast<char*>(&_impl_.creation_height_)) + sizeof(_impl_.unbonding_on_hold_ref_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedelegationEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 creation_height = 1 [json_name = "creationHeight"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.creation_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp completion_time = 2 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_completion_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string initial_balance = 3 [json_name = "initialBalance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_initial_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.RedelegationEntry.initial_balance"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string shares_dst = 4 [json_name = "sharesDst", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_shares_dst();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.RedelegationEntry.shares_dst"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 unbonding_id = 5 [json_name = "unbondingId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.unbonding_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 unbonding_on_hold_ref_count = 6 [json_name = "unbondingOnHoldRefCount"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.unbonding_on_hold_ref_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedelegationEntry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.RedelegationEntry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 creation_height = 1 [json_name = "creationHeight"];
  if (this->_internal_creation_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_creation_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp completion_time = 2 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::completion_time(this),
        _Internal::completion_time(this).GetCachedSize(), target, stream);
  }

  // string initial_balance = 3 [json_name = "initialBalance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_initial_balance().empty()) {
    const std::string& _s = this->_internal_initial_balance();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.RedelegationEntry.initial_balance");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string shares_dst = 4 [json_name = "sharesDst", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_shares_dst().empty()) {
    const std::string& _s = this->_internal_shares_dst();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.RedelegationEntry.shares_dst");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 unbonding_id = 5 [json_name = "unbondingId"];
  if (this->_internal_unbonding_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_unbonding_id(), target);
  }

  // int64 unbonding_on_hold_ref_count = 6 [json_name = "unbondingOnHoldRefCount"];
  if (this->_internal_unbonding_on_hold_ref_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_unbonding_on_hold_ref_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.RedelegationEntry)
  return target;
}

::size_t RedelegationEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.RedelegationEntry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string initial_balance = 3 [json_name = "initialBalance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_initial_balance().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_initial_balance());
  }

  // string shares_dst = 4 [json_name = "sharesDst", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_shares_dst().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_shares_dst());
  }

  // .google.protobuf.Timestamp completion_time = 2 [json_name = "completionTime", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.completion_time_);
  }

  // int64 creation_height = 1 [json_name = "creationHeight"];
  if (this->_internal_creation_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_creation_height());
  }

  // uint64 unbonding_id = 5 [json_name = "unbondingId"];
  if (this->_internal_unbonding_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_unbonding_id());
  }

  // int64 unbonding_on_hold_ref_count = 6 [json_name = "unbondingOnHoldRefCount"];
  if (this->_internal_unbonding_on_hold_ref_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_unbonding_on_hold_ref_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedelegationEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedelegationEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedelegationEntry::GetClassData() const { return &_class_data_; }


void RedelegationEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedelegationEntry*>(&to_msg);
  auto& from = static_cast<const RedelegationEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.RedelegationEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_initial_balance().empty()) {
    _this->_internal_set_initial_balance(from._internal_initial_balance());
  }
  if (!from._internal_shares_dst().empty()) {
    _this->_internal_set_shares_dst(from._internal_shares_dst());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_completion_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_completion_time());
  }
  if (from._internal_creation_height() != 0) {
    _this->_internal_set_creation_height(from._internal_creation_height());
  }
  if (from._internal_unbonding_id() != 0) {
    _this->_internal_set_unbonding_id(from._internal_unbonding_id());
  }
  if (from._internal_unbonding_on_hold_ref_count() != 0) {
    _this->_internal_set_unbonding_on_hold_ref_count(from._internal_unbonding_on_hold_ref_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedelegationEntry::CopyFrom(const RedelegationEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.RedelegationEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedelegationEntry::IsInitialized() const {
  return true;
}

void RedelegationEntry::InternalSwap(RedelegationEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.initial_balance_, lhs_arena,
                                       &other->_impl_.initial_balance_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.shares_dst_, lhs_arena,
                                       &other->_impl_.shares_dst_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedelegationEntry, _impl_.unbonding_on_hold_ref_count_)
      + sizeof(RedelegationEntry::_impl_.unbonding_on_hold_ref_count_)
      - PROTOBUF_FIELD_OFFSET(RedelegationEntry, _impl_.completion_time_)>(
          reinterpret_cast<char*>(&_impl_.completion_time_),
          reinterpret_cast<char*>(&other->_impl_.completion_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedelegationEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[13]);
}
// ===================================================================

class Redelegation::_Internal {
 public:
};

Redelegation::Redelegation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.Redelegation)
}
Redelegation::Redelegation(const Redelegation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Redelegation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_src_address_) {}

    , decltype(_impl_.validator_dst_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delegator_address().empty()) {
    _this->_impl_.delegator_address_.Set(from._internal_delegator_address(), _this->GetArenaForAllocation());
  }
  _impl_.validator_src_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_src_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_src_address().empty()) {
    _this->_impl_.validator_src_address_.Set(from._internal_validator_src_address(), _this->GetArenaForAllocation());
  }
  _impl_.validator_dst_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_dst_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_dst_address().empty()) {
    _this->_impl_.validator_dst_address_.Set(from._internal_validator_dst_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.Redelegation)
}

inline void Redelegation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.delegator_address_) {}

    , decltype(_impl_.validator_src_address_) {}

    , decltype(_impl_.validator_dst_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.delegator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delegator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validator_src_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_src_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validator_dst_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_dst_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Redelegation::~Redelegation() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.Redelegation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Redelegation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_entries()->~RepeatedPtrField();
  _impl_.delegator_address_.Destroy();
  _impl_.validator_src_address_.Destroy();
  _impl_.validator_dst_address_.Destroy();
}

void Redelegation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Redelegation::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.Redelegation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_entries()->Clear();
  _impl_.delegator_address_.ClearToEmpty();
  _impl_.validator_src_address_.ClearToEmpty();
  _impl_.validator_dst_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Redelegation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_delegator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Redelegation.delegator_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_validator_src_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Redelegation.validator_src_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_validator_dst_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Redelegation.validator_dst_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.RedelegationEntry entries = 4 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Redelegation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.Redelegation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    const std::string& _s = this->_internal_delegator_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Redelegation.delegator_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_src_address().empty()) {
    const std::string& _s = this->_internal_validator_src_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Redelegation.validator_src_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_dst_address().empty()) {
    const std::string& _s = this->_internal_validator_dst_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Redelegation.validator_dst_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .cosmos.staking.v1beta1.RedelegationEntry entries = 4 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.Redelegation)
  return target;
}

::size_t Redelegation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.Redelegation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.RedelegationEntry entries = 4 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string delegator_address = 1 [json_name = "delegatorAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_delegator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delegator_address());
  }

  // string validator_src_address = 2 [json_name = "validatorSrcAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_src_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_src_address());
  }

  // string validator_dst_address = 3 [json_name = "validatorDstAddress", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_validator_dst_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_validator_dst_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Redelegation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Redelegation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Redelegation::GetClassData() const { return &_class_data_; }


void Redelegation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Redelegation*>(&to_msg);
  auto& from = static_cast<const Redelegation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.Redelegation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
  if (!from._internal_delegator_address().empty()) {
    _this->_internal_set_delegator_address(from._internal_delegator_address());
  }
  if (!from._internal_validator_src_address().empty()) {
    _this->_internal_set_validator_src_address(from._internal_validator_src_address());
  }
  if (!from._internal_validator_dst_address().empty()) {
    _this->_internal_set_validator_dst_address(from._internal_validator_dst_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Redelegation::CopyFrom(const Redelegation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.Redelegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Redelegation::IsInitialized() const {
  return true;
}

void Redelegation::InternalSwap(Redelegation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_entries()->InternalSwap(other->_internal_mutable_entries());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delegator_address_, lhs_arena,
                                       &other->_impl_.delegator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_src_address_, lhs_arena,
                                       &other->_impl_.validator_src_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_dst_address_, lhs_arena,
                                       &other->_impl_.validator_dst_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Redelegation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[14]);
}
// ===================================================================

class Params::_Internal {
 public:
  using HasBits = decltype(std::declval<Params>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Params, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& unbonding_time(const Params* msg);
  static void set_has_unbonding_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
Params::_Internal::unbonding_time(const Params* msg) {
  return *msg->_impl_.unbonding_time_;
}
void Params::clear_unbonding_time() {
  if (_impl_.unbonding_time_ != nullptr) _impl_.unbonding_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bond_denom_) {}

    , decltype(_impl_.min_commission_rate_) {}

    , decltype(_impl_.unbonding_time_){nullptr}
    , decltype(_impl_.max_validators_) {}

    , decltype(_impl_.max_entries_) {}

    , decltype(_impl_.historical_entries_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bond_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bond_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bond_denom().empty()) {
    _this->_impl_.bond_denom_.Set(from._internal_bond_denom(), _this->GetArenaForAllocation());
  }
  _impl_.min_commission_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_commission_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_commission_rate().empty()) {
    _this->_impl_.min_commission_rate_.Set(from._internal_min_commission_rate(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.unbonding_time_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.unbonding_time_);
  }
  ::memcpy(&_impl_.max_validators_, &from._impl_.max_validators_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.historical_entries_) -
    reinterpret_cast<char*>(&_impl_.max_validators_)) + sizeof(_impl_.historical_entries_));
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bond_denom_) {}

    , decltype(_impl_.min_commission_rate_) {}

    , decltype(_impl_.unbonding_time_){nullptr}
    , decltype(_impl_.max_validators_) { 0u }

    , decltype(_impl_.max_entries_) { 0u }

    , decltype(_impl_.historical_entries_) { 0u }

  };
  _impl_.bond_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bond_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_commission_rate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_commission_rate_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bond_denom_.Destroy();
  _impl_.min_commission_rate_.Destroy();
  if (this != internal_default_instance()) delete _impl_.unbonding_time_;
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bond_denom_.ClearToEmpty();
  _impl_.min_commission_rate_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.unbonding_time_ != nullptr);
    _impl_.unbonding_time_->Clear();
  }
  ::memset(&_impl_.max_validators_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.historical_entries_) -
      reinterpret_cast<char*>(&_impl_.max_validators_)) + sizeof(_impl_.historical_entries_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration unbonding_time = 1 [json_name = "unbondingTime", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbonding_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 max_validators = 2 [json_name = "maxValidators"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_validators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 max_entries = 3 [json_name = "maxEntries"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.max_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 historical_entries = 4 [json_name = "historicalEntries"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.historical_entries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string bond_denom = 5 [json_name = "bondDenom"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_bond_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Params.bond_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_commission_rate = 6 [json_name = "minCommissionRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:\"min_commission_rate\""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_min_commission_rate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Params.min_commission_rate"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration unbonding_time = 1 [json_name = "unbondingTime", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::unbonding_time(this),
        _Internal::unbonding_time(this).GetCachedSize(), target, stream);
  }

  // uint32 max_validators = 2 [json_name = "maxValidators"];
  if (this->_internal_max_validators() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_max_validators(), target);
  }

  // uint32 max_entries = 3 [json_name = "maxEntries"];
  if (this->_internal_max_entries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_max_entries(), target);
  }

  // uint32 historical_entries = 4 [json_name = "historicalEntries"];
  if (this->_internal_historical_entries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_historical_entries(), target);
  }

  // string bond_denom = 5 [json_name = "bondDenom"];
  if (!this->_internal_bond_denom().empty()) {
    const std::string& _s = this->_internal_bond_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Params.bond_denom");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string min_commission_rate = 6 [json_name = "minCommissionRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:\"min_commission_rate\""];
  if (!this->_internal_min_commission_rate().empty()) {
    const std::string& _s = this->_internal_min_commission_rate();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Params.min_commission_rate");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bond_denom = 5 [json_name = "bondDenom"];
  if (!this->_internal_bond_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bond_denom());
  }

  // string min_commission_rate = 6 [json_name = "minCommissionRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:\"min_commission_rate\""];
  if (!this->_internal_min_commission_rate().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_commission_rate());
  }

  // .google.protobuf.Duration unbonding_time = 1 [json_name = "unbondingTime", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unbonding_time_);
  }

  // uint32 max_validators = 2 [json_name = "maxValidators"];
  if (this->_internal_max_validators() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_max_validators());
  }

  // uint32 max_entries = 3 [json_name = "maxEntries"];
  if (this->_internal_max_entries() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_max_entries());
  }

  // uint32 historical_entries = 4 [json_name = "historicalEntries"];
  if (this->_internal_historical_entries() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_historical_entries());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bond_denom().empty()) {
    _this->_internal_set_bond_denom(from._internal_bond_denom());
  }
  if (!from._internal_min_commission_rate().empty()) {
    _this->_internal_set_min_commission_rate(from._internal_min_commission_rate());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_unbonding_time()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_unbonding_time());
  }
  if (from._internal_max_validators() != 0) {
    _this->_internal_set_max_validators(from._internal_max_validators());
  }
  if (from._internal_max_entries() != 0) {
    _this->_internal_set_max_entries(from._internal_max_entries());
  }
  if (from._internal_historical_entries() != 0) {
    _this->_internal_set_historical_entries(from._internal_historical_entries());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bond_denom_, lhs_arena,
                                       &other->_impl_.bond_denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_commission_rate_, lhs_arena,
                                       &other->_impl_.min_commission_rate_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, _impl_.historical_entries_)
      + sizeof(Params::_impl_.historical_entries_)
      - PROTOBUF_FIELD_OFFSET(Params, _impl_.unbonding_time_)>(
          reinterpret_cast<char*>(&_impl_.unbonding_time_),
          reinterpret_cast<char*>(&other->_impl_.unbonding_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[15]);
}
// ===================================================================

class DelegationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DelegationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DelegationResponse, _impl_._has_bits_);
  static const ::cosmos::staking::v1beta1::Delegation& delegation(const DelegationResponse* msg);
  static void set_has_delegation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::base::v1beta1::Coin& balance(const DelegationResponse* msg);
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::staking::v1beta1::Delegation&
DelegationResponse::_Internal::delegation(const DelegationResponse* msg) {
  return *msg->_impl_.delegation_;
}
const ::cosmos::base::v1beta1::Coin&
DelegationResponse::_Internal::balance(const DelegationResponse* msg) {
  return *msg->_impl_.balance_;
}
void DelegationResponse::clear_balance() {
  if (_impl_.balance_ != nullptr) _impl_.balance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
DelegationResponse::DelegationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.DelegationResponse)
}
DelegationResponse::DelegationResponse(const DelegationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DelegationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delegation_){nullptr}
    , decltype(_impl_.balance_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.delegation_ = new ::cosmos::staking::v1beta1::Delegation(*from._impl_.delegation_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.balance_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.balance_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.DelegationResponse)
}

inline void DelegationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delegation_){nullptr}
    , decltype(_impl_.balance_){nullptr}
  };
}

DelegationResponse::~DelegationResponse() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.DelegationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DelegationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.delegation_;
  if (this != internal_default_instance()) delete _impl_.balance_;
}

void DelegationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DelegationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.DelegationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.delegation_ != nullptr);
      _impl_.delegation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.balance_ != nullptr);
      _impl_.balance_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DelegationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.staking.v1beta1.Delegation delegation = 1 [json_name = "delegation", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_delegation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin balance = 2 [json_name = "balance", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_balance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DelegationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.DelegationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.staking.v1beta1.Delegation delegation = 1 [json_name = "delegation", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::delegation(this),
        _Internal::delegation(this).GetCachedSize(), target, stream);
  }

  // .cosmos.base.v1beta1.Coin balance = 2 [json_name = "balance", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::balance(this),
        _Internal::balance(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.DelegationResponse)
  return target;
}

::size_t DelegationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.DelegationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.staking.v1beta1.Delegation delegation = 1 [json_name = "delegation", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.delegation_);
    }

    // .cosmos.base.v1beta1.Coin balance = 2 [json_name = "balance", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.balance_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DelegationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DelegationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DelegationResponse::GetClassData() const { return &_class_data_; }


void DelegationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DelegationResponse*>(&to_msg);
  auto& from = static_cast<const DelegationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.DelegationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_delegation()->::cosmos::staking::v1beta1::Delegation::MergeFrom(
          from._internal_delegation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_balance()->::cosmos::base::v1beta1::Coin::MergeFrom(
          from._internal_balance());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DelegationResponse::CopyFrom(const DelegationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.DelegationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegationResponse::IsInitialized() const {
  return true;
}

void DelegationResponse::InternalSwap(DelegationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DelegationResponse, _impl_.balance_)
      + sizeof(DelegationResponse::_impl_.balance_)
      - PROTOBUF_FIELD_OFFSET(DelegationResponse, _impl_.delegation_)>(
          reinterpret_cast<char*>(&_impl_.delegation_),
          reinterpret_cast<char*>(&other->_impl_.delegation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[16]);
}
// ===================================================================

class RedelegationEntryResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RedelegationEntryResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedelegationEntryResponse, _impl_._has_bits_);
  static const ::cosmos::staking::v1beta1::RedelegationEntry& redelegation_entry(const RedelegationEntryResponse* msg);
  static void set_has_redelegation_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::staking::v1beta1::RedelegationEntry&
RedelegationEntryResponse::_Internal::redelegation_entry(const RedelegationEntryResponse* msg) {
  return *msg->_impl_.redelegation_entry_;
}
RedelegationEntryResponse::RedelegationEntryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.RedelegationEntryResponse)
}
RedelegationEntryResponse::RedelegationEntryResponse(const RedelegationEntryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedelegationEntryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balance_) {}

    , decltype(_impl_.redelegation_entry_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_balance().empty()) {
    _this->_impl_.balance_.Set(from._internal_balance(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.redelegation_entry_ = new ::cosmos::staking::v1beta1::RedelegationEntry(*from._impl_.redelegation_entry_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.RedelegationEntryResponse)
}

inline void RedelegationEntryResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balance_) {}

    , decltype(_impl_.redelegation_entry_){nullptr}
  };
  _impl_.balance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.balance_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RedelegationEntryResponse::~RedelegationEntryResponse() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.RedelegationEntryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedelegationEntryResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.balance_.Destroy();
  if (this != internal_default_instance()) delete _impl_.redelegation_entry_;
}

void RedelegationEntryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedelegationEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.RedelegationEntryResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.balance_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.redelegation_entry_ != nullptr);
    _impl_.redelegation_entry_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedelegationEntryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1 [json_name = "redelegationEntry", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_redelegation_entry(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_balance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.RedelegationEntryResponse.balance"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedelegationEntryResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.RedelegationEntryResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1 [json_name = "redelegationEntry", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::redelegation_entry(this),
        _Internal::redelegation_entry(this).GetCachedSize(), target, stream);
  }

  // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_balance().empty()) {
    const std::string& _s = this->_internal_balance();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.RedelegationEntryResponse.balance");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.RedelegationEntryResponse)
  return target;
}

::size_t RedelegationEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.RedelegationEntryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string balance = 4 [json_name = "balance", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_balance().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_balance());
  }

  // .cosmos.staking.v1beta1.RedelegationEntry redelegation_entry = 1 [json_name = "redelegationEntry", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redelegation_entry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedelegationEntryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedelegationEntryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedelegationEntryResponse::GetClassData() const { return &_class_data_; }


void RedelegationEntryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedelegationEntryResponse*>(&to_msg);
  auto& from = static_cast<const RedelegationEntryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.RedelegationEntryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_balance().empty()) {
    _this->_internal_set_balance(from._internal_balance());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_redelegation_entry()->::cosmos::staking::v1beta1::RedelegationEntry::MergeFrom(
        from._internal_redelegation_entry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedelegationEntryResponse::CopyFrom(const RedelegationEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.RedelegationEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedelegationEntryResponse::IsInitialized() const {
  return true;
}

void RedelegationEntryResponse::InternalSwap(RedelegationEntryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.balance_, lhs_arena,
                                       &other->_impl_.balance_, rhs_arena);
  swap(_impl_.redelegation_entry_, other->_impl_.redelegation_entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedelegationEntryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[17]);
}
// ===================================================================

class RedelegationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RedelegationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedelegationResponse, _impl_._has_bits_);
  static const ::cosmos::staking::v1beta1::Redelegation& redelegation(const RedelegationResponse* msg);
  static void set_has_redelegation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::staking::v1beta1::Redelegation&
RedelegationResponse::_Internal::redelegation(const RedelegationResponse* msg) {
  return *msg->_impl_.redelegation_;
}
RedelegationResponse::RedelegationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.RedelegationResponse)
}
RedelegationResponse::RedelegationResponse(const RedelegationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedelegationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.redelegation_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.redelegation_ = new ::cosmos::staking::v1beta1::Redelegation(*from._impl_.redelegation_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.RedelegationResponse)
}

inline void RedelegationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.redelegation_){nullptr}
  };
}

RedelegationResponse::~RedelegationResponse() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.RedelegationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedelegationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_entries()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.redelegation_;
}

void RedelegationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedelegationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.RedelegationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_entries()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.redelegation_ != nullptr);
    _impl_.redelegation_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedelegationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.staking.v1beta1.Redelegation redelegation = 1 [json_name = "redelegation", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_redelegation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedelegationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.RedelegationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.staking.v1beta1.Redelegation redelegation = 1 [json_name = "redelegation", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::redelegation(this),
        _Internal::redelegation(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.RedelegationResponse)
  return target;
}

::size_t RedelegationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.RedelegationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.staking.v1beta1.RedelegationEntryResponse entries = 2 [json_name = "entries", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_internal_entries()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.staking.v1beta1.Redelegation redelegation = 1 [json_name = "redelegation", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redelegation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedelegationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedelegationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedelegationResponse::GetClassData() const { return &_class_data_; }


void RedelegationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedelegationResponse*>(&to_msg);
  auto& from = static_cast<const RedelegationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.RedelegationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_entries()->MergeFrom(from._internal_entries());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_redelegation()->::cosmos::staking::v1beta1::Redelegation::MergeFrom(
        from._internal_redelegation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedelegationResponse::CopyFrom(const RedelegationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.RedelegationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedelegationResponse::IsInitialized() const {
  return true;
}

void RedelegationResponse::InternalSwap(RedelegationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_entries()->InternalSwap(other->_internal_mutable_entries());
  swap(_impl_.redelegation_, other->_impl_.redelegation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RedelegationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[18]);
}
// ===================================================================

class Pool::_Internal {
 public:
};

Pool::Pool(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.Pool)
}
Pool::Pool(const Pool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pool* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.not_bonded_tokens_) {}

    , decltype(_impl_.bonded_tokens_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.not_bonded_tokens_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.not_bonded_tokens_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_not_bonded_tokens().empty()) {
    _this->_impl_.not_bonded_tokens_.Set(from._internal_not_bonded_tokens(), _this->GetArenaForAllocation());
  }
  _impl_.bonded_tokens_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bonded_tokens_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bonded_tokens().empty()) {
    _this->_impl_.bonded_tokens_.Set(from._internal_bonded_tokens(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.Pool)
}

inline void Pool::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.not_bonded_tokens_) {}

    , decltype(_impl_.bonded_tokens_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.not_bonded_tokens_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.not_bonded_tokens_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bonded_tokens_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bonded_tokens_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pool::~Pool() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.Pool)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pool::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.not_bonded_tokens_.Destroy();
  _impl_.bonded_tokens_.Destroy();
}

void Pool::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pool::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.Pool)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.not_bonded_tokens_.ClearToEmpty();
  _impl_.bonded_tokens_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pool::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string not_bonded_tokens = 1 [json_name = "notBondedTokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.jsontag) = "not_bonded_tokens", (.cosmos_proto.scalar) = "cosmos.Int", (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_not_bonded_tokens();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Pool.not_bonded_tokens"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string bonded_tokens = 2 [json_name = "bondedTokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.jsontag) = "bonded_tokens", (.cosmos_proto.scalar) = "cosmos.Int", (.amino.dont_omitempty) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bonded_tokens();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.staking.v1beta1.Pool.bonded_tokens"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Pool::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.Pool)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string not_bonded_tokens = 1 [json_name = "notBondedTokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.jsontag) = "not_bonded_tokens", (.cosmos_proto.scalar) = "cosmos.Int", (.amino.dont_omitempty) = true];
  if (!this->_internal_not_bonded_tokens().empty()) {
    const std::string& _s = this->_internal_not_bonded_tokens();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Pool.not_bonded_tokens");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string bonded_tokens = 2 [json_name = "bondedTokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.jsontag) = "bonded_tokens", (.cosmos_proto.scalar) = "cosmos.Int", (.amino.dont_omitempty) = true];
  if (!this->_internal_bonded_tokens().empty()) {
    const std::string& _s = this->_internal_bonded_tokens();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.staking.v1beta1.Pool.bonded_tokens");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.Pool)
  return target;
}

::size_t Pool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.Pool)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string not_bonded_tokens = 1 [json_name = "notBondedTokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.jsontag) = "not_bonded_tokens", (.cosmos_proto.scalar) = "cosmos.Int", (.amino.dont_omitempty) = true];
  if (!this->_internal_not_bonded_tokens().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_not_bonded_tokens());
  }

  // string bonded_tokens = 2 [json_name = "bondedTokens", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.jsontag) = "bonded_tokens", (.cosmos_proto.scalar) = "cosmos.Int", (.amino.dont_omitempty) = true];
  if (!this->_internal_bonded_tokens().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_bonded_tokens());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pool::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pool::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pool::GetClassData() const { return &_class_data_; }


void Pool::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pool*>(&to_msg);
  auto& from = static_cast<const Pool&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.Pool)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_not_bonded_tokens().empty()) {
    _this->_internal_set_not_bonded_tokens(from._internal_not_bonded_tokens());
  }
  if (!from._internal_bonded_tokens().empty()) {
    _this->_internal_set_bonded_tokens(from._internal_bonded_tokens());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pool::CopyFrom(const Pool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.Pool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pool::IsInitialized() const {
  return true;
}

void Pool::InternalSwap(Pool* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.not_bonded_tokens_, lhs_arena,
                                       &other->_impl_.not_bonded_tokens_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bonded_tokens_, lhs_arena,
                                       &other->_impl_.bonded_tokens_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pool::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[19]);
}
// ===================================================================

class ValidatorUpdates::_Internal {
 public:
};

void ValidatorUpdates::clear_updates() {
  _internal_mutable_updates()->Clear();
}
ValidatorUpdates::ValidatorUpdates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.staking.v1beta1.ValidatorUpdates)
}
ValidatorUpdates::ValidatorUpdates(const ValidatorUpdates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorUpdates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){from._impl_.updates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.staking.v1beta1.ValidatorUpdates)
}

inline void ValidatorUpdates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorUpdates::~ValidatorUpdates() {
  // @@protoc_insertion_point(destructor:cosmos.staking.v1beta1.ValidatorUpdates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorUpdates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_updates()->~RepeatedPtrField();
}

void ValidatorUpdates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.staking.v1beta1.ValidatorUpdates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_updates()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorUpdates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.abci.ValidatorUpdate updates = 1 [json_name = "updates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorUpdates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.staking.v1beta1.ValidatorUpdates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate updates = 1 [json_name = "updates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.staking.v1beta1.ValidatorUpdates)
  return target;
}

::size_t ValidatorUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.staking.v1beta1.ValidatorUpdates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.abci.ValidatorUpdate updates = 1 [json_name = "updates", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->_internal_updates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorUpdates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorUpdates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorUpdates::GetClassData() const { return &_class_data_; }


void ValidatorUpdates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorUpdates*>(&to_msg);
  auto& from = static_cast<const ValidatorUpdates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.staking.v1beta1.ValidatorUpdates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_updates()->MergeFrom(from._internal_updates());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorUpdates::CopyFrom(const ValidatorUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.staking.v1beta1.ValidatorUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorUpdates::IsInitialized() const {
  return true;
}

void ValidatorUpdates::InternalSwap(ValidatorUpdates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_updates()->InternalSwap(other->_internal_mutable_updates());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorUpdates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_getter, &descriptor_table_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto_once,
      file_level_metadata_cosmos_2fstaking_2fv1beta1_2fstaking_2eproto[20]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace staking
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::HistoricalInfo*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::HistoricalInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::HistoricalInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::CommissionRates*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::CommissionRates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::CommissionRates >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::Commission*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::Commission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::Commission >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::Description*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::Description >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::Description >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::Validator*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::Validator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::Validator >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::ValAddresses*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::ValAddresses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::ValAddresses >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::DVPair*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::DVPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::DVPair >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::DVPairs*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::DVPairs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::DVPairs >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::DVVTriplet*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::DVVTriplet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::DVVTriplet >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::DVVTriplets*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::DVVTriplets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::DVVTriplets >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::Delegation*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::Delegation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::Delegation >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::UnbondingDelegation*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::UnbondingDelegation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::UnbondingDelegation >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::UnbondingDelegationEntry*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::UnbondingDelegationEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::UnbondingDelegationEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::RedelegationEntry*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::RedelegationEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::RedelegationEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::Redelegation*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::Redelegation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::Redelegation >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::Params*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::Params >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::DelegationResponse*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::DelegationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::DelegationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::RedelegationEntryResponse*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::RedelegationEntryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::RedelegationEntryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::RedelegationResponse*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::RedelegationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::RedelegationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::Pool*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::Pool >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::Pool >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::staking::v1beta1::ValidatorUpdates*
Arena::CreateMaybeMessage< ::cosmos::staking::v1beta1::ValidatorUpdates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::staking::v1beta1::ValidatorUpdates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/params/v1beta1/query.proto

#include "cosmos/params/v1beta1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace params {
namespace v1beta1 {
template <typename>
PROTOBUF_CONSTEXPR QueryParamsRequest::QueryParamsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subspace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryParamsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsRequestDefaultTypeInternal() {}
  union {
    QueryParamsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryParamsResponse::QueryParamsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.param_)*/nullptr} {}
struct QueryParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryParamsResponseDefaultTypeInternal() {}
  union {
    QueryParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubspacesRequest::QuerySubspacesRequest(
    ::_pbi::ConstantInitialized) {}
struct QuerySubspacesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubspacesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubspacesRequestDefaultTypeInternal() {}
  union {
    QuerySubspacesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubspacesRequestDefaultTypeInternal _QuerySubspacesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QuerySubspacesResponse::QuerySubspacesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subspaces_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuerySubspacesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuerySubspacesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuerySubspacesResponseDefaultTypeInternal() {}
  union {
    QuerySubspacesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuerySubspacesResponseDefaultTypeInternal _QuerySubspacesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Subspace::Subspace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keys_)*/{}
  , /*decltype(_impl_.subspace_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubspaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubspaceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubspaceDefaultTypeInternal() {}
  union {
    Subspace _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubspaceDefaultTypeInternal _Subspace_default_instance_;
}  // namespace v1beta1
}  // namespace params
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fparams_2fv1beta1_2fquery_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fparams_2fv1beta1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fparams_2fv1beta1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QueryParamsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QueryParamsRequest, _impl_.subspace_),
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QueryParamsRequest, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QueryParamsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QueryParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QueryParamsResponse, _impl_.param_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QuerySubspacesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QuerySubspacesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::QuerySubspacesResponse, _impl_.subspaces_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::Subspace, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::Subspace, _impl_.subspace_),
    PROTOBUF_FIELD_OFFSET(::cosmos::params::v1beta1::Subspace, _impl_.keys_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::params::v1beta1::QueryParamsRequest)},
        { 10, 19, -1, sizeof(::cosmos::params::v1beta1::QueryParamsResponse)},
        { 20, -1, -1, sizeof(::cosmos::params::v1beta1::QuerySubspacesRequest)},
        { 28, -1, -1, sizeof(::cosmos::params::v1beta1::QuerySubspacesResponse)},
        { 37, -1, -1, sizeof(::cosmos::params::v1beta1::Subspace)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::params::v1beta1::_QueryParamsRequest_default_instance_._instance,
    &::cosmos::params::v1beta1::_QueryParamsResponse_default_instance_._instance,
    &::cosmos::params::v1beta1::_QuerySubspacesRequest_default_instance_._instance,
    &::cosmos::params::v1beta1::_QuerySubspacesResponse_default_instance_._instance,
    &::cosmos::params::v1beta1::_Subspace_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fparams_2fv1beta1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!cosmos/params/v1beta1/query.proto\022\025cos"
    "mos.params.v1beta1\032\024gogoproto/gogo.proto"
    "\032\034google/api/annotations.proto\032\"cosmos/p"
    "arams/v1beta1/params.proto\032\021amino/amino."
    "proto\"B\n\022QueryParamsRequest\022\032\n\010subspace\030"
    "\001 \001(\tR\010subspace\022\020\n\003key\030\002 \001(\tR\003key\"Z\n\023Que"
    "ryParamsResponse\022C\n\005param\030\001 \001(\0132\".cosmos"
    ".params.v1beta1.ParamChangeB\t\310\336\037\000\250\347\260*\001R\005"
    "param\"\027\n\025QuerySubspacesRequest\"W\n\026QueryS"
    "ubspacesResponse\022=\n\tsubspaces\030\001 \003(\0132\037.co"
    "smos.params.v1beta1.SubspaceR\tsubspaces\""
    ":\n\010Subspace\022\032\n\010subspace\030\001 \001(\tR\010subspace\022"
    "\022\n\004keys\030\002 \003(\tR\004keys2\245\002\n\005Query\022\206\001\n\006Params"
    "\022).cosmos.params.v1beta1.QueryParamsRequ"
    "est\032*.cosmos.params.v1beta1.QueryParamsR"
    "esponse\"%\202\323\344\223\002\037\022\035/cosmos/params/v1beta1/"
    "params\022\222\001\n\tSubspaces\022,.cosmos.params.v1b"
    "eta1.QuerySubspacesRequest\032-.cosmos.para"
    "ms.v1beta1.QuerySubspacesResponse\"(\202\323\344\223\002"
    "\"\022 /cosmos/params/v1beta1/subspacesB\323\001\n\031"
    "com.cosmos.params.v1beta1B\nQueryProtoP\001Z"
    "4github.com/cosmos/cosmos-sdk/x/params/t"
    "ypes/proposal\242\002\003CPX\252\002\025Cosmos.Params.V1be"
    "ta1\312\002\025Cosmos\\Params\\V1beta1\342\002!Cosmos\\Par"
    "ams\\V1beta1\\GPBMetadata\352\002\027Cosmos::Params"
    "::V1beta1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_deps[4] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fparams_2fv1beta1_2fparams_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto = {
    false,
    false,
    1017,
    descriptor_table_protodef_cosmos_2fparams_2fv1beta1_2fquery_2eproto,
    "cosmos/params/v1beta1/query.proto",
    &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_once,
    descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_deps,
    4,
    5,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto::offsets,
    file_level_metadata_cosmos_2fparams_2fv1beta1_2fquery_2eproto,
    file_level_enum_descriptors_cosmos_2fparams_2fv1beta1_2fquery_2eproto,
    file_level_service_descriptors_cosmos_2fparams_2fv1beta1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_getter() {
  return &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fparams_2fv1beta1_2fquery_2eproto(&descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto);
namespace cosmos {
namespace params {
namespace v1beta1 {
// ===================================================================

class QueryParamsRequest::_Internal {
 public:
};

QueryParamsRequest::QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.params.v1beta1.QueryParamsRequest)
}
QueryParamsRequest::QueryParamsRequest(const QueryParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParamsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subspace_) {}

    , decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subspace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subspace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subspace().empty()) {
    _this->_impl_.subspace_.Set(from._internal_subspace(), _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.params.v1beta1.QueryParamsRequest)
}

inline void QueryParamsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subspace_) {}

    , decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subspace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subspace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryParamsRequest::~QueryParamsRequest() {
  // @@protoc_insertion_point(destructor:cosmos.params.v1beta1.QueryParamsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParamsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subspace_.Destroy();
  _impl_.key_.Destroy();
}

void QueryParamsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.params.v1beta1.QueryParamsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subspace_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParamsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subspace = 1 [json_name = "subspace"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subspace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.params.v1beta1.QueryParamsRequest.subspace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string key = 2 [json_name = "key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.params.v1beta1.QueryParamsRequest.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryParamsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.params.v1beta1.QueryParamsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subspace = 1 [json_name = "subspace"];
  if (!this->_internal_subspace().empty()) {
    const std::string& _s = this->_internal_subspace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.params.v1beta1.QueryParamsRequest.subspace");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.params.v1beta1.QueryParamsRequest.key");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.params.v1beta1.QueryParamsRequest)
  return target;
}

::size_t QueryParamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.params.v1beta1.QueryParamsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subspace = 1 [json_name = "subspace"];
  if (!this->_internal_subspace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subspace());
  }

  // string key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParamsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsRequest::GetClassData() const { return &_class_data_; }


void QueryParamsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParamsRequest*>(&to_msg);
  auto& from = static_cast<const QueryParamsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.params.v1beta1.QueryParamsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subspace().empty()) {
    _this->_internal_set_subspace(from._internal_subspace());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParamsRequest::CopyFrom(const QueryParamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.params.v1beta1.QueryParamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParamsRequest::IsInitialized() const {
  return true;
}

void QueryParamsRequest::InternalSwap(QueryParamsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subspace_, lhs_arena,
                                       &other->_impl_.subspace_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fparams_2fv1beta1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryParamsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryParamsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryParamsResponse, _impl_._has_bits_);
  static const ::cosmos::params::v1beta1::ParamChange& param(const QueryParamsResponse* msg);
  static void set_has_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::params::v1beta1::ParamChange&
QueryParamsResponse::_Internal::param(const QueryParamsResponse* msg) {
  return *msg->_impl_.param_;
}
void QueryParamsResponse::clear_param() {
  if (_impl_.param_ != nullptr) _impl_.param_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryParamsResponse::QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.params.v1beta1.QueryParamsResponse)
}
QueryParamsResponse::QueryParamsResponse(const QueryParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryParamsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.param_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.param_ = new ::cosmos::params::v1beta1::ParamChange(*from._impl_.param_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.params.v1beta1.QueryParamsResponse)
}

inline void QueryParamsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.param_){nullptr}
  };
}

QueryParamsResponse::~QueryParamsResponse() {
  // @@protoc_insertion_point(destructor:cosmos.params.v1beta1.QueryParamsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryParamsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.param_;
}

void QueryParamsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.params.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.param_ != nullptr);
    _impl_.param_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryParamsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.params.v1beta1.ParamChange param = 1 [json_name = "param", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_param(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryParamsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.params.v1beta1.QueryParamsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.params.v1beta1.ParamChange param = 1 [json_name = "param", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::param(this),
        _Internal::param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.params.v1beta1.QueryParamsResponse)
  return target;
}

::size_t QueryParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.params.v1beta1.QueryParamsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.params.v1beta1.ParamChange param = 1 [json_name = "param", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.param_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryParamsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryParamsResponse::GetClassData() const { return &_class_data_; }


void QueryParamsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryParamsResponse*>(&to_msg);
  auto& from = static_cast<const QueryParamsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.params.v1beta1.QueryParamsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_param()->::cosmos::params::v1beta1::ParamChange::MergeFrom(
        from._internal_param());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryParamsResponse::CopyFrom(const QueryParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.params.v1beta1.QueryParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryParamsResponse::IsInitialized() const {
  return true;
}

void QueryParamsResponse::InternalSwap(QueryParamsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.param_, other->_impl_.param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fparams_2fv1beta1_2fquery_2eproto[1]);
}
// ===================================================================

class QuerySubspacesRequest::_Internal {
 public:
};

QuerySubspacesRequest::QuerySubspacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:cosmos.params.v1beta1.QuerySubspacesRequest)
}
QuerySubspacesRequest::QuerySubspacesRequest(const QuerySubspacesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QuerySubspacesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.params.v1beta1.QuerySubspacesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubspacesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubspacesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QuerySubspacesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fparams_2fv1beta1_2fquery_2eproto[2]);
}
// ===================================================================

class QuerySubspacesResponse::_Internal {
 public:
};

QuerySubspacesResponse::QuerySubspacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.params.v1beta1.QuerySubspacesResponse)
}
QuerySubspacesResponse::QuerySubspacesResponse(const QuerySubspacesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QuerySubspacesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subspaces_){from._impl_.subspaces_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cosmos.params.v1beta1.QuerySubspacesResponse)
}

inline void QuerySubspacesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subspaces_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QuerySubspacesResponse::~QuerySubspacesResponse() {
  // @@protoc_insertion_point(destructor:cosmos.params.v1beta1.QuerySubspacesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QuerySubspacesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_subspaces()->~RepeatedPtrField();
}

void QuerySubspacesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QuerySubspacesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.params.v1beta1.QuerySubspacesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_subspaces()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuerySubspacesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.params.v1beta1.Subspace subspaces = 1 [json_name = "subspaces"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subspaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QuerySubspacesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.params.v1beta1.QuerySubspacesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.params.v1beta1.Subspace subspaces = 1 [json_name = "subspaces"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subspaces_size()); i < n; i++) {
    const auto& repfield = this->_internal_subspaces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.params.v1beta1.QuerySubspacesResponse)
  return target;
}

::size_t QuerySubspacesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.params.v1beta1.QuerySubspacesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.params.v1beta1.Subspace subspaces = 1 [json_name = "subspaces"];
  total_size += 1UL * this->_internal_subspaces_size();
  for (const auto& msg : this->_internal_subspaces()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuerySubspacesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QuerySubspacesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuerySubspacesResponse::GetClassData() const { return &_class_data_; }


void QuerySubspacesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QuerySubspacesResponse*>(&to_msg);
  auto& from = static_cast<const QuerySubspacesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.params.v1beta1.QuerySubspacesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_subspaces()->MergeFrom(from._internal_subspaces());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuerySubspacesResponse::CopyFrom(const QuerySubspacesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.params.v1beta1.QuerySubspacesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySubspacesResponse::IsInitialized() const {
  return true;
}

void QuerySubspacesResponse::InternalSwap(QuerySubspacesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_subspaces()->InternalSwap(other->_internal_mutable_subspaces());
}

::PROTOBUF_NAMESPACE_ID::Metadata QuerySubspacesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fparams_2fv1beta1_2fquery_2eproto[3]);
}
// ===================================================================

class Subspace::_Internal {
 public:
};

Subspace::Subspace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.params.v1beta1.Subspace)
}
Subspace::Subspace(const Subspace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subspace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){from._impl_.keys_}
    , decltype(_impl_.subspace_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subspace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subspace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subspace().empty()) {
    _this->_impl_.subspace_.Set(from._internal_subspace(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.params.v1beta1.Subspace)
}

inline void Subspace::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.keys_){arena}
    , decltype(_impl_.subspace_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.subspace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subspace_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Subspace::~Subspace() {
  // @@protoc_insertion_point(destructor:cosmos.params.v1beta1.Subspace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subspace::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_keys()->~RepeatedPtrField();
  _impl_.subspace_.Destroy();
}

void Subspace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subspace::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.params.v1beta1.Subspace)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_keys()->Clear();
  _impl_.subspace_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subspace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subspace = 1 [json_name = "subspace"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subspace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.params.v1beta1.Subspace.subspace"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string keys = 2 [json_name = "keys"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "cosmos.params.v1beta1.Subspace.keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Subspace::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.params.v1beta1.Subspace)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subspace = 1 [json_name = "subspace"];
  if (!this->_internal_subspace().empty()) {
    const std::string& _s = this->_internal_subspace();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.params.v1beta1.Subspace.subspace");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string keys = 2 [json_name = "keys"];
  for (int i = 0, n = this->_internal_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.params.v1beta1.Subspace.keys");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.params.v1beta1.Subspace)
  return target;
}

::size_t Subspace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.params.v1beta1.Subspace)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 2 [json_name = "keys"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_keys().size());
  for (int i = 0, n = _internal_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_keys().Get(i));
  }

  // string subspace = 1 [json_name = "subspace"];
  if (!this->_internal_subspace().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subspace());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subspace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subspace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subspace::GetClassData() const { return &_class_data_; }


void Subspace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subspace*>(&to_msg);
  auto& from = static_cast<const Subspace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.params.v1beta1.Subspace)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_keys()->MergeFrom(from._internal_keys());
  if (!from._internal_subspace().empty()) {
    _this->_internal_set_subspace(from._internal_subspace());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subspace::CopyFrom(const Subspace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.params.v1beta1.Subspace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subspace::IsInitialized() const {
  return true;
}

void Subspace::InternalSwap(Subspace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_keys()->InternalSwap(
      other->_internal_mutable_keys());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subspace_, lhs_arena,
                                       &other->_impl_.subspace_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subspace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_getter, &descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto_once,
      file_level_metadata_cosmos_2fparams_2fv1beta1_2fquery_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace params
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::params::v1beta1::QueryParamsRequest*
Arena::CreateMaybeMessage< ::cosmos::params::v1beta1::QueryParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::params::v1beta1::QueryParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::params::v1beta1::QueryParamsResponse*
Arena::CreateMaybeMessage< ::cosmos::params::v1beta1::QueryParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::params::v1beta1::QueryParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::params::v1beta1::QuerySubspacesRequest*
Arena::CreateMaybeMessage< ::cosmos::params::v1beta1::QuerySubspacesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::params::v1beta1::QuerySubspacesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::params::v1beta1::QuerySubspacesResponse*
Arena::CreateMaybeMessage< ::cosmos::params::v1beta1::QuerySubspacesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::params::v1beta1::QuerySubspacesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::params::v1beta1::Subspace*
Arena::CreateMaybeMessage< ::cosmos::params::v1beta1::Subspace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::params::v1beta1::Subspace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

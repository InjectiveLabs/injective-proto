// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/params/v1beta1/params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fparams_2fv1beta1_2fparams_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fparams_2fv1beta1_2fparams_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fparams_2fv1beta1_2fparams_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fparams_2fv1beta1_2fparams_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fparams_2fv1beta1_2fparams_2eproto;
namespace cosmos {
namespace params {
namespace v1beta1 {
class ParamChange;
struct ParamChangeDefaultTypeInternal;
extern ParamChangeDefaultTypeInternal _ParamChange_default_instance_;
class ParameterChangeProposal;
struct ParameterChangeProposalDefaultTypeInternal;
extern ParameterChangeProposalDefaultTypeInternal _ParameterChangeProposal_default_instance_;
}  // namespace v1beta1
}  // namespace params
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::params::v1beta1::ParamChange* Arena::CreateMaybeMessage<::cosmos::params::v1beta1::ParamChange>(Arena*);
template <>
::cosmos::params::v1beta1::ParameterChangeProposal* Arena::CreateMaybeMessage<::cosmos::params::v1beta1::ParameterChangeProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace params {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class ParameterChangeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.ParameterChangeProposal) */ {
 public:
  inline ParameterChangeProposal() : ParameterChangeProposal(nullptr) {}
  ~ParameterChangeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ParameterChangeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterChangeProposal(const ParameterChangeProposal& from);
  ParameterChangeProposal(ParameterChangeProposal&& from) noexcept
    : ParameterChangeProposal() {
    *this = ::std::move(from);
  }

  inline ParameterChangeProposal& operator=(const ParameterChangeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterChangeProposal& operator=(ParameterChangeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterChangeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterChangeProposal* internal_default_instance() {
    return reinterpret_cast<const ParameterChangeProposal*>(
               &_ParameterChangeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParameterChangeProposal& a, ParameterChangeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterChangeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterChangeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterChangeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterChangeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterChangeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParameterChangeProposal& from) {
    ParameterChangeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterChangeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.params.v1beta1.ParameterChangeProposal";
  }
  protected:
  explicit ParameterChangeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 3,
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // repeated .cosmos.params.v1beta1.ParamChange changes = 3 [json_name = "changes", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int changes_size() const;
  private:
  int _internal_changes_size() const;

  public:
  void clear_changes() ;
  ::cosmos::params::v1beta1::ParamChange* mutable_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::ParamChange >*
      mutable_changes();
  private:
  const ::cosmos::params::v1beta1::ParamChange& _internal_changes(int index) const;
  ::cosmos::params::v1beta1::ParamChange* _internal_add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::params::v1beta1::ParamChange>& _internal_changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::params::v1beta1::ParamChange>* _internal_mutable_changes();
  public:
  const ::cosmos::params::v1beta1::ParamChange& changes(int index) const;
  ::cosmos::params::v1beta1::ParamChange* add_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::ParamChange >&
      changes() const;
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.ParameterChangeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::ParamChange > changes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fparams_2eproto;
};// -------------------------------------------------------------------

class ParamChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.ParamChange) */ {
 public:
  inline ParamChange() : ParamChange(nullptr) {}
  ~ParamChange() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ParamChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParamChange(const ParamChange& from);
  ParamChange(ParamChange&& from) noexcept
    : ParamChange() {
    *this = ::std::move(from);
  }

  inline ParamChange& operator=(const ParamChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParamChange& operator=(ParamChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParamChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParamChange* internal_default_instance() {
    return reinterpret_cast<const ParamChange*>(
               &_ParamChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ParamChange& a, ParamChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ParamChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParamChange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParamChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParamChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParamChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParamChange& from) {
    ParamChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParamChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.params.v1beta1.ParamChange";
  }
  protected:
  explicit ParamChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubspaceFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string subspace = 1 [json_name = "subspace"];
  void clear_subspace() ;
  const std::string& subspace() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subspace(Arg_&& arg, Args_... args);
  std::string* mutable_subspace();
  PROTOBUF_NODISCARD std::string* release_subspace();
  void set_allocated_subspace(std::string* ptr);

  private:
  const std::string& _internal_subspace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subspace(
      const std::string& value);
  std::string* _internal_mutable_subspace();

  public:
  // string key = 2 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string value = 3 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.ParamChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subspace_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fparams_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ParameterChangeProposal

// string title = 1 [json_name = "title"];
inline void ParameterChangeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ParameterChangeProposal::title() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.ParameterChangeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParameterChangeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.ParameterChangeProposal.title)
}
inline std::string* ParameterChangeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.ParameterChangeProposal.title)
  return _s;
}
inline const std::string& ParameterChangeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ParameterChangeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ParameterChangeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* ParameterChangeProposal::release_title() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.ParameterChangeProposal.title)
  return _impl_.title_.Release();
}
inline void ParameterChangeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.ParameterChangeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void ParameterChangeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ParameterChangeProposal::description() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.ParameterChangeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParameterChangeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.ParameterChangeProposal.description)
}
inline std::string* ParameterChangeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.ParameterChangeProposal.description)
  return _s;
}
inline const std::string& ParameterChangeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void ParameterChangeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* ParameterChangeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* ParameterChangeProposal::release_description() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.ParameterChangeProposal.description)
  return _impl_.description_.Release();
}
inline void ParameterChangeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.ParameterChangeProposal.description)
}

// repeated .cosmos.params.v1beta1.ParamChange changes = 3 [json_name = "changes", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int ParameterChangeProposal::_internal_changes_size() const {
  return _impl_.changes_.size();
}
inline int ParameterChangeProposal::changes_size() const {
  return _internal_changes_size();
}
inline void ParameterChangeProposal::clear_changes() {
  _internal_mutable_changes()->Clear();
}
inline ::cosmos::params::v1beta1::ParamChange* ParameterChangeProposal::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.ParameterChangeProposal.changes)
  return _internal_mutable_changes()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::ParamChange >*
ParameterChangeProposal::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.params.v1beta1.ParameterChangeProposal.changes)
  return _internal_mutable_changes();
}
inline const ::cosmos::params::v1beta1::ParamChange& ParameterChangeProposal::_internal_changes(int index) const {
  return _internal_changes().Get(index);
}
inline const ::cosmos::params::v1beta1::ParamChange& ParameterChangeProposal::changes(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.ParameterChangeProposal.changes)
  return _internal_changes(index);
}
inline ::cosmos::params::v1beta1::ParamChange* ParameterChangeProposal::_internal_add_changes() {
  return _internal_mutable_changes()->Add();
}
inline ::cosmos::params::v1beta1::ParamChange* ParameterChangeProposal::add_changes() {
  ::cosmos::params::v1beta1::ParamChange* _add = _internal_add_changes();
  // @@protoc_insertion_point(field_add:cosmos.params.v1beta1.ParameterChangeProposal.changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::ParamChange >&
ParameterChangeProposal::changes() const {
  // @@protoc_insertion_point(field_list:cosmos.params.v1beta1.ParameterChangeProposal.changes)
  return _internal_changes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::params::v1beta1::ParamChange>&
ParameterChangeProposal::_internal_changes() const {
  return _impl_.changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::params::v1beta1::ParamChange>*
ParameterChangeProposal::_internal_mutable_changes() {
  return &_impl_.changes_;
}

// -------------------------------------------------------------------

// ParamChange

// string subspace = 1 [json_name = "subspace"];
inline void ParamChange::clear_subspace() {
  _impl_.subspace_.ClearToEmpty();
}
inline const std::string& ParamChange::subspace() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.ParamChange.subspace)
  return _internal_subspace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParamChange::set_subspace(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subspace_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.ParamChange.subspace)
}
inline std::string* ParamChange::mutable_subspace() {
  std::string* _s = _internal_mutable_subspace();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.ParamChange.subspace)
  return _s;
}
inline const std::string& ParamChange::_internal_subspace() const {
  return _impl_.subspace_.Get();
}
inline void ParamChange::_internal_set_subspace(const std::string& value) {
  ;


  _impl_.subspace_.Set(value, GetArenaForAllocation());
}
inline std::string* ParamChange::_internal_mutable_subspace() {
  ;
  return _impl_.subspace_.Mutable( GetArenaForAllocation());
}
inline std::string* ParamChange::release_subspace() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.ParamChange.subspace)
  return _impl_.subspace_.Release();
}
inline void ParamChange::set_allocated_subspace(std::string* value) {
  _impl_.subspace_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subspace_.IsDefault()) {
          _impl_.subspace_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.ParamChange.subspace)
}

// string key = 2 [json_name = "key"];
inline void ParamChange::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& ParamChange::key() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.ParamChange.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParamChange::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.ParamChange.key)
}
inline std::string* ParamChange::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.ParamChange.key)
  return _s;
}
inline const std::string& ParamChange::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ParamChange::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ParamChange::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* ParamChange::release_key() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.ParamChange.key)
  return _impl_.key_.Release();
}
inline void ParamChange::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.ParamChange.key)
}

// string value = 3 [json_name = "value"];
inline void ParamChange::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ParamChange::value() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.ParamChange.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ParamChange::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.ParamChange.value)
}
inline std::string* ParamChange::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.ParamChange.value)
  return _s;
}
inline const std::string& ParamChange::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ParamChange::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ParamChange::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* ParamChange::release_value() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.ParamChange.value)
  return _impl_.value_.Release();
}
inline void ParamChange::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.ParamChange.value)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace params
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fparams_2fv1beta1_2fparams_2eproto_2epb_2eh

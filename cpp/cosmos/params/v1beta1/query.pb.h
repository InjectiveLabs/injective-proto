// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/params/v1beta1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fparams_2fv1beta1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fparams_2fv1beta1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/params/v1beta1/params.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fparams_2fv1beta1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
namespace cosmos {
namespace params {
namespace v1beta1 {
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
class QuerySubspacesRequest;
struct QuerySubspacesRequestDefaultTypeInternal;
extern QuerySubspacesRequestDefaultTypeInternal _QuerySubspacesRequest_default_instance_;
class QuerySubspacesResponse;
struct QuerySubspacesResponseDefaultTypeInternal;
extern QuerySubspacesResponseDefaultTypeInternal _QuerySubspacesResponse_default_instance_;
class Subspace;
struct SubspaceDefaultTypeInternal;
extern SubspaceDefaultTypeInternal _Subspace_default_instance_;
}  // namespace v1beta1
}  // namespace params
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::params::v1beta1::QueryParamsRequest* Arena::CreateMaybeMessage<::cosmos::params::v1beta1::QueryParamsRequest>(Arena*);
template <>
::cosmos::params::v1beta1::QueryParamsResponse* Arena::CreateMaybeMessage<::cosmos::params::v1beta1::QueryParamsResponse>(Arena*);
template <>
::cosmos::params::v1beta1::QuerySubspacesRequest* Arena::CreateMaybeMessage<::cosmos::params::v1beta1::QuerySubspacesRequest>(Arena*);
template <>
::cosmos::params::v1beta1::QuerySubspacesResponse* Arena::CreateMaybeMessage<::cosmos::params::v1beta1::QuerySubspacesResponse>(Arena*);
template <>
::cosmos::params::v1beta1::Subspace* Arena::CreateMaybeMessage<::cosmos::params::v1beta1::Subspace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace params {
namespace v1beta1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  ~QueryParamsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsRequest& from) {
    QueryParamsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.params.v1beta1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubspaceFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // string subspace = 1 [json_name = "subspace"];
  void clear_subspace() ;
  const std::string& subspace() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subspace(Arg_&& arg, Args_... args);
  std::string* mutable_subspace();
  PROTOBUF_NODISCARD std::string* release_subspace();
  void set_allocated_subspace(std::string* ptr);

  private:
  const std::string& _internal_subspace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subspace(
      const std::string& value);
  std::string* _internal_mutable_subspace();

  public:
  // string key = 2 [json_name = "key"];
  void clear_key() ;
  const std::string& key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* ptr);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subspace_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.params.v1beta1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 1,
  };
  // .cosmos.params.v1beta1.ParamChange param = 1 [json_name = "param", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  bool has_param() const;
  void clear_param() ;
  const ::cosmos::params::v1beta1::ParamChange& param() const;
  PROTOBUF_NODISCARD ::cosmos::params::v1beta1::ParamChange* release_param();
  ::cosmos::params::v1beta1::ParamChange* mutable_param();
  void set_allocated_param(::cosmos::params::v1beta1::ParamChange* param);
  private:
  const ::cosmos::params::v1beta1::ParamChange& _internal_param() const;
  ::cosmos::params::v1beta1::ParamChange* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::cosmos::params::v1beta1::ParamChange* param);
  ::cosmos::params::v1beta1::ParamChange* unsafe_arena_release_param();
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::params::v1beta1::ParamChange* param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySubspacesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.QuerySubspacesRequest) */ {
 public:
  inline QuerySubspacesRequest() : QuerySubspacesRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySubspacesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySubspacesRequest(const QuerySubspacesRequest& from);
  QuerySubspacesRequest(QuerySubspacesRequest&& from) noexcept
    : QuerySubspacesRequest() {
    *this = ::std::move(from);
  }

  inline QuerySubspacesRequest& operator=(const QuerySubspacesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySubspacesRequest& operator=(QuerySubspacesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySubspacesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySubspacesRequest* internal_default_instance() {
    return reinterpret_cast<const QuerySubspacesRequest*>(
               &_QuerySubspacesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QuerySubspacesRequest& a, QuerySubspacesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySubspacesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySubspacesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySubspacesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySubspacesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QuerySubspacesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QuerySubspacesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.params.v1beta1.QuerySubspacesRequest";
  }
  protected:
  explicit QuerySubspacesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.QuerySubspacesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySubspacesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.QuerySubspacesResponse) */ {
 public:
  inline QuerySubspacesResponse() : QuerySubspacesResponse(nullptr) {}
  ~QuerySubspacesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySubspacesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySubspacesResponse(const QuerySubspacesResponse& from);
  QuerySubspacesResponse(QuerySubspacesResponse&& from) noexcept
    : QuerySubspacesResponse() {
    *this = ::std::move(from);
  }

  inline QuerySubspacesResponse& operator=(const QuerySubspacesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySubspacesResponse& operator=(QuerySubspacesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySubspacesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySubspacesResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySubspacesResponse*>(
               &_QuerySubspacesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QuerySubspacesResponse& a, QuerySubspacesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySubspacesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySubspacesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySubspacesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySubspacesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySubspacesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySubspacesResponse& from) {
    QuerySubspacesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySubspacesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.params.v1beta1.QuerySubspacesResponse";
  }
  protected:
  explicit QuerySubspacesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubspacesFieldNumber = 1,
  };
  // repeated .cosmos.params.v1beta1.Subspace subspaces = 1 [json_name = "subspaces"];
  int subspaces_size() const;
  private:
  int _internal_subspaces_size() const;

  public:
  void clear_subspaces() ;
  ::cosmos::params::v1beta1::Subspace* mutable_subspaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::Subspace >*
      mutable_subspaces();
  private:
  const ::cosmos::params::v1beta1::Subspace& _internal_subspaces(int index) const;
  ::cosmos::params::v1beta1::Subspace* _internal_add_subspaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>& _internal_subspaces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>* _internal_mutable_subspaces();
  public:
  const ::cosmos::params::v1beta1::Subspace& subspaces(int index) const;
  ::cosmos::params::v1beta1::Subspace* add_subspaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::Subspace >&
      subspaces() const;
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.QuerySubspacesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::Subspace > subspaces_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};// -------------------------------------------------------------------

class Subspace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.params.v1beta1.Subspace) */ {
 public:
  inline Subspace() : Subspace(nullptr) {}
  ~Subspace() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Subspace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subspace(const Subspace& from);
  Subspace(Subspace&& from) noexcept
    : Subspace() {
    *this = ::std::move(from);
  }

  inline Subspace& operator=(const Subspace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subspace& operator=(Subspace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subspace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subspace* internal_default_instance() {
    return reinterpret_cast<const Subspace*>(
               &_Subspace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Subspace& a, Subspace& b) {
    a.Swap(&b);
  }
  inline void Swap(Subspace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subspace* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subspace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subspace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subspace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Subspace& from) {
    Subspace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subspace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.params.v1beta1.Subspace";
  }
  protected:
  explicit Subspace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kSubspaceFieldNumber = 1,
  };
  // repeated string keys = 2 [json_name = "keys"];
  int keys_size() const;
  private:
  int _internal_keys_size() const;

  public:
  void clear_keys() ;
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const char* value, std::size_t size);
  void set_keys(int index, absl::string_view value);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const char* value, std::size_t size);
  void add_keys(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();

  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_keys();

  public:
  // string subspace = 1 [json_name = "subspace"];
  void clear_subspace() ;
  const std::string& subspace() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subspace(Arg_&& arg, Args_... args);
  std::string* mutable_subspace();
  PROTOBUF_NODISCARD std::string* release_subspace();
  void set_allocated_subspace(std::string* ptr);

  private:
  const std::string& _internal_subspace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subspace(
      const std::string& value);
  std::string* _internal_mutable_subspace();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.params.v1beta1.Subspace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subspace_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fparams_2fv1beta1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryParamsRequest

// string subspace = 1 [json_name = "subspace"];
inline void QueryParamsRequest::clear_subspace() {
  _impl_.subspace_.ClearToEmpty();
}
inline const std::string& QueryParamsRequest::subspace() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.QueryParamsRequest.subspace)
  return _internal_subspace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryParamsRequest::set_subspace(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subspace_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.QueryParamsRequest.subspace)
}
inline std::string* QueryParamsRequest::mutable_subspace() {
  std::string* _s = _internal_mutable_subspace();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.QueryParamsRequest.subspace)
  return _s;
}
inline const std::string& QueryParamsRequest::_internal_subspace() const {
  return _impl_.subspace_.Get();
}
inline void QueryParamsRequest::_internal_set_subspace(const std::string& value) {
  ;


  _impl_.subspace_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryParamsRequest::_internal_mutable_subspace() {
  ;
  return _impl_.subspace_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryParamsRequest::release_subspace() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.QueryParamsRequest.subspace)
  return _impl_.subspace_.Release();
}
inline void QueryParamsRequest::set_allocated_subspace(std::string* value) {
  _impl_.subspace_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subspace_.IsDefault()) {
          _impl_.subspace_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.QueryParamsRequest.subspace)
}

// string key = 2 [json_name = "key"];
inline void QueryParamsRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& QueryParamsRequest::key() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.QueryParamsRequest.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryParamsRequest::set_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.QueryParamsRequest.key)
}
inline std::string* QueryParamsRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.QueryParamsRequest.key)
  return _s;
}
inline const std::string& QueryParamsRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void QueryParamsRequest::_internal_set_key(const std::string& value) {
  ;


  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryParamsRequest::_internal_mutable_key() {
  ;
  return _impl_.key_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryParamsRequest::release_key() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.QueryParamsRequest.key)
  return _impl_.key_.Release();
}
inline void QueryParamsRequest::set_allocated_key(std::string* value) {
  _impl_.key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.QueryParamsRequest.key)
}

// -------------------------------------------------------------------

// QueryParamsResponse

// .cosmos.params.v1beta1.ParamChange param = 1 [json_name = "param", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline bool QueryParamsResponse::has_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.param_ != nullptr);
  return value;
}
inline const ::cosmos::params::v1beta1::ParamChange& QueryParamsResponse::_internal_param() const {
  const ::cosmos::params::v1beta1::ParamChange* p = _impl_.param_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::params::v1beta1::ParamChange&>(
      ::cosmos::params::v1beta1::_ParamChange_default_instance_);
}
inline const ::cosmos::params::v1beta1::ParamChange& QueryParamsResponse::param() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.QueryParamsResponse.param)
  return _internal_param();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_param(
    ::cosmos::params::v1beta1::ParamChange* param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  _impl_.param_ = param;
  if (param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.params.v1beta1.QueryParamsResponse.param)
}
inline ::cosmos::params::v1beta1::ParamChange* QueryParamsResponse::release_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::params::v1beta1::ParamChange* temp = _impl_.param_;
  _impl_.param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::params::v1beta1::ParamChange* QueryParamsResponse::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.QueryParamsResponse.param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::params::v1beta1::ParamChange* temp = _impl_.param_;
  _impl_.param_ = nullptr;
  return temp;
}
inline ::cosmos::params::v1beta1::ParamChange* QueryParamsResponse::_internal_mutable_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.param_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::params::v1beta1::ParamChange>(GetArenaForAllocation());
    _impl_.param_ = p;
  }
  return _impl_.param_;
}
inline ::cosmos::params::v1beta1::ParamChange* QueryParamsResponse::mutable_param() {
  ::cosmos::params::v1beta1::ParamChange* _msg = _internal_mutable_param();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.QueryParamsResponse.param)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_param(::cosmos::params::v1beta1::ParamChange* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.param_);
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param));
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.param_ = param;
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.QueryParamsResponse.param)
}

// -------------------------------------------------------------------

// QuerySubspacesRequest

// -------------------------------------------------------------------

// QuerySubspacesResponse

// repeated .cosmos.params.v1beta1.Subspace subspaces = 1 [json_name = "subspaces"];
inline int QuerySubspacesResponse::_internal_subspaces_size() const {
  return _impl_.subspaces_.size();
}
inline int QuerySubspacesResponse::subspaces_size() const {
  return _internal_subspaces_size();
}
inline void QuerySubspacesResponse::clear_subspaces() {
  _internal_mutable_subspaces()->Clear();
}
inline ::cosmos::params::v1beta1::Subspace* QuerySubspacesResponse::mutable_subspaces(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _internal_mutable_subspaces()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::Subspace >*
QuerySubspacesResponse::mutable_subspaces() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _internal_mutable_subspaces();
}
inline const ::cosmos::params::v1beta1::Subspace& QuerySubspacesResponse::_internal_subspaces(int index) const {
  return _internal_subspaces().Get(index);
}
inline const ::cosmos::params::v1beta1::Subspace& QuerySubspacesResponse::subspaces(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _internal_subspaces(index);
}
inline ::cosmos::params::v1beta1::Subspace* QuerySubspacesResponse::_internal_add_subspaces() {
  return _internal_mutable_subspaces()->Add();
}
inline ::cosmos::params::v1beta1::Subspace* QuerySubspacesResponse::add_subspaces() {
  ::cosmos::params::v1beta1::Subspace* _add = _internal_add_subspaces();
  // @@protoc_insertion_point(field_add:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::params::v1beta1::Subspace >&
QuerySubspacesResponse::subspaces() const {
  // @@protoc_insertion_point(field_list:cosmos.params.v1beta1.QuerySubspacesResponse.subspaces)
  return _internal_subspaces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>&
QuerySubspacesResponse::_internal_subspaces() const {
  return _impl_.subspaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::params::v1beta1::Subspace>*
QuerySubspacesResponse::_internal_mutable_subspaces() {
  return &_impl_.subspaces_;
}

// -------------------------------------------------------------------

// Subspace

// string subspace = 1 [json_name = "subspace"];
inline void Subspace::clear_subspace() {
  _impl_.subspace_.ClearToEmpty();
}
inline const std::string& Subspace::subspace() const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.Subspace.subspace)
  return _internal_subspace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Subspace::set_subspace(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subspace_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.Subspace.subspace)
}
inline std::string* Subspace::mutable_subspace() {
  std::string* _s = _internal_mutable_subspace();
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.Subspace.subspace)
  return _s;
}
inline const std::string& Subspace::_internal_subspace() const {
  return _impl_.subspace_.Get();
}
inline void Subspace::_internal_set_subspace(const std::string& value) {
  ;


  _impl_.subspace_.Set(value, GetArenaForAllocation());
}
inline std::string* Subspace::_internal_mutable_subspace() {
  ;
  return _impl_.subspace_.Mutable( GetArenaForAllocation());
}
inline std::string* Subspace::release_subspace() {
  // @@protoc_insertion_point(field_release:cosmos.params.v1beta1.Subspace.subspace)
  return _impl_.subspace_.Release();
}
inline void Subspace::set_allocated_subspace(std::string* value) {
  _impl_.subspace_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subspace_.IsDefault()) {
          _impl_.subspace_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.params.v1beta1.Subspace.subspace)
}

// repeated string keys = 2 [json_name = "keys"];
inline int Subspace::_internal_keys_size() const {
  return _impl_.keys_.size();
}
inline int Subspace::keys_size() const {
  return _internal_keys_size();
}
inline void Subspace::clear_keys() {
  _internal_mutable_keys()->Clear();
}
inline std::string* Subspace::add_keys() {
  std::string* _s = _internal_add_keys();
  // @@protoc_insertion_point(field_add_mutable:cosmos.params.v1beta1.Subspace.keys)
  return _s;
}
inline const std::string& Subspace::keys(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.params.v1beta1.Subspace.keys)
  return _internal_keys(index);
}
inline std::string* Subspace::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.params.v1beta1.Subspace.keys)
  return _internal_mutable_keys()->Mutable(index);
}
inline void Subspace::set_keys(int index, const std::string& value) {
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::set_keys(int index, std::string&& value) {
  _internal_mutable_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::set_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::set_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::set_keys(int index, absl::string_view value) {
  _internal_mutable_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::add_keys(const std::string& value) {
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::add_keys(std::string&& value) {
  _internal_mutable_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::add_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::add_keys(const char* value, std::size_t size) {
  _internal_mutable_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cosmos.params.v1beta1.Subspace.keys)
}
inline void Subspace::add_keys(absl::string_view value) {
  _internal_mutable_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:cosmos.params.v1beta1.Subspace.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Subspace::keys() const {
  // @@protoc_insertion_point(field_list:cosmos.params.v1beta1.Subspace.keys)
  return _internal_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Subspace::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.params.v1beta1.Subspace.keys)
  return _internal_mutable_keys();
}
inline const std::string& Subspace::_internal_keys(int index) const {
  return _internal_keys().Get(index);
}
inline std::string* Subspace::_internal_add_keys() {
  return _internal_mutable_keys()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Subspace::_internal_keys() const {
  return _impl_.keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Subspace::_internal_mutable_keys() {
  return &_impl_.keys_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace params
}  // namespace cosmos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fparams_2fv1beta1_2fquery_2eproto_2epb_2eh

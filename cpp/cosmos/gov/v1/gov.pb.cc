// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/gov/v1/gov.proto

#include "cosmos/gov/v1/gov.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace gov {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR WeightedVoteOption::WeightedVoteOption(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weight_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.option_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WeightedVoteOptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeightedVoteOptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeightedVoteOptionDefaultTypeInternal() {}
  union {
    WeightedVoteOption _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeightedVoteOptionDefaultTypeInternal _WeightedVoteOption_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Deposit::Deposit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amount_)*/{}
  , /*decltype(_impl_.depositor_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DepositDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepositDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepositDefaultTypeInternal() {}
  union {
    Deposit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepositDefaultTypeInternal _Deposit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Proposal::Proposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.total_deposit_)*/{}
  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.summary_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.final_tally_result_)*/nullptr
  , /*decltype(_impl_.submit_time_)*/nullptr
  , /*decltype(_impl_.deposit_end_time_)*/nullptr
  , /*decltype(_impl_.voting_start_time_)*/nullptr
  , /*decltype(_impl_.voting_end_time_)*/nullptr
  , /*decltype(_impl_.id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.status_)*/ 0
} {}
struct ProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalDefaultTypeInternal() {}
  union {
    Proposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalDefaultTypeInternal _Proposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TallyResult::TallyResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.yes_count_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.abstain_count_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.no_count_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.no_with_veto_count_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TallyResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TallyResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TallyResultDefaultTypeInternal() {}
  union {
    TallyResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TallyResultDefaultTypeInternal _TallyResult_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vote::Vote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.options_)*/{}
  , /*decltype(_impl_.voter_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposal_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteDefaultTypeInternal _Vote_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DepositParams::DepositParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_deposit_)*/{}
  , /*decltype(_impl_.max_deposit_period_)*/nullptr} {}
struct DepositParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DepositParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DepositParamsDefaultTypeInternal() {}
  union {
    DepositParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DepositParamsDefaultTypeInternal _DepositParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VotingParams::VotingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voting_period_)*/nullptr} {}
struct VotingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VotingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VotingParamsDefaultTypeInternal() {}
  union {
    VotingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VotingParamsDefaultTypeInternal _VotingParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TallyParams::TallyParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quorum_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.threshold_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.veto_threshold_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TallyParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TallyParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TallyParamsDefaultTypeInternal() {}
  union {
    TallyParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TallyParamsDefaultTypeInternal _TallyParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_deposit_)*/{}
  , /*decltype(_impl_.quorum_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.threshold_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.veto_threshold_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.min_initial_deposit_ratio_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.max_deposit_period_)*/nullptr
  , /*decltype(_impl_.voting_period_)*/nullptr
  , /*decltype(_impl_.burn_vote_quorum_)*/ false

  , /*decltype(_impl_.burn_proposal_deposit_prevote_)*/ false

  , /*decltype(_impl_.burn_vote_veto_)*/ false
} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1
}  // namespace gov
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cosmos_2fgov_2fv1_2fgov_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fgov_2fv1_2fgov_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::WeightedVoteOption, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::WeightedVoteOption, _impl_.option_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::WeightedVoteOption, _impl_.weight_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Deposit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Deposit, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Deposit, _impl_.depositor_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Deposit, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.messages_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.final_tally_result_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.submit_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.deposit_end_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.total_deposit_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.voting_start_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.voting_end_time_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.summary_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Proposal, _impl_.proposer_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    3,
    4,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyResult, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyResult, _impl_.yes_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyResult, _impl_.abstain_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyResult, _impl_.no_count_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyResult, _impl_.no_with_veto_count_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Vote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Vote, _impl_.proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Vote, _impl_.voter_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Vote, _impl_.options_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Vote, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::DepositParams, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::DepositParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::DepositParams, _impl_.min_deposit_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::DepositParams, _impl_.max_deposit_period_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::VotingParams, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::VotingParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::VotingParams, _impl_.voting_period_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyParams, _impl_.quorum_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyParams, _impl_.threshold_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::TallyParams, _impl_.veto_threshold_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.min_deposit_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.max_deposit_period_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.voting_period_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.quorum_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.threshold_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.veto_threshold_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.min_initial_deposit_ratio_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.burn_vote_quorum_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.burn_proposal_deposit_prevote_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::Params, _impl_.burn_vote_veto_),
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::cosmos::gov::v1::WeightedVoteOption)},
        { 10, -1, -1, sizeof(::cosmos::gov::v1::Deposit)},
        { 21, 42, -1, sizeof(::cosmos::gov::v1::Proposal)},
        { 55, -1, -1, sizeof(::cosmos::gov::v1::TallyResult)},
        { 67, -1, -1, sizeof(::cosmos::gov::v1::Vote)},
        { 79, 89, -1, sizeof(::cosmos::gov::v1::DepositParams)},
        { 91, 100, -1, sizeof(::cosmos::gov::v1::VotingParams)},
        { 101, -1, -1, sizeof(::cosmos::gov::v1::TallyParams)},
        { 112, 130, -1, sizeof(::cosmos::gov::v1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::gov::v1::_WeightedVoteOption_default_instance_._instance,
    &::cosmos::gov::v1::_Deposit_default_instance_._instance,
    &::cosmos::gov::v1::_Proposal_default_instance_._instance,
    &::cosmos::gov::v1::_TallyResult_default_instance_._instance,
    &::cosmos::gov::v1::_Vote_default_instance_._instance,
    &::cosmos::gov::v1::_DepositParams_default_instance_._instance,
    &::cosmos::gov::v1::_VotingParams_default_instance_._instance,
    &::cosmos::gov::v1::_TallyParams_default_instance_._instance,
    &::cosmos::gov::v1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fgov_2fv1_2fgov_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\027cosmos/gov/v1/gov.proto\022\rcosmos.gov.v1"
    "\032\036cosmos/base/v1beta1/coin.proto\032\024gogopr"
    "oto/gogo.proto\032\037google/protobuf/timestam"
    "p.proto\032\031google/protobuf/any.proto\032\036goog"
    "le/protobuf/duration.proto\032\031cosmos_proto"
    "/cosmos.proto\032\021amino/amino.proto\"o\n\022Weig"
    "htedVoteOption\0221\n\006option\030\001 \001(\0162\031.cosmos."
    "gov.v1.VoteOptionR\006option\022&\n\006weight\030\002 \001("
    "\tB\016\322\264-\ncosmos.DecR\006weight\"\240\001\n\007Deposit\022\037\n"
    "\013proposal_id\030\001 \001(\004R\nproposalId\0226\n\tdeposi"
    "tor\030\002 \001(\tB\030\322\264-\024cosmos.AddressStringR\tdep"
    "ositor\022<\n\006amount\030\003 \003(\0132\031.cosmos.base.v1b"
    "eta1.CoinB\t\310\336\037\000\250\347\260*\001R\006amount\"\301\005\n\010Proposa"
    "l\022\016\n\002id\030\001 \001(\004R\002id\0220\n\010messages\030\002 \003(\0132\024.go"
    "ogle.protobuf.AnyR\010messages\0225\n\006status\030\003 "
    "\001(\0162\035.cosmos.gov.v1.ProposalStatusR\006stat"
    "us\022H\n\022final_tally_result\030\004 \001(\0132\032.cosmos."
    "gov.v1.TallyResultR\020finalTallyResult\022A\n\013"
    "submit_time\030\005 \001(\0132\032.google.protobuf.Time"
    "stampB\004\220\337\037\001R\nsubmitTime\022J\n\020deposit_end_t"
    "ime\030\006 \001(\0132\032.google.protobuf.TimestampB\004\220"
    "\337\037\001R\016depositEndTime\022I\n\rtotal_deposit\030\007 \003"
    "(\0132\031.cosmos.base.v1beta1.CoinB\t\310\336\037\000\250\347\260*\001"
    "R\014totalDeposit\022L\n\021voting_start_time\030\010 \001("
    "\0132\032.google.protobuf.TimestampB\004\220\337\037\001R\017vot"
    "ingStartTime\022H\n\017voting_end_time\030\t \001(\0132\032."
    "google.protobuf.TimestampB\004\220\337\037\001R\rvotingE"
    "ndTime\022\032\n\010metadata\030\n \001(\tR\010metadata\022\024\n\005ti"
    "tle\030\013 \001(\tR\005title\022\030\n\007summary\030\014 \001(\tR\007summa"
    "ry\0224\n\010proposer\030\r \001(\tB\030\322\264-\024cosmos.Address"
    "StringR\010proposer\"\327\001\n\013TallyResult\022+\n\tyes_"
    "count\030\001 \001(\tB\016\322\264-\ncosmos.IntR\010yesCount\0223\n"
    "\rabstain_count\030\002 \001(\tB\016\322\264-\ncosmos.IntR\014ab"
    "stainCount\022)\n\010no_count\030\003 \001(\tB\016\322\264-\ncosmos"
    ".IntR\007noCount\022;\n\022no_with_veto_count\030\004 \001("
    "\tB\016\322\264-\ncosmos.IntR\017noWithVetoCount\"\266\001\n\004V"
    "ote\022\037\n\013proposal_id\030\001 \001(\004R\nproposalId\022.\n\005"
    "voter\030\002 \001(\tB\030\322\264-\024cosmos.AddressStringR\005v"
    "oter\022;\n\007options\030\004 \003(\0132!.cosmos.gov.v1.We"
    "ightedVoteOptionR\007options\022\032\n\010metadata\030\005 "
    "\001(\tR\010metadataJ\004\010\003\020\004\"\331\001\n\rDepositParams\022Y\n"
    "\013min_deposit\030\001 \003(\0132\031.cosmos.base.v1beta1"
    ".CoinB\035\310\336\037\000\352\336\037\025min_deposit,omitemptyR\nmi"
    "nDeposit\022m\n\022max_deposit_period\030\002 \001(\0132\031.g"
    "oogle.protobuf.DurationB$\352\336\037\034max_deposit"
    "_period,omitempty\230\337\037\001R\020maxDepositPeriod\""
    "T\n\014VotingParams\022D\n\rvoting_period\030\001 \001(\0132\031"
    ".google.protobuf.DurationB\004\230\337\037\001R\014votingP"
    "eriod\"\232\001\n\013TallyParams\022&\n\006quorum\030\001 \001(\tB\016\322"
    "\264-\ncosmos.DecR\006quorum\022,\n\tthreshold\030\002 \001(\t"
    "B\016\322\264-\ncosmos.DecR\tthreshold\0225\n\016veto_thre"
    "shold\030\003 \001(\tB\016\322\264-\ncosmos.DecR\rvetoThresho"
    "ld\"\317\004\n\006Params\022E\n\013min_deposit\030\001 \003(\0132\031.cos"
    "mos.base.v1beta1.CoinB\t\310\336\037\000\250\347\260*\001R\nminDep"
    "osit\022M\n\022max_deposit_period\030\002 \001(\0132\031.googl"
    "e.protobuf.DurationB\004\230\337\037\001R\020maxDepositPer"
    "iod\022D\n\rvoting_period\030\003 \001(\0132\031.google.prot"
    "obuf.DurationB\004\230\337\037\001R\014votingPeriod\022&\n\006quo"
    "rum\030\004 \001(\tB\016\322\264-\ncosmos.DecR\006quorum\022,\n\tthr"
    "eshold\030\005 \001(\tB\016\322\264-\ncosmos.DecR\tthreshold\022"
    "5\n\016veto_threshold\030\006 \001(\tB\016\322\264-\ncosmos.DecR"
    "\rvetoThreshold\022I\n\031min_initial_deposit_ra"
    "tio\030\007 \001(\tB\016\322\264-\ncosmos.DecR\026minInitialDep"
    "ositRatio\022(\n\020burn_vote_quorum\030\r \001(\010R\016bur"
    "nVoteQuorum\022A\n\035burn_proposal_deposit_pre"
    "vote\030\016 \001(\010R\032burnProposalDepositPrevote\022$"
    "\n\016burn_vote_veto\030\017 \001(\010R\014burnVoteVeto*\211\001\n"
    "\nVoteOption\022\033\n\027VOTE_OPTION_UNSPECIFIED\020\000"
    "\022\023\n\017VOTE_OPTION_YES\020\001\022\027\n\023VOTE_OPTION_ABS"
    "TAIN\020\002\022\022\n\016VOTE_OPTION_NO\020\003\022\034\n\030VOTE_OPTIO"
    "N_NO_WITH_VETO\020\004*\316\001\n\016ProposalStatus\022\037\n\033P"
    "ROPOSAL_STATUS_UNSPECIFIED\020\000\022\"\n\036PROPOSAL"
    "_STATUS_DEPOSIT_PERIOD\020\001\022!\n\035PROPOSAL_STA"
    "TUS_VOTING_PERIOD\020\002\022\032\n\026PROPOSAL_STATUS_P"
    "ASSED\020\003\022\034\n\030PROPOSAL_STATUS_REJECTED\020\004\022\032\n"
    "\026PROPOSAL_STATUS_FAILED\020\005B\240\001\n\021com.cosmos"
    ".gov.v1B\010GovProtoP\001Z+github.com/cosmos/c"
    "osmos-sdk/x/gov/types/v1\242\002\003CGX\252\002\rCosmos."
    "Gov.V1\312\002\rCosmos\\Gov\\V1\342\002\031Cosmos\\Gov\\V1\\G"
    "PBMetadata\352\002\017Cosmos::Gov::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_deps[7] =
    {
        &::descriptor_table_amino_2famino_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto = {
    false,
    false,
    3196,
    descriptor_table_protodef_cosmos_2fgov_2fv1_2fgov_2eproto,
    "cosmos/gov/v1/gov.proto",
    &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
    descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_deps,
    7,
    9,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto::offsets,
    file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto,
    file_level_enum_descriptors_cosmos_2fgov_2fv1_2fgov_2eproto,
    file_level_service_descriptors_cosmos_2fgov_2fv1_2fgov_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter() {
  return &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fgov_2fv1_2fgov_2eproto(&descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto);
namespace cosmos {
namespace gov {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoteOption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto);
  return file_level_enum_descriptors_cosmos_2fgov_2fv1_2fgov_2eproto[0];
}
bool VoteOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto);
  return file_level_enum_descriptors_cosmos_2fgov_2fv1_2fgov_2eproto[1];
}
bool ProposalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class WeightedVoteOption::_Internal {
 public:
};

WeightedVoteOption::WeightedVoteOption(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.WeightedVoteOption)
}
WeightedVoteOption::WeightedVoteOption(const WeightedVoteOption& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WeightedVoteOption* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_) {}

    , decltype(_impl_.option_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.weight_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weight().empty()) {
    _this->_impl_.weight_.Set(from._internal_weight(), _this->GetArenaForAllocation());
  }
  _this->_impl_.option_ = from._impl_.option_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.WeightedVoteOption)
}

inline void WeightedVoteOption::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_) {}

    , decltype(_impl_.option_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.weight_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.weight_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WeightedVoteOption::~WeightedVoteOption() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.WeightedVoteOption)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WeightedVoteOption::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.weight_.Destroy();
}

void WeightedVoteOption::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WeightedVoteOption::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.WeightedVoteOption)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weight_.ClearToEmpty();
  _impl_.option_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeightedVoteOption::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.gov.v1.VoteOption option = 1 [json_name = "option"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_option(static_cast<::cosmos::gov::v1::VoteOption>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string weight = 2 [json_name = "weight", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_weight();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.WeightedVoteOption.weight"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WeightedVoteOption::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.WeightedVoteOption)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .cosmos.gov.v1.VoteOption option = 1 [json_name = "option"];
  if (this->_internal_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_option(), target);
  }

  // string weight = 2 [json_name = "weight", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_weight().empty()) {
    const std::string& _s = this->_internal_weight();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.WeightedVoteOption.weight");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.WeightedVoteOption)
  return target;
}

::size_t WeightedVoteOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.WeightedVoteOption)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string weight = 2 [json_name = "weight", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_weight().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_weight());
  }

  // .cosmos.gov.v1.VoteOption option = 1 [json_name = "option"];
  if (this->_internal_option() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_option());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WeightedVoteOption::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WeightedVoteOption::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WeightedVoteOption::GetClassData() const { return &_class_data_; }


void WeightedVoteOption::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WeightedVoteOption*>(&to_msg);
  auto& from = static_cast<const WeightedVoteOption&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.WeightedVoteOption)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_weight().empty()) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_option() != 0) {
    _this->_internal_set_option(from._internal_option());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WeightedVoteOption::CopyFrom(const WeightedVoteOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.WeightedVoteOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightedVoteOption::IsInitialized() const {
  return true;
}

void WeightedVoteOption::InternalSwap(WeightedVoteOption* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.weight_, lhs_arena,
                                       &other->_impl_.weight_, rhs_arena);
  swap(_impl_.option_, other->_impl_.option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WeightedVoteOption::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[0]);
}
// ===================================================================

class Deposit::_Internal {
 public:
};

void Deposit::clear_amount() {
  _internal_mutable_amount()->Clear();
}
Deposit::Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.Deposit)
}
Deposit::Deposit(const Deposit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Deposit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){from._impl_.amount_}
    , decltype(_impl_.depositor_) {}

    , decltype(_impl_.proposal_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.depositor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.depositor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_depositor().empty()) {
    _this->_impl_.depositor_.Set(from._internal_depositor(), _this->GetArenaForAllocation());
  }
  _this->_impl_.proposal_id_ = from._impl_.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.Deposit)
}

inline void Deposit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.amount_){arena}
    , decltype(_impl_.depositor_) {}

    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.depositor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.depositor_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Deposit::~Deposit() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.Deposit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Deposit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_amount()->~RepeatedPtrField();
  _impl_.depositor_.Destroy();
}

void Deposit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Deposit::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.Deposit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_amount()->Clear();
  _impl_.depositor_.ClearToEmpty();
  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deposit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_depositor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Deposit.depositor"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_amount(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Deposit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.Deposit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_depositor().empty()) {
    const std::string& _s = this->_internal_depositor();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Deposit.depositor");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_amount_size()); i < n; i++) {
    const auto& repfield = this->_internal_amount(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.Deposit)
  return target;
}

::size_t Deposit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.Deposit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_amount_size();
  for (const auto& msg : this->_internal_amount()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_depositor().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_depositor());
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Deposit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Deposit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Deposit::GetClassData() const { return &_class_data_; }


void Deposit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Deposit*>(&to_msg);
  auto& from = static_cast<const Deposit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.Deposit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_amount()->MergeFrom(from._internal_amount());
  if (!from._internal_depositor().empty()) {
    _this->_internal_set_depositor(from._internal_depositor());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Deposit::CopyFrom(const Deposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.Deposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deposit::IsInitialized() const {
  return true;
}

void Deposit::InternalSwap(Deposit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_amount()->InternalSwap(other->_internal_mutable_amount());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.depositor_, lhs_arena,
                                       &other->_impl_.depositor_, rhs_arena);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Deposit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[1]);
}
// ===================================================================

class Proposal::_Internal {
 public:
  using HasBits = decltype(std::declval<Proposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Proposal, _impl_._has_bits_);
  static const ::cosmos::gov::v1::TallyResult& final_tally_result(const Proposal* msg);
  static void set_has_final_tally_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& submit_time(const Proposal* msg);
  static void set_has_submit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deposit_end_time(const Proposal* msg);
  static void set_has_deposit_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& voting_start_time(const Proposal* msg);
  static void set_has_voting_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& voting_end_time(const Proposal* msg);
  static void set_has_voting_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::cosmos::gov::v1::TallyResult&
Proposal::_Internal::final_tally_result(const Proposal* msg) {
  return *msg->_impl_.final_tally_result_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::submit_time(const Proposal* msg) {
  return *msg->_impl_.submit_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::deposit_end_time(const Proposal* msg) {
  return *msg->_impl_.deposit_end_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::voting_start_time(const Proposal* msg) {
  return *msg->_impl_.voting_start_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::voting_end_time(const Proposal* msg) {
  return *msg->_impl_.voting_end_time_;
}
void Proposal::clear_messages() {
  _internal_mutable_messages()->Clear();
}
void Proposal::clear_submit_time() {
  if (_impl_.submit_time_ != nullptr) _impl_.submit_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Proposal::clear_deposit_end_time() {
  if (_impl_.deposit_end_time_ != nullptr) _impl_.deposit_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Proposal::clear_total_deposit() {
  _internal_mutable_total_deposit()->Clear();
}
void Proposal::clear_voting_start_time() {
  if (_impl_.voting_start_time_ != nullptr) _impl_.voting_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Proposal::clear_voting_end_time() {
  if (_impl_.voting_end_time_ != nullptr) _impl_.voting_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Proposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.total_deposit_){from._impl_.total_deposit_}
    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.title_) {}

    , decltype(_impl_.summary_) {}

    , decltype(_impl_.proposer_) {}

    , decltype(_impl_.final_tally_result_){nullptr}
    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.deposit_end_time_){nullptr}
    , decltype(_impl_.voting_start_time_){nullptr}
    , decltype(_impl_.voting_end_time_){nullptr}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.summary_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary().empty()) {
    _this->_impl_.summary_.Set(from._internal_summary(), _this->GetArenaForAllocation());
  }
  _impl_.proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer().empty()) {
    _this->_impl_.proposer_.Set(from._internal_proposer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.final_tally_result_ = new ::cosmos::gov::v1::TallyResult(*from._impl_.final_tally_result_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.submit_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.submit_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.deposit_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deposit_end_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.voting_start_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.voting_start_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.voting_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.voting_end_time_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.Proposal)
}

inline void Proposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messages_){arena}
    , decltype(_impl_.total_deposit_){arena}
    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.title_) {}

    , decltype(_impl_.summary_) {}

    , decltype(_impl_.proposer_) {}

    , decltype(_impl_.final_tally_result_){nullptr}
    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.deposit_end_time_){nullptr}
    , decltype(_impl_.voting_start_time_){nullptr}
    , decltype(_impl_.voting_end_time_){nullptr}
    , decltype(_impl_.id_) { ::uint64_t{0u} }

    , decltype(_impl_.status_) { 0 }

  };
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.summary_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proposer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.Proposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Proposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_messages()->~RepeatedPtrField();
  _internal_mutable_total_deposit()->~RepeatedPtrField();
  _impl_.metadata_.Destroy();
  _impl_.title_.Destroy();
  _impl_.summary_.Destroy();
  _impl_.proposer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.final_tally_result_;
  if (this != internal_default_instance()) delete _impl_.submit_time_;
  if (this != internal_default_instance()) delete _impl_.deposit_end_time_;
  if (this != internal_default_instance()) delete _impl_.voting_start_time_;
  if (this != internal_default_instance()) delete _impl_.voting_end_time_;
}

void Proposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.Proposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_messages()->Clear();
  _internal_mutable_total_deposit()->Clear();
  _impl_.metadata_.ClearToEmpty();
  _impl_.title_.ClearToEmpty();
  _impl_.summary_.ClearToEmpty();
  _impl_.proposer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.final_tally_result_ != nullptr);
      _impl_.final_tally_result_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.submit_time_ != nullptr);
      _impl_.submit_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.deposit_end_time_ != nullptr);
      _impl_.deposit_end_time_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.voting_start_time_ != nullptr);
      _impl_.voting_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.voting_end_time_ != nullptr);
      _impl_.voting_end_time_->Clear();
    }
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .google.protobuf.Any messages = 2 [json_name = "messages"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.gov.v1.ProposalStatus status = 3 [json_name = "status"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::cosmos::gov::v1::ProposalStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.gov.v1.TallyResult final_tally_result = 4 [json_name = "finalTallyResult"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_tally_result(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp deposit_end_time = 6 [json_name = "depositEndTime", (.gogoproto.stdtime) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit_end_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin total_deposit = 7 [json_name = "totalDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_total_deposit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp voting_start_time = 8 [json_name = "votingStartTime", (.gogoproto.stdtime) = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_voting_start_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp voting_end_time = 9 [json_name = "votingEndTime", (.gogoproto.stdtime) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_voting_end_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string metadata = 10 [json_name = "metadata"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Proposal.metadata"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string title = 11 [json_name = "title"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Proposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string summary = 12 [json_name = "summary"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Proposal.summary"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string proposer = 13 [json_name = "proposer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_proposer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Proposal.proposer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Proposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.Proposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_id(), target);
  }

  // repeated .google.protobuf.Any messages = 2 [json_name = "messages"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .cosmos.gov.v1.ProposalStatus status = 3 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.gov.v1.TallyResult final_tally_result = 4 [json_name = "finalTallyResult"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::final_tally_result(this),
        _Internal::final_tally_result(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::submit_time(this),
        _Internal::submit_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp deposit_end_time = 6 [json_name = "depositEndTime", (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::deposit_end_time(this),
        _Internal::deposit_end_time(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.v1beta1.Coin total_deposit = 7 [json_name = "totalDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_total_deposit_size()); i < n; i++) {
    const auto& repfield = this->_internal_total_deposit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp voting_start_time = 8 [json_name = "votingStartTime", (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::voting_start_time(this),
        _Internal::voting_start_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp voting_end_time = 9 [json_name = "votingEndTime", (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::voting_end_time(this),
        _Internal::voting_end_time(this).GetCachedSize(), target, stream);
  }

  // string metadata = 10 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Proposal.metadata");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // string title = 11 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Proposal.title");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // string summary = 12 [json_name = "summary"];
  if (!this->_internal_summary().empty()) {
    const std::string& _s = this->_internal_summary();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Proposal.summary");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // string proposer = 13 [json_name = "proposer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_proposer().empty()) {
    const std::string& _s = this->_internal_proposer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Proposal.proposer");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.Proposal)
  return target;
}

::size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.Proposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any messages = 2 [json_name = "messages"];
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_internal_messages()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.base.v1beta1.Coin total_deposit = 7 [json_name = "totalDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_total_deposit_size();
  for (const auto& msg : this->_internal_total_deposit()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string metadata = 10 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_metadata());
  }

  // string title = 11 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string summary = 12 [json_name = "summary"];
  if (!this->_internal_summary().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_summary());
  }

  // string proposer = 13 [json_name = "proposer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_proposer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_proposer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // .cosmos.gov.v1.TallyResult final_tally_result = 4 [json_name = "finalTallyResult"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.final_tally_result_);
    }

    // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.submit_time_);
    }

    // .google.protobuf.Timestamp deposit_end_time = 6 [json_name = "depositEndTime", (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deposit_end_time_);
    }

    // .google.protobuf.Timestamp voting_start_time = 8 [json_name = "votingStartTime", (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voting_start_time_);
    }

    // .google.protobuf.Timestamp voting_end_time = 9 [json_name = "votingEndTime", (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voting_end_time_);
    }

  }
  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_id());
  }

  // .cosmos.gov.v1.ProposalStatus status = 3 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Proposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proposal::GetClassData() const { return &_class_data_; }


void Proposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Proposal*>(&to_msg);
  auto& from = static_cast<const Proposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.Proposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(from._internal_messages());
  _this->_internal_mutable_total_deposit()->MergeFrom(from._internal_total_deposit());
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_summary().empty()) {
    _this->_internal_set_summary(from._internal_summary());
  }
  if (!from._internal_proposer().empty()) {
    _this->_internal_set_proposer(from._internal_proposer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_final_tally_result()->::cosmos::gov::v1::TallyResult::MergeFrom(
          from._internal_final_tally_result());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_submit_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_submit_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deposit_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_deposit_end_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_voting_start_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_voting_start_time());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_voting_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_voting_end_time());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_messages()->InternalSwap(other->_internal_mutable_messages());
  _internal_mutable_total_deposit()->InternalSwap(other->_internal_mutable_total_deposit());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.summary_, lhs_arena,
                                       &other->_impl_.summary_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposer_, lhs_arena,
                                       &other->_impl_.proposer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, _impl_.status_)
      + sizeof(Proposal::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Proposal, _impl_.final_tally_result_)>(
          reinterpret_cast<char*>(&_impl_.final_tally_result_),
          reinterpret_cast<char*>(&other->_impl_.final_tally_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[2]);
}
// ===================================================================

class TallyResult::_Internal {
 public:
};

TallyResult::TallyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.TallyResult)
}
TallyResult::TallyResult(const TallyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TallyResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.yes_count_) {}

    , decltype(_impl_.abstain_count_) {}

    , decltype(_impl_.no_count_) {}

    , decltype(_impl_.no_with_veto_count_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.yes_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.yes_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_yes_count().empty()) {
    _this->_impl_.yes_count_.Set(from._internal_yes_count(), _this->GetArenaForAllocation());
  }
  _impl_.abstain_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.abstain_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_abstain_count().empty()) {
    _this->_impl_.abstain_count_.Set(from._internal_abstain_count(), _this->GetArenaForAllocation());
  }
  _impl_.no_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_no_count().empty()) {
    _this->_impl_.no_count_.Set(from._internal_no_count(), _this->GetArenaForAllocation());
  }
  _impl_.no_with_veto_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_with_veto_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_no_with_veto_count().empty()) {
    _this->_impl_.no_with_veto_count_.Set(from._internal_no_with_veto_count(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.TallyResult)
}

inline void TallyResult::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.yes_count_) {}

    , decltype(_impl_.abstain_count_) {}

    , decltype(_impl_.no_count_) {}

    , decltype(_impl_.no_with_veto_count_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.yes_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.yes_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abstain_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.abstain_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.no_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.no_with_veto_count_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.no_with_veto_count_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TallyResult::~TallyResult() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.TallyResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TallyResult::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.yes_count_.Destroy();
  _impl_.abstain_count_.Destroy();
  _impl_.no_count_.Destroy();
  _impl_.no_with_veto_count_.Destroy();
}

void TallyResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TallyResult::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.TallyResult)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.yes_count_.ClearToEmpty();
  _impl_.abstain_count_.ClearToEmpty();
  _impl_.no_count_.ClearToEmpty();
  _impl_.no_with_veto_count_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TallyResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string yes_count = 1 [json_name = "yesCount", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_yes_count();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.TallyResult.yes_count"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string abstain_count = 2 [json_name = "abstainCount", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_abstain_count();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.TallyResult.abstain_count"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string no_count = 3 [json_name = "noCount", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_no_count();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.TallyResult.no_count"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string no_with_veto_count = 4 [json_name = "noWithVetoCount", (.cosmos_proto.scalar) = "cosmos.Int"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_no_with_veto_count();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.TallyResult.no_with_veto_count"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TallyResult::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.TallyResult)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string yes_count = 1 [json_name = "yesCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_yes_count().empty()) {
    const std::string& _s = this->_internal_yes_count();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.TallyResult.yes_count");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string abstain_count = 2 [json_name = "abstainCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_abstain_count().empty()) {
    const std::string& _s = this->_internal_abstain_count();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.TallyResult.abstain_count");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string no_count = 3 [json_name = "noCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_no_count().empty()) {
    const std::string& _s = this->_internal_no_count();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.TallyResult.no_count");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string no_with_veto_count = 4 [json_name = "noWithVetoCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_no_with_veto_count().empty()) {
    const std::string& _s = this->_internal_no_with_veto_count();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.TallyResult.no_with_veto_count");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.TallyResult)
  return target;
}

::size_t TallyResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.TallyResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string yes_count = 1 [json_name = "yesCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_yes_count().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_yes_count());
  }

  // string abstain_count = 2 [json_name = "abstainCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_abstain_count().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_abstain_count());
  }

  // string no_count = 3 [json_name = "noCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_no_count().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_no_count());
  }

  // string no_with_veto_count = 4 [json_name = "noWithVetoCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  if (!this->_internal_no_with_veto_count().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_no_with_veto_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TallyResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TallyResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TallyResult::GetClassData() const { return &_class_data_; }


void TallyResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TallyResult*>(&to_msg);
  auto& from = static_cast<const TallyResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.TallyResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_yes_count().empty()) {
    _this->_internal_set_yes_count(from._internal_yes_count());
  }
  if (!from._internal_abstain_count().empty()) {
    _this->_internal_set_abstain_count(from._internal_abstain_count());
  }
  if (!from._internal_no_count().empty()) {
    _this->_internal_set_no_count(from._internal_no_count());
  }
  if (!from._internal_no_with_veto_count().empty()) {
    _this->_internal_set_no_with_veto_count(from._internal_no_with_veto_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TallyResult::CopyFrom(const TallyResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.TallyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TallyResult::IsInitialized() const {
  return true;
}

void TallyResult::InternalSwap(TallyResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.yes_count_, lhs_arena,
                                       &other->_impl_.yes_count_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.abstain_count_, lhs_arena,
                                       &other->_impl_.abstain_count_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.no_count_, lhs_arena,
                                       &other->_impl_.no_count_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.no_with_veto_count_, lhs_arena,
                                       &other->_impl_.no_with_veto_count_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata TallyResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[3]);
}
// ===================================================================

class Vote::_Internal {
 public:
};

Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){from._impl_.options_}
    , decltype(_impl_.voter_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.proposal_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voter().empty()) {
    _this->_impl_.voter_.Set(from._internal_voter(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  _this->_impl_.proposal_id_ = from._impl_.proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.Vote)
}

inline void Vote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.options_){arena}
    , decltype(_impl_.voter_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.proposal_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.voter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.voter_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.Vote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_options()->~RepeatedPtrField();
  _impl_.voter_.Destroy();
  _impl_.metadata_.Destroy();
}

void Vote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.Vote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_options()->Clear();
  _impl_.voter_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.proposal_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 proposal_id = 1 [json_name = "proposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_voter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Vote.voter"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.gov.v1.WeightedVoteOption options = 4 [json_name = "options"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string metadata = 5 [json_name = "metadata"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Vote.metadata"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.Vote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_proposal_id(), target);
  }

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    const std::string& _s = this->_internal_voter();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Vote.voter");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmos.gov.v1.WeightedVoteOption options = 4 [json_name = "options"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_options_size()); i < n; i++) {
    const auto& repfield = this->_internal_options(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string metadata = 5 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Vote.metadata");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.Vote)
  return target;
}

::size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.Vote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.gov.v1.WeightedVoteOption options = 4 [json_name = "options"];
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->_internal_options()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_voter().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_voter());
  }

  // string metadata = 5 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_metadata());
  }

  // uint64 proposal_id = 1 [json_name = "proposalId"];
  if (this->_internal_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vote::GetClassData() const { return &_class_data_; }


void Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vote*>(&to_msg);
  auto& from = static_cast<const Vote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.Vote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_options()->MergeFrom(from._internal_options());
  if (!from._internal_voter().empty()) {
    _this->_internal_set_voter(from._internal_voter());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_proposal_id() != 0) {
    _this->_internal_set_proposal_id(from._internal_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_options()->InternalSwap(other->_internal_mutable_options());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.voter_, lhs_arena,
                                       &other->_impl_.voter_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);

  swap(_impl_.proposal_id_, other->_impl_.proposal_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[4]);
}
// ===================================================================

class DepositParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DepositParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DepositParams, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& max_deposit_period(const DepositParams* msg);
  static void set_has_max_deposit_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
DepositParams::_Internal::max_deposit_period(const DepositParams* msg) {
  return *msg->_impl_.max_deposit_period_;
}
void DepositParams::clear_min_deposit() {
  _internal_mutable_min_deposit()->Clear();
}
void DepositParams::clear_max_deposit_period() {
  if (_impl_.max_deposit_period_ != nullptr) _impl_.max_deposit_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DepositParams::DepositParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.DepositParams)
}
DepositParams::DepositParams(const DepositParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DepositParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_deposit_){from._impl_.min_deposit_}
    , decltype(_impl_.max_deposit_period_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.max_deposit_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.max_deposit_period_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.DepositParams)
}

inline void DepositParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_deposit_){arena}
    , decltype(_impl_.max_deposit_period_){nullptr}
  };
}

DepositParams::~DepositParams() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.DepositParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DepositParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_min_deposit()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.max_deposit_period_;
}

void DepositParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DepositParams::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.DepositParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_min_deposit()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.max_deposit_period_ != nullptr);
    _impl_.max_deposit_period_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepositParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "min_deposit,omitempty"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_min_deposit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.jsontag) = "max_deposit_period,omitempty", (.gogoproto.stdduration) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_deposit_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DepositParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.DepositParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "min_deposit,omitempty"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_min_deposit_size()); i < n; i++) {
    const auto& repfield = this->_internal_min_deposit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.jsontag) = "max_deposit_period,omitempty", (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::max_deposit_period(this),
        _Internal::max_deposit_period(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.DepositParams)
  return target;
}

::size_t DepositParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.DepositParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "min_deposit,omitempty"];
  total_size += 1UL * this->_internal_min_deposit_size();
  for (const auto& msg : this->_internal_min_deposit()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.jsontag) = "max_deposit_period,omitempty", (.gogoproto.stdduration) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_deposit_period_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DepositParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DepositParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DepositParams::GetClassData() const { return &_class_data_; }


void DepositParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DepositParams*>(&to_msg);
  auto& from = static_cast<const DepositParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.DepositParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_min_deposit()->MergeFrom(from._internal_min_deposit());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_max_deposit_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_max_deposit_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DepositParams::CopyFrom(const DepositParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.DepositParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositParams::IsInitialized() const {
  return true;
}

void DepositParams::InternalSwap(DepositParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_min_deposit()->InternalSwap(other->_internal_mutable_min_deposit());
  swap(_impl_.max_deposit_period_, other->_impl_.max_deposit_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DepositParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[5]);
}
// ===================================================================

class VotingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<VotingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VotingParams, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& voting_period(const VotingParams* msg);
  static void set_has_voting_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
VotingParams::_Internal::voting_period(const VotingParams* msg) {
  return *msg->_impl_.voting_period_;
}
void VotingParams::clear_voting_period() {
  if (_impl_.voting_period_ != nullptr) _impl_.voting_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VotingParams::VotingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.VotingParams)
}
VotingParams::VotingParams(const VotingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VotingParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voting_period_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.voting_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.voting_period_);
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.VotingParams)
}

inline void VotingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voting_period_){nullptr}
  };
}

VotingParams::~VotingParams() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.VotingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VotingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.voting_period_;
}

void VotingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VotingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.VotingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.voting_period_ != nullptr);
    _impl_.voting_period_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VotingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_voting_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VotingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.VotingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::voting_period(this),
        _Internal::voting_period(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.VotingParams)
  return target;
}

::size_t VotingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.VotingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.voting_period_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VotingParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VotingParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VotingParams::GetClassData() const { return &_class_data_; }


void VotingParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VotingParams*>(&to_msg);
  auto& from = static_cast<const VotingParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.VotingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_voting_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_voting_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VotingParams::CopyFrom(const VotingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.VotingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VotingParams::IsInitialized() const {
  return true;
}

void VotingParams::InternalSwap(VotingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.voting_period_, other->_impl_.voting_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VotingParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[6]);
}
// ===================================================================

class TallyParams::_Internal {
 public:
};

TallyParams::TallyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.TallyParams)
}
TallyParams::TallyParams(const TallyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TallyParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quorum_) {}

    , decltype(_impl_.threshold_) {}

    , decltype(_impl_.veto_threshold_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quorum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quorum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quorum().empty()) {
    _this->_impl_.quorum_.Set(from._internal_quorum(), _this->GetArenaForAllocation());
  }
  _impl_.threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_threshold().empty()) {
    _this->_impl_.threshold_.Set(from._internal_threshold(), _this->GetArenaForAllocation());
  }
  _impl_.veto_threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.veto_threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_veto_threshold().empty()) {
    _this->_impl_.veto_threshold_.Set(from._internal_veto_threshold(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.TallyParams)
}

inline void TallyParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.quorum_) {}

    , decltype(_impl_.threshold_) {}

    , decltype(_impl_.veto_threshold_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quorum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quorum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.veto_threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.veto_threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TallyParams::~TallyParams() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.TallyParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TallyParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quorum_.Destroy();
  _impl_.threshold_.Destroy();
  _impl_.veto_threshold_.Destroy();
}

void TallyParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TallyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.TallyParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quorum_.ClearToEmpty();
  _impl_.threshold_.ClearToEmpty();
  _impl_.veto_threshold_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TallyParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string quorum = 1 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_quorum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.TallyParams.quorum"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string threshold = 2 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_threshold();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.TallyParams.threshold"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string veto_threshold = 3 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_veto_threshold();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.TallyParams.veto_threshold"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TallyParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.TallyParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string quorum = 1 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_quorum().empty()) {
    const std::string& _s = this->_internal_quorum();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.TallyParams.quorum");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string threshold = 2 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_threshold().empty()) {
    const std::string& _s = this->_internal_threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.TallyParams.threshold");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string veto_threshold = 3 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_veto_threshold().empty()) {
    const std::string& _s = this->_internal_veto_threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.TallyParams.veto_threshold");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.TallyParams)
  return target;
}

::size_t TallyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.TallyParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string quorum = 1 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_quorum().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quorum());
  }

  // string threshold = 2 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_threshold().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_threshold());
  }

  // string veto_threshold = 3 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_veto_threshold().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_veto_threshold());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TallyParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TallyParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TallyParams::GetClassData() const { return &_class_data_; }


void TallyParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TallyParams*>(&to_msg);
  auto& from = static_cast<const TallyParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.TallyParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quorum().empty()) {
    _this->_internal_set_quorum(from._internal_quorum());
  }
  if (!from._internal_threshold().empty()) {
    _this->_internal_set_threshold(from._internal_threshold());
  }
  if (!from._internal_veto_threshold().empty()) {
    _this->_internal_set_veto_threshold(from._internal_veto_threshold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TallyParams::CopyFrom(const TallyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.TallyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TallyParams::IsInitialized() const {
  return true;
}

void TallyParams::InternalSwap(TallyParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quorum_, lhs_arena,
                                       &other->_impl_.quorum_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.threshold_, lhs_arena,
                                       &other->_impl_.threshold_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.veto_threshold_, lhs_arena,
                                       &other->_impl_.veto_threshold_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata TallyParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[7]);
}
// ===================================================================

class Params::_Internal {
 public:
  using HasBits = decltype(std::declval<Params>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Params, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& max_deposit_period(const Params* msg);
  static void set_has_max_deposit_period(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& voting_period(const Params* msg);
  static void set_has_voting_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
Params::_Internal::max_deposit_period(const Params* msg) {
  return *msg->_impl_.max_deposit_period_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Params::_Internal::voting_period(const Params* msg) {
  return *msg->_impl_.voting_period_;
}
void Params::clear_min_deposit() {
  _internal_mutable_min_deposit()->Clear();
}
void Params::clear_max_deposit_period() {
  if (_impl_.max_deposit_period_ != nullptr) _impl_.max_deposit_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Params::clear_voting_period() {
  if (_impl_.voting_period_ != nullptr) _impl_.voting_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_deposit_){from._impl_.min_deposit_}
    , decltype(_impl_.quorum_) {}

    , decltype(_impl_.threshold_) {}

    , decltype(_impl_.veto_threshold_) {}

    , decltype(_impl_.min_initial_deposit_ratio_) {}

    , decltype(_impl_.max_deposit_period_){nullptr}
    , decltype(_impl_.voting_period_){nullptr}
    , decltype(_impl_.burn_vote_quorum_) {}

    , decltype(_impl_.burn_proposal_deposit_prevote_) {}

    , decltype(_impl_.burn_vote_veto_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quorum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quorum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quorum().empty()) {
    _this->_impl_.quorum_.Set(from._internal_quorum(), _this->GetArenaForAllocation());
  }
  _impl_.threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_threshold().empty()) {
    _this->_impl_.threshold_.Set(from._internal_threshold(), _this->GetArenaForAllocation());
  }
  _impl_.veto_threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.veto_threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_veto_threshold().empty()) {
    _this->_impl_.veto_threshold_.Set(from._internal_veto_threshold(), _this->GetArenaForAllocation());
  }
  _impl_.min_initial_deposit_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_initial_deposit_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_min_initial_deposit_ratio().empty()) {
    _this->_impl_.min_initial_deposit_ratio_.Set(from._internal_min_initial_deposit_ratio(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.max_deposit_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.max_deposit_period_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.voting_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.voting_period_);
  }
  ::memcpy(&_impl_.burn_vote_quorum_, &from._impl_.burn_vote_quorum_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.burn_vote_veto_) -
    reinterpret_cast<char*>(&_impl_.burn_vote_quorum_)) + sizeof(_impl_.burn_vote_veto_));
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_deposit_){arena}
    , decltype(_impl_.quorum_) {}

    , decltype(_impl_.threshold_) {}

    , decltype(_impl_.veto_threshold_) {}

    , decltype(_impl_.min_initial_deposit_ratio_) {}

    , decltype(_impl_.max_deposit_period_){nullptr}
    , decltype(_impl_.voting_period_){nullptr}
    , decltype(_impl_.burn_vote_quorum_) { false }

    , decltype(_impl_.burn_proposal_deposit_prevote_) { false }

    , decltype(_impl_.burn_vote_veto_) { false }

  };
  _impl_.quorum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quorum_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.veto_threshold_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.veto_threshold_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.min_initial_deposit_ratio_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.min_initial_deposit_ratio_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_min_deposit()->~RepeatedPtrField();
  _impl_.quorum_.Destroy();
  _impl_.threshold_.Destroy();
  _impl_.veto_threshold_.Destroy();
  _impl_.min_initial_deposit_ratio_.Destroy();
  if (this != internal_default_instance()) delete _impl_.max_deposit_period_;
  if (this != internal_default_instance()) delete _impl_.voting_period_;
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_min_deposit()->Clear();
  _impl_.quorum_.ClearToEmpty();
  _impl_.threshold_.ClearToEmpty();
  _impl_.veto_threshold_.ClearToEmpty();
  _impl_.min_initial_deposit_ratio_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.max_deposit_period_ != nullptr);
      _impl_.max_deposit_period_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.voting_period_ != nullptr);
      _impl_.voting_period_->Clear();
    }
  }
  ::memset(&_impl_.burn_vote_quorum_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.burn_vote_veto_) -
      reinterpret_cast<char*>(&_impl_.burn_vote_quorum_)) + sizeof(_impl_.burn_vote_veto_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_min_deposit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.stdduration) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_deposit_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration voting_period = 3 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_voting_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string quorum = 4 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_quorum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Params.quorum"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string threshold = 5 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_threshold();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Params.threshold"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string veto_threshold = 6 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_veto_threshold();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Params.veto_threshold"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string min_initial_deposit_ratio = 7 [json_name = "minInitialDepositRatio", (.cosmos_proto.scalar) = "cosmos.Dec"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_min_initial_deposit_ratio();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "cosmos.gov.v1.Params.min_initial_deposit_ratio"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool burn_vote_quorum = 13 [json_name = "burnVoteQuorum"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.burn_vote_quorum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool burn_proposal_deposit_prevote = 14 [json_name = "burnProposalDepositPrevote"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _impl_.burn_proposal_deposit_prevote_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool burn_vote_veto = 15 [json_name = "burnVoteVeto"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _impl_.burn_vote_veto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_min_deposit_size()); i < n; i++) {
    const auto& repfield = this->_internal_min_deposit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::max_deposit_period(this),
        _Internal::max_deposit_period(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration voting_period = 3 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::voting_period(this),
        _Internal::voting_period(this).GetCachedSize(), target, stream);
  }

  // string quorum = 4 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_quorum().empty()) {
    const std::string& _s = this->_internal_quorum();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Params.quorum");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string threshold = 5 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_threshold().empty()) {
    const std::string& _s = this->_internal_threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Params.threshold");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string veto_threshold = 6 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_veto_threshold().empty()) {
    const std::string& _s = this->_internal_veto_threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Params.veto_threshold");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string min_initial_deposit_ratio = 7 [json_name = "minInitialDepositRatio", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_min_initial_deposit_ratio().empty()) {
    const std::string& _s = this->_internal_min_initial_deposit_ratio();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "cosmos.gov.v1.Params.min_initial_deposit_ratio");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // bool burn_vote_quorum = 13 [json_name = "burnVoteQuorum"];
  if (this->_internal_burn_vote_quorum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_burn_vote_quorum(), target);
  }

  // bool burn_proposal_deposit_prevote = 14 [json_name = "burnProposalDepositPrevote"];
  if (this->_internal_burn_proposal_deposit_prevote() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_burn_proposal_deposit_prevote(), target);
  }

  // bool burn_vote_veto = 15 [json_name = "burnVoteVeto"];
  if (this->_internal_burn_vote_veto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_burn_vote_veto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  total_size += 1UL * this->_internal_min_deposit_size();
  for (const auto& msg : this->_internal_min_deposit()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string quorum = 4 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_quorum().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_quorum());
  }

  // string threshold = 5 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_threshold().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_threshold());
  }

  // string veto_threshold = 6 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_veto_threshold().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_veto_threshold());
  }

  // string min_initial_deposit_ratio = 7 [json_name = "minInitialDepositRatio", (.cosmos_proto.scalar) = "cosmos.Dec"];
  if (!this->_internal_min_initial_deposit_ratio().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_min_initial_deposit_ratio());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.stdduration) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.max_deposit_period_);
    }

    // .google.protobuf.Duration voting_period = 3 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voting_period_);
    }

  }
  // bool burn_vote_quorum = 13 [json_name = "burnVoteQuorum"];
  if (this->_internal_burn_vote_quorum() != 0) {
    total_size += 2;
  }

  // bool burn_proposal_deposit_prevote = 14 [json_name = "burnProposalDepositPrevote"];
  if (this->_internal_burn_proposal_deposit_prevote() != 0) {
    total_size += 2;
  }

  // bool burn_vote_veto = 15 [json_name = "burnVoteVeto"];
  if (this->_internal_burn_vote_veto() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_min_deposit()->MergeFrom(from._internal_min_deposit());
  if (!from._internal_quorum().empty()) {
    _this->_internal_set_quorum(from._internal_quorum());
  }
  if (!from._internal_threshold().empty()) {
    _this->_internal_set_threshold(from._internal_threshold());
  }
  if (!from._internal_veto_threshold().empty()) {
    _this->_internal_set_veto_threshold(from._internal_veto_threshold());
  }
  if (!from._internal_min_initial_deposit_ratio().empty()) {
    _this->_internal_set_min_initial_deposit_ratio(from._internal_min_initial_deposit_ratio());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_max_deposit_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_max_deposit_period());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_voting_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_voting_period());
    }
  }
  if (from._internal_burn_vote_quorum() != 0) {
    _this->_internal_set_burn_vote_quorum(from._internal_burn_vote_quorum());
  }
  if (from._internal_burn_proposal_deposit_prevote() != 0) {
    _this->_internal_set_burn_proposal_deposit_prevote(from._internal_burn_proposal_deposit_prevote());
  }
  if (from._internal_burn_vote_veto() != 0) {
    _this->_internal_set_burn_vote_veto(from._internal_burn_vote_veto());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_min_deposit()->InternalSwap(other->_internal_mutable_min_deposit());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quorum_, lhs_arena,
                                       &other->_impl_.quorum_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.threshold_, lhs_arena,
                                       &other->_impl_.threshold_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.veto_threshold_, lhs_arena,
                                       &other->_impl_.veto_threshold_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.min_initial_deposit_ratio_, lhs_arena,
                                       &other->_impl_.min_initial_deposit_ratio_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, _impl_.burn_vote_veto_)
      + sizeof(Params::_impl_.burn_vote_veto_)
      - PROTOBUF_FIELD_OFFSET(Params, _impl_.max_deposit_period_)>(
          reinterpret_cast<char*>(&_impl_.max_deposit_period_),
          reinterpret_cast<char*>(&other->_impl_.max_deposit_period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgov_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace gov
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::WeightedVoteOption*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::WeightedVoteOption >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::WeightedVoteOption >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::Deposit*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::Deposit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::Deposit >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::Proposal*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::TallyResult*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::TallyResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::TallyResult >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::Vote*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::DepositParams*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::DepositParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::DepositParams >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::VotingParams*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::VotingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::VotingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::TallyParams*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::TallyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::TallyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::Params*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

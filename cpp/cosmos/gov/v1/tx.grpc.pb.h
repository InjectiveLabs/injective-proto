// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmos/gov/v1/tx.proto
// Original file comments:
// Since: cosmos-sdk 0.46
#ifndef GRPC_cosmos_2fgov_2fv1_2ftx_2eproto__INCLUDED
#define GRPC_cosmos_2fgov_2fv1_2ftx_2eproto__INCLUDED

#include "cosmos/gov/v1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmos {
namespace gov {
namespace v1 {

// Msg defines the gov Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmos.gov.v1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // SubmitProposal defines a method to create new proposal given the messages.
    virtual ::grpc::Status SubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::cosmos::gov::v1::MsgSubmitProposalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgSubmitProposalResponse>> AsyncSubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgSubmitProposalResponse>>(AsyncSubmitProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgSubmitProposalResponse>> PrepareAsyncSubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgSubmitProposalResponse>>(PrepareAsyncSubmitProposalRaw(context, request, cq));
    }
    // ExecLegacyContent defines a Msg to be in included in a MsgSubmitProposal
    // to execute a legacy content-based proposal.
    virtual ::grpc::Status ExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::cosmos::gov::v1::MsgExecLegacyContentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgExecLegacyContentResponse>> AsyncExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgExecLegacyContentResponse>>(AsyncExecLegacyContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgExecLegacyContentResponse>> PrepareAsyncExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgExecLegacyContentResponse>>(PrepareAsyncExecLegacyContentRaw(context, request, cq));
    }
    // Vote defines a method to add a vote on a specific proposal.
    virtual ::grpc::Status Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::cosmos::gov::v1::MsgVoteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteResponse>> AsyncVote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteResponse>>(AsyncVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteResponse>> PrepareAsyncVote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteResponse>>(PrepareAsyncVoteRaw(context, request, cq));
    }
    // VoteWeighted defines a method to add a weighted vote on a specific proposal.
    virtual ::grpc::Status VoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::cosmos::gov::v1::MsgVoteWeightedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteWeightedResponse>> AsyncVoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteWeightedResponse>>(AsyncVoteWeightedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteWeightedResponse>> PrepareAsyncVoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteWeightedResponse>>(PrepareAsyncVoteWeightedRaw(context, request, cq));
    }
    // Deposit defines a method to add deposit on a specific proposal.
    virtual ::grpc::Status Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::cosmos::gov::v1::MsgDepositResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgDepositResponse>> AsyncDeposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgDepositResponse>>(AsyncDepositRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgDepositResponse>> PrepareAsyncDeposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgDepositResponse>>(PrepareAsyncDepositRaw(context, request, cq));
    }
    // UpdateParams defines a governance operation for updating the x/gov module
    // parameters. The authority is defined in the keeper.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::cosmos::gov::v1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // SubmitProposal defines a method to create new proposal given the messages.
      virtual void SubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal* request, ::cosmos::gov::v1::MsgSubmitProposalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal* request, ::cosmos::gov::v1::MsgSubmitProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ExecLegacyContent defines a Msg to be in included in a MsgSubmitProposal
      // to execute a legacy content-based proposal.
      virtual void ExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent* request, ::cosmos::gov::v1::MsgExecLegacyContentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent* request, ::cosmos::gov::v1::MsgExecLegacyContentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Vote defines a method to add a vote on a specific proposal.
      virtual void Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote* request, ::cosmos::gov::v1::MsgVoteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote* request, ::cosmos::gov::v1::MsgVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // VoteWeighted defines a method to add a weighted vote on a specific proposal.
      virtual void VoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted* request, ::cosmos::gov::v1::MsgVoteWeightedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted* request, ::cosmos::gov::v1::MsgVoteWeightedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deposit defines a method to add deposit on a specific proposal.
      virtual void Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit* request, ::cosmos::gov::v1::MsgDepositResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit* request, ::cosmos::gov::v1::MsgDepositResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateParams defines a governance operation for updating the x/gov module
      // parameters. The authority is defined in the keeper.
      //
      // Since: cosmos-sdk 0.47
      virtual void UpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams* request, ::cosmos::gov::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams* request, ::cosmos::gov::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgSubmitProposalResponse>* AsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgSubmitProposalResponse>* PrepareAsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgExecLegacyContentResponse>* AsyncExecLegacyContentRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgExecLegacyContentResponse>* PrepareAsyncExecLegacyContentRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteResponse>* AsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteResponse>* PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteWeightedResponse>* AsyncVoteWeightedRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgVoteWeightedResponse>* PrepareAsyncVoteWeightedRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgDepositResponse>* AsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgDepositResponse>* PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmos::gov::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::cosmos::gov::v1::MsgSubmitProposalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgSubmitProposalResponse>> AsyncSubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgSubmitProposalResponse>>(AsyncSubmitProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgSubmitProposalResponse>> PrepareAsyncSubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgSubmitProposalResponse>>(PrepareAsyncSubmitProposalRaw(context, request, cq));
    }
    ::grpc::Status ExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::cosmos::gov::v1::MsgExecLegacyContentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgExecLegacyContentResponse>> AsyncExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgExecLegacyContentResponse>>(AsyncExecLegacyContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgExecLegacyContentResponse>> PrepareAsyncExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgExecLegacyContentResponse>>(PrepareAsyncExecLegacyContentRaw(context, request, cq));
    }
    ::grpc::Status Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::cosmos::gov::v1::MsgVoteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteResponse>> AsyncVote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteResponse>>(AsyncVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteResponse>> PrepareAsyncVote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteResponse>>(PrepareAsyncVoteRaw(context, request, cq));
    }
    ::grpc::Status VoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::cosmos::gov::v1::MsgVoteWeightedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteWeightedResponse>> AsyncVoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteWeightedResponse>>(AsyncVoteWeightedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteWeightedResponse>> PrepareAsyncVoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteWeightedResponse>>(PrepareAsyncVoteWeightedRaw(context, request, cq));
    }
    ::grpc::Status Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::cosmos::gov::v1::MsgDepositResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgDepositResponse>> AsyncDeposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgDepositResponse>>(AsyncDepositRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgDepositResponse>> PrepareAsyncDeposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgDepositResponse>>(PrepareAsyncDepositRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::cosmos::gov::v1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal* request, ::cosmos::gov::v1::MsgSubmitProposalResponse* response, std::function<void(::grpc::Status)>) override;
      void SubmitProposal(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal* request, ::cosmos::gov::v1::MsgSubmitProposalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent* request, ::cosmos::gov::v1::MsgExecLegacyContentResponse* response, std::function<void(::grpc::Status)>) override;
      void ExecLegacyContent(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent* request, ::cosmos::gov::v1::MsgExecLegacyContentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote* request, ::cosmos::gov::v1::MsgVoteResponse* response, std::function<void(::grpc::Status)>) override;
      void Vote(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote* request, ::cosmos::gov::v1::MsgVoteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted* request, ::cosmos::gov::v1::MsgVoteWeightedResponse* response, std::function<void(::grpc::Status)>) override;
      void VoteWeighted(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted* request, ::cosmos::gov::v1::MsgVoteWeightedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit* request, ::cosmos::gov::v1::MsgDepositResponse* response, std::function<void(::grpc::Status)>) override;
      void Deposit(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit* request, ::cosmos::gov::v1::MsgDepositResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams* request, ::cosmos::gov::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams* request, ::cosmos::gov::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgSubmitProposalResponse>* AsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgSubmitProposalResponse>* PrepareAsyncSubmitProposalRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgSubmitProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgExecLegacyContentResponse>* AsyncExecLegacyContentRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgExecLegacyContentResponse>* PrepareAsyncExecLegacyContentRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteResponse>* AsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteResponse>* PrepareAsyncVoteRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVote& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteWeightedResponse>* AsyncVoteWeightedRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgVoteWeightedResponse>* PrepareAsyncVoteWeightedRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgVoteWeighted& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgDepositResponse>* AsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgDepositResponse>* PrepareAsyncDepositRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgDeposit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmos::gov::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::cosmos::gov::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitProposal_;
    const ::grpc::internal::RpcMethod rpcmethod_ExecLegacyContent_;
    const ::grpc::internal::RpcMethod rpcmethod_Vote_;
    const ::grpc::internal::RpcMethod rpcmethod_VoteWeighted_;
    const ::grpc::internal::RpcMethod rpcmethod_Deposit_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // SubmitProposal defines a method to create new proposal given the messages.
    virtual ::grpc::Status SubmitProposal(::grpc::ServerContext* context, const ::cosmos::gov::v1::MsgSubmitProposal* request, ::cosmos::gov::v1::MsgSubmitProposalResponse* response);
    // ExecLegacyContent defines a Msg to be in included in a MsgSubmitProposal
    // to execute a legacy content-based proposal.
    virtual ::grpc::Status ExecLegacyContent(::grpc::ServerContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent* request, ::cosmos::gov::v1::MsgExecLegacyContentResponse* response);
    // Vote defines a method to add a vote on a specific proposal.
    virtual ::grpc::Status Vote(::grpc::ServerContext* context, const ::cosmos::gov::v1::MsgVote* request, ::cosmos::gov::v1::MsgVoteResponse* response);
    // VoteWeighted defines a method to add a weighted vote on a specific proposal.
    virtual ::grpc::Status VoteWeighted(::grpc::ServerContext* context, const ::cosmos::gov::v1::MsgVoteWeighted* request, ::cosmos::gov::v1::MsgVoteWeightedResponse* response);
    // Deposit defines a method to add deposit on a specific proposal.
    virtual ::grpc::Status Deposit(::grpc::ServerContext* context, const ::cosmos::gov::v1::MsgDeposit* request, ::cosmos::gov::v1::MsgDepositResponse* response);
    // UpdateParams defines a governance operation for updating the x/gov module
    // parameters. The authority is defined in the keeper.
    //
    // Since: cosmos-sdk 0.47
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::cosmos::gov::v1::MsgUpdateParams* request, ::cosmos::gov::v1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgSubmitProposal* /*request*/, ::cosmos::gov::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitProposal(::grpc::ServerContext* context, ::cosmos::gov::v1::MsgSubmitProposal* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::MsgSubmitProposalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExecLegacyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ExecLegacyContent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExecLegacyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecLegacyContent(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgExecLegacyContent* /*request*/, ::cosmos::gov::v1::MsgExecLegacyContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecLegacyContent(::grpc::ServerContext* context, ::cosmos::gov::v1::MsgExecLegacyContent* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::MsgExecLegacyContentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Vote() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVote* /*request*/, ::cosmos::gov::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVote(::grpc::ServerContext* context, ::cosmos::gov::v1::MsgVote* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::MsgVoteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VoteWeighted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VoteWeighted() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_VoteWeighted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWeighted(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVoteWeighted* /*request*/, ::cosmos::gov::v1::MsgVoteWeightedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoteWeighted(::grpc::ServerContext* context, ::cosmos::gov::v1::MsgVoteWeighted* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::MsgVoteWeightedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Deposit() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgDeposit* /*request*/, ::cosmos::gov::v1::MsgDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeposit(::grpc::ServerContext* context, ::cosmos::gov::v1::MsgDeposit* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::MsgDepositResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgUpdateParams* /*request*/, ::cosmos::gov::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::cosmos::gov::v1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::cosmos::gov::v1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubmitProposal<WithAsyncMethod_ExecLegacyContent<WithAsyncMethod_Vote<WithAsyncMethod_VoteWeighted<WithAsyncMethod_Deposit<WithAsyncMethod_UpdateParams<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgSubmitProposal, ::cosmos::gov::v1::MsgSubmitProposalResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::MsgSubmitProposal* request, ::cosmos::gov::v1::MsgSubmitProposalResponse* response) { return this->SubmitProposal(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitProposal(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::MsgSubmitProposal, ::cosmos::gov::v1::MsgSubmitProposalResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgSubmitProposal, ::cosmos::gov::v1::MsgSubmitProposalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgSubmitProposal* /*request*/, ::cosmos::gov::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::MsgSubmitProposal* /*request*/, ::cosmos::gov::v1::MsgSubmitProposalResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ExecLegacyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ExecLegacyContent() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgExecLegacyContent, ::cosmos::gov::v1::MsgExecLegacyContentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::MsgExecLegacyContent* request, ::cosmos::gov::v1::MsgExecLegacyContentResponse* response) { return this->ExecLegacyContent(context, request, response); }));}
    void SetMessageAllocatorFor_ExecLegacyContent(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::MsgExecLegacyContent, ::cosmos::gov::v1::MsgExecLegacyContentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgExecLegacyContent, ::cosmos::gov::v1::MsgExecLegacyContentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ExecLegacyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecLegacyContent(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgExecLegacyContent* /*request*/, ::cosmos::gov::v1::MsgExecLegacyContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecLegacyContent(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::MsgExecLegacyContent* /*request*/, ::cosmos::gov::v1::MsgExecLegacyContentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Vote() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgVote, ::cosmos::gov::v1::MsgVoteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::MsgVote* request, ::cosmos::gov::v1::MsgVoteResponse* response) { return this->Vote(context, request, response); }));}
    void SetMessageAllocatorFor_Vote(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::MsgVote, ::cosmos::gov::v1::MsgVoteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgVote, ::cosmos::gov::v1::MsgVoteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVote* /*request*/, ::cosmos::gov::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Vote(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::MsgVote* /*request*/, ::cosmos::gov::v1::MsgVoteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VoteWeighted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VoteWeighted() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgVoteWeighted, ::cosmos::gov::v1::MsgVoteWeightedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::MsgVoteWeighted* request, ::cosmos::gov::v1::MsgVoteWeightedResponse* response) { return this->VoteWeighted(context, request, response); }));}
    void SetMessageAllocatorFor_VoteWeighted(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::MsgVoteWeighted, ::cosmos::gov::v1::MsgVoteWeightedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgVoteWeighted, ::cosmos::gov::v1::MsgVoteWeightedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VoteWeighted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWeighted(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVoteWeighted* /*request*/, ::cosmos::gov::v1::MsgVoteWeightedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VoteWeighted(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::MsgVoteWeighted* /*request*/, ::cosmos::gov::v1::MsgVoteWeightedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Deposit() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgDeposit, ::cosmos::gov::v1::MsgDepositResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::MsgDeposit* request, ::cosmos::gov::v1::MsgDepositResponse* response) { return this->Deposit(context, request, response); }));}
    void SetMessageAllocatorFor_Deposit(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::MsgDeposit, ::cosmos::gov::v1::MsgDepositResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgDeposit, ::cosmos::gov::v1::MsgDepositResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgDeposit* /*request*/, ::cosmos::gov::v1::MsgDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deposit(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::MsgDeposit* /*request*/, ::cosmos::gov::v1::MsgDepositResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgUpdateParams, ::cosmos::gov::v1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmos::gov::v1::MsgUpdateParams* request, ::cosmos::gov::v1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::cosmos::gov::v1::MsgUpdateParams, ::cosmos::gov::v1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmos::gov::v1::MsgUpdateParams, ::cosmos::gov::v1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgUpdateParams* /*request*/, ::cosmos::gov::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmos::gov::v1::MsgUpdateParams* /*request*/, ::cosmos::gov::v1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SubmitProposal<WithCallbackMethod_ExecLegacyContent<WithCallbackMethod_Vote<WithCallbackMethod_VoteWeighted<WithCallbackMethod_Deposit<WithCallbackMethod_UpdateParams<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgSubmitProposal* /*request*/, ::cosmos::gov::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExecLegacyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ExecLegacyContent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExecLegacyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecLegacyContent(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgExecLegacyContent* /*request*/, ::cosmos::gov::v1::MsgExecLegacyContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Vote() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVote* /*request*/, ::cosmos::gov::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VoteWeighted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VoteWeighted() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_VoteWeighted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWeighted(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVoteWeighted* /*request*/, ::cosmos::gov::v1::MsgVoteWeightedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Deposit() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgDeposit* /*request*/, ::cosmos::gov::v1::MsgDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgUpdateParams* /*request*/, ::cosmos::gov::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgSubmitProposal* /*request*/, ::cosmos::gov::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitProposal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExecLegacyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ExecLegacyContent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExecLegacyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecLegacyContent(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgExecLegacyContent* /*request*/, ::cosmos::gov::v1::MsgExecLegacyContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExecLegacyContent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Vote() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVote* /*request*/, ::cosmos::gov::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VoteWeighted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VoteWeighted() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_VoteWeighted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWeighted(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVoteWeighted* /*request*/, ::cosmos::gov::v1::MsgVoteWeightedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVoteWeighted(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Deposit() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgDeposit* /*request*/, ::cosmos::gov::v1::MsgDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeposit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgUpdateParams* /*request*/, ::cosmos::gov::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitProposal(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgSubmitProposal* /*request*/, ::cosmos::gov::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ExecLegacyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ExecLegacyContent() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ExecLegacyContent(context, request, response); }));
    }
    ~WithRawCallbackMethod_ExecLegacyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExecLegacyContent(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgExecLegacyContent* /*request*/, ::cosmos::gov::v1::MsgExecLegacyContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ExecLegacyContent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Vote() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Vote(context, request, response); }));
    }
    ~WithRawCallbackMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVote* /*request*/, ::cosmos::gov::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Vote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VoteWeighted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VoteWeighted() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VoteWeighted(context, request, response); }));
    }
    ~WithRawCallbackMethod_VoteWeighted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VoteWeighted(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVoteWeighted* /*request*/, ::cosmos::gov::v1::MsgVoteWeightedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VoteWeighted(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Deposit() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Deposit(context, request, response); }));
    }
    ~WithRawCallbackMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgDeposit* /*request*/, ::cosmos::gov::v1::MsgDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deposit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgUpdateParams* /*request*/, ::cosmos::gov::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitProposal() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::MsgSubmitProposal, ::cosmos::gov::v1::MsgSubmitProposalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::MsgSubmitProposal, ::cosmos::gov::v1::MsgSubmitProposalResponse>* streamer) {
                       return this->StreamedSubmitProposal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitProposal(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgSubmitProposal* /*request*/, ::cosmos::gov::v1::MsgSubmitProposalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitProposal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::MsgSubmitProposal,::cosmos::gov::v1::MsgSubmitProposalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExecLegacyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ExecLegacyContent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::MsgExecLegacyContent, ::cosmos::gov::v1::MsgExecLegacyContentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::MsgExecLegacyContent, ::cosmos::gov::v1::MsgExecLegacyContentResponse>* streamer) {
                       return this->StreamedExecLegacyContent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ExecLegacyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExecLegacyContent(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgExecLegacyContent* /*request*/, ::cosmos::gov::v1::MsgExecLegacyContentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExecLegacyContent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::MsgExecLegacyContent,::cosmos::gov::v1::MsgExecLegacyContentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Vote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Vote() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::MsgVote, ::cosmos::gov::v1::MsgVoteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::MsgVote, ::cosmos::gov::v1::MsgVoteResponse>* streamer) {
                       return this->StreamedVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Vote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Vote(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVote* /*request*/, ::cosmos::gov::v1::MsgVoteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::MsgVote,::cosmos::gov::v1::MsgVoteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VoteWeighted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VoteWeighted() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::MsgVoteWeighted, ::cosmos::gov::v1::MsgVoteWeightedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::MsgVoteWeighted, ::cosmos::gov::v1::MsgVoteWeightedResponse>* streamer) {
                       return this->StreamedVoteWeighted(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VoteWeighted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VoteWeighted(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgVoteWeighted* /*request*/, ::cosmos::gov::v1::MsgVoteWeightedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVoteWeighted(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::MsgVoteWeighted,::cosmos::gov::v1::MsgVoteWeightedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Deposit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Deposit() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::MsgDeposit, ::cosmos::gov::v1::MsgDepositResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::MsgDeposit, ::cosmos::gov::v1::MsgDepositResponse>* streamer) {
                       return this->StreamedDeposit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Deposit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Deposit(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgDeposit* /*request*/, ::cosmos::gov::v1::MsgDepositResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeposit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::MsgDeposit,::cosmos::gov::v1::MsgDepositResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmos::gov::v1::MsgUpdateParams, ::cosmos::gov::v1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmos::gov::v1::MsgUpdateParams, ::cosmos::gov::v1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::cosmos::gov::v1::MsgUpdateParams* /*request*/, ::cosmos::gov::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmos::gov::v1::MsgUpdateParams,::cosmos::gov::v1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitProposal<WithStreamedUnaryMethod_ExecLegacyContent<WithStreamedUnaryMethod_Vote<WithStreamedUnaryMethod_VoteWeighted<WithStreamedUnaryMethod_Deposit<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitProposal<WithStreamedUnaryMethod_ExecLegacyContent<WithStreamedUnaryMethod_Vote<WithStreamedUnaryMethod_VoteWeighted<WithStreamedUnaryMethod_Deposit<WithStreamedUnaryMethod_UpdateParams<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace gov
}  // namespace cosmos


#endif  // GRPC_cosmos_2fgov_2fv1_2ftx_2eproto__INCLUDED

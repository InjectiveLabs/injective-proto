// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/gov/v1/genesis.proto

#include "cosmos/gov/v1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace cosmos {
namespace gov {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deposits_)*/{}
  , /*decltype(_impl_.votes_)*/{}
  , /*decltype(_impl_.proposals_)*/{}
  , /*decltype(_impl_.deposit_params_)*/nullptr
  , /*decltype(_impl_.voting_params_)*/nullptr
  , /*decltype(_impl_.tally_params_)*/nullptr
  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.starting_proposal_id_)*/ ::uint64_t{0u}
} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
}  // namespace v1
}  // namespace gov
}  // namespace cosmos
static ::_pb::Metadata file_level_metadata_cosmos_2fgov_2fv1_2fgenesis_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_cosmos_2fgov_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_cosmos_2fgov_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_cosmos_2fgov_2fv1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_.starting_proposal_id_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_.deposits_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_.votes_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_.proposals_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_.deposit_params_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_.voting_params_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_.tally_params_),
    PROTOBUF_FIELD_OFFSET(::cosmos::gov::v1::GenesisState, _impl_.params_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    3,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::cosmos::gov::v1::GenesisState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::cosmos::gov::v1::_GenesisState_default_instance_._instance,
};
const char descriptor_table_protodef_cosmos_2fgov_2fv1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\033cosmos/gov/v1/genesis.proto\022\rcosmos.go"
    "v.v1\032\027cosmos/gov/v1/gov.proto\"\327\003\n\014Genesi"
    "sState\0220\n\024starting_proposal_id\030\001 \001(\004R\022st"
    "artingProposalId\0222\n\010deposits\030\002 \003(\0132\026.cos"
    "mos.gov.v1.DepositR\010deposits\022)\n\005votes\030\003 "
    "\003(\0132\023.cosmos.gov.v1.VoteR\005votes\0225\n\tpropo"
    "sals\030\004 \003(\0132\027.cosmos.gov.v1.ProposalR\tpro"
    "posals\022G\n\016deposit_params\030\005 \001(\0132\034.cosmos."
    "gov.v1.DepositParamsB\002\030\001R\rdepositParams\022"
    "D\n\rvoting_params\030\006 \001(\0132\033.cosmos.gov.v1.V"
    "otingParamsB\002\030\001R\014votingParams\022A\n\014tally_p"
    "arams\030\007 \001(\0132\032.cosmos.gov.v1.TallyParamsB"
    "\002\030\001R\013tallyParams\022-\n\006params\030\010 \001(\0132\025.cosmo"
    "s.gov.v1.ParamsR\006paramsB\244\001\n\021com.cosmos.g"
    "ov.v1B\014GenesisProtoP\001Z+github.com/cosmos"
    "/cosmos-sdk/x/gov/types/v1\242\002\003CGX\252\002\rCosmo"
    "s.Gov.V1\312\002\rCosmos\\Gov\\V1\342\002\031Cosmos\\Gov\\V1"
    "\\GPBMetadata\352\002\017Cosmos::Gov::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto_deps[1] =
    {
        &::descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto,
};
static ::absl::once_flag descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto = {
    false,
    false,
    718,
    descriptor_table_protodef_cosmos_2fgov_2fv1_2fgenesis_2eproto,
    "cosmos/gov/v1/genesis.proto",
    &descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto_once,
    descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_cosmos_2fgov_2fv1_2fgenesis_2eproto::offsets,
    file_level_metadata_cosmos_2fgov_2fv1_2fgenesis_2eproto,
    file_level_enum_descriptors_cosmos_2fgov_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_cosmos_2fgov_2fv1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto_getter() {
  return &descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cosmos_2fgov_2fv1_2fgenesis_2eproto(&descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto);
namespace cosmos {
namespace gov {
namespace v1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::cosmos::gov::v1::DepositParams& deposit_params(const GenesisState* msg);
  static void set_has_deposit_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cosmos::gov::v1::VotingParams& voting_params(const GenesisState* msg);
  static void set_has_voting_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cosmos::gov::v1::TallyParams& tally_params(const GenesisState* msg);
  static void set_has_tally_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::cosmos::gov::v1::Params& params(const GenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::cosmos::gov::v1::DepositParams&
GenesisState::_Internal::deposit_params(const GenesisState* msg) {
  return *msg->_impl_.deposit_params_;
}
const ::cosmos::gov::v1::VotingParams&
GenesisState::_Internal::voting_params(const GenesisState* msg) {
  return *msg->_impl_.voting_params_;
}
const ::cosmos::gov::v1::TallyParams&
GenesisState::_Internal::tally_params(const GenesisState* msg) {
  return *msg->_impl_.tally_params_;
}
const ::cosmos::gov::v1::Params&
GenesisState::_Internal::params(const GenesisState* msg) {
  return *msg->_impl_.params_;
}
void GenesisState::clear_deposits() {
  _internal_mutable_deposits()->Clear();
}
void GenesisState::clear_votes() {
  _internal_mutable_votes()->Clear();
}
void GenesisState::clear_proposals() {
  _internal_mutable_proposals()->Clear();
}
void GenesisState::clear_deposit_params() {
  if (_impl_.deposit_params_ != nullptr) _impl_.deposit_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GenesisState::clear_voting_params() {
  if (_impl_.voting_params_ != nullptr) _impl_.voting_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GenesisState::clear_tally_params() {
  if (_impl_.tally_params_ != nullptr) _impl_.tally_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:cosmos.gov.v1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposits_){from._impl_.deposits_}
    , decltype(_impl_.votes_){from._impl_.votes_}
    , decltype(_impl_.proposals_){from._impl_.proposals_}
    , decltype(_impl_.deposit_params_){nullptr}
    , decltype(_impl_.voting_params_){nullptr}
    , decltype(_impl_.tally_params_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.starting_proposal_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deposit_params_ = new ::cosmos::gov::v1::DepositParams(*from._impl_.deposit_params_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.voting_params_ = new ::cosmos::gov::v1::VotingParams(*from._impl_.voting_params_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.tally_params_ = new ::cosmos::gov::v1::TallyParams(*from._impl_.tally_params_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.params_ = new ::cosmos::gov::v1::Params(*from._impl_.params_);
  }
  _this->_impl_.starting_proposal_id_ = from._impl_.starting_proposal_id_;
  // @@protoc_insertion_point(copy_constructor:cosmos.gov.v1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deposits_){arena}
    , decltype(_impl_.votes_){arena}
    , decltype(_impl_.proposals_){arena}
    , decltype(_impl_.deposit_params_){nullptr}
    , decltype(_impl_.voting_params_){nullptr}
    , decltype(_impl_.tally_params_){nullptr}
    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.starting_proposal_id_) { ::uint64_t{0u} }

  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:cosmos.gov.v1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_deposits()->~RepeatedPtrField();
  _internal_mutable_votes()->~RepeatedPtrField();
  _internal_mutable_proposals()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.deposit_params_;
  if (this != internal_default_instance()) delete _impl_.voting_params_;
  if (this != internal_default_instance()) delete _impl_.tally_params_;
  if (this != internal_default_instance()) delete _impl_.params_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:cosmos.gov.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_deposits()->Clear();
  _internal_mutable_votes()->Clear();
  _internal_mutable_proposals()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.deposit_params_ != nullptr);
      _impl_.deposit_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.voting_params_ != nullptr);
      _impl_.voting_params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.tally_params_ != nullptr);
      _impl_.tally_params_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.params_ != nullptr);
      _impl_.params_->Clear();
    }
  }
  _impl_.starting_proposal_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 starting_proposal_id = 1 [json_name = "startingProposalId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.starting_proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.gov.v1.Deposit deposits = 2 [json_name = "deposits"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deposits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.gov.v1.Vote votes = 3 [json_name = "votes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.gov.v1.Proposal proposals = 4 [json_name = "proposals"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.gov.v1.DepositParams deposit_params = 5 [json_name = "depositParams", deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deposit_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.gov.v1.VotingParams voting_params = 6 [json_name = "votingParams", deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_voting_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.gov.v1.TallyParams tally_params = 7 [json_name = "tallyParams", deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tally_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.gov.v1.Params params = 8 [json_name = "params"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cosmos.gov.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 starting_proposal_id = 1 [json_name = "startingProposalId"];
  if (this->_internal_starting_proposal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_starting_proposal_id(), target);
  }

  // repeated .cosmos.gov.v1.Deposit deposits = 2 [json_name = "deposits"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deposits_size()); i < n; i++) {
    const auto& repfield = this->_internal_deposits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.gov.v1.Vote votes = 3 [json_name = "votes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_votes_size()); i < n; i++) {
    const auto& repfield = this->_internal_votes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.gov.v1.Proposal proposals = 4 [json_name = "proposals"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.gov.v1.DepositParams deposit_params = 5 [json_name = "depositParams", deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::deposit_params(this),
        _Internal::deposit_params(this).GetCachedSize(), target, stream);
  }

  // .cosmos.gov.v1.VotingParams voting_params = 6 [json_name = "votingParams", deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::voting_params(this),
        _Internal::voting_params(this).GetCachedSize(), target, stream);
  }

  // .cosmos.gov.v1.TallyParams tally_params = 7 [json_name = "tallyParams", deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tally_params(this),
        _Internal::tally_params(this).GetCachedSize(), target, stream);
  }

  // .cosmos.gov.v1.Params params = 8 [json_name = "params"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cosmos.gov.v1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cosmos.gov.v1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.gov.v1.Deposit deposits = 2 [json_name = "deposits"];
  total_size += 1UL * this->_internal_deposits_size();
  for (const auto& msg : this->_internal_deposits()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.gov.v1.Vote votes = 3 [json_name = "votes"];
  total_size += 1UL * this->_internal_votes_size();
  for (const auto& msg : this->_internal_votes()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.gov.v1.Proposal proposals = 4 [json_name = "proposals"];
  total_size += 1UL * this->_internal_proposals_size();
  for (const auto& msg : this->_internal_proposals()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .cosmos.gov.v1.DepositParams deposit_params = 5 [json_name = "depositParams", deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deposit_params_);
    }

    // .cosmos.gov.v1.VotingParams voting_params = 6 [json_name = "votingParams", deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.voting_params_);
    }

    // .cosmos.gov.v1.TallyParams tally_params = 7 [json_name = "tallyParams", deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tally_params_);
    }

    // .cosmos.gov.v1.Params params = 8 [json_name = "params"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.params_);
    }

  }
  // uint64 starting_proposal_id = 1 [json_name = "startingProposalId"];
  if (this->_internal_starting_proposal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_starting_proposal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:cosmos.gov.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_deposits()->MergeFrom(from._internal_deposits());
  _this->_internal_mutable_votes()->MergeFrom(from._internal_votes());
  _this->_internal_mutable_proposals()->MergeFrom(from._internal_proposals());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_deposit_params()->::cosmos::gov::v1::DepositParams::MergeFrom(
          from._internal_deposit_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_voting_params()->::cosmos::gov::v1::VotingParams::MergeFrom(
          from._internal_voting_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tally_params()->::cosmos::gov::v1::TallyParams::MergeFrom(
          from._internal_tally_params());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_params()->::cosmos::gov::v1::Params::MergeFrom(
          from._internal_params());
    }
  }
  if (from._internal_starting_proposal_id() != 0) {
    _this->_internal_set_starting_proposal_id(from._internal_starting_proposal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cosmos.gov.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_deposits()->InternalSwap(other->_internal_mutable_deposits());
  _internal_mutable_votes()->InternalSwap(other->_internal_mutable_votes());
  _internal_mutable_proposals()->InternalSwap(other->_internal_mutable_proposals());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.starting_proposal_id_)
      + sizeof(GenesisState::_impl_.starting_proposal_id_)
      - PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.deposit_params_)>(
          reinterpret_cast<char*>(&_impl_.deposit_params_),
          reinterpret_cast<char*>(&other->_impl_.deposit_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto_getter, &descriptor_table_cosmos_2fgov_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_cosmos_2fgov_2fv1_2fgenesis_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace gov
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cosmos::gov::v1::GenesisState*
Arena::CreateMaybeMessage< ::cosmos::gov::v1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cosmos::gov::v1::GenesisState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/gov/v1/gov.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgov_2fv1_2fgov_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgov_2fv1_2fgov_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "google/protobuf/any.pb.h"
#include "google/protobuf/duration.pb.h"
#include "cosmos_proto/cosmos.pb.h"
#include "amino/amino.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cosmos_2fgov_2fv1_2fgov_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_cosmos_2fgov_2fv1_2fgov_2eproto;
namespace cosmos {
namespace gov {
namespace v1 {
class Deposit;
struct DepositDefaultTypeInternal;
extern DepositDefaultTypeInternal _Deposit_default_instance_;
class DepositParams;
struct DepositParamsDefaultTypeInternal;
extern DepositParamsDefaultTypeInternal _DepositParams_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class Proposal;
struct ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class TallyParams;
struct TallyParamsDefaultTypeInternal;
extern TallyParamsDefaultTypeInternal _TallyParams_default_instance_;
class TallyResult;
struct TallyResultDefaultTypeInternal;
extern TallyResultDefaultTypeInternal _TallyResult_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class VotingParams;
struct VotingParamsDefaultTypeInternal;
extern VotingParamsDefaultTypeInternal _VotingParams_default_instance_;
class WeightedVoteOption;
struct WeightedVoteOptionDefaultTypeInternal;
extern WeightedVoteOptionDefaultTypeInternal _WeightedVoteOption_default_instance_;
}  // namespace v1
}  // namespace gov
}  // namespace cosmos
PROTOBUF_NAMESPACE_OPEN
template <>
::cosmos::gov::v1::Deposit* Arena::CreateMaybeMessage<::cosmos::gov::v1::Deposit>(Arena*);
template <>
::cosmos::gov::v1::DepositParams* Arena::CreateMaybeMessage<::cosmos::gov::v1::DepositParams>(Arena*);
template <>
::cosmos::gov::v1::Params* Arena::CreateMaybeMessage<::cosmos::gov::v1::Params>(Arena*);
template <>
::cosmos::gov::v1::Proposal* Arena::CreateMaybeMessage<::cosmos::gov::v1::Proposal>(Arena*);
template <>
::cosmos::gov::v1::TallyParams* Arena::CreateMaybeMessage<::cosmos::gov::v1::TallyParams>(Arena*);
template <>
::cosmos::gov::v1::TallyResult* Arena::CreateMaybeMessage<::cosmos::gov::v1::TallyResult>(Arena*);
template <>
::cosmos::gov::v1::Vote* Arena::CreateMaybeMessage<::cosmos::gov::v1::Vote>(Arena*);
template <>
::cosmos::gov::v1::VotingParams* Arena::CreateMaybeMessage<::cosmos::gov::v1::VotingParams>(Arena*);
template <>
::cosmos::gov::v1::WeightedVoteOption* Arena::CreateMaybeMessage<::cosmos::gov::v1::WeightedVoteOption>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace cosmos {
namespace gov {
namespace v1 {
enum VoteOption : int {
  VOTE_OPTION_UNSPECIFIED = 0,
  VOTE_OPTION_YES = 1,
  VOTE_OPTION_ABSTAIN = 2,
  VOTE_OPTION_NO = 3,
  VOTE_OPTION_NO_WITH_VETO = 4,
  VoteOption_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VoteOption_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VoteOption_IsValid(int value);
constexpr VoteOption VoteOption_MIN = static_cast<VoteOption>(0);
constexpr VoteOption VoteOption_MAX = static_cast<VoteOption>(4);
constexpr int VoteOption_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
VoteOption_descriptor();
template <typename T>
const std::string& VoteOption_Name(T value) {
  static_assert(std::is_same<T, VoteOption>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VoteOption_Name().");
  return VoteOption_Name(static_cast<VoteOption>(value));
}
template <>
inline const std::string& VoteOption_Name(VoteOption value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<VoteOption_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool VoteOption_Parse(absl::string_view name, VoteOption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoteOption>(
      VoteOption_descriptor(), name, value);
}
enum ProposalStatus : int {
  PROPOSAL_STATUS_UNSPECIFIED = 0,
  PROPOSAL_STATUS_DEPOSIT_PERIOD = 1,
  PROPOSAL_STATUS_VOTING_PERIOD = 2,
  PROPOSAL_STATUS_PASSED = 3,
  PROPOSAL_STATUS_REJECTED = 4,
  PROPOSAL_STATUS_FAILED = 5,
  ProposalStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProposalStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProposalStatus_IsValid(int value);
constexpr ProposalStatus ProposalStatus_MIN = static_cast<ProposalStatus>(0);
constexpr ProposalStatus ProposalStatus_MAX = static_cast<ProposalStatus>(5);
constexpr int ProposalStatus_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ProposalStatus_descriptor();
template <typename T>
const std::string& ProposalStatus_Name(T value) {
  static_assert(std::is_same<T, ProposalStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProposalStatus_Name().");
  return ProposalStatus_Name(static_cast<ProposalStatus>(value));
}
template <>
inline const std::string& ProposalStatus_Name(ProposalStatus value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ProposalStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ProposalStatus_Parse(absl::string_view name, ProposalStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProposalStatus>(
      ProposalStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class WeightedVoteOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.WeightedVoteOption) */ {
 public:
  inline WeightedVoteOption() : WeightedVoteOption(nullptr) {}
  ~WeightedVoteOption() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WeightedVoteOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WeightedVoteOption(const WeightedVoteOption& from);
  WeightedVoteOption(WeightedVoteOption&& from) noexcept
    : WeightedVoteOption() {
    *this = ::std::move(from);
  }

  inline WeightedVoteOption& operator=(const WeightedVoteOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline WeightedVoteOption& operator=(WeightedVoteOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WeightedVoteOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const WeightedVoteOption* internal_default_instance() {
    return reinterpret_cast<const WeightedVoteOption*>(
               &_WeightedVoteOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WeightedVoteOption& a, WeightedVoteOption& b) {
    a.Swap(&b);
  }
  inline void Swap(WeightedVoteOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WeightedVoteOption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WeightedVoteOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WeightedVoteOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WeightedVoteOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WeightedVoteOption& from) {
    WeightedVoteOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeightedVoteOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.WeightedVoteOption";
  }
  protected:
  explicit WeightedVoteOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 2,
    kOptionFieldNumber = 1,
  };
  // string weight = 2 [json_name = "weight", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_weight() ;
  const std::string& weight() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_weight(Arg_&& arg, Args_... args);
  std::string* mutable_weight();
  PROTOBUF_NODISCARD std::string* release_weight();
  void set_allocated_weight(std::string* ptr);

  private:
  const std::string& _internal_weight() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_weight(
      const std::string& value);
  std::string* _internal_mutable_weight();

  public:
  // .cosmos.gov.v1.VoteOption option = 1 [json_name = "option"];
  void clear_option() ;
  ::cosmos::gov::v1::VoteOption option() const;
  void set_option(::cosmos::gov::v1::VoteOption value);

  private:
  ::cosmos::gov::v1::VoteOption _internal_option() const;
  void _internal_set_option(::cosmos::gov::v1::VoteOption value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.WeightedVoteOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr weight_;
    int option_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};// -------------------------------------------------------------------

class Deposit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.Deposit) */ {
 public:
  inline Deposit() : Deposit(nullptr) {}
  ~Deposit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Deposit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Deposit(const Deposit& from);
  Deposit(Deposit&& from) noexcept
    : Deposit() {
    *this = ::std::move(from);
  }

  inline Deposit& operator=(const Deposit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Deposit& operator=(Deposit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Deposit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Deposit* internal_default_instance() {
    return reinterpret_cast<const Deposit*>(
               &_Deposit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Deposit& a, Deposit& b) {
    a.Swap(&b);
  }
  inline void Swap(Deposit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Deposit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Deposit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Deposit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Deposit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Deposit& from) {
    Deposit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Deposit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.Deposit";
  }
  protected:
  explicit Deposit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 3,
    kDepositorFieldNumber = 2,
    kProposalIdFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int amount_size() const;
  private:
  int _internal_amount_size() const;

  public:
  void clear_amount() ;
  ::cosmos::base::v1beta1::Coin* mutable_amount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_amount();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_amount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_amount();
  public:
  const ::cosmos::base::v1beta1::Coin& amount(int index) const;
  ::cosmos::base::v1beta1::Coin* add_amount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      amount() const;
  // string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_depositor() ;
  const std::string& depositor() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_depositor(Arg_&& arg, Args_... args);
  std::string* mutable_depositor();
  PROTOBUF_NODISCARD std::string* release_depositor();
  void set_allocated_depositor(std::string* ptr);

  private:
  const std::string& _internal_depositor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_depositor(
      const std::string& value);
  std::string* _internal_mutable_depositor();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.Deposit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr depositor_;
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};// -------------------------------------------------------------------

class Proposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  ~Proposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Proposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Proposal& from) {
    Proposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.Proposal";
  }
  protected:
  explicit Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kTotalDepositFieldNumber = 7,
    kMetadataFieldNumber = 10,
    kTitleFieldNumber = 11,
    kSummaryFieldNumber = 12,
    kProposerFieldNumber = 13,
    kFinalTallyResultFieldNumber = 4,
    kSubmitTimeFieldNumber = 5,
    kDepositEndTimeFieldNumber = 6,
    kVotingStartTimeFieldNumber = 8,
    kVotingEndTimeFieldNumber = 9,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // repeated .google.protobuf.Any messages = 2 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_messages();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_messages(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_messages();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& messages(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      messages() const;
  // repeated .cosmos.base.v1beta1.Coin total_deposit = 7 [json_name = "totalDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int total_deposit_size() const;
  private:
  int _internal_total_deposit_size() const;

  public:
  void clear_total_deposit() ;
  ::cosmos::base::v1beta1::Coin* mutable_total_deposit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_total_deposit();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_total_deposit(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_total_deposit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_total_deposit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_total_deposit();
  public:
  const ::cosmos::base::v1beta1::Coin& total_deposit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_total_deposit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      total_deposit() const;
  // string metadata = 10 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // string title = 11 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string summary = 12 [json_name = "summary"];
  void clear_summary() ;
  const std::string& summary() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_summary(Arg_&& arg, Args_... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* ptr);

  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(
      const std::string& value);
  std::string* _internal_mutable_summary();

  public:
  // string proposer = 13 [json_name = "proposer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_proposer() ;
  const std::string& proposer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposer(Arg_&& arg, Args_... args);
  std::string* mutable_proposer();
  PROTOBUF_NODISCARD std::string* release_proposer();
  void set_allocated_proposer(std::string* ptr);

  private:
  const std::string& _internal_proposer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer(
      const std::string& value);
  std::string* _internal_mutable_proposer();

  public:
  // .cosmos.gov.v1.TallyResult final_tally_result = 4 [json_name = "finalTallyResult"];
  bool has_final_tally_result() const;
  void clear_final_tally_result() ;
  const ::cosmos::gov::v1::TallyResult& final_tally_result() const;
  PROTOBUF_NODISCARD ::cosmos::gov::v1::TallyResult* release_final_tally_result();
  ::cosmos::gov::v1::TallyResult* mutable_final_tally_result();
  void set_allocated_final_tally_result(::cosmos::gov::v1::TallyResult* final_tally_result);
  private:
  const ::cosmos::gov::v1::TallyResult& _internal_final_tally_result() const;
  ::cosmos::gov::v1::TallyResult* _internal_mutable_final_tally_result();
  public:
  void unsafe_arena_set_allocated_final_tally_result(
      ::cosmos::gov::v1::TallyResult* final_tally_result);
  ::cosmos::gov::v1::TallyResult* unsafe_arena_release_final_tally_result();
  // .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.stdtime) = true];
  bool has_submit_time() const;
  void clear_submit_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& submit_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_submit_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_submit_time();
  void set_allocated_submit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_submit_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_submit_time();
  public:
  void unsafe_arena_set_allocated_submit_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_submit_time();
  // .google.protobuf.Timestamp deposit_end_time = 6 [json_name = "depositEndTime", (.gogoproto.stdtime) = true];
  bool has_deposit_end_time() const;
  void clear_deposit_end_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& deposit_end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_deposit_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deposit_end_time();
  void set_allocated_deposit_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* deposit_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deposit_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deposit_end_time();
  public:
  void unsafe_arena_set_allocated_deposit_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* deposit_end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deposit_end_time();
  // .google.protobuf.Timestamp voting_start_time = 8 [json_name = "votingStartTime", (.gogoproto.stdtime) = true];
  bool has_voting_start_time() const;
  void clear_voting_start_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& voting_start_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_voting_start_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_voting_start_time();
  void set_allocated_voting_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* voting_start_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_voting_start_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_voting_start_time();
  public:
  void unsafe_arena_set_allocated_voting_start_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* voting_start_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_voting_start_time();
  // .google.protobuf.Timestamp voting_end_time = 9 [json_name = "votingEndTime", (.gogoproto.stdtime) = true];
  bool has_voting_end_time() const;
  void clear_voting_end_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& voting_end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_voting_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_voting_end_time();
  void set_allocated_voting_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* voting_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_voting_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_voting_end_time();
  public:
  void unsafe_arena_set_allocated_voting_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* voting_end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_voting_end_time();
  // uint64 id = 1 [json_name = "id"];
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // .cosmos.gov.v1.ProposalStatus status = 3 [json_name = "status"];
  void clear_status() ;
  ::cosmos::gov::v1::ProposalStatus status() const;
  void set_status(::cosmos::gov::v1::ProposalStatus value);

  private:
  ::cosmos::gov::v1::ProposalStatus _internal_status() const;
  void _internal_set_status(::cosmos::gov::v1::ProposalStatus value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.Proposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > total_deposit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_;
    ::cosmos::gov::v1::TallyResult* final_tally_result_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deposit_end_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* voting_start_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* voting_end_time_;
    ::uint64_t id_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};// -------------------------------------------------------------------

class TallyResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.TallyResult) */ {
 public:
  inline TallyResult() : TallyResult(nullptr) {}
  ~TallyResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TallyResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TallyResult(const TallyResult& from);
  TallyResult(TallyResult&& from) noexcept
    : TallyResult() {
    *this = ::std::move(from);
  }

  inline TallyResult& operator=(const TallyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TallyResult& operator=(TallyResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TallyResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const TallyResult* internal_default_instance() {
    return reinterpret_cast<const TallyResult*>(
               &_TallyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TallyResult& a, TallyResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TallyResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TallyResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TallyResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TallyResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TallyResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TallyResult& from) {
    TallyResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TallyResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.TallyResult";
  }
  protected:
  explicit TallyResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYesCountFieldNumber = 1,
    kAbstainCountFieldNumber = 2,
    kNoCountFieldNumber = 3,
    kNoWithVetoCountFieldNumber = 4,
  };
  // string yes_count = 1 [json_name = "yesCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_yes_count() ;
  const std::string& yes_count() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_yes_count(Arg_&& arg, Args_... args);
  std::string* mutable_yes_count();
  PROTOBUF_NODISCARD std::string* release_yes_count();
  void set_allocated_yes_count(std::string* ptr);

  private:
  const std::string& _internal_yes_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_yes_count(
      const std::string& value);
  std::string* _internal_mutable_yes_count();

  public:
  // string abstain_count = 2 [json_name = "abstainCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_abstain_count() ;
  const std::string& abstain_count() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_abstain_count(Arg_&& arg, Args_... args);
  std::string* mutable_abstain_count();
  PROTOBUF_NODISCARD std::string* release_abstain_count();
  void set_allocated_abstain_count(std::string* ptr);

  private:
  const std::string& _internal_abstain_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_abstain_count(
      const std::string& value);
  std::string* _internal_mutable_abstain_count();

  public:
  // string no_count = 3 [json_name = "noCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_no_count() ;
  const std::string& no_count() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_no_count(Arg_&& arg, Args_... args);
  std::string* mutable_no_count();
  PROTOBUF_NODISCARD std::string* release_no_count();
  void set_allocated_no_count(std::string* ptr);

  private:
  const std::string& _internal_no_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_no_count(
      const std::string& value);
  std::string* _internal_mutable_no_count();

  public:
  // string no_with_veto_count = 4 [json_name = "noWithVetoCount", (.cosmos_proto.scalar) = "cosmos.Int"];
  void clear_no_with_veto_count() ;
  const std::string& no_with_veto_count() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_no_with_veto_count(Arg_&& arg, Args_... args);
  std::string* mutable_no_with_veto_count();
  PROTOBUF_NODISCARD std::string* release_no_with_veto_count();
  void set_allocated_no_with_veto_count(std::string* ptr);

  private:
  const std::string& _internal_no_with_veto_count() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_no_with_veto_count(
      const std::string& value);
  std::string* _internal_mutable_no_with_veto_count();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.TallyResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr yes_count_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr abstain_count_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr no_count_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr no_with_veto_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};// -------------------------------------------------------------------

class Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vote& from) {
    Vote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.Vote";
  }
  protected:
  explicit Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 4,
    kVoterFieldNumber = 2,
    kMetadataFieldNumber = 5,
    kProposalIdFieldNumber = 1,
  };
  // repeated .cosmos.gov.v1.WeightedVoteOption options = 4 [json_name = "options"];
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::cosmos::gov::v1::WeightedVoteOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1::WeightedVoteOption >*
      mutable_options();
  private:
  const ::cosmos::gov::v1::WeightedVoteOption& _internal_options(int index) const;
  ::cosmos::gov::v1::WeightedVoteOption* _internal_add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1::WeightedVoteOption>& _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1::WeightedVoteOption>* _internal_mutable_options();
  public:
  const ::cosmos::gov::v1::WeightedVoteOption& options(int index) const;
  ::cosmos::gov::v1::WeightedVoteOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1::WeightedVoteOption >&
      options() const;
  // string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_voter() ;
  const std::string& voter() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_voter(Arg_&& arg, Args_... args);
  std::string* mutable_voter();
  PROTOBUF_NODISCARD std::string* release_voter();
  void set_allocated_voter(std::string* ptr);

  private:
  const std::string& _internal_voter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_voter(
      const std::string& value);
  std::string* _internal_mutable_voter();

  public:
  // string metadata = 5 [json_name = "metadata"];
  void clear_metadata() ;
  const std::string& metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_metadata();
  PROTOBUF_NODISCARD std::string* release_metadata();
  void set_allocated_metadata(std::string* ptr);

  private:
  const std::string& _internal_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_metadata(
      const std::string& value);
  std::string* _internal_mutable_metadata();

  public:
  // uint64 proposal_id = 1 [json_name = "proposalId"];
  void clear_proposal_id() ;
  ::uint64_t proposal_id() const;
  void set_proposal_id(::uint64_t value);

  private:
  ::uint64_t _internal_proposal_id() const;
  void _internal_set_proposal_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1::WeightedVoteOption > options_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
    ::uint64_t proposal_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};// -------------------------------------------------------------------

class DepositParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.DepositParams) */ {
 public:
  inline DepositParams() : DepositParams(nullptr) {}
  ~DepositParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DepositParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DepositParams(const DepositParams& from);
  DepositParams(DepositParams&& from) noexcept
    : DepositParams() {
    *this = ::std::move(from);
  }

  inline DepositParams& operator=(const DepositParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DepositParams& operator=(DepositParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DepositParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DepositParams* internal_default_instance() {
    return reinterpret_cast<const DepositParams*>(
               &_DepositParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DepositParams& a, DepositParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DepositParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DepositParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DepositParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DepositParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DepositParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DepositParams& from) {
    DepositParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DepositParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.DepositParams";
  }
  protected:
  explicit DepositParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinDepositFieldNumber = 1,
    kMaxDepositPeriodFieldNumber = 2,
  };
  // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "min_deposit,omitempty"];
  int min_deposit_size() const;
  private:
  int _internal_min_deposit_size() const;

  public:
  void clear_min_deposit() ;
  ::cosmos::base::v1beta1::Coin* mutable_min_deposit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_min_deposit();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_min_deposit(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_min_deposit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_min_deposit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_min_deposit();
  public:
  const ::cosmos::base::v1beta1::Coin& min_deposit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_min_deposit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      min_deposit() const;
  // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.jsontag) = "max_deposit_period,omitempty", (.gogoproto.stdduration) = true];
  bool has_max_deposit_period() const;
  void clear_max_deposit_period() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_deposit_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_deposit_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_deposit_period();
  void set_allocated_max_deposit_period(::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_deposit_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_deposit_period();
  public:
  void unsafe_arena_set_allocated_max_deposit_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_deposit_period();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.DepositParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > min_deposit_;
    ::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};// -------------------------------------------------------------------

class VotingParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.VotingParams) */ {
 public:
  inline VotingParams() : VotingParams(nullptr) {}
  ~VotingParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VotingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VotingParams(const VotingParams& from);
  VotingParams(VotingParams&& from) noexcept
    : VotingParams() {
    *this = ::std::move(from);
  }

  inline VotingParams& operator=(const VotingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotingParams& operator=(VotingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VotingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VotingParams* internal_default_instance() {
    return reinterpret_cast<const VotingParams*>(
               &_VotingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VotingParams& a, VotingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VotingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VotingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VotingParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VotingParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VotingParams& from) {
    VotingParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VotingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.VotingParams";
  }
  protected:
  explicit VotingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVotingPeriodFieldNumber = 1,
  };
  // .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
  bool has_voting_period() const;
  void clear_voting_period() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& voting_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_voting_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_voting_period();
  void set_allocated_voting_period(::PROTOBUF_NAMESPACE_ID::Duration* voting_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_voting_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_voting_period();
  public:
  void unsafe_arena_set_allocated_voting_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* voting_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_voting_period();
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.VotingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Duration* voting_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};// -------------------------------------------------------------------

class TallyParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.TallyParams) */ {
 public:
  inline TallyParams() : TallyParams(nullptr) {}
  ~TallyParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TallyParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TallyParams(const TallyParams& from);
  TallyParams(TallyParams&& from) noexcept
    : TallyParams() {
    *this = ::std::move(from);
  }

  inline TallyParams& operator=(const TallyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TallyParams& operator=(TallyParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TallyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TallyParams* internal_default_instance() {
    return reinterpret_cast<const TallyParams*>(
               &_TallyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TallyParams& a, TallyParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TallyParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TallyParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TallyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TallyParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TallyParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TallyParams& from) {
    TallyParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TallyParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.TallyParams";
  }
  protected:
  explicit TallyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuorumFieldNumber = 1,
    kThresholdFieldNumber = 2,
    kVetoThresholdFieldNumber = 3,
  };
  // string quorum = 1 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_quorum() ;
  const std::string& quorum() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quorum(Arg_&& arg, Args_... args);
  std::string* mutable_quorum();
  PROTOBUF_NODISCARD std::string* release_quorum();
  void set_allocated_quorum(std::string* ptr);

  private:
  const std::string& _internal_quorum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quorum(
      const std::string& value);
  std::string* _internal_mutable_quorum();

  public:
  // string threshold = 2 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_threshold() ;
  const std::string& threshold() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_threshold(Arg_&& arg, Args_... args);
  std::string* mutable_threshold();
  PROTOBUF_NODISCARD std::string* release_threshold();
  void set_allocated_threshold(std::string* ptr);

  private:
  const std::string& _internal_threshold() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threshold(
      const std::string& value);
  std::string* _internal_mutable_threshold();

  public:
  // string veto_threshold = 3 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_veto_threshold() ;
  const std::string& veto_threshold() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_veto_threshold(Arg_&& arg, Args_... args);
  std::string* mutable_veto_threshold();
  PROTOBUF_NODISCARD std::string* release_veto_threshold();
  void set_allocated_veto_threshold(std::string* ptr);

  private:
  const std::string& _internal_veto_threshold() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_veto_threshold(
      const std::string& value);
  std::string* _internal_mutable_veto_threshold();

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.TallyParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quorum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threshold_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr veto_threshold_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cosmos.gov.v1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "cosmos.gov.v1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinDepositFieldNumber = 1,
    kQuorumFieldNumber = 4,
    kThresholdFieldNumber = 5,
    kVetoThresholdFieldNumber = 6,
    kMinInitialDepositRatioFieldNumber = 7,
    kMaxDepositPeriodFieldNumber = 2,
    kVotingPeriodFieldNumber = 3,
    kBurnVoteQuorumFieldNumber = 13,
    kBurnProposalDepositPrevoteFieldNumber = 14,
    kBurnVoteVetoFieldNumber = 15,
  };
  // repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
  int min_deposit_size() const;
  private:
  int _internal_min_deposit_size() const;

  public:
  void clear_min_deposit() ;
  ::cosmos::base::v1beta1::Coin* mutable_min_deposit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_min_deposit();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_min_deposit(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_min_deposit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_min_deposit() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_min_deposit();
  public:
  const ::cosmos::base::v1beta1::Coin& min_deposit(int index) const;
  ::cosmos::base::v1beta1::Coin* add_min_deposit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      min_deposit() const;
  // string quorum = 4 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_quorum() ;
  const std::string& quorum() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quorum(Arg_&& arg, Args_... args);
  std::string* mutable_quorum();
  PROTOBUF_NODISCARD std::string* release_quorum();
  void set_allocated_quorum(std::string* ptr);

  private:
  const std::string& _internal_quorum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quorum(
      const std::string& value);
  std::string* _internal_mutable_quorum();

  public:
  // string threshold = 5 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_threshold() ;
  const std::string& threshold() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_threshold(Arg_&& arg, Args_... args);
  std::string* mutable_threshold();
  PROTOBUF_NODISCARD std::string* release_threshold();
  void set_allocated_threshold(std::string* ptr);

  private:
  const std::string& _internal_threshold() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_threshold(
      const std::string& value);
  std::string* _internal_mutable_threshold();

  public:
  // string veto_threshold = 6 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_veto_threshold() ;
  const std::string& veto_threshold() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_veto_threshold(Arg_&& arg, Args_... args);
  std::string* mutable_veto_threshold();
  PROTOBUF_NODISCARD std::string* release_veto_threshold();
  void set_allocated_veto_threshold(std::string* ptr);

  private:
  const std::string& _internal_veto_threshold() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_veto_threshold(
      const std::string& value);
  std::string* _internal_mutable_veto_threshold();

  public:
  // string min_initial_deposit_ratio = 7 [json_name = "minInitialDepositRatio", (.cosmos_proto.scalar) = "cosmos.Dec"];
  void clear_min_initial_deposit_ratio() ;
  const std::string& min_initial_deposit_ratio() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_min_initial_deposit_ratio(Arg_&& arg, Args_... args);
  std::string* mutable_min_initial_deposit_ratio();
  PROTOBUF_NODISCARD std::string* release_min_initial_deposit_ratio();
  void set_allocated_min_initial_deposit_ratio(std::string* ptr);

  private:
  const std::string& _internal_min_initial_deposit_ratio() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min_initial_deposit_ratio(
      const std::string& value);
  std::string* _internal_mutable_min_initial_deposit_ratio();

  public:
  // .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.stdduration) = true];
  bool has_max_deposit_period() const;
  void clear_max_deposit_period() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_deposit_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_deposit_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_deposit_period();
  void set_allocated_max_deposit_period(::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_deposit_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_deposit_period();
  public:
  void unsafe_arena_set_allocated_max_deposit_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_deposit_period();
  // .google.protobuf.Duration voting_period = 3 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
  bool has_voting_period() const;
  void clear_voting_period() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& voting_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_voting_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_voting_period();
  void set_allocated_voting_period(::PROTOBUF_NAMESPACE_ID::Duration* voting_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_voting_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_voting_period();
  public:
  void unsafe_arena_set_allocated_voting_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* voting_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_voting_period();
  // bool burn_vote_quorum = 13 [json_name = "burnVoteQuorum"];
  void clear_burn_vote_quorum() ;
  bool burn_vote_quorum() const;
  void set_burn_vote_quorum(bool value);

  private:
  bool _internal_burn_vote_quorum() const;
  void _internal_set_burn_vote_quorum(bool value);

  public:
  // bool burn_proposal_deposit_prevote = 14 [json_name = "burnProposalDepositPrevote"];
  void clear_burn_proposal_deposit_prevote() ;
  bool burn_proposal_deposit_prevote() const;
  void set_burn_proposal_deposit_prevote(bool value);

  private:
  bool _internal_burn_proposal_deposit_prevote() const;
  void _internal_set_burn_proposal_deposit_prevote(bool value);

  public:
  // bool burn_vote_veto = 15 [json_name = "burnVoteVeto"];
  void clear_burn_vote_veto() ;
  bool burn_vote_veto() const;
  void set_burn_vote_veto(bool value);

  private:
  bool _internal_burn_vote_veto() const;
  void _internal_set_burn_vote_veto(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cosmos.gov.v1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > min_deposit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quorum_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr threshold_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr veto_threshold_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_initial_deposit_ratio_;
    ::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period_;
    ::PROTOBUF_NAMESPACE_ID::Duration* voting_period_;
    bool burn_vote_quorum_;
    bool burn_proposal_deposit_prevote_;
    bool burn_vote_veto_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cosmos_2fgov_2fv1_2fgov_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// WeightedVoteOption

// .cosmos.gov.v1.VoteOption option = 1 [json_name = "option"];
inline void WeightedVoteOption::clear_option() {
  _impl_.option_ = 0;
}
inline ::cosmos::gov::v1::VoteOption WeightedVoteOption::option() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.WeightedVoteOption.option)
  return _internal_option();
}
inline void WeightedVoteOption::set_option(::cosmos::gov::v1::VoteOption value) {
   _internal_set_option(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.WeightedVoteOption.option)
}
inline ::cosmos::gov::v1::VoteOption WeightedVoteOption::_internal_option() const {
  return static_cast<::cosmos::gov::v1::VoteOption>(_impl_.option_);
}
inline void WeightedVoteOption::_internal_set_option(::cosmos::gov::v1::VoteOption value) {
  ;
  _impl_.option_ = value;
}

// string weight = 2 [json_name = "weight", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void WeightedVoteOption::clear_weight() {
  _impl_.weight_.ClearToEmpty();
}
inline const std::string& WeightedVoteOption::weight() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.WeightedVoteOption.weight)
  return _internal_weight();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WeightedVoteOption::set_weight(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.weight_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.WeightedVoteOption.weight)
}
inline std::string* WeightedVoteOption::mutable_weight() {
  std::string* _s = _internal_mutable_weight();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.WeightedVoteOption.weight)
  return _s;
}
inline const std::string& WeightedVoteOption::_internal_weight() const {
  return _impl_.weight_.Get();
}
inline void WeightedVoteOption::_internal_set_weight(const std::string& value) {
  ;


  _impl_.weight_.Set(value, GetArenaForAllocation());
}
inline std::string* WeightedVoteOption::_internal_mutable_weight() {
  ;
  return _impl_.weight_.Mutable( GetArenaForAllocation());
}
inline std::string* WeightedVoteOption::release_weight() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.WeightedVoteOption.weight)
  return _impl_.weight_.Release();
}
inline void WeightedVoteOption::set_allocated_weight(std::string* value) {
  _impl_.weight_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.weight_.IsDefault()) {
          _impl_.weight_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.WeightedVoteOption.weight)
}

// -------------------------------------------------------------------

// Deposit

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void Deposit::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t Deposit::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Deposit.proposal_id)
  return _internal_proposal_id();
}
inline void Deposit::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Deposit.proposal_id)
}
inline ::uint64_t Deposit::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void Deposit::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// string depositor = 2 [json_name = "depositor", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Deposit::clear_depositor() {
  _impl_.depositor_.ClearToEmpty();
}
inline const std::string& Deposit::depositor() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Deposit.depositor)
  return _internal_depositor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Deposit::set_depositor(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.depositor_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Deposit.depositor)
}
inline std::string* Deposit::mutable_depositor() {
  std::string* _s = _internal_mutable_depositor();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Deposit.depositor)
  return _s;
}
inline const std::string& Deposit::_internal_depositor() const {
  return _impl_.depositor_.Get();
}
inline void Deposit::_internal_set_depositor(const std::string& value) {
  ;


  _impl_.depositor_.Set(value, GetArenaForAllocation());
}
inline std::string* Deposit::_internal_mutable_depositor() {
  ;
  return _impl_.depositor_.Mutable( GetArenaForAllocation());
}
inline std::string* Deposit::release_depositor() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Deposit.depositor)
  return _impl_.depositor_.Release();
}
inline void Deposit::set_allocated_depositor(std::string* value) {
  _impl_.depositor_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.depositor_.IsDefault()) {
          _impl_.depositor_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Deposit.depositor)
}

// repeated .cosmos.base.v1beta1.Coin amount = 3 [json_name = "amount", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int Deposit::_internal_amount_size() const {
  return _impl_.amount_.size();
}
inline int Deposit::amount_size() const {
  return _internal_amount_size();
}
inline ::cosmos::base::v1beta1::Coin* Deposit::mutable_amount(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Deposit.amount)
  return _internal_mutable_amount()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Deposit::mutable_amount() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1.Deposit.amount)
  return _internal_mutable_amount();
}
inline const ::cosmos::base::v1beta1::Coin& Deposit::_internal_amount(int index) const {
  return _internal_amount().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Deposit::amount(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Deposit.amount)
  return _internal_amount(index);
}
inline ::cosmos::base::v1beta1::Coin* Deposit::_internal_add_amount() {
  return _internal_mutable_amount()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Deposit::add_amount() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_amount();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1.Deposit.amount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Deposit::amount() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1.Deposit.amount)
  return _internal_amount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Deposit::_internal_amount() const {
  return _impl_.amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Deposit::_internal_mutable_amount() {
  return &_impl_.amount_;
}

// -------------------------------------------------------------------

// Proposal

// uint64 id = 1 [json_name = "id"];
inline void Proposal::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t Proposal::id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.id)
  return _internal_id();
}
inline void Proposal::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Proposal.id)
}
inline ::uint64_t Proposal::_internal_id() const {
  return _impl_.id_;
}
inline void Proposal::_internal_set_id(::uint64_t value) {
  ;
  _impl_.id_ = value;
}

// repeated .google.protobuf.Any messages = 2 [json_name = "messages"];
inline int Proposal::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int Proposal::messages_size() const {
  return _internal_messages_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Proposal::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
Proposal::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1.Proposal.messages)
  return _internal_mutable_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Proposal::_internal_messages(int index) const {
  return _internal_messages().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Proposal::messages(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.messages)
  return _internal_messages(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Proposal::_internal_add_messages() {
  return _internal_mutable_messages()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Proposal::add_messages() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1.Proposal.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
Proposal::messages() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1.Proposal.messages)
  return _internal_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
Proposal::_internal_messages() const {
  return _impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
Proposal::_internal_mutable_messages() {
  return &_impl_.messages_;
}

// .cosmos.gov.v1.ProposalStatus status = 3 [json_name = "status"];
inline void Proposal::clear_status() {
  _impl_.status_ = 0;
}
inline ::cosmos::gov::v1::ProposalStatus Proposal::status() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.status)
  return _internal_status();
}
inline void Proposal::set_status(::cosmos::gov::v1::ProposalStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Proposal.status)
}
inline ::cosmos::gov::v1::ProposalStatus Proposal::_internal_status() const {
  return static_cast<::cosmos::gov::v1::ProposalStatus>(_impl_.status_);
}
inline void Proposal::_internal_set_status(::cosmos::gov::v1::ProposalStatus value) {
  ;
  _impl_.status_ = value;
}

// .cosmos.gov.v1.TallyResult final_tally_result = 4 [json_name = "finalTallyResult"];
inline bool Proposal::has_final_tally_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.final_tally_result_ != nullptr);
  return value;
}
inline void Proposal::clear_final_tally_result() {
  if (_impl_.final_tally_result_ != nullptr) _impl_.final_tally_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::cosmos::gov::v1::TallyResult& Proposal::_internal_final_tally_result() const {
  const ::cosmos::gov::v1::TallyResult* p = _impl_.final_tally_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::gov::v1::TallyResult&>(
      ::cosmos::gov::v1::_TallyResult_default_instance_);
}
inline const ::cosmos::gov::v1::TallyResult& Proposal::final_tally_result() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.final_tally_result)
  return _internal_final_tally_result();
}
inline void Proposal::unsafe_arena_set_allocated_final_tally_result(
    ::cosmos::gov::v1::TallyResult* final_tally_result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.final_tally_result_);
  }
  _impl_.final_tally_result_ = final_tally_result;
  if (final_tally_result) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.Proposal.final_tally_result)
}
inline ::cosmos::gov::v1::TallyResult* Proposal::release_final_tally_result() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1::TallyResult* temp = _impl_.final_tally_result_;
  _impl_.final_tally_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::gov::v1::TallyResult* Proposal::unsafe_arena_release_final_tally_result() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.final_tally_result)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::gov::v1::TallyResult* temp = _impl_.final_tally_result_;
  _impl_.final_tally_result_ = nullptr;
  return temp;
}
inline ::cosmos::gov::v1::TallyResult* Proposal::_internal_mutable_final_tally_result() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.final_tally_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::gov::v1::TallyResult>(GetArenaForAllocation());
    _impl_.final_tally_result_ = p;
  }
  return _impl_.final_tally_result_;
}
inline ::cosmos::gov::v1::TallyResult* Proposal::mutable_final_tally_result() {
  ::cosmos::gov::v1::TallyResult* _msg = _internal_mutable_final_tally_result();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.final_tally_result)
  return _msg;
}
inline void Proposal::set_allocated_final_tally_result(::cosmos::gov::v1::TallyResult* final_tally_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.final_tally_result_;
  }
  if (final_tally_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(final_tally_result);
    if (message_arena != submessage_arena) {
      final_tally_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, final_tally_result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.final_tally_result_ = final_tally_result;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.final_tally_result)
}

// .google.protobuf.Timestamp submit_time = 5 [json_name = "submitTime", (.gogoproto.stdtime) = true];
inline bool Proposal::has_submit_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.submit_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::_internal_submit_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.submit_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::submit_time() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.submit_time)
  return _internal_submit_time();
}
inline void Proposal::unsafe_arena_set_allocated_submit_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submit_time_);
  }
  _impl_.submit_time_ = submit_time;
  if (submit_time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.Proposal.submit_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::release_submit_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::unsafe_arena_release_submit_time() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.submit_time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::_internal_mutable_submit_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.submit_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.submit_time_ = p;
  }
  return _impl_.submit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::mutable_submit_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_submit_time();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.submit_time)
  return _msg;
}
inline void Proposal::set_allocated_submit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submit_time_);
  }
  if (submit_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submit_time));
    if (message_arena != submessage_arena) {
      submit_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.submit_time_ = submit_time;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.submit_time)
}

// .google.protobuf.Timestamp deposit_end_time = 6 [json_name = "depositEndTime", (.gogoproto.stdtime) = true];
inline bool Proposal::has_deposit_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deposit_end_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::_internal_deposit_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.deposit_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::deposit_end_time() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.deposit_end_time)
  return _internal_deposit_end_time();
}
inline void Proposal::unsafe_arena_set_allocated_deposit_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deposit_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposit_end_time_);
  }
  _impl_.deposit_end_time_ = deposit_end_time;
  if (deposit_end_time) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.Proposal.deposit_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::release_deposit_end_time() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.deposit_end_time_;
  _impl_.deposit_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::unsafe_arena_release_deposit_end_time() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.deposit_end_time)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.deposit_end_time_;
  _impl_.deposit_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::_internal_mutable_deposit_end_time() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.deposit_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.deposit_end_time_ = p;
  }
  return _impl_.deposit_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::mutable_deposit_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_deposit_end_time();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.deposit_end_time)
  return _msg;
}
inline void Proposal::set_allocated_deposit_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* deposit_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deposit_end_time_);
  }
  if (deposit_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deposit_end_time));
    if (message_arena != submessage_arena) {
      deposit_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deposit_end_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.deposit_end_time_ = deposit_end_time;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.deposit_end_time)
}

// repeated .cosmos.base.v1beta1.Coin total_deposit = 7 [json_name = "totalDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int Proposal::_internal_total_deposit_size() const {
  return _impl_.total_deposit_.size();
}
inline int Proposal::total_deposit_size() const {
  return _internal_total_deposit_size();
}
inline ::cosmos::base::v1beta1::Coin* Proposal::mutable_total_deposit(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.total_deposit)
  return _internal_mutable_total_deposit()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Proposal::mutable_total_deposit() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1.Proposal.total_deposit)
  return _internal_mutable_total_deposit();
}
inline const ::cosmos::base::v1beta1::Coin& Proposal::_internal_total_deposit(int index) const {
  return _internal_total_deposit().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Proposal::total_deposit(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.total_deposit)
  return _internal_total_deposit(index);
}
inline ::cosmos::base::v1beta1::Coin* Proposal::_internal_add_total_deposit() {
  return _internal_mutable_total_deposit()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Proposal::add_total_deposit() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_total_deposit();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1.Proposal.total_deposit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Proposal::total_deposit() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1.Proposal.total_deposit)
  return _internal_total_deposit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Proposal::_internal_total_deposit() const {
  return _impl_.total_deposit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Proposal::_internal_mutable_total_deposit() {
  return &_impl_.total_deposit_;
}

// .google.protobuf.Timestamp voting_start_time = 8 [json_name = "votingStartTime", (.gogoproto.stdtime) = true];
inline bool Proposal::has_voting_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_start_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::_internal_voting_start_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.voting_start_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::voting_start_time() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.voting_start_time)
  return _internal_voting_start_time();
}
inline void Proposal::unsafe_arena_set_allocated_voting_start_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* voting_start_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_start_time_);
  }
  _impl_.voting_start_time_ = voting_start_time;
  if (voting_start_time) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.Proposal.voting_start_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::release_voting_start_time() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.voting_start_time_;
  _impl_.voting_start_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::unsafe_arena_release_voting_start_time() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.voting_start_time)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.voting_start_time_;
  _impl_.voting_start_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::_internal_mutable_voting_start_time() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.voting_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.voting_start_time_ = p;
  }
  return _impl_.voting_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::mutable_voting_start_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_voting_start_time();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.voting_start_time)
  return _msg;
}
inline void Proposal::set_allocated_voting_start_time(::PROTOBUF_NAMESPACE_ID::Timestamp* voting_start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_start_time_);
  }
  if (voting_start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voting_start_time));
    if (message_arena != submessage_arena) {
      voting_start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voting_start_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.voting_start_time_ = voting_start_time;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.voting_start_time)
}

// .google.protobuf.Timestamp voting_end_time = 9 [json_name = "votingEndTime", (.gogoproto.stdtime) = true];
inline bool Proposal::has_voting_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_end_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::_internal_voting_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.voting_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::voting_end_time() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.voting_end_time)
  return _internal_voting_end_time();
}
inline void Proposal::unsafe_arena_set_allocated_voting_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* voting_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_end_time_);
  }
  _impl_.voting_end_time_ = voting_end_time;
  if (voting_end_time) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.Proposal.voting_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::release_voting_end_time() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.voting_end_time_;
  _impl_.voting_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::unsafe_arena_release_voting_end_time() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.voting_end_time)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.voting_end_time_;
  _impl_.voting_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::_internal_mutable_voting_end_time() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.voting_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.voting_end_time_ = p;
  }
  return _impl_.voting_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::mutable_voting_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_voting_end_time();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.voting_end_time)
  return _msg;
}
inline void Proposal::set_allocated_voting_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* voting_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_end_time_);
  }
  if (voting_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voting_end_time));
    if (message_arena != submessage_arena) {
      voting_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voting_end_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.voting_end_time_ = voting_end_time;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.voting_end_time)
}

// string metadata = 10 [json_name = "metadata"];
inline void Proposal::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& Proposal::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Proposal.metadata)
}
inline std::string* Proposal::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.metadata)
  return _s;
}
inline const std::string& Proposal::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void Proposal::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* Proposal::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* Proposal::release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.metadata)
  return _impl_.metadata_.Release();
}
inline void Proposal::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.metadata)
}

// string title = 11 [json_name = "title"];
inline void Proposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Proposal::title() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Proposal.title)
}
inline std::string* Proposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.title)
  return _s;
}
inline const std::string& Proposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Proposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Proposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* Proposal::release_title() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.title)
  return _impl_.title_.Release();
}
inline void Proposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.title)
}

// string summary = 12 [json_name = "summary"];
inline void Proposal::clear_summary() {
  _impl_.summary_.ClearToEmpty();
}
inline const std::string& Proposal::summary() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.summary)
  return _internal_summary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_summary(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.summary_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Proposal.summary)
}
inline std::string* Proposal::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.summary)
  return _s;
}
inline const std::string& Proposal::_internal_summary() const {
  return _impl_.summary_.Get();
}
inline void Proposal::_internal_set_summary(const std::string& value) {
  ;


  _impl_.summary_.Set(value, GetArenaForAllocation());
}
inline std::string* Proposal::_internal_mutable_summary() {
  ;
  return _impl_.summary_.Mutable( GetArenaForAllocation());
}
inline std::string* Proposal::release_summary() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.summary)
  return _impl_.summary_.Release();
}
inline void Proposal::set_allocated_summary(std::string* value) {
  _impl_.summary_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.summary_.IsDefault()) {
          _impl_.summary_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.summary)
}

// string proposer = 13 [json_name = "proposer", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Proposal::clear_proposer() {
  _impl_.proposer_.ClearToEmpty();
}
inline const std::string& Proposal::proposer() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Proposal.proposer)
  return _internal_proposer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_proposer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proposer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Proposal.proposer)
}
inline std::string* Proposal::mutable_proposer() {
  std::string* _s = _internal_mutable_proposer();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Proposal.proposer)
  return _s;
}
inline const std::string& Proposal::_internal_proposer() const {
  return _impl_.proposer_.Get();
}
inline void Proposal::_internal_set_proposer(const std::string& value) {
  ;


  _impl_.proposer_.Set(value, GetArenaForAllocation());
}
inline std::string* Proposal::_internal_mutable_proposer() {
  ;
  return _impl_.proposer_.Mutable( GetArenaForAllocation());
}
inline std::string* Proposal::release_proposer() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Proposal.proposer)
  return _impl_.proposer_.Release();
}
inline void Proposal::set_allocated_proposer(std::string* value) {
  _impl_.proposer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proposer_.IsDefault()) {
          _impl_.proposer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Proposal.proposer)
}

// -------------------------------------------------------------------

// TallyResult

// string yes_count = 1 [json_name = "yesCount", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void TallyResult::clear_yes_count() {
  _impl_.yes_count_.ClearToEmpty();
}
inline const std::string& TallyResult::yes_count() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.TallyResult.yes_count)
  return _internal_yes_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_yes_count(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.yes_count_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.TallyResult.yes_count)
}
inline std::string* TallyResult::mutable_yes_count() {
  std::string* _s = _internal_mutable_yes_count();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.TallyResult.yes_count)
  return _s;
}
inline const std::string& TallyResult::_internal_yes_count() const {
  return _impl_.yes_count_.Get();
}
inline void TallyResult::_internal_set_yes_count(const std::string& value) {
  ;


  _impl_.yes_count_.Set(value, GetArenaForAllocation());
}
inline std::string* TallyResult::_internal_mutable_yes_count() {
  ;
  return _impl_.yes_count_.Mutable( GetArenaForAllocation());
}
inline std::string* TallyResult::release_yes_count() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.TallyResult.yes_count)
  return _impl_.yes_count_.Release();
}
inline void TallyResult::set_allocated_yes_count(std::string* value) {
  _impl_.yes_count_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.yes_count_.IsDefault()) {
          _impl_.yes_count_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.TallyResult.yes_count)
}

// string abstain_count = 2 [json_name = "abstainCount", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void TallyResult::clear_abstain_count() {
  _impl_.abstain_count_.ClearToEmpty();
}
inline const std::string& TallyResult::abstain_count() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.TallyResult.abstain_count)
  return _internal_abstain_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_abstain_count(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.abstain_count_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.TallyResult.abstain_count)
}
inline std::string* TallyResult::mutable_abstain_count() {
  std::string* _s = _internal_mutable_abstain_count();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.TallyResult.abstain_count)
  return _s;
}
inline const std::string& TallyResult::_internal_abstain_count() const {
  return _impl_.abstain_count_.Get();
}
inline void TallyResult::_internal_set_abstain_count(const std::string& value) {
  ;


  _impl_.abstain_count_.Set(value, GetArenaForAllocation());
}
inline std::string* TallyResult::_internal_mutable_abstain_count() {
  ;
  return _impl_.abstain_count_.Mutable( GetArenaForAllocation());
}
inline std::string* TallyResult::release_abstain_count() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.TallyResult.abstain_count)
  return _impl_.abstain_count_.Release();
}
inline void TallyResult::set_allocated_abstain_count(std::string* value) {
  _impl_.abstain_count_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.abstain_count_.IsDefault()) {
          _impl_.abstain_count_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.TallyResult.abstain_count)
}

// string no_count = 3 [json_name = "noCount", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void TallyResult::clear_no_count() {
  _impl_.no_count_.ClearToEmpty();
}
inline const std::string& TallyResult::no_count() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.TallyResult.no_count)
  return _internal_no_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_no_count(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.no_count_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.TallyResult.no_count)
}
inline std::string* TallyResult::mutable_no_count() {
  std::string* _s = _internal_mutable_no_count();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.TallyResult.no_count)
  return _s;
}
inline const std::string& TallyResult::_internal_no_count() const {
  return _impl_.no_count_.Get();
}
inline void TallyResult::_internal_set_no_count(const std::string& value) {
  ;


  _impl_.no_count_.Set(value, GetArenaForAllocation());
}
inline std::string* TallyResult::_internal_mutable_no_count() {
  ;
  return _impl_.no_count_.Mutable( GetArenaForAllocation());
}
inline std::string* TallyResult::release_no_count() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.TallyResult.no_count)
  return _impl_.no_count_.Release();
}
inline void TallyResult::set_allocated_no_count(std::string* value) {
  _impl_.no_count_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.no_count_.IsDefault()) {
          _impl_.no_count_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.TallyResult.no_count)
}

// string no_with_veto_count = 4 [json_name = "noWithVetoCount", (.cosmos_proto.scalar) = "cosmos.Int"];
inline void TallyResult::clear_no_with_veto_count() {
  _impl_.no_with_veto_count_.ClearToEmpty();
}
inline const std::string& TallyResult::no_with_veto_count() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.TallyResult.no_with_veto_count)
  return _internal_no_with_veto_count();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyResult::set_no_with_veto_count(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.no_with_veto_count_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.TallyResult.no_with_veto_count)
}
inline std::string* TallyResult::mutable_no_with_veto_count() {
  std::string* _s = _internal_mutable_no_with_veto_count();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.TallyResult.no_with_veto_count)
  return _s;
}
inline const std::string& TallyResult::_internal_no_with_veto_count() const {
  return _impl_.no_with_veto_count_.Get();
}
inline void TallyResult::_internal_set_no_with_veto_count(const std::string& value) {
  ;


  _impl_.no_with_veto_count_.Set(value, GetArenaForAllocation());
}
inline std::string* TallyResult::_internal_mutable_no_with_veto_count() {
  ;
  return _impl_.no_with_veto_count_.Mutable( GetArenaForAllocation());
}
inline std::string* TallyResult::release_no_with_veto_count() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.TallyResult.no_with_veto_count)
  return _impl_.no_with_veto_count_.Release();
}
inline void TallyResult::set_allocated_no_with_veto_count(std::string* value) {
  _impl_.no_with_veto_count_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.no_with_veto_count_.IsDefault()) {
          _impl_.no_with_veto_count_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.TallyResult.no_with_veto_count)
}

// -------------------------------------------------------------------

// Vote

// uint64 proposal_id = 1 [json_name = "proposalId"];
inline void Vote::clear_proposal_id() {
  _impl_.proposal_id_ = ::uint64_t{0u};
}
inline ::uint64_t Vote::proposal_id() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Vote.proposal_id)
  return _internal_proposal_id();
}
inline void Vote::set_proposal_id(::uint64_t value) {
  _internal_set_proposal_id(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Vote.proposal_id)
}
inline ::uint64_t Vote::_internal_proposal_id() const {
  return _impl_.proposal_id_;
}
inline void Vote::_internal_set_proposal_id(::uint64_t value) {
  ;
  _impl_.proposal_id_ = value;
}

// string voter = 2 [json_name = "voter", (.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void Vote::clear_voter() {
  _impl_.voter_.ClearToEmpty();
}
inline const std::string& Vote::voter() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Vote.voter)
  return _internal_voter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_voter(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.voter_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Vote.voter)
}
inline std::string* Vote::mutable_voter() {
  std::string* _s = _internal_mutable_voter();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Vote.voter)
  return _s;
}
inline const std::string& Vote::_internal_voter() const {
  return _impl_.voter_.Get();
}
inline void Vote::_internal_set_voter(const std::string& value) {
  ;


  _impl_.voter_.Set(value, GetArenaForAllocation());
}
inline std::string* Vote::_internal_mutable_voter() {
  ;
  return _impl_.voter_.Mutable( GetArenaForAllocation());
}
inline std::string* Vote::release_voter() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Vote.voter)
  return _impl_.voter_.Release();
}
inline void Vote::set_allocated_voter(std::string* value) {
  _impl_.voter_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.voter_.IsDefault()) {
          _impl_.voter_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Vote.voter)
}

// repeated .cosmos.gov.v1.WeightedVoteOption options = 4 [json_name = "options"];
inline int Vote::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int Vote::options_size() const {
  return _internal_options_size();
}
inline void Vote::clear_options() {
  _internal_mutable_options()->Clear();
}
inline ::cosmos::gov::v1::WeightedVoteOption* Vote::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Vote.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1::WeightedVoteOption >*
Vote::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1.Vote.options)
  return _internal_mutable_options();
}
inline const ::cosmos::gov::v1::WeightedVoteOption& Vote::_internal_options(int index) const {
  return _internal_options().Get(index);
}
inline const ::cosmos::gov::v1::WeightedVoteOption& Vote::options(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Vote.options)
  return _internal_options(index);
}
inline ::cosmos::gov::v1::WeightedVoteOption* Vote::_internal_add_options() {
  return _internal_mutable_options()->Add();
}
inline ::cosmos::gov::v1::WeightedVoteOption* Vote::add_options() {
  ::cosmos::gov::v1::WeightedVoteOption* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1.Vote.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::gov::v1::WeightedVoteOption >&
Vote::options() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1.Vote.options)
  return _internal_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1::WeightedVoteOption>&
Vote::_internal_options() const {
  return _impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::gov::v1::WeightedVoteOption>*
Vote::_internal_mutable_options() {
  return &_impl_.options_;
}

// string metadata = 5 [json_name = "metadata"];
inline void Vote::clear_metadata() {
  _impl_.metadata_.ClearToEmpty();
}
inline const std::string& Vote::metadata() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Vote.metadata)
  return _internal_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_metadata(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.metadata_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Vote.metadata)
}
inline std::string* Vote::mutable_metadata() {
  std::string* _s = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Vote.metadata)
  return _s;
}
inline const std::string& Vote::_internal_metadata() const {
  return _impl_.metadata_.Get();
}
inline void Vote::_internal_set_metadata(const std::string& value) {
  ;


  _impl_.metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* Vote::_internal_mutable_metadata() {
  ;
  return _impl_.metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* Vote::release_metadata() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Vote.metadata)
  return _impl_.metadata_.Release();
}
inline void Vote::set_allocated_metadata(std::string* value) {
  _impl_.metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.metadata_.IsDefault()) {
          _impl_.metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Vote.metadata)
}

// -------------------------------------------------------------------

// DepositParams

// repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.gogoproto.jsontag) = "min_deposit,omitempty"];
inline int DepositParams::_internal_min_deposit_size() const {
  return _impl_.min_deposit_.size();
}
inline int DepositParams::min_deposit_size() const {
  return _internal_min_deposit_size();
}
inline ::cosmos::base::v1beta1::Coin* DepositParams::mutable_min_deposit(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.DepositParams.min_deposit)
  return _internal_mutable_min_deposit()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
DepositParams::mutable_min_deposit() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1.DepositParams.min_deposit)
  return _internal_mutable_min_deposit();
}
inline const ::cosmos::base::v1beta1::Coin& DepositParams::_internal_min_deposit(int index) const {
  return _internal_min_deposit().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& DepositParams::min_deposit(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.DepositParams.min_deposit)
  return _internal_min_deposit(index);
}
inline ::cosmos::base::v1beta1::Coin* DepositParams::_internal_add_min_deposit() {
  return _internal_mutable_min_deposit()->Add();
}
inline ::cosmos::base::v1beta1::Coin* DepositParams::add_min_deposit() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_min_deposit();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1.DepositParams.min_deposit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
DepositParams::min_deposit() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1.DepositParams.min_deposit)
  return _internal_min_deposit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
DepositParams::_internal_min_deposit() const {
  return _impl_.min_deposit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
DepositParams::_internal_mutable_min_deposit() {
  return &_impl_.min_deposit_;
}

// .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.jsontag) = "max_deposit_period,omitempty", (.gogoproto.stdduration) = true];
inline bool DepositParams::has_max_deposit_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_deposit_period_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DepositParams::_internal_max_deposit_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.max_deposit_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& DepositParams::max_deposit_period() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.DepositParams.max_deposit_period)
  return _internal_max_deposit_period();
}
inline void DepositParams::unsafe_arena_set_allocated_max_deposit_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_deposit_period_);
  }
  _impl_.max_deposit_period_ = max_deposit_period;
  if (max_deposit_period) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.DepositParams.max_deposit_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DepositParams::release_max_deposit_period() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_deposit_period_;
  _impl_.max_deposit_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DepositParams::unsafe_arena_release_max_deposit_period() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.DepositParams.max_deposit_period)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_deposit_period_;
  _impl_.max_deposit_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DepositParams::_internal_mutable_max_deposit_period() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.max_deposit_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.max_deposit_period_ = p;
  }
  return _impl_.max_deposit_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* DepositParams::mutable_max_deposit_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_deposit_period();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.DepositParams.max_deposit_period)
  return _msg;
}
inline void DepositParams::set_allocated_max_deposit_period(::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_deposit_period_);
  }
  if (max_deposit_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_deposit_period));
    if (message_arena != submessage_arena) {
      max_deposit_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_deposit_period, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.max_deposit_period_ = max_deposit_period;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.DepositParams.max_deposit_period)
}

// -------------------------------------------------------------------

// VotingParams

// .google.protobuf.Duration voting_period = 1 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
inline bool VotingParams::has_voting_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_period_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& VotingParams::_internal_voting_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.voting_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& VotingParams::voting_period() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.VotingParams.voting_period)
  return _internal_voting_period();
}
inline void VotingParams::unsafe_arena_set_allocated_voting_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* voting_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_period_);
  }
  _impl_.voting_period_ = voting_period;
  if (voting_period) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.VotingParams.voting_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* VotingParams::release_voting_period() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.voting_period_;
  _impl_.voting_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* VotingParams::unsafe_arena_release_voting_period() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.VotingParams.voting_period)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.voting_period_;
  _impl_.voting_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* VotingParams::_internal_mutable_voting_period() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.voting_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.voting_period_ = p;
  }
  return _impl_.voting_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* VotingParams::mutable_voting_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_voting_period();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.VotingParams.voting_period)
  return _msg;
}
inline void VotingParams::set_allocated_voting_period(::PROTOBUF_NAMESPACE_ID::Duration* voting_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_period_);
  }
  if (voting_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voting_period));
    if (message_arena != submessage_arena) {
      voting_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voting_period, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.voting_period_ = voting_period;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.VotingParams.voting_period)
}

// -------------------------------------------------------------------

// TallyParams

// string quorum = 1 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void TallyParams::clear_quorum() {
  _impl_.quorum_.ClearToEmpty();
}
inline const std::string& TallyParams::quorum() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.TallyParams.quorum)
  return _internal_quorum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyParams::set_quorum(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quorum_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.TallyParams.quorum)
}
inline std::string* TallyParams::mutable_quorum() {
  std::string* _s = _internal_mutable_quorum();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.TallyParams.quorum)
  return _s;
}
inline const std::string& TallyParams::_internal_quorum() const {
  return _impl_.quorum_.Get();
}
inline void TallyParams::_internal_set_quorum(const std::string& value) {
  ;


  _impl_.quorum_.Set(value, GetArenaForAllocation());
}
inline std::string* TallyParams::_internal_mutable_quorum() {
  ;
  return _impl_.quorum_.Mutable( GetArenaForAllocation());
}
inline std::string* TallyParams::release_quorum() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.TallyParams.quorum)
  return _impl_.quorum_.Release();
}
inline void TallyParams::set_allocated_quorum(std::string* value) {
  _impl_.quorum_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quorum_.IsDefault()) {
          _impl_.quorum_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.TallyParams.quorum)
}

// string threshold = 2 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void TallyParams::clear_threshold() {
  _impl_.threshold_.ClearToEmpty();
}
inline const std::string& TallyParams::threshold() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.TallyParams.threshold)
  return _internal_threshold();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyParams::set_threshold(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.threshold_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.TallyParams.threshold)
}
inline std::string* TallyParams::mutable_threshold() {
  std::string* _s = _internal_mutable_threshold();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.TallyParams.threshold)
  return _s;
}
inline const std::string& TallyParams::_internal_threshold() const {
  return _impl_.threshold_.Get();
}
inline void TallyParams::_internal_set_threshold(const std::string& value) {
  ;


  _impl_.threshold_.Set(value, GetArenaForAllocation());
}
inline std::string* TallyParams::_internal_mutable_threshold() {
  ;
  return _impl_.threshold_.Mutable( GetArenaForAllocation());
}
inline std::string* TallyParams::release_threshold() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.TallyParams.threshold)
  return _impl_.threshold_.Release();
}
inline void TallyParams::set_allocated_threshold(std::string* value) {
  _impl_.threshold_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.threshold_.IsDefault()) {
          _impl_.threshold_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.TallyParams.threshold)
}

// string veto_threshold = 3 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void TallyParams::clear_veto_threshold() {
  _impl_.veto_threshold_.ClearToEmpty();
}
inline const std::string& TallyParams::veto_threshold() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.TallyParams.veto_threshold)
  return _internal_veto_threshold();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TallyParams::set_veto_threshold(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.veto_threshold_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.TallyParams.veto_threshold)
}
inline std::string* TallyParams::mutable_veto_threshold() {
  std::string* _s = _internal_mutable_veto_threshold();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.TallyParams.veto_threshold)
  return _s;
}
inline const std::string& TallyParams::_internal_veto_threshold() const {
  return _impl_.veto_threshold_.Get();
}
inline void TallyParams::_internal_set_veto_threshold(const std::string& value) {
  ;


  _impl_.veto_threshold_.Set(value, GetArenaForAllocation());
}
inline std::string* TallyParams::_internal_mutable_veto_threshold() {
  ;
  return _impl_.veto_threshold_.Mutable( GetArenaForAllocation());
}
inline std::string* TallyParams::release_veto_threshold() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.TallyParams.veto_threshold)
  return _impl_.veto_threshold_.Release();
}
inline void TallyParams::set_allocated_veto_threshold(std::string* value) {
  _impl_.veto_threshold_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.veto_threshold_.IsDefault()) {
          _impl_.veto_threshold_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.TallyParams.veto_threshold)
}

// -------------------------------------------------------------------

// Params

// repeated .cosmos.base.v1beta1.Coin min_deposit = 1 [json_name = "minDeposit", (.gogoproto.nullable) = false, (.amino.dont_omitempty) = true];
inline int Params::_internal_min_deposit_size() const {
  return _impl_.min_deposit_.size();
}
inline int Params::min_deposit_size() const {
  return _internal_min_deposit_size();
}
inline ::cosmos::base::v1beta1::Coin* Params::mutable_min_deposit(int index) {
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Params.min_deposit)
  return _internal_mutable_min_deposit()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Params::mutable_min_deposit() {
  // @@protoc_insertion_point(field_mutable_list:cosmos.gov.v1.Params.min_deposit)
  return _internal_mutable_min_deposit();
}
inline const ::cosmos::base::v1beta1::Coin& Params::_internal_min_deposit(int index) const {
  return _internal_min_deposit().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Params::min_deposit(int index) const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.min_deposit)
  return _internal_min_deposit(index);
}
inline ::cosmos::base::v1beta1::Coin* Params::_internal_add_min_deposit() {
  return _internal_mutable_min_deposit()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Params::add_min_deposit() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_min_deposit();
  // @@protoc_insertion_point(field_add:cosmos.gov.v1.Params.min_deposit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Params::min_deposit() const {
  // @@protoc_insertion_point(field_list:cosmos.gov.v1.Params.min_deposit)
  return _internal_min_deposit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Params::_internal_min_deposit() const {
  return _impl_.min_deposit_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Params::_internal_mutable_min_deposit() {
  return &_impl_.min_deposit_;
}

// .google.protobuf.Duration max_deposit_period = 2 [json_name = "maxDepositPeriod", (.gogoproto.stdduration) = true];
inline bool Params::has_max_deposit_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_deposit_period_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Params::_internal_max_deposit_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.max_deposit_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Params::max_deposit_period() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.max_deposit_period)
  return _internal_max_deposit_period();
}
inline void Params::unsafe_arena_set_allocated_max_deposit_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_deposit_period_);
  }
  _impl_.max_deposit_period_ = max_deposit_period;
  if (max_deposit_period) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.Params.max_deposit_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::release_max_deposit_period() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_deposit_period_;
  _impl_.max_deposit_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::unsafe_arena_release_max_deposit_period() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Params.max_deposit_period)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_deposit_period_;
  _impl_.max_deposit_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::_internal_mutable_max_deposit_period() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.max_deposit_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.max_deposit_period_ = p;
  }
  return _impl_.max_deposit_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::mutable_max_deposit_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_deposit_period();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Params.max_deposit_period)
  return _msg;
}
inline void Params::set_allocated_max_deposit_period(::PROTOBUF_NAMESPACE_ID::Duration* max_deposit_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_deposit_period_);
  }
  if (max_deposit_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_deposit_period));
    if (message_arena != submessage_arena) {
      max_deposit_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_deposit_period, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.max_deposit_period_ = max_deposit_period;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Params.max_deposit_period)
}

// .google.protobuf.Duration voting_period = 3 [json_name = "votingPeriod", (.gogoproto.stdduration) = true];
inline bool Params::has_voting_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.voting_period_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Params::_internal_voting_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.voting_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Params::voting_period() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.voting_period)
  return _internal_voting_period();
}
inline void Params::unsafe_arena_set_allocated_voting_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* voting_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_period_);
  }
  _impl_.voting_period_ = voting_period;
  if (voting_period) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cosmos.gov.v1.Params.voting_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::release_voting_period() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.voting_period_;
  _impl_.voting_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::unsafe_arena_release_voting_period() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Params.voting_period)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.voting_period_;
  _impl_.voting_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::_internal_mutable_voting_period() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.voting_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.voting_period_ = p;
  }
  return _impl_.voting_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Params::mutable_voting_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_voting_period();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Params.voting_period)
  return _msg;
}
inline void Params::set_allocated_voting_period(::PROTOBUF_NAMESPACE_ID::Duration* voting_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.voting_period_);
  }
  if (voting_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(voting_period));
    if (message_arena != submessage_arena) {
      voting_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voting_period, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.voting_period_ = voting_period;
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Params.voting_period)
}

// string quorum = 4 [json_name = "quorum", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Params::clear_quorum() {
  _impl_.quorum_.ClearToEmpty();
}
inline const std::string& Params::quorum() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.quorum)
  return _internal_quorum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_quorum(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quorum_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Params.quorum)
}
inline std::string* Params::mutable_quorum() {
  std::string* _s = _internal_mutable_quorum();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Params.quorum)
  return _s;
}
inline const std::string& Params::_internal_quorum() const {
  return _impl_.quorum_.Get();
}
inline void Params::_internal_set_quorum(const std::string& value) {
  ;


  _impl_.quorum_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_quorum() {
  ;
  return _impl_.quorum_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_quorum() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Params.quorum)
  return _impl_.quorum_.Release();
}
inline void Params::set_allocated_quorum(std::string* value) {
  _impl_.quorum_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quorum_.IsDefault()) {
          _impl_.quorum_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Params.quorum)
}

// string threshold = 5 [json_name = "threshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Params::clear_threshold() {
  _impl_.threshold_.ClearToEmpty();
}
inline const std::string& Params::threshold() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.threshold)
  return _internal_threshold();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_threshold(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.threshold_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Params.threshold)
}
inline std::string* Params::mutable_threshold() {
  std::string* _s = _internal_mutable_threshold();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Params.threshold)
  return _s;
}
inline const std::string& Params::_internal_threshold() const {
  return _impl_.threshold_.Get();
}
inline void Params::_internal_set_threshold(const std::string& value) {
  ;


  _impl_.threshold_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_threshold() {
  ;
  return _impl_.threshold_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_threshold() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Params.threshold)
  return _impl_.threshold_.Release();
}
inline void Params::set_allocated_threshold(std::string* value) {
  _impl_.threshold_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.threshold_.IsDefault()) {
          _impl_.threshold_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Params.threshold)
}

// string veto_threshold = 6 [json_name = "vetoThreshold", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Params::clear_veto_threshold() {
  _impl_.veto_threshold_.ClearToEmpty();
}
inline const std::string& Params::veto_threshold() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.veto_threshold)
  return _internal_veto_threshold();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_veto_threshold(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.veto_threshold_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Params.veto_threshold)
}
inline std::string* Params::mutable_veto_threshold() {
  std::string* _s = _internal_mutable_veto_threshold();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Params.veto_threshold)
  return _s;
}
inline const std::string& Params::_internal_veto_threshold() const {
  return _impl_.veto_threshold_.Get();
}
inline void Params::_internal_set_veto_threshold(const std::string& value) {
  ;


  _impl_.veto_threshold_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_veto_threshold() {
  ;
  return _impl_.veto_threshold_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_veto_threshold() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Params.veto_threshold)
  return _impl_.veto_threshold_.Release();
}
inline void Params::set_allocated_veto_threshold(std::string* value) {
  _impl_.veto_threshold_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.veto_threshold_.IsDefault()) {
          _impl_.veto_threshold_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Params.veto_threshold)
}

// string min_initial_deposit_ratio = 7 [json_name = "minInitialDepositRatio", (.cosmos_proto.scalar) = "cosmos.Dec"];
inline void Params::clear_min_initial_deposit_ratio() {
  _impl_.min_initial_deposit_ratio_.ClearToEmpty();
}
inline const std::string& Params::min_initial_deposit_ratio() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.min_initial_deposit_ratio)
  return _internal_min_initial_deposit_ratio();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_min_initial_deposit_ratio(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.min_initial_deposit_ratio_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Params.min_initial_deposit_ratio)
}
inline std::string* Params::mutable_min_initial_deposit_ratio() {
  std::string* _s = _internal_mutable_min_initial_deposit_ratio();
  // @@protoc_insertion_point(field_mutable:cosmos.gov.v1.Params.min_initial_deposit_ratio)
  return _s;
}
inline const std::string& Params::_internal_min_initial_deposit_ratio() const {
  return _impl_.min_initial_deposit_ratio_.Get();
}
inline void Params::_internal_set_min_initial_deposit_ratio(const std::string& value) {
  ;


  _impl_.min_initial_deposit_ratio_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_min_initial_deposit_ratio() {
  ;
  return _impl_.min_initial_deposit_ratio_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_min_initial_deposit_ratio() {
  // @@protoc_insertion_point(field_release:cosmos.gov.v1.Params.min_initial_deposit_ratio)
  return _impl_.min_initial_deposit_ratio_.Release();
}
inline void Params::set_allocated_min_initial_deposit_ratio(std::string* value) {
  _impl_.min_initial_deposit_ratio_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.min_initial_deposit_ratio_.IsDefault()) {
          _impl_.min_initial_deposit_ratio_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cosmos.gov.v1.Params.min_initial_deposit_ratio)
}

// bool burn_vote_quorum = 13 [json_name = "burnVoteQuorum"];
inline void Params::clear_burn_vote_quorum() {
  _impl_.burn_vote_quorum_ = false;
}
inline bool Params::burn_vote_quorum() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.burn_vote_quorum)
  return _internal_burn_vote_quorum();
}
inline void Params::set_burn_vote_quorum(bool value) {
  _internal_set_burn_vote_quorum(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Params.burn_vote_quorum)
}
inline bool Params::_internal_burn_vote_quorum() const {
  return _impl_.burn_vote_quorum_;
}
inline void Params::_internal_set_burn_vote_quorum(bool value) {
  ;
  _impl_.burn_vote_quorum_ = value;
}

// bool burn_proposal_deposit_prevote = 14 [json_name = "burnProposalDepositPrevote"];
inline void Params::clear_burn_proposal_deposit_prevote() {
  _impl_.burn_proposal_deposit_prevote_ = false;
}
inline bool Params::burn_proposal_deposit_prevote() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.burn_proposal_deposit_prevote)
  return _internal_burn_proposal_deposit_prevote();
}
inline void Params::set_burn_proposal_deposit_prevote(bool value) {
  _internal_set_burn_proposal_deposit_prevote(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Params.burn_proposal_deposit_prevote)
}
inline bool Params::_internal_burn_proposal_deposit_prevote() const {
  return _impl_.burn_proposal_deposit_prevote_;
}
inline void Params::_internal_set_burn_proposal_deposit_prevote(bool value) {
  ;
  _impl_.burn_proposal_deposit_prevote_ = value;
}

// bool burn_vote_veto = 15 [json_name = "burnVoteVeto"];
inline void Params::clear_burn_vote_veto() {
  _impl_.burn_vote_veto_ = false;
}
inline bool Params::burn_vote_veto() const {
  // @@protoc_insertion_point(field_get:cosmos.gov.v1.Params.burn_vote_veto)
  return _internal_burn_vote_veto();
}
inline void Params::set_burn_vote_veto(bool value) {
  _internal_set_burn_vote_veto(value);
  // @@protoc_insertion_point(field_set:cosmos.gov.v1.Params.burn_vote_veto)
}
inline bool Params::_internal_burn_vote_veto() const {
  return _impl_.burn_vote_veto_;
}
inline void Params::_internal_set_burn_vote_veto(bool value) {
  ;
  _impl_.burn_vote_veto_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace gov
}  // namespace cosmos


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::cosmos::gov::v1::VoteOption> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::gov::v1::VoteOption>() {
  return ::cosmos::gov::v1::VoteOption_descriptor();
}
template <>
struct is_proto_enum<::cosmos::gov::v1::ProposalStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::cosmos::gov::v1::ProposalStatus>() {
  return ::cosmos::gov::v1::ProposalStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_cosmos_2fgov_2fv1_2fgov_2eproto_2epb_2eh
